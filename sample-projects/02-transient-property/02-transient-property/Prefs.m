//-----------------------------------------------------------------------------*
//                                                                             *
//                               File 'Prefs.m'                                *
//                     Generated by version 0.0.1 [debug]                      *
//                        june 4th, 2014, at 17h50'44"                         *
//                                                                             *
//-----------------------------------------------------------------------------*

//--- START OF USER ZONE 1

#define EASY_BINDINGS_DEBUG

//--- END OF USER ZONE 1

#import "easy-bindings-utilities.h"
#import "PMAllocationDebug.h"
#import "PMApplication.h"
#import "Prefs.h"
#import "Prefs-computations.h"
#import <objc/runtime.h>

//----------------------------------------------------------------------------*

Prefs * g_Prefs ;

//----------------------------------------------------------------------------*

@implementation Prefs

//----------------------------------------------------------------------------*
//    Synthesize properties                                                   *
//----------------------------------------------------------------------------*

@synthesize mName ;
@synthesize mFirstName ;

//----------------------------------------------------------------------------*
//    Init                                                                    *
//----------------------------------------------------------------------------*

- (instancetype) init {
  #ifdef EASY_BINDINGS_DEBUG
    NSLog (@"%s", __PRETTY_FUNCTION__) ;
  #endif
  self = [super init] ;
  if (self) {
    macroNoteObjectAllocation ;
    g_Prefs = self ;
  //---
    NSUserDefaults * ud = [NSUserDefaults standardUserDefaults] ;
  //---
    id value ;
    value = [ud objectForKey:@"Prefs:mName"] ;
    if (nil == value) {
      self.mName = @"Am\xC3""\xA9""d\xC3""\xA9""e" ;
    }else{
      self.mName =  (value) ;
    }
    value = [ud objectForKey:@"Prefs:mFirstName"] ;
    if (nil == value) {
      self.mFirstName = @"Schmurtz" ;
    }else{
      self.mFirstName =  (value) ;
    }
  //---
    [[NSNotificationCenter defaultCenter]
      addObserver:self
      selector:@selector(applicationWillTerminateAction:)
      name:NSApplicationWillTerminateNotification
      object:nil
    ] ;
  //---
    [self Prefs_did_init] ;
  }
  return self ;
}

//----------------------------------------------------------------------------*
//    Dealloc                                                                 *
//----------------------------------------------------------------------------*

- (void) dealloc {
  macroNoteObjectDeallocation ;
  macroSuperDealloc ;
}

//----------------------------------------------------------------------------*
//    applicationWillTerminateAction:                                         *
//----------------------------------------------------------------------------*

- (void) applicationWillTerminateAction: (NSNotification *) inNotification {
  NSUserDefaults * ud = [NSUserDefaults standardUserDefaults] ;
//---
  [ud setObject: (mName) forKey:@"Prefs:mName"] ;
  [ud setObject: (mFirstName) forKey:@"Prefs:mFirstName"] ;
}

//----------------------------------------------------------------------------*
//    awakeFromNib                                                            *
//----------------------------------------------------------------------------*

- (void) awakeFromNib {
  #ifdef EASY_BINDINGS_DEBUG
    NSLog (@"%s", __PRETTY_FUNCTION__) ;
  #endif
//--- check mNameTextField' outlet not nil
  if (nil == mNameTextField) {
    presentErrorWindow (__FILE__, __LINE__, @"the 'mNameTextField' outlet is nil") ;
  }
  [mNameTextField
    bind:@"value"
    toObject:self
    withKeyPath:@"mName"
    options:nil
  ] ;
//--- check mFirstNameTextField' outlet not nil
  if (nil == mFirstNameTextField) {
    presentErrorWindow (__FILE__, __LINE__, @"the 'mFirstNameTextField' outlet is nil") ;
  }
  [mFirstNameTextField
    bind:@"value"
    toObject:self
    withKeyPath:@"mFirstName"
    options:nil
  ] ;
//--- check mFullNameTextField' outlet not nil
  if (nil == mFullNameTextField) {
    presentErrorWindow (__FILE__, __LINE__, @"the 'mFullNameTextField' outlet is nil") ;
  }
  [mFullNameTextField
    bind:@"value"
    toObject:self
    withKeyPath:@"mFullName"
    options:nil
  ] ;
//--- check mUpperCaseFullNameTextField' outlet not nil
  if (nil == mUpperCaseFullNameTextField) {
    presentErrorWindow (__FILE__, __LINE__, @"the 'mUpperCaseFullNameTextField' outlet is nil") ;
  }
  [mUpperCaseFullNameTextField
    bind:@"value"
    toObject:self
    withKeyPath:@"mUpperCaseFullName"
    options:nil
  ] ;

//---
  [self Prefs_did_awakeFromNib] ;
}

//----------------------------------------------------------------------------*
//    Swizzle                                                                 *
//----------------------------------------------------------------------------*

+ (void) load {
  Method original, swizzled ;
  original = class_getInstanceMethod (self, @selector (setMName:));
  swizzled = class_getInstanceMethod (self, @selector (setMName_swizzle:));
  method_exchangeImplementations (original, swizzled) ;
  original = class_getInstanceMethod (self, @selector (setMFirstName:));
  swizzled = class_getInstanceMethod (self, @selector (setMFirstName_swizzle:));
  method_exchangeImplementations (original, swizzled) ;
}

//----------------------------------------------------------------------------*
//    'mName' attribute                                            *
//----------------------------------------------------------------------------*

- (void) setMName_swizzle: (NSString *) inObject {
  if (! ([self.mName isEqualToString:inObject])) {
    [self setMName_swizzle:inObject] ;
    [mName_observers makeObjectsPerformSelector:@selector (preference_2E_Prefs_2E_mName_didChange)] ;
  //--- Trigger 'mFullName transient'
    if (mFullName__computed) {
      mFullName__computed = NO ;
      [PMApplication
        enterTriggerForObject:self
        transientIndex:preference_2E_Prefs_2E_mFullName
      ] ;
    }
  //--- Trigger 'mUpperCaseFullName transient'
    if (mUpperCaseFullName__computed) {
      mUpperCaseFullName__computed = NO ;
      [PMApplication
        enterTriggerForObject:self
        transientIndex:preference_2E_Prefs_2E_mUpperCaseFullName
      ] ;
    }
  }
}

//----------------------------------------------------------------------------*

- (void) addObserverOf_mName: (id) inObserver {
  if (nil == mName_observers) {
    mName_observers = [NSMutableSet new] ;
  }
  [mName_observers addObject:inObserver] ;
  #ifdef PM_COCOA_DEBUG
    const BOOL ok =
  #endif
   [NSApp sendAction:@selector (preference_2E_Prefs_2E_mName_didChange) to:inObserver from:self] ;
  macroAssert (ok, @"NSApp sendAction fail", 0, 0) ;
//  [inObserver performSelector:@selector (preference_2E_Prefs_2E_mName_didChange)] ;
}

//----------------------------------------------------------------------------*

- (void) removeObserverOf_mName: (id) inObserver {
  [mName_observers removeObject:inObserver] ;
  #ifdef PM_COCOA_DEBUG
    const BOOL ok =
  #endif
   [NSApp sendAction:@selector (preference_2E_Prefs_2E_mName_didChange) to:inObserver from:self] ;
  macroAssert (ok, @"NSApp sendAction fail", 0, 0) ;
//  [inObserver performSelector:@selector (preference_2E_Prefs_2E_mName_didChange)] ;
}

//----------------------------------------------------------------------------*
//    'mFirstName' attribute                                            *
//----------------------------------------------------------------------------*

- (void) setMFirstName_swizzle: (NSString *) inObject {
  if (! ([self.mFirstName isEqualToString:inObject])) {
    [self setMFirstName_swizzle:inObject] ;
    [mFirstName_observers makeObjectsPerformSelector:@selector (preference_2E_Prefs_2E_mFirstName_didChange)] ;
  //--- Trigger 'mFullName transient'
    if (mFullName__computed) {
      mFullName__computed = NO ;
      [PMApplication
        enterTriggerForObject:self
        transientIndex:preference_2E_Prefs_2E_mFullName
      ] ;
    }
  //--- Trigger 'mUpperCaseFullName transient'
    if (mUpperCaseFullName__computed) {
      mUpperCaseFullName__computed = NO ;
      [PMApplication
        enterTriggerForObject:self
        transientIndex:preference_2E_Prefs_2E_mUpperCaseFullName
      ] ;
    }
  }
}

//----------------------------------------------------------------------------*

- (void) addObserverOf_mFirstName: (id) inObserver {
  if (nil == mFirstName_observers) {
    mFirstName_observers = [NSMutableSet new] ;
  }
  [mFirstName_observers addObject:inObserver] ;
  #ifdef PM_COCOA_DEBUG
    const BOOL ok =
  #endif
   [NSApp sendAction:@selector (preference_2E_Prefs_2E_mFirstName_didChange) to:inObserver from:self] ;
  macroAssert (ok, @"NSApp sendAction fail", 0, 0) ;
//  [inObserver performSelector:@selector (preference_2E_Prefs_2E_mFirstName_didChange)] ;
}

//----------------------------------------------------------------------------*

- (void) removeObserverOf_mFirstName: (id) inObserver {
  [mFirstName_observers removeObject:inObserver] ;
  #ifdef PM_COCOA_DEBUG
    const BOOL ok =
  #endif
   [NSApp sendAction:@selector (preference_2E_Prefs_2E_mFirstName_didChange) to:inObserver from:self] ;
  macroAssert (ok, @"NSApp sendAction fail", 0, 0) ;
//  [inObserver performSelector:@selector (preference_2E_Prefs_2E_mFirstName_didChange)] ;
}

//----------------------------------------------------------------------------*
// Cache routine of 'mFullName' transient     *
//----------------------------------------------------------------------------*

- (NSString *) mFullName {
  if (! mFullName__computed) {
    mFullName__cache = compute_Prefs_mFullName (self.mName, self.mFirstName) ;
    mFullName__computed = YES ;
  }
  return mFullName__cache.copy ;
}

//----------------------------------------------------------------------------*
// Cache routine of 'mUpperCaseFullName' transient     *
//----------------------------------------------------------------------------*

- (NSString *) mUpperCaseFullName {
  if (! mUpperCaseFullName__computed) {
    mUpperCaseFullName__cache = compute_Prefs_mUpperCaseFullName (self.mFullName) ;
    mUpperCaseFullName__computed = YES ;
  }
  return mUpperCaseFullName__cache.copy ;
}

//----------------------------------------------------------------------------*


//--- START OF USER ZONE 2

- (IBAction) monAction: (id) inSender {
  NSLog (@"%s BEGIN", __PRETTY_FUNCTION__) ;
  self.mFirstName = @"Amédée" ;
  NSLog (@"%s BETWEEN", __PRETTY_FUNCTION__) ;
  self.mName = @"Schmurtz" ;
  NSLog (@"%s END", __PRETTY_FUNCTION__) ;
}

//----------------------------------------------------------------------------*

- (void) Prefs_did_init {
}

//----------------------------------------------------------------------------*

- (void) Prefs_did_awakeFromNib {
}

//----------------------------------------------------------------------------*

//--- END OF USER ZONE 2

@end

