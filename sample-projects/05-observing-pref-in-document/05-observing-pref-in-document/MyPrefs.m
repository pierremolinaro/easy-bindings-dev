//-----------------------------------------------------------------------------*
//                                                                             *
//                              File 'MyPrefs.m'                               *
//                     Generated by version 0.0.1 [debug]                      *
//                        june 4th, 2014, at 11h46'27"                         *
//                                                                             *
//-----------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#import "easy-bindings-utilities.h"
#import "PMAllocationDebug.h"
#import "PMApplication.h"
#import "MyPrefs.h"
#import "MyPrefs-computations.h"
#import <objc/runtime.h>

//----------------------------------------------------------------------------*

MyPrefs * g_MyPrefs ;

//----------------------------------------------------------------------------*

@implementation MyPrefs

//----------------------------------------------------------------------------*
//    Synthesize properties                                                   *
//----------------------------------------------------------------------------*

@synthesize myPrefString ;

//----------------------------------------------------------------------------*
//    Init                                                                    *
//----------------------------------------------------------------------------*

- (instancetype) init {
  #ifdef EASY_BINDINGS_DEBUG
    NSLog (@"%s", __PRETTY_FUNCTION__) ;
  #endif
  self = [super init] ;
  if (self) {
    macroNoteObjectAllocation ;
    g_MyPrefs = self ;
  //---
    NSUserDefaults * ud = [NSUserDefaults standardUserDefaults] ;
  //---
    id value ;
    value = [ud objectForKey:@"MyPrefs:myPrefString"] ;
    if (nil == value) {
      self.myPrefString = @"pref string" ;
    }else{
      self.myPrefString =  (value) ;
    }
  //---
    [[NSNotificationCenter defaultCenter]
      addObserver:self
      selector:@selector(applicationWillTerminateAction:)
      name:NSApplicationWillTerminateNotification
      object:nil
    ] ;
  //---
    [self MyPrefs_did_init] ;
  }
  return self ;
}

//----------------------------------------------------------------------------*
//    Dealloc                                                                 *
//----------------------------------------------------------------------------*

- (void) dealloc {
  macroNoteObjectDeallocation ;
  macroSuperDealloc ;
}

//----------------------------------------------------------------------------*
//    applicationWillTerminateAction:                                         *
//----------------------------------------------------------------------------*

- (void) applicationWillTerminateAction: (NSNotification *) inNotification {
  NSUserDefaults * ud = [NSUserDefaults standardUserDefaults] ;
//---
  [ud setObject: (myPrefString) forKey:@"MyPrefs:myPrefString"] ;
}

//----------------------------------------------------------------------------*
//    awakeFromNib                                                            *
//----------------------------------------------------------------------------*

- (void) awakeFromNib {
  #ifdef EASY_BINDINGS_DEBUG
    NSLog (@"%s", __PRETTY_FUNCTION__) ;
  #endif
//--- check myPrefStringTextField' outlet not nil
  if (nil == myPrefStringTextField) {
    presentErrorWindow (__FILE__, __LINE__, @"the 'myPrefStringTextField' outlet is nil") ;
  }
  [myPrefStringTextField
    bind:@"value"
    toObject:self
    withKeyPath:@"myPrefString"
    options:nil
  ] ;

//---
  [self MyPrefs_did_awakeFromNib] ;
}

//----------------------------------------------------------------------------*
//    Swizzle                                                                 *
//----------------------------------------------------------------------------*

+ (void) load {
  Method original, swizzled ;
  original = class_getInstanceMethod (self, @selector (setMyPrefString:));
  swizzled = class_getInstanceMethod (self, @selector (setMyPrefString_swizzle:));
  method_exchangeImplementations (original, swizzled) ;
}

//----------------------------------------------------------------------------*
//    'myPrefString' attribute                                            *
//----------------------------------------------------------------------------*

- (void) setMyPrefString_swizzle: (NSString *) inObject {
  if (! ([self.myPrefString isEqualToString:inObject])) {
    [self setMyPrefString_swizzle:inObject] ;
    [myPrefString_observers makeObjectsPerformSelector:@selector (preference_2E_MyPrefs_2E_myPrefString_didChange)] ;
  //--- Trigger 'prefTransientString transient'
    if (prefTransientString__computed) {
      prefTransientString__computed = NO ;
      [PMApplication
        enterTriggerForObject:self
        transientIndex:preference_2E_MyPrefs_2E_prefTransientString
      ] ;
    }
  }
}

//----------------------------------------------------------------------------*

- (void) addObserverOf_myPrefString: (id) inObserver {
  if (nil == myPrefString_observers) {
    myPrefString_observers = [NSMutableSet new] ;
  }
  [myPrefString_observers addObject:inObserver] ;
  [NSApp sendAction:@selector (preference_2E_MyPrefs_2E_myPrefString_didChange) to:inObserver from:self] ;
//  [inObserver performSelector:@selector (preference_2E_MyPrefs_2E_myPrefString_didChange)] ;
}

//----------------------------------------------------------------------------*

- (void) removeObserverOf_myPrefString: (id) inObserver {
  [myPrefString_observers removeObject:inObserver] ;
  [NSApp sendAction:@selector (preference_2E_MyPrefs_2E_myPrefString_didChange) to:inObserver from:self] ;
//  [inObserver performSelector:@selector (preference_2E_MyPrefs_2E_myPrefString_didChange)] ;
}

//----------------------------------------------------------------------------*
// Cache routine of 'prefTransientString' transient     *
//----------------------------------------------------------------------------*

- (NSString *) prefTransientString {
  if (! prefTransientString__computed) {
    prefTransientString__cache = compute_MyPrefs_prefTransientString (self.myPrefString) ;
    prefTransientString__computed = YES ;
  }
  return prefTransientString__cache.copy ;
}

//----------------------------------------------------------------------------*


//--- START OF USER ZONE 2

//----------------------------------------------------------------------------*

- (void) MyPrefs_did_init {
}

//----------------------------------------------------------------------------*

- (void) MyPrefs_did_awakeFromNib {
}

//----------------------------------------------------------------------------*

//--- END OF USER ZONE 2

@end

