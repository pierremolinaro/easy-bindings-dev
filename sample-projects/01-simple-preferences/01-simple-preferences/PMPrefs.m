//---------------------------------------------------------------------------*
//                                                                           *
//                             File 'PMPrefs.m'                              *
//                    Generated by version 0.0.1 [debug]                     *
//                    november 17th, 2012, at 17h57'10"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#import "easy-bindings-utilities.h"
#import "PMTransientDependancyManager.h"
#import "PMPrefs.h"
#import "PMPrefs-computations.h"

#import <objc/runtime.h>

//----------------------------------------------------------------------------*

PMPrefs * g_PMPrefs ;

//----------------------------------------------------------------------------*

@implementation PMPrefs

//----------------------------------------------------------------------------*
//    Synthesize properties                                                   *
//----------------------------------------------------------------------------*

@synthesize myString ;
@synthesize mColor ;
@synthesize mDate ;
@synthesize mInteger32Value ;

//----------------------------------------------------------------------------*
//    Init                                                                    *
//----------------------------------------------------------------------------*

- (id) init {
  #ifdef EASY_BINDINGS_DEBUG
    NSLog (@"%s", __PRETTY_FUNCTION__) ;
  #endif
  self = [super init] ;
  if (self) {
    #ifdef PM_COCOA_DEBUG
      objectHasBeenAllocated (self) ;
    #endif
    g_PMPrefs = self ;
  //---
    NSUserDefaults * ud = [NSUserDefaults standardUserDefaults] ;
    id value ;
    value = [ud objectForKey:@"PMPrefs:myString"] ;
    if (nil == value) {
      self.myString = @"hello" ;
    }else{
      self.myString =  (value) ;
    }
    value = [ud objectForKey:@"PMPrefs:mColor"] ;
    if (nil == value) {
      self.mColor = [NSColor yellowColor] ;
    }else{
      self.mColor = valueFromData (value) ;
    }
    value = [ud objectForKey:@"PMPrefs:mDate"] ;
    if (nil == value) {
      self.mDate = [NSDate date] ;
    }else{
      self.mDate =  (value) ;
    }
    value = [ud objectForKey:@"PMPrefs:mInteger32Value"] ;
    if (nil == value) {
      self.mInteger32Value = 123 ;
    }else{
      self.mInteger32Value = sint32FromNSNumber (value) ;
    }
  //---
    [[NSNotificationCenter defaultCenter]
      addObserver:self
      selector:@selector(applicationWillTerminateAction:)
      name:NSApplicationWillTerminateNotification
      object:nil
    ] ;
  }
  return self ;
}

//----------------------------------------------------------------------------*
//    applicationWillTerminateAction:                                         *
//----------------------------------------------------------------------------*

- (void) applicationWillTerminateAction: (NSNotification *) inNotification {
  NSUserDefaults * ud = [NSUserDefaults standardUserDefaults] ;
  [ud setObject: (myString) forKey:@"PMPrefs:myString"] ;
  [ud setObject:dataEncodedValue (mColor) forKey:@"PMPrefs:mColor"] ;
  [ud setObject: (mDate) forKey:@"PMPrefs:mDate"] ;
  [ud setObject:numberEncodedSInt32 (mInteger32Value) forKey:@"PMPrefs:mInteger32Value"] ;
}

//----------------------------------------------------------------------------*
//    awakeFromNib                                                            *
//----------------------------------------------------------------------------*

- (void) awakeFromNib {
  #ifdef EASY_BINDINGS_DEBUG
    NSLog (@"%s", __PRETTY_FUNCTION__) ;
  #endif
//--- check myTextField' outlet not nil
  if (nil == myTextField) {
    presentErrorWindow (__FILE__, __LINE__, @"the 'myTextField' outlet is nil") ;
  }
  [myTextField
    bind:@"value"
    toObject:self
    withKeyPath:@"myString"
    options:nil
  ] ;
//--- check myOtherTextField' outlet not nil
  if (nil == myOtherTextField) {
    presentErrorWindow (__FILE__, __LINE__, @"the 'myOtherTextField' outlet is nil") ;
  }
  [myOtherTextField
    bind:@"value"
    toObject:self
    withKeyPath:@"myString"
    options:[NSDictionary dictionaryWithObjectsAndKeys:
      [NSNumber numberWithBool:YES], @"NSContinuouslyUpdatesValue",
      nil
    ]
  ] ;
//--- check mColorWell' outlet not nil
  if (nil == mColorWell) {
    presentErrorWindow (__FILE__, __LINE__, @"the 'mColorWell' outlet is nil") ;
  }
  [mColorWell
    bind:@"value"
    toObject:self
    withKeyPath:@"mColor"
    options:nil
  ] ;
//--- check mDatePicker' outlet not nil
  if (nil == mDatePicker) {
    presentErrorWindow (__FILE__, __LINE__, @"the 'mDatePicker' outlet is nil") ;
  }
  [mDatePicker
    bind:@"value"
    toObject:self
    withKeyPath:@"mDate"
    options:nil
  ] ;
//--- check mInteger32TextField' outlet not nil
  if (nil == mInteger32TextField) {
    presentErrorWindow (__FILE__, __LINE__, @"the 'mInteger32TextField' outlet is nil") ;
  }
  if ((nil != mInteger32TextField) && (nil == mInteger32TextField.formatter)) {
    presentErrorWindow (__FILE__, __LINE__, @"the 'mInteger32TextField' outlet has no formatter, it should have an NSNumberFormatter") ;
  }else if ((nil != mInteger32TextField) && ![mInteger32TextField.formatter isKindOfClass:[NSNumberFormatter class]]) {
    presentErrorWindow (__FILE__, __LINE__, @"the 'mInteger32TextField outlet has a formatter that is not kind of NSNumberFormatter class") ;
  }
  [mInteger32TextField
    bind:@"value"
    toObject:self
    withKeyPath:@"mInteger32Value"
    options:nil
  ] ;

}

//----------------------------------------------------------------------------*
//    Swizzle                                                                 *
//----------------------------------------------------------------------------*

+ (void) load {
  Method original, swizzled ;
  original = class_getInstanceMethod (self, @selector (setMyString:));
  swizzled = class_getInstanceMethod (self, @selector (setMyString_swizzle:));
  method_exchangeImplementations (original, swizzled) ;
  original = class_getInstanceMethod (self, @selector (setMColor:));
  swizzled = class_getInstanceMethod (self, @selector (setMColor_swizzle:));
  method_exchangeImplementations (original, swizzled) ;
  original = class_getInstanceMethod (self, @selector (setMDate:));
  swizzled = class_getInstanceMethod (self, @selector (setMDate_swizzle:));
  method_exchangeImplementations (original, swizzled) ;
  original = class_getInstanceMethod (self, @selector (setMInteger32Value:));
  swizzled = class_getInstanceMethod (self, @selector (setMInteger32Value_swizzle:));
  method_exchangeImplementations (original, swizzled) ;
}

//----------------------------------------------------------------------------*
//    'myString' attribute                                            *
//----------------------------------------------------------------------------*

- (void) setMyString_swizzle: (NSString *) inObject {
  if (! [self.myString isEqualToString:inObject]) {
    [self setMyString_swizzle:inObject] ;
    [myString_observers makeObjectsPerformSelector:@selector (PMPrefs_myString_didChange)] ;
  }
}

//----------------------------------------------------------------------------*

- (void) addObserverOf_myString: (id) inObserver {
  if (nil == myString_observers) {
    myString_observers = [NSMutableSet new] ;
  }
  [myString_observers addObject:inObserver] ;
  [inObserver performSelector:@selector (preference_2E_PMPrefs_2E_myString_didChange)] ;
}

//----------------------------------------------------------------------------*

- (void) removeObserverOf_myString: (id) inObserver {
  [myString_observers removeObject:inObserver] ;
  [inObserver performSelector:@selector (preference_2E_PMPrefs_2E_myString_didChange)] ;
}

//----------------------------------------------------------------------------*
//    'mColor' attribute                                            *
//----------------------------------------------------------------------------*

- (void) setMColor_swizzle: (NSColor *) inObject {
  if (! [self.mColor isEqual:inObject]) {
    [self setMColor_swizzle:inObject] ;
    [mColor_observers makeObjectsPerformSelector:@selector (PMPrefs_mColor_didChange)] ;
  }
}

//----------------------------------------------------------------------------*

- (void) addObserverOf_mColor: (id) inObserver {
  if (nil == mColor_observers) {
    mColor_observers = [NSMutableSet new] ;
  }
  [mColor_observers addObject:inObserver] ;
  [inObserver performSelector:@selector (preference_2E_PMPrefs_2E_mColor_didChange)] ;
}

//----------------------------------------------------------------------------*

- (void) removeObserverOf_mColor: (id) inObserver {
  [mColor_observers removeObject:inObserver] ;
  [inObserver performSelector:@selector (preference_2E_PMPrefs_2E_mColor_didChange)] ;
}

//----------------------------------------------------------------------------*
//    'mDate' attribute                                            *
//----------------------------------------------------------------------------*

- (void) setMDate_swizzle: (NSDate *) inObject {
  if (! [self.mDate isEqual:inObject]) {
    [self setMDate_swizzle:inObject] ;
    [mDate_observers makeObjectsPerformSelector:@selector (PMPrefs_mDate_didChange)] ;
  }
}

//----------------------------------------------------------------------------*

- (void) addObserverOf_mDate: (id) inObserver {
  if (nil == mDate_observers) {
    mDate_observers = [NSMutableSet new] ;
  }
  [mDate_observers addObject:inObserver] ;
  [inObserver performSelector:@selector (preference_2E_PMPrefs_2E_mDate_didChange)] ;
}

//----------------------------------------------------------------------------*

- (void) removeObserverOf_mDate: (id) inObserver {
  [mDate_observers removeObject:inObserver] ;
  [inObserver performSelector:@selector (preference_2E_PMPrefs_2E_mDate_didChange)] ;
}

//----------------------------------------------------------------------------*
//    'mInteger32Value' attribute                                            *
//----------------------------------------------------------------------------*

- (void) setMInteger32Value_swizzle: (SInt32) inObject {
  if (mInteger32Value != inObject) {
    [self setMInteger32Value_swizzle:inObject] ;
    [mInteger32Value_observers makeObjectsPerformSelector:@selector (PMPrefs_mInteger32Value_didChange)] ;
  }
}

//----------------------------------------------------------------------------*

- (void) addObserverOf_mInteger32Value: (id) inObserver {
  if (nil == mInteger32Value_observers) {
    mInteger32Value_observers = [NSMutableSet new] ;
  }
  [mInteger32Value_observers addObject:inObserver] ;
  [inObserver performSelector:@selector (preference_2E_PMPrefs_2E_mInteger_33__32_Value_didChange)] ;
}

//----------------------------------------------------------------------------*

- (void) removeObserverOf_mInteger32Value: (id) inObserver {
  [mInteger32Value_observers removeObject:inObserver] ;
  [inObserver performSelector:@selector (preference_2E_PMPrefs_2E_mInteger_33__32_Value_didChange)] ;
}

//----------------------------------------------------------------------------*
//    Actions                                                                 *
//----------------------------------------------------------------------------*

- (IBAction) monAction: (id) inSender {
  monAction_PMPrefs_action (self, inSender) ;
}

//----------------------------------------------------------------------------*

- (IBAction) autreAction: (id) inSender {
  autreAction_PMPrefs_action (self, inSender) ;
}

//----------------------------------------------------------------------------*



//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

@end

