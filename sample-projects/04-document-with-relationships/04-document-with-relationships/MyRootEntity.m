//---------------------------------------------------------------------------*
//                                                                           *
//                          File 'MyRootEntity.m'                            *
//                    Generated by version 0.0.1 [debug]                     *
//                       july 1st, 2013, at 23h50'22"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#import "easy-bindings-utilities.h"
#import "PMAllocationDebug.h"
#import "PMEntityManager.h"
#import "PMRelationshipDescription.h"
#import "PMAttributeDescription.h"
#import "PMTransientDependancyManager.h"
#import "load-store-functions.h"
#import "MyRootEntity.h"
#import "NameEntity.h"

//-----------------------------------------------------------------------------*

#import <objc/runtime.h>

//-----------------------------------------------------------------------------*

@implementation MyRootEntity

//-----------------------------------------------------------------------------*
//    Synthesize properties                                                    *
//-----------------------------------------------------------------------------*

//--- Attributes

//--- To-one relationships

//--- To-many relationships
@synthesize mNames ; // Set of NameEntity entities

//-----------------------------------------------------------------------------*
//    Swizzle setters                                                          *
//-----------------------------------------------------------------------------*

+ (void) load {
  Method original ;
  Method swizzled ;
  original = class_getInstanceMethod (self, @selector (setMNames:)) ;
  swizzled = class_getInstanceMethod (self, @selector (setMNames_swizzled:)) ;
  method_exchangeImplementations (original, swizzled) ;
}

//-----------------------------------------------------------------------------*
//    newInstanceWithManager:withDefaultValues:                                *
//-----------------------------------------------------------------------------*

+ (MyRootEntity *) newInstanceWithManager: (PMEntityManager *) inManager
                    withDefaultValues: (BOOL) inFlag {
  return [inManager newInstanceOfEntity:[MyRootEntity class] withDefaultValues:inFlag] ;
}

//-----------------------------------------------------------------------------*
//    init                                                                     *
//-----------------------------------------------------------------------------*

- (instancetype) init {
  self = [super init] ;
  if (self) {
    self.mNames = [NSMutableArray new] ;
  }
  return self ;
}

//-----------------------------------------------------------------------------*
//    buildAttributeDescriptionArray                                           *
//-----------------------------------------------------------------------------*

- (void) buildAttributeDescriptionArray: (NSMutableArray *) ioDescriptionArray {
  [super buildAttributeDescriptionArray:ioDescriptionArray] ;
}

//-----------------------------------------------------------------------------*
//    buildToOneRelationshipDescriptionArray                                   *
//-----------------------------------------------------------------------------*

- (void) buildToOneRelationshipDescriptionArray: (NSMutableArray *) ioDescriptionArray {
  [super buildToOneRelationshipDescriptionArray:ioDescriptionArray] ;
}

//-----------------------------------------------------------------------------*
//    buildToManyRelationshipDescriptionArray                                  *
//-----------------------------------------------------------------------------*

- (void) buildToManyRelationshipDescriptionArray: (NSMutableArray *) ioDescriptionArray {
  [super buildToManyRelationshipDescriptionArray:ioDescriptionArray] ;
  [ioDescriptionArray addObject:[PMRelationshipDescription
    descriptionWithRelationshipName:@"mNames"
    withOppositionRelationshipName:@"mRoot"
    withIsToManyOppositionRelationship:NO
  ]] ;
}

//-----------------------------------------------------------------------------*
//    setUpWithDefaultValues                                                   *
//-----------------------------------------------------------------------------*

- (void) setUpWithDefaultValues {
  [super setUpWithDefaultValues] ;
}

//-----------------------------------------------------------------------------*
//    resetBeforeDeletion                                                      *
//-----------------------------------------------------------------------------*

- (void) resetBeforeDeletion {
  mNames = nil ;
  [super resetBeforeDeletion] ;
}

//-----------------------------------------------------------------------------*
//    saveIntoDictionary                                                       *
//-----------------------------------------------------------------------------*

- (void) saveIntoDictionary: (NSMutableDictionary *) ioDictionary {
  [super saveIntoDictionary:ioDictionary] ;
  storeEntityArrayInDictionary (self.mNames, @"mNames", ioDictionary) ;
}

//-----------------------------------------------------------------------------*
//    setUpWithDictionary                                                      *
//-----------------------------------------------------------------------------*

- (void) setUpWithDictionary: (NSDictionary *) inDictionary
         withManagedEntityArray: (NSArray *) inManagedEntityArray {
  [super
    setUpWithDictionary:inDictionary
    withManagedEntityArray:inManagedEntityArray
  ] ;
  self.mNames = readEntityArrayFromDictionary (@"mNames", inDictionary, inManagedEntityArray) ;
}

//-----------------------------------------------------------------------------*
//    setMNames_swizzled       *
//-----------------------------------------------------------------------------*

- (void) setMNames_swizzled: (NSMutableArray *) inNewArray {
  NSMutableArray * currentArray = self.mNames ;
  if (inNewArray != currentArray) {
  //--- Register old value in undo manager
    [[self.undoManager prepareWithInvocationTarget:self]
      setMNames:currentArray
    ] ;
  //--- Store new value
    [self setMNames_swizzled :inNewArray] ;
  //--- Removed object set
    NSMutableSet * removedObjectSet = [NSMutableSet new] ;
    [removedObjectSet addObjectsFromArray:currentArray] ;
    [removedObjectSet minusSet:[NSSet setWithArray:inNewArray]] ;
    for (NameEntity * object in removedObjectSet) {
      object.mRoot = nil ;
    }
    macroReleaseSetToNil (removedObjectSet) ;
  //--- Added object set
    NSMutableSet * addedObjectSet = [NSMutableSet new] ;
    [addedObjectSet addObjectsFromArray:inNewArray] ;
    [addedObjectSet minusSet:[NSSet setWithArray:currentArray]] ;
    for (NameEntity * object in addedObjectSet) {
      object.mRoot = self ;
    }
    macroReleaseSetToNil (addedObjectSet) ;
  }
}

//-----------------------------------------------------------------------------*

- (void) insertObject: (NameEntity *) inObject
         inMNamesAtIndex: (NSUInteger) inIndex {
  const NSUInteger idx = [mNames indexOfObject:inObject] ;
  if (idx == NSNotFound) {
  //---
    [mNames insertObject:inObject atIndex:inIndex] ;
  //---
    [self.undoManager
      registerUndoWithTarget:self
      selector:@selector (removeObjectFromMNames:)
      object:inObject
    ] ;
  //---
    inObject.mRoot = self ;
  }else if (idx != inIndex) {

  }
}

//-----------------------------------------------------------------------------*

- (void) removeObjectFromMNamesAtIndex: (NSUInteger) inIndex {
  NameEntity * removedObject = [mNames objectAtIndex:inIndex] ;
//---
  [mNames removeObjectAtIndex:inIndex] ;
//---
  [[self.undoManager prepareWithInvocationTarget:self]
    insertObject:removedObject
    inMNamesAtIndex:inIndex
  ] ;
//---
  removedObject.mRoot = nil ;
}

//-----------------------------------------------------------------------------*

- (void) appendToMNames: (NameEntity *) inObject {
  if (! [self.mNames containsObject:inObject]) {
    [self
      insertObject:inObject
      inMNamesAtIndex:self.mNames.count
    ] ;
  }
}

//-----------------------------------------------------------------------------*

- (void) removeObjectFromMNames: (NameEntity *) inObject {
  const NSUInteger idx = [self.mNames indexOfObject:inObject] ;
  if (NSNotFound != idx) {
    [self removeObjectFromMNamesAtIndex:idx] ;
  }
}

//-----------------------------------------------------------------------------*
//    willChangeValueForKey:                                                  *
//-----------------------------------------------------------------------------*

/*- (void) willChangeValueForKey: (NSString *) inKey {
  [super willChangeValueForKey:inKey] ;
}*/

//-----------------------------------------------------------------------------*
//    didChangeValueForKey:                                                   *
//-----------------------------------------------------------------------------*

/*- (void) didChangeValueForKey: (NSString *) inKey {
  [super didChangeValueForKey:inKey] ;
  if (! self.isFault) {
    [self pmKeyDidChange:inKey] ;
  }
}*/

//-----------------------------------------------------------------------------*
//    willChangeValueForKey:withSetMutation:usingObjects:                     *
//-----------------------------------------------------------------------------*

/*- (void) willChangeValueForKey: (NSString *) inKey
         withSetMutation: (NSKeyValueSetMutationKind) inMutationKind
         usingObjects: (NSSet *) inObjects {
  if ([inKey isEqualToString:@"mNames"]) {
  }
  [super
    willChangeValueForKey:inKey
    withSetMutation: inMutationKind
    usingObjects: inObjects
  ] ;
}*/

//-----------------------------------------------------------------------------*
//    didChangeValueForKey:withSetMutation:usingObjects:                      *
//-----------------------------------------------------------------------------*

/*- (void) didChangeValueForKey: (NSString *) inKey
         withSetMutation: (NSKeyValueSetMutationKind) inMutationKind
         usingObjects: (NSSet *) inObjects {
  [super
    didChangeValueForKey:inKey
    withSetMutation: inMutationKind
    usingObjects: inObjects
  ] ;
  if ([inKey isEqualToString:@"mNames"]) {
  }
  if (! self.isFault) {
    [self pmKeyDidChange:inKey] ;
  }
}*/

//-----------------------------------------------------------------------------*
//    pmKeyDidChange:                                                         *
//-----------------------------------------------------------------------------*

/*- (void) pmKeyDidChange: (NSString *) inKey {
  if ([inKey isEqualToString:@"mNames"]) {
    [mNames_observers makeObjectsPerformSelector:@selector (entity_2E_MyRootEntity_2E_mNames_didChange)] ;
  }
}*/

//-----------------------------------------------------------------------------*

- (void) addObserverOf_mNames: (NSObject *) inObserver {
  if (nil == mNames_observers) {
    mNames_observers = [NSMutableSet new] ;
  }
  [mNames_observers addObject:inObserver] ;
  [inObserver performSelector:@selector (entity_2E_MyRootEntity_2E_mNames_didChange)] ;
}

//-----------------------------------------------------------------------------*

- (void) removeObserverOf_mNames: (NSObject *) inObserver {
  [mNames_observers removeObject:inObserver] ;
  [inObserver performSelector:@selector (entity_2E_MyRootEntity_2E_mNames_didChange)] ;
}

//-----------------------------------------------------------------------------*

//--- START OF USER ZONE 2

//--- END OF USER ZONE 2

@end
