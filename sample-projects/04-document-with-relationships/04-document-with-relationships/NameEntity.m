//---------------------------------------------------------------------------*
//                                                                           *
//                           File 'NameEntity.m'                             *
//                    Generated by version 0.0.1 [debug]                     *
//                      july 19th, 2013, at 21h40'34"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#import "easy-bindings-utilities.h"
#import "PMAllocationDebug.h"
#import "PMEntityManager.h"
#import "PMRelationshipDescription.h"
#import "PMAttributeDescription.h"
#import "PMTransientDependancyManager.h"
#import "load-store-functions.h"
#import "NameEntity.h"
#import "MyRootEntity.h"


//-----------------------------------------------------------------------------*

@implementation NameEntity

//-----------------------------------------------------------------------------*
//    Synthesize properties                                                    *
//-----------------------------------------------------------------------------*

//--- Attributes
@synthesize name ;
@synthesize aValue ;

//--- To-one relationships
@synthesize mRoot ; // MyRootEntity

//--- To-many relationships

//-----------------------------------------------------------------------------*
//    Swizzle setters                                                          *
//-----------------------------------------------------------------------------*

+ (void) load {
  Method original ;
  Method swizzled ;
  original = class_getInstanceMethod (self, @selector (setName:)) ;
  swizzled = class_getInstanceMethod (self, @selector (setName_swizzled:)) ;
  macroCheckMethodSwizzling (original, swizzled) ;
  method_exchangeImplementations (original, swizzled) ;
  original = class_getInstanceMethod (self, @selector (setAValue:)) ;
  swizzled = class_getInstanceMethod (self, @selector (setAValue_swizzled:)) ;
  macroCheckMethodSwizzling (original, swizzled) ;
  method_exchangeImplementations (original, swizzled) ;
  original = class_getInstanceMethod (self, @selector (setMRoot:)) ;
  swizzled = class_getInstanceMethod (self, @selector (setMRoot_swizzled:)) ;
  macroCheckMethodSwizzling (original, swizzled) ;
  method_exchangeImplementations (original, swizzled) ;
}

//-----------------------------------------------------------------------------*
//    newInstanceWithManager:                                                  *
//-----------------------------------------------------------------------------*

+ (NameEntity *) newInstanceWithManager: (PMEntityManager *) inManager {
  return [inManager newInstanceOfEntity:[NameEntity class]] ;
}

//-----------------------------------------------------------------------------*
//    init                                                                     *
//-----------------------------------------------------------------------------*

- (instancetype) init {
  self = [super init] ;
  if (self) {
  //--- Attribute initialisation
    self.name = @"Name" ;
    self.aValue = 123 ;
  //--- To many relationship initialisation
  //--- Add Transient observers
  }
  return self ;
}

//-----------------------------------------------------------------------------*
//    buildAttributeDescriptionArray                                           *
//-----------------------------------------------------------------------------*

- (void) buildAttributeDescriptionArray: (NSMutableArray *) ioDescriptionArray {
  [super buildAttributeDescriptionArray:ioDescriptionArray] ;
  [ioDescriptionArray addObject:[PMAttributeDescription descriptionWithAttributeName:@"name"]] ;
  [ioDescriptionArray addObject:[PMAttributeDescription descriptionWithAttributeName:@"aValue"]] ;
}

//-----------------------------------------------------------------------------*
//    buildToOneRelationshipDescriptionArray                                   *
//-----------------------------------------------------------------------------*

- (void) buildToOneRelationshipDescriptionArray: (NSMutableArray *) ioDescriptionArray {
  [super buildToOneRelationshipDescriptionArray:ioDescriptionArray] ;
  [ioDescriptionArray addObject:[PMRelationshipDescription
    descriptionWithRelationshipName:@"mRoot"
    withOppositionRelationshipName:@"mNames"
    withIsToManyOppositionRelationship:YES
  ]] ;
}

//-----------------------------------------------------------------------------*
//    buildToManyRelationshipDescriptionArray                                  *
//-----------------------------------------------------------------------------*

- (void) buildToManyRelationshipDescriptionArray: (NSMutableArray *) ioDescriptionArray {
  [super buildToManyRelationshipDescriptionArray:ioDescriptionArray] ;
}

//-----------------------------------------------------------------------------*
//    resetBeforeDeletion                                                      *
//-----------------------------------------------------------------------------*

- (void) resetBeforeDeletion {
  mRoot = nil ;
//--- Remove Transient observers
  [super resetBeforeDeletion] ;
}

//-----------------------------------------------------------------------------*
//    saveIntoDictionary                                                       *
//-----------------------------------------------------------------------------*

- (void) saveIntoDictionary: (NSMutableDictionary *) ioDictionary {
  [super saveIntoDictionary:ioDictionary] ;
  storeNSStringInDictionary (self.name, @"name", ioDictionary) ;
  storeNSIntegerInDictionary (self.aValue, @"aValue", ioDictionary) ;
  storeEntityInDictionary (self.mRoot, @"mRoot", ioDictionary) ;
}

//-----------------------------------------------------------------------------*
//    setUpWithDictionary                                                      *
//-----------------------------------------------------------------------------*

- (void) setUpWithDictionary: (NSDictionary *) inDictionary
         withManagedEntityArray: (NSArray *) inManagedEntityArray {
  [super
    setUpWithDictionary:inDictionary
    withManagedEntityArray:inManagedEntityArray
  ] ;
  self.name = readNSStringFromDictionary (@"name", inDictionary) ;
  self.aValue = readNSIntegerFromDictionary (@"aValue", inDictionary) ;
  self.mRoot = readEntityFromDictionary (@"mRoot", inDictionary, inManagedEntityArray) ;
}

//-----------------------------------------------------------------------------*
//    setMRoot_swizzled       *
//-----------------------------------------------------------------------------*

- (void) setMRoot_swizzled: (MyRootEntity *) inNewObject {
  MyRootEntity * currentObject = self.mRoot ;
  if (inNewObject != currentObject) {
  //--- Register old value in undo manager
    [[self.undoManager prepareWithInvocationTarget:self]
      setMRoot:currentObject
    ] ;
  //--- Store new value
    [self setMRoot_swizzled :inNewObject] ;
  //--- Set opposite relation ship
    [currentObject removeObjectFromMNames:self] ;
    [inNewObject appendToMNames:self] ;
  }
}

//-----------------------------------------------------------------------------*
//    setName_swizzled       *
//-----------------------------------------------------------------------------*

- (void) setName_swizzled: (NSString *) inNewValue {
  if (! ([inNewValue isEqualToString:self.name])) {
  //--- Register old value in undo manager
    [self.undoManager
      registerUndoWithTarget:self
      selector:@selector (setName:)
      object:self.name
    ] ;
  //--- Store new value
    [self setName_swizzled :inNewValue] ;
  //--- Notify observers
    [name_observers makeObjectsPerformSelector:@selector (entity_2E_NameEntity_2E_name_didChange)] ;
  }
}

//-----------------------------------------------------------------------------*
//    setAValue_swizzled       *
//-----------------------------------------------------------------------------*

- (void) setAValue_swizzled: (NSInteger) inNewValue {
  if (! (inNewValue == self.aValue)) {
  //--- Register old value in undo manager
    [[self.undoManager prepareWithInvocationTarget:self]
      setAValue:self.aValue
    ] ;
  //--- Store new value
    [self setAValue_swizzled :inNewValue] ;
  //--- Notify observers
    [aValue_observers makeObjectsPerformSelector:@selector (entity_2E_NameEntity_2E_aValue_didChange)] ;
  }
}


//-----------------------------------------------------------------------------*
//    name Observer                                               *
//-----------------------------------------------------------------------------*

- (void) addObserverOf_name: (NSObject *) inObserver {
  if (nil == name_observers) {
    name_observers = [NSMutableSet new] ;
  }
  [name_observers addObject:inObserver] ;
  [inObserver performSelector:@selector (entity_2E_NameEntity_2E_name_didChange)] ;
}

//-----------------------------------------------------------------------------*

- (void) removeObserverOf_name: (NSObject *) inObserver {
  [name_observers removeObject:inObserver] ;
  [inObserver performSelector:@selector (entity_2E_NameEntity_2E_name_didChange)] ;
}


//-----------------------------------------------------------------------------*
//    aValue Observer                                               *
//-----------------------------------------------------------------------------*

- (void) addObserverOf_aValue: (NSObject *) inObserver {
  if (nil == aValue_observers) {
    aValue_observers = [NSMutableSet new] ;
  }
  [aValue_observers addObject:inObserver] ;
  [inObserver performSelector:@selector (entity_2E_NameEntity_2E_aValue_didChange)] ;
}

//-----------------------------------------------------------------------------*

- (void) removeObserverOf_aValue: (NSObject *) inObserver {
  [aValue_observers removeObject:inObserver] ;
  [inObserver performSelector:@selector (entity_2E_NameEntity_2E_aValue_didChange)] ;
}

//-----------------------------------------------------------------------------*

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

@end
