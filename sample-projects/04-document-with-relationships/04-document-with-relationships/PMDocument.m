//---------------------------------------------------------------------------*
//                                                                           *
//                           File 'PMDocument.m'                             *
//                    Generated by version 1.0.0 [debug]                     *
//                       june 23th, 2012, at 15h38'7"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#import "PMDocument.h"
#import "RootEntityClass.h"
#import "managed-object-model.h"
#import "easy-bindings-utilities.h"
#import "PMDocument-computations.h"

//----------------------------------------------------------------------------*

@implementation PMDocument

//----------------------------------------------------------------------------*
//    Init                                                                    *
//----------------------------------------------------------------------------*

- (id) init {
  #ifdef EASY_BINDINGS_DEBUG
    NSLog (@"%s", __PRETTY_FUNCTION__) ;
  #endif
  self = [super init] ;
  if (self) {
    #ifdef PM_COCOA_DEBUG
      objectHasBeenAllocated (self) ;
    #endif
  }
  return self ;
}

//----------------------------------------------------------------------------*
//    windowNibName                                                           *
//----------------------------------------------------------------------------*

- (NSString *) windowNibName {
  return @"PMDocument" ;
}

//----------------------------------------------------------------------------*
//    managedObjectModel                                                      *
//----------------------------------------------------------------------------*

- (NSManagedObjectModel *) managedObjectModel {
  return managedObjectModel () ;
}

//----------------------------------------------------------------------------*
//    windowControllerDidLoadNib                                              *
//----------------------------------------------------------------------------*

- (void) windowControllerDidLoadNib: (NSWindowController *) inWindowController { 
  #ifdef EASY_BINDINGS_DEBUG
    NSLog (@"%s", __PRETTY_FUNCTION__) ;
  #endif
  [super windowControllerDidLoadNib:inWindowController] ;
//--- Disable undo registrations
  NSManagedObjectContext * moc = [self managedObjectContext] ;
  [[moc undoManager] disableUndoRegistration];
//--- Root entity controller creation
  mRootObjectController = [NSObjectController new] ;
  [mRootObjectController setAutomaticallyPreparesContent:YES] ;
  [mRootObjectController setEditable:YES] ;
  [mRootObjectController setEntityName:@"MyRootEntity"] ;
  [mRootObjectController setManagedObjectContext:moc] ;
//--- Root Object
  [mRootObjectController fetchWithRequest:nil merge:NO error:nil] ;
  mRootObject = [mRootObjectController content] ;
  if (nil == mRootObject) {
    mRootObject = [RootEntityClass insertNewObjectIntoManagedObjectContext:moc] ;
    [mRootObjectController setContent:mRootObject] ;
    // NSLog (@"Root object creation") ;
  }
//--- Enable undo registrations
  [moc processPendingChanges] ;
  [[moc undoManager] enableUndoRegistration];
//--- 'nameController' controller instanciation
  nameController = [NSArrayController new] ;
  [nameController setEntityName:@"NameEntity"] ;
  [nameController setManagedObjectContext:moc] ;
//--- 'nameController' controller bindings
  [nameController
    bind:@"contentSet"
    toObject:mRootObjectController
    withKeyPath:@"selection.mNames"
    options:[NSDictionary dictionaryWithObjectsAndKeys:
      [NSNumber numberWithBool:YES], @"NSDeletesObjectsOnRemoveBindingsOption",
      nil
    ]
  ] ;
//--- Outlet namesTableView
  if (nil == namesTableView) {
    presentErrorWindow (__FILE__, __LINE__, @"the 'namesTableView' outlet is nil") ;
  }
  if (nil == [namesTableView tableColumnWithIdentifier:@"name"]) {
    presentErrorWindow (__FILE__, __LINE__, @"the 'namesTableView' NSTableView outlet has no formatter has no column with the name identifier") ;
  }else{
    NSActionCell * cell = [namesTableView tableColumnWithIdentifier:@"name"].dataCell ;
    if (! [cell isKindOfClass:[NSTextFieldCell class]]) {
      presentErrorWindow (__FILE__, __LINE__, @"the dataCell is 'name' column of the 'namesTableView' should be an 'NSTextFieldCell instance") ;
    }
  }
  [[namesTableView tableColumnWithIdentifier:@"name"]
    bind:@"value"
    toObject:nameController
    withKeyPath:@"arrangedObjects.name"
    options:nil
  ] ;
  if (nil == [namesTableView tableColumnWithIdentifier:@"int"]) {
    presentErrorWindow (__FILE__, __LINE__, @"the 'namesTableView' NSTableView outlet has no formatter has no column with the int identifier") ;
  }else{
    NSActionCell * cell = [namesTableView tableColumnWithIdentifier:@"int"].dataCell ;
    if (! [cell isKindOfClass:[NSTextFieldCell class]]) {
      presentErrorWindow (__FILE__, __LINE__, @"the dataCell is 'int' column of the 'namesTableView' should be an 'NSTextFieldCell instance") ;
    }
  }
  [[namesTableView tableColumnWithIdentifier:@"int"]
    bind:@"value"
    toObject:nameController
    withKeyPath:@"arrangedObjects.aValue"
    options:nil
  ] ;
//--- Outlet canRemoveTextField
  if (nil == canRemoveTextField) {
    presentErrorWindow (__FILE__, __LINE__, @"the 'canRemoveTextField' outlet is nil") ;
  }
  [canRemoveTextField
    bind:@"value"
    toObject:self
    withKeyPath:@"canRemoveString"
    options:nil
  ] ;
//--- Outlet addPathButton
  if (nil == addPathButton) {
    presentErrorWindow (__FILE__, __LINE__, @"the 'addPathButton' outlet is nil") ;
  }
  addPathButton.target = nameController ;
  addPathButton.action = @selector (add:) ;
//--- Outlet removePathButton
  if (nil == removePathButton) {
    presentErrorWindow (__FILE__, __LINE__, @"the 'removePathButton' outlet is nil") ;
  }
  removePathButton.target = nameController ;
  removePathButton.action = @selector (remove:) ;
//--- Outlet countItemTextField
  if (nil == countItemTextField) {
    presentErrorWindow (__FILE__, __LINE__, @"the 'countItemTextField' outlet is nil") ;
  }
  if ((nil != countItemTextField) && (nil == countItemTextField.formatter)) {
    presentErrorWindow (__FILE__, __LINE__, @"the 'countItemTextField' outlet has no formatter, it should have an NSNumberFormatter") ;
  }else if ((nil != countItemTextField) && ![countItemTextField.formatter isKindOfClass:[NSNumberFormatter class]]) {
    presentErrorWindow (__FILE__, __LINE__, @"the 'countItemTextField outlet has a formatter that is not kind of NSNumberFormatter class") ;
  }
  [countItemTextField
    bind:@"value"
    toObject:mRootObject
    withKeyPath:@"mNames.@count"
    options:nil
  ] ;
//--- Outlet countItemMessageTextField
  if (nil == countItemMessageTextField) {
    presentErrorWindow (__FILE__, __LINE__, @"the 'countItemMessageTextField' outlet is nil") ;
  }
  [countItemMessageTextField
    bind:@"value"
    toObject:self
    withKeyPath:@"countItemMessage"
    options:nil
  ] ;

//--- Install transients observers
  [self pmInstallObserversForTransients] ;
}

//----------------------------------------------------------------------------*
//   T R A N S I E N T    I M P L E M E N T A T I O N                         *
//----------------------------------------------------------------------------*

- (void) pmInstallObserversForTransients {
  // NSLog (@"%s", __PRETTY_FUNCTION__) ;
  [mRootObject
    addObserver:self
    forKeyPath:@"mNames.@count"
    options:0
    context:NULL
  ] ;
  [nameController
    addObserver:self
    forKeyPath:@"canRemove"
    options:0
    context:NULL
  ] ;
}

//----------------------------------------------------------------------------*

- (void) observeValueForKeyPath:(NSString *) inKeyPath
         ofObject:(id) inObject
         change:(NSDictionary *) inChange
         context:(void *) inContext {
  // NSLog (@"%s, key %@", __PRETTY_FUNCTION__, inKey) ;
  if (inObject == mRootObject) {
    if ([inKeyPath isEqualToString:@"mNames.@count"]) {
      [self pmNotifyChangeForTransientProperty:@"countItemMessage"] ;
    }
  }else if (inObject == nameController) {
    if ([inKeyPath isEqualToString:@"canRemove"]) {
      [self pmNotifyChangeForTransientProperty:@"canRemoveString"] ;
    }
  }
}

//----------------------------------------------------------------------------*

- (NSString *) canRemoveString {
  return compute_PMDocument_canRemoveString (nameController.canRemove).copy ;
}

//----------------------------------------------------------------------------*

- (NSString *) countItemMessage {
  return compute_PMDocument_countItemMessage (mRootObject.mNames.count).copy ;
}

//----------------------------------------------------------------------------*
//    Actions                                                                 *
//----------------------------------------------------------------------------*


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

@end
