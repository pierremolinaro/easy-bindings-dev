//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'MyRootEntityClass.m'                         *
//                        Generated by version 0.0.1                         *
//                    november 16th, 2012, at 17h10'34"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#import "easy-bindings-utilities.h"
#import "PMDebug.h"
#import "PMTransientDependancyManager.h"
#import "MyRootEntityClass.h"
#import "MyRootEntityClass-transient-computations.h"


//----------------------------------------------------------------------------*

@implementation MyRootEntityClass

//----------------------------------------------------------------------------*
//    Synthesize properties                                                   *
//----------------------------------------------------------------------------*

//--- Attributes
@dynamic myString ;

//--- To-many relationships

//----------------------------------------------------------------------------*
//    Creation Class Method                                                   *
//----------------------------------------------------------------------------*

+ (MyRootEntityClass *) pmInsertNewObjectIntoManagedObjectContext:(NSManagedObjectContext *) inContext {
  return [NSEntityDescription insertNewObjectForEntityForName:@"MyRootEntity" inManagedObjectContext:inContext] ;
}

//----------------------------------------------------------------------------*
//    initWithEntity:insertIntoManagedObjectContext:                          *
//----------------------------------------------------------------------------*

- (id) initWithEntity:(NSEntityDescription *) inEntity
       insertIntoManagedObjectContext:(NSManagedObjectContext *) inManagedObjectContext {
  self = [super 
    initWithEntity:inEntity
    insertIntoManagedObjectContext:inManagedObjectContext
  ] ;
  if (self) {
    macroNoteObjectAllocation (self) ;
  }
  return self ;
}

//----------------------------------------------------------------------------*
//    Dealloc                                                                 *
//----------------------------------------------------------------------------*

- (void) dealloc {
  macroNoteObjectDeallocation (self) ;
}

//----------------------------------------------------------------------------*
//    didChangeValueForKey                                                    *
//----------------------------------------------------------------------------*

- (void) didChangeValueForKey: (NSString *) inKey {
  [super didChangeValueForKey:inKey] ;
  if ([inKey isEqualToString:@"myString"]) {
    [myString_observers makeObjectsPerformSelector:@selector (MyRootEntityClass_myString_didChange)] ;
    myStringMaj__computed = NO ;
    [PMTransientDependancyManager
      enterTriggerForObject:self
      transientIndex:entity_2F_MyRootEntity_2F_self_2E_myStringMaj
    ] ;
    myStringMin__computed = NO ;
    [PMTransientDependancyManager
      enterTriggerForObject:self
      transientIndex:entity_2F_MyRootEntity_2F_self_2E_myStringMin
    ] ;
    myStringConcat__computed = NO ;
    [PMTransientDependancyManager
      enterTriggerForObject:self
      transientIndex:entity_2F_MyRootEntity_2F_self_2E_myStringConcat
    ] ;
  }
}

//----------------------------------------------------------------------------*

- (void) addObserverOf_myString: (id) inObserver {
  if (nil == myString_observers) {
    myString_observers = [NSMutableSet new] ;
  }
  [myString_observers addObject:inObserver] ;
  [inObserver performSelector:@selector (MyRootEntityClass_myString_didChange)] ;
}

//----------------------------------------------------------------------------*

- (void) removeObserverOf_myString: (id) inObserver {
  [myString_observers removeObject:inObserver] ;
  [inObserver performSelector:@selector (MyRootEntityClass_myString_didChange)] ;
}

//----------------------------------------------------------------------------*
// Cache routine of 'myStringMaj' transient     *
//----------------------------------------------------------------------------*

- (NSString *) myStringMaj {
  if (! myStringMaj__computed) {
    myStringMaj__cache = compute_MyRootEntityClass_myStringMaj (self.myString) ;
    myStringMaj__computed = YES ;
  }
  return myStringMaj__cache.copy ;
}

//----------------------------------------------------------------------------*
// Cache routine of 'myStringMin' transient     *
//----------------------------------------------------------------------------*

- (NSString *) myStringMin {
  if (! myStringMin__computed) {
    myStringMin__cache = compute_MyRootEntityClass_myStringMin (self.myString) ;
    myStringMin__computed = YES ;
  }
  return myStringMin__cache.copy ;
}

//----------------------------------------------------------------------------*
// Cache routine of 'myStringConcat' transient     *
//----------------------------------------------------------------------------*

- (NSString *) myStringConcat {
  if (! myStringConcat__computed) {
    myStringConcat__cache = compute_MyRootEntityClass_myStringConcat (self.myStringMaj, self.myStringMin) ;
    myStringConcat__computed = YES ;
  }
  return myStringConcat__cache.copy ;
}

//----------------------------------------------------------------------------*

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

@end
