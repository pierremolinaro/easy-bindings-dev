//-----------------------------------------------------------------------------*
//                                                                             *
//                           File 'MyRootEntity.m'                             *
//                     Generated by version 0.0.1 [debug]                      *
//                        june 4th, 2014, at 17h50'49"                         *
//                                                                             *
//-----------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#import "easy-bindings-utilities.h"
#import "PMAllocationDebug.h"
#import "PMEntityManager.h"
#import "PMRelationshipDescription.h"
#import "PMAttributeDescription.h"
#import "PMApplication.h"
#import "load-store-functions.h"
#import "MyRootEntity.h"
#import "MyRootEntity-transient-computations.h"


//-----------------------------------------------------------------------------*

@implementation MyRootEntity

//-----------------------------------------------------------------------------*
//    Synthesize properties                                                    *
//-----------------------------------------------------------------------------*

//--- Attributes
@synthesize myString ;
@synthesize myEnumeration ;
@synthesize myColor ;

//--- To-one relationships

//--- To-many relationships

//-----------------------------------------------------------------------------*
//    Swizzle setters                                                          *
//-----------------------------------------------------------------------------*

+ (void) load {
  Method original ;
  Method swizzled ;
  original = class_getInstanceMethod (self, @selector (setMyString:)) ;
  swizzled = class_getInstanceMethod (self, @selector (setMyString_swizzled:)) ;
  macroCheckMethodSwizzling (original, swizzled) ;
  method_exchangeImplementations (original, swizzled) ;
  original = class_getInstanceMethod (self, @selector (setMyEnumeration:)) ;
  swizzled = class_getInstanceMethod (self, @selector (setMyEnumeration_swizzled:)) ;
  macroCheckMethodSwizzling (original, swizzled) ;
  method_exchangeImplementations (original, swizzled) ;
  original = class_getInstanceMethod (self, @selector (setMyColor:)) ;
  swizzled = class_getInstanceMethod (self, @selector (setMyColor_swizzled:)) ;
  macroCheckMethodSwizzling (original, swizzled) ;
  method_exchangeImplementations (original, swizzled) ;
}

//-----------------------------------------------------------------------------*
//    newInstanceWithManager:                                                  *
//-----------------------------------------------------------------------------*

+ (MyRootEntity *) newInstanceWithManager: (PMEntityManager *) inManager {
  return [inManager newInstanceOfEntity:[MyRootEntity class]] ;
}

//-----------------------------------------------------------------------------*
//    init                                                                     *
//-----------------------------------------------------------------------------*

- (instancetype) init {
  self = [super init] ;
  if (self) {
  //--- Attribute initialisation
    self.myString = @"Hello" ;
    self.myEnumeration = deuxieme ;
    self.myColor = [NSColor yellowColor] ;
  //--- To many relationship initialisation
  //--- Add Transient observers
  }
  return self ;
}

//-----------------------------------------------------------------------------*
//    buildAttributeDescriptionArray                                           *
//-----------------------------------------------------------------------------*

- (void) buildAttributeDescriptionArray: (NSMutableArray *) ioDescriptionArray {
  [super buildAttributeDescriptionArray:ioDescriptionArray] ;
  [ioDescriptionArray addObject:[PMAttributeDescription descriptionWithAttributeName:@"myString"]] ;
  [ioDescriptionArray addObject:[PMAttributeDescription descriptionWithAttributeName:@"myEnumeration" withConversionFunction:convertMonEnumerationValueToString]] ;
  [ioDescriptionArray addObject:[PMAttributeDescription descriptionWithAttributeName:@"myColor"]] ;
}

//-----------------------------------------------------------------------------*
//    buildToOneRelationshipDescriptionArray                                   *
//-----------------------------------------------------------------------------*

- (void) buildToOneRelationshipDescriptionArray: (NSMutableArray *) ioDescriptionArray {
  [super buildToOneRelationshipDescriptionArray:ioDescriptionArray] ;
}

//-----------------------------------------------------------------------------*
//    buildToManyRelationshipDescriptionArray                                  *
//-----------------------------------------------------------------------------*

- (void) buildToManyRelationshipDescriptionArray: (NSMutableArray *) ioDescriptionArray {
  [super buildToManyRelationshipDescriptionArray:ioDescriptionArray] ;
}

//-----------------------------------------------------------------------------*
//    resetBeforeDeletion                                                      *
//-----------------------------------------------------------------------------*

- (void) resetBeforeDeletion {
//--- Remove Transient observers
  [super resetBeforeDeletion] ;
}

//-----------------------------------------------------------------------------*
//    saveIntoDictionary                                                       *
//-----------------------------------------------------------------------------*

- (void) saveIntoDictionary: (NSMutableDictionary *) ioDictionary {
  [super saveIntoDictionary:ioDictionary] ;
  storeNSStringInDictionary (self.myString, @"myString", ioDictionary) ;
  storeMonEnumerationInDictionary (self.myEnumeration, @"myEnumeration", ioDictionary) ;
  storeNSColorInDictionary (self.myColor, @"myColor", ioDictionary) ;
}

//-----------------------------------------------------------------------------*
//    setUpWithDictionary                                                      *
//-----------------------------------------------------------------------------*

- (void) setUpWithDictionary: (NSDictionary *) inDictionary
         withManagedEntityArray: (NSArray *) inManagedEntityArray {
  [super
    setUpWithDictionary:inDictionary
    withManagedEntityArray:inManagedEntityArray
  ] ;
  self.myString = readNSStringFromDictionary (@"myString", inDictionary) ;
  self.myEnumeration = readMonEnumerationFromDictionary (@"myEnumeration", inDictionary) ;
  self.myColor = readNSColorFromDictionary (@"myColor", inDictionary) ;
}

//-----------------------------------------------------------------------------*
//    setMyString_swizzled       *
//-----------------------------------------------------------------------------*

- (void) setMyString_swizzled: (NSString *) inNewValue {
  if (! ([inNewValue isEqualToString:self.myString])) {
  //--- Register old value in undo manager
    [self.undoManager
      registerUndoWithTarget:self
      selector:@selector (setMyString:)
      object:self.myString
    ] ;
  //--- Store new value
    [self setMyString_swizzled :inNewValue] ;
  //--- Notify observers
    [myString_observers makeObjectsPerformSelector:@selector (entity_2E_MyRootEntity_2E_myString_didChange)] ;
  //--- Trigger 'myStringMaj transient'
    if (myStringMaj__computed) {
      myStringMaj__computed = NO ;
      [PMApplication
        enterTriggerForObject:self
        transientIndex:entity_2E_MyRootEntity_2E_myStringMaj
      ] ;
    }
  //--- Trigger 'myStringMin transient'
    if (myStringMin__computed) {
      myStringMin__computed = NO ;
      [PMApplication
        enterTriggerForObject:self
        transientIndex:entity_2E_MyRootEntity_2E_myStringMin
      ] ;
    }
  //--- Trigger 'myStringConcat transient'
    if (myStringConcat__computed) {
      myStringConcat__computed = NO ;
      [PMApplication
        enterTriggerForObject:self
        transientIndex:entity_2E_MyRootEntity_2E_myStringConcat
      ] ;
    }
  }
}

//-----------------------------------------------------------------------------*
//    setMyEnumeration_swizzled       *
//-----------------------------------------------------------------------------*

- (void) setMyEnumeration_swizzled: (MonEnumeration) inNewValue {
  if (! (inNewValue == self.myEnumeration)) {
  //--- Register old value in undo manager
    [[self.undoManager prepareWithInvocationTarget:self]
      setMyEnumeration:self.myEnumeration
    ] ;
  //--- Store new value
    [self setMyEnumeration_swizzled :inNewValue] ;
  //--- Notify observers
    [myEnumeration_observers makeObjectsPerformSelector:@selector (entity_2E_MyRootEntity_2E_myEnumeration_didChange)] ;
  }
}

//-----------------------------------------------------------------------------*
//    setMyColor_swizzled       *
//-----------------------------------------------------------------------------*

- (void) setMyColor_swizzled: (NSColor *) inNewValue {
  if (! ([inNewValue isEqual:self.myColor])) {
  //--- Register old value in undo manager
    [self.undoManager
      registerUndoWithTarget:self
      selector:@selector (setMyColor:)
      object:self.myColor
    ] ;
  //--- Store new value
    [self setMyColor_swizzled :inNewValue] ;
  //--- Notify observers
    [myColor_observers makeObjectsPerformSelector:@selector (entity_2E_MyRootEntity_2E_myColor_didChange)] ;
  }
}


//-----------------------------------------------------------------------------*
//    myString Observer                                               *
//-----------------------------------------------------------------------------*

- (void) addObserverOf_myString: (NSObject *) inObserver {
  if (nil == myString_observers) {
    myString_observers = [NSMutableSet new] ;
  }
  [myString_observers addObject:inObserver] ;
  #ifdef PM_COCOA_DEBUG
    const BOOL ok =
  #endif
  [NSApp sendAction:@selector (entity_2E_MyRootEntity_2E_myString_didChange) to:inObserver from:self] ;
  macroAssert (ok, @"NSApp sendAction fail", 0, 0) ;
//  [inObserver performSelector:@selector (entity_2E_MyRootEntity_2E_myString_didChange)] ;
}

//-----------------------------------------------------------------------------*

- (void) removeObserverOf_myString: (NSObject *) inObserver {
  [myString_observers removeObject:inObserver] ;
  #ifdef PM_COCOA_DEBUG
    const BOOL ok =
  #endif
  [NSApp sendAction:@selector (entity_2E_MyRootEntity_2E_myString_didChange) to:inObserver from:self] ;
  macroAssert (ok, @"NSApp sendAction fail", 0, 0) ;
//  [inObserver performSelector:@selector (entity_2E_MyRootEntity_2E_myString_didChange)] ;
}


//-----------------------------------------------------------------------------*
//    myEnumeration Observer                                               *
//-----------------------------------------------------------------------------*

- (void) addObserverOf_myEnumeration: (NSObject *) inObserver {
  if (nil == myEnumeration_observers) {
    myEnumeration_observers = [NSMutableSet new] ;
  }
  [myEnumeration_observers addObject:inObserver] ;
  #ifdef PM_COCOA_DEBUG
    const BOOL ok =
  #endif
  [NSApp sendAction:@selector (entity_2E_MyRootEntity_2E_myEnumeration_didChange) to:inObserver from:self] ;
  macroAssert (ok, @"NSApp sendAction fail", 0, 0) ;
//  [inObserver performSelector:@selector (entity_2E_MyRootEntity_2E_myEnumeration_didChange)] ;
}

//-----------------------------------------------------------------------------*

- (void) removeObserverOf_myEnumeration: (NSObject *) inObserver {
  [myEnumeration_observers removeObject:inObserver] ;
  #ifdef PM_COCOA_DEBUG
    const BOOL ok =
  #endif
  [NSApp sendAction:@selector (entity_2E_MyRootEntity_2E_myEnumeration_didChange) to:inObserver from:self] ;
  macroAssert (ok, @"NSApp sendAction fail", 0, 0) ;
//  [inObserver performSelector:@selector (entity_2E_MyRootEntity_2E_myEnumeration_didChange)] ;
}


//-----------------------------------------------------------------------------*
//    myColor Observer                                               *
//-----------------------------------------------------------------------------*

- (void) addObserverOf_myColor: (NSObject *) inObserver {
  if (nil == myColor_observers) {
    myColor_observers = [NSMutableSet new] ;
  }
  [myColor_observers addObject:inObserver] ;
  #ifdef PM_COCOA_DEBUG
    const BOOL ok =
  #endif
  [NSApp sendAction:@selector (entity_2E_MyRootEntity_2E_myColor_didChange) to:inObserver from:self] ;
  macroAssert (ok, @"NSApp sendAction fail", 0, 0) ;
//  [inObserver performSelector:@selector (entity_2E_MyRootEntity_2E_myColor_didChange)] ;
}

//-----------------------------------------------------------------------------*

- (void) removeObserverOf_myColor: (NSObject *) inObserver {
  [myColor_observers removeObject:inObserver] ;
  #ifdef PM_COCOA_DEBUG
    const BOOL ok =
  #endif
  [NSApp sendAction:@selector (entity_2E_MyRootEntity_2E_myColor_didChange) to:inObserver from:self] ;
  macroAssert (ok, @"NSApp sendAction fail", 0, 0) ;
//  [inObserver performSelector:@selector (entity_2E_MyRootEntity_2E_myColor_didChange)] ;
}

//----------------------------------------------------------------------------*
// Cache routine of 'myStringMaj' transient     *
//----------------------------------------------------------------------------*

- (NSString *) myStringMaj {
  if (! myStringMaj__computed) {
    myStringMaj__cache = compute_MyRootEntity_myStringMaj (self.myString) ;
    myStringMaj__computed = YES ;
  }
  return myStringMaj__cache.copy ;
}

//----------------------------------------------------------------------------*
// Cache routine of 'myStringMin' transient     *
//----------------------------------------------------------------------------*

- (NSString *) myStringMin {
  if (! myStringMin__computed) {
    myStringMin__cache = compute_MyRootEntity_myStringMin (self.myString) ;
    myStringMin__computed = YES ;
  }
  return myStringMin__cache.copy ;
}

//----------------------------------------------------------------------------*
// Cache routine of 'myStringConcat' transient     *
//----------------------------------------------------------------------------*

- (NSString *) myStringConcat {
  if (! myStringConcat__computed) {
    myStringConcat__cache = compute_MyRootEntity_myStringConcat (self.myStringMaj, self.myStringMin) ;
    myStringConcat__computed = YES ;
  }
  return myStringConcat__cache.copy ;
}

//-----------------------------------------------------------------------------*

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

@end
