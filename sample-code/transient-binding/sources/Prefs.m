//---------------------------------------------------------------------------*
//                                                                           *
//                              File 'Prefs.m'                               *
//                        Generated by version 1.0.0                         *
//                      july 15th, 2011, at 17h59'54"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#import "Prefs.h"
#import "easy-bindings-utilities.h"
#import "Prefs-transient-computations.h"

//----------------------------------------------------------------------------*

Prefs * g_Prefs ;

//----------------------------------------------------------------------------*

@implementation Prefs

//----------------------------------------------------------------------------*
//    Synthesize properties                                                   *
//----------------------------------------------------------------------------*

@synthesize mName ;
@synthesize mFirstName ;

//----------------------------------------------------------------------------*
//    Init                                                                    *
//----------------------------------------------------------------------------*

- (id) init {
  #ifdef EASY_BINDINGS_DEBUG
    NSLog (@"%s", __PRETTY_FUNCTION__) ;
  #endif
  self = [super init] ;
  if (self) {
    #ifdef PM_COCOA_DEBUG
      objectHasBeenAllocated (self) ;
    #endif
    g_Prefs = self ;
  //---
    NSUserDefaults * ud = [NSUserDefaults standardUserDefaults] ;
    id value ;
    value = [ud objectForKey:@"Prefs:mName"] ;
    if (nil == value) {
      mName = @"Am\xC3""\xA9""d\xC3""\xA9""e" ;
    }else{
      mName =  (value) ;
    }
    value = [ud objectForKey:@"Prefs:mFirstName"] ;
    if (nil == value) {
      mFirstName = @"Schmurtz" ;
    }else{
      mFirstName =  (value) ;
    }
  //---
    [[NSNotificationCenter defaultCenter]
      addObserver:self
      selector:@selector(applicationWillTerminateAction:)
      name:NSApplicationWillTerminateNotification
      object:nil
    ] ;
  }
  return self ;
}

//----------------------------------------------------------------------------*
//    applicationWillTerminateAction:                                         *
//----------------------------------------------------------------------------*

- (void) applicationWillTerminateAction: (NSNotification *) inNotification {
  NSUserDefaults * ud = [NSUserDefaults standardUserDefaults] ;
  [ud setObject: (mName) forKey:@"Prefs:mName"] ;
  [ud setObject: (mFirstName) forKey:@"Prefs:mFirstName"] ;
}

//----------------------------------------------------------------------------*
//                    presentOutletErrorOnLine:message:                       *
//----------------------------------------------------------------------------*

- (void) presentOutletErrorOnLine: (int) inLineNumber message: (NSString *) inMessage {
  NSString * f = [[NSString stringWithCString:__FILE__ encoding:NSASCIIStringEncoding] lastPathComponent] ;
  NSMutableString * message = [NSMutableString stringWithCapacity:1000] ;
  [message appendFormat:@"File: %@\n", f] ;
  [message appendFormat:@"Line: %d\n\n", inLineNumber] ;
  [message appendFormat:@"Message: %@", inMessage] ;
  static NSPoint origin = {20.0F, 20.0F} ;
  const NSRect r = {origin, {300.0F, 200.0F}} ;
  origin.x += 20.0F ;
  origin.y += 20.0F ;
  NSWindow * window = [[NSWindow alloc] initWithContentRect:r
    styleMask:NSTitledWindowMask | NSClosableWindowMask
    backing:NSBackingStoreBuffered
    defer:YES
    screen:nil
  ] ;
  [window setTitle:@"Outlet Error"] ;
  NSView * contentView = [window contentView] ;
  const NSRect tfRect = NSInsetRect ([contentView bounds], 10.0F, 10.0F) ;
  NSTextField * tf = [[NSTextField alloc] initWithFrame:tfRect] ;
  [tf setEditable:NO] ;
  [tf setSelectable:YES] ;
  [tf setFont:[NSFont boldSystemFontOfSize:0.0F]] ;
  [tf setTextColor:[NSColor redColor]] ;
  [tf setStringValue:message] ;
  [contentView addSubview:tf] ;
  NSBeep () ;
  [window makeKeyAndOrderFront:nil] ;
}

//----------------------------------------------------------------------------*
//    awakeFromNib                                                            *
//----------------------------------------------------------------------------*

- (void) awakeFromNib {
  #ifdef EASY_BINDINGS_DEBUG
    NSLog (@"%s", __PRETTY_FUNCTION__) ;
  #endif
//--- check mNameTextField' outlet not nil
  if (nil == mNameTextField) {
    [self presentOutletErrorOnLine:__LINE__ message:@"the 'mNameTextField' outlet is nil"] ;
  }
//--- 'mNameTextField' outlet: value' binding
  [mNameTextField
    bind:@"value"
    toObject:self
    withKeyPath:@"mName"
    options:nil
  ] ;
//--- check mFirstNameTextField' outlet not nil
  if (nil == mFirstNameTextField) {
    [self presentOutletErrorOnLine:__LINE__ message:@"the 'mFirstNameTextField' outlet is nil"] ;
  }
//--- 'mFirstNameTextField' outlet: value' binding
  [mFirstNameTextField
    bind:@"value"
    toObject:self
    withKeyPath:@"mFirstName"
    options:nil
  ] ;
//--- check mFullNameTextField' outlet not nil
  if (nil == mFullNameTextField) {
    [self presentOutletErrorOnLine:__LINE__ message:@"the 'mFullNameTextField' outlet is nil"] ;
  }
//--- 'mFullNameTextField' outlet: value' binding
  [mFullNameTextField
    bind:@"value"
    toObject:self
    withKeyPath:@"mFullName"
    options:nil
  ] ;
}

//----------------------------------------------------------------------------*
//    willChangeValueForKey                                                   *
//----------------------------------------------------------------------------*

- (void) willChangeValueForKey:(NSString *) inKey {
  // NSLog (@"%s:'%@'", __PRETTY_FUNCTION__, inKey) ;
  if ([inKey isEqualToString:@"mFirstName"]) {
    mFullName_hasBeenComputed = NO ;
  }else if ([inKey isEqualToString:@"mName"]) {
    mFullName_hasBeenComputed = NO ;
  }
  [super willChangeValueForKey:inKey] ;
}

//----------------------------------------------------------------------------*
//    'mFullName' transient                                  *
//----------------------------------------------------------------------------*

+ (NSSet *) keyPathsForValuesAffectingMFullName {
  return [NSSet setWithObjects: @"mName",  @"mFirstName", nil] ;
}

//----------------------------------------------------------------------------*

- (NSString *) mFullName {
  if (!mFullName_hasBeenComputed) {
    mFullName_hasBeenComputed = YES ;
    mFullName_cachedValue = [compute_Prefs_mFullName ([self mName], [self mFirstName]) copy] ;
  }
  return mFullName_cachedValue ;
}

//----------------------------------------------------------------------------*

- (void) setMFullName: (NSString *) inUnusedValue {
  // A transient property cannot be set: this method has no effect
}

//----------------------------------------------------------------------------*

@end

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


