//--------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//--------------------------------------------------------------------------------------------------

import AppKit

//--------------------------------------------------------------------------------------------------
//    ReadOnlyObject_%!ENTITY_NAME%
//--------------------------------------------------------------------------------------------------

class ReadOnlyObject_%!ENTITY_NAME% : EBReadOnlyAbstractObjectProperty <%!ENTITY_NAME%> {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func notifyModelDidChangeFrom (oldValue inOldValue : %!ENTITY_NAME%?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
%if ([SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION count] + [TRANSIENT_LIST_FOR_IMPLEMENTATION count] +[COMPUTED_PROPERTY_LIST_FOR_IMPLEMENTATION count]) > 0 then
%    if let oldValue = inOldValue {\n%
for (mProperty) in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %      oldValue.%!mProperty.mPropertyName%_property.stopsBeingObserved (by: self.%!mProperty.mPropertyName%_property) // Stored property\n%
end
for (mProperty) in TRANSIENT_LIST_FOR_IMPLEMENTATION do
  %      oldValue.%!mProperty.mPropertyName%_property.stopsBeingObserved (by: self.%!mProperty.mPropertyName%_property) // Transient property\n%
end
for (mProperty) in COMPUTED_PROPERTY_LIST_FOR_IMPLEMENTATION do
  %      oldValue.%!mProperty.mPropertyName%_property.stopsBeingObserved (by: self.%!mProperty.mPropertyName%_property) // Computed property\n%
end
for (mProperty) in TO_MANY_RELATIONSHIP_LIST do
  %      if let relay = self.mObserversOf_%!mProperty.mPropertyName% { // to Many\n%
  %        oldValue.%!mProperty.mPropertyName%_property.stopsBeingObserved (by: relay)\n%
  %      }\n%
end
%    }\n%
end
%  //--- Add observers to added objects
%if ([SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION count] + [TRANSIENT_LIST_FOR_IMPLEMENTATION count] +[COMPUTED_PROPERTY_LIST_FOR_IMPLEMENTATION count]) > 0 then
%    if let newValue = self.mWeakInternalValue {\n%
for (mProperty) in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %      newValue.%!mProperty.mPropertyName%_property.startsBeingObserved (by: self.%!mProperty.mPropertyName%_property) // Stored property\n%
end
for (mProperty) in TRANSIENT_LIST_FOR_IMPLEMENTATION do
  %      newValue.%!mProperty.mPropertyName%_property.startsBeingObserved (by: self.%!mProperty.mPropertyName%_property) // Transient property\n%
end
for (mProperty) in COMPUTED_PROPERTY_LIST_FOR_IMPLEMENTATION do
  %      newValue.%!mProperty.mPropertyName%_property.startsBeingObserved (by: self.%!mProperty.mPropertyName%_property) // Computed property\n%
end
for (mProperty) in TO_MANY_RELATIONSHIP_LIST do
  %      if let relay = self.mObserversOf_%!mProperty.mPropertyName% { // to Many\n%
  %        newValue.%!mProperty.mPropertyName%_property.startsBeingObserved (by: relay)\n%
  %      }\n%
end
%    }\n%
end
%  }

%
for (mProperty) in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do

%  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of '%!mProperty.mPropertyName%' stored property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let %!mProperty.mPropertyName%_property = EBTransientProperty <%![mProperty.mType swiftTypeName]%?> ()

%
end
for (mProperty) in TRANSIENT_LIST_FOR_IMPLEMENTATION do
%  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of '%!mProperty.mPropertyName%' transient property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let %!mProperty.mPropertyName%_property = EBTransientProperty <%![mProperty.mType swiftTypeName]%?> ()

%
end
for (mProperty) in COMPUTED_PROPERTY_LIST_FOR_IMPLEMENTATION do
%  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Observers of '%!mProperty.mPropertyName%' computed property
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final let %!mProperty.mPropertyName%_property = EBTransientProperty <%![mProperty.mType swiftTypeName]%?> ()

%
end
for (mProperty) in TO_MANY_RELATIONSHIP_LIST do
  %  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n%
  %  //   Observable toMany property: %!mProperty.mPropertyName%\n%
  %  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n%
  %  private final var mObserversOf_%!mProperty.mPropertyName% : EBObservedObserver? = nil\n\n%
  %  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n%
  %  final func toMany_%!mProperty.mPropertyName%_StartsBeingObserved (by inObserver : any EBObserverProtocol) {\n%
  %    let relay : EBObservedObserver\n%
  %    if let r = self.mObserversOf_%!mProperty.mPropertyName% {\n%
  %      relay = r\n%
  %    }else{\n%
  %      relay = EBObservedObserver ()\n%
  %      self.mWeakInternalValue?.%!mProperty.mPropertyName%_property.startsBeingObserved (by: relay)\n%
  %      self.mObserversOf_%!mProperty.mPropertyName% = relay\n%
  %    }\n%
  %    relay.startsBeingObserved (by: inObserver)\n%
  %  }\n\n%
  %  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n%
  %  final func toMany_%!mProperty.mPropertyName%_StopsBeingObserved (by inObserver : any EBObserverProtocol) {\n%
  %    self.mObserversOf_%!mProperty.mPropertyName%?.stopsBeingObserved (by: inObserver)\n%
  %  }\n\n%
end
%  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   INIT
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override init () {
    super.init ()
%for (mProperty) in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
%  //--- Configure %!mProperty.mPropertyName% simple stored property\n%
%    self.%!mProperty.mPropertyName%_property.mReadModelFunction = { [weak self] in\n%
%      return self?.mWeakInternalValue?.%!mProperty.mPropertyName%_property.optionalSelection ?? .single (nil)\n%
%    }\n%
end
for (mProperty) in TRANSIENT_LIST_FOR_IMPLEMENTATION do
%  //--- Configure %!mProperty.mPropertyName% transient property\n%
%    self.%!mProperty.mPropertyName%_property.mReadModelFunction = { [weak self] in\n%
%      return self?.mWeakInternalValue?.%!mProperty.mPropertyName%_property.optionalSelection ?? .single (nil)\n%
%    }\n%
end
for (mProperty) in COMPUTED_PROPERTY_LIST_FOR_IMPLEMENTATION do
%  //--- Configure %!mProperty.mPropertyName% computed property\n%
%    self.%!mProperty.mPropertyName%_property.mReadModelFunction = { [weak self] in\n%
%      return self?.mWeakInternalValue?.%!mProperty.mPropertyName%_property.optionalSelection ?? .single (nil)\n%
%    }\n%
end
%  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------
//    StoredObject_%!ENTITY_NAME%
//--------------------------------------------------------------------------------------------------

final class StoredObject_%!ENTITY_NAME% : ReadOnlyObject_%!ENTITY_NAME%, EBSignatureObserverProtocol, EBDocumentStorablePropertyAndRelationshipProtocol {

 // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  init (usedForSignature inUsedForSignature : Bool, strongRef inStrongReference : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mIsStrongReference = inStrongReference
    self.mKey = inKey
    super.init ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private let mKey : String?
  var key : String? { return self.mKey }
  
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndex = inDictionary [key] as? Int {
      let object = inManagedObjectArray [objectSavingIndex] as! %!ENTITY_NAME%
      self.setProp (object)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func initialize (fromRange inRange : NSRange, ofData inData : Data, _ inRawObjectArray : [RawObject]) {
    if let idx = inData.base62EncodedInt (range: inRange) {
      let object = inRawObjectArray [idx].object as! %!ENTITY_NAME%
      self.setProp (object)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, let idx = self.mWeakInternalValue?.savingIndex {
      ioDictionary [key] = idx
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, let object = self.mWeakInternalValue {
      ioArray.append (object)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func appendValueTo (data ioData : inout Data) {
    if let object = self.propval {
      ioData.append (base62Encoded: object.savingIndex)
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Signature ?
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private let mUsedForSignature : Bool

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Undo manager
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  weak var undoManager : UndoManager? = nil // SOULD BE WEAK

%if HANDLING_OPPOSITE then
%  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Opposite relationship management
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : %!ENTITY_NAME%) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : %!ENTITY_NAME%) -> Void > = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : %!ENTITY_NAME%) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : %!ENTITY_NAME%) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

%end
%  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // Model will change
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private final class MyPrivateUndoer : NSObject { // For Swift 6
    let mOldValue : %!ENTITY_NAME%?

    init (_ inOldValue : %!ENTITY_NAME%?) {
      self.mOldValue = inOldValue
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  @objc private final func myPerformUndo (_ inObject : MyPrivateUndoer) {  // For Swift 6
  //  self.mWeakInternalValue = inObject.mOldValue
    self.setProp (inObject.mOldValue)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func notifyModelDidChangeFrom (oldValue inOldValue : %!ENTITY_NAME%?) {
  //--- Register old value in undo manager
     self.undoManager?.registerUndo (  // For Swift 6
      withTarget: self,
      selector: #selector (Self.myPerformUndo (_:)),
      object: MyPrivateUndoer (inOldValue)
    )
//    self.undoManager?.registerUndo (withTarget: self) { $0.setProp (inOldValue) }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
%if HANDLING_OPPOSITE then
%      self.mResetOppositeRelationship? (object)
%end
%    }
  //---
    if let object = self.mWeakInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
%if HANDLING_OPPOSITE then
%      self.mSetOppositeRelationship? (object)
%end
%    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // Model did change
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override var selection : EBSelection < %!ENTITY_NAME%? > {
    if let object = self.mWeakInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var propval : %!ENTITY_NAME%? { return self.mWeakInternalValue }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   setProp
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private let mIsStrongReference : Bool
  private var mStrongInternalValue : EBManagedObject? = nil // Only used for retaining

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func setProp (_ inValue : %!ENTITY_NAME%?) {
    self.mWeakInternalValue = inValue
    if self.mIsStrongReference {
      self.mStrongInternalValue = inValue
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   signature
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private weak var mSignatureObserver : (any EBSignatureObserverProtocol)? = nil // SOULD BE WEAK

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private var mSignatureCache : UInt32? = nil

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func setSignatureObserver (observer inObserver : (any EBSignatureObserverProtocol)?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mWeakInternalValue {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

