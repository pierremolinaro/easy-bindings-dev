//------------------------------------------------------------------------------------------------
//   PROGRAM                               
//------------------------------------------------------------------------------------------------

struct @semanticContext {
  public var @classMap mClassMap = []
  public var @outletClassMap mOutletClassMap = []
  public var @bindingSpecificationMap mBindingSpecificationMap = []
  public var @autolayoutViewClassMap mAutolayoutViewClassMap = []
  public var @autoLayoutBindingSpecificationMap mAutoLayoutBindingSpecificationMap = []
  public var @astAutoLayoutViewFunctionMap mAutoLayoutVStackFunctionMap = []
  public var @astAutoLayoutViewFunctionMap mAutoLayoutHStackFunctionMap = []
  public var @enumerationFunctionListAST mEnumerationFunctionListAST = []
}

//------------------------------------------------------------------------------------------------

case ."eb"
  %errorMessage "a source text file with the .easyBindings extension"
  grammar easyBindings_grammar
  ?sourceFilePath:@lstring inSourceFile
{
  var declarationStruct = @astDeclarationStruct ()
//---------------------------------------- Parse predefined outlets files
  grammar easyBindings_grammar (!?declarationStruct, ?*) on filewrapper [predefinedOutletClasses.sourceFile:]:""
//---------------------------------------- Parse source file
  grammar easyBindings_grammar (!?declarationStruct, ?let @location unused endOfSourceFile) in inSourceFile
//----------------------- Add prefs declaration
  !?declarationStruct.mUnifiedDeclarationList.append (@prefsDeclarationAST (
    .init(preferencesName (), .nowhere),
    declarationStruct.mPreferences
  )
  )
//---------------------------------------- Add Atomic type declarations
  enterAtomicClassesIn (!?declarationList: declarationStruct.mUnifiedDeclarationList)
//---------------------------------------- Sort properties
  sortProperties (inSourceFile.string, declarationStruct.mUnifiedDeclarationList, ?let sortedDeclarationListAST)
//---------------------------------------- Semantic Analysis, first phase
  var semanticContext = @semanticContext ()
  semanticContext.mAutoLayoutVStackFunctionMap = declarationStruct.mAutoLayoutVStackFunctionMap
  semanticContext.mAutoLayoutHStackFunctionMap = declarationStruct.mAutoLayoutHStackFunctionMap
  semanticContext.mEnumerationFunctionListAST = declarationStruct.mEnumerationFunctionListAST
  var generation = @generationStruct ()
  for (declaration) in sortedDeclarationListAST while @uint.errorCount == 0 do
    declaration.firstAnalysisPhase (!?semanticContext, !?generation)
  end
//---------------------------------------- Build binding specification map
  if @uint.errorCount == 0 then
    buildBindingSpecificationMap (
      !?semanticContext,
      declarationStruct.mBindingSpecificationListMap
    )
  end
  if @uint.errorCount == 0 then
    buildAutoLayoutBindingSpecificationMap (
      !?semanticContext,
      declarationStruct.mAutoLayoutBindingSpecificationList
    )
  end
//---------------------------------------- Semantic Analysis, second phase
  for (declaration) in sortedDeclarationListAST while @uint.errorCount == 0 do
    declaration.secondAnalysisPhase (!?semanticContext, !?generation)
  end
//---------------------------------------- Semantic Analysis, third phase
  for (declaration) in sortedDeclarationListAST while @uint.errorCount == 0 do
    declaration.thirdAnalysisPhase (!?semanticContext, !?generation)
  end
//---------------------------------------- Semantic Analysis, fourth phase
  for (declaration) in sortedDeclarationListAST while @uint.errorCount == 0 do
    declaration.fourthAnalysisPhase (!?semanticContext, !?generation)
  end
//---------------------------------------- Check enum type is declared for every enum function
  if @uint.errorCount == 0 then
    for (enumTypeName, 2*) in semanticContext.mEnumerationFunctionListAST do
      semanticContext.mClassMap.searchKey (enumTypeName, ?let type, ?3*)
      if not type.isAtomic then
        error enumTypeName : "this type should be an enum type"
      else
        type.extractAtomic (?kind:let typeKind)
        if not typeKind.isEnumType then
          error enumTypeName : "this type should be an enum type"
        end
      end
    end
  end
//---------------------------------------- Semantic Analysis, graphviz
  if @uint.errorCount == 0 then
    graphvizAnalysis (inSourceFile.stringByDeletingLastPathComponent (), semanticContext, declarationStruct.mGraphvizList)
  end
//---------------------------------------- Generate code
  if @uint.errorCount == 0 then
    generateCode (
      declarationStruct.mXcodeProject.string,
      generation,
      inSourceFile.string
    )
  end
}

//------------------------------------------------------------------------------------------------
//   FILEWRAPPER: predefined outlet classes
//------------------------------------------------------------------------------------------------

filewrapper predefinedOutletClasses in "generation-templates" {
}{
}{
  template sourceFile : "predefinedOutletClasses.eb" ()
}

//------------------------------------------------------------------------------------------------
