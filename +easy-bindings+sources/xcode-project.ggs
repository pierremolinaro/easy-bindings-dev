//-----------------------------------------------------------
//   SYNTAX
//-----------------------------------------------------------

syntax extension easyBindings_syntax {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  rule <xcode_project>(
    ?!@lstring ioXcodeProjectString)
  {
    $xcodeproject$
    $literal_string$ (?let @lstring xcodeProjectString)
    $;$
    if xcodeProjectString.string == "" then
      error xcodeProjectString : "string should not be empty"
    elsif ioXcodeProjectString.string != "" then
      error xcodeProjectString : "Xcode project already defined"
    else
      ioXcodeProjectString = xcodeProjectString
    end
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//-----------------------------------------------------------
//   CODE GENERATION                       
//-----------------------------------------------------------

proc generateXcodeProject(
  let @string inOutputDirectory,
  let @string inXcodeProjectString,
  let @stringset inGeneratedFileSet,
  let @string projectName)
{
  if inXcodeProjectString != "" then
    generateXcodeProjectInternal (inOutputDirectory, inXcodeProjectString, inGeneratedFileSet, projectName)
  end
}

//-----------------------------------------------------------

private proc generateXcodeProjectInternal(
  let @string inOutputDirectory,
  let @string inXcodeProjectString,
  let @stringset inGeneratedFileSet,
  let @string projectName)
{
  var xcodeProject = @XcodeProjectDescriptor ()
//-- Default build configuration
  let SDK = "macosx"
  let DEPLOYMENT = "10.10"
  !?xcodeProject.addSettingsToDefaultConfiguration (!settingList: [
    .init ("ALWAYS_SEARCH_USER_PATHS = NO"),
    .init ("ARCHS = \"$(ARCHS_STANDARD_64_BIT)\""),
    .init ("CLANG_ENABLE_OBJC_ARC = YES"),
    .init ("GCC_GENERATE_DEBUGGING_SYMBOLS = NO"),
    .init ("GCC_PRECOMPILE_PREFIX_HEADER = YES"),
    .init ("GCC_THREADSAFE_STATICS = NO"),
    .init ("GCC_TREAT_IMPLICIT_FUNCTION_DECLARATIONS_AS_ERRORS = YES"),
    .init ("GCC_TREAT_WARNINGS_AS_ERRORS = YES"),
    .init ("GCC_WARN_64_TO_32_BIT_CONVERSION = YES"),
    .init ("GCC_WARN_ABOUT_DEPRECATED_FUNCTIONS = NO"),
    .init ("GCC_WARN_ABOUT_INVALID_OFFSETOF_MACRO = YES"),
    .init ("CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION = YES"),
    .init ("GCC_WARN_ABOUT_MISSING_NEWLINE = YES"),
    .init ("GCC_WARN_ABOUT_MISSING_PROTOTYPES = YES"),
    .init ("GCC_WARN_ABOUT_RETURN_TYPE = YES"),
    .init ("GCC_WARN_CHECK_SWITCH_STATEMENTS = YES"),
    .init ("GCC_WARN_FOUR_CHARACTER_CONSTANTS = YES"),
    .init ("GCC_WARN_HIDDEN_VIRTUAL_FUNCTIONS = YES"),
    .init ("GCC_WARN_INHIBIT_ALL_WARNINGS = NO"),
    .init ("GCC_WARN_INITIALIZER_NOT_FULLY_BRACKETED = YES"),
    .init ("GCC_WARN_MISSING_PARENTHESES = YES"),
    .init ("GCC_WARN_NON_VIRTUAL_DESTRUCTOR = YES"),
    .init ("GCC_WARN_PEDANTIC = NO"),
    .init ("GCC_WARN_SHADOW = NO"),
    .init ("GCC_WARN_SIGN_COMPARE = YES"),
    .init ("GCC_WARN_TYPECHECK_CALLS_TO_PRINTF = YES"),
    .init ("GCC_WARN_UNINITIALIZED_AUTOS = YES"),
    .init ("GCC_WARN_UNKNOWN_PRAGMAS = YES"),
    .init ("GCC_WARN_UNUSED_FUNCTION = YES"),
    .init ("GCC_WARN_UNUSED_LABEL = YES"),
    .init ("GCC_WARN_UNUSED_VALUE = YES"),
    .init ("GCC_WARN_UNUSED_VARIABLE = YES"),
    .init ("HEADER_SEARCH_PATHS = ()"),
    .init ("MACOSX_DEPLOYMENT_TARGET = " + DEPLOYMENT),
    .init ("SDKROOT = " + SDK),
    .init ("COPY_PHASE_STRIP = NO"),
    .init ("SWIFT_VERSION = 4.2"),
    .init ("LD_RUNPATH_SEARCH_PATHS = \"$(inherited) @executable_path/../Frameworks\"")
  ])
//-- Add "Hand coded sources (App)" group
  var @stringlist swiftFileRefList = []
  var @stringlist resourceFileRefList = []
  var generatedFileSet = inGeneratedFileSet
  !?generatedFileSet.insert ("MainMenu.xib")
   var cppFileRefs = @stringlist ()
   var mFileRefs = @stringlist ()
   var mmFileRefs = @stringlist ()
   var frameworkFileRefs = @stringlist ()
  !?xcodeProject.addGroupWithFiles (
    !groupName:"Sources",
    !groupPath:projectName,
    !fileNames:generatedFileSet,
    !?cppFileRefs: cppFileRefs,
    !?mFileRefs: mFileRefs,
    !?mmFileRefs: mmFileRefs,
    !?swiftFileRefs:swiftFileRefList,
    !?frameworkFileRefs: frameworkFileRefs,
    !?resourceFileRefs:resourceFileRefList,
    ?groupRef:@string groupRef
  )
  !?xcodeProject.placeGroupAsMainGroup (!groupRef:groupRef)
   var cppFileRefs2 = @stringlist ()
   var mFileRefs2 = @stringlist ()
   var mmFileRefs2 = @stringlist ()
   var frameworkFileRefs2 = @stringlist ()
  !?xcodeProject.addGroupWithFiles (
    !groupName:"Resources",
    !groupPath:projectName,
    !fileNames: ["Info.plist"],
    !?cppFileRefs: cppFileRefs2,
    !?mFileRefs: mFileRefs2,
    !?mmFileRefs: mmFileRefs2,
    !?swiftFileRefs:swiftFileRefList,
    !?frameworkFileRefs: frameworkFileRefs2,
    !?resourceFileRefs:resourceFileRefList,
    ?groupRef:groupRef
  )
  !?xcodeProject.placeGroupAsMainGroup (!groupRef:groupRef)
//-- Add Cocoa target
  !?xcodeProject.addAppTarget (
    !targetName:projectName,
    !productFileName:projectName,
    !sources:swiftFileRefList,
    !frameworkFileRefs:[],
    !resourceFileRefs:resourceFileRefList,
    !buildConfigurationSettingList: [
      .init ("GCC_OPTIMIZATION_LEVEL = 0"),
      .init ("GCC_PREPROCESSOR_DEFINITIONS = ()")
    ],
    !dependantTargetList:[],
    !productCopyList:[],
    !infoPList:projectName + "/Info.plist",
    ?productFileRef:*
  )
//-- Generate project
  let sourceDir = inOutputDirectory + "/" + projectName + "/"
  xcodeProject.generateAtPath
    (!xcodeprojPath:inOutputDirectory + "/" + projectName + ".xcodeproj",
    !cacheFilePath:sourceDir + projectName + ".xcodeproj.txt"
  )
//-- Generate additional files
  var s = filewrapper [additionalXcodeFiles.info_plist:
    projectName,
    inXcodeProjectString,
    "1.0.0",
    [projectName]
  ]
  @string.generateFile (
    sourceDir,
    "Info.plist",
    s
  )
  s = filewrapper [additionalXcodeFiles.main_xib:
    projectName
  ]
  @string.generateFile (
    sourceDir,
    "MainMenu.xib",
    s
  )
  s = filewrapper [additionalXcodeFiles.build_command: projectName]
  s.writeToExecutableFileWhenDifferentContents
    (inOutputDirectory + "/build.py",
    ?*
  )
}

//---------------------------------------------------------------------------------------------------------------------*

private filewrapper additionalXcodeFiles in "generation-templates/xcode-project" {
}{
}{

  template main_xib : "MainMenu.xib.galgasTemplate" (
    @string PROJECT_NAME
  )

  template info_plist : "Info.plist.txt" (
    @string PROJECT_NAME,
    @string APPLICATION_BUNDLE_BASE,
    @string VERSION_STRING,
    @stringset HANDLED_EXTENSION_SET
  )

  template build_command : "build.py.galgasTemplate" (
    @string PROJECT_NAME
  )
}

//-----------------------------------------------------------
