//------------------------------------------------------------------------------------------------
//   AST   
//------------------------------------------------------------------------------------------------

enum @toManyRelationshipOptionAST {
  case none
  case hasOpposite (@lstring oppositeName)
  case hasDependance (@lstring masterPropertyName)
}

//------------------------------------------------------------------------------------------------

class @toManyRelationshipAST : @abstractDeclarationAST {
  public let @lstring mDestinationEntityName
  public let @lstring mToManyRelationshipName
  public let @toManyRelationshipOptionAST mOption
  public let @bool mCustomStore
  public let @bool mUsedForSignature
  public let @bool mGenerateDirectAccess
  public let @bool mGenerateDirectRead
}

//------------------------------------------------------------------------------------------------

override proc @toManyRelationshipAST.enterInPrecedenceGraph (?!@declarationPrecedenceGraph ioGraph) {
  let node = @lstring (self.mClassName.string + " " + self.mToManyRelationshipName, self.mToManyRelationshipName.location)
  !?ioGraph.addNode (node, self)
  !?ioGraph.addEdge (!from: node, !to: self.mClassName)
  !?ioGraph.addEdge (!from: node, !to: self.mDestinationEntityName)
  switch self.mOption
  case hasDependance (masterPropertyName) :
    let dependanceNode = @lstring (self.mClassName.string + " " + masterPropertyName, masterPropertyName.location)
    !?ioGraph.addEdge (!from: node, !to: dependanceNode)
  case hasOpposite (*) :
  case none :
  end
}

//------------------------------------------------------------------------------------------------

override func @toManyRelationshipAST.nodeKey() -> @lstring {
  result = @lstring (self.mClassName.string + " " + self.mToManyRelationshipName, self.mToManyRelationshipName.location)
}

//------------------------------------------------------------------------------------------------
//   SYNTAX
//------------------------------------------------------------------------------------------------

syntax extension easyBindings_syntax {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  rule <toMany_relationship>(
            let @lstring inCurrentEntity,
            ?!@stringset ioSignatureList,
            ?!@astDeclarationStruct ioDeclarationAST) {
    $toMany$
    var usedForSignature = false
    var customStore = false
    var generateDirectAccess = false
    var generateDirectRead = false
    repeat
    while
      $@attribute$ (?let attributeName)
      if attributeName.string == "signature" then
        if usedForSignature then
          error attributeName : "duplicated attribute" fixit ( %remove )
        end
        usedForSignature = true
      elsif attributeName.string == "customStore" then
        if customStore then
          error attributeName : "duplicated attribute" fixit ( %remove )
        end
        customStore = true
      elsif attributeName.string == "generateDirectRead" then
        if generateDirectRead then
          error attributeName : "duplicated attribute" fixit ( %remove )
        end
        generateDirectRead = true
      elsif attributeName.string == "generateDirectAccess" then
        if generateDirectAccess then
          error attributeName : "duplicated attribute" fixit ( %remove )
        end
        generateDirectAccess = true
      else
        error attributeName : "unknow attribute" fixit (
          %replaceBy "@signature", %replaceBy "@customStore",
          %replaceBy "@generateDirectAccess", %replaceBy "@generateDirectRead"
        )
      end
    end
    if generateDirectAccess && generateDirectRead then
      error .here : "@generateDirectAccess implies @generateDirectRead"
    end
    $Identifier$ (?let destinationEntityName)
    $identifier$ (?let relationshipName)
    if usedForSignature then
      !?ioSignatureList.insert (relationshipName.string)
    end
    let @toManyRelationshipOptionAST toManyRelationshipOption
    select
      $inverse$
      $toOne$
      $identifier$ (?let inserseRelationshipName)
      toManyRelationshipOption = .hasOpposite (!oppositeName: inserseRelationshipName)
    or
      $dependsFrom$
      $self$
      $.$
      $identifier$ (?let masterPropertyName)
      toManyRelationshipOption = .hasDependance (!masterPropertyName: masterPropertyName)
   or
      toManyRelationshipOption = .none
    end
    $;$
    !?ioDeclarationAST.mUnifiedDeclarationList.append (@toManyRelationshipAST (
      inCurrentEntity,
      destinationEntityName,
      relationshipName,
      toManyRelationshipOption,
      customStore,
      usedForSignature,
      generateDirectAccess,
      generateDirectRead
    )
    )
  }
  
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//------------------------------------------------------------------------------------------------
//   CLASS AND PROPERTY SEMANTIC ANALYSIS                       
//------------------------------------------------------------------------------------------------

override proc @toManyRelationshipAST.firstAnalysisPhase (?!@semanticContext ioSemanticContext,
                                                         ?!@generationStruct ioGeneration) {
  with self.mClassName in !?ioSemanticContext.mClassMap 
    %errorMessage searchKey
  do
    !?ioGeneration.mToManyClassImplementations.insert (self.mDestinationEntityName)
    ioSemanticContext.mClassMap.searchKey (self.mDestinationEntityName, ?let classKind, ?3*)
    switch classKind
    case prefs :
      error self.mDestinationEntityName : "an entity is required here"
    case atomic (*) :
      error self.mDestinationEntityName : "an entity is required here"
    case document (*) :
      error self.mDestinationEntityName : "an entity is required here"
    case entity (*, graphic, *, handleOpposite) :
      let kind = @propertyKind.toMany (
        !typeName: self.mDestinationEntityName,
        !accessibility: .stored,
        !graphic: graphic,
        !optionKind: self.mOption
      )
//      if not handleOpposite, not self.mOption.isHasOpposite then
      if not handleOpposite, self.mOption.isHasOpposite then
        error self.mToManyRelationshipName : "the '" + self.mDestinationEntityName + "' entity does not handle opposite relationship"
      end
      !?mPropertyMap.insertKey (self.mToManyRelationshipName, kind, (), false)
    //-- Current class is preferences ?
      let inPrefs = self.mClassName.string == preferencesName ()
    //-- Option
      let @toManyRelationshipOptionGeneration optionForGeneration
      switch self.mOption
      case hasDependance (masterPropertyName) :
        mPropertyMap.searchKey (masterPropertyName, ?let masterPropertyKind, ?2*)
        optionForGeneration = .hasDependance (
          !masterPropertyName: masterPropertyName.string,
          !masterPropertySwiftTypeName: masterPropertyKind.swiftTypeName
        )
      case hasOpposite (oppositeName) :
        optionForGeneration = .hasOpposite (!oppositeName: oppositeName.string)
      case none :
        optionForGeneration = .none
      end
    //-- Code Generation
      !?mPropertyGenerationList.append (@toManyPropertyGeneration (
        self.mToManyRelationshipName.string,
        self.mGenerateDirectAccess,
        self.mGenerateDirectRead,
        kind,
        optionForGeneration,
        inPrefs,
        self.mCustomStore,
        self.mUsedForSignature
      )
      )
      !?ioGeneration.mGenerateClass_StoredArrayOf_.insert (self.mDestinationEntityName.string)
      if inPrefs then
        !?ioGeneration.mGenerateClass_PreferencesArrayOf_.insert (self.mDestinationEntityName.string)
      end
    end
  end
}

//------------------------------------------------------------------------------------------------

enum @toManyRelationshipOptionGeneration {
  case none
  case hasOpposite (@string oppositeName)
  case hasDependance (@string masterPropertyName, @string masterPropertySwiftTypeName)
}

//------------------------------------------------------------------------------------------------

class @toManyPropertyGeneration : @propertyGeneration {
  public let @bool mGenerateDirectAccess
  public let @bool mGenerateDirectRead
  public let @propertyKind mRelationshipType
  public let @toManyRelationshipOptionGeneration mOption
  public let @bool mInPreferences
  public let @bool mCustomStore
  public let @bool mUsedForSignature
}

//------------------------------------------------------------------------------------------------

list @toManyPropertyGenerationList {
  public var @toManyPropertyGeneration mProperty
}

//------------------------------------------------------------------------------------------------

override func @toManyPropertyGeneration.propertyDeclarationCode (let @bool unused inPreferences,
                                                            let @bool unused inGenerationDirectAccess,
                                                            let @stringset unused inOverriddenTransients) -> @string {
  if self.mOption.isHasDependance then
    result  = "  //" + @string.stringWithSequenceOfCharacters  ('·', 96) + "\n"
    result += "  //   To many property: " + self.mPropertyName + "\n"
    result += "  //" + @string.stringWithSequenceOfCharacters  ('·', 96) + "\n\n"
    self.mOption.extractHasDependance (?1*, ?masterPropertySwiftTypeName: let masterPropertyTypeName)
    result += "  final let " + self.mPropertyName + "_property = TransientArrayOfSuperOf_" + self.mRelationshipType.swiftTypeName
           + " <" + masterPropertyTypeName + "> ()\n\n"
    result += "  //" + @string.stringWithSequenceOfCharacters  ('·', 96) + "\n\n"
    result += "  final var " + self.mPropertyName + " : EBReferenceArray <" + self.mRelationshipType.swiftTypeName + "> {\n"
    result += "    get { return self." + self.mPropertyName + "_property.propval }\n"
    if not self.mOption.isHasDependance then
      result += "    set { self." + self.mPropertyName + "_property.setProp (newValue) }\n"
    end
    result += "  }\n\n"
  elsif self.mInPreferences then
    result  = "//" + @string.stringWithSequenceOfCharacters  ('·', 96) + "\n"
    result += "//   To many property: " + self.mPropertyName + "\n"
    result += "//" + @string.stringWithSequenceOfCharacters  ('·', 96) + "\n\n"
    result += "@MainActor let preferences_" + self.mPropertyName + "_property = PreferencesArrayOf_" + self.mRelationshipType.swiftTypeName
    result += " (prefKey: Preferences_" + self.mPropertyName + ")\n\n"
  else
    result  = "  //" + @string.stringWithSequenceOfCharacters  ('·', 96) + "\n"
    result += "  //   To many property: " + self.mPropertyName + "\n"
    result += "  //" + @string.stringWithSequenceOfCharacters  ('·', 96) + "\n\n"
    result += "  final let " + self.mPropertyName + "_property = "
    if self.mCustomStore then
      result += "Custom_" + self.mRelationshipType.swiftTypeName + "_"
    end
    result +=  "StoredArrayOf_" + self.mRelationshipType.swiftTypeName
    result += " (usedForSignature: " + self.mUsedForSignature.cString + ", key: "
    if self.mCustomStore then
      result += "KEY_FOR_" + self.mRelationshipType.swiftTypeName + "_" + self.mPropertyName
    else
      result += "\"" + self.mPropertyName + "\""
    end
    result += ")\n\n"
    if self.mGenerateDirectAccess || self.mGenerateDirectRead then
      result += "  //" + @string.stringWithSequenceOfCharacters  ('·', 96) + "\n\n"
      result += "  final var " + self.mPropertyName + " : EBReferenceArray <" + self.mRelationshipType.swiftTypeName + "> {\n"
      result += "    get { return self." + self.mPropertyName + "_property.propval }\n"
      if not self.mOption.isHasDependance , self.mGenerateDirectAccess then
        result += "    set { self." + self.mPropertyName + "_property.setProp (newValue) }\n"
      end
      result += "  }\n\n"
    end
  end
}

//------------------------------------------------------------------------------------------------

override func @toManyPropertyGeneration.initCode () -> @string {
  result = ""
}

//------------------------------------------------------------------------------------------------

override func @toManyPropertyGeneration.prefKeyDefinitionCode() -> @string {
  result = "fileprivate let Preferences_" + self.mPropertyName + " = \"Preferences:" + self.mPropertyName + "\"\n"
}

//------------------------------------------------------------------------------------------------

override func @toManyPropertyGeneration.configurationCode (let @bool inPreferences) -> @string {
  let prefix = if inPreferences then "preferences_" else "self." end
  let undoManager = if inPreferences then "self.undoManager" else "inUndoManager" end
  switch self.mOption
  case none :
    result  = "  //--- To many property: " + self.mPropertyName + " (no option)\n"
    result += "    " + prefix + self.mPropertyName + "_property.undoManager = " + undoManager + "\n"
  case hasDependance (2*) :
    result = ""
  case hasOpposite (@string oppositeName) :
    result  = "  //--- To many property: " + self.mPropertyName + " (has opposite relationship)\n"
    result += "    " + prefix + self.mPropertyName + "_property.undoManager = " + undoManager + "\n"
    result += "    " + prefix + self.mPropertyName + "_property.setOppositeRelationShipFunctions (\n"
    result += "      setter: { [weak self] inObject in if let me = self { inObject." + oppositeName + "_property.setProp (me) } },\n"
    result += "      resetter: { inObject in inObject." + oppositeName + "_property.setProp (nil) }\n"
    result += "    )\n"
  end
}

//------------------------------------------------------------------------------------------------

override func @toManyPropertyGeneration.setupRelationshipFromDictionaryCode() -> @string {
  if self.mOption.isHasDependance then
    result = ""
  elsif self.mCustomStore then
    result  = "  //--- To many property: " + self.mPropertyName + " (Custom store)\n"
    result += "    self." + self.mPropertyName + "_property.setProp (EBReferenceArray (customRead_" + self.mRelationshipType.swiftTypeName + "_" + self.mPropertyName + " (fromDictionary: inDictionary, with: self.undoManager)))\n"
  else
    result  = "  //--- To many property: " + self.mPropertyName + "\n"
    result += "    do{\n"
    result += "      let array = readEntityArrayFromDictionary (\n"
    result += "        inRelationshipName: \"" + self.mPropertyName + "\",\n"
    result += "        inDictionary: inDictionary,\n"
    result += "        managedObjectArray: inManagedObjectArray\n"
    result += "      ) as! [" + self.mRelationshipType.swiftTypeName + "]\n"
    result += "      self." + self.mPropertyName + "_property.setProp (EBReferenceArray (array))\n"
    result += "    }\n"
  end
}

//------------------------------------------------------------------------------------------------

override func @toManyPropertyGeneration.objectAccessibilityCodeForSaveOperation() -> @string {
  if self.mCustomStore then
    result  = "  //--- To many property: " + self.mPropertyName + " (custom store)\n"
    result += "    /* for managedObject in self." + self.mPropertyName + "_property.propval.values {\n"
    result += "      ioObjectArray.append (managedObject)\n"
    result += "    } */\n"
  else
    result  = "  //--- To many property: " + self.mPropertyName + "\n"
    result += "    for managedObject in self." + self.mPropertyName + ".values {\n"
    result += "      ioObjectArray.append (managedObject)\n"
    result += "    }\n"
  end
}

//------------------------------------------------------------------------------------------------

override func @toManyPropertyGeneration.resetToManyRelationships() -> @string {
  if self.mOption.isHasDependance then
    result = ""
  else
    result  = "  //--- To many property: " + self.mPropertyName + "\n"
    result += "    self." + self.mPropertyName + "_property.setProp ([])\n"
  end
}

//------------------------------------------------------------------------------------------------
