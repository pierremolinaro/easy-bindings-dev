//------------------------------------------------------------------------------------------------
//   AST
//------------------------------------------------------------------------------------------------

list @autoLayoutTableViewControllerBoundColumnListAST {
  public let @bool mEditable
  public let @lstring mPropertyName
  public let @astAutoLayoutViewInstructionParameterList mColumnParameterListAST
  public let @lstring mSortPropertyName
}

//------------------------------------------------------------------------------------------------

list @autoLayoutTableViewControllerAttributListAST {
  public let @lstring mAttributeName
  public let @abstractDefaultValue mAttributeValue
}

//------------------------------------------------------------------------------------------------

class @autoLayoutTableViewControllerDeclarationAST : @abstractDeclarationAST {
  public let @lstring mControllerName
  public let @bool mIsRoot
  public let @lstring mRootEntityName
  public let @lstring mToManyPropertyName
  public let @autoLayoutTableViewControllerBoundColumnListAST mTableViewControllerBoundColumnListAST
  public let @autoLayoutTableViewControllerAttributListAST mTableViewControllerAttributListAST
}

//------------------------------------------------------------------------------------------------

override proc @autoLayoutTableViewControllerDeclarationAST.enterInPrecedenceGraph (?!@declarationPrecedenceGraph ioGraph) {
  let node = @lstring (self.mClassName.string + " " + self.mControllerName, self.mControllerName.location)
  !?ioGraph.addNode (node, self)
  !?ioGraph.addEdge (!from: node, !to: self.mClassName)
  if not self.mIsRoot then
    !?ioGraph.addEdge (!from: node, !to: @(self.mClassName.string + " " + self.mToManyPropertyName, self.mToManyPropertyName.location))
  elsif self.mRootEntityName.string != "" then
    !?ioGraph.addEdge (!from: node, !to: @(self.mRootEntityName.string + " " + self.mToManyPropertyName, self.mToManyPropertyName.location))
  end
}

//------------------------------------------------------------------------------------------------

override func @autoLayoutTableViewControllerDeclarationAST.nodeKey() -> @lstring {
  result = @lstring (self.mClassName.string + " " + self.mControllerName, self.mControllerName.location)
}

//------------------------------------------------------------------------------------------------
//   SYNTAX
//------------------------------------------------------------------------------------------------

syntax extension easyBindings_syntax {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  rule <controller_declaration>(
            let @lstring inCurrentEntity,
            let @lstring inRootEntity,
            ?!@arrayControllerBindingListAST unused ioArrayControllerBindingListAST,
            ?!@astDeclarationStruct ioDeclarationAST)
  {
    $tableViewController$
    $controllerName$ (?let @lstring controllerName)
    var @autoLayoutTableViewControllerAttributListAST arrayControllerAttributListAST = []
    $($
    repeat
      $identifier$ (?let @lstring attributeName)
      $:$
      <explicit_value> (?let @abstractDefaultValue attributeValue)
      !?arrayControllerAttributListAST.append (attributeName, attributeValue)
    while
      $,$
    end
    $)$
  //-- Model
    let @bool isRoot
    select
      $root$
      isRoot = true
    or
      $self$
      isRoot = false
    end
    $.$
    $identifier$ (?let @lstring relationshipName)
    var @autoLayoutTableViewControllerBoundColumnListAST arrayControllerBoundColumnListAST = []
    select
      $;$
    or
      ${$
      repeat
      while
        let @bool editableColumn
        select
          $column$
          editableColumn = false
        or
          $editableColumn$
          editableColumn = true
        end
        $identifier$ (?let propertyName)
        var unusedSet = @stringset ()
        <view_actual_parameter_list> (!?unusedSet, ?let columnParameterListAST) //ยง
        let @lstring sortPropertyName
        select
          sortPropertyName = "".nowhere
        or
          $sortkey$
          $identifier$ (?sortPropertyName)
        end
        !?arrayControllerBoundColumnListAST.append (
          !editableColumn,
          !propertyName,
          !columnParameterListAST,
          !sortPropertyName
        )
      end
      $}$
    end
    !?ioDeclarationAST.mUnifiedDeclarationList.append (@autoLayoutTableViewControllerDeclarationAST (
      inCurrentEntity,
      controllerName,
      isRoot,
      inRootEntity,
      relationshipName,
      arrayControllerBoundColumnListAST,
      arrayControllerAttributListAST
    )
    )
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//------------------------------------------------------------------------------------------------
//   CLASS AND PROPERTY SEMANTIC ANALYSIS                       
//------------------------------------------------------------------------------------------------

override proc @autoLayoutTableViewControllerDeclarationAST.firstAnalysisPhase (
       ?!@semanticContext ioSemanticContext,
       ?!@generationStruct unused ioGeneration)
{
  with self.mClassName in !?ioSemanticContext.mClassMap 
    %errorMessage searchKey
  do
    var @actionMap controllerActions = ()
    !?controllerActions.insertKey ("add".nowhere)
    !?controllerActions.insertKey ("remove".nowhere)
    if self.mIsRoot then
      ioSemanticContext.mClassMap.searchKey (self.mRootEntityName, ?*, ?let rootProperties, ?2*)
      rootProperties.searchKey (self.mToManyPropertyName, ?let classKind, ?2*)
      switch classKind
      case property (2*) :
        error self.mRootEntityName : "a toMany relationship is required here"
      case toMany (typeName, *, graphic, *) :
        let kind = @propertyKind.arrayController (
          !typeName: typeName,
          !graphic: graphic
        )
        !?mPropertyMap.insertKey (self.mControllerName, kind, controllerActions, false)
    //-- Code Generation
      !?mPropertyGenerationList.append (@autoLayoutTableViewControllerPropertyGeneration (
        self.mControllerName.string,
        "rootObject." + self.mToManyPropertyName,
        self.mClassName
      )
      )
      case toOne (5*) :
        error self.mRootEntityName : "a toMany relationship is required here"
      case arrayController (2*) :
        error self.mRootEntityName : "a toMany relationship is required here"
      case selectionController (*) :
        error self.mRootEntityName : "a toMany relationship is required here"
      end
    else
      mPropertyMap.searchKey (self.mToManyPropertyName, ?let classKind, ?2*)
      switch classKind
      case property (2*) :
        error self.mRootEntityName : "a toMany relationship is required here"
      case toMany (typeName, *, graphic, *) :
        let kind = @propertyKind.arrayController (
          !typeName: typeName,
          !graphic: graphic
        )
        !?mPropertyMap.insertKey (self.mControllerName, kind, controllerActions, false)
    //-- Code Generation
      !?mPropertyGenerationList.append (@autoLayoutTableViewControllerPropertyGeneration (
        self.mControllerName.string,
        self.mToManyPropertyName,
        self.mClassName
      )
      )
      case toOne (5*) :
        error self.mRootEntityName : "a toMany relationship is required here"
      case arrayController (2*) :
        error self.mRootEntityName : "a toMany relationship is required here"
      case selectionController (*) :
        error self.mRootEntityName : "a toMany relationship is required here"
      end
    end
  end
}

//------------------------------------------------------------------------------------------------
//   SECOND ANALYSIS PHASE
//------------------------------------------------------------------------------------------------

override proc @autoLayoutTableViewControllerDeclarationAST.thirdAnalysisPhase(
       ?!@semanticContext ioSemanticContext,
       ?!@generationStruct ioGeneration)
{
  ioSemanticContext.mClassMap.searchKey (
    @(preferencesName (), .nowhere),
    ?*,
    ?let preferencesPropertyMap,
    ?2*
  )
//----------------------------------------------------------- Check array controller attributes
  let attributes = @stringset ["allowsEmptySelection", "allowsMultipleSelection"]
  let allowedTypes = @typeKindList [@(.boolType)]
  var @stringset definedAttributes = []
  var @2stringlist attributeListForGeneration = []
  for (name, value) in self.mTableViewControllerAttributListAST do
    if not attributes.hasKey (name.string) then
      error name : "unknown attribute"
    elsif definedAttributes.hasKey (name.string) then
      error name : "attribute multiply defined"
    else
      !?definedAttributes.insert (name.string)
    end
    value.analyzeDefaultValueType (allowedTypes, preferencesPropertyMap, ?let valueAsString)
    !?attributeListForGeneration.append (name.string, valueAsString)
  end
  for s in attributes do
    if not definedAttributes.hasKey (s) then
      error self.mControllerName : "attribute '" + s + "' not defined"
    end
  end
//-----
  let @propertyMap boundModelPropertyMap
  if self.mIsRoot then
    ioSemanticContext.mClassMap.searchKey
       (self.mRootEntityName,
       ?*,
       ?boundModelPropertyMap,
       ?2*
     )
  else
    ioSemanticContext.mClassMap.searchKey
       (self.mClassName,
       ?*,
       ?boundModelPropertyMap,
       ?2*
     )  
  end
  boundModelPropertyMap.searchKey
     (self.mToManyPropertyName,
     ?let @propertyKind boundModelClassKind,
     ?2*
  )
//----------------------------------------------------------- Check colum bound models
  let @propertyMap propertyMap
  let @autoLayoutTableViewControllerModelKind arrayControllerModelKind
  let @bool graphic
  let @string elementTypeName
  switch boundModelClassKind
  case property (2*) :
    error self.mToManyPropertyName
      : "a toMany property is required here"
      spoil (graphic, arrayControllerModelKind, propertyMap, elementTypeName)
  case toMany (typeName, accessibility, isGraphic, *) :
    elementTypeName = typeName
    graphic = isGraphic
    arrayControllerModelKind = if accessibility.isTransient
      then .transientArray
      else .entityArray
    end
    ioSemanticContext.mClassMap.searchKey (typeName, ?*, ?propertyMap, ?*, ?*)
  case toOne (5*) :
    error self.mToManyPropertyName
      : "a toMany property is required here"
      spoil (graphic, arrayControllerModelKind, propertyMap, elementTypeName)
  case arrayController (2*) :
    error self.mToManyPropertyName
      : "a toMany property is required here"
      spoil (graphic, arrayControllerModelKind, propertyMap, elementTypeName)
  case selectionController (*) :
    error self.mToManyPropertyName
      : "a toMany property is required here"
      spoil (graphic, arrayControllerModelKind, propertyMap, elementTypeName)
  end
  var @autoLayoutTableViewControllerBoundColumnListForGeneration arrayControllerBoundColumnListForGeneration = []
  var @autoLayoutTableViewControllerSortedColumnListForGeneration arrayControllerSortedColumnListForGeneration = []
  for (editable, propertyName, columnParameterList, sortPropertyName) in self.mTableViewControllerBoundColumnListAST do
  //------- Arguments
    var @autoLayoutClassParameterList formalArgumentList = []
    !?formalArgumentList.append ("title".nowhere , .typeString)
    !?formalArgumentList.append ("minWidth".nowhere , .typeInt)
    !?formalArgumentList.append ("maxWidth".nowhere , .typeInt)
    !?formalArgumentList.append ("headerAlignment".nowhere , .typeEnum (!name: "TextAlignment".nowhere ))
    !?formalArgumentList.append ("contentAlignment".nowhere , .typeEnum (!name: "TextAlignment".nowhere ))
    var @2stringlist actualParameterList = []
    if formalArgumentList.count != columnParameterList.count then
      error propertyName : columnParameterList.count .string + " parameter(s), " + formalArgumentList.count + " required"
    else
      for (formalName, formalType) in formalArgumentList, (actualName, actualType, actualParameter) in columnParameterList do
        if formalName.string != actualName.string then
          error actualName : "required argument name: " + formalName
        end
        if let formalTypeEnum = formalType.getTypeEnum, let actualTypeEnum = actualType.getTypeEnum then
          ioSemanticContext.mClassMap.searchKey (formalTypeEnum.name, ?let typeKind, ?3*)
          if let atomicTypeKind = typeKind.getAtomic, let atomicEnumType = atomicTypeKind.kind.getEnumType then
            atomicEnumType.constantMap.searchKey (actualTypeEnum.name, ?*)
          else
            error formalTypeEnum.name : "this type name is not an enum"
          end
        elsif actualType != formalType then
          error actualName : "the formal parameter requires " + formalType + ", actual parameter is " + actualType
        end
        if let actualString = actualParameter.getString then
          !?actualParameterList.append (formalName.string, actualString.value)
        else
          error actualName :"parameter value is not string convertible"
        end
      end
    end
  //-- Sorted ?
    if sortPropertyName.string != "" then
      propertyMap.searchKey
        (sortPropertyName,
        ?let sortPropertyKind,
        ?2*
      )
      if not sortPropertyKind.isComparable then
        error sortPropertyName : "this property is not comparable"
      end 
      !?arrayControllerSortedColumnListForGeneration.append (  
        !propertyName.string,
        !sortPropertyKind,
        !sortPropertyName.string
      )
    end
  //------- Column generation
    propertyMap.searchKey
      (propertyName,
      ?let propertyKind,
      ?2*
    )
    !?arrayControllerBoundColumnListForGeneration.append (
      !editable,
      !sortPropertyName.string,
      !propertyName.string,
      !propertyKind.swiftTypeName , // columnOutletTypeName.string
      !"", // columnBindings.mRunActionName.string
      !actualParameterList
    )
  //-- Outlet class is needed ?
//    ioSemanticContext.mOutletClassMap.searchKey !columnOutletTypeName ?6* ?let outletClassIsUserDefined]
//    if not outletClassIsUserDefined then
//      ioGeneration.mNeededOutletClasses.append (columnOutletTypeName.string
//    end
  end
  let modelString = if self.mIsRoot
    then "self.rootObject." + self.mToManyPropertyName + "_property"
    else "self." + self.mToManyPropertyName + "_property"
  end
//--
  !?ioGeneration.mFileGenerationList.append (@autoLayoutTableViewControllerGeneration (
    self.mClassName,
    self.mControllerName,
    modelString,
    arrayControllerBoundColumnListForGeneration,
    arrayControllerSortedColumnListForGeneration,
    "ReadWriteArrayOf_" + elementTypeName,
    arrayControllerModelKind,
    elementTypeName,
    graphic,
    attributeListForGeneration
  )
  )
  !?ioGeneration.mGenerateClass_StoredArrayOf_.insert (elementTypeName)
  !?ioGeneration.mGenerateClass_TransientArrayOf_.insert (elementTypeName)
}


//------------------------------------------------------------------------------------------------
//   CODE GENERATION                       
//------------------------------------------------------------------------------------------------

class @autoLayoutTableViewControllerPropertyGeneration : @propertyGeneration {
  public let @string mModelString
  public let @string mOwnerName
}

//------------------------------------------------------------------------------------------------

override func @autoLayoutTableViewControllerPropertyGeneration.propertyDeclarationCode(
   let @bool inPreferences,
   let @bool unused inGenerationDirectAccess,
   let @stringset unused inOverriddenTransients) -> @string
{
  if inPreferences then
    result  = "//" + @string.stringWithSequenceOfCharacters  ('ยท', 96) + "\n"
    result += "//   Table View controller: " + self.mPropertyName + "\n"
    result += "//" + @string.stringWithSequenceOfCharacters  ('ยท', 96) + "\n\n"
    result += "@MainActor let preferences_" + self.mPropertyName + " = Controller_" + self.mOwnerName + "_" + self.mPropertyName + " ()\n\n"
  else
    result  = "  //" + @string.stringWithSequenceOfCharacters  ('ยท', 96) + "\n"
    result += "  //   Array controller: " + self.mPropertyName + "\n"
    result += "  //" + @string.stringWithSequenceOfCharacters  ('ยท', 96) + "\n\n"
    result += "  final var " + self.mPropertyName + " = Controller_" + self.mOwnerName + "_" + self.mPropertyName + " ()\n\n"
  end
}

//------------------------------------------------------------------------------------------------

override func @autoLayoutTableViewControllerPropertyGeneration.configurationCode (let @bool inPreferences) -> @string {
  let prefix = if inPreferences then "preferences_" else "self." end
  result  = "  //--- Array controller property: " + self.mPropertyName + "\n"
  result += "    " + prefix + self.mPropertyName + ".bind_model (" + prefix + self.mModelString + "_property, self.undoManager)\n"
}

//------------------------------------------------------------------------------------------------

override func @autoLayoutTableViewControllerPropertyGeneration.initCode() -> @string {
  result  = ""
}

//------------------------------------------------------------------------------------------------

override func @autoLayoutTableViewControllerPropertyGeneration.populateExplorerWindowCode() -> @string {
  result  = "    //--- Array controller property: " + self.mPropertyName + "\n"
  result += "      self." + self.mPropertyName + ".addExplorer (name: \"" + self.mPropertyName + "\", y:&y, view:view)\n"
}

//------------------------------------------------------------------------------------------------
//   GENERATION TYPES
//------------------------------------------------------------------------------------------------

enum @autoLayoutTableViewControllerModelKind {
  case entityArray

  case transientArray
}

//------------------------------------------------------------------------------------------------

class @autoLayoutTableViewControllerGeneration : @abstractFileGeneration {
  public let @string mOwnerName // document name, prefs name, ...
  public let @lstring mControllerName
  public let @string mModelString
  public let @autoLayoutTableViewControllerBoundColumnListForGeneration mTableViewControllerBoundColumnListForGeneration
  public let @autoLayoutTableViewControllerSortedColumnListForGeneration mTableViewControllerSortedColumnListForGeneration
  public let @string mModelTypeName
  public let @autoLayoutTableViewControllerModelKind mTableViewControllerModelKind
  public let @string mElementTypeName
  public let @bool mElementTypeIsGraphic
  public let @2stringlist mAttributeListForGeneration
}

//------------------------------------------------------------------------------------------------

list @autoLayoutTableViewControllerBoundColumnListForGeneration {
  public let @bool mEditable
  public let @string mSortPropertyName
  public let @string mDisplayedPropertyName
  public let @string mColumnObjectTypeName
  public let @string mRunAction // Empty string if no action
  public let @2stringlist mActualParameterList
}

//------------------------------------------------------------------------------------------------

list @autoLayoutTableViewControllerSortedColumnListForGeneration {
  public let @string mColumnName
  public let @propertyKind mSortPropertyKind
  public let @string mObservablePropertyForSorting
}

//------------------------------------------------------------------------------------------------

private filewrapper autoLayoutTableViewControllerGenerationTemplate in "generation-templates/controllers" {
}{
}{
  template autoLayoutTableViewControllerImplementation : "auto-layout-table-view-controller.swift.galgasTemplate" (
    @string OWNER_NAME,
    @string TABLE_VIEW_CONTROLLER_NAME,
    @string MODEL_STRING,
    @autoLayoutTableViewControllerModelKind MODEL_KIND,
    @string MODEL_TYPE_NAME,
    @autoLayoutTableViewControllerBoundColumnListForGeneration BOUND_COLUMNS,
    @autoLayoutTableViewControllerSortedColumnListForGeneration SORTED_COLUMNS,
    @string ELEMENT_TYPE_NAME,
    @stringset OBSERVED_PROPERTIES_FOR_SORTING,
    @2stringlist ATTRIBUTE_VALUES
  )
}

//------------------------------------------------------------------------------------------------
//   GENERATION
//------------------------------------------------------------------------------------------------

override proc @autoLayoutTableViewControllerGeneration.generateCode(
    let @string inOutputDirectory,
    let @generationStruct unused inGenerationStruct,
    ?!@stringset unused ioGeneratedFileSet) {
//-- Build observed property set (for sorting and filtering)
  var @stringset observedProperties = []
  for (2*, mObservablePropertyForSorting) in self.mTableViewControllerSortedColumnListForGeneration do
    !?observedProperties.insert (mObservablePropertyForSorting)
  end
  let s = filewrapper [autoLayoutTableViewControllerGenerationTemplate.autoLayoutTableViewControllerImplementation:
    self.mOwnerName,
    self.mControllerName,
    self.mModelString,
    self.mTableViewControllerModelKind,
    self.mModelTypeName,
    self.mTableViewControllerBoundColumnListForGeneration,
    self.mTableViewControllerSortedColumnListForGeneration,
    self.mElementTypeName,
    observedProperties,
    self.mAttributeListForGeneration
  ]
  @string.generateFile (
    inOutputDirectory,
    "controller-table-view-" + self.mOwnerName + "-" +  self.mControllerName + ".swift",
    s
  )
}

//------------------------------------------------------------------------------------------------
