lexique easyBindings_lexique {

//------------------------------------------------------------------------------------------------
//   Identifiers and keywords
//------------------------------------------------------------------------------------------------

@string tokenString

style keywordsStyle -> "Keywords"
style idfStyle -> "identifiers"
style IdfStyle -> "Identifiers"

$identifier$ ! tokenString  style idfStyle %errorMessage "an identifier (beginning with a lower-case letter)"
$Identifier$ ! tokenString  style IdfStyle %errorMessage "an identifier (beginning with a upper-case letter)"

list lowerCaseKeyWordList style keywordsStyle %errorMessage "the '%K' keyword"{
  "abstract",
  "action",
  "all",
  "arrayController",
  "autolayout",
  "autoLayoutDocument",
  "binding",
  "calledBy",
  "class",
  "classForSwift",
  "column",
  "computed",
  "configurator",
  "default",
  "dependsFrom",
  "divider",
  "enum",
  "editableColumn",
  "entity",
  "extern",
  "externDelegate",
  "externFunc",
  "func",
  "graphic",
  "graphviz",
  "gutter",
  "handlingOpposite",
  "hStack",
  "include",
  "inverse",
  "linker",
  "mainxib",
  "menuItem",
  "no",
  "newView",
  "none",
  "one",
  "outlet",
  "outletArray",
  "override",
  "prefs",
  "property",
  "proxy",
  "root",
  "selectionController",
  "self",
  "separator",
  "signature",
  "sortkey",
  "space",
  "stackView",
  "standalone",
  "struct",
  "super",
  "tableViewController",
  "toMany",
  "toOne",
  "transient",
  "typeView",
  "version",
  "vStack",
  "versionShouldChange",
  "view",
  "weak",
  "withVScroller",
  "xcodeproject",
  "yes"
}

rule 'a'->'z' {
  repeat
    enterCharacterIntoString  (!?tokenString !* )
  while 'a'->'z' | 'A'->'Z' | '0'->'9' | '_' :
  end
  send %searchString tokenString in lowerCaseKeyWordList default $identifier$
}

rule 'A'->'Z' {
  repeat
    enterCharacterIntoString  (!?tokenString !* )
  while 'a'->'z' | 'A'->'Z' | '0'->'9' :
  end
  send $Identifier$
}

  //----------------------------------------------------------
  //! Attributes
  //----------------------------------------------------------
  
  style attributeStyle -> "Attributes"
  
  $@attribute$ ! tokenString  style attributeStyle %errorMessage "an attribute @..."
  
  %errorMessage attributeError : "in an attribute name, a letter, a digit or a dot should follow the '@' character"
  
  rule '@' {
    select
    case isUnicodeLetter | '0'->'9' :
      repeat
        enterCharacterIntoString (!?tokenString !*)
      while isUnicodeLetter | '0'->'9' | '.' :
      end
    default
      error attributeError
    end
    send $@attribute$ 
  }
  
//------------------------------------------------------------------------------------------------
//   Binding name                                                             *
//------------------------------------------------------------------------------------------------

style bindingNameStyle -> "Binding Names"
style reservedBindingNameStyle -> "Reserved binding names"

list reservedBindingNameKeyWordList style reservedBindingNameStyle %errorMessage "the '$%K' keyword"{
  "enabled",
  "graphicController",
  "hidden",
  "tableValue",
  "run"
}

$bindingName$ ! tokenString  style bindingNameStyle %errorMessage "a binding name (identifier prefixed by '$')"

rule '$' {
  repeat
  while
   'a'->'z' | 'A'->'Z' | '_' | '0'->'9' :
    enterCharacterIntoString (!?tokenString !*)
  end
  send %searchString tokenString in reservedBindingNameKeyWordList default $bindingName$
}

//------------------------------------------------------------------------------------------------
//   Controller names                                                         
//------------------------------------------------------------------------------------------------

style controllerNameStyle -> "Controller Names"

$controllerName$ ! tokenString  style controllerNameStyle %errorMessage "a controller name (identifier prefixed by '#')"

rule '#' {
  repeat
  while
   'a'->'z' | 'A'->'Z' | '0'->'9' :
    enterCharacterIntoString (!?tokenString !*)
  end
  send $controllerName$
}

//------------------------------------------------------------------------------------------------
//   View names
//------------------------------------------------------------------------------------------------

style viewNameStyle -> "View Names"

$viewName$ ! tokenString  style viewNameStyle %errorMessage "a view name (identifier prefixed by '\\')"

rule '\\' {
  repeat
  while
   'a'->'z' | 'A'->'Z' | '0'->'9' :
    enterCharacterIntoString (!?tokenString !*)
  end
  send $viewName$
}

//------------------------------------------------------------------------------------------------
//   Literal decimal integers
//------------------------------------------------------------------------------------------------

style integerStyle -> "Integer Constants"
style floatStyle -> "Floating Point Constants"
@uint uint32value
$literal_integer$ !uint32value  style integerStyle %errorMessage "a 32-bit unsigned decimal number"
@double floatValue
$literal_double$ !floatValue !tokenString  style floatStyle %errorMessage "a float number"
%errorMessage floatNumberConversionError : "invalid float number"

%errorMessage decimalNumberTooLarge : "decimal number too large"
%errorMessage internalError : "internal error"

rule '0'->'9' {
  enterCharacterIntoString  (!?tokenString !* )
  repeat
  while '0'->'9' :
    enterCharacterIntoString  (!?tokenString !* )
  while '_' :
  end
  select
  case '.' :
    enterCharacterIntoString  (!?tokenString !'.' )
    repeat
    while '0'->'9' :
      enterCharacterIntoString  (!?tokenString !* )
    while '_' :
    end
    convertStringToDouble  (!tokenString !?floatValue error floatNumberConversionError )
    send $literal_double$
  default
    convertDecimalStringIntoUInt  (!tokenString !?uint32value error decimalNumberTooLarge, internalError )
    send $literal_integer$
  end
}

//------------------------------------------------------------------------------------------------
//   Literal character strings
//------------------------------------------------------------------------------------------------

style stringStyle -> "String Constants"
$literal_string$ ! tokenString  style stringStyle %nonAtomicSelection %errorMessage "a character string constant \"...\""


%errorMessage incorrectStringEnd : "string does not end with '\"'"

rule '"' {
  repeat
   while "\\n" :
     enterCharacterIntoString (!?tokenString !'\n')
   while "\\\"" :
     enterCharacterIntoString (!?tokenString !'"')
   while ' ' | '!' | '#'-> '\uFFFD' :
     enterCharacterIntoString (!?tokenString !*)
   while '\U00010000' -> '\U0010FFFF' :
     enterCharacterIntoString (!?tokenString !*)
  end
  select
  case '"' :
    send $literal_string$
  default
    error incorrectStringEnd
  end
}

//------------------------------------------------------------------------------------------------
//   Delimiters
//------------------------------------------------------------------------------------------------

style delimitersStyle -> "Delimiters"
list delimitorsList style delimitersStyle %errorMessage "the '%K' delimitor"{
  ":",    ",",    ";",   "!",  "[",  "]",  "{",  "}",
  "(",  ")", "." , "|", "&", "<", ">", "<=", ">=", "!=", "==",
  "^", "-", "="
}

rule list delimitorsList

//------------------------------------------------------------------------------------------------
//   Comments
//------------------------------------------------------------------------------------------------

style commentStyle -> "Comments"
$comment$ style commentStyle %nonAtomicSelection %errorMessage "a comment"
rule "//" {
  repeat
  while '\u0001' -> '\u0009' | '\u000B' | '\u000C' | '\u000E' -> '\uFFFD' :
  end
  drop $comment$
}

//------------------------------------------------------------------------------------------------
//   Separators
//------------------------------------------------------------------------------------------------

rule '\u0001' -> ' ' {
}

//------------------------------------------------------------------------------------------------

}

