//------------------------------------------------------------------------------------------------
//   SEMANTIC TYPES
//------------------------------------------------------------------------------------------------

list @transientExternTypeList {
  public var @string mTypeName
  public var @bool mIsClass
}

//------------------------------------------------------------------------------------------------

abstract class @abstractFileGeneration {
}

//------------------------------------------------------------------------------------------------

abstract proc @abstractFileGeneration.generateCodePhase1 (@string inOutputDirectory,
                                                          @generationStruct inGenerationStruct,
                                                          ?!@stringset ioUsedProtocolSet,
                                                          ?!@stringset ioGeneratedFileSet)

//------------------------------------------------------------------------------------------------

abstract proc @abstractFileGeneration.generateCodePhase2 (@string inOutputDirectory,
                                                          @generationStruct inGenerationStruct,
                                                          @stringset inUsedProtocolSet,
                                                          ?!@stringset ioGeneratedFileSet)

//------------------------------------------------------------------------------------------------

list @fileGenerationList {
  public var @abstractFileGeneration mFileGeneration
}

//------------------------------------------------------------------------------------------------

struct @generationStruct {
  public var @validationStubRoutineListForGeneration mValidationStubRoutineListForGeneration = []
  public var @fileGenerationList mFileGenerationList = []
  public var @entityListForGeneratingEBManagedObjectContext mEntityListForGeneration = []
  public var @bool mGenerateEBManagedXibDocumentSwift = false
  public var @bool mGenerateEBManagedAutoLayoutDocumentSwift = false
  public var @stringset mNeededOutletClasses = []
  public var @mainXibDescriptorList mMainXibDescriptorList = []
 
  public var @stringset mToOneClassImplementations = []
  public var @stringset mToManyClassImplementations = []

  public var @selectionControllerForGeneration mSelectionControllerListForGeneration = []
  public var @stringlist mPropertyClassList = []
  public var @transientExternTypeList mTransientPropertyTypeList = []

  public var @stringset mGenerateClass_PreferencesArrayOf_ = []
  public var @stringset mGenerateClass_ProxyArrayOf_ = []
  public var @stringset mGenerateClass_TransientArrayOfSuperOf_ = []
  public var @stringset mGenerateClass_TransientArrayOf_ = []
  public var @stringset mGenerateClass_StoredArrayOf_ = []
}

//------------------------------------------------------------------------------------------------
//   CODE GENERATION
//------------------------------------------------------------------------------------------------

proc generateCode (@string inXcodeProjectString,
                   @generationStruct inGeneration,
                   @string inSourceFile) {
  let outputDirectory = inSourceFile.stringByDeletingLastPathComponent
  let projectName = inSourceFile.lastPathComponent.deletingPathExtension
  let fileOutputDirectory = outputDirectory + "/" + projectName
  var @stringset generatedFileSet = ()
  var @stringset usedProtocolSet = ()
  for (fileGeneration) in inGeneration.mFileGenerationList do
    fileGeneration.generateCodePhase1 (
      fileOutputDirectory,
      inGeneration,
      !?usedProtocolSet,
      !?generatedFileSet
    )
  end
  for (fileGeneration) in inGeneration.mFileGenerationList do
    fileGeneration.generateCodePhase2 (
      fileOutputDirectory,
      inGeneration,
      usedProtocolSet,
      !?generatedFileSet
    )
  end
  generateEBManagedObjectContext (
    inGeneration.mEntityListForGeneration,
    fileOutputDirectory,
    !?generatedFileSet
  )
  generateSelectionControllers (
    inGeneration.mSelectionControllerListForGeneration,
    fileOutputDirectory,
    !?generatedFileSet
  )
  generateValidationRoutineStubs (
    fileOutputDirectory,
    inGeneration.mValidationStubRoutineListForGeneration,
    !?generatedFileSet
  )
  generateStandardProperties (
    fileOutputDirectory,
    inGeneration.mPropertyClassList,
    inGeneration.mTransientPropertyTypeList,
    !?generatedFileSet
  )
  generateXcodeProject (
    outputDirectory,
    inXcodeProjectString,
    generatedFileSet,
    projectName
  )
  generateTestFile (
    inXcodeProjectString,
    projectName,
    inGeneration.mMainXibDescriptorList,
    outputDirectory
  )
}

//------------------------------------------------------------------------------------------------

filewrapper standard_properties in "generation-templates/standard-properties" {
}{
}{

  template scalarProperty : "scalar-standard-property.swift.galgasTemplate" (
    @string TYPE,
    @bool TRANSIENT,
    @string COMPARISON_METHOD
  )

  template classProperty : "class-standard-property.swift.galgasTemplate" (
    @string CLASS_NAME,
    @bool TRANSIENT
  )
}

//------------------------------------------------------------------------------------------------

private proc generateStandardProperties (let @string inOutputDirectory,
                                         let @stringlist inPropertyClassList,
                                         let @transientExternTypeList inTransientPropertyExternTypeList,
                                         ?!@stringset ioGeneratedFileSet) {
//-- Add scalar property types
  generateScalarProperty (inOutputDirectory, "UInt32", !transient: false, "", !?ioGeneratedFileSet)
  generateScalarProperty (inOutputDirectory, "Int", !transient: false, "", !?ioGeneratedFileSet)
  generateScalarProperty (inOutputDirectory, "Bool", !transient: false, "", !?ioGeneratedFileSet)
  generateScalarProperty (inOutputDirectory, "Double", !transient: false, "", !?ioGeneratedFileSet)
  generateScalarProperty (inOutputDirectory, "String", !transient: false, "localizedStandardCompare", !?ioGeneratedFileSet)
  generateScalarProperty (inOutputDirectory, "Data", !transient: false, "", !?ioGeneratedFileSet)
  generateScalarProperty (inOutputDirectory, "Date", !transient: false, "", !?ioGeneratedFileSet)
  generateScalarProperty (inOutputDirectory, "BezierPathArray", !transient: false, "", !?ioGeneratedFileSet)
//-- Add class property types
  for (propertyClass) in inPropertyClassList do
    generateClassProperty (inOutputDirectory, propertyClass, !transient: false, !?ioGeneratedFileSet)
  end
  for (propertyType, isClass) in inTransientPropertyExternTypeList do
    if isClass then
      generateClassProperty (inOutputDirectory, propertyType, !transient: true, !?ioGeneratedFileSet)
    else
      generateScalarProperty (inOutputDirectory, propertyType, !transient: true, "", !?ioGeneratedFileSet)
    end
  end
  generateClassProperty (inOutputDirectory, "NSBezierPath", !transient: false, !?ioGeneratedFileSet)
  generateClassProperty (inOutputDirectory, "NSFont", !transient: false, !?ioGeneratedFileSet)
  generateClassProperty (inOutputDirectory, "NSColor", !transient: false, !?ioGeneratedFileSet)
}

//------------------------------------------------------------------------------------------------

private proc generateClassProperty (let @string inOutputDirectory,
                                     let @string inClassPropertyTypeName,
                                     ?transient: let @bool inTransient,
                                     ?!@stringset ioGeneratedFileSet) {
  let contents = filewrapper [standard_properties.classProperty: inClassPropertyTypeName, inTransient]
//-- Generate file
  let fileName = "property-" + inClassPropertyTypeName + ".swift"
  !?ioGeneratedFileSet.insert (fileName)
  @string.generateFile (
    inOutputDirectory,
    fileName,
    contents
  )
}

//------------------------------------------------------------------------------------------------

private proc generateScalarProperty (let @string inOutputDirectory,
                                    let @string inScalarPropertyTypeName,
                                    ?transient: let @bool inTransient,
                                    let @string inComparisonMethod,
                                    ?!@stringset ioGeneratedFileSet) {
  let contents = filewrapper [standard_properties.scalarProperty: inScalarPropertyTypeName, inTransient, inComparisonMethod]
//-- Generate file
  let fileName = "property-" + inScalarPropertyTypeName + ".swift"
  !?ioGeneratedFileSet.insert (fileName)
  @string.generateFile (
    inOutputDirectory,
    fileName,
    contents
  )
}

//------------------------------------------------------------------------------------------------
