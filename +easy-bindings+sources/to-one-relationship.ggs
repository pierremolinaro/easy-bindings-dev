//------------------------------------------------------------------------------------------------
//   AST   
//------------------------------------------------------------------------------------------------

enum @toOneOppositeRelationship %equatable {
  case none
  case oppositeIsToOne (@lstring oppositeRelationshipName)
  case oppositeIsToMany (@lstring oppositeRelationshipName)
}

//------------------------------------------------------------------------------------------------

class @toOneRelationshipAST : @abstractDeclarationAST {
  public var @lstring mDestinationEntityName
  public var @lstring mToOneRelationshipName
  public var @toOneOppositeRelationship mOpposite
  public var @bool mUsedForSignature
  public var @bool mWeak
}

//------------------------------------------------------------------------------------------------

override proc @toOneRelationshipAST.enterInPrecedenceGraph (?!@declarationPrecedenceGraph ioGraph) {
  let node = @lstring (self.mClassName.string + " " + self.mToOneRelationshipName, self.mToOneRelationshipName.location)
  !?ioGraph.addNode (node, self)
  !?ioGraph.addEdge (node, self.mClassName)
  !?ioGraph.addEdge (node, self.mDestinationEntityName)
}

//------------------------------------------------------------------------------------------------

override func @toOneRelationshipAST.nodeKey() -> @lstring {
  result = @lstring (self.mClassName.string + " " + self.mToOneRelationshipName, self.mToOneRelationshipName.location)
}

//------------------------------------------------------------------------------------------------
//   SYNTAX
//------------------------------------------------------------------------------------------------

syntax extension easyBindings_syntax {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <toOne_relationship> (let @lstring inCurrentEntity, ?!@astDeclarationStruct ioDeclarationAST) {
    $toOne$
    var usedForSignature = false
    var isWeak = false
    repeat
    while
      $@attribute$ (?let attributeName)
      if attributeName.string == "signature" then
        if usedForSignature then
          error attributeName : "duplicated attribute" fixit ( %remove )
        end
        usedForSignature = true
      elsif attributeName.string == "weak" then
        if isWeak then
          error attributeName : "duplicated attribute" fixit ( %remove )
        end
        isWeak = true
      else
        error attributeName : "unknow attribute" fixit ( %replaceBy "@signature", %replaceBy "@weak" )
      end
    end
    $Identifier$ (?let @lstring destinationEntityName)
    $identifier$ (?let @lstring relationshipName)
    let @toOneOppositeRelationship opposite
    select
      opposite = .none
    or
      $inverse$
      select
        $toOne$
        $identifier$ (?let inverseRelationshipName)
        opposite = .oppositeIsToOne (!oppositeRelationshipName: inverseRelationshipName)
      or
        $toMany$
        $identifier$ (?let inverseRelationshipName)
        opposite = .oppositeIsToMany (!oppositeRelationshipName: inverseRelationshipName)
      end
    end
    $;$
    !?ioDeclarationAST.mUnifiedDeclarationList.append (@toOneRelationshipAST (
      inCurrentEntity,
      destinationEntityName,
      relationshipName,
      opposite,
      usedForSignature,
      isWeak
    )
    )
  }
  
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//------------------------------------------------------------------------------------------------
//   SEMANTIC ANALYSIS                       
//------------------------------------------------------------------------------------------------

override proc @toOneRelationshipAST.firstAnalysisPhase (?!@semanticContext ioSemanticContext,
                                                        ?!@generationStruct ioGeneration) {
  with self.mClassName in !?ioSemanticContext.mClassMap 
    %errorMessage searchKey
  do
    !?ioGeneration.mToOneClassImplementations.insert (self.mDestinationEntityName)
    ioSemanticContext.mClassMap.searchKey (self.mDestinationEntityName, ?let classKind, ?3*)
    switch classKind
    case prefs :
      error self.mDestinationEntityName : "an entity is required here"
    case atomic (*) :
      error self.mDestinationEntityName : "an entity is required here"
    case document (*) :
      error self.mDestinationEntityName : "an entity is required here"
    case entity (*, graphic, *, handleOpposite) :
      let kind = @propertyKind.toOne (
        !typeName: self.mDestinationEntityName,
        !accessibility: .stored,
        !graphic: graphic,
        !opposite: self.mOpposite,
        !isWeak: self.mWeak
      )
      if self.mOpposite != .none, not handleOpposite then
        error self.mToOneRelationshipName : "the '" + self.mDestinationEntityName + "' entity does not handle opposite relationship"
      end
      !?mPropertyMap.insertKey (self.mToOneRelationshipName, kind, (), false)
    end
  end
}

//------------------------------------------------------------------------------------------------

override proc @toOneRelationshipAST.thirdAnalysisPhase (?!@semanticContext ioSemanticContext,
                                                        ?!@generationStruct unused ioGeneration) {
  with self.mClassName in !?ioSemanticContext.mClassMap 
    %errorMessage searchKey
  do
    ioSemanticContext.mClassMap.searchKey (self.mDestinationEntityName, ?let classKind, ?let destinationEntityPropertyMap, ?2*)
    switch classKind
    case prefs :
    case atomic (*) :
    case document (*) :
    case entity (*, graphic, 2*) :
      let kind = @propertyKind.toOne (
        !typeName: self.mDestinationEntityName,
        !accessibility: .stored,
        !graphic: graphic,
        !opposite: self.mOpposite,
        !isWeak: self.mWeak
      )
    //-- Code Generation
      !?mPropertyGenerationList.append (@toOnePropertyGeneration (
        self.mToOneRelationshipName.string,
        self.mClassName,
        kind,
        self.mOpposite,
        destinationEntityPropertyMap,
        self.mUsedForSignature,
        not self.mWeak
      )
      )
    end
  end
}

//------------------------------------------------------------------------------------------------
//   GENERATION                       
//------------------------------------------------------------------------------------------------

class @toOnePropertyGeneration : @propertyGeneration {
  public let @string mClassName
  public let @propertyKind mRelationshipType
  public let @toOneOppositeRelationship mOpposite
  public let @propertyMap mDestinationEntityObservablePropertyMap
  public let @bool mUsedForSignature
  public let @bool mStrongRef
}

//------------------------------------------------------------------------------------------------

list @toOnePropertyGenerationList {
  public let @toOnePropertyGeneration mProperty
}

//------------------------------------------------------------------------------------------------

override func @toOnePropertyGeneration.propertyDeclarationCode
                                                   (let @bool unused inPreferences,
                                                    let @bool unused inGenerationDirectAccess,
                                                    let @stringset unused inOverriddenTransients) -> @string {
  result  = "  //" + @string.stringWithSequenceOfCharacters  ('路', 96) + "\n"
  result += "  //   To one property: " + self.mPropertyName + "\n"
  result += "  //" + @string.stringWithSequenceOfCharacters  ('路', 96) + "\n\n"
  result += "  final let " + self.mPropertyName + "_property = StoredObject_" + self.mRelationshipType.swiftTypeName
  result += " (usedForSignature: " + self.mUsedForSignature.cString
  result += ", strongRef: " + self.mStrongRef.cString + ", key: \"" + self.mPropertyName + "\")\n\n"
  result += "  //" + @string.stringWithSequenceOfCharacters  ('路', 96) + "\n\n"
  result += "  final var " + self.mPropertyName + " : " + self.mRelationshipType.swiftTypeName + "? {\n"
  result += "    get {\n"
  result += "      return self." + self.mPropertyName + "_property.propval\n"
  result += "    }\n"
  result += "    set {\n"
  result += "      // self." + self.mPropertyName + "_property.setProp (newValue)\n"
  result += "      if self." + self.mPropertyName + "_property.propval !== newValue {\n"
  result += "        if self." + self.mPropertyName + "_property.propval != nil {\n"
  result += "          self." + self.mPropertyName + "_property.setProp (nil)\n"
  result += "        }\n"
  result += "        if newValue != nil {\n"
  result += "          self." + self.mPropertyName + "_property.setProp (newValue)\n"
  result += "        }\n"
  result += "      }\n"
  result += "    }\n"
  result += "  }\n\n"
  result += "  //" + @string.stringWithSequenceOfCharacters  ('路', 96) + "\n\n"
  result += "  final let " + self.mPropertyName + "_none = EBTransientProperty <Bool> ()\n\n"
}

//------------------------------------------------------------------------------------------------

override func @toOnePropertyGeneration.initCode() -> @string {
  result = ""
}

//------------------------------------------------------------------------------------------------

override func @toOnePropertyGeneration.configurationCode (let @bool unused inPreferences) -> @string {
  switch self.mOpposite
  case oppositeIsToMany (oppositeName) :
    result  = "  //--- To one property: " + self.mPropertyName + " (has opposite to many relationship: " + oppositeName + ")\n"
    result += "    self." + self.mPropertyName + "_property.undoManager = inUndoManager\n"
    result += "    self." + self.mPropertyName + "_property.setOppositeRelationShipFunctions (\n"
    result += "      setter: { [weak self] inObject in if let me = self { inObject." + oppositeName + "_property.add (me) } },\n"
    result += "      resetter: { [weak self] inObject in if let me = self { inObject." + oppositeName + "_property.remove (me) } }\n"
    result += "    )\n"
  case none :
    result  = "  //--- To one property: " + self.mPropertyName + "\n"
    result += "    self." + self.mPropertyName + "_property.undoManager = inUndoManager\n"
  case oppositeIsToOne (oppositeName) :
    result  = "  //--- To one property: " + self.mPropertyName + " (has opposite to one relationship: " + oppositeName + ")\n"
    result += "    self." + self.mPropertyName + "_property.undoManager = inUndoManager\n"
    result += "    self." + self.mPropertyName + "_property.setOppositeRelationShipFunctions (\n"
    result += "      setter: { [weak self] inObject in if let me = self { inObject." + oppositeName + "_property.setProp (me) } },\n"
    result += "      resetter: { inObject in inObject." + oppositeName + "_property.setProp (nil) }\n"
    result += "    )\n"
  end
}

//------------------------------------------------------------------------------------------------

override func @toOnePropertyGeneration.setupRelationshipFromDictionaryCode() -> @string {
  result  = "  //--- To one property: " + self.mPropertyName + "\n"
  result += "    do{\n"
  result += "      let possibleEntity = readEntityFromDictionary (\n"
  result += "        relationshipName: \"" + self.mPropertyName + "\",\n"
  result += "        dictionary: inDictionary,\n"
  result += "        managedObjectArray: inManagedObjectArray\n"
  result += "      )\n"
  result += "      if let entity = possibleEntity as? " + self.mRelationshipType.swiftTypeName + " {\n"
  result += "        self." + self.mPropertyName + "_property.setProp (entity)\n"
  result += "      }\n"
  result += "    }\n"
}

//------------------------------------------------------------------------------------------------

override func @toOnePropertyGeneration.objectAccessibilityCodeForSaveOperation() -> @string {
  result  = "  //--- To one property: " + self.mPropertyName + "\n"
  result += "    if let object = self." + self.mPropertyName + " {\n"
  result += "      ioObjectArray.append (object)\n"
  result += "    }\n"
}

//------------------------------------------------------------------------------------------------
