//--------------------------------------------------------------------------------------------------
//   AST   
//--------------------------------------------------------------------------------------------------

class @transientDeclarationAST : @abstractDeclarationAST {
  public var @lstring mRootEntityName
  public var @lstring mTransientTypeName
  public var @lstring mTransientName
  public var @observablePropertyList mDependencyList
  public var @bool mIsOverriding

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override proc enterInPrecedenceGraph (?!@declarationPrecedenceGraph ioGraph) {
    let node = @lstring (self.mClassName.string + " " + self.mTransientName, self.mTransientName.location)
    !?ioGraph.addNode (node, self)
    !?ioGraph.addEdge (!from: node, !to: self.mClassName)
    !?ioGraph.addEdge (!from: node, !to: self.mTransientTypeName)
    for dependency in self.mDependencyList do
      switch dependency.mObservableProperty
      case rootProperty (propertyName) :
        if self.mRootEntityName.string != "" then
          !?ioGraph.addEdge (!from: node, !to: @(self.mRootEntityName.string + " " + propertyName, propertyName.location))
        end
      case rootPropertyWithOption (propertyName, *) :
        if self.mRootEntityName.string != "" then
          !?ioGraph.addEdge (!from: node, !to: @(self.mRootEntityName.string + " " + propertyName, propertyName.location))
        end
      case rootPropertyRelationship (relationshipName, *) :
        if self.mRootEntityName.string != "" then
          !?ioGraph.addEdge (!from: node, !to: @(self.mRootEntityName.string + " " + relationshipName, relationshipName.location))
        end
      case rootPropertyNone (relationshipName) :
        if self.mRootEntityName.string != "" then
          !?ioGraph.addEdge (!from: node, !to: @(self.mRootEntityName.string + " " + relationshipName, relationshipName.location))
        end
      case selfWithoutProperty (*) :
      case selfProperty (propertyName) :
        !?ioGraph.addEdge (!from: node, !to: @(self.mClassName.string + " " + propertyName, propertyName.location))
      case selfPropertyWithOption (@lstring propertyName, *) :
        !?ioGraph.addEdge (!from: node, !to: @(self.mClassName.string + " " + propertyName, propertyName.location))
      case selfPropertyArray (@lstring propertyName, *) :
        !?ioGraph.addEdge (!from: node, !to: @(self.mClassName.string + " " + propertyName, propertyName.location))
      case selfPropertyObject (@lstring propertyName, *) :
        !?ioGraph.addEdge (!from: node, !to: @(self.mClassName.string + " " + propertyName, propertyName.location))
      case selfPropertyNone (@lstring propertyName) :
        !?ioGraph.addEdge (!from: node, !to: @(self.mClassName.string + " " + propertyName, propertyName.location))
      case prefsProperty (@lstring propertyName) :
        !?ioGraph.addEdge (!from: node, !to: @(preferencesName () + " " + propertyName, propertyName.location))
      case prefsPropertyWithOption (@lstring propertyName, *) :
        !?ioGraph.addEdge (!from: node, !to: @(preferencesName () + " " + propertyName, propertyName.location))
      case selfControllerProperty (@lstring controllerName, unused propertyName) :
        !?ioGraph.addEdge (!from: node, !to: @(self.mClassName.string  + " " + controllerName, controllerName.location))
      case selfControllerSecondaryProperty (@lstring controllerName, unused propertyName, unused secondaryPropertyName) :
        !?ioGraph.addEdge (!from: node, !to: @(self.mClassName.string  + " " + controllerName, controllerName.location))
      case selfControllerAllProperties (@lstring controllerName, unused propertyName, unused secondaryPropertyName) :
        !?ioGraph.addEdge (!from: node, !to: @(self.mClassName.string  + " " + controllerName, controllerName.location))
      case selfControllerOneProperty (@lstring controllerName, unused propertyName) :
        !?ioGraph.addEdge (!from: node, !to: @(self.mClassName.string  + " " + controllerName, controllerName.location))
      case signatureProperty (*) :
      case versionProperty (*) :
      case versionShouldChangeProperty (*) :
      case superProperty (@lstring superEntityName, @lstring propertyName) :
        !?ioGraph.addEdge (!from: node, !to: @(superEntityName.string + " " + propertyName, propertyName.location))
      case superPropertyWithDefaultValue (@lstring superEntityName, @lstring propertyName, *) :
        !?ioGraph.addEdge (!from: node, !to: @(superEntityName.string + " " + propertyName, propertyName.location))
      end
    end
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func nodeKey() -> @lstring {
    result = @lstring (self.mClassName.string + " " + self.mTransientName, self.mTransientName.location)
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------
//   SYNTAX
//--------------------------------------------------------------------------------------------------

syntax extension easyBindings_syntax {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  rule <transient_declaration>(
            let @lstring inCurrentEntity,
            let @lstring inRootEntity,
            ?!@astDeclarationStruct ioDeclarationAST)
  {
    $abstract$
    $transient$
    $Identifier$ (?let transientTypeName)
    $identifier$ (?let @lstring transientName)
    $;$
    !?ioDeclarationAST.mUnifiedDeclarationList.append (@transientDeclarationAST (
      inCurrentEntity,
      inRootEntity,
      transientTypeName,
      transientName,
      [],
      false
    )
    )
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  rule <transient_declaration> (@lstring inCurrentEntity,
                                @lstring inRootEntity,
                                ?!@astDeclarationStruct ioDeclarationAST) {
    let @bool isOverriding
    select
      isOverriding = false
    or
      $override$
      isOverriding = true
    end
    $transient$
    $Identifier$ (?let transientTypeName)
    $identifier$ (?let @lstring transientName)
    $dependsFrom$
    var @observablePropertyList dependanceList = []
    repeat
      <observable_property> (?let @observablePropertyAST observablePropertyAST)
      !?dependanceList.append (observablePropertyAST)
    while
      $,$
    end
    $;$
    !?ioDeclarationAST.mUnifiedDeclarationList.append (@transientDeclarationAST (
      inCurrentEntity,
      inRootEntity,
      transientTypeName,
      transientName,
      dependanceList,
      isOverriding
    )
    )
  }
}

//--------------------------------------------------------------------------------------------------
//   CLASS AND PROPERTY SEMANTIC ANALYSIS                       
//--------------------------------------------------------------------------------------------------

override proc @transientDeclarationAST.firstAnalysisPhase(
       ?!@semanticContext ioSemanticContext,
       ?!@generationStruct unused ioGeneration)
{
  var entry = ioSemanticContext.mClassMap [!searchKey: self.mClassName]
    ioSemanticContext.mClassMap.searchKey (self.mTransientTypeName, ?let classKind, ?3*)
    switch classKind
    case prefs :
      error self.mTransientTypeName : "an atomic class is required here"
    case atomic (kind) :
      !?entry.mPropertyMap.insertKey (
        self.mTransientName,
        .property (!type: kind, !accessibility: .transient (!isAbstract: self.mDependencyList.count == 0)),
        (),
        self.mIsOverriding
      )
    case document (*) :
      error self.mTransientTypeName : "an atomic class is required here"
    case entity (4*) :
      error self.mTransientTypeName : "an atomic class is required here"
    end
  !?ioSemanticContext.mClassMap.replace (!with: entry)
//  end
}

//--------------------------------------------------------------------------------------------------
//   SECOND ANALYSIS PHASE
//--------------------------------------------------------------------------------------------------

override proc @transientDeclarationAST.thirdAnalysisPhase(
       ?!@semanticContext ioSemanticContext,
       ?!@generationStruct ioGeneration) {
//-- Property type
  ioSemanticContext.mClassMap.searchKey (self.mTransientTypeName, ?let classKind, ?3*)
//-- Check type
  let @typeKind typeKind
  switch classKind
  case prefs :
    error self.mTransientTypeName: "an atomic class is required here" spoil (typeKind)
  case atomic (@typeKind kind) :
    typeKind = kind
  case document (*) :
    error self.mTransientTypeName: "an atomic class is required here" spoil (typeKind)
  case entity (4*) :
    error self.mTransientTypeName: "an atomic class is required here" spoil (typeKind)
  end
//-- Root properties
  let @propertyMap rootProperties
  if self.mRootEntityName.string == "" then
    rootProperties = ()
  else
    ioSemanticContext.mClassMap.searchKey (self.mRootEntityName, ?*, ?rootProperties, ?2*)
  end
//-- Current class properties
  ioSemanticContext.mClassMap.searchKey (self.mClassName, ?let currentClassKind, ?let properties, ?2*)
//-- Analyse master properties
  var @transientDependencyListForGeneration dependencies = []
  for (mObservableProperty) in self.mDependencyList do
    mObservableProperty.analyzeObservableProperty (
      rootProperties,
      ioSemanticContext,
      properties,
      ?let @propertyKind dependencyKind,
      ?let @string swiftTypeStringForTransientFunctionArgument,
      ?let @string protocolTypeName,
      ?let @string defaultValueAsString
    )
//    message "defaultValueAsString " + defaultValueAsString + "\n"
    switch dependencyKind
    case property (2*) :
    case toMany (4*) :
    case toOne (5*) :
    case arrayController (2*) :
      error mObservableProperty.location : "only an atomic property can be observed"
    case selectionController (*) :
      error mObservableProperty.location : "only an atomic property can be observed"
    end
    !?dependencies.append (
      mObservableProperty,
      mObservableProperty.modelStringFunctionArgument ,
      swiftTypeStringForTransientFunctionArgument,
      defaultValueAsString,
      protocolTypeName
    )
  end
  !?ioGeneration.mFileGenerationList.append (@transientRoutineGeneration (
    self.mClassName,
    self.mTransientName.string,
    typeKind,
    "transient",
    dependencies
  )
  )
  var entry = ioSemanticContext.mClassMap [!searchKey: self.mClassName]
    let @bool generate
    switch currentClassKind
    case prefs :
      generate = true
    case document (*) :
      generate = true
    case atomic (*) :
      generate = true
    case entity (*, graphic, 2*):
      if graphic then
        generate = (self.mTransientName.string != "selectionDisplay") & (self.mTransientName.string != "objectDisplay")
      else
        generate = true
      end
    end
    !?entry.mPropertyGenerationList.append (@transientPropertyGeneration (
      self.mTransientName.string,
      self.mClassName.string,
      typeKind,
      dependencies,
      generate
    )
    )
  !?ioSemanticContext.mClassMap.replace (!with: entry)
//  end
}

//--------------------------------------------------------------------------------------------------
//   CODE GENERATION                       
//--------------------------------------------------------------------------------------------------

class @transientPropertyGeneration : @propertyGeneration {
  public var @string mClassName
  public var @typeKind mType
  public var @transientDependencyListForGeneration mDependencyList
  public var @bool mGenerate
}

//--------------------------------------------------------------------------------------------------

list @transientPropertyGenerationList {
  public var @transientPropertyGeneration mProperty
}

//--------------------------------------------------------------------------------------------------

override func @transientPropertyGeneration.declarationInSelectionControllerCode() -> @string {
  result  = "  //" + @string.stringWithSequenceOfCharacters  ('-', 96) + "\n"
  result += "  //   Selection observable property: " + self.mPropertyName + "\n"
  result += "  //" + @string.stringWithSequenceOfCharacters  ('-', 96) + "\n\n"
  result += "  final let " + self.mPropertyName + "_property = EBTransientProperty <" + self.mType.swiftTypeName + "> ()\n\n"
}

//--------------------------------------------------------------------------------------------------

override func @transientPropertyGeneration.initCode() -> @string {
  result  = ""
}

//--------------------------------------------------------------------------------------------------

override func @transientPropertyGeneration.bindPropertyInSelectionController () -> @string {
  result  = "  //" + @string.stringWithSequenceOfCharacters  ('-', 96) + "\n\n"
  result += "  private final func bind_property_" + self.mPropertyName + " () {\n"
  result += "    self.selectedArray_property.toMany_" + self.mPropertyName + "_StartsBeingObserved (by: self." + self.mPropertyName + "_property)\n"
  result += "    self." + self.mPropertyName + "_property.mReadModelFunction = { [weak self] in\n"
  result += "      if let model = self?.selectedArray_property {\n"
  result += "        switch model.selection {\n"
  result += "        case .empty :\n"
  result += "          return .empty\n"
  result += "        case .multiple :\n"
  result += "          return .multiple\n"
  result += "        case .single (let v) :\n"
  result += "          var s = Set <" + self.mType.swiftTypeName + "> ()\n"
  result += "          var isMultipleSelection = false\n"
  result += "          for object in v {\n"
  result += "            switch object." + self.mPropertyName + "_property.selection {\n"
  result += "            case .empty :\n"
  result += "              return .empty\n"
  result += "            case .multiple :\n"
  result += "              isMultipleSelection = true\n"
  result += "            case .single (let vProp) :\n"
  result += "              s.insert (vProp)\n"
  result += "            }\n"
  result += "          }\n"
  result += "          if isMultipleSelection {\n"
  result += "            return .multiple\n"
  result += "          }else if s.count == 0 {\n"
  result += "            return .empty\n"
  result += "          }else if s.count == 1 {\n"
  result += "            return .single (s.first!)\n"
  result += "          }else{\n"
  result += "            return .multiple\n"
  result += "          }\n"
  result += "        }\n"
  result += "      }else{\n"
  result += "        return .empty\n"
  result += "      }\n"
  result += "    }\n"
  result += "  }\n"
}

//--------------------------------------------------------------------------------------------------

override func @transientPropertyGeneration.propertyDeclarationCode(
   let @bool inPreferences,
   let @bool unused inGenerationDirectAccess,
   let @stringset inOverriddenTransients) -> @string
{
  result  = ""
  if self.mGenerate & not inOverriddenTransients.hasKey (self.mPropertyName) then
    if inPreferences then
      result += "//" + @string.stringWithSequenceOfCharacters  ('-', 96) + "\n"
      result += "//   Transient property: " + self.mPropertyName + "\n"
      result += "//" + @string.stringWithSequenceOfCharacters  ('-', 96) + "\n\n"
      result += "@MainActor let preferences_" + self.mPropertyName + "_property = EBTransientProperty <" + self.mType.swiftTypeName + "> ()\n\n"
    else
      result += "  //" + @string.stringWithSequenceOfCharacters  ('-', 96) + "\n"
      result += "  //   Transient property: " + self.mPropertyName + "\n"
      result += "  //" + @string.stringWithSequenceOfCharacters  ('-', 96) + "\n\n"
      result += "  final let " + self.mPropertyName + "_property = EBTransientProperty <" + self.mType.swiftTypeName + "> ()\n\n"
      result += "  //" + @string.stringWithSequenceOfCharacters  ('-', 96) + "\n\n"
      result += "  final var " + self.mPropertyName + " : " + self.mType.swiftTypeName + "? {\n"
      result += "    return self." + self.mPropertyName + "_property.optionalValue\n"
      result += "  }\n\n"
    end
  end
}

//--------------------------------------------------------------------------------------------------

override func @transientPropertyGeneration.configurationCode (let @bool inPreferences) -> @string {
  let prefix = if inPreferences then "preferences_" else "self." end
  result  = ""
  if self.mDependencyList.count > 0 then
    let needs_unwSelf = self.mDependencyList.needs_unwSelf (inPreferences)
    result += "  //--- Atomic property: " + self.mPropertyName + "\n"
    if needs_unwSelf then
      result += "    " + prefix + self.mPropertyName + "_property.mReadModelFunction = { [weak self] in\n"
      result += "      if let unwSelf = self {\n"
      result += self.mDependencyList.transientComputeFunctionCall (inPreferences, self.mClassName, self.mPropertyName, "transient")
      result += "      }else{\n"
      result += "        return .empty\n"
      result += "      }\n"
    else
      result += "    " + prefix + self.mPropertyName + "_property.mReadModelFunction = {\n"
      result += self.mDependencyList.transientComputeFunctionCall (inPreferences, self.mClassName, self.mPropertyName, "transient")
    end
    result += "    }\n"
    for (mDependency, 4*) in self.mDependencyList do
      let s = mDependency.generateAddObserverCall (inPreferences)
      if s != "" then
        result += "    " + s + " (by: " + prefix + self.mPropertyName + "_property)\n"
      end
    end
  end
}

//--------------------------------------------------------------------------------------------------
//   GENERATION TYPE                       
//--------------------------------------------------------------------------------------------------

list @transientDependencyListForGeneration {
  public let @observablePropertyAST mDependency
  public let @string mFunctionArgumentName
  public let @string mFunctionArgumentTypeString
  public let @string mDefaultValueAsString
  public let @string mProtocolName

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func transientComputeFunctionCall (@bool inPreferences,
                                     @string inOwnerName,
                                     @string inTransientName,
                                     @string inFunctionNamePrefix) -> @string {
    let uwself = if inPreferences then "preferences_" else "unwSelf." end
    result = ""
    let ident = "        "
    for (dependency, 2*, defaultValue, *) in self do (idx)
      if defaultValue != "" then
        result += ident + "var s" + idx + " = " + dependency.modelStringForSelf (uwself) + ".selection" + "\n"
        result += ident + "switch s" + idx + " {\n"
        result += ident + "case .single :\n"
        result += ident + "  ()\n"
        result += ident + "case .empty, .multiple :\n"
        result += ident + "  s" + idx + " = .single (" + defaultValue + ")\n"
        result += ident + "}\n"
      else
        result += ident + "let s" + idx + " = " + dependency.modelStringForSelf (uwself) + ".selection" + "\n"
      end
    end
    result += ident + "switch ("
    for (5*) in self
    do (idx)
      result += "s" + idx
    between
      result += ", "
    end
    result += ") {\n"
    result += ident + "case ("
    for (5*) in self
    do (idx)
      result += ".single (let v" + idx + ")"
    between
      result += ",\n              "
    end
    result += ") :\n"
    result += ident + "  return .single ("
    result += inFunctionNamePrefix + "_" + inOwnerName + "_" + inTransientName
    result += " ("
    for (5*) in self
    do (idx)
      result += "v" + idx
    between
      result += ", "
    end
    result += "))\n"
    result += ident + "case ("
    for (5*) in self
    do
      result += ".multiple"
    between
      result += ",\n              "
    end
    result += ") :\n"
    result += ident + "  return .multiple\n"
    result += ident + "default :\n"
    result += ident + "  return .empty\n"
    result += ident + "}\n"
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func needs_unwSelf (@bool inPreferences) -> @bool {
    result = false
    for (dep, 4*) in self while not result do
      result = dep.needs_unwSelf (inPreferences)
    end
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------
//   GENERATION                            
//--------------------------------------------------------------------------------------------------

func @observablePropertyAST.generateAddObserverCall (@bool inPreferences) -> @string {
  let prefix = if inPreferences then "preferences_" else "self." end
  switch self
  case selfControllerProperty (@lstring controllerName, @lstring propertyName) : 
    result = prefix + controllerName.string + "." + propertyName + "_property.startsBeingObserved"
  case selfControllerSecondaryProperty (@lstring controllerName, @lstring propertyName, @lstring secondaryPropertyName) : 
    result = prefix + controllerName.string + "." + propertyName + "_property." + secondaryPropertyName + "_property.startsBeingObserved"
  case selfControllerAllProperties (@lstring controllerName, @lstring propertyName, @lstring secondaryPropertyName) : 
    result = prefix + controllerName.string + "." + propertyName + "_property.toMany_" + secondaryPropertyName + "_StartsBeingObserved"
  case selfControllerOneProperty (@lstring controllerName, @lstring propertyName) : 
    result = prefix + controllerName.string + "." + propertyName + "_property.<<4>>" 
  case selfWithoutProperty (*) :
    result = "" // Do not generate add observer
  case selfProperty (@lstring masterName) :
    result = prefix + masterName.string + "_property.startsBeingObserved"
  case selfPropertyWithOption (@lstring masterName, *) :
    result = prefix + masterName.string + "_property.startsBeingObserved"
  case selfPropertyArray (@lstring masterName, @lstring elementPropertyName) :
    result = prefix + masterName.string + "_property.toMany_" + elementPropertyName + "_StartsBeingObserved"
  case selfPropertyObject (@lstring masterName, @lstring elementPropertyName) :
    result = prefix + masterName.string + "_property." + elementPropertyName + "_property.startsBeingObserved"
  case selfPropertyNone (@lstring masterName) :
    result = prefix + masterName.string + "_property.startsBeingObserved"
  case prefsProperty (@lstring propertyName) :
    result = "preferences_"  + propertyName + "_property.startsBeingObserved"
  case prefsPropertyWithOption (@lstring propertyName, *) :
    result = "preferences_"  + propertyName + "_property.startsBeingObserved"
  case rootProperty (@lstring masterName) :
    result = "self.rootObject." + masterName + "_property.startsBeingObserved"
  case rootPropertyNone (@lstring masterName) :
    result = "self.rootObject." + masterName + "_property.startsBeingObserved"
  case rootPropertyWithOption (@lstring masterName, @lstring optionName) :
    result = "self.rootObject." + masterName + "_property." + optionName + "_property.startsBeingObserved"
  case rootPropertyRelationship (@lstring relationshipName, @lstring propertyName) :
    result = "self.rootObject." + relationshipName + "_property.toMany_" + propertyName + "_StartsBeingObserved"
  case signatureProperty (*) :
    result = "<< ligne 243 >>"
  case versionProperty (*) :
    result = "<< ligne 245 >>"
  case versionShouldChangeProperty (*) :
    result = "<< ligne 247 >>"
  case superProperty (*, @lstring propertyName) :
    result = prefix + propertyName.string + "_property.startsBeingObserved"
  case superPropertyWithDefaultValue (*, @lstring propertyName, *) :
    result = prefix + propertyName.string + "_property.startsBeingObserved"
  end
}

//--------------------------------------------------------------------------------------------------

func @observablePropertyAST.generateRemoveObserverCall () -> @string {
  switch self
  case selfControllerProperty (@lstring controllerName, @lstring propertyName) : 
    result = "self." + controllerName.string + "." + propertyName + "_property.stopsBeingObserved"
  case selfControllerSecondaryProperty (@lstring controllerName, @lstring propertyName, @lstring secondaryPropertyName) : 
    result = "self." + controllerName.string + "." + propertyName + "_property." + secondaryPropertyName + "_property.stopsBeingObserved"
  case selfControllerAllProperties (@lstring controllerName, @lstring propertyName, @lstring secondaryPropertyName) : 
    result = "self." + controllerName.string + "." + propertyName + "_property.toMany_" + secondaryPropertyName + "_StopsBeingObserved"
  case selfControllerOneProperty (@lstring controllerName, @lstring propertyName) : 
    result = "self." + controllerName.string + "." + propertyName + "_property.toMany_<<5>>_StopsBeingObserved"
  case selfWithoutProperty (*) :
    result = "" // Do not generate add observer
  case selfProperty (@lstring masterName) :
    result = "self." + masterName.string + "_property.stopsBeingObserved"
  case selfPropertyWithOption (@lstring masterName, *) :
    result = "self." + masterName.string + "_property.stopsBeingObserved"
  case selfPropertyArray (@lstring masterName, @lstring elementPropertyName) :
    result = "self." + masterName.string + "_property.toMany_" + elementPropertyName + "_StopsBeingObserved"
  case selfPropertyObject (@lstring masterName, @lstring elementPropertyName) :
    result = "self." + masterName.string + "_property." + elementPropertyName + "_property.removeEBObserver"
  case selfPropertyNone (@lstring masterName) :
    result = "self." + masterName.string + "_property.stopsBeingObserved"
  case prefsProperty (@lstring propertyName) :
    result = "preferences_"  + propertyName + "_property.stopsBeingObserved"
  case prefsPropertyWithOption (@lstring propertyName, *) :
    result = "preferences_"  + propertyName + "_property.stopsBeingObserved"
  case rootProperty (@lstring masterName) :
    result = "self.rootObject." + masterName + "_property.stopsBeingObserved"
  case rootPropertyWithOption (@lstring masterName, @lstring optionName) :
    result = "self.rootObject." + masterName + "_property." + optionName + "_property.stopsBeingObserved"
  case rootPropertyNone (@lstring masterName) :
    result = "self.rootObject." + masterName + "_property.stopsBeingObserved"
  case rootPropertyRelationship (@lstring relationshipName, @lstring propertyName) :
    result = "self.rootObject." + relationshipName + "_property.toMany_" + propertyName + "_StopsBeingObserved"
  case signatureProperty (*) :
    result = "<< ligne 270 >>"
  case versionProperty (*) :
    result = "<< ligne 272 >>"
  case versionShouldChangeProperty (*) :
    result = "<< ligne 274 >>"
  case superProperty (*, @lstring propertyName) :
    result = "self." + propertyName.string + "_property.removeEBObserver"
  case superPropertyWithDefaultValue (*, @lstring propertyName, *) :
    result = "self." + propertyName.string + "_property.removeEBObserver"
  end
}

//--------------------------------------------------------------------------------------------------
//    TRANSIENT ROUTINE GENERATION         
//--------------------------------------------------------------------------------------------------

class @transientRoutineGeneration : @abstractFileGeneration {
  private let @string mOwnerName
  private let @string mTransientName
  private let @typeKind mTransientType
  private let @string mGeneratedFunctionNamePrefix
  private let @transientDependencyListForGeneration mDependencyList

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override proc generateCodePhase2  (@string unused inOutputDirectory,
                                     @generationStruct unused inGenerationStruct,
                                     @stringset unused inUsedProtocolSet,
                                     ?!@stringset unused ioGeneratedFileSet) {
  }
  
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override proc generateCodePhase1  (@string inOutputDirectory,
                                     @generationStruct unused inGenerationStruct,
                                     ?!@stringset ioUsedProtocolSet,
                                     ?!@stringset ioGeneratedFileSet) {
    if self.mDependencyList.count > 0 then
      for dep in self.mDependencyList do
        if dep.mProtocolName != "" then
          ioUsedProtocolSet ++= dep.mProtocolName
          // println (dep.mProtocolName)
        end
      end
      let s = filewrapper [transientManager.transientComputationFunctionFile:
        self.mOwnerName,
        self.mTransientName,
        self.mDependencyList,
        self.mTransientType,
        self.mGeneratedFunctionNamePrefix
      ]
      let header = "//" + @string.stringWithSequenceOfCharacters ('-', 98) + "\n"
        "//  THIS FILE IS REGENERATED BY EASY BINDINGS, ONLY MODIFY IT WITHIN USER ZONES\n"
        "//" + @string.stringWithSequenceOfCharacters ('-', 98) + "\n\n"
        + "import AppKit\n\n"
        + "//" + @string.stringWithSequenceOfCharacters ('-', 98) + "\n\n"
     let fileName = self.mGeneratedFunctionNamePrefix + "-" + self.mOwnerName + "-" + self.mTransientName + ".swift"
      !?ioGeneratedFileSet.insert (fileName)
      @string.generateFileWithPattern (
        !startPath:inOutputDirectory,
        !fileName:fileName,
        !lineComment:"//",
        !header:header,
        !defaultUserZone1:"\n\n", // Defaut user zone1
        !generatedZone2: s,
        !defaultUserZone2:"\n", // Defaut user zone2
        !generatedZone3:"}\n\n//" + @string.stringWithSequenceOfCharacters ('-', 98) + "\n",
        !makeExecutable:false
      )
    end
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

private filewrapper transientManager in "generation-templates" {
}{
}{
  template transientComputationFunctionFile : "transient-computation-function.swift.galgasTemplate" (
    @string OWNER_NAME,
    @string TRANSIENT_NAME,
    @transientDependencyListForGeneration DEPENDENCY_LIST,
    @typeKind TRANSIENT_TYPE,
    @string TRANSIENT_FUNCTION_NAME_PREFIX
  )
}

//--------------------------------------------------------------------------------------------------
