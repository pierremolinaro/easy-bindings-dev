//-----------------------------------------------------------------------------*
//                                                                             *
//                            File 'PMPrefs.swift'                             *
//                     Generated by version 0.0.1 [debug]                      *
//                        june 8th, 2014, at 17h44'57"                         *
//                                                                             *
//-----------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//----------------------------------------------------------------------------*

import Cocoa

//----------------------------------------------------------------------------*

var g_PMPrefs : PMPrefs? = nil

//----------------------------------------------------------------------------*

@objc (PMPrefs) class PMPrefs : NSObject {
  //------------------------------------------------------- Outlets
  @IBOutlet var myTextField : NSTextField
  @IBOutlet var myOtherTextField : NSTextField
  @IBOutlet var mColorWell : NSColorWell
  @IBOutlet var mDatePicker : NSDatePicker
  @IBOutlet var mInteger32TextField : NSTextField


  //------------------------------------------------------- Attributes
  var myString_observers = NSMutableSet ()
  var myString : NSString = "hello" {
    didSet {
      if myString != oldValue {
        myString_observers.makeObjectsPerformSelector ("preference_2E_PMPrefs_2E_myString_didChange")
      }
    }
  }

  func addObserverOf_myString (inObserver : AnyObject) {
    myString_observers.addObject (inObserver)
    NSApp.sendAction ("preference_2E_PMPrefs_2E_myString_didChange", to:inObserver, from:self)
  }

  func removeObserverOf_myString (inObserver : AnyObject) {
    myString_observers.removeObject (inObserver)
    NSApp.sendAction ("preference_2E_PMPrefs_2E_myString_didChange", to:inObserver, from:self)
  }
  var mColor_observers = NSMutableSet ()
  var mColor : NSColor = NSColor.yellowColor () {
    didSet {
      if mColor != oldValue {
        mColor_observers.makeObjectsPerformSelector ("preference_2E_PMPrefs_2E_mColor_didChange")
      }
    }
  }

  func addObserverOf_mColor (inObserver : AnyObject) {
    mColor_observers.addObject (inObserver)
    NSApp.sendAction ("preference_2E_PMPrefs_2E_mColor_didChange", to:inObserver, from:self)
  }

  func removeObserverOf_mColor (inObserver : AnyObject) {
    mColor_observers.removeObject (inObserver)
    NSApp.sendAction ("preference_2E_PMPrefs_2E_mColor_didChange", to:inObserver, from:self)
  }
  var mDate_observers = NSMutableSet ()
  var mDate : NSDate = NSDate () {
    didSet {
      if mDate != oldValue {
        mDate_observers.makeObjectsPerformSelector ("preference_2E_PMPrefs_2E_mDate_didChange")
      }
    }
  }

  func addObserverOf_mDate (inObserver : AnyObject) {
    mDate_observers.addObject (inObserver)
    NSApp.sendAction ("preference_2E_PMPrefs_2E_mDate_didChange", to:inObserver, from:self)
  }

  func removeObserverOf_mDate (inObserver : AnyObject) {
    mDate_observers.removeObject (inObserver)
    NSApp.sendAction ("preference_2E_PMPrefs_2E_mDate_didChange", to:inObserver, from:self)
  }
  var mIntegerValue_observers = NSMutableSet ()
  var mIntegerValue : Int64 = 123 {
    didSet {
      if mIntegerValue != oldValue {
        mIntegerValue_observers.makeObjectsPerformSelector ("preference_2E_PMPrefs_2E_mIntegerValue_didChange")
      }
    }
  }

  func addObserverOf_mIntegerValue (inObserver : AnyObject) {
    mIntegerValue_observers.addObject (inObserver)
    NSApp.sendAction ("preference_2E_PMPrefs_2E_mIntegerValue_didChange", to:inObserver, from:self)
  }

  func removeObserverOf_mIntegerValue (inObserver : AnyObject) {
    mIntegerValue_observers.removeObject (inObserver)
    NSApp.sendAction ("preference_2E_PMPrefs_2E_mIntegerValue_didChange", to:inObserver, from:self)
  }

  //------------------------------------------------------- Controllers

  //------------------------------------------------------- Transients

  //------------------------------------------------------- Arraies


  //------------------------------------------------------- Init
  init () {
    super.init ()
    noteObjectAllocation (self) ;
    g_PMPrefs = self ;
     var ud = NSUserDefaults.standardUserDefaults ()
  //---
    var value : AnyObject?
    value = ud.objectForKey ("PMPrefs:myString")
    if (nil != value) {
      myString = value as NSString
    }
    value = ud.objectForKey ("PMPrefs:mColor")
    if (nil != value) {
      mColor = NSUnarchiver.unarchiveObjectWithData (value as NSData) as NSColor
    }
    value = ud.objectForKey ("PMPrefs:mDate")
    if (nil != value) {
      mDate = value as NSDate
    }
    value = ud.objectForKey ("PMPrefs:mIntegerValue")
    if (nil != value) {
      mIntegerValue = (value as NSNumber).longLongValue ()
    }
  //---
    NSNotificationCenter.defaultCenter ().addObserver (self,
     selector:"applicationWillTerminateAction:",
     name:NSApplicationWillTerminateNotification,
     object:nil
    )
  }

  //------------------------------------------------------- awakeFromNib
  override func awakeFromNib () {
//--- check myTextField' outlet not nil
  if nil == myTextField {
    presentErrorWindow (__FILE__, __LINE__, "the 'myTextField' outlet is nil") ;
  }
  myTextField.bind ("value",
    toObject:self,
    withKeyPath:"myString",
    options:nil
  )
//--- check myOtherTextField' outlet not nil
  if nil == myOtherTextField {
    presentErrorWindow (__FILE__, __LINE__, "the 'myOtherTextField' outlet is nil") ;
  }
  myOtherTextField.bind ("value",
    toObject:self,
    withKeyPath:"myString",
    options:[
      true : "NSContinuouslyUpdatesValue"
    ]
  )
//--- check mColorWell' outlet not nil
  if nil == mColorWell {
    presentErrorWindow (__FILE__, __LINE__, "the 'mColorWell' outlet is nil") ;
  }
  mColorWell.bind ("value",
    toObject:self,
    withKeyPath:"mColor",
    options:nil
  )
//--- check mDatePicker' outlet not nil
  if nil == mDatePicker {
    presentErrorWindow (__FILE__, __LINE__, "the 'mDatePicker' outlet is nil") ;
  }
  mDatePicker.bind ("value",
    toObject:self,
    withKeyPath:"mDate",
    options:nil
  )
//--- check mInteger32TextField' outlet not nil
  if nil == mInteger32TextField {
    presentErrorWindow (__FILE__, __LINE__, "the 'mInteger32TextField' outlet is nil") ;
  }
  if (nil != mInteger32TextField) && (nil == mInteger32TextField.formatter) {
    presentErrorWindow (__FILE__, __LINE__, "the 'mInteger32TextField' outlet has no formatter, it should have an NSNumberFormatter") ;
  }else if (nil != mInteger32TextField) && !(mInteger32TextField.formatter ().isKindOfClass (NSNumberFormatter)) {
    presentErrorWindow (__FILE__, __LINE__, "the 'mInteger32TextField outlet has a formatter that is not kind of NSNumberFormatter class") ;
  }
  mInteger32TextField.bind ("value",
    toObject:self,
    withKeyPath:"mIntegerValue",
    options:nil
  )
  }
  
  //------------------------------------------------------- deinit
  deinit {
    noteObjectDeallocation (self) ;
  }
  
   //------------------------------------------------------- applicationWillTerminateAction
  func applicationWillTerminateAction (NSNotification) {
    var ud = NSUserDefaults.standardUserDefaults ()
    ud.setObject (myString, forKey:"PMPrefs:myString")
    ud.setObject (NSArchiver.archivedDataWithRootObject (mColor), forKey:"PMPrefs:mColor")
    ud.setObject (mDate, forKey:"PMPrefs:mDate")
    ud.setObject (NSNumber.numberWithLongLong (mIntegerValue), forKey:"PMPrefs:mIntegerValue")
  }
}
//----------------------------------------------------------------------------*


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2



