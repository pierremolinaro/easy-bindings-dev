//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

var g_Preferences : Preferences? = nil

//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

@objc(Preferences) class Preferences : EBObject {

  //····················································································································
  //    Outlets
  //····················································································································

  @IBOutlet var mFirstNameTextField : EBTextField? = nil
  @IBOutlet var mFullNameTextField : EBTextObserverField? = nil
  @IBOutlet var mLastNameTextField : EBTextField? = nil
  @IBOutlet var mUpperCaseFullNameTextField : EBTextObserverField? = nil
  @IBOutlet var myButton : EBButton? = nil
 
  //····················································································································
  //    Simple Stored Properties
  //····················································································································

  var mFirstName = EBStoredProperty_String ("Amédée")
  var mLastName = EBStoredProperty_String ("Schmurtz")

  //····················································································································
  //    Stored Array Properties
  //····················································································································


  //····················································································································
  //    Transient properties
  //····················································································································

  var mFullName = EBTransientProperty_String ()
  var mUpperCaseFullName = EBTransientProperty_String ()


  //····················································································································
  //    Array Controllers
  //····················································································································



  //····················································································································
  //    Init
  //····················································································································

  override init () {
    super.init ()
    g_Preferences = self ;
  //--- Read from preferences
    mFirstName.readInPreferencesWithKey (inKey:"Preferences:mFirstName")
    mLastName.readInPreferencesWithKey (inKey:"Preferences:mLastName")
  //--- Property validation function
  //---
    NotificationCenter.default ().addObserver (self,
     selector:#selector(Preferences.applicationWillTerminateAction(_:)),
     name:NSNotification.Name.NSApplicationWillTerminate,
     object:nil
    )
  //--- Extern functions
  }

  //····················································································································

  @IBOutlet private var window : NSWindow?
  let OUTLET_WIDTH = 200.0
  let OUTLET_HEIGHT = 22.0

  //····················································································································
  //    awakeFromNib
  //····················································································································

  override func awakeFromNib () {
    var y = OUTLET_HEIGHT * 1.5 * 5.0
    let view = NSView (frame:NSRect (x:0.0, y:0.0, width:10.0, height:10.0))
    y -= OUTLET_HEIGHT
  //--- Text First Name:
  //  createTextFieldForText ("First Name:", y:&y, col:0, view:view)
    let tf1 = NSTextField (frame:NSRect (x:10.0 + OUTLET_WIDTH * 0.0, y:y, width:OUTLET_WIDTH, height:OUTLET_HEIGHT))
    tf1.stringValue = "First Name:"
    tf1.isEditable = false
    tf1.drawsBackground = false
    tf1.isBordered = false
    view.addSubview (tf1)
  //--- Outlet mFirstNameTextField
    mFirstNameTextField = EBTextField(frame:NSRect (x:10.0 + OUTLET_WIDTH * 1.0, y:y, width:OUTLET_WIDTH, height:OUTLET_HEIGHT))
    mFirstNameTextField?.setAccessibilityIdentifier ("mFirstNameTextField")
    view.addSubview (mFirstNameTextField!)
    y -= OUTLET_HEIGHT / 2.0
    y -= OUTLET_HEIGHT
  //--- Text Name: 
  //  createTextFieldForText ("Name: ", y:&y, col:0, view:view)
    let tf2 = NSTextField (frame:NSRect (x:10.0 + OUTLET_WIDTH * 0.0, y:y, width:OUTLET_WIDTH, height:OUTLET_HEIGHT))
    tf2.stringValue = "Name: "
    tf2.isEditable = false
    tf2.drawsBackground = false
    tf2.isBordered = false
    view.addSubview (tf2)
  //--- Outlet mLastNameTextField
    mLastNameTextField = EBTextField(frame:NSRect (x:10.0 + OUTLET_WIDTH * 1.0, y:y, width:OUTLET_WIDTH, height:OUTLET_HEIGHT))
    mLastNameTextField?.setAccessibilityIdentifier ("mLastNameTextField")
    view.addSubview (mLastNameTextField!)
    y -= OUTLET_HEIGHT / 2.0
    y -= OUTLET_HEIGHT
  //--- Text Full Name:
  //  createTextFieldForText ("Full Name:", y:&y, col:0, view:view)
    let tf3 = NSTextField (frame:NSRect (x:10.0 + OUTLET_WIDTH * 0.0, y:y, width:OUTLET_WIDTH, height:OUTLET_HEIGHT))
    tf3.stringValue = "Full Name:"
    tf3.isEditable = false
    tf3.drawsBackground = false
    tf3.isBordered = false
    view.addSubview (tf3)
  //--- Outlet mFullNameTextField
    mFullNameTextField = EBTextObserverField(frame:NSRect (x:10.0 + OUTLET_WIDTH * 1.0, y:y, width:OUTLET_WIDTH, height:OUTLET_HEIGHT))
    mFullNameTextField?.setAccessibilityIdentifier ("mFullNameTextField")
    view.addSubview (mFullNameTextField!)
    y -= OUTLET_HEIGHT / 2.0
    y -= OUTLET_HEIGHT
  //--- Text Uppercase full Name:
  //  createTextFieldForText ("Uppercase full Name:", y:&y, col:0, view:view)
    let tf4 = NSTextField (frame:NSRect (x:10.0 + OUTLET_WIDTH * 0.0, y:y, width:OUTLET_WIDTH, height:OUTLET_HEIGHT))
    tf4.stringValue = "Uppercase full Name:"
    tf4.isEditable = false
    tf4.drawsBackground = false
    tf4.isBordered = false
    view.addSubview (tf4)
  //--- Outlet mUpperCaseFullNameTextField
    mUpperCaseFullNameTextField = EBTextObserverField(frame:NSRect (x:10.0 + OUTLET_WIDTH * 1.0, y:y, width:OUTLET_WIDTH, height:OUTLET_HEIGHT))
    mUpperCaseFullNameTextField?.setAccessibilityIdentifier ("mUpperCaseFullNameTextField")
    view.addSubview (mUpperCaseFullNameTextField!)
    y -= OUTLET_HEIGHT / 2.0
    y -= OUTLET_HEIGHT
  //--- Outlet myButton
    myButton = EBButton(frame:NSRect (x:10.0 + OUTLET_WIDTH * 0.0, y:y, width:OUTLET_WIDTH, height:OUTLET_HEIGHT))
    myButton?.setAccessibilityIdentifier ("myButton")
    view.addSubview (myButton!)
    y -= OUTLET_HEIGHT / 2.0
  //--- Set pref window content view
    window?.setContentSize (NSSize (width:20.0 + OUTLET_WIDTH * 2.0, height:OUTLET_HEIGHT * (1.5 * 5.0 + 0.5)))
    window?.contentView = view
  //--- Check mFirstNameTextField' outlet not nil
    if nil == mFirstNameTextField {
      presentErrorWindow (#file, line:#line, errorMessage:"the 'mFirstNameTextField' outlet is nil")
    }
  //--- Check mFullNameTextField' outlet not nil
    if nil == mFullNameTextField {
      presentErrorWindow (#file, line:#line, errorMessage:"the 'mFullNameTextField' outlet is nil")
    }
  //--- Check mLastNameTextField' outlet not nil
    if nil == mLastNameTextField {
      presentErrorWindow (#file, line:#line, errorMessage:"the 'mLastNameTextField' outlet is nil")
    }
  //--- Check mUpperCaseFullNameTextField' outlet not nil
    if nil == mUpperCaseFullNameTextField {
      presentErrorWindow (#file, line:#line, errorMessage:"the 'mUpperCaseFullNameTextField' outlet is nil")
    }
  //--- Check myButton' outlet not nil
    if nil == myButton {
      presentErrorWindow (#file, line:#line, errorMessage:"the 'myButton' outlet is nil")
    }
  //--- Install compute functions for transients
    mFullName.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mFirstName.prop.kind ()
        kind &= unwSelf.mLastName.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .noSelection
        case .multipleSelectionKind :
          return .multipleSelection
        case .singleSelectionKind :
          switch (unwSelf.mFirstName.prop, unwSelf.mLastName.prop) {
          case (.singleSelection (let v0), .singleSelection (let v1)) :
            return .singleSelection (compute_Preferences_mFullName (v0, v1))
          default :
            return .noSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    mUpperCaseFullName.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mFullName.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .noSelection
        case .multipleSelectionKind :
          return .multipleSelection
        case .singleSelectionKind :
          switch (unwSelf.mFullName.prop) {
          case (.singleSelection (let v0)) :
            return .singleSelection (compute_Preferences_mUpperCaseFullName (v0))
          default :
            return .noSelection
          }
        }
      }else{
        return .noSelection
      }
    }
  //--- Install property observers for transients
    self.mFirstName.addEBObserver (mFullName)
    self.mLastName.addEBObserver (mFullName)
    self.mFullName.addEBObserver (mUpperCaseFullName)
  //--- Install bindings
    mLastNameTextField?.bind_value (self.mLastName, file:#file, line:#line, sendContinously:true)
    mFirstNameTextField?.bind_value (self.mFirstName, file:#file, line:#line, sendContinously:false)
    mFullNameTextField?.bind_valueObserver (self.mFullName, file:#file, line:#line)
    mUpperCaseFullNameTextField?.bind_valueObserver (self.mUpperCaseFullName, file:#file, line:#line)
  //--- Install multiple bindings
  //--------------------------- Array controller
  //--------------------------- Set targets / actions
    myButton?.target = self
    myButton?.action = #selector (Preferences.monAction (_:))
  //--- Extern functions
  }
  
  //····················································································································
  //    applicationWillTerminateAction
  //····················································································································

  func applicationWillTerminateAction (_ : NSNotification) {
    mFirstName.storeInPreferencesWithKey (inKey:"Preferences:mFirstName")
    mLastName.storeInPreferencesWithKey (inKey:"Preferences:mLastName")
  }

  //····················································································································

}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

