//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Property Int
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_Int  = EBReadOnlyProperty <Int>
typealias EBReadWriteProperty_Int = EBReadWriteProperty <Int>
typealias EBPropertyProxy_Int     = EBPropertyProxy <Int>
typealias EBStoredProperty_Int    = EBStoredProperty <Int>
typealias EBTransientProperty_Int = EBTransientProperty <Int>

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Property Bool
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_Bool  = EBReadOnlyProperty <Bool>
typealias EBReadWriteProperty_Bool = EBReadWriteProperty <Bool>
typealias EBPropertyProxy_Bool     = EBPropertyProxy <Bool>
typealias EBStoredProperty_Bool    = EBStoredProperty <Bool>
typealias EBTransientProperty_Bool = EBTransientProperty <Bool>

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Property Double
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_Double  = EBReadOnlyProperty <Double>
typealias EBReadWriteProperty_Double = EBReadWriteProperty <Double>
typealias EBPropertyProxy_Double     = EBPropertyProxy <Double>
typealias EBStoredProperty_Double    = EBStoredProperty <Double>
typealias EBTransientProperty_Double = EBTransientProperty <Double>

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBReadOnlyProperty_String (abstract class)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBReadOnlyProperty_String)
class EBReadOnlyProperty_String : EBAbstractProperty {
  var prop : EBProperty <String> { get { return .noSelection } } // Abstract method

  //····················································································································

  func compare (other : EBReadOnlyProperty_String) -> NSComparisonResult {
    switch prop {
    case .noSelection :
      switch other.prop {
      case .noSelection :
        return .OrderedSame
      default:
        return .OrderedAscending
      }
    case .multipleSelection :
      switch other.prop {
      case .noSelection :
        return .OrderedDescending
      case .multipleSelection :
        return .OrderedSame
     case .singleSelection (_) :
        return .OrderedAscending
     }
   case .singleSelection (let currentValue) :
      switch other.prop {
      case .noSelection, .multipleSelection :
        return .OrderedDescending
      case .singleSelection (let otherValue) :
        if currentValue < otherValue {
          return .OrderedAscending
        }else if currentValue > otherValue {
          return .OrderedDescending
        }else{
          return .OrderedSame
        }
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBReadWriteProperty_String (abstract class)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBReadWriteProperty_String : EBReadOnlyProperty_String {
  func setProp (inValue : String) { } // Abstract method
  func validateAndSetProp (candidateValue : String, windowForSheet inWindow:NSWindow?) -> Bool {
    return false
  } // Abstract method
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBPropertyProxy_String
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBPropertyProxy_String)
class EBPropertyProxy_String : EBReadWriteProperty_String {
  var readModelFunction : Optional < () -> EBProperty <String> >
  var writeModelFunction : Optional < (String) -> Void >
  var validateAndWriteModelFunction : Optional < (String, NSWindow?) -> Bool >
  
  private var prop_cache : EBProperty <String>?

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  override func postEvent() {
    if prop_cache != nil {
      prop_cache = nil
      super.postEvent()
    }
  }

  //····················································································································

  var mValueExplorer : NSTextField? {
    didSet {
      updateValueExplorer (prop_cache)
    }
  }

  //····················································································································

  private func updateValueExplorer (possibleValue : EBProperty <String>?) {
    if let valueExplorer = mValueExplorer, unwProp = possibleValue {
      switch unwProp {
      case .noSelection :
        valueExplorer.stringValue = "No selection"
      case .multipleSelection :
        valueExplorer.stringValue = "Multiple selection"
      case .singleSelection (let value) :
        valueExplorer.stringValue = value
      }
    }else{
      mValueExplorer?.stringValue = "nil"
    }
  }

  //····················································································································

  override var prop : EBProperty <String> {
    get {
      if let unReadModelFunction = readModelFunction where prop_cache == nil {
        prop_cache = unReadModelFunction ()
        updateValueExplorer (prop_cache)
      }
      if prop_cache == nil {
        prop_cache = .noSelection
      }
      return prop_cache!
    }
  }

  //····················································································································
  
  override func setProp (inValue : String) {
    if let unWriteModelFunction = writeModelFunction {
      unWriteModelFunction (inValue)
    }
  }

  //····················································································································

  override func validateAndSetProp (candidateValue : String,
                                    windowForSheet inWindow:NSWindow?) -> Bool {
    var result = false
    if let unwValidateAndWriteModelFunction = validateAndWriteModelFunction {
      result = unwValidateAndWriteModelFunction (candidateValue, inWindow)
    }
    return result
  }
  
  //····················································································································
  
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBStoredProperty_String
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBStoredProperty_String)
final class EBStoredProperty_String : EBReadWriteProperty_String {
  weak var undoManager : NSUndoManager?
  
  //····················································································································

  var mValueExplorer : NSTextField? {
    didSet {
      mValueExplorer?.stringValue = mValue
    }
  }

  //····················································································································

  init (_ inValue : String) {
    mValue = inValue
    super.init ()
  }

  //····················································································································

  private var mValue : String {
    didSet {
      if mValue != oldValue {
        mValueExplorer?.stringValue = mValue
        undoManager?.registerUndoWithTarget (self, selector:Selector ("performUndo:"), object: oldValue)
        postEvent ()
        clearSignatureCache ()
      }
    }
  }

  //····················································································································

  func performUndo (oldValue : String) {
    mValue = oldValue
  }
  
  //····················································································································

  override var prop : EBProperty <String> { get { return .singleSelection (mValue) } }

  var propval : String { get { return mValue } }

  override func setProp (inValue : String) { mValue = inValue }

  //····················································································································
 
  var validationFunction : (String, String) -> EBValidationResult <String> = defaultValidationFunction

  override func validateAndSetProp (candidateValue : String,
                                    windowForSheet inWindow:NSWindow?) -> Bool {
    let validationResult = validationFunction (propval, candidateValue)
    var result = true
    switch validationResult {
    case EBValidationResult.ok (let validatedValue) :
      setProp (validatedValue)
    case EBValidationResult.rejectWithBeep :
      NSBeep ()
    case EBValidationResult.rejectWithAlert (let informativeText) :
      result = false
      let alert = NSAlert ()
      alert.messageText = String (format:"The value “%@” is invalid.", candidateValue)
      alert.informativeText = informativeText
      alert.addButtonWithTitle ("Ok")
      alert.addButtonWithTitle ("Discard Change")
      if let window = inWindow {
        alert.beginSheetModalForWindow (window, completionHandler:{(response : NSModalResponse) in
          if response == NSAlertSecondButtonReturn { // Discard Change
            self.postEvent ()
          }
        })
      }else{
        alert.runModal ()
      }
    }
    return result
  }

  //····················································································································

  func readInPreferencesWithKey (inKey : String) {
    let ud = NSUserDefaults.standardUserDefaults ()
    let value : AnyObject? = ud.objectForKey (inKey)
    if let unwValue : AnyObject = value where unwValue is String {
      setProp (unwValue as! String)
    }
  }

  
  func storeInPreferencesWithKey (inKey : String) {
    let ud = NSUserDefaults.standardUserDefaults ()
    ud.setObject (mValue, forKey:inKey)
  }

  func storeInDictionary (ioDictionary:NSMutableDictionary, forKey inKey:String) {
    ioDictionary.setValue (mValue, forKey:inKey)
  }

  func readFromDictionary (inDictionary:NSDictionary, forKey inKey:String) {
    let value : AnyObject? = inDictionary.objectForKey (inKey)
    if let unwValue : AnyObject = value where unwValue is String {
      setProp (unwValue as! String)
    }
  }


  //····················································································································
  //    SIGNATURE
  //····················································································································

  final private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil
  final private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol) {
    mSignatureObserver = observer
  }

  //····················································································································

  final private func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = propval.ebHashValue ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBTransientProperty_String
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBTransientProperty_String)
class EBTransientProperty_String : EBReadOnlyProperty_String {
  private var mValueCache : EBProperty <String>? = nil
  var computeFunction : Optional<() -> EBProperty <String>>

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  override var prop : EBProperty <String> {
    get {
      if let unwrappedComputeFunction = computeFunction where mValueCache == nil {
        mValueCache = unwrappedComputeFunction ()
      }
      if mValueCache == nil {
        mValueCache = .noSelection
      }
      return mValueCache!
    }
  }

  //····················································································································

  override func postEvent () {
    if mValueCache != nil {
      mValueCache = nil
      super.postEvent ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBReadOnlyProperty_NSColor (abstract class)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBReadOnlyProperty_NSColor)
class EBReadOnlyProperty_NSColor : EBAbstractProperty {
  var prop : EBProperty <NSColor> { get { return .noSelection } } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBReadWriteProperty_NSColor (abstract class)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBReadWriteProperty_NSColor : EBReadOnlyProperty_NSColor {
  func setProp (inValue : NSColor) { } // Abstract method
  func validateAndSetProp (candidateValue : NSColor, windowForSheet inWindow:NSWindow?) -> Bool {
    return false
  } // Abstract method
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBPropertyProxy_NSColor
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBPropertyProxy_NSColor)
class EBPropertyProxy_NSColor : EBReadWriteProperty_NSColor {
  var readModelFunction : Optional < () -> EBProperty <NSColor> >
  var writeModelFunction : Optional < (NSColor) -> Void >
  var validateAndWriteModelFunction : Optional < (NSColor, NSWindow?) -> Bool >
  
  private var prop_cache : EBProperty <NSColor>?

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  override func postEvent() {
    if prop_cache != nil {
      prop_cache = nil
      super.postEvent()
    }
  }

  //····················································································································

  var mValueExplorer : NSTextField? {
    didSet {
      updateValueExplorer (prop_cache)
    }
  }

  //····················································································································

  private func updateValueExplorer (possibleValue : EBProperty <NSColor>?) {
    if let valueExplorer = mValueExplorer, unwProp = possibleValue {
      switch unwProp {
      case .noSelection :
        valueExplorer.stringValue = "No selection"
      case .multipleSelection :
        valueExplorer.stringValue = "Multiple selection"
      case .singleSelection (let value) :
        valueExplorer.stringValue = value.description
      }
    }else{
      mValueExplorer?.stringValue = "nil"
    }
  }

  //····················································································································

  override var prop : EBProperty <NSColor> {
    get {
      if let unReadModelFunction = readModelFunction where prop_cache == nil {
        prop_cache = unReadModelFunction ()
        updateValueExplorer (prop_cache)
      }
      if prop_cache == nil {
        prop_cache = .noSelection
      }
      return prop_cache!
    }
  }

  //····················································································································
  
  override func setProp (inValue : NSColor) {
    if let unWriteModelFunction = writeModelFunction {
      unWriteModelFunction (inValue)
    }
  }

  //····················································································································

  override func validateAndSetProp (candidateValue : NSColor,
                                    windowForSheet inWindow:NSWindow?) -> Bool {
    var result = false
    if let unwValidateAndWriteModelFunction = validateAndWriteModelFunction {
      result = unwValidateAndWriteModelFunction (candidateValue, inWindow)
    }
    return result
  }
  
  //····················································································································
  
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBStoredProperty_NSColor
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBStoredProperty_NSColor)
final class EBStoredProperty_NSColor : EBReadWriteProperty_NSColor {
  weak var undoManager : NSUndoManager?
  
  //····················································································································

  var mValueExplorer : NSTextField? {
    didSet {
      mValueExplorer?.stringValue = mValue.description
    }
  }

  //····················································································································

  init (_ inValue : NSColor) {
    mValue = inValue
    super.init ()
  }

  //····················································································································

  private var mValue : NSColor {
    didSet {
      if mValue != oldValue {
        mValueExplorer?.stringValue = mValue.description
        undoManager?.registerUndoWithTarget (self, selector:Selector ("performUndo:"), object: oldValue)
        postEvent ()
        clearSignatureCache ()
      }
    }
  }

  //····················································································································

  func performUndo (oldValue : NSColor) {
    mValue = oldValue
  }
  
  //····················································································································

  override var prop : EBProperty <NSColor> { get { return .singleSelection (mValue) } }

  var propval : NSColor { get { return mValue } }

  override func setProp (inValue : NSColor) { mValue = inValue }

  //····················································································································
 
  var validationFunction : (NSColor, NSColor) -> EBValidationResult <NSColor> = defaultValidationFunction

  override func validateAndSetProp (candidateValue : NSColor,
                                    windowForSheet inWindow:NSWindow?) -> Bool {
    let validationResult = validationFunction (propval, candidateValue)
    var result = true
    switch validationResult {
    case EBValidationResult.ok (let validatedValue) :
      setProp (validatedValue)
    case EBValidationResult.rejectWithBeep :
      NSBeep ()
    case EBValidationResult.rejectWithAlert (let informativeText) :
      result = false
      let alert = NSAlert ()
      alert.messageText = String (format:"The value “%@” is invalid.", candidateValue)
      alert.informativeText = informativeText
      alert.addButtonWithTitle ("Ok")
      alert.addButtonWithTitle ("Discard Change")
      if let window = inWindow {
        alert.beginSheetModalForWindow (window, completionHandler:{(response : NSModalResponse) in
          if response == NSAlertSecondButtonReturn { // Discard Change
            self.postEvent ()
          }
        })
      }else{
        alert.runModal ()
      }
    }
    return result
  }

  //····················································································································

  func readInPreferencesWithKey (inKey : String) {
    let ud = NSUserDefaults.standardUserDefaults ()
    let value : AnyObject? = ud.objectForKey (inKey)
    if let unwValue : AnyObject = value where unwValue is NSData {
      let possibleObject : AnyObject? = NSUnarchiver.unarchiveObjectWithData (unwValue as! NSData)
      if let unwPossibleObject : AnyObject = possibleObject where unwPossibleObject is NSColor {
        setProp (unwPossibleObject as! NSColor)
      }
    }
  }

  
  func storeInPreferencesWithKey (inKey : String) {
    let ud = NSUserDefaults.standardUserDefaults ()
    ud.setObject (NSArchiver.archivedDataWithRootObject (mValue), forKey:inKey)
  }

  func storeInDictionary (ioDictionary:NSMutableDictionary, forKey inKey:String) {
    ioDictionary.setValue (NSArchiver.archivedDataWithRootObject (mValue), forKey:inKey)
  }

  func readFromDictionary (inDictionary:NSDictionary, forKey inKey:String) {
    let value : AnyObject? = inDictionary.objectForKey (inKey)
    if let unwValue : AnyObject = value where unwValue is NSData {
      let possibleObject : AnyObject? = NSUnarchiver.unarchiveObjectWithData (unwValue as! NSData)
      if let unwPossibleObject : AnyObject = possibleObject where unwPossibleObject is NSColor {
        setProp (unwPossibleObject as! NSColor)
      }
    }
  }


  //····················································································································
  //    SIGNATURE
  //····················································································································

  final private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil
  final private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol) {
    mSignatureObserver = observer
  }

  //····················································································································

  final private func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = propval.ebHashValue ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBTransientProperty_NSColor
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBTransientProperty_NSColor)
class EBTransientProperty_NSColor : EBReadOnlyProperty_NSColor {
  private var mValueCache : EBProperty <NSColor>? = nil
  var computeFunction : Optional<() -> EBProperty <NSColor>>

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  override var prop : EBProperty <NSColor> {
    get {
      if let unwrappedComputeFunction = computeFunction where mValueCache == nil {
        mValueCache = unwrappedComputeFunction ()
      }
      if mValueCache == nil {
        mValueCache = .noSelection
      }
      return mValueCache!
    }
  }

  //····················································································································

  override func postEvent () {
    if mValueCache != nil {
      mValueCache = nil
      super.postEvent ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBReadOnlyProperty_NSDate (abstract class)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBReadOnlyProperty_NSDate)
class EBReadOnlyProperty_NSDate : EBAbstractProperty {
  var prop : EBProperty <NSDate> { get { return .noSelection } } // Abstract method

  //····················································································································

  func compare (other : EBReadOnlyProperty_NSDate) -> NSComparisonResult {
    switch prop {
    case .noSelection :
      switch other.prop {
      case .noSelection :
        return .OrderedSame
      default:
        return .OrderedAscending
      }
    case .multipleSelection :
      switch other.prop {
      case .noSelection :
        return .OrderedDescending
      case .multipleSelection :
        return .OrderedSame
     case .singleSelection (_) :
        return .OrderedAscending
     }
   case .singleSelection (let currentValue) :
      switch other.prop {
      case .noSelection, .multipleSelection :
        return .OrderedDescending
      case .singleSelection (let otherValue) :
        if currentValue < otherValue {
          return .OrderedAscending
        }else if currentValue > otherValue {
          return .OrderedDescending
        }else{
          return .OrderedSame
        }
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBReadWriteProperty_NSDate (abstract class)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBReadWriteProperty_NSDate : EBReadOnlyProperty_NSDate {
  func setProp (inValue : NSDate) { } // Abstract method
  func validateAndSetProp (candidateValue : NSDate, windowForSheet inWindow:NSWindow?) -> Bool {
    return false
  } // Abstract method
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBPropertyProxy_NSDate
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBPropertyProxy_NSDate)
class EBPropertyProxy_NSDate : EBReadWriteProperty_NSDate {
  var readModelFunction : Optional < () -> EBProperty <NSDate> >
  var writeModelFunction : Optional < (NSDate) -> Void >
  var validateAndWriteModelFunction : Optional < (NSDate, NSWindow?) -> Bool >
  
  private var prop_cache : EBProperty <NSDate>?

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  override func postEvent() {
    if prop_cache != nil {
      prop_cache = nil
      super.postEvent()
    }
  }

  //····················································································································

  var mValueExplorer : NSTextField? {
    didSet {
      updateValueExplorer (prop_cache)
    }
  }

  //····················································································································

  private func updateValueExplorer (possibleValue : EBProperty <NSDate>?) {
    if let valueExplorer = mValueExplorer, unwProp = possibleValue {
      switch unwProp {
      case .noSelection :
        valueExplorer.stringValue = "No selection"
      case .multipleSelection :
        valueExplorer.stringValue = "Multiple selection"
      case .singleSelection (let value) :
        valueExplorer.stringValue = value.description
      }
    }else{
      mValueExplorer?.stringValue = "nil"
    }
  }

  //····················································································································

  override var prop : EBProperty <NSDate> {
    get {
      if let unReadModelFunction = readModelFunction where prop_cache == nil {
        prop_cache = unReadModelFunction ()
        updateValueExplorer (prop_cache)
      }
      if prop_cache == nil {
        prop_cache = .noSelection
      }
      return prop_cache!
    }
  }

  //····················································································································
  
  override func setProp (inValue : NSDate) {
    if let unWriteModelFunction = writeModelFunction {
      unWriteModelFunction (inValue)
    }
  }

  //····················································································································

  override func validateAndSetProp (candidateValue : NSDate,
                                    windowForSheet inWindow:NSWindow?) -> Bool {
    var result = false
    if let unwValidateAndWriteModelFunction = validateAndWriteModelFunction {
      result = unwValidateAndWriteModelFunction (candidateValue, inWindow)
    }
    return result
  }
  
  //····················································································································
  
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBStoredProperty_NSDate
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBStoredProperty_NSDate)
final class EBStoredProperty_NSDate : EBReadWriteProperty_NSDate {
  weak var undoManager : NSUndoManager?
  
  //····················································································································

  var mValueExplorer : NSTextField? {
    didSet {
      mValueExplorer?.stringValue = mValue.description
    }
  }

  //····················································································································

  init (_ inValue : NSDate) {
    mValue = inValue
    super.init ()
  }

  //····················································································································

  private var mValue : NSDate {
    didSet {
      if mValue != oldValue {
        mValueExplorer?.stringValue = mValue.description
        undoManager?.registerUndoWithTarget (self, selector:Selector ("performUndo:"), object: oldValue)
        postEvent ()
        clearSignatureCache ()
      }
    }
  }

  //····················································································································

  func performUndo (oldValue : NSDate) {
    mValue = oldValue
  }
  
  //····················································································································

  override var prop : EBProperty <NSDate> { get { return .singleSelection (mValue) } }

  var propval : NSDate { get { return mValue } }

  override func setProp (inValue : NSDate) { mValue = inValue }

  //····················································································································
 
  var validationFunction : (NSDate, NSDate) -> EBValidationResult <NSDate> = defaultValidationFunction

  override func validateAndSetProp (candidateValue : NSDate,
                                    windowForSheet inWindow:NSWindow?) -> Bool {
    let validationResult = validationFunction (propval, candidateValue)
    var result = true
    switch validationResult {
    case EBValidationResult.ok (let validatedValue) :
      setProp (validatedValue)
    case EBValidationResult.rejectWithBeep :
      NSBeep ()
    case EBValidationResult.rejectWithAlert (let informativeText) :
      result = false
      let alert = NSAlert ()
      alert.messageText = String (format:"The value “%@” is invalid.", candidateValue)
      alert.informativeText = informativeText
      alert.addButtonWithTitle ("Ok")
      alert.addButtonWithTitle ("Discard Change")
      if let window = inWindow {
        alert.beginSheetModalForWindow (window, completionHandler:{(response : NSModalResponse) in
          if response == NSAlertSecondButtonReturn { // Discard Change
            self.postEvent ()
          }
        })
      }else{
        alert.runModal ()
      }
    }
    return result
  }

  //····················································································································

  func readInPreferencesWithKey (inKey : String) {
    let ud = NSUserDefaults.standardUserDefaults ()
    let value : AnyObject? = ud.objectForKey (inKey)
    if let unwValue : AnyObject = value where unwValue is NSDate {
      setProp (unwValue as! NSDate)
    }
  }

  
  func storeInPreferencesWithKey (inKey : String) {
    let ud = NSUserDefaults.standardUserDefaults ()
    ud.setObject (mValue, forKey:inKey)
  }

  func storeInDictionary (ioDictionary:NSMutableDictionary, forKey inKey:String) {
    ioDictionary.setValue (mValue, forKey:inKey)
  }

  func readFromDictionary (inDictionary:NSDictionary, forKey inKey:String) {
    let value : AnyObject? = inDictionary.objectForKey (inKey)
    if let unwValue : AnyObject = value where unwValue is NSDate {
      setProp (unwValue as! NSDate)
    }
  }


  //····················································································································
  //    SIGNATURE
  //····················································································································

  final private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil
  final private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol) {
    mSignatureObserver = observer
  }

  //····················································································································

  final private func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = propval.ebHashValue ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBTransientProperty_NSDate
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBTransientProperty_NSDate)
class EBTransientProperty_NSDate : EBReadOnlyProperty_NSDate {
  private var mValueCache : EBProperty <NSDate>? = nil
  var computeFunction : Optional<() -> EBProperty <NSDate>>

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  override var prop : EBProperty <NSDate> {
    get {
      if let unwrappedComputeFunction = computeFunction where mValueCache == nil {
        mValueCache = unwrappedComputeFunction ()
      }
      if mValueCache == nil {
        mValueCache = .noSelection
      }
      return mValueCache!
    }
  }

  //····················································································································

  override func postEvent () {
    if mValueCache != nil {
      mValueCache = nil
      super.postEvent ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBReadOnlyProperty_NSFont (abstract class)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBReadOnlyProperty_NSFont)
class EBReadOnlyProperty_NSFont : EBAbstractProperty {
  var prop : EBProperty <NSFont> { get { return .noSelection } } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBReadWriteProperty_NSFont (abstract class)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBReadWriteProperty_NSFont : EBReadOnlyProperty_NSFont {
  func setProp (inValue : NSFont) { } // Abstract method
  func validateAndSetProp (candidateValue : NSFont, windowForSheet inWindow:NSWindow?) -> Bool {
    return false
  } // Abstract method
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBPropertyProxy_NSFont
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBPropertyProxy_NSFont)
class EBPropertyProxy_NSFont : EBReadWriteProperty_NSFont {
  var readModelFunction : Optional < () -> EBProperty <NSFont> >
  var writeModelFunction : Optional < (NSFont) -> Void >
  var validateAndWriteModelFunction : Optional < (NSFont, NSWindow?) -> Bool >
  
  private var prop_cache : EBProperty <NSFont>?

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  override func postEvent() {
    if prop_cache != nil {
      prop_cache = nil
      super.postEvent()
    }
  }

  //····················································································································

  var mValueExplorer : NSTextField? {
    didSet {
      updateValueExplorer (prop_cache)
    }
  }

  //····················································································································

  private func updateValueExplorer (possibleValue : EBProperty <NSFont>?) {
    if let valueExplorer = mValueExplorer, unwProp = possibleValue {
      switch unwProp {
      case .noSelection :
        valueExplorer.stringValue = "No selection"
      case .multipleSelection :
        valueExplorer.stringValue = "Multiple selection"
      case .singleSelection (let value) :
        valueExplorer.stringValue = value.description
      }
    }else{
      mValueExplorer?.stringValue = "nil"
    }
  }

  //····················································································································

  override var prop : EBProperty <NSFont> {
    get {
      if let unReadModelFunction = readModelFunction where prop_cache == nil {
        prop_cache = unReadModelFunction ()
        updateValueExplorer (prop_cache)
      }
      if prop_cache == nil {
        prop_cache = .noSelection
      }
      return prop_cache!
    }
  }

  //····················································································································
  
  override func setProp (inValue : NSFont) {
    if let unWriteModelFunction = writeModelFunction {
      unWriteModelFunction (inValue)
    }
  }

  //····················································································································

  override func validateAndSetProp (candidateValue : NSFont,
                                    windowForSheet inWindow:NSWindow?) -> Bool {
    var result = false
    if let unwValidateAndWriteModelFunction = validateAndWriteModelFunction {
      result = unwValidateAndWriteModelFunction (candidateValue, inWindow)
    }
    return result
  }
  
  //····················································································································
  
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBStoredProperty_NSFont
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBStoredProperty_NSFont)
final class EBStoredProperty_NSFont : EBReadWriteProperty_NSFont {
  weak var undoManager : NSUndoManager?
  
  //····················································································································

  var mValueExplorer : NSTextField? {
    didSet {
      mValueExplorer?.stringValue = mValue.description
    }
  }

  //····················································································································

  init (_ inValue : NSFont) {
    mValue = inValue
    super.init ()
  }

  //····················································································································

  private var mValue : NSFont {
    didSet {
      if mValue != oldValue {
        mValueExplorer?.stringValue = mValue.description
        undoManager?.registerUndoWithTarget (self, selector:Selector ("performUndo:"), object: oldValue)
        postEvent ()
        clearSignatureCache ()
      }
    }
  }

  //····················································································································

  func performUndo (oldValue : NSFont) {
    mValue = oldValue
  }
  
  //····················································································································

  override var prop : EBProperty <NSFont> { get { return .singleSelection (mValue) } }

  var propval : NSFont { get { return mValue } }

  override func setProp (inValue : NSFont) { mValue = inValue }

  //····················································································································
 
  var validationFunction : (NSFont, NSFont) -> EBValidationResult <NSFont> = defaultValidationFunction

  override func validateAndSetProp (candidateValue : NSFont,
                                    windowForSheet inWindow:NSWindow?) -> Bool {
    let validationResult = validationFunction (propval, candidateValue)
    var result = true
    switch validationResult {
    case EBValidationResult.ok (let validatedValue) :
      setProp (validatedValue)
    case EBValidationResult.rejectWithBeep :
      NSBeep ()
    case EBValidationResult.rejectWithAlert (let informativeText) :
      result = false
      let alert = NSAlert ()
      alert.messageText = String (format:"The value “%@” is invalid.", candidateValue)
      alert.informativeText = informativeText
      alert.addButtonWithTitle ("Ok")
      alert.addButtonWithTitle ("Discard Change")
      if let window = inWindow {
        alert.beginSheetModalForWindow (window, completionHandler:{(response : NSModalResponse) in
          if response == NSAlertSecondButtonReturn { // Discard Change
            self.postEvent ()
          }
        })
      }else{
        alert.runModal ()
      }
    }
    return result
  }

  //····················································································································

  func readInPreferencesWithKey (inKey : String) {
    let ud = NSUserDefaults.standardUserDefaults ()
    let value : AnyObject? = ud.objectForKey (inKey)
    if let unwValue : AnyObject = value where unwValue is NSData {
      let possibleObject : AnyObject? = NSUnarchiver.unarchiveObjectWithData (unwValue as! NSData)
      if let unwPossibleObject : AnyObject = possibleObject where unwPossibleObject is NSFont {
        setProp (unwPossibleObject as! NSFont)
      }
    }
  }

  
  func storeInPreferencesWithKey (inKey : String) {
    let ud = NSUserDefaults.standardUserDefaults ()
    ud.setObject (NSArchiver.archivedDataWithRootObject (mValue), forKey:inKey)
  }

  func storeInDictionary (ioDictionary:NSMutableDictionary, forKey inKey:String) {
    ioDictionary.setValue (NSArchiver.archivedDataWithRootObject (mValue), forKey:inKey)
  }

  func readFromDictionary (inDictionary:NSDictionary, forKey inKey:String) {
    let value : AnyObject? = inDictionary.objectForKey (inKey)
    if let unwValue : AnyObject = value where unwValue is NSData {
      let possibleObject : AnyObject? = NSUnarchiver.unarchiveObjectWithData (unwValue as! NSData)
      if let unwPossibleObject : AnyObject = possibleObject where unwPossibleObject is NSFont {
        setProp (unwPossibleObject as! NSFont)
      }
    }
  }


  //····················································································································
  //    SIGNATURE
  //····················································································································

  final private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil
  final private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol) {
    mSignatureObserver = observer
  }

  //····················································································································

  final private func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = propval.ebHashValue ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBTransientProperty_NSFont
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBTransientProperty_NSFont)
class EBTransientProperty_NSFont : EBReadOnlyProperty_NSFont {
  private var mValueCache : EBProperty <NSFont>? = nil
  var computeFunction : Optional<() -> EBProperty <NSFont>>

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  override var prop : EBProperty <NSFont> {
    get {
      if let unwrappedComputeFunction = computeFunction where mValueCache == nil {
        mValueCache = unwrappedComputeFunction ()
      }
      if mValueCache == nil {
        mValueCache = .noSelection
      }
      return mValueCache!
    }
  }

  //····················································································································

  override func postEvent () {
    if mValueCache != nil {
      mValueCache = nil
      super.postEvent ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBReadOnlyProperty_NSImage (abstract class)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBReadOnlyProperty_NSImage)
class EBReadOnlyProperty_NSImage : EBAbstractProperty {
  var prop : EBProperty <NSImage> { get { return .noSelection } } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBReadWriteProperty_NSImage (abstract class)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBReadWriteProperty_NSImage : EBReadOnlyProperty_NSImage {
  func setProp (inValue : NSImage) { } // Abstract method
  func validateAndSetProp (candidateValue : NSImage, windowForSheet inWindow:NSWindow?) -> Bool {
    return false
  } // Abstract method
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBPropertyProxy_NSImage
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBPropertyProxy_NSImage)
class EBPropertyProxy_NSImage : EBReadWriteProperty_NSImage {
  var readModelFunction : Optional < () -> EBProperty <NSImage> >
  var writeModelFunction : Optional < (NSImage) -> Void >
  var validateAndWriteModelFunction : Optional < (NSImage, NSWindow?) -> Bool >
  
  private var prop_cache : EBProperty <NSImage>?

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  override func postEvent() {
    if prop_cache != nil {
      prop_cache = nil
      super.postEvent()
    }
  }

  //····················································································································

  var mValueExplorer : NSTextField? {
    didSet {
      updateValueExplorer (prop_cache)
    }
  }

  //····················································································································

  private func updateValueExplorer (possibleValue : EBProperty <NSImage>?) {
    if let valueExplorer = mValueExplorer, unwProp = possibleValue {
      switch unwProp {
      case .noSelection :
        valueExplorer.stringValue = "No selection"
      case .multipleSelection :
        valueExplorer.stringValue = "Multiple selection"
      case .singleSelection (let value) :
        valueExplorer.stringValue = value.description
      }
    }else{
      mValueExplorer?.stringValue = "nil"
    }
  }

  //····················································································································

  override var prop : EBProperty <NSImage> {
    get {
      if let unReadModelFunction = readModelFunction where prop_cache == nil {
        prop_cache = unReadModelFunction ()
        updateValueExplorer (prop_cache)
      }
      if prop_cache == nil {
        prop_cache = .noSelection
      }
      return prop_cache!
    }
  }

  //····················································································································
  
  override func setProp (inValue : NSImage) {
    if let unWriteModelFunction = writeModelFunction {
      unWriteModelFunction (inValue)
    }
  }

  //····················································································································

  override func validateAndSetProp (candidateValue : NSImage,
                                    windowForSheet inWindow:NSWindow?) -> Bool {
    var result = false
    if let unwValidateAndWriteModelFunction = validateAndWriteModelFunction {
      result = unwValidateAndWriteModelFunction (candidateValue, inWindow)
    }
    return result
  }
  
  //····················································································································
  
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBStoredProperty_NSImage
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBStoredProperty_NSImage)
final class EBStoredProperty_NSImage : EBReadWriteProperty_NSImage {
  weak var undoManager : NSUndoManager?
  
  //····················································································································

  var mValueExplorer : NSTextField? {
    didSet {
      mValueExplorer?.stringValue = mValue.description
    }
  }

  //····················································································································

  init (_ inValue : NSImage) {
    mValue = inValue
    super.init ()
  }

  //····················································································································

  private var mValue : NSImage {
    didSet {
      if mValue != oldValue {
        mValueExplorer?.stringValue = mValue.description
        undoManager?.registerUndoWithTarget (self, selector:Selector ("performUndo:"), object: oldValue)
        postEvent ()
        clearSignatureCache ()
      }
    }
  }

  //····················································································································

  func performUndo (oldValue : NSImage) {
    mValue = oldValue
  }
  
  //····················································································································

  override var prop : EBProperty <NSImage> { get { return .singleSelection (mValue) } }

  var propval : NSImage { get { return mValue } }

  override func setProp (inValue : NSImage) { mValue = inValue }

  //····················································································································
 
  var validationFunction : (NSImage, NSImage) -> EBValidationResult <NSImage> = defaultValidationFunction

  override func validateAndSetProp (candidateValue : NSImage,
                                    windowForSheet inWindow:NSWindow?) -> Bool {
    let validationResult = validationFunction (propval, candidateValue)
    var result = true
    switch validationResult {
    case EBValidationResult.ok (let validatedValue) :
      setProp (validatedValue)
    case EBValidationResult.rejectWithBeep :
      NSBeep ()
    case EBValidationResult.rejectWithAlert (let informativeText) :
      result = false
      let alert = NSAlert ()
      alert.messageText = String (format:"The value “%@” is invalid.", candidateValue)
      alert.informativeText = informativeText
      alert.addButtonWithTitle ("Ok")
      alert.addButtonWithTitle ("Discard Change")
      if let window = inWindow {
        alert.beginSheetModalForWindow (window, completionHandler:{(response : NSModalResponse) in
          if response == NSAlertSecondButtonReturn { // Discard Change
            self.postEvent ()
          }
        })
      }else{
        alert.runModal ()
      }
    }
    return result
  }

  //····················································································································

  func readInPreferencesWithKey (inKey : String) {
    let ud = NSUserDefaults.standardUserDefaults ()
    let value : AnyObject? = ud.objectForKey (inKey)
    if let unwValue : AnyObject = value where unwValue is NSData {
      let possibleObject : AnyObject? = NSUnarchiver.unarchiveObjectWithData (unwValue as! NSData)
      if let unwPossibleObject : AnyObject = possibleObject where unwPossibleObject is NSImage {
        setProp (unwPossibleObject as! NSImage)
      }
    }
  }

  
  func storeInPreferencesWithKey (inKey : String) {
    let ud = NSUserDefaults.standardUserDefaults ()
    ud.setObject (NSArchiver.archivedDataWithRootObject (mValue), forKey:inKey)
  }

  func storeInDictionary (ioDictionary:NSMutableDictionary, forKey inKey:String) {
    ioDictionary.setValue (NSArchiver.archivedDataWithRootObject (mValue), forKey:inKey)
  }

  func readFromDictionary (inDictionary:NSDictionary, forKey inKey:String) {
    let value : AnyObject? = inDictionary.objectForKey (inKey)
    if let unwValue : AnyObject = value where unwValue is NSData {
      let possibleObject : AnyObject? = NSUnarchiver.unarchiveObjectWithData (unwValue as! NSData)
      if let unwPossibleObject : AnyObject = possibleObject where unwPossibleObject is NSImage {
        setProp (unwPossibleObject as! NSImage)
      }
    }
  }


  //····················································································································
  //    SIGNATURE
  //····················································································································

  final private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil
  final private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol) {
    mSignatureObserver = observer
  }

  //····················································································································

  final private func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = propval.ebHashValue ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBTransientProperty_NSImage
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBTransientProperty_NSImage)
class EBTransientProperty_NSImage : EBReadOnlyProperty_NSImage {
  private var mValueCache : EBProperty <NSImage>? = nil
  var computeFunction : Optional<() -> EBProperty <NSImage>>

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  override var prop : EBProperty <NSImage> {
    get {
      if let unwrappedComputeFunction = computeFunction where mValueCache == nil {
        mValueCache = unwrappedComputeFunction ()
      }
      if mValueCache == nil {
        mValueCache = .noSelection
      }
      return mValueCache!
    }
  }

  //····················································································································

  override func postEvent () {
    if mValueCache != nil {
      mValueCache = nil
      super.postEvent ()
    }
  }

  //····················································································································

}

