//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                          File 'controller-classes.swift'                                            *
//                                         Generated by version 0.0.1 [debug]                                          *
//                                          september 5th, 2014, at 18h29'3"                                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

import Cocoa

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
//   Controller Prefs mFirstName - PMTextField $value                                                                  *
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

@objc(Controller_Prefs_mFirstName_PMTextField_value)
class Controller_Prefs_mFirstName_PMTextField_value : NSObject, PMTriggerProtocol {

  weak var mObject : Prefs? = nil
  weak var mOutlet: PMTextField? = nil
  var mSendContinously : Bool

  //-------------------------------------------------------------------------------------------------------------------*

  init (object : Prefs?, outlet : PMTextField?, file : String, line : Int, sendContinously : Bool) {
    mObject = object
    mOutlet = outlet
    mSendContinously = sendContinously
    super.init ()
    noteObjectAllocation (self)
    if let outlet = mOutlet {
      outlet.target = self
      outlet.action = "action:"
      if outlet.formatter != nil {
        presentErrorWindow (file, line, "the outlet has a formatter")
      }
      if mSendContinously {
        NSNotificationCenter.defaultCenter().addObserver (self,
          selector: "continouslySendAction:",
          name: NSControlTextDidChangeNotification,
          object: mOutlet
        )
      }
    }
    mObject?.addObserverOf_mFirstName (self)
  }

  //-------------------------------------------------------------------------------------------------------------------*
  
  func unregister () {
    if mSendContinously {
      NSNotificationCenter.defaultCenter().removeObserver (self,
        name: NSControlTextDidChangeNotification,
        object: mOutlet
      )
    }
    mOutlet?.target = nil
    mOutlet?.action = nil
    mObject?.removeObserverOf_mFirstName (self)
  }

  //-------------------------------------------------------------------------------------------------------------------*
  
  deinit {
    noteObjectDeallocation (self)
  }
  
  //-------------------------------------------------------------------------------------------------------------------*

  func continouslySendAction (notification : NSNotification) {
    updateModel ()
  }

  //-------------------------------------------------------------------------------------------------------------------*

  func trigger () {
    if (mOutlet != nil) && (mObject != nil) && (mOutlet!.stringValue != mObject!.mFirstName) {
      mOutlet!.stringValue = mObject!.mFirstName
    }
  }

  //-------------------------------------------------------------------------------------------------------------------*

  func action (sender : AnyObject!) {
    updateModel ()
  }

  //-------------------------------------------------------------------------------------------------------------------*

  func updateModel () {
    if (mOutlet != nil) && (mObject != nil) && (mOutlet!.stringValue != mObject!.mFirstName) {
      mObject!.mFirstName = mOutlet!.stringValue
    }
  }

  //-------------------------------------------------------------------------------------------------------------------*

  var mTransientIndex : Int {
    get {
      return kTriggerOutletDisplay
    }
  }

  //-------------------------------------------------------------------------------------------------------------------*

  func noteTransientChanged () {
  }
  
  //-------------------------------------------------------------------------------------------------------------------*
}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
//   Controller Prefs mFullName - PMTextField $value                                                                   *
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

@objc(Controller_Prefs_mFullName_PMTextField_value)
class Controller_Prefs_mFullName_PMTextField_value : NSObject, PMTriggerProtocol {

  weak var mObject : Prefs? = nil
  weak var mOutlet: PMTextField? = nil
  var mSendContinously : Bool

  //-------------------------------------------------------------------------------------------------------------------*

  init (object : Prefs?, outlet : PMTextField?, file : String, line : Int, sendContinously : Bool) {
    mObject = object
    mOutlet = outlet
    mSendContinously = sendContinously
    super.init ()
    noteObjectAllocation (self)
    if let outlet = mOutlet {
      outlet.target = self
      outlet.action = "action:"
      if outlet.formatter != nil {
        presentErrorWindow (file, line, "the outlet has a formatter")
      }
      if mSendContinously {
        NSNotificationCenter.defaultCenter().addObserver (self,
          selector: "continouslySendAction:",
          name: NSControlTextDidChangeNotification,
          object: mOutlet
        )
      }
    }
    mObject?.addObserverOf_mFullName (self)
  }

  //-------------------------------------------------------------------------------------------------------------------*
  
  func unregister () {
    if mSendContinously {
      NSNotificationCenter.defaultCenter().removeObserver (self,
        name: NSControlTextDidChangeNotification,
        object: mOutlet
      )
    }
    mOutlet?.target = nil
    mOutlet?.action = nil
    mObject?.removeObserverOf_mFullName (self)
  }

  //-------------------------------------------------------------------------------------------------------------------*
  
  deinit {
    noteObjectDeallocation (self)
  }
  
  //-------------------------------------------------------------------------------------------------------------------*

  func continouslySendAction (notification : NSNotification) {
    updateModel ()
  }

  //-------------------------------------------------------------------------------------------------------------------*

  func trigger () {
    if (mOutlet != nil) && (mObject != nil) && (mOutlet!.stringValue != mObject!.mFullName) {
      mOutlet!.stringValue = mObject!.mFullName
    }
  }

  //-------------------------------------------------------------------------------------------------------------------*

  func action (sender : AnyObject!) {
    updateModel ()
  }

  //-------------------------------------------------------------------------------------------------------------------*

  func updateModel () {
    if (mOutlet != nil) && (mObject != nil) && (mOutlet!.stringValue != mObject!.mFullName) {
      mObject!.mFullName = mOutlet!.stringValue
    }
  }

  //-------------------------------------------------------------------------------------------------------------------*

  var mTransientIndex : Int {
    get {
      return kTriggerOutletDisplay
    }
  }

  //-------------------------------------------------------------------------------------------------------------------*

  func noteTransientChanged () {
  }
  
  //-------------------------------------------------------------------------------------------------------------------*
}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
//   Controller Prefs mName - PMTextField $value                                                                       *
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

@objc(Controller_Prefs_mName_PMTextField_value)
class Controller_Prefs_mName_PMTextField_value : NSObject, PMTriggerProtocol {

  weak var mObject : Prefs? = nil
  weak var mOutlet: PMTextField? = nil
  var mSendContinously : Bool

  //-------------------------------------------------------------------------------------------------------------------*

  init (object : Prefs?, outlet : PMTextField?, file : String, line : Int, sendContinously : Bool) {
    mObject = object
    mOutlet = outlet
    mSendContinously = sendContinously
    super.init ()
    noteObjectAllocation (self)
    if let outlet = mOutlet {
      outlet.target = self
      outlet.action = "action:"
      if outlet.formatter != nil {
        presentErrorWindow (file, line, "the outlet has a formatter")
      }
      if mSendContinously {
        NSNotificationCenter.defaultCenter().addObserver (self,
          selector: "continouslySendAction:",
          name: NSControlTextDidChangeNotification,
          object: mOutlet
        )
      }
    }
    mObject?.addObserverOf_mName (self)
  }

  //-------------------------------------------------------------------------------------------------------------------*
  
  func unregister () {
    if mSendContinously {
      NSNotificationCenter.defaultCenter().removeObserver (self,
        name: NSControlTextDidChangeNotification,
        object: mOutlet
      )
    }
    mOutlet?.target = nil
    mOutlet?.action = nil
    mObject?.removeObserverOf_mName (self)
  }

  //-------------------------------------------------------------------------------------------------------------------*
  
  deinit {
    noteObjectDeallocation (self)
  }
  
  //-------------------------------------------------------------------------------------------------------------------*

  func continouslySendAction (notification : NSNotification) {
    updateModel ()
  }

  //-------------------------------------------------------------------------------------------------------------------*

  func trigger () {
    if (mOutlet != nil) && (mObject != nil) && (mOutlet!.stringValue != mObject!.mName) {
      mOutlet!.stringValue = mObject!.mName
    }
  }

  //-------------------------------------------------------------------------------------------------------------------*

  func action (sender : AnyObject!) {
    updateModel ()
  }

  //-------------------------------------------------------------------------------------------------------------------*

  func updateModel () {
    if (mOutlet != nil) && (mObject != nil) && (mOutlet!.stringValue != mObject!.mName) {
      mObject!.mName = mOutlet!.stringValue
    }
  }

  //-------------------------------------------------------------------------------------------------------------------*

  var mTransientIndex : Int {
    get {
      return kTriggerOutletDisplay
    }
  }

  //-------------------------------------------------------------------------------------------------------------------*

  func noteTransientChanged () {
  }
  
  //-------------------------------------------------------------------------------------------------------------------*
}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
//   Controller Prefs mUpperCaseFullName - PMTextField $value                                                          *
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

@objc(Controller_Prefs_mUpperCaseFullName_PMTextField_value)
class Controller_Prefs_mUpperCaseFullName_PMTextField_value : NSObject, PMTriggerProtocol {

  weak var mObject : Prefs? = nil
  weak var mOutlet: PMTextField? = nil
  var mSendContinously : Bool

  //-------------------------------------------------------------------------------------------------------------------*

  init (object : Prefs?, outlet : PMTextField?, file : String, line : Int, sendContinously : Bool) {
    mObject = object
    mOutlet = outlet
    mSendContinously = sendContinously
    super.init ()
    noteObjectAllocation (self)
    if let outlet = mOutlet {
      outlet.target = self
      outlet.action = "action:"
      if outlet.formatter != nil {
        presentErrorWindow (file, line, "the outlet has a formatter")
      }
      if mSendContinously {
        NSNotificationCenter.defaultCenter().addObserver (self,
          selector: "continouslySendAction:",
          name: NSControlTextDidChangeNotification,
          object: mOutlet
        )
      }
    }
    mObject?.addObserverOf_mUpperCaseFullName (self)
  }

  //-------------------------------------------------------------------------------------------------------------------*
  
  func unregister () {
    if mSendContinously {
      NSNotificationCenter.defaultCenter().removeObserver (self,
        name: NSControlTextDidChangeNotification,
        object: mOutlet
      )
    }
    mOutlet?.target = nil
    mOutlet?.action = nil
    mObject?.removeObserverOf_mUpperCaseFullName (self)
  }

  //-------------------------------------------------------------------------------------------------------------------*
  
  deinit {
    noteObjectDeallocation (self)
  }
  
  //-------------------------------------------------------------------------------------------------------------------*

  func continouslySendAction (notification : NSNotification) {
    updateModel ()
  }

  //-------------------------------------------------------------------------------------------------------------------*

  func trigger () {
    if (mOutlet != nil) && (mObject != nil) && (mOutlet!.stringValue != mObject!.mUpperCaseFullName) {
      mOutlet!.stringValue = mObject!.mUpperCaseFullName
    }
  }

  //-------------------------------------------------------------------------------------------------------------------*

  func action (sender : AnyObject!) {
    updateModel ()
  }

  //-------------------------------------------------------------------------------------------------------------------*

  func updateModel () {
    if (mOutlet != nil) && (mObject != nil) && (mOutlet!.stringValue != mObject!.mUpperCaseFullName) {
      mObject!.mUpperCaseFullName = mOutlet!.stringValue
    }
  }

  //-------------------------------------------------------------------------------------------------------------------*

  var mTransientIndex : Int {
    get {
      return kTriggerOutletDisplay
    }
  }

  //-------------------------------------------------------------------------------------------------------------------*

  func noteTransientChanged () {
  }
  
  //-------------------------------------------------------------------------------------------------------------------*
}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2



