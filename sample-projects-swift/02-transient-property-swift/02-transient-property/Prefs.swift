//-----------------------------------------------------------------------------*
//                                                                             *
//                             File 'Prefs.swift'                              *
//                     Generated by version 0.0.1 [debug]                      *
//                       august 7th, 2014, at 17h24'44"                        *
//                                                                             *
//-----------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//-------------------------------------------------------------------------------------------------------------------*

import Cocoa

//-------------------------------------------------------------------------------------------------------------------*

var g_Prefs : Prefs? = nil

//----------------------------------------------------------------------------*

@objc (Prefs) class Prefs : NSObject {
  //-------------------------------------------------------------------------------------------------------------------*
  //    Outlets                                                                                                        *
  //-------------------------------------------------------------------------------------------------------------------*

  @IBOutlet var mNameTextField : NSTextField?
  @IBOutlet var mFirstNameTextField : NSTextField?
  @IBOutlet var mFullNameTextField : NSTextField?
  @IBOutlet var mUpperCaseFullNameTextField : NSTextField?

  //-------------------------------------------------------------------------------------------------------------------*
  //    Attribute: mName                                                                                               *
  //-------------------------------------------------------------------------------------------------------------------*

  var mName_observers = NSMutableSet ()
  var mName : String = "Amédée" {
    didSet {
      if mName != oldValue {
        for anyObject in mName_observers {
          let object = anyObject as PMTriggerProtocol
          enterTriggerWithObject (object)
        }
      }
    }
  }

  func addObserverOf_mName (inObserver : PMTriggerProtocol) {
    mName_observers.addObject (inObserver)
    enterTriggerWithObject (inObserver)
  }
 
  func removeObserverOf_mName (inObserver : PMTriggerProtocol) {
    mName_observers.removeObject (inObserver)
    enterTriggerWithObject (inObserver)
  }


  //-------------------------------------------------------------------------------------------------------------------*
  //    Attribute: mFirstName                                                                                          *
  //-------------------------------------------------------------------------------------------------------------------*

  var mFirstName_observers = NSMutableSet ()
  var mFirstName : String = "Schmurtz" {
    didSet {
      if mFirstName != oldValue {
        for anyObject in mFirstName_observers {
          let object = anyObject as PMTriggerProtocol
          enterTriggerWithObject (object)
        }
      }
    }
  }

  func addObserverOf_mFirstName (inObserver : PMTriggerProtocol) {
    mFirstName_observers.addObject (inObserver)
    enterTriggerWithObject (inObserver)
  }
 
  func removeObserverOf_mFirstName (inObserver : PMTriggerProtocol) {
    mFirstName_observers.removeObject (inObserver)
    enterTriggerWithObject (inObserver)
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    Transient: mFullName                                                                                           *
  //-------------------------------------------------------------------------------------------------------------------*

  var mFullName_observers = NSMutableSet ()
  var mFullName__cache : String?
  var mFullName : String {
    if mFullName__cache == nil {
      if TRACE_TRANSIENT_TRIGGER {
        NSLog ("Compute transient Prefs.mFullName")
      }
      mFullName__cache = compute_Prefs_mFullName (mName, mFirstName) ;
    }
    return mFullName__cache!
  }

  func preference_2E_Prefs_2E_mFullName_didChange () {
    self.willChangeValueForKey ("mFullName")
    self.didChangeValueForKey  ("mFullName")
     for anyObject in mFullName_observers {
        let object = anyObject as PMTriggerProtocol
        enterTriggerWithObject (object)
      }
  }
 
   func addObserverOf_mFullName (inObserver : PMTriggerProtocol) {
    mFullName_observers.addObject (inObserver)
    enterTriggerWithObject (inObserver)
  }
 
  func removeObserverOf_mFullName (inObserver : PMTriggerProtocol) {
    mFullName_observers.removeObject (inObserver)
    enterTriggerWithObject (inObserver)
  }

  var triggerObjectFor_preference_2E_Prefs_2E_mFullName__cache : PMTrigger_preference_2E_Prefs_2E_mFullName? = nil
  var triggerObjectFor_preference_2E_Prefs_2E_mFullName : PMTrigger_preference_2E_Prefs_2E_mFullName {
    if !triggerObjectFor_preference_2E_Prefs_2E_mFullName__cache {
      triggerObjectFor_preference_2E_Prefs_2E_mFullName__cache = PMTrigger_preference_2E_Prefs_2E_mFullName (object:self)
    }
    return triggerObjectFor_preference_2E_Prefs_2E_mFullName__cache!
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    Transient: mUpperCaseFullName                                                                                  *
  //-------------------------------------------------------------------------------------------------------------------*

  var mUpperCaseFullName_observers = NSMutableSet ()
  var mUpperCaseFullName__cache : String?
  var mUpperCaseFullName : String {
    if mUpperCaseFullName__cache == nil {
      if TRACE_TRANSIENT_TRIGGER {
        NSLog ("Compute transient Prefs.mUpperCaseFullName")
      }
      mUpperCaseFullName__cache = compute_Prefs_mUpperCaseFullName (mFullName) ;
    }
    return mUpperCaseFullName__cache!
  }

  func preference_2E_Prefs_2E_mUpperCaseFullName_didChange () {
    self.willChangeValueForKey ("mUpperCaseFullName")
    self.didChangeValueForKey  ("mUpperCaseFullName")
     for anyObject in mUpperCaseFullName_observers {
        let object = anyObject as PMTriggerProtocol
        enterTriggerWithObject (object)
      }
  }
 
   func addObserverOf_mUpperCaseFullName (inObserver : PMTriggerProtocol) {
    mUpperCaseFullName_observers.addObject (inObserver)
    enterTriggerWithObject (inObserver)
  }
 
  func removeObserverOf_mUpperCaseFullName (inObserver : PMTriggerProtocol) {
    mUpperCaseFullName_observers.removeObject (inObserver)
    enterTriggerWithObject (inObserver)
  }

  var triggerObjectFor_preference_2E_Prefs_2E_mUpperCaseFullName__cache : PMTrigger_preference_2E_Prefs_2E_mUpperCaseFullName? = nil
  var triggerObjectFor_preference_2E_Prefs_2E_mUpperCaseFullName : PMTrigger_preference_2E_Prefs_2E_mUpperCaseFullName {
    if !triggerObjectFor_preference_2E_Prefs_2E_mUpperCaseFullName__cache {
      triggerObjectFor_preference_2E_Prefs_2E_mUpperCaseFullName__cache = PMTrigger_preference_2E_Prefs_2E_mUpperCaseFullName (object:self)
    }
    return triggerObjectFor_preference_2E_Prefs_2E_mUpperCaseFullName__cache!
  }


  //-------------------------------------------------------------------------------------------------------------------*
  //    Arraies                                                                                                        *
  //-------------------------------------------------------------------------------------------------------------------*


  //-------------------------------------------------------------------------------------------------------------------*
  //    Init                                                                                                           *
  //-------------------------------------------------------------------------------------------------------------------*

  init () {
    super.init ()
    noteObjectAllocation (self) ;
    g_Prefs = self ;
     var ud = NSUserDefaults.standardUserDefaults ()
  //---
    var value : AnyObject?
    value = ud.objectForKey ("Prefs:mName")
    if value {
      mName = value as NSString
    }
    value = ud.objectForKey ("Prefs:mFirstName")
    if value {
      mFirstName = value as NSString
    }
  //---
    NSNotificationCenter.defaultCenter ().addObserver (self,
     selector:"applicationWillTerminateAction:",
     name:NSApplicationWillTerminateNotification,
     object:nil
    )
  //--- Register trigger objects
    addObserverOf_mName (triggerObjectFor_preference_2E_Prefs_2E_mFullName)
    addObserverOf_mFirstName (triggerObjectFor_preference_2E_Prefs_2E_mFullName)
    addObserverOf_mFullName (triggerObjectFor_preference_2E_Prefs_2E_mUpperCaseFullName)
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    awakeFromNib                                                                                                   *
  //-------------------------------------------------------------------------------------------------------------------*

  override func awakeFromNib () {
  //--- check mNameTextField' outlet not nil
    if nil == mNameTextField {
      presentErrorWindow (__FILE__, __LINE__, "the 'mNameTextField' outlet is nil") ;
    }
    mNameTextField?.bind ("value",
      toObject:self,
      withKeyPath:"mName",
      options:nil
    )
  //--- check mFirstNameTextField' outlet not nil
    if nil == mFirstNameTextField {
      presentErrorWindow (__FILE__, __LINE__, "the 'mFirstNameTextField' outlet is nil") ;
    }
    mFirstNameTextField?.bind ("value",
      toObject:self,
      withKeyPath:"mFirstName",
      options:nil
    )
  //--- check mFullNameTextField' outlet not nil
    if nil == mFullNameTextField {
      presentErrorWindow (__FILE__, __LINE__, "the 'mFullNameTextField' outlet is nil") ;
    }
    mFullNameTextField?.bind ("value",
      toObject:self,
      withKeyPath:"mFullName",
      options:nil
    )
  //--- check mUpperCaseFullNameTextField' outlet not nil
    if nil == mUpperCaseFullNameTextField {
      presentErrorWindow (__FILE__, __LINE__, "the 'mUpperCaseFullNameTextField' outlet is nil") ;
    }
    mUpperCaseFullNameTextField?.bind ("value",
      toObject:self,
      withKeyPath:"mUpperCaseFullName",
      options:nil
    )
  }
  
  //-------------------------------------------------------------------------------------------------------------------*
  //    deinit                                                                                                         *
  //-------------------------------------------------------------------------------------------------------------------*

  deinit {
    noteObjectDeallocation (self) ;
  }
  
  //-------------------------------------------------------------------------------------------------------------------*
  //    applicationWillTerminateAction                                                                                 *
  //-------------------------------------------------------------------------------------------------------------------*

  func applicationWillTerminateAction (NSNotification) {
    var ud = NSUserDefaults.standardUserDefaults ()
    ud.setObject (mName, forKey:"Prefs:mName")
    ud.setObject (mFirstName, forKey:"Prefs:mFirstName")
  }

  //-------------------------------------------------------------------------------------------------------------------*

}

//---------------------------------------------------------------------------------------------------------------------*
//--- START OF USER ZONE 2


//--- END OF USER ZONE 2



