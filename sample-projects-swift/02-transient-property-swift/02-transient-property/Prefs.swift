//-----------------------------------------------------------------------------*
//                                                                             *
//                             File 'Prefs.swift'                              *
//                     Generated by version 0.0.1 [debug]                      *
//                       august 4th, 2014, at 14h59'0"                         *
//                                                                             *
//-----------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//----------------------------------------------------------------------------*

import Cocoa

//----------------------------------------------------------------------------*

var g_Prefs : Prefs? = nil

//----------------------------------------------------------------------------*

@objc (Prefs) class Prefs : NSObject,
                                   protocol_preference_2E_Prefs_2E_mFullName,
                                   protocol_preference_2E_Prefs_2E_mUpperCaseFullName {
  //-----------------------------------------------------------------------------*
  //    Outlets                                                                  *
  //-----------------------------------------------------------------------------*

  @IBOutlet var mNameTextField : NSTextField?
  @IBOutlet var mFirstNameTextField : NSTextField?
  @IBOutlet var mFullNameTextField : NSTextField?
  @IBOutlet var mUpperCaseFullNameTextField : NSTextField?

  //-----------------------------------------------------------------------------*
  //    Attribute: mName                                                         *
  //-----------------------------------------------------------------------------*

  var mName_observers = NSMutableSet ()
  var mName : String = "Amédée" {
    didSet {
      if mName != oldValue {
        mName_observers.makeObjectsPerformSelector ("preference_2E_Prefs_2E_mName_didChange")
      //--- Trigger 'mFullName transient'
        if mFullName__cache != nil {
          mFullName__cache = nil
          enterTriggerForObject_preference_2E_Prefs_2E_mFullName (self)
        }
      //--- Trigger 'mUpperCaseFullName transient'
        if mUpperCaseFullName__cache != nil {
          mUpperCaseFullName__cache = nil
          enterTriggerForObject_preference_2E_Prefs_2E_mUpperCaseFullName (self)
        }
      }
    }
  }

  func addObserverOf_mName (inObserver : AnyObject) {
    mName_observers.addObject (inObserver)
    NSApp.sendAction ("preference_2E_Prefs_2E_mName_didChange", to:inObserver, from:self)
  }
 
  func removeObserverOf_mName (inObserver : AnyObject) {
    mName_observers.removeObject (inObserver)
    NSApp.sendAction ("preference_2E_Prefs_2E_mName_didChange", to:inObserver, from:self)
  }


  //-----------------------------------------------------------------------------*
  //    Attribute: mFirstName                                                    *
  //-----------------------------------------------------------------------------*

  var mFirstName_observers = NSMutableSet ()
  var mFirstName : String = "Schmurtz" {
    didSet {
      if mFirstName != oldValue {
        mFirstName_observers.makeObjectsPerformSelector ("preference_2E_Prefs_2E_mFirstName_didChange")
      //--- Trigger 'mFullName transient'
        if mFullName__cache != nil {
          mFullName__cache = nil
          enterTriggerForObject_preference_2E_Prefs_2E_mFullName (self)
        }
      //--- Trigger 'mUpperCaseFullName transient'
        if mUpperCaseFullName__cache != nil {
          mUpperCaseFullName__cache = nil
          enterTriggerForObject_preference_2E_Prefs_2E_mUpperCaseFullName (self)
        }
      }
    }
  }

  func addObserverOf_mFirstName (inObserver : AnyObject) {
    mFirstName_observers.addObject (inObserver)
    NSApp.sendAction ("preference_2E_Prefs_2E_mFirstName_didChange", to:inObserver, from:self)
  }
 
  func removeObserverOf_mFirstName (inObserver : AnyObject) {
    mFirstName_observers.removeObject (inObserver)
    NSApp.sendAction ("preference_2E_Prefs_2E_mFirstName_didChange", to:inObserver, from:self)
  }

  //-----------------------------------------------------------------------------*
  //    Transient: mFullName                                                     *
  //-----------------------------------------------------------------------------*

  var mFullName__cache : String?
  var mFullName : String {
    if mFullName__cache == nil {
      mFullName__cache = compute_Prefs_mFullName (mName, mFirstName) ;
    }
    return mFullName__cache!
  }

  func preference_2E_Prefs_2E_mFullName_didChange () {
    self.willChangeValueForKey ("mFullName")
    self.didChangeValueForKey  ("mFullName")
  }
 
  //-----------------------------------------------------------------------------*
  //    Transient: mUpperCaseFullName                                            *
  //-----------------------------------------------------------------------------*

  var mUpperCaseFullName__cache : String?
  var mUpperCaseFullName : String {
    if mUpperCaseFullName__cache == nil {
      mUpperCaseFullName__cache = compute_Prefs_mUpperCaseFullName (mFullName) ;
    }
    return mUpperCaseFullName__cache!
  }

  func preference_2E_Prefs_2E_mUpperCaseFullName_didChange () {
    self.willChangeValueForKey ("mUpperCaseFullName")
    self.didChangeValueForKey  ("mUpperCaseFullName")
  }
 

  //------------------------------------------------------- Arraies


  //------------------------------------------------------- Init
  init () {
    super.init ()
    noteObjectAllocation (self) ;
    g_Prefs = self ;
     var ud = NSUserDefaults.standardUserDefaults ()
  //---
    var value : AnyObject?
    value = ud.objectForKey ("Prefs:mName")
    if value {
      mName = value as NSString
    }
    value = ud.objectForKey ("Prefs:mFirstName")
    if value {
      mFirstName = value as NSString
    }
  //---
    NSNotificationCenter.defaultCenter ().addObserver (self,
     selector:"applicationWillTerminateAction:",
     name:NSApplicationWillTerminateNotification,
     object:nil
    )
  }

  //------------------------------------------------------- awakeFromNib
  override func awakeFromNib () {
  //--- check mNameTextField' outlet not nil
    if nil == mNameTextField {
      presentErrorWindow (__FILE__, __LINE__, "the 'mNameTextField' outlet is nil") ;
    }
    mNameTextField?.bind ("value",
      toObject:self,
      withKeyPath:"mName",
      options:nil
    )
  //--- check mFirstNameTextField' outlet not nil
    if nil == mFirstNameTextField {
      presentErrorWindow (__FILE__, __LINE__, "the 'mFirstNameTextField' outlet is nil") ;
    }
    mFirstNameTextField?.bind ("value",
      toObject:self,
      withKeyPath:"mFirstName",
      options:nil
    )
  //--- check mFullNameTextField' outlet not nil
    if nil == mFullNameTextField {
      presentErrorWindow (__FILE__, __LINE__, "the 'mFullNameTextField' outlet is nil") ;
    }
    mFullNameTextField?.bind ("value",
      toObject:self,
      withKeyPath:"mFullName",
      options:nil
    )
  //--- check mUpperCaseFullNameTextField' outlet not nil
    if nil == mUpperCaseFullNameTextField {
      presentErrorWindow (__FILE__, __LINE__, "the 'mUpperCaseFullNameTextField' outlet is nil") ;
    }
    mUpperCaseFullNameTextField?.bind ("value",
      toObject:self,
      withKeyPath:"mUpperCaseFullName",
      options:nil
    )
  }
  
  //------------------------------------------------------- deinit
  deinit {
    noteObjectDeallocation (self) ;
  }
  
   //------------------------------------------------------- applicationWillTerminateAction
  func applicationWillTerminateAction (NSNotification) {
    var ud = NSUserDefaults.standardUserDefaults ()
    ud.setObject (mName, forKey:"Prefs:mName")
    ud.setObject (mFirstName, forKey:"Prefs:mFirstName")
  }

}

//----------------------------------------------------------------------------*

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2



