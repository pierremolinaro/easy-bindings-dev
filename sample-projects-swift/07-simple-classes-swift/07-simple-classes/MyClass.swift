//-----------------------------------------------------------------------------*
//                                                                             *
//                            File 'MyClass.swift'                             *
//                         Generated by version 0.0.1                          *
//                       august 7th, 2014, at 18h23'59"                        *
//                                                                             *
//-----------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

import Cocoa

//----------------------------------------------------------------------------*

@objc(MyClass) class MyClass : NSObject {

  //-------------------------------------------------------------------------------------------------------------------*
  //    Attribute: myBool                                                                                              *
  //-------------------------------------------------------------------------------------------------------------------*

  var myBool__explorer : NSTextField?
  var myBool_observers = NSMutableSet ()

  var myBool : Bool =  true {
    didSet {
      if myBool__explorer {
        myBool__explorer!.stringValue = myBool ? "true" : "false"
      }
    //--- Notify observers
      for anyObject in myBool_observers.allObjects {
        let object = anyObject as PMTriggerProtocol
        enterTriggerWithObject (object)
      }
    }
  }

  func addObserverOf_myBool (inObserver : PMTriggerProtocol) {
    myBool_observers.addObject (inObserver)
    enterTriggerWithObject (inObserver)
  }

  func removeObserverOf_myBool (inObserver : PMTriggerProtocol) {
    myBool_observers.removeObject (inObserver)
    enterTriggerWithObject (inObserver)
  }
  //-------------------------------------------------------------------------------------------------------------------*
  //    Attribute: myInteger                                                                                           *
  //-------------------------------------------------------------------------------------------------------------------*

  var myInteger__explorer : NSTextField?
  var myInteger_observers = NSMutableSet ()

  var myInteger__as__number : NSNumber {
    get {
      return NSNumber (longLong:myInteger)
    }
    set {
      myInteger = newValue.longLongValue
    }
  }

  var myInteger : Int64 =  0 {
    didSet {
      if myInteger__explorer {
        myInteger__explorer!.stringValue = NSString (format:"%lld", myInteger)
      }
    //--- Notify observers
      for anyObject in myInteger_observers.allObjects {
        let object = anyObject as PMTriggerProtocol
        enterTriggerWithObject (object)
      }
    }
  }

  func addObserverOf_myInteger (inObserver : PMTriggerProtocol) {
    myInteger_observers.addObject (inObserver)
    enterTriggerWithObject (inObserver)
  }

  func removeObserverOf_myInteger (inObserver : PMTriggerProtocol) {
    myInteger_observers.removeObject (inObserver)
    enterTriggerWithObject (inObserver)
  }
  //-------------------------------------------------------------------------------------------------------------------*
  //    Attribute: myString                                                                                            *
  //-------------------------------------------------------------------------------------------------------------------*

  var myString__explorer : NSTextField?
  var myString_observers = NSMutableSet ()

  var myString : String =  "azerty" {
    didSet {
      if myString__explorer {
        myString__explorer!.stringValue = myString
      }
    //--- Notify observers
      for anyObject in myString_observers.allObjects {
        let object = anyObject as PMTriggerProtocol
        enterTriggerWithObject (object)
      }
    }
  }

  func addObserverOf_myString (inObserver : PMTriggerProtocol) {
    myString_observers.addObject (inObserver)
    enterTriggerWithObject (inObserver)
  }

  func removeObserverOf_myString (inObserver : PMTriggerProtocol) {
    myString_observers.removeObject (inObserver)
    enterTriggerWithObject (inObserver)
  }
  //-------------------------------------------------------------------------------------------------------------------*
  //    Transient: schmurtz                                                                                            *
  //-------------------------------------------------------------------------------------------------------------------*

  var schmurtz_observers = NSMutableSet ()
  var schmurtz__cache : String?
  var schmurtz : String {
    if schmurtz__cache == nil {
      if TRACE_TRANSIENT_TRIGGER {
        NSLog ("Compute transient MyClass.schmurtz")
      }
      schmurtz__cache = compute_MyClass_schmurtz (myInteger, myString) ;
    }
    return schmurtz__cache!
  }

  func class_2E_MyClass_2E_schmurtz_didChange () {
    self.willChangeValueForKey ("schmurtz")
    self.didChangeValueForKey  ("schmurtz")
    for anyObject in schmurtz_observers {
      let object = anyObject as PMTriggerProtocol
      enterTriggerWithObject (object)
    }
  }

   func addObserverOf_schmurtz (inObserver : PMTriggerProtocol) {
    schmurtz_observers.addObject (inObserver)
    enterTriggerWithObject (inObserver)
  }
 
  func removeObserverOf_schmurtz (inObserver : PMTriggerProtocol) {
    schmurtz_observers.removeObject (inObserver)
    enterTriggerWithObject (inObserver)
  }

  var triggerObjectFor_class_2E_MyClass_2E_schmurtz__cache : PMTrigger_class_2E_MyClass_2E_schmurtz? = nil
  var triggerObjectFor_class_2E_MyClass_2E_schmurtz : PMTrigger_class_2E_MyClass_2E_schmurtz {
    if !triggerObjectFor_class_2E_MyClass_2E_schmurtz__cache {
      triggerObjectFor_class_2E_MyClass_2E_schmurtz__cache = PMTrigger_class_2E_MyClass_2E_schmurtz (object:self)
    }
    return triggerObjectFor_class_2E_MyClass_2E_schmurtz__cache!
  }
  
  //-------------------------------------------------------------------------------------------------------------------*
  //    Transient: truc                                                                                                *
  //-------------------------------------------------------------------------------------------------------------------*

  var truc_observers = NSMutableSet ()
  var truc__cache : String?
  var truc : String {
    if truc__cache == nil {
      if TRACE_TRANSIENT_TRIGGER {
        NSLog ("Compute transient MyClass.truc")
      }
      truc__cache = compute_MyClass_truc (schmurtz) ;
    }
    return truc__cache!
  }

  func class_2E_MyClass_2E_truc_didChange () {
    self.willChangeValueForKey ("truc")
    self.didChangeValueForKey  ("truc")
    for anyObject in truc_observers {
      let object = anyObject as PMTriggerProtocol
      enterTriggerWithObject (object)
    }
  }

   func addObserverOf_truc (inObserver : PMTriggerProtocol) {
    truc_observers.addObject (inObserver)
    enterTriggerWithObject (inObserver)
  }
 
  func removeObserverOf_truc (inObserver : PMTriggerProtocol) {
    truc_observers.removeObject (inObserver)
    enterTriggerWithObject (inObserver)
  }

  var triggerObjectFor_class_2E_MyClass_2E_truc__cache : PMTrigger_class_2E_MyClass_2E_truc? = nil
  var triggerObjectFor_class_2E_MyClass_2E_truc : PMTrigger_class_2E_MyClass_2E_truc {
    if !triggerObjectFor_class_2E_MyClass_2E_truc__cache {
      triggerObjectFor_class_2E_MyClass_2E_truc__cache = PMTrigger_class_2E_MyClass_2E_truc (object:self)
    }
    return triggerObjectFor_class_2E_MyClass_2E_truc__cache!
  }
  
  //-------------------------------------------------------------------------------------------------------------------*
  //    init                                                                                                           *
  //-------------------------------------------------------------------------------------------------------------------*

  init () {
    super.init ()
    noteObjectAllocation (self)
  //--- Add Transient observers
    addObserverOf_myInteger (triggerObjectFor_class_2E_MyClass_2E_schmurtz)
    addObserverOf_myString (triggerObjectFor_class_2E_MyClass_2E_schmurtz)
    addObserverOf_schmurtz (triggerObjectFor_class_2E_MyClass_2E_truc)
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    deinit                                                                                                         *
  //-------------------------------------------------------------------------------------------------------------------*

  deinit {
    noteObjectDeallocation (self)
    removeObserverOf_myInteger (triggerObjectFor_class_2E_MyClass_2E_schmurtz)
    removeObserverOf_myString (triggerObjectFor_class_2E_MyClass_2E_schmurtz)
    removeObserverOf_schmurtz (triggerObjectFor_class_2E_MyClass_2E_truc)
  }

  //-------------------------------------------------------------------------------------------------------------------*

}

//----------------------------------------------------------------------------*

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


