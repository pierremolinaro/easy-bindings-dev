//-----------------------------------------------------------------------------*
//                                                                             *
//                            File 'MyClass.swift'                             *
//                     Generated by version 0.0.1 [debug]                      *
//                       august 4th, 2014, at 14h59'36"                        *
//                                                                             *
//-----------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

import Cocoa

//----------------------------------------------------------------------------*

@objc(MyClass) class MyClass : NSObject,
  protocol_class_2E_MyClass_2E_schmurtz,
  protocol_class_2E_MyClass_2E_truc {

  //-------------------------------------------------------------------------------------------------------------------*
  //    Attribute: myBool                                                                                              *
  //-------------------------------------------------------------------------------------------------------------------*

  var myBool__explorer : NSTextField?
  var myBool_observers = NSMutableSet ()

  var myBool : Bool =  true {
    didSet {
      myBool__explorer?.setStringValue (myBool ? "true" : "false")
    //--- Notify observers
      myBool_observers.makeObjectsPerformSelector ("class_2E_MyClass_2E_myBool_didChange")
    }
  }

  func addObserverOf_myBool (inObserver : AnyObject) {
    myBool_observers.addObject (inObserver)
    NSApp.sendAction ("class_2E_MyClass_2E_myBool_didChange", to:inObserver, from:self)
  }

  func removeObserverOf_myBool (inObserver : AnyObject) {
    myBool_observers.removeObject (inObserver)
    NSApp.sendAction ("class_2E_MyClass_2E_myBool_didChange", to:inObserver, from:self)
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    Attribute: myInteger                                                                                           *
  //-------------------------------------------------------------------------------------------------------------------*

  var myInteger__explorer : NSTextField?
  var myInteger_observers = NSMutableSet ()

  var myInteger__as__number : NSNumber {
    get {
      return NSNumber (longLong:myInteger)
    }
    set {
      myInteger = newValue.longLongValue ()
    }
  }

  var myInteger : Int64 =  0 {
    didSet {
      myInteger__explorer?.setStringValue (NSString (format:"%lld", myInteger))
    //--- Notify observers
      myInteger_observers.makeObjectsPerformSelector ("class_2E_MyClass_2E_myInteger_didChange")
      //--- Trigger 'schmurtz transient'
        if schmurtz__cache != nil {
          schmurtz__cache = nil
          enterTriggerForObject_class_2E_MyClass_2E_schmurtz (self)
        }
      //--- Trigger 'truc transient'
        if truc__cache != nil {
          truc__cache = nil
          enterTriggerForObject_class_2E_MyClass_2E_truc (self)
        }
    }
  }

  func addObserverOf_myInteger (inObserver : AnyObject) {
    myInteger_observers.addObject (inObserver)
    NSApp.sendAction ("class_2E_MyClass_2E_myInteger_didChange", to:inObserver, from:self)
  }

  func removeObserverOf_myInteger (inObserver : AnyObject) {
    myInteger_observers.removeObject (inObserver)
    NSApp.sendAction ("class_2E_MyClass_2E_myInteger_didChange", to:inObserver, from:self)
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    Attribute: myString                                                                                            *
  //-------------------------------------------------------------------------------------------------------------------*

  var myString__explorer : NSTextField?
  var myString_observers = NSMutableSet ()

  var myString : String =  "azerty" {
    didSet {
      myString__explorer?.setStringValue (myString)
    //--- Notify observers
      myString_observers.makeObjectsPerformSelector ("class_2E_MyClass_2E_myString_didChange")
      //--- Trigger 'schmurtz transient'
        if schmurtz__cache != nil {
          schmurtz__cache = nil
          enterTriggerForObject_class_2E_MyClass_2E_schmurtz (self)
        }
      //--- Trigger 'truc transient'
        if truc__cache != nil {
          truc__cache = nil
          enterTriggerForObject_class_2E_MyClass_2E_truc (self)
        }
    }
  }

  func addObserverOf_myString (inObserver : AnyObject) {
    myString_observers.addObject (inObserver)
    NSApp.sendAction ("class_2E_MyClass_2E_myString_didChange", to:inObserver, from:self)
  }

  func removeObserverOf_myString (inObserver : AnyObject) {
    myString_observers.removeObject (inObserver)
    NSApp.sendAction ("class_2E_MyClass_2E_myString_didChange", to:inObserver, from:self)
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    Transient: schmurtz                                                                                            *
  //-------------------------------------------------------------------------------------------------------------------*

  var schmurtz__cache : String?
  var schmurtz : String {
    if schmurtz__cache == nil {
      schmurtz__cache = compute_MyClass_schmurtz (myInteger, myString) ;
    }
    return schmurtz__cache!
  }

  func class_2E_MyClass_2E_schmurtz_didChange () {
    self.willChangeValueForKey ("schmurtz")
    self.didChangeValueForKey  ("schmurtz")
  }
  
  //-------------------------------------------------------------------------------------------------------------------*
  //    Transient: truc                                                                                                *
  //-------------------------------------------------------------------------------------------------------------------*

  var truc__cache : String?
  var truc : String {
    if truc__cache == nil {
      truc__cache = compute_MyClass_truc (schmurtz) ;
    }
    return truc__cache!
  }

  func class_2E_MyClass_2E_truc_didChange () {
    self.willChangeValueForKey ("truc")
    self.didChangeValueForKey  ("truc")
  }
  
  //-------------------------------------------------------------------------------------------------------------------*
  //    init                                                                                                           *
  //-------------------------------------------------------------------------------------------------------------------*

  init () {
    super.init ()
    noteObjectAllocation (self)
  //--- Add Transient observers
  }

/*- (instancetype) init {
  self = [super init] ;
  if (self) {
    macroNoteObjectAllocation ;
    myBool = YES ;
    myInteger = 0 ;
    myString = @"azerty" ;
    [self MyClass_did_init] ;
  }
  return self ;
}*/


  //-------------------------------------------------------------------------------------------------------------------*
  //    deinit                                                                                                         *
  //-------------------------------------------------------------------------------------------------------------------*

  deinit {
    noteObjectDeallocation (self)
  }



}

//----------------------------------------------------------------------------*

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


