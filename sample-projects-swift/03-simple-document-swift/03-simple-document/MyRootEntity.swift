//-----------------------------------------------------------------------------*
//                                                                             *
//                         File 'MyRootEntity.swift'                           *
//                     Generated by version 0.0.1 [debug]                      *
//                       august 7th, 2014, at 17h58'29"                        *
//                                                                             *
//-----------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

import Cocoa

//---------------------------------------------------------------------------------------------------------------------*

@objc(MyRootEntity) class MyRootEntity : PMManagedObject {

  //-------------------------------------------------------------------------------------------------------------------*
  //    Attribute: myString                                                                                            *
  //-------------------------------------------------------------------------------------------------------------------*

  var myString__explorer : NSTextField?
  var myString_observers = NSMutableSet ()

  var myString : String =  "Hello" {
    willSet {
      undoManager ().registerUndoWithTarget (self,
        selector:"setMyString:",
        object:myString
      )
    }
    didSet {
      if myString__explorer {
        myString__explorer!.stringValue = myString
      }
    //--- Notify observers
      for anyObject in myString_observers.allObjects {
        let object = anyObject as PMTriggerProtocol
        enterTriggerWithObject (object)
      }
    }
  }

  func addObserverOf_myString (inObserver : PMTriggerProtocol) {
    myString_observers.addObject (inObserver)
    enterTriggerWithObject (inObserver)
  }

  func removeObserverOf_myString (inObserver : PMTriggerProtocol) {
    myString_observers.removeObject (inObserver)
    enterTriggerWithObject (inObserver)
  }
  //-------------------------------------------------------------------------------------------------------------------*
  //    Attribute: myEnumeration                                                                                       *
  //-------------------------------------------------------------------------------------------------------------------*

  var myEnumeration__explorer : NSTextField?
  var myEnumeration_observers = NSMutableSet ()

  var myEnumeration : MonEnumeration = MonEnumeration.deuxieme
  var myEnumeration__as__number : NSNumber {
    get {
      return myEnumeration.toRaw ()
    }
    set {
      undoManager ().registerUndoWithTarget (self,
        selector:"setMyEnumeration__as__number:",
        object:myEnumeration__as__number
      )
      let v : Int? = newValue.integerValue
      myEnumeration = MonEnumeration.fromRaw (v!)!
      if myEnumeration__explorer {
        myEnumeration__explorer!.stringValue = myEnumeration.string ()
      }
    //--- Notify observers
      for anyObject in myEnumeration_observers.allObjects {
        let object = anyObject as PMTriggerProtocol
        enterTriggerWithObject (object)
      }
    }
  }

  func addObserverOf_myEnumeration (inObserver : PMTriggerProtocol) {
    myEnumeration_observers.addObject (inObserver)
    enterTriggerWithObject (inObserver)
  }

  func removeObserverOf_myEnumeration (inObserver : PMTriggerProtocol) {
    myEnumeration_observers.removeObject (inObserver)
    enterTriggerWithObject (inObserver)
  }
  //-------------------------------------------------------------------------------------------------------------------*
  //    Attribute: myColor                                                                                             *
  //-------------------------------------------------------------------------------------------------------------------*

  var myColor__explorer : NSTextField?
  var myColor_observers = NSMutableSet ()

  var myColor : NSColor =  NSColor.yellowColor () {
    willSet {
      undoManager ().registerUndoWithTarget (self,
        selector:"setMyColor:",
        object:myColor
      )
    }
    didSet {
      if myColor__explorer {
        myColor__explorer!.stringValue = myColor.description
      }
    //--- Notify observers
      for anyObject in myColor_observers.allObjects {
        let object = anyObject as PMTriggerProtocol
        enterTriggerWithObject (object)
      }
    }
  }

  func addObserverOf_myColor (inObserver : PMTriggerProtocol) {
    myColor_observers.addObject (inObserver)
    enterTriggerWithObject (inObserver)
  }

  func removeObserverOf_myColor (inObserver : PMTriggerProtocol) {
    myColor_observers.removeObject (inObserver)
    enterTriggerWithObject (inObserver)
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    init                                                                                                           *
  //-------------------------------------------------------------------------------------------------------------------*

  init (entityManager : PMObjectManager) {
    super.init (entityManager:entityManager)
  //--- Register trigger objects
    addObserverOf_myString (triggerObjectFor_entity_2E_MyRootEntity_2E_myStringMaj)
    addObserverOf_myString (triggerObjectFor_entity_2E_MyRootEntity_2E_myStringMin)
    addObserverOf_myStringMaj (triggerObjectFor_entity_2E_MyRootEntity_2E_myStringConcat)
    addObserverOf_myStringMin (triggerObjectFor_entity_2E_MyRootEntity_2E_myStringConcat)
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    deinit                                                                                                         *
  //-------------------------------------------------------------------------------------------------------------------*

  deinit {
  //--- remove trigger objects
    removeObserverOf_myString (triggerObjectFor_entity_2E_MyRootEntity_2E_myStringMaj)
    removeObserverOf_myString (triggerObjectFor_entity_2E_MyRootEntity_2E_myStringMin)
    removeObserverOf_myStringMaj (triggerObjectFor_entity_2E_MyRootEntity_2E_myStringConcat)
    removeObserverOf_myStringMin (triggerObjectFor_entity_2E_MyRootEntity_2E_myStringConcat)
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    populateExplorerWindow                                                                                         *
  //-------------------------------------------------------------------------------------------------------------------*

  override func populateExplorerWindowWithRect (inout ioRect : NSRect, view : NSView) {
    myString__explorer = createEntryForAttributeNamed ("myString", ioRect:&ioRect, view:view)
    if myString__explorer {
      myString__explorer!.stringValue = myString
    }
    myEnumeration__explorer = createEntryForAttributeNamed ("myEnumeration", ioRect:&ioRect, view:view)
    if myEnumeration__explorer {
      myEnumeration__explorer!.stringValue = myEnumeration.string ()
    }
    myColor__explorer = createEntryForAttributeNamed ("myColor", ioRect:&ioRect, view:view)
    if myColor__explorer {
      myColor__explorer!.stringValue = myColor.description
    }
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    clearObjectExplorer                                                                                            *
  //-------------------------------------------------------------------------------------------------------------------*

  override func clearObjectExplorer () {
    myString__explorer = nil
    myEnumeration__explorer = nil
    myColor__explorer = nil
    super.clearObjectExplorer ()
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    saveIntoDictionary                                                                                             *
  //-------------------------------------------------------------------------------------------------------------------*

  override func saveIntoDictionary (ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    ioDictionary.setValue (myString, forKey: "myString")
    ioDictionary.setValue (myEnumeration.toRaw (), forKey: "myEnumeration")
    ioDictionary.setValue (NSArchiver.archivedDataWithRootObject (myColor), forKey: "myColor")
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    setUpWithDictionary                                                                                            *
  //-------------------------------------------------------------------------------------------------------------------*

  override func setUpWithDictionary (inDictionary : NSDictionary,
                                     managedObjectArray : NSArray) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:managedObjectArray)
    myString = inDictionary.readString ("myString")
    myEnumeration = inDictionary.readMonEnumeration ("myEnumeration")
    myColor = inDictionary.readNSColor ("myColor")
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    Transient: myStringMaj                                                                                         *
  //-------------------------------------------------------------------------------------------------------------------*

  var myStringMaj_observers = NSMutableSet ()
  var myStringMaj__cache : String?
  var myStringMaj : String {
    if myStringMaj__cache == nil {
      if TRACE_TRANSIENT_TRIGGER {
        NSLog ("Compute transient MyRootEntity.myStringMaj")
      }
      myStringMaj__cache = compute_MyRootEntity_myStringMaj (myString) ;
    }
    return myStringMaj__cache!
  }

  func entity_2E_MyRootEntity_2E_myStringMaj_didChange () {
    self.willChangeValueForKey ("myStringMaj")
    self.didChangeValueForKey  ("myStringMaj")
    for anyObject in myStringMaj_observers {
      let object = anyObject as PMTriggerProtocol
      enterTriggerWithObject (object)
    }
  }

   func addObserverOf_myStringMaj (inObserver : PMTriggerProtocol) {
    myStringMaj_observers.addObject (inObserver)
    enterTriggerWithObject (inObserver)
  }
 
  func removeObserverOf_myStringMaj (inObserver : PMTriggerProtocol) {
    myStringMaj_observers.removeObject (inObserver)
    enterTriggerWithObject (inObserver)
  }

  var triggerObjectFor_entity_2E_MyRootEntity_2E_myStringMaj__cache : PMTrigger_entity_2E_MyRootEntity_2E_myStringMaj? = nil
  var triggerObjectFor_entity_2E_MyRootEntity_2E_myStringMaj : PMTrigger_entity_2E_MyRootEntity_2E_myStringMaj {
    if !triggerObjectFor_entity_2E_MyRootEntity_2E_myStringMaj__cache {
      triggerObjectFor_entity_2E_MyRootEntity_2E_myStringMaj__cache = PMTrigger_entity_2E_MyRootEntity_2E_myStringMaj (object:self)
    }
    return triggerObjectFor_entity_2E_MyRootEntity_2E_myStringMaj__cache!
  }
 
  //-------------------------------------------------------------------------------------------------------------------*
  //    Transient: myStringMin                                                                                         *
  //-------------------------------------------------------------------------------------------------------------------*

  var myStringMin_observers = NSMutableSet ()
  var myStringMin__cache : String?
  var myStringMin : String {
    if myStringMin__cache == nil {
      if TRACE_TRANSIENT_TRIGGER {
        NSLog ("Compute transient MyRootEntity.myStringMin")
      }
      myStringMin__cache = compute_MyRootEntity_myStringMin (myString) ;
    }
    return myStringMin__cache!
  }

  func entity_2E_MyRootEntity_2E_myStringMin_didChange () {
    self.willChangeValueForKey ("myStringMin")
    self.didChangeValueForKey  ("myStringMin")
    for anyObject in myStringMin_observers {
      let object = anyObject as PMTriggerProtocol
      enterTriggerWithObject (object)
    }
  }

   func addObserverOf_myStringMin (inObserver : PMTriggerProtocol) {
    myStringMin_observers.addObject (inObserver)
    enterTriggerWithObject (inObserver)
  }
 
  func removeObserverOf_myStringMin (inObserver : PMTriggerProtocol) {
    myStringMin_observers.removeObject (inObserver)
    enterTriggerWithObject (inObserver)
  }

  var triggerObjectFor_entity_2E_MyRootEntity_2E_myStringMin__cache : PMTrigger_entity_2E_MyRootEntity_2E_myStringMin? = nil
  var triggerObjectFor_entity_2E_MyRootEntity_2E_myStringMin : PMTrigger_entity_2E_MyRootEntity_2E_myStringMin {
    if !triggerObjectFor_entity_2E_MyRootEntity_2E_myStringMin__cache {
      triggerObjectFor_entity_2E_MyRootEntity_2E_myStringMin__cache = PMTrigger_entity_2E_MyRootEntity_2E_myStringMin (object:self)
    }
    return triggerObjectFor_entity_2E_MyRootEntity_2E_myStringMin__cache!
  }
 
  //-------------------------------------------------------------------------------------------------------------------*
  //    Transient: myStringConcat                                                                                      *
  //-------------------------------------------------------------------------------------------------------------------*

  var myStringConcat_observers = NSMutableSet ()
  var myStringConcat__cache : String?
  var myStringConcat : String {
    if myStringConcat__cache == nil {
      if TRACE_TRANSIENT_TRIGGER {
        NSLog ("Compute transient MyRootEntity.myStringConcat")
      }
      myStringConcat__cache = compute_MyRootEntity_myStringConcat (myStringMaj, myStringMin) ;
    }
    return myStringConcat__cache!
  }

  func entity_2E_MyRootEntity_2E_myStringConcat_didChange () {
    self.willChangeValueForKey ("myStringConcat")
    self.didChangeValueForKey  ("myStringConcat")
    for anyObject in myStringConcat_observers {
      let object = anyObject as PMTriggerProtocol
      enterTriggerWithObject (object)
    }
  }

   func addObserverOf_myStringConcat (inObserver : PMTriggerProtocol) {
    myStringConcat_observers.addObject (inObserver)
    enterTriggerWithObject (inObserver)
  }
 
  func removeObserverOf_myStringConcat (inObserver : PMTriggerProtocol) {
    myStringConcat_observers.removeObject (inObserver)
    enterTriggerWithObject (inObserver)
  }

  var triggerObjectFor_entity_2E_MyRootEntity_2E_myStringConcat__cache : PMTrigger_entity_2E_MyRootEntity_2E_myStringConcat? = nil
  var triggerObjectFor_entity_2E_MyRootEntity_2E_myStringConcat : PMTrigger_entity_2E_MyRootEntity_2E_myStringConcat {
    if !triggerObjectFor_entity_2E_MyRootEntity_2E_myStringConcat__cache {
      triggerObjectFor_entity_2E_MyRootEntity_2E_myStringConcat__cache = PMTrigger_entity_2E_MyRootEntity_2E_myStringConcat (object:self)
    }
    return triggerObjectFor_entity_2E_MyRootEntity_2E_myStringConcat__cache!
  }
 
  //-------------------------------------------------------------------------------------------------------------------*
  //   accessibleObjects                                                                                               *
  //-------------------------------------------------------------------------------------------------------------------*

  override func accessibleObjects (inout objects : NSMutableArray) {
    super.accessibleObjects (&objects)
  }

  //-------------------------------------------------------------------------------------------------------------------*

}

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


