//-----------------------------------------------------------------------------*
//                                                                             *
//                         File 'MyRootEntity.swift'                           *
//                         Generated by version 0.0.1                          *
//                       june 22th, 2014, at 21h10'15"                         *
//                                                                             *
//-----------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

import Cocoa
//-----------------------------------------------------------------------------*

@objc(MyRootEntity) class MyRootEntity : PMManagedEntity {

  //-----------------------------------------------------------------------------*
  //    Attribute: myString                                                      *
  //-----------------------------------------------------------------------------*

  var myString__explorer : NSTextField?
  var myString_observers = NSMutableSet ()
  var myString : String =  "Hello" {
    willSet {
      undoManager ().registerUndoWithTarget (self,
        selector:"setMyString:",
        object:myString
      )
    }
    didSet {
      myString__explorer?.setStringValue (myString)
    //--- Notify observers
      myString_observers.makeObjectsPerformSelector ("entity_2E_MyRootEntity_2E_myString_didChange")
       //--- Trigger 'myStringMaj transient'
        if myStringMaj__cache != nil {
          myStringMaj__cache = nil
          enterTriggerForObject_entity_2E_MyRootEntity_2E_myStringMaj (self)
        }
      //--- Trigger 'myStringMin transient'
        if myStringMin__cache != nil {
          myStringMin__cache = nil
          enterTriggerForObject_entity_2E_MyRootEntity_2E_myStringMin (self)
        }
      //--- Trigger 'myStringConcat transient'
        if myStringConcat__cache != nil {
          myStringConcat__cache = nil
          enterTriggerForObject_entity_2E_MyRootEntity_2E_myStringConcat (self)
        }

     }
  }
  func addObserverOf_myString (inObserver : AnyObject) {
    myString_observers.addObject (inObserver)
    NSApp.sendAction ("entity_2E_MyRootEntity_2E_myString_didChange", to:inObserver, from:self)
  }
  func removeObserverOf_myString (inObserver : AnyObject) {
    myString_observers.removeObject (inObserver)
    NSApp.sendAction ("entity_2E_MyRootEntity_2E_myString_didChange", to:inObserver, from:self)
  }

  //-----------------------------------------------------------------------------*
  //    Attribute: myEnumeration                                                 *
  //-----------------------------------------------------------------------------*

  var myEnumeration__explorer : NSTextField?
  var myEnumeration_observers = NSMutableSet ()
  var myEnumeration : MonEnumeration =  MonEnumeration.deuxieme
  var myEnumeration__as__number : NSNumber {
    get {
      return myEnumeration.toRaw ()
    }
    set {
      undoManager ().registerUndoWithTarget (self,
        selector:"setMyEnumeration__as__number:",
        object:myEnumeration__as__number
      )
      let v : Int? = newValue.integerValue ()
      myEnumeration = MonEnumeration.fromRaw (v!)!
      myEnumeration__explorer?.setStringValue (myEnumeration.string ())
    //--- Notify observers
      myEnumeration_observers.makeObjectsPerformSelector ("entity_2E_MyRootEntity_2E_myEnumeration_didChange")
 
     }
  }

  func addObserverOf_myEnumeration (inObserver : AnyObject) {
    myEnumeration_observers.addObject (inObserver)
    NSApp.sendAction ("entity_2E_MyRootEntity_2E_myEnumeration_didChange", to:inObserver, from:self)
  }
  func removeObserverOf_myEnumeration (inObserver : AnyObject) {
    myEnumeration_observers.removeObject (inObserver)
    NSApp.sendAction ("entity_2E_MyRootEntity_2E_myEnumeration_didChange", to:inObserver, from:self)
  }

  //-----------------------------------------------------------------------------*
  //    Attribute: myColor                                                       *
  //-----------------------------------------------------------------------------*

  var myColor__explorer : NSTextField?
  var myColor_observers = NSMutableSet ()
  var myColor : NSColor =  NSColor.yellowColor () {
    willSet {
      undoManager ().registerUndoWithTarget (self,
        selector:"setMyColor:",
        object:myColor
      )
    }
    didSet {
      myColor__explorer?.setStringValue (myColor.description)
    //--- Notify observers
      myColor_observers.makeObjectsPerformSelector ("entity_2E_MyRootEntity_2E_myColor_didChange")
 
     }
  }
  func addObserverOf_myColor (inObserver : AnyObject) {
    myColor_observers.addObject (inObserver)
    NSApp.sendAction ("entity_2E_MyRootEntity_2E_myColor_didChange", to:inObserver, from:self)
  }
  func removeObserverOf_myColor (inObserver : AnyObject) {
    myColor_observers.removeObject (inObserver)
    NSApp.sendAction ("entity_2E_MyRootEntity_2E_myColor_didChange", to:inObserver, from:self)
  }



  //-----------------------------------------------------------------------------*
  //    init                                                                     *
  //-----------------------------------------------------------------------------*

  init (entityManager : PMEntityManager) {
    super.init (entityManager:entityManager)
  }

  //-----------------------------------------------------------------------------*
  //    populateExplorerWindow                                                   *
  //-----------------------------------------------------------------------------*

  override func populateExplorerWindowWithRect (inout ioRect : NSRect, view : NSView) {
    myString__explorer = createEntryForAttributeNamed ("myString", ioRect:&ioRect, view:view)
    myString__explorer?.setStringValue (myString)
    myEnumeration__explorer = createEntryForAttributeNamed ("myEnumeration", ioRect:&ioRect, view:view)
    myEnumeration__explorer?.setStringValue (myEnumeration.string ())
    myColor__explorer = createEntryForAttributeNamed ("myColor", ioRect:&ioRect, view:view)
    myColor__explorer?.setStringValue (myColor.description)
  }

  //-----------------------------------------------------------------------------*
  //    saveIntoDictionary                                                       *
  //-----------------------------------------------------------------------------*

  override func saveIntoDictionary (ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    ioDictionary.setValue (myString, forKey: "myString")
    ioDictionary.setValue (myEnumeration.toRaw (), forKey: "myEnumeration")
    ioDictionary.setValue (NSArchiver.archivedDataWithRootObject (myColor), forKey: "myColor")
  }

  //---------------------------------------------------------------------------*
  //    setUpWithDictionary                                                    *
  //---------------------------------------------------------------------------*

  override func setUpWithDictionary (inDictionary : NSDictionary,
                                     managedObjectArray : PMManagedEntity []) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:managedObjectArray)
    myString = inDictionary.readString ("myString")
    myEnumeration = inDictionary.readMonEnumeration ("myEnumeration")
    myColor = inDictionary.readNSColor ("myColor")
  }

  //-----------------------------------------------------------------------------*
  //    Transient: myStringMaj                                                   *
  //-----------------------------------------------------------------------------*

  var myStringMaj__cache : String?
  var myStringMaj : String {
    if myStringMaj__cache == nil {
      myStringMaj__cache = compute_MyRootEntity_myStringMaj (self.myString) ;
    }
    return myStringMaj__cache!
  }

  //-----------------------------------------------------------------------------*
  //    Transient: myStringMin                                                   *
  //-----------------------------------------------------------------------------*

  var myStringMin__cache : String?
  var myStringMin : String {
    if myStringMin__cache == nil {
      myStringMin__cache = compute_MyRootEntity_myStringMin (self.myString) ;
    }
    return myStringMin__cache!
  }

  //-----------------------------------------------------------------------------*
  //    Transient: myStringConcat                                                *
  //-----------------------------------------------------------------------------*

  var myStringConcat__cache : String?
  var myStringConcat : String {
    if myStringConcat__cache == nil {
      myStringConcat__cache = compute_MyRootEntity_myStringConcat (self.myStringMaj, self.myStringMin) ;
    }
    return myStringConcat__cache!
  }


}


/*
#import "easy-bindings-utilities.h"
#import "PMAllocationDebug.h"
#import "PMEntityManager.h"
#import "PMRelationshipDescription.h"
#import "PMAttributeDescription.h"
#import "PMApplication.h"
#import "load-store-functions.h"
#import "MyRootEntity.h"
#import "MyRootEntity-transient-computations.h"


//-----------------------------------------------------------------------------*

@implementation MyRootEntity

//-----------------------------------------------------------------------------*
//    Synthesize properties                                                    *
//-----------------------------------------------------------------------------*

//--- Attributes
@synthesize myString ;
@synthesize myEnumeration ;
@synthesize myColor ;

//--- To-one relationships

//--- To-many relationships

//-----------------------------------------------------------------------------*
//    Swizzle setters                                                          *
//-----------------------------------------------------------------------------*

+ (void) load {
  Method original ;
  Method swizzled ;
  original = class_getInstanceMethod (self, @selector (setMyString:)) ;
  swizzled = class_getInstanceMethod (self, @selector (setMyString_swizzled:)) ;
  macroCheckMethodSwizzling (original, swizzled) ;
  method_exchangeImplementations (original, swizzled) ;
  original = class_getInstanceMethod (self, @selector (setMyEnumeration:)) ;
  swizzled = class_getInstanceMethod (self, @selector (setMyEnumeration_swizzled:)) ;
  macroCheckMethodSwizzling (original, swizzled) ;
  method_exchangeImplementations (original, swizzled) ;
  original = class_getInstanceMethod (self, @selector (setMyColor:)) ;
  swizzled = class_getInstanceMethod (self, @selector (setMyColor_swizzled:)) ;
  macroCheckMethodSwizzling (original, swizzled) ;
  method_exchangeImplementations (original, swizzled) ;
}

//-----------------------------------------------------------------------------*
//    newInstanceWithManager:                                                  *
//-----------------------------------------------------------------------------*

+ (MyRootEntity *) newInstanceWithManager: (PMEntityManager *) inManager {
  return [inManager newInstanceOfEntity:[MyRootEntity class]] ;
}

//-----------------------------------------------------------------------------*
//    init                                                                     *
//-----------------------------------------------------------------------------*

- (instancetype) init {
  self = [super init] ;
  if (self) {
  //--- Attribute initialisation
    self.myString = @"Hello" ;
    self.myEnumeration = deuxieme ;
    self.myColor = [NSColor yellowColor] ;
  //--- To many relationship initialisation
  //--- Add Transient observers
  }
  return self ;
}

//-----------------------------------------------------------------------------*
//    buildAttributeDescriptionArray                                           *
//-----------------------------------------------------------------------------*

- (void) buildAttributeDescriptionArray: (NSMutableArray *) ioDescriptionArray {
  [super buildAttributeDescriptionArray:ioDescriptionArray] ;
  [ioDescriptionArray addObject:[PMAttributeDescription descriptionWithAttributeName:@"myString"]] ;
  [ioDescriptionArray addObject:[PMAttributeDescription descriptionWithAttributeName:@"myEnumeration" withConversionFunction:convertMonEnumerationValueToString]] ;
  [ioDescriptionArray addObject:[PMAttributeDescription descriptionWithAttributeName:@"myColor"]] ;
}

//-----------------------------------------------------------------------------*
//    buildToOneRelationshipDescriptionArray                                   *
//-----------------------------------------------------------------------------*

- (void) buildToOneRelationshipDescriptionArray: (NSMutableArray *) ioDescriptionArray {
  [super buildToOneRelationshipDescriptionArray:ioDescriptionArray] ;
}

//-----------------------------------------------------------------------------*
//    buildToManyRelationshipDescriptionArray                                  *
//-----------------------------------------------------------------------------*

- (void) buildToManyRelationshipDescriptionArray: (NSMutableArray *) ioDescriptionArray {
  [super buildToManyRelationshipDescriptionArray:ioDescriptionArray] ;
}

//-----------------------------------------------------------------------------*
//    resetBeforeDeletion                                                      *
//-----------------------------------------------------------------------------*

- (void) resetBeforeDeletion {
//--- Remove Transient observers
  [super resetBeforeDeletion] ;
}

//-----------------------------------------------------------------------------*
//    saveIntoDictionary                                                       *
//-----------------------------------------------------------------------------*

- (void) saveIntoDictionary: (NSMutableDictionary *) ioDictionary {
  [super saveIntoDictionary:ioDictionary] ;
  storeNSStringInDictionary (self.myString, @"myString", ioDictionary) ;
  storeMonEnumerationInDictionary (self.myEnumeration, @"myEnumeration", ioDictionary) ;
  storeNSColorInDictionary (self.myColor, @"myColor", ioDictionary) ;
}

//-----------------------------------------------------------------------------*
//    setUpWithDictionary                                                      *
//-----------------------------------------------------------------------------*

- (void) setUpWithDictionary: (NSDictionary *) inDictionary
         withManagedEntityArray: (NSArray *) inManagedEntityArray {
  [super
    setUpWithDictionary:inDictionary
    withManagedEntityArray:inManagedEntityArray
  ] ;
  self.myString = readNSStringFromDictionary (@"myString", inDictionary) ;
  self.myEnumeration = readMonEnumerationFromDictionary (@"myEnumeration", inDictionary) ;
  self.myColor = readNSColorFromDictionary (@"myColor", inDictionary) ;
}

//-----------------------------------------------------------------------------*
//    setMyString_swizzled       *
//-----------------------------------------------------------------------------*

- (void) setMyString_swizzled: (NSString *) inNewValue {
  if (! ([inNewValue isEqualToString:self.myString])) {
  //--- Register old value in undo manager
    [self.undoManager
      registerUndoWithTarget:self
      selector:@selector (setMyString:)
      object:self.myString
    ] ;
  //--- Store new value
    [self setMyString_swizzled :inNewValue] ;
  //--- Notify observers
    [myString_observers makeObjectsPerformSelector:@selector (entity_2E_MyRootEntity_2E_myString_didChange)] ;
  //--- Trigger 'myStringMaj transient'
    if (myStringMaj__computed) {
      myStringMaj__computed = NO ;
      [PMApplication
        enterTriggerForObject:self
        transientIndex:entity_2E_MyRootEntity_2E_myStringMaj
      ] ;
    }
  //--- Trigger 'myStringMin transient'
    if (myStringMin__computed) {
      myStringMin__computed = NO ;
      [PMApplication
        enterTriggerForObject:self
        transientIndex:entity_2E_MyRootEntity_2E_myStringMin
      ] ;
    }
  //--- Trigger 'myStringConcat transient'
    if (myStringConcat__computed) {
      myStringConcat__computed = NO ;
      [PMApplication
        enterTriggerForObject:self
        transientIndex:entity_2E_MyRootEntity_2E_myStringConcat
      ] ;
    }
  }
}

//-----------------------------------------------------------------------------*
//    setMyEnumeration_swizzled       *
//-----------------------------------------------------------------------------*

- (void) setMyEnumeration_swizzled: (MonEnumeration) inNewValue {
  if (! (inNewValue == self.myEnumeration)) {
  //--- Register old value in undo manager
    [[self.undoManager prepareWithInvocationTarget:self]
      setMyEnumeration:self.myEnumeration
    ] ;
  //--- Store new value
    [self setMyEnumeration_swizzled :inNewValue] ;
  //--- Notify observers
    [myEnumeration_observers makeObjectsPerformSelector:@selector (entity_2E_MyRootEntity_2E_myEnumeration_didChange)] ;
  }
}

//-----------------------------------------------------------------------------*
//    setMyColor_swizzled       *
//-----------------------------------------------------------------------------*

- (void) setMyColor_swizzled: (NSColor *) inNewValue {
  if (! ([inNewValue isEqual:self.myColor])) {
  //--- Register old value in undo manager
    [self.undoManager
      registerUndoWithTarget:self
      selector:@selector (setMyColor:)
      object:self.myColor
    ] ;
  //--- Store new value
    [self setMyColor_swizzled :inNewValue] ;
  //--- Notify observers
    [myColor_observers makeObjectsPerformSelector:@selector (entity_2E_MyRootEntity_2E_myColor_didChange)] ;
  }
}


//-----------------------------------------------------------------------------*
//    myString Observer                                               *
//-----------------------------------------------------------------------------*

- (void) addObserverOf_myString: (NSObject *) inObserver {
  if (nil == myString_observers) {
    myString_observers = [NSMutableSet new] ;
  }
  [myString_observers addObject:inObserver] ;
  #ifdef PM_COCOA_DEBUG
    const BOOL ok =
  #endif
  [NSApp sendAction:@selector (entity_2E_MyRootEntity_2E_myString_didChange) to:inObserver from:self] ;
  macroAssert (ok, @"NSApp sendAction fail", 0, 0) ;
//  [inObserver performSelector:@selector (entity_2E_MyRootEntity_2E_myString_didChange)] ;
}

//-----------------------------------------------------------------------------*

- (void) removeObserverOf_myString: (NSObject *) inObserver {
  [myString_observers removeObject:inObserver] ;
  #ifdef PM_COCOA_DEBUG
    const BOOL ok =
  #endif
  [NSApp sendAction:@selector (entity_2E_MyRootEntity_2E_myString_didChange) to:inObserver from:self] ;
  macroAssert (ok, @"NSApp sendAction fail", 0, 0) ;
//  [inObserver performSelector:@selector (entity_2E_MyRootEntity_2E_myString_didChange)] ;
}


//-----------------------------------------------------------------------------*
//    myEnumeration Observer                                               *
//-----------------------------------------------------------------------------*

- (void) addObserverOf_myEnumeration: (NSObject *) inObserver {
  if (nil == myEnumeration_observers) {
    myEnumeration_observers = [NSMutableSet new] ;
  }
  [myEnumeration_observers addObject:inObserver] ;
  #ifdef PM_COCOA_DEBUG
    const BOOL ok =
  #endif
  [NSApp sendAction:@selector (entity_2E_MyRootEntity_2E_myEnumeration_didChange) to:inObserver from:self] ;
  macroAssert (ok, @"NSApp sendAction fail", 0, 0) ;
//  [inObserver performSelector:@selector (entity_2E_MyRootEntity_2E_myEnumeration_didChange)] ;
}

//-----------------------------------------------------------------------------*

- (void) removeObserverOf_myEnumeration: (NSObject *) inObserver {
  [myEnumeration_observers removeObject:inObserver] ;
  #ifdef PM_COCOA_DEBUG
    const BOOL ok =
  #endif
  [NSApp sendAction:@selector (entity_2E_MyRootEntity_2E_myEnumeration_didChange) to:inObserver from:self] ;
  macroAssert (ok, @"NSApp sendAction fail", 0, 0) ;
//  [inObserver performSelector:@selector (entity_2E_MyRootEntity_2E_myEnumeration_didChange)] ;
}


//-----------------------------------------------------------------------------*
//    myColor Observer                                               *
//-----------------------------------------------------------------------------*

- (void) addObserverOf_myColor: (NSObject *) inObserver {
  if (nil == myColor_observers) {
    myColor_observers = [NSMutableSet new] ;
  }
  [myColor_observers addObject:inObserver] ;
  #ifdef PM_COCOA_DEBUG
    const BOOL ok =
  #endif
  [NSApp sendAction:@selector (entity_2E_MyRootEntity_2E_myColor_didChange) to:inObserver from:self] ;
  macroAssert (ok, @"NSApp sendAction fail", 0, 0) ;
//  [inObserver performSelector:@selector (entity_2E_MyRootEntity_2E_myColor_didChange)] ;
}

//-----------------------------------------------------------------------------*

- (void) removeObserverOf_myColor: (NSObject *) inObserver {
  [myColor_observers removeObject:inObserver] ;
  #ifdef PM_COCOA_DEBUG
    const BOOL ok =
  #endif
  [NSApp sendAction:@selector (entity_2E_MyRootEntity_2E_myColor_didChange) to:inObserver from:self] ;
  macroAssert (ok, @"NSApp sendAction fail", 0, 0) ;
//  [inObserver performSelector:@selector (entity_2E_MyRootEntity_2E_myColor_didChange)] ;
}

//-----------------------------------------------------------------------------*

*/

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


