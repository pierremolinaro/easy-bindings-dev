//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Protocol ValuePropertyProtocol
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ValuePropertyProtocol : Equatable {
  func ebHashValue () -> UInt32
  func convertToNSObject () -> NSObject
  static func convertFromNSObject (object : NSObject) -> Self
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBReadOnlyValueProperty <T>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBReadOnlyValueProperty <T> : EBAbstractProperty {

  var prop : EBProperty <T> { get { return .noSelection } } // Abstract method
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBReadWriteValueProperty <T> (abstract class)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBReadWriteValueProperty <T> : EBReadOnlyValueProperty <T> {
  func setProp (value : T) { } // Abstract method
  func validateAndSetProp (_ candidateValue : T, windowForSheet inWindow:NSWindow?) -> Bool {
    return false
  } // Abstract method
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBPropertyValueProxy <T : ValuePropertyProtocol>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class EBPropertyValueProxy <T : ValuePropertyProtocol> : EBReadWriteValueProperty <T> {
  var readModelFunction : Optional < () -> EBProperty <T> >
  var writeModelFunction : Optional < (T) -> Void >
  var validateAndWriteModelFunction : Optional < (T, NSWindow?) -> Bool >
  
  private var prop_cache : EBProperty <T>?
  
  //····················································································································

  override init () {
    super.init ()
  }
  
  //····················································································································

  var mValueExplorer : NSTextField? {
    didSet {
      updateValueExplorer (possibleValue:prop_cache)
    }
  }

  //····················································································································

  private func updateValueExplorer (possibleValue : EBProperty <T>?) {
    if let valueExplorer = mValueExplorer, unwProp = possibleValue {
      switch unwProp {
      case .noSelection :
        valueExplorer.stringValue = "No selection"
      case .multipleSelection :
        valueExplorer.stringValue = "Multiple selection"
      case .singleSelection (let value) :
        valueExplorer.stringValue = "\(value)"
      }
    }else{
      mValueExplorer?.stringValue = "nil"
    }
  }

  //····················································································································

  override func postEvent () {
    if prop_cache != nil {
      prop_cache = nil
      super.postEvent ()
    }
  }

  //····················································································································

  override var prop : EBProperty <T> {
    get {
      if let unReadModelFunction = readModelFunction where prop_cache == nil {
        prop_cache = unReadModelFunction ()
        updateValueExplorer (possibleValue:prop_cache)
      }
      if prop_cache == nil {
        prop_cache = .noSelection
      }
      return prop_cache!
    }
  }

  //····················································································································
  
  override func setProp (value : T) {
    if let unWriteModelFunction = writeModelFunction {
      unWriteModelFunction (value)
    }
  }

  //····················································································································

  override func validateAndSetProp (_ candidateValue : T,
                                    windowForSheet inWindow:NSWindow?) -> Bool {
    var result = false
    if let unwValidateAndWriteModelFunction = validateAndWriteModelFunction {
      result = unwValidateAndWriteModelFunction (candidateValue, inWindow)
    }
    return result
  }
  
  //····················································································································
  
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBStoredValueProperty <T>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class EBStoredValueProperty <T : ValuePropertyProtocol> : EBReadWriteValueProperty <T> {
  weak var undoManager : UndoManager?

  //····················································································································

  var mValueExplorer : NSTextField? {
    didSet {
      mValueExplorer?.stringValue = "\(mValue)"
    }
  }

  //····················································································································

  init (_ inValue : T) {
    mValue = inValue
    super.init ()
  }

  //····················································································································

  private var mValue : T {
    didSet {
      if mValue != oldValue {
        mValueExplorer?.stringValue = "\(mValue)"
        undoManager?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object: oldValue.convertToNSObject ())
        postEvent ()
        clearSignatureCache ()
      }
    }
  }

  //····················································································································

  func performUndo (_ oldValue : NSNumber) {
    mValue = T.convertFromNSObject (object:oldValue)
  }

  //····················································································································

  override var prop : EBProperty<T> { get { return .singleSelection (mValue) } }

  var propval : T { get { return mValue } }

  override func setProp (value : T) { mValue = value }

  //····················································································································
 
  var validationFunction : (T, T) -> EBValidationResult <T> = defaultValidationFunction
  
  override func validateAndSetProp (_ candidateValue : T,
                                    windowForSheet inWindow:NSWindow?) -> Bool {
    var result = true
    let validationResult = validationFunction (propval, candidateValue)
    switch validationResult {
    case EBValidationResult.ok (let validatedValue) :
      setProp (value: validatedValue)
    case EBValidationResult.rejectWithBeep :
      result = false
      NSBeep ()
    case EBValidationResult.rejectWithAlert (let informativeText) :
      result = false
      let alert = NSAlert ()
      alert.messageText = "The value " + String (candidateValue) + " is invalid."
      alert.informativeText = informativeText
      alert.addButton (withTitle:"Ok")
      alert.addButton (withTitle:"Discard Change")
      if let window = inWindow {
        alert.beginSheetModal (for:window, completionHandler:{(response : NSModalResponse) in
          if response == NSAlertSecondButtonReturn { // Discard Change
            self.postEvent ()
          }
        })
      }else{
        alert.runModal ()
      }
    }
    return result
  }

  //····················································································································

  func readInPreferencesWithKey (inKey : String) {
    let ud = UserDefaults.standard
    let value : AnyObject? = ud.object (forKey:inKey)
    if let unwValue : NSObject = value as? NSObject {
      setProp (value: T.convertFromNSObject (object:unwValue))
    }
  }

  //····················································································································

  func storeInPreferencesWithKey (inKey : String) {
    let ud = UserDefaults.standard
    ud.set (mValue.convertToNSObject (), forKey:inKey)
  }

  //····················································································································

  func storeIn (dictionary:NSMutableDictionary, forKey inKey:String) {
    dictionary.setValue (mValue.convertToNSObject (), forKey:inKey)
  }

  //····················································································································

  func readFrom (dictionary: NSDictionary, forKey inKey:String) {
    let value : AnyObject? = dictionary.object (forKey:inKey)
    if let unwValue : NSObject = value as? NSObject {
      setProp (value: T.convertFromNSObject (object:unwValue))
    }
  }

  //····················································································································
  //    SIGNATURE
  //····················································································································

  final private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil
  final private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol) {
    mSignatureObserver = observer
  }

  //····················································································································

  final private func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = propval.ebHashValue ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBTransientValueProperty <T>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBTransientValueProperty <T> : EBReadOnlyValueProperty <T> {
  private var mValueCache : EBProperty <T>? = nil
  var readModelFunction : Optional<() -> EBProperty <T> >
  
  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  override var prop : EBProperty <T> {
    get {
      if let unwrappedComputeFunction = readModelFunction where mValueCache == nil {
        mValueCache = unwrappedComputeFunction ()
      }
      if mValueCache == nil {
        mValueCache = .noSelection
      }
      return mValueCache!
    }
  }

  //····················································································································

  override func postEvent () {
    if mValueCache != nil {
      mValueCache = nil
      super.postEvent ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    extension String : ValuePropertyProtocol
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extension String : ValuePropertyProtocol {

  //····················································································································

  func ebHashValue () -> UInt32 {
    let possibleData = self.data (using: String.Encoding.utf8)
    if let data = possibleData {
      return data.ebHashValue ()
    }else{
      return 0
    }
  }
  
  //····················································································································

  func convertToNSObject () -> NSObject {
    return self
  }

  //····················································································································

  static func convertFromNSObject (object : NSObject) -> String {
    return object as! String
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    extension Int : ValuePropertyProtocol
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extension Int : ValuePropertyProtocol {

  //····················································································································

  func ebHashValue () -> UInt32 {
    var crc : UInt32 = 0
    var ptr = UnsafePointer <UInt8> ([self])
    for _ in 0 ..< sizeof (Int.self) {
      crc.accumulateByte (ptr.pointee)
      ptr += 1
    }
    return crc
  }
  
  //····················································································································

  func convertToNSObject () -> NSObject {
    return NSNumber (value: self)
  }

  //····················································································································

  static func convertFromNSObject (object : NSObject) -> Int {
    let number = object as! NSNumber
    return number.intValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    extension Double : ValuePropertyProtocol
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extension Double : ValuePropertyProtocol {

  //····················································································································

  func ebHashValue () -> UInt32 {
    let nsValue = NSNumber (value:self)
    let data = NSArchiver.archivedData (withRootObject:nsValue)
    return data.ebHashValue ()
  }

  //····················································································································

  func convertToNSObject () -> NSObject {
    return NSNumber (value: self)
  }

  //····················································································································

  static func convertFromNSObject (object : NSObject) -> Double {
    let number = object as! NSNumber
    return number.doubleValue
  }

  //····················································································································
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    extension Bool : ValuePropertyProtocol
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extension Bool : ValuePropertyProtocol {

  //····················································································································

  func ebHashValue () -> UInt32 {
    var crc : UInt32 = 0
    crc.accumulateByte (self ? 1 : 0)
    return crc
  }

  //····················································································································

  func convertToNSObject () -> NSObject {
    return NSNumber (value: self)
  }

  //····················································································································

  static func convertFromNSObject (object : NSObject) -> Bool {
    let number = object as! NSNumber
    return number.boolValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

public func < (left:Bool, right:Bool) -> Bool {
  return !left && right
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

public func > (left:Bool, right:Bool) -> Bool {
  return left && !right
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    extension NSColor : ClassPropertyProtocol
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extension NSColor : ClassPropertyProtocol {

  //····················································································································

  final func ebHashValue () -> UInt32 {
    let data = NSArchiver.archivedData (withRootObject:self)
    return data.ebHashValue ()
  }

  //····················································································································

  func archiveToNSData () -> NSData {
    return NSArchiver.archivedData (withRootObject:self)
  }
  
  //····················································································································

  static func unarchiveFromNSData (data : NSData) -> NSObject {
    return NSUnarchiver.unarchiveObject (with: data as Data) as! NSObject
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    extension Date : ValuePropertyProtocol
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extension Date : ValuePropertyProtocol {

  //····················································································································

  func ebHashValue () -> UInt32 {
    let data = NSArchiver.archivedData (withRootObject: self)
    return data.ebHashValue ()
  }

  //····················································································································

  func convertToNSObject () -> NSObject {
    return NSArchiver.archivedData (withRootObject: self)
  }
  
  //····················································································································

  static func convertFromNSObject (object : NSObject) -> Date {
    return NSUnarchiver.unarchiveObject (with: object as! Data) as! Date
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    extension NSFont : ClassPropertyProtocol
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extension NSFont : ClassPropertyProtocol {

  //····················································································································

  final func ebHashValue () -> UInt32 {
    let data = NSArchiver.archivedData (withRootObject: self)
    return data.ebHashValue ()
  }

  //····················································································································

  func archiveToNSData () -> NSData {
    return NSArchiver.archivedData (withRootObject: self)
  }
  
  //····················································································································

  static func unarchiveFromNSData (data : NSData) -> NSObject {
    return NSUnarchiver.unarchiveObject (with: data as Data) as! NSObject
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    extension Data : ValuePropertyProtocol
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extension Data : ValuePropertyProtocol {

  //····················································································································

  func ebHashValue () -> UInt32 {
    var crc : UInt32 = 0
    var ptr = UnsafePointer <UInt8> ((self as NSData).bytes)
    for _ in 0 ..< self.count {
      crc.accumulateByte (ptr.pointee)
      ptr += 1
    }
    return crc
  }

  //····················································································································

  func convertToNSObject () -> NSObject {
    return self
  }
  
  //····················································································································

  static func convertFromNSObject (object : NSObject) -> Data {
    return object as! Data
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Protocol ClassPropertyProtocol
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ClassPropertyProtocol : class, Equatable {
  func ebHashValue () -> UInt32
  func archiveToNSData () -> NSData
  static func unarchiveFromNSData (data : NSData) -> NSObject
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBReadOnlyClassProperty <T>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBReadOnlyClassProperty <T> : EBAbstractProperty {

  var prop : EBProperty <T> { get { return .noSelection } } // Abstract method

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBReadWriteClassProperty <T> (abstract class)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBReadWriteClassProperty <T> : EBReadOnlyClassProperty <T> {
  func setProp (value : T) { } // Abstract method
  func validateAndSetProp (_ candidateValue : T, windowForSheet inWindow:NSWindow?) -> Bool {
    return false
  } // Abstract method
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBPropertyClassProxy <T : ClassPropertyProtocol>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class EBPropertyClassProxy <T : ClassPropertyProtocol> : EBReadWriteClassProperty <T> {
  var readModelFunction : Optional < () -> EBProperty <T> >
  var writeModelFunction : Optional < (T) -> Void >
  var validateAndWriteModelFunction : Optional < (T, NSWindow?) -> Bool >
  
  private var prop_cache : EBProperty <T>?
  
  //····················································································································

  override init () {
    super.init ()
  }
  
  //····················································································································

  var mValueExplorer : NSTextField? {
    didSet {
      updateValueExplorer (possibleValue:prop_cache)
    }
  }

  //····················································································································

  private func updateValueExplorer (possibleValue : EBProperty <T>?) {
    if let valueExplorer = mValueExplorer, unwProp = possibleValue {
      switch unwProp {
      case .noSelection :
        valueExplorer.stringValue = "No selection"
      case .multipleSelection :
        valueExplorer.stringValue = "Multiple selection"
      case .singleSelection (let value) :
        valueExplorer.stringValue = "\(value)"
      }
    }else{
      mValueExplorer?.stringValue = "nil"
    }
  }

  //····················································································································

  override func postEvent () {
    if prop_cache != nil {
      prop_cache = nil
      super.postEvent ()
    }
  }

  //····················································································································

  override var prop : EBProperty <T> {
    get {
      if let unReadModelFunction = readModelFunction where prop_cache == nil {
        prop_cache = unReadModelFunction ()
        updateValueExplorer (possibleValue:prop_cache)
      }
      if prop_cache == nil {
        prop_cache = .noSelection
      }
      return prop_cache!
    }
  }

  //····················································································································
  
  override func setProp (value : T) {
    if let unWriteModelFunction = writeModelFunction {
      unWriteModelFunction (value)
    }
  }

  //····················································································································

  override func validateAndSetProp (_ candidateValue : T,
                                    windowForSheet inWindow:NSWindow?) -> Bool {
    var result = false
    if let unwValidateAndWriteModelFunction = validateAndWriteModelFunction {
      result = unwValidateAndWriteModelFunction (candidateValue, inWindow)
    }
    return result
  }
  
  //····················································································································
  
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBStoredClassProperty <T>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class EBStoredClassProperty <T : ClassPropertyProtocol> : EBReadWriteClassProperty <T> {
  weak var undoManager : UndoManager?

  //····················································································································

  var mValueExplorer : NSTextField? {
    didSet {
      mValueExplorer?.stringValue = "\(mValue)"
    }
  }

  //····················································································································

  init (_ inValue : T) {
    mValue = inValue
    super.init ()
  }

  //····················································································································

  private var mValue : T {
    didSet {
      if mValue != oldValue {
        mValueExplorer?.stringValue = "\(mValue)"
        undoManager?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object: oldValue)
        postEvent ()
        clearSignatureCache ()
      }
    }
  }

  //····················································································································

  func performUndo (_ oldValue : NSObject) {
    mValue = oldValue as! T
  }

  //····················································································································

  override var prop : EBProperty<T> { get { return .singleSelection (mValue) } }

  var propval : T { get { return mValue } }

  override func setProp (value : T) { mValue = value }

  //····················································································································
 
  var validationFunction : (T, T) -> EBValidationResult <T> = defaultValidationFunction
  
  override func validateAndSetProp (_ candidateValue : T,
                                    windowForSheet inWindow:NSWindow?) -> Bool {
    var result = true
    let validationResult = validationFunction (propval, candidateValue)
    switch validationResult {
    case EBValidationResult.ok (let validatedValue) :
      setProp (value:validatedValue)
    case EBValidationResult.rejectWithBeep :
      result = false
      NSBeep ()
    case EBValidationResult.rejectWithAlert (let informativeText) :
      result = false
      let alert = NSAlert ()
      alert.messageText = "The value " + String (candidateValue) + " is invalid."
      alert.informativeText = informativeText
      alert.addButton (withTitle:"Ok")
      alert.addButton (withTitle:"Discard Change")
      if let window = inWindow {
        alert.beginSheetModal (for:window, completionHandler:{(response : NSModalResponse) in
          if response == NSAlertSecondButtonReturn { // Discard Change
            self.postEvent ()
          }
        })
      }else{
        alert.runModal ()
      }
    }
    return result
  }

  //····················································································································

  func readInPreferencesWithKey (inKey : String) {
    let ud = UserDefaults.standard
    let value : AnyObject? = ud.object (forKey:inKey)
    if let unwValue : NSData = value as? NSData {
      setProp (value: T.unarchiveFromNSData (data:unwValue) as! T)
    }
  }

  //····················································································································

  func storeInPreferencesWithKey (inKey : String) {
    let ud = UserDefaults.standard
    ud.set (mValue.archiveToNSData (), forKey:inKey)
  }

  //····················································································································

  func storeIn (dictionary:NSMutableDictionary, forKey inKey:String) {
    dictionary.setValue (mValue.archiveToNSData (), forKey:inKey)
  }

  //····················································································································

  func readFrom (dictionary:NSDictionary, forKey inKey:String) {
    let value : AnyObject? = dictionary.object (forKey:inKey)
    if let unwValue : NSData = value as? NSData {
      setProp (value: T.unarchiveFromNSData (data:unwValue) as! T)
    }
  }

  //····················································································································
  //    SIGNATURE
  //····················································································································

  final private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil
  final private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol) {
    mSignatureObserver = observer
  }

  //····················································································································

  final private func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = propval.ebHashValue ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBTransientClassProperty <T>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBTransientClassProperty <T> : EBReadOnlyClassProperty <T> {
  private var mValueCache : EBProperty <T>? = nil
  var readModelFunction : Optional<() -> EBProperty <T> >
  
  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  override var prop : EBProperty <T> {
    get {
      if let unwrappedComputeFunction = readModelFunction where mValueCache == nil {
        mValueCache = unwrappedComputeFunction ()
      }
      if mValueCache == nil {
        mValueCache = .noSelection
      }
      return mValueCache!
    }
  }

  //····················································································································

  override func postEvent () {
    if mValueCache != nil {
      mValueCache = nil
      super.postEvent ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Property Int
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_Int  = EBReadOnlyValueProperty <Int>
typealias EBReadWriteProperty_Int = EBReadWriteValueProperty <Int>
typealias EBPropertyProxy_Int     = EBPropertyValueProxy <Int>
typealias EBStoredProperty_Int    = EBStoredValueProperty <Int>
typealias EBTransientProperty_Int = EBTransientValueProperty <Int>

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func compare_Int (left : EBReadOnlyProperty_Int, right : EBReadOnlyProperty_Int) -> ComparisonResult {
  switch left.prop {
  case .noSelection :
    switch right.prop {
    case .noSelection :
      return .orderedSame
    default:
      return .orderedAscending
    }
  case .multipleSelection :
    switch right.prop {
    case .noSelection :
      return .orderedDescending
    case .multipleSelection :
      return .orderedSame
   case .singleSelection (_) :
      return .orderedAscending
   }
 case .singleSelection (let currentValue) :
    switch right.prop {
    case .noSelection, .multipleSelection :
      return .orderedDescending
    case .singleSelection (let otherValue) :
      if currentValue < otherValue {
        return .orderedAscending
      }else if currentValue > otherValue {
        return .orderedDescending
      }else{
        return .orderedSame
      }
    }
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Property Bool
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_Bool  = EBReadOnlyValueProperty <Bool>
typealias EBReadWriteProperty_Bool = EBReadWriteValueProperty <Bool>
typealias EBPropertyProxy_Bool     = EBPropertyValueProxy <Bool>
typealias EBStoredProperty_Bool    = EBStoredValueProperty <Bool>
typealias EBTransientProperty_Bool = EBTransientValueProperty <Bool>

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func compare_Bool (left : EBReadOnlyProperty_Bool, right : EBReadOnlyProperty_Bool) -> ComparisonResult {
  switch left.prop {
  case .noSelection :
    switch right.prop {
    case .noSelection :
      return .orderedSame
    default:
      return .orderedAscending
    }
  case .multipleSelection :
    switch right.prop {
    case .noSelection :
      return .orderedDescending
    case .multipleSelection :
      return .orderedSame
   case .singleSelection (_) :
      return .orderedAscending
   }
 case .singleSelection (let currentValue) :
    switch right.prop {
    case .noSelection, .multipleSelection :
      return .orderedDescending
    case .singleSelection (let otherValue) :
      if currentValue < otherValue {
        return .orderedAscending
      }else if currentValue > otherValue {
        return .orderedDescending
      }else{
        return .orderedSame
      }
    }
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Property Double
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_Double  = EBReadOnlyValueProperty <Double>
typealias EBReadWriteProperty_Double = EBReadWriteValueProperty <Double>
typealias EBPropertyProxy_Double     = EBPropertyValueProxy <Double>
typealias EBStoredProperty_Double    = EBStoredValueProperty <Double>
typealias EBTransientProperty_Double = EBTransientValueProperty <Double>

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func compare_Double (left : EBReadOnlyProperty_Double, right : EBReadOnlyProperty_Double) -> ComparisonResult {
  switch left.prop {
  case .noSelection :
    switch right.prop {
    case .noSelection :
      return .orderedSame
    default:
      return .orderedAscending
    }
  case .multipleSelection :
    switch right.prop {
    case .noSelection :
      return .orderedDescending
    case .multipleSelection :
      return .orderedSame
   case .singleSelection (_) :
      return .orderedAscending
   }
 case .singleSelection (let currentValue) :
    switch right.prop {
    case .noSelection, .multipleSelection :
      return .orderedDescending
    case .singleSelection (let otherValue) :
      if currentValue < otherValue {
        return .orderedAscending
      }else if currentValue > otherValue {
        return .orderedDescending
      }else{
        return .orderedSame
      }
    }
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Property String
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_String  = EBReadOnlyValueProperty <String>
typealias EBReadWriteProperty_String = EBReadWriteValueProperty <String>
typealias EBPropertyProxy_String     = EBPropertyValueProxy <String>
typealias EBStoredProperty_String    = EBStoredValueProperty <String>
typealias EBTransientProperty_String = EBTransientValueProperty <String>

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func compare_String (left : EBReadOnlyProperty_String, right : EBReadOnlyProperty_String) -> ComparisonResult {
  switch left.prop {
  case .noSelection :
    switch right.prop {
    case .noSelection :
      return .orderedSame
    default:
      return .orderedAscending
    }
  case .multipleSelection :
    switch right.prop {
    case .noSelection :
      return .orderedDescending
    case .multipleSelection :
      return .orderedSame
   case .singleSelection (_) :
      return .orderedAscending
   }
 case .singleSelection (let currentValue) :
    switch right.prop {
    case .noSelection, .multipleSelection :
      return .orderedDescending
    case .singleSelection (let otherValue) :
      if currentValue < otherValue {
        return .orderedAscending
      }else if currentValue > otherValue {
        return .orderedDescending
      }else{
        return .orderedSame
      }
    }
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Property class NSColor
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_NSColor  = EBReadOnlyClassProperty <NSColor>
typealias EBTransientProperty_NSColor = EBTransientClassProperty <NSColor>
typealias EBReadWriteProperty_NSColor = EBReadWriteClassProperty <NSColor>
typealias EBPropertyProxy_NSColor     = EBPropertyClassProxy <NSColor>
typealias EBStoredProperty_NSColor    = EBStoredClassProperty <NSColor>

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Transient property class NSImage
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_NSImage  = EBReadOnlyClassProperty <NSImage>
typealias EBTransientProperty_NSImage = EBTransientClassProperty <NSImage>
typealias EBReadOnlyPropertyArray_NSImage  = EBReadOnlyClassProperty <[NSImage]>
typealias EBTransientPropertyArray_NSImage = EBTransientClassProperty <[NSImage]>

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Property Date
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_Date  = EBReadOnlyValueProperty <Date>
typealias EBReadWriteProperty_Date = EBReadWriteValueProperty <Date>
typealias EBPropertyProxy_Date     = EBPropertyValueProxy <Date>
typealias EBStoredProperty_Date    = EBStoredValueProperty <Date>
typealias EBTransientProperty_Date = EBTransientValueProperty <Date>

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func compare_Date (left : EBReadOnlyProperty_Date, right : EBReadOnlyProperty_Date) -> ComparisonResult {
  switch left.prop {
  case .noSelection :
    switch right.prop {
    case .noSelection :
      return .orderedSame
    default:
      return .orderedAscending
    }
  case .multipleSelection :
    switch right.prop {
    case .noSelection :
      return .orderedDescending
    case .multipleSelection :
      return .orderedSame
   case .singleSelection (_) :
      return .orderedAscending
   }
 case .singleSelection (let currentValue) :
    switch right.prop {
    case .noSelection, .multipleSelection :
      return .orderedDescending
    case .singleSelection (let otherValue) :
      if currentValue < otherValue {
        return .orderedAscending
      }else if currentValue > otherValue {
        return .orderedDescending
      }else{
        return .orderedSame
      }
    }
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Property class NSFont
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_NSFont  = EBReadOnlyClassProperty <NSFont>
typealias EBTransientProperty_NSFont = EBTransientClassProperty <NSFont>
typealias EBReadWriteProperty_NSFont = EBReadWriteClassProperty <NSFont>
typealias EBPropertyProxy_NSFont     = EBPropertyClassProxy <NSFont>
typealias EBStoredProperty_NSFont    = EBStoredClassProperty <NSFont>

