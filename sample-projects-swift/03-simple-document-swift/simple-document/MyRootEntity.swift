//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: MyRootEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class MyRootEntity : EBManagedObject,
  MyRootEntity_myString,
  MyRootEntity_myColor,
  MyRootEntity_myStringMaj,
  MyRootEntity_myStringMin,
  MyRootEntity_myStringConcat {

  //····················································································································
  //   Accessing myString stored property
  //····················································································································

  var myString : String {
    get {
      return self.myString_property.propval
    }
    set {
      self.myString_property.setProp (newValue)
    }
  }

  var myString_property_selection : EBSelection <String> {
    get {
      return self.myString_property.prop
    }
  }

  //····················································································································
  //   Accessing myColor stored property
  //····················································································································

  var myColor : NSColor {
    get {
      return self.myColor_property.propval
    }
    set {
      self.myColor_property.setProp (newValue)
    }
  }

  var myColor_property_selection : EBSelection <NSColor> {
    get {
      return self.myColor_property.prop
    }
  }

  //····················································································································
  //   Accessing myStringMaj transient property
  //····················································································································

  var myStringMaj_property_selection : EBSelection <String> {
    get {
      return self.myStringMaj_property.prop
    }
  }

  var myStringMaj : EBSelection <String> {
    get {
      return myStringMaj_property_selection
    }
  }

  //····················································································································
  //   Accessing myStringMin transient property
  //····················································································································

  var myStringMin_property_selection : EBSelection <String> {
    get {
      return self.myStringMin_property.prop
    }
  }

  var myStringMin : EBSelection <String> {
    get {
      return myStringMin_property_selection
    }
  }

  //····················································································································
  //   Accessing myStringConcat transient property
  //····················································································································

  var myStringConcat_property_selection : EBSelection <String> {
    get {
      return self.myStringConcat_property.prop
    }
  }

  var myStringConcat : EBSelection <String> {
    get {
      return myStringConcat_property_selection
    }
  }

  //····················································································································
  //    Stored Properties
  //····················································································································

  var myString_property = EBStoredProperty_String ("Hello")
  var myColor_property = EBStoredProperty_NSColor (NSColor.yellow)

  //····················································································································
  //    Transient properties
  //····················································································································

  var myStringMaj_property = EBTransientProperty_String ()
  var myStringMin_property = EBTransientProperty_String ()
  var myStringConcat_property = EBTransientProperty_String ()

  //····················································································································
  //    Relationships
  //····················································································································


  //····················································································································
  //    init
  //····················································································································

  override init (managedObjectContext : EBManagedObjectContext) {
    super.init (managedObjectContext:managedObjectContext)
  //--- Install compute functions for transients
    self.myStringMaj_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.myString_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.myString_property_selection) {
          case (.single (let v0)) :
            return .single (compute_MyRootEntity_myStringMaj (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.myStringMin_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.myString_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.myString_property_selection) {
          case (.single (let v0)) :
            return .single (compute_MyRootEntity_myStringMin (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.myStringConcat_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.myStringMaj_property_selection.kind ()
        kind &= unwSelf.myStringMin_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.myStringMaj_property_selection, unwSelf.myStringMin_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (compute_MyRootEntity_myStringConcat (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
  //--- Install property observers for transients
    self.myString_property.addEBObserver (self.myStringMaj_property)
    self.myString_property.addEBObserver (self.myStringMin_property)
    self.myStringMaj_property.addEBObserver (self.myStringConcat_property)
    self.myStringMin_property.addEBObserver (self.myStringConcat_property)
  //--- Install undoers for properties
    self.myString_property.undoManager = undoManager ()
    self.myColor_property.undoManager = undoManager ()
  //--- Install owner for relationships
  //--- register properties for handling signature
  }

  //····················································································································

  deinit {
  //--- Remove observers
    self.myString_property.removeEBObserver (self.myStringMaj_property)
    self.myString_property.removeEBObserver (self.myStringMin_property)
    self.myStringMaj_property.removeEBObserver (self.myStringConcat_property)
    self.myStringMin_property.removeEBObserver (self.myStringConcat_property)
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "myString",
      idx:self.myString_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.myString_property.mObserverExplorer,
      valueExplorer:&self.myString_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "myColor",
      idx:self.myColor_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.myColor_property.mObserverExplorer,
      valueExplorer:&self.myColor_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "myStringMaj",
      idx:self.myStringMaj_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.myStringMaj_property.mObserverExplorer,
      valueExplorer:&self.myStringMaj_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "myStringMin",
      idx:self.myStringMin_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.myStringMin_property.mObserverExplorer,
      valueExplorer:&self.myStringMin_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "myStringConcat",
      idx:self.myStringConcat_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.myStringConcat_property.mObserverExplorer,
      valueExplorer:&self.myStringConcat_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
    self.myString_property.mObserverExplorer = nil
    self.myString_property.mValueExplorer = nil
    self.myColor_property.mObserverExplorer = nil
    self.myColor_property.mValueExplorer = nil
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    self.myString_property.storeIn (dictionary: ioDictionary, forKey: "myString")
    self.myColor_property.storeIn (dictionary: ioDictionary, forKey: "myColor")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
    self.myString_property.readFrom (dictionary: inDictionary, forKey:"myString")
    self.myColor_property.readFrom (dictionary: inDictionary, forKey:"myColor")
  }

  //····················································································································
  //   cascadeObjectRemoving
  //····················································································································

  override func cascadeObjectRemoving (_ ioObjectsToRemove : inout Set <EBManagedObject>) {
    super.cascadeObjectRemoving (&ioObjectsToRemove)
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_MyRootEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_MyRootEntity : ReadOnlyAbstractArrayProperty <MyRootEntity> {

  //····················································································································
  //   Observers of 'myString' stored property
  //····················································································································

  private var mObserversOf_myString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_myString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_myString.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.myString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_myString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_myString.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.myString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_myString_toElementsOfSet (_ inSet : Set<MyRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_myString {
        managedObject.myString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_myString_fromElementsOfSet (_ inSet : Set<MyRootEntity>) {
    for observer in mObserversOf_myString {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.myString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'myColor' stored property
  //····················································································································

  private var mObserversOf_myColor = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_myColor (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_myColor.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.myColor_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_myColor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_myColor.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.myColor_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_myColor_toElementsOfSet (_ inSet : Set<MyRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_myColor {
        managedObject.myColor_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_myColor_fromElementsOfSet (_ inSet : Set<MyRootEntity>) {
    for observer in mObserversOf_myColor {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.myColor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'myStringMaj' transient property
  //····················································································································

  private var mObserversOf_myStringMaj = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_myStringMaj (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_myStringMaj.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.myStringMaj_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_myStringMaj (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_myStringMaj.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.myStringMaj_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_myStringMaj_toElementsOfSet (_ inSet : Set<MyRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_myStringMaj {
        managedObject.myStringMaj_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_myStringMaj_fromElementsOfSet (_ inSet : Set<MyRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_myStringMaj {
        managedObject.myStringMaj_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'myStringMin' transient property
  //····················································································································

  private var mObserversOf_myStringMin = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_myStringMin (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_myStringMin.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.myStringMin_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_myStringMin (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_myStringMin.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.myStringMin_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_myStringMin_toElementsOfSet (_ inSet : Set<MyRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_myStringMin {
        managedObject.myStringMin_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_myStringMin_fromElementsOfSet (_ inSet : Set<MyRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_myStringMin {
        managedObject.myStringMin_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'myStringConcat' transient property
  //····················································································································

  private var mObserversOf_myStringConcat = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_myStringConcat (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_myStringConcat.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.myStringConcat_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_myStringConcat (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_myStringConcat.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.myStringConcat_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_myStringConcat_toElementsOfSet (_ inSet : Set<MyRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_myStringConcat {
        managedObject.myStringConcat_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_myStringConcat_fromElementsOfSet (_ inSet : Set<MyRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_myStringConcat {
        managedObject.myStringConcat_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_MyRootEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_MyRootEntity : ReadOnlyArrayOf_MyRootEntity {

  var readModelFunction : Optional<() -> EBSelection < [MyRootEntity] > >

  private var prop_cache : EBSelection < [MyRootEntity] >? 

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <MyRootEntity> ()

  override var prop : EBSelection < [MyRootEntity] > {
    get {
      if let unwrappedComputeFunction = readModelFunction, prop_cache == nil {
        prop_cache = unwrappedComputeFunction ()
        let newSet : Set <MyRootEntity>
        switch prop_cache! {
        case .multiple, .empty :
          newSet = Set <MyRootEntity> ()
        case .single (let array) :
          newSet = Set (array)
        }
     //--- Removed object set
        let removedSet = mSet.subtracting (newSet)
      //--- Remove observers of stored properties
        removeEBObserversOf_myString_fromElementsOfSet (removedSet)
        removeEBObserversOf_myColor_fromElementsOfSet (removedSet)
      //--- Remove observers of transient properties
        removeEBObserversOf_myStringMaj_fromElementsOfSet (removedSet)
        removeEBObserversOf_myStringMin_fromElementsOfSet (removedSet)
        removeEBObserversOf_myStringConcat_fromElementsOfSet (removedSet)
      //--- Added object set
        let addedSet = newSet.subtracting (mSet)
       //--- Add observers of stored properties
        addEBObserversOf_myString_toElementsOfSet (addedSet)
        addEBObserversOf_myColor_toElementsOfSet (addedSet)
       //--- Add observers of transient properties
        addEBObserversOf_myStringMaj_toElementsOfSet (addedSet)
        addEBObserversOf_myStringMin_toElementsOfSet (addedSet)
        addEBObserversOf_myStringConcat_toElementsOfSet (addedSet)
      //--- Update object set
        mSet = newSet
      }
      if prop_cache == nil {
        prop_cache = .empty
      }
      return prop_cache!
    }
  }

  //····················································································································

  override func postEvent () {
    if prop_cache != nil {
      prop_cache = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MyRootEntity_myString : class {
  var myString : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MyRootEntity_myColor : class {
  var myColor : NSColor { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MyRootEntity_myStringMaj : class {
  var myStringMaj : EBSelection < String > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MyRootEntity_myStringMin : class {
  var myStringMin : EBSelection < String > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MyRootEntity_myStringConcat : class {
  var myStringConcat : EBSelection < String > { get }
}


//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

