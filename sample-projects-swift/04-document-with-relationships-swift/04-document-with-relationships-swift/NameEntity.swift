//-----------------------------------------------------------------------------*
//                                                                             *
//                          File 'NameEntity.swift'                            *
//                         Generated by version 0.0.1                          *
//                       june 29th, 2014, at 22h28'21"                         *
//                                                                             *
//-----------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

import Cocoa
//-----------------------------------------------------------------------------*

@objc(NameEntity) class NameEntity : PMManagedEntity {

  //-----------------------------------------------------------------------------*
  //    Attribute: name                                                          *
  //-----------------------------------------------------------------------------*

  var name__explorer : NSTextField?
  var name_observers = NSMutableSet ()
  var name : String =  "Name" {
    willSet {
      undoManager ().registerUndoWithTarget (self,
        selector:"setName:",
        object:name
      )
    }
    didSet {
      name__explorer?.setStringValue (name)
    //--- Notify observers
       name_observers.makeObjectsPerformSelector ("entity_2E_NameEntity_2E_name_didChange")
    }
  }

  func addObserverOf_name (inObserver : AnyObject) {
    name_observers.addObject (inObserver)
    NSApp.sendAction ("entity_2E_NameEntity_2E_name_didChange", to:inObserver, from:self)
  }
  func removeObserverOf_name (inObserver : AnyObject) {
    name_observers.removeObject (inObserver)
    NSApp.sendAction ("entity_2E_NameEntity_2E_name_didChange", to:inObserver, from:self)
  }

  //-----------------------------------------------------------------------------*
  //    Attribute: aValue                                                        *
  //-----------------------------------------------------------------------------*

  var aValue__explorer : NSTextField?
  var aValue_observers = NSMutableSet ()
  var aValue : Int64 =  123 {
    willSet {
      undoManager ().registerUndoWithTarget (self,
        selector:"setAValue:",
        object:NSNumber (longLong:aValue)
      )
    }
    didSet {
      aValue__explorer?.setStringValue (NSString (format:"%lld", aValue))
    //--- Notify observers
       aValue_observers.makeObjectsPerformSelector ("entity_2E_NameEntity_2E_aValue_didChange")
    }
  }

  func addObserverOf_aValue (inObserver : AnyObject) {
    aValue_observers.addObject (inObserver)
    NSApp.sendAction ("entity_2E_NameEntity_2E_aValue_didChange", to:inObserver, from:self)
  }
  func removeObserverOf_aValue (inObserver : AnyObject) {
    aValue_observers.removeObject (inObserver)
    NSApp.sendAction ("entity_2E_NameEntity_2E_aValue_didChange", to:inObserver, from:self)
  }



  //-----------------------------------------------------------------------------*
  //    To one relationship: mRoot                                               *
  //-----------------------------------------------------------------------------*
  var mRoot_observers = NSMutableSet ()
  var mRoot : MyRootEntity? = nil {
    didSet {
      if oldValue != mRoot {
      //--- Register old value in undo manager
       // [[self.undoManager prepareWithInvocationTarget:self setMRoot:currentObject]
      //--- Set opposite relation ship
        oldValue?.removeObjectFromMNames (self)
        mRoot?.appendToMNames (self)
      }
    }
  }
   
  func addObserverOf_mRoot (inObserver : AnyObject) {
    mRoot_observers.addObject (inObserver)
    NSApp.sendAction ("entity_2E_NameEntity_2E_mRoot_didChange", to:inObserver, from:self)
  }

  func removeObserverOf_mRoot (inObserver : AnyObject) {
    mRoot_observers.removeObject (inObserver)
    NSApp.sendAction ("entity_2E_NameEntity_2E_mRoot_didChange", to:inObserver, from:self)
  }


  //-----------------------------------------------------------------------------*
  //    init                                                                     *
  //-----------------------------------------------------------------------------*

  init (entityManager : PMEntityManager) {
    super.init (entityManager:entityManager)
  }

  //-----------------------------------------------------------------------------*
  //    populateExplorerWindow                                                   *
  //-----------------------------------------------------------------------------*

  override func populateExplorerWindowWithRect (inout ioRect : NSRect, view : NSView) {
    name__explorer = createEntryForAttributeNamed ("name", ioRect:&ioRect, view:view)
    name__explorer?.setStringValue (name)
    aValue__explorer = createEntryForAttributeNamed ("aValue", ioRect:&ioRect, view:view)
    aValue__explorer?.setStringValue (NSString (format:"%lld", aValue))
  }

  //-----------------------------------------------------------------------------*
  //    clearContextExplorer                                                     *
  //-----------------------------------------------------------------------------*

  override func clearContextExplorer () {
    name__explorer = nil
    aValue__explorer = nil
    super.clearContextExplorer ()
  }

  //-----------------------------------------------------------------------------*
  //    saveIntoDictionary                                                       *
  //-----------------------------------------------------------------------------*

  override func saveIntoDictionary (ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    ioDictionary.setValue (name, forKey: "name")
    ioDictionary.setValue (NSNumber (longLong:aValue), forKey: "aValue")
  }

  //---------------------------------------------------------------------------*
  //    setUpWithDictionary                                                    *
  //---------------------------------------------------------------------------*

  override func setUpWithDictionary (inDictionary : NSDictionary,
                                     managedObjectArray : PMManagedEntity []) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:managedObjectArray)
    name = inDictionary.readString ("name")
    aValue = inDictionary.readInt64 ("aValue")
  }


}

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


