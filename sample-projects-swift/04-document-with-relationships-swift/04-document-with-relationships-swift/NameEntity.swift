//-----------------------------------------------------------------------------*
//                                                                             *
//                          File 'NameEntity.swift'                            *
//                     Generated by version 0.0.1 [debug]                      *
//                       august 7th, 2014, at 17h58'40"                        *
//                                                                             *
//-----------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

import Cocoa

//---------------------------------------------------------------------------------------------------------------------*

@objc(NameEntity) class NameEntity : PMManagedObject {

  //-------------------------------------------------------------------------------------------------------------------*
  //    Attribute: name                                                                                                *
  //-------------------------------------------------------------------------------------------------------------------*

  var name__explorer : NSTextField?
  var name_observers = NSMutableSet ()

  var name : String =  "Name" {
    willSet {
      undoManager ().registerUndoWithTarget (self,
        selector:"setName:",
        object:name
      )
    }
    didSet {
      if name__explorer {
        name__explorer!.stringValue = name
      }
    //--- Notify observers
      for anyObject in name_observers.allObjects {
        let object = anyObject as PMTriggerProtocol
        enterTriggerWithObject (object)
      }
    }
  }

  func addObserverOf_name (inObserver : PMTriggerProtocol) {
    name_observers.addObject (inObserver)
    enterTriggerWithObject (inObserver)
  }

  func removeObserverOf_name (inObserver : PMTriggerProtocol) {
    name_observers.removeObject (inObserver)
    enterTriggerWithObject (inObserver)
  }
  //-------------------------------------------------------------------------------------------------------------------*
  //    Attribute: aValue                                                                                              *
  //-------------------------------------------------------------------------------------------------------------------*

  var aValue__explorer : NSTextField?
  var aValue_observers = NSMutableSet ()

  var aValue__as__number : NSNumber {
    get {
      return NSNumber (longLong:aValue)
    }
    set {
      aValue = newValue.longLongValue
    }
  }

  var aValue : Int64 =  123 {
    willSet {
      undoManager ().registerUndoWithTarget (self,
        selector:"setAValue__as__number:",
        object:aValue__as__number
      )
    }
    didSet {
      if aValue__explorer {
        aValue__explorer!.stringValue = NSString (format:"%lld", aValue)
      }
    //--- Notify observers
      for anyObject in aValue_observers.allObjects {
        let object = anyObject as PMTriggerProtocol
        enterTriggerWithObject (object)
      }
    }
  }

  func addObserverOf_aValue (inObserver : PMTriggerProtocol) {
    aValue_observers.addObject (inObserver)
    enterTriggerWithObject (inObserver)
  }

  func removeObserverOf_aValue (inObserver : PMTriggerProtocol) {
    aValue_observers.removeObject (inObserver)
    enterTriggerWithObject (inObserver)
  }
  //-------------------------------------------------------------------------------------------------------------------*
  //    To one relationship: mRoot                                                                                     *
  //-------------------------------------------------------------------------------------------------------------------*

  var mRoot_observers = NSMutableSet ()
  var mRoot__explorer : NSButton?
  weak var mRoot : MyRootEntity? = nil {
    didSet {
 //     if oldValue != mRoot {
      //--- Register old value in undo manager
        undoManager ().registerUndoWithTarget (self, selector:"setMRoot:", object:oldValue)
      //--- Update explorer
        if mRoot__explorer != nil {
          updateManagedObjectToOneRelationshipDisplayForKey ("mRoot", button : mRoot__explorer!)
        }
      //--- Set opposite relation ship
        oldValue?.removeObjectFromMNames (self)
        mRoot?.appendToMNames (self)
      }
//    }
  }
   
  func addObserverOf_mRoot (inObserver : AnyObject) {
    mRoot_observers.addObject (inObserver)
    NSApp.sendAction ("entity_2E_NameEntity_2E_mRoot_didChange", to:inObserver, from:self)
  }

  func removeObserverOf_mRoot (inObserver : AnyObject) {
    mRoot_observers.removeObject (inObserver)
    NSApp.sendAction ("entity_2E_NameEntity_2E_mRoot_didChange", to:inObserver, from:self)
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    init                                                                                                           *
  //-------------------------------------------------------------------------------------------------------------------*

  init (entityManager : PMObjectManager) {
    super.init (entityManager:entityManager)
  //--- Register trigger objects
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    deinit                                                                                                         *
  //-------------------------------------------------------------------------------------------------------------------*

  deinit {
  //--- remove trigger objects
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    populateExplorerWindow                                                                                         *
  //-------------------------------------------------------------------------------------------------------------------*

  override func populateExplorerWindowWithRect (inout ioRect : NSRect, view : NSView) {
    name__explorer = createEntryForAttributeNamed ("name", ioRect:&ioRect, view:view)
    if name__explorer {
      name__explorer!.stringValue = name
    }
    aValue__explorer = createEntryForAttributeNamed ("aValue", ioRect:&ioRect, view:view)
    if aValue__explorer {
      aValue__explorer!.stringValue = NSString (format:"%lld", aValue)
    }
   mRoot__explorer = createEntryForToOneRelationshipNamed ("mRoot", ioRect: &ioRect, view: view)
   updateManagedObjectToOneRelationshipDisplayForKey ("mRoot",button:mRoot__explorer!)
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    clearObjectExplorer                                                                                            *
  //-------------------------------------------------------------------------------------------------------------------*

  override func clearObjectExplorer () {
    name__explorer = nil
    aValue__explorer = nil
    mRoot__explorer = nil
    super.clearObjectExplorer ()
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    saveIntoDictionary                                                                                             *
  //-------------------------------------------------------------------------------------------------------------------*

  override func saveIntoDictionary (ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    ioDictionary.setValue (name, forKey: "name")
    ioDictionary.setValue (NSNumber (longLong:aValue), forKey: "aValue")
    storeEntityInDictionary (mRoot, inRelationshipName:"mRoot", ioDictionary:ioDictionary) ;
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    setUpWithDictionary                                                                                            *
  //-------------------------------------------------------------------------------------------------------------------*

  override func setUpWithDictionary (inDictionary : NSDictionary,
                                     managedObjectArray : NSArray) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:managedObjectArray)
    name = inDictionary.readString ("name")
    aValue = inDictionary.readInt64 ("aValue")
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //   accessibleObjects                                                                                               *
  //-------------------------------------------------------------------------------------------------------------------*

  override func accessibleObjects (inout objects : NSMutableArray) {
    super.accessibleObjects (&objects)
    if mRoot != nil {
      objects.addObject (mRoot!)
    }
  }

  //-------------------------------------------------------------------------------------------------------------------*

}

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


