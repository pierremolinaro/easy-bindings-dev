//-----------------------------------------------------------------------------*
//                                                                             *
//                         File 'MyRootEntity.swift'                           *
//                     Generated by version 0.0.1 [debug]                      *
//                       august 7th, 2014, at 20h4'36"                         *
//                                                                             *
//-----------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

import Cocoa

//---------------------------------------------------------------------------------------------------------------------*

@objc(MyRootEntity) class MyRootEntity : PMManagedObject {

  //-------------------------------------------------------------------------------------------------------------------*
  //    To many relationship: mNames                                                                                   *
  //-------------------------------------------------------------------------------------------------------------------*

  var mNames_observers = NSMutableSet ()
  var mNames__explorer : NSPopUpButton?
  var mNames : NSMutableArray = NSMutableArray () { // Set of NameEntity entities
    didSet {
      if (oldValue !== mNames) {
      //--- Register old value in undo manager
        undoManager ().registerUndoWithTarget (self, selector:"setMNames", object:oldValue)
      //--- Update explorer
        if mNames__explorer != nil {
          updateManagedObjectToManyRelationshipDisplayForKey ("mNames", popUpButton:mNames__explorer!)
        }
      //--- Removed object set
        var removedObjectSet = NSMutableSet ()
        removedObjectSet.addObjectsFromArray (oldValue)
        removedObjectSet.minusSet (NSSet (array:mNames))
        for object : AnyObject in removedObjectSet {
          let managedObject = object as NameEntity
          managedObject.mRoot = nil ;
        }
      //--- Added object set
        var addedObjectSet = NSMutableSet ()
        addedObjectSet.addObjectsFromArray (mNames)
        addedObjectSet.minusSet (NSSet (array:oldValue))
        for object : AnyObject in addedObjectSet {
          let managedObject = object as NameEntity
          managedObject.mRoot = self
        }
      //--- Notify observers object count did change
        for anyObject in mNames_observers {
          let object = anyObject as PMTriggerProtocol
          enterTriggerWithObject (object)
        }
      }
    }
  }

  func insertObject (inObject : NameEntity,
                     inMNamesAtIndex: Int) {
    let idx : Int = mNames.indexOfObject (inObject)
    if idx == NSNotFound {
      mNames.insertObject (inObject, atIndex:inMNamesAtIndex)
        undoManager ().registerUndoWithTarget (self,
        selector:"removeObjectFromMNames:",
        object:inObject
      )
      inObject.mRoot = self
    //--- Update explorer
      if mNames__explorer != nil {
        updateManagedObjectToManyRelationshipDisplayForKey ("mNames", popUpButton:mNames__explorer!)
      }
    }else if idx != inMNamesAtIndex {
    }
  //--- Notify observers object count did change
    for anyObject in mNames_observers {
      let object = anyObject as PMTriggerProtocol
      enterTriggerWithObject (object)
    }
  }

  func removeObjectFromMNamesAtIndex (inIndex : Int) {
    let removedObject = mNames.objectAtIndex (inIndex) as NameEntity
  //--- Perform removing
    mNames.removeObjectAtIndex (inIndex)
  //--- Register all object in undo manager
    undoManager ().prepareWithInvocationTarget (self).insertObject (removedObject, inMNamesAtIndex:inIndex)
  //--- Update explorer
    if mNames__explorer != nil {
      updateManagedObjectToManyRelationshipDisplayForKey ("mNames", popUpButton:mNames__explorer!)
    }
  //--- Reset inverse relationship
    removedObject.mRoot = nil
  //--- Notify observers object count did change
    for anyObject in mNames_observers {
      let object = anyObject as PMTriggerProtocol
      enterTriggerWithObject (object)
    }
  }

  func appendToMNames (inObject : NameEntity) {
    if !mNames.containsObject (inObject) {
      insertObject (inObject, inMNamesAtIndex:self.mNames.count)
    }
  }

  func removeObjectFromMNames (inObject : NameEntity) {
    let idx = mNames.indexOfObject (inObject)
    if NSNotFound != idx {
      removeObjectFromMNamesAtIndex (idx)
    }
  }
   
  func addObserverOf_mNames (inObserver : PMTriggerProtocol) {
    mNames_observers.addObject (inObserver)
    enterTriggerWithObject (inObserver)
  }

  func removeObserverOf_mNames (inObserver : PMTriggerProtocol) {
    mNames_observers.removeObject (inObserver)
    enterTriggerWithObject (inObserver)
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    init                                                                                                           *
  //-------------------------------------------------------------------------------------------------------------------*

  init (entityManager : PMObjectManager) {
    super.init (entityManager:entityManager)
  //--- Register trigger objects
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    deinit                                                                                                         *
  //-------------------------------------------------------------------------------------------------------------------*

  deinit {
  //--- remove trigger objects
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    populateExplorerWindow                                                                                         *
  //-------------------------------------------------------------------------------------------------------------------*

  override func populateExplorerWindowWithRect (inout ioRect : NSRect, view : NSView) {
   mNames__explorer = createEntryForToManyRelationshipNamed ("mNames", ioRect: &ioRect, view: view)
   updateManagedObjectToManyRelationshipDisplayForKey ("mNames", popUpButton:mNames__explorer!)
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    clearObjectExplorer                                                                                            *
  //-------------------------------------------------------------------------------------------------------------------*

  override func clearObjectExplorer () {
    mNames__explorer = nil
    super.clearObjectExplorer ()
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    saveIntoDictionary                                                                                             *
  //-------------------------------------------------------------------------------------------------------------------*

  override func saveIntoDictionary (ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    storeEntityArrayInDictionary (mNames, inRelationshipName:"mNames", ioDictionary:ioDictionary) ;
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    setUpWithDictionary                                                                                            *
  //-------------------------------------------------------------------------------------------------------------------*

  override func setUpWithDictionary (inDictionary : NSDictionary,
                                     managedObjectArray : NSArray) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:managedObjectArray)
    mNames = readEntityArrayFromDictionary ("mNames", inDictionary:inDictionary, managedObjectArray:managedObjectArray)
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //   accessibleObjects                                                                                               *
  //-------------------------------------------------------------------------------------------------------------------*

  override func accessibleObjects (inout objects : NSMutableArray) {
    super.accessibleObjects (&objects)
    for object : AnyObject in mNames {
      let managedObject = object as PMManagedObject
      objects.addObject (managedObject)
    }
  }

  //-------------------------------------------------------------------------------------------------------------------*

}

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


