//-----------------------------------------------------------------------------*
//                                                                             *
//                         File 'MyRootEntity.swift'                           *
//                         Generated by version 0.0.1                          *
//                        july 1st, 2014, at 13h12'10"                         *
//                                                                             *
//-----------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

import Cocoa
//-----------------------------------------------------------------------------*

@objc(MyRootEntity) class MyRootEntity : PMManagedEntity {

  //-----------------------------------------------------------------------------*
  //    To many relationship: mNames                                             *
  //-----------------------------------------------------------------------------*

  var mNames_observers = NSMutableSet ()
  var mNames : NSMutableArray = NSMutableArray () { // Set of NameEntity entities
    didSet {
      if (oldValue != mNames) {
      //--- Register old value in undo manager
        undoManager ().registerUndoWithTarget (self, selector:"setMNames", object:oldValue)
      //--- Removed object set
        var removedObjectSet = NSMutableSet ()
        removedObjectSet.addObjectsFromArray (oldValue)
        removedObjectSet.minusSet (NSSet (array:mNames))
        for object : AnyObject in removedObjectSet {
          let managedObject = object as NameEntity
          managedObject.mRoot = nil ;
        }
      //--- Added object set
        var addedObjectSet = NSMutableSet ()
        addedObjectSet.addObjectsFromArray (mNames)
        addedObjectSet.minusSet (NSSet (array:oldValue))
        for object : AnyObject in addedObjectSet {
          let managedObject = object as NameEntity
          managedObject.mRoot = self
        }
      //--- Notify observers object count did change
        mNames_observers.makeObjectsPerformSelector ("entity_2E_MyRootEntity_2E_mNames_didChange")
      }
    }
  }

  func appendToMNames (inObject : NameEntity) {
    if !mNames.containsObject (inObject) {
      insertObject (inObject, inMNamesAtIndex:self.mNames.count ())
    }
  }

  func insertObject (inObject : NameEntity,
                     inMNamesAtIndex: Int) {
    let idx : Int = mNames.indexOfObject (inObject)
    if idx == NSNotFound {
      mNames.insertObject (inObject, atIndex:inMNamesAtIndex)
        undoManager ().registerUndoWithTarget (self,
        selector:"removeObjectFromMNames:",
        object:inObject
      )
      inObject.mRoot = self
    }else if idx != inMNamesAtIndex {
    }
  //--- Notify observers object count did change
    mNames_observers.makeObjectsPerformSelector ("entity_2E_MyRootEntity_2E_mNames_didChange")
  }

  func removeObjectFromMNames (inObject : NameEntity) {
    let idx = mNames.indexOfObject (inObject)
    if NSNotFound != idx {
      removeObjectFromMNamesAtIndex (idx)
    }
  }

  func removeObjectFromMNamesAtIndex (inIndex : Int) {
    let removedObject = mNames.objectAtIndex (inIndex) as NameEntity
  //--- Perform removing
    mNames.removeObjectAtIndex (inIndex)
  //--- Register all object in undo manager
    undoManager ().prepareWithInvocationTarget (self).insertObject (removedObject, inMNamesAtIndex:inIndex)
  //--- Reset inverse relationship
    removedObject.mRoot = nil
  //--- Notify observers object count did change
    mNames_observers.makeObjectsPerformSelector ("entity_2E_MyRootEntity_2E_mNames_didChange")
  }
   
  func addObserverOf_mNames (inObserver : AnyObject) {
    mNames_observers.addObject (inObserver)
    NSApp.sendAction ("entity_2E_MyRootEntity_2E_mNames_didChange", to:inObserver, from:self)
  }

  func removeObserverOf_mNames (inObserver : AnyObject) {
    mNames_observers.removeObject (inObserver)
    NSApp.sendAction ("entity_2E_MyRootEntity_2E_mNames_didChange", to:inObserver, from:self)
  }




  //-----------------------------------------------------------------------------*
  //    init                                                                     *
  //-----------------------------------------------------------------------------*

  init (entityManager : PMEntityManager) {
    super.init (entityManager:entityManager)
  }

  //-----------------------------------------------------------------------------*
  //    populateExplorerWindow                                                   *
  //-----------------------------------------------------------------------------*

  override func populateExplorerWindowWithRect (inout ioRect : NSRect, view : NSView) {
  }

  //-----------------------------------------------------------------------------*
  //    clearContextExplorer                                                     *
  //-----------------------------------------------------------------------------*

  override func clearContextExplorer () {
    super.clearContextExplorer ()
  }

  //-----------------------------------------------------------------------------*
  //    saveIntoDictionary                                                       *
  //-----------------------------------------------------------------------------*

  override func saveIntoDictionary (ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    storeEntityArrayInDictionary (mNames, inRelationshipName:"mNames", ioDictionary:ioDictionary) ;
  }

  //---------------------------------------------------------------------------*
  //    setUpWithDictionary                                                    *
  //---------------------------------------------------------------------------*

  override func setUpWithDictionary (inDictionary : NSDictionary,
                                     managedObjectArray : PMManagedEntity []) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:managedObjectArray)
    mNames = readEntityArrayFromDictionary ("mNames", inDictionary:inDictionary, managedObjectArray:managedObjectArray)
  }


  //---------------------------------------------------------------------------*
  //   accessibleObjects                                                       *
  //---------------------------------------------------------------------------*

  override func accessibleObjects () -> PMManagedEntity [] {
    var result = super.accessibleObjects ()
    for object : AnyObject in mNames {
      let managedObject = object as PMManagedEntity
      result += managedObject
    }
    return result
  }

}

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


