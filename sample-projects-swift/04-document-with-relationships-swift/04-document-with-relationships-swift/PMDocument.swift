//-----------------------------------------------------------------------------*
//                                                                             *
//                          File 'PMDocument.swift'                            *
//                         Generated by version 0.0.1                          *
//                       august 5th, 2014, at 17h34'32"                        *
//                                                                             *
//-----------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1


import Cocoa

//-----------------------------------------------------------------------------*

@objc(PMDocument) class PMDocument : PMManagedDocument,
                                   protocol_document_2E_PMDocument_2E_canRemoveString,
                                   protocol_document_2E_PMDocument_2E_countItemMessage {

  //---------------------------------------------------------------------------*
  //    Outlets                                                                *
  //---------------------------------------------------------------------------*

  @IBOutlet var namesTableView : NSTableView?
  @IBOutlet var canRemoveTextField : NSTextField?
  @IBOutlet var addPathButton : NSButton?
  @IBOutlet var removePathButton : NSButton?
  @IBOutlet var countItemTextField : NSTextField?
  @IBOutlet var countItemMessageTextField : NSTextField?

  //---------------------------------------------------------------------------*
  //    Controllers                                                            *
  //---------------------------------------------------------------------------*

  var nameController : PMEntityArrayController 

  //---------------------------------------------------------------------------*
  //    Documents attributes                                                   *
  //---------------------------------------------------------------------------*


  //---------------------------------------------------------------------------*
  //    init                                                                   *
  //---------------------------------------------------------------------------*

  init () {
    let em = PMObjectManager ()
    nameController = PMEntityArrayController (entityManager:em, inClassName:"NameEntity")
    super.init (inEntityManager:em)
  }
  
  //---------------------------------------------------------------------------*
  //    windowNibName                                                          *
  //---------------------------------------------------------------------------*

  override var windowNibName: String {
    return "PMDocument"
  }

  //---------------------------------------------------------------------------*
  //    rootEntityClassName                                                    *
  //---------------------------------------------------------------------------*

  override func rootEntityClassName () -> String {
    return "MyRootEntity"
  }

  //---------------------------------------------------------------------------*
  //    rootObject                                                             *
  //---------------------------------------------------------------------------*

  var rootObject : MyRootEntity {
    get {
      return mRootObject as MyRootEntity
    }
  }

  //---------------------------------------------------------------------------*
  //    windowControllerDidLoadNib                                             *
  //---------------------------------------------------------------------------*

  override func windowControllerDidLoadNib (aController: NSWindowController) {
    super.windowControllerDidLoadNib (aController)
  //--------------------------- Controller bindings
//--- 'nameController' controller bindings
    nameController.bind ("contentArray",
      toObject:self.rootObject,
      withKeyPath:"mNames",
      options:[
        "NSDeletesObjectsOnRemoveBindingsOption" : true
      ]
    )
  //--------------------------- Outlet bindings
  //--- Outlet namesTableView
    if nil == namesTableView {
      presentErrorWindow (__FILE__, __LINE__, "the 'namesTableView' outlet is nil") ;
    }
    if nil == namesTableView?.tableColumnWithIdentifier ("name") {
      presentErrorWindow (__FILE__, __LINE__, "the 'namesTableView' NSTableView outlet has no formatter has no column with the name identifier") ;
    }else{
      let cell : NSActionCell = namesTableView?.tableColumnWithIdentifier ("name").dataCell as NSActionCell
      if !cell.isKindOfClass (NSTextFieldCell) {
        presentErrorWindow (__FILE__, __LINE__, "the dataCell is 'name' column of the 'namesTableView' should be an 'NSTextFieldCell instance") ;
      }
    }
    namesTableView?.tableColumnWithIdentifier ("name").bind ("value",
      toObject:nameController,
      withKeyPath:"arrangedObjects.name",
      options:nil
  )
    if nil == namesTableView?.tableColumnWithIdentifier ("int") {
      presentErrorWindow (__FILE__, __LINE__, "the 'namesTableView' NSTableView outlet has no formatter has no column with the int identifier") ;
    }else{
      let cell : NSActionCell = namesTableView?.tableColumnWithIdentifier ("int").dataCell as NSActionCell
      if !cell.isKindOfClass (NSTextFieldCell) {
        presentErrorWindow (__FILE__, __LINE__, "the dataCell is 'int' column of the 'namesTableView' should be an 'NSTextFieldCell instance") ;
      }
    }
    namesTableView?.tableColumnWithIdentifier ("int").bind ("value",
      toObject:nameController,
      withKeyPath:"arrangedObjects.aValue",
      options:nil
  )
  //--- Outlet canRemoveTextField
    if nil == canRemoveTextField {
      presentErrorWindow (__FILE__, __LINE__, "the 'canRemoveTextField' outlet is nil") ;
    }
    canRemoveTextField?.bind ("value",
      toObject:self,
      withKeyPath:"canRemoveString",
      options:nil
    )
  //--- Outlet addPathButton
    if nil == addPathButton {
      presentErrorWindow (__FILE__, __LINE__, "the 'addPathButton' outlet is nil") ;
    }
    addPathButton?.target = nameController
    addPathButton?.action = "add:"
  //--- Outlet removePathButton
    if nil == removePathButton {
      presentErrorWindow (__FILE__, __LINE__, "the 'removePathButton' outlet is nil") ;
    }
    removePathButton?.target = nameController
    removePathButton?.action = "remove:"
    removePathButton?.bind ("enabled",
      toObject:nameController,
      withKeyPath:"canRemove",
      options:nil
    )
  //--- Outlet countItemTextField
    if nil == countItemTextField {
      presentErrorWindow (__FILE__, __LINE__, "the 'countItemTextField' outlet is nil") ;
    }
    if (nil != countItemTextField) && (countItemTextField?.formatter == nil) {
      presentErrorWindow (__FILE__, __LINE__, "the 'countItemTextField' outlet has no formatter, it should have an NSNumberFormatter") ;
    }else if (nil != countItemTextField) && !((countItemTextField?.formatter?.isKindOfClass (NSNumberFormatter))!) {
      presentErrorWindow (__FILE__, __LINE__, "the 'countItemTextField outlet has a formatter that is not kind of NSNumberFormatter class") ;
    }
    countItemTextField?.bind ("value",
      toObject:mRootObject,
      withKeyPath:"mNames.@count",
      options:nil
    )
  //--- Outlet countItemMessageTextField
    if nil == countItemMessageTextField {
      presentErrorWindow (__FILE__, __LINE__, "the 'countItemMessageTextField' outlet is nil") ;
    }
    countItemMessageTextField?.bind ("value",
      toObject:self,
      withKeyPath:"countItemMessage",
      options:nil
    )
  //--------------------------- Add Transient observers
    nameController.addObserver (self,
      forKeyPath:"canRemove",
      options:NSKeyValueObservingOptions (),
      context:nil
    )
    rootObject.addObserverOf_mNames (self)
  //--------------------------- Add Signature observer
}

  //---------------------------------------------------------------------------*
  //   R E M O V E    W I N D O W    C O N T R O L L E R                       *
  //---------------------------------------------------------------------------*

  override func removeWindowController (inWindowController : NSWindowController) {
  //--------------------------- Add Signature observer
  //--- Unbind Outlets
    namesTableView?.tableColumnWithIdentifier ("name").unbind ("value")
    namesTableView?.tableColumnWithIdentifier ("int").unbind ("value")
    canRemoveTextField?.unbind ("value")
    addPathButton?.target = nil
    addPathButton?.action = nil
    removePathButton?.unbind ("enabled")
    removePathButton?.target = nil
    removePathButton?.action = nil
    countItemTextField?.unbind ("value")
    countItemMessageTextField?.unbind ("value")
  //--- Unbind Controllers
    nameController.unbind ("contentArray")
  //--- Remove Transient observers
    nameController.removeObserver (self,
      forKeyPath:"canRemove"
    )
    rootObject.removeObserverOf_mNames (self)
  //--- Release controllers
    // nameController = nil
  //--- Remove circularities in outlets
  //---
    super.removeWindowController (inWindowController)
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    Transient: entity_2E_MyRootEntity_2E_mNames                                                                    *
  //-------------------------------------------------------------------------------------------------------------------*

  func entity_2E_MyRootEntity_2E_mNames_didChange () {
    //--- Trigger 'countItemMessage transient'
    if countItemMessage__cache != nil {
      countItemMessage__cache = nil ;
      enterTriggerForObject_document_2E_PMDocument_2E_countItemMessage (self)
    }
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //  observeValueForKeyPath:ofObject:change:context:                                                                  *
  //-------------------------------------------------------------------------------------------------------------------*

  override func observeValueForKeyPath (inKeyPath : String!,
                                        ofObject inObject:AnyObject!,
                                        change inChange:[NSObject : AnyObject]!,
                                        context inContext:UnsafeMutablePointer <()>) {
  if (inObject as NSObject == nameController) && (inKeyPath == "canRemove") {
  //--- Trigger 'canRemoveString transient'
    if canRemoveString__cache != nil {
      canRemoveString__cache = nil
      enterTriggerForObject_document_2E_PMDocument_2E_canRemoveString (self)
    }
  }else{
     super.observeValueForKeyPath (inKeyPath,
       ofObject:inObject,
       change:inChange,
       context:inContext
     )
    }
  }

  //---------------------------------------------------------------------------*
  //    Transient: canRemoveString                                             *
  //---------------------------------------------------------------------------*

  var canRemoveString__cache : String?
  var canRemoveString : String {
    if canRemoveString__cache == nil {
      canRemoveString__cache = compute_PMDocument_canRemoveString (nameController.canRemove) ;
    }
    return canRemoveString__cache!
  }

  func document_2E_PMDocument_2E_canRemoveString_didChange () {
    self.willChangeValueForKey ("canRemoveString")
    self.didChangeValueForKey  ("canRemoveString")
  }
 
  //---------------------------------------------------------------------------*
  //    Transient: countItemMessage                                            *
  //---------------------------------------------------------------------------*

  var countItemMessage__cache : String?
  var countItemMessage : String {
    if countItemMessage__cache == nil {
      countItemMessage__cache = compute_PMDocument_countItemMessage (rootObject.mNames.count) ;
    }
    return countItemMessage__cache!
  }

  func document_2E_PMDocument_2E_countItemMessage_didChange () {
    self.willChangeValueForKey ("countItemMessage")
    self.didChangeValueForKey  ("countItemMessage")
  }
 
}

//-----------------------------------------------------------------------------*

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


