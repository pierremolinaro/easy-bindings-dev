//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    SelectionController_PMDocument_detailController                                                                  *
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(SelectionController_PMDocument_detailController)
final class SelectionController_PMDocument_detailController : EBObject {
  private var mModel : ReadOnlyArrayOf_NameEntity?

  //····················································································································
  //   SELECTION OBSERVABLE PROPERTIES
  //····················································································································

  var aValue = EBPropertyProxy_Int () 
  var name = EBPropertyProxy_String () 

  //····················································································································
  //   BIND SELECTION
  //····················································································································

  func bind_selection (model : ReadOnlyArrayOf_NameEntity, file:String, line:Int) {
    mModel = model
    bind_property_aValue (model: model)
    bind_property_name (model: model)
  }

  //····················································································································
  //    Explorer
  //····················································································································

  private var mValueExplorer : NSButton?
  private var mExplorerWindow : NSWindow?

  //····················································································································

  final func addExplorer (name : String, y : inout CGFloat, view : NSView) {
    let font = NSFont.boldSystemFont (ofSize: NSFont.smallSystemFontSize ())
    let tf = NSTextField (frame:secondColumn (y))
    tf.isEnabled = true
    tf.isEditable = false
    tf.stringValue = name
    tf.font = font
    view.addSubview (tf)
    let valueExplorer = NSButton (frame:thirdColumn (y))
    valueExplorer.font = font
    valueExplorer.title = explorerIndexString (mEasyBindingsObjectIndex) + className
    valueExplorer.target = self
    valueExplorer.action = #selector(SelectionController_PMDocument_detailController.showObjectWindowFromExplorerButton(_:))
    view.addSubview (valueExplorer)
    mValueExplorer = valueExplorer
    y += EXPLORER_ROW_HEIGHT
  }
  
  //····················································································································

  func buildExplorerWindow () {
  //-------------------------------------------------- Create Window
    let r = NSRect (x:20.0, y:20.0, width:10.0, height:10.0)
    mExplorerWindow = NSWindow (contentRect: r, styleMask: [.titled, .closable], backing: .buffered, defer: true, screen: nil)
  //-------------------------------------------------- Adding properties
    let view = NSView (frame:r)
    var y : CGFloat = 0.0
    createEntryForPropertyNamed (
      "aValue",
      idx:aValue.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&aValue.mObserverExplorer,
      valueExplorer:&aValue.mValueExplorer
    )
    createEntryForPropertyNamed (
      "name",
      idx:name.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&name.mObserverExplorer,
      valueExplorer:&name.mValueExplorer
    )
  //-------------------------------------------------- Finish Window construction
  //--- Resize View
    let viewFrame = NSRect (x:0.0, y:0.0, width:EXPLORER_ROW_WIDTH, height:y)
    view.frame = viewFrame
  //--- Set content size
    mExplorerWindow?.setContentSize (NSSize (width:EXPLORER_ROW_WIDTH + 16.0, height:fmin (600.0, y)))
  //--- Set close button as 'remove window' button
    let closeButton : NSButton? = mExplorerWindow?.standardWindowButton (.closeButton)
    closeButton?.target = self
    closeButton?.action = #selector(SelectionController_PMDocument_detailController.deleteSelectionControllerWindowAction(_:))
  //--- Set window title
    let windowTitle = explorerIndexString (mEasyBindingsObjectIndex) + className
    mExplorerWindow!.title = windowTitle
  //--- Add Scroll view
    let frame = NSRect (x:0.0, y:0.0, width:EXPLORER_ROW_WIDTH, height:y)
    let sw = NSScrollView (frame:frame)
    sw.hasVerticalScroller = true
    sw.documentView = view
    mExplorerWindow!.contentView = sw
  }

  //····················································································································
  //   showObjectWindowFromExplorerButton
  //····················································································································

  func showObjectWindowFromExplorerButton (_ : Any) {
    if mExplorerWindow == nil {
      buildExplorerWindow ()
    }
    mExplorerWindow?.makeKeyAndOrderFront(nil)
  }
  
  //····················································································································
  //   deleteSelectionControllerWindowAction
  //····················································································································

  func deleteSelectionControllerWindowAction (_ : Any) {
    clearObjectExplorer ()
  }

  //····················································································································
  //   clearObjectExplorer
  //····················································································································

  func clearObjectExplorer () {
    let closeButton = mExplorerWindow?.standardWindowButton (.closeButton)
    closeButton!.target = nil
    mExplorerWindow?.orderOut (nil)
    mExplorerWindow = nil
  }

  //···················································································································*

  private final func bind_property_aValue (model : ReadOnlyArrayOf_NameEntity) {
    model.addEBObserverOf_aValue (aValue)
    aValue.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.aValue.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    aValue.writeModelFunction = { (inValue : Int) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          break
        case .singleSelection (let v) :
          for object in v {
            object.aValue.setProp (inValue)
          }
        }
      }
    }
    aValue.validateAndWriteModelFunction = { (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          return false
        case .singleSelection (let v) :
          for object in v {
            let result = object.aValue.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_name (model : ReadOnlyArrayOf_NameEntity) {
    model.addEBObserverOf_name (name)
    name.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          var s = Set<String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.name.prop {
            case .noSelection :
              return .noSelection
            case .multipleSelection :
              isMultipleSelection = true
            case .singleSelection (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multipleSelection
          }else if s.count == 0 {
            return .noSelection
          }else if s.count == 1 {
            return .singleSelection (s.first!)
          }else{
            return .multipleSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    name.writeModelFunction = { (inValue : String) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          break
        case .singleSelection (let v) :
          for object in v {
            object.name.setProp (inValue)
          }
        }
      }
    }
    name.validateAndWriteModelFunction = { (candidateValue : String, windowForSheet : NSWindow?) in
      if let model = self.mModel {
        switch model.prop {
        case .noSelection, .multipleSelection :
          return false
        case .singleSelection (let v) :
          for object in v {
            let result = object.name.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }



  //····················································································································
  //   UNBIND SELECTION
  //····················································································································

  func unbind_selection () {
  //--- aValue
    aValue.readModelFunction = nil 
    aValue.writeModelFunction = nil 
    aValue.validateAndWriteModelFunction = nil 
    mModel?.removeEBObserverOf_aValue (aValue)
//    mModel?.removeEBObserver (aValue)
  //--- name
    name.readModelFunction = nil 
    name.writeModelFunction = nil 
    name.validateAndWriteModelFunction = nil 
    mModel?.removeEBObserverOf_name (name)
//    mModel?.removeEBObserver (name)
    mModel = nil    
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

