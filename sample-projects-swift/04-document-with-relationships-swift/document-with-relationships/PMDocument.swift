//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

@objc(PMDocument) class PMDocument : EBManagedDocument {

  //····················································································································
  //    Outlets
  //····················································································································

  @IBOutlet var addPathButton : EBButton?
  @IBOutlet var canRemoveTextField : EBTextObserverField?
  @IBOutlet var countItemMessageTextField : EBTextObserverField?
  @IBOutlet var countItemTextField : EBIntObserverField?
  @IBOutlet var decrementButton : EBButton?
  @IBOutlet var evenValueTextField : EBTextObserverField?
  @IBOutlet var incrementButton : EBButton?
  @IBOutlet var mNamesTableView : EBTableView?
  @IBOutlet var mOtherTableView : EBTableView?
  @IBOutlet var mSelectionCountTextField : EBTextObserverField?
  @IBOutlet var mSelectionTableView : EBTableView?
  @IBOutlet var nameDetailTextField : EBTextField?
  @IBOutlet var removePathButton : EBButton?
  @IBOutlet var totalTextField : EBIntObserverField?
  @IBOutlet var valueDetailTextField : EBIntField?

  //····················································································································
  //    Properties
  //····················································································································


  //····················································································································
  //    Transient properties
  //····················································································································

  var selectionCountString_property = EBTransientProperty_String ()
  var evenValueString_property = EBTransientProperty_String ()
  var canRemoveString_property = EBTransientProperty_String ()
  var countItemMessage_property = EBTransientProperty_String ()
  var total_property = EBTransientProperty_Int ()
  var documentFilePath_property = EBTransientProperty_String ()

  //····················································································································
  //    Transient arraies
  //····················································································································


  //····················································································································
  //    Array Controllers
  //····················································································································

  var nameController = ArrayController_PMDocument_nameController ()
  var otherController = ArrayController_PMDocument_otherController ()
  var selController = ArrayController_PMDocument_selController ()

  //····················································································································
  //    Selection Controllers
  //····················································································································

  var detailController = SelectionController_PMDocument_detailController ()

  //····················································································································
  //    Custom object Controllers
  //····················································································································


  //····················································································································
  //    Document file path
  //····················································································································
  // Cette méthode est appelée après tout enregistrement, qu'il y ait changement de nom ou pas.

  override var fileModificationDate : Date? {
    get {
      return super.fileModificationDate
    }
    set{
      super.fileModificationDate = newValue
      self.documentFilePath_property.postEvent ()
    }
  }

  //····················································································································

  func computeTransient_documentFilePath () -> String {
    var documentFilePath = ""
    if let url = self.fileURL {
      documentFilePath = url.path
    }
    return documentFilePath
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    nameController.addExplorer (name: "nameController", y:&y, view:view)
    otherController.addExplorer (name: "otherController", y:&y, view:view)
    selController.addExplorer (name: "selController", y:&y, view:view)
    detailController.addExplorer (name: "detailController", y:&y, view:view)
    super.populateExplorerWindow (&y, view:view)
  }

  //····················································································································
  //    windowNibName
  //····················································································································

  override var windowNibName: String {
    return "PMDocument"
  }

  //····················································································································
  //    rootEntityClassName
  //····················································································································

  override func rootEntityClassName () -> String {
    return "MyRootEntity"
  }

  //····················································································································
  //    rootObject
  //····················································································································

  var rootObject : MyRootEntity { get { return mRootObject as! MyRootEntity } }

  //····················································································································
  //    windowControllerDidLoadNib
  //····················································································································

  override func windowControllerDidLoadNib (_ aController: NSWindowController) {
  //--------------------------- Outlet checking
    if nil == addPathButton {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'addPathButton' outlet is nil") ;
//    }else if !addPathButton!.isKindOfClass (EBButton) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'addPathButton' outlet is not an instance of 'EBButton'") ;
    }
    if nil == canRemoveTextField {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'canRemoveTextField' outlet is nil") ;
//    }else if !canRemoveTextField!.isKindOfClass (EBTextObserverField) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'canRemoveTextField' outlet is not an instance of 'EBTextObserverField'") ;
    }
    if nil == countItemMessageTextField {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'countItemMessageTextField' outlet is nil") ;
//    }else if !countItemMessageTextField!.isKindOfClass (EBTextObserverField) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'countItemMessageTextField' outlet is not an instance of 'EBTextObserverField'") ;
    }
    if nil == countItemTextField {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'countItemTextField' outlet is nil") ;
//    }else if !countItemTextField!.isKindOfClass (EBIntObserverField) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'countItemTextField' outlet is not an instance of 'EBIntObserverField'") ;
    }
    if nil == decrementButton {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'decrementButton' outlet is nil") ;
//    }else if !decrementButton!.isKindOfClass (EBButton) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'decrementButton' outlet is not an instance of 'EBButton'") ;
    }
    if nil == evenValueTextField {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'evenValueTextField' outlet is nil") ;
//    }else if !evenValueTextField!.isKindOfClass (EBTextObserverField) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'evenValueTextField' outlet is not an instance of 'EBTextObserverField'") ;
    }
    if nil == incrementButton {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'incrementButton' outlet is nil") ;
//    }else if !incrementButton!.isKindOfClass (EBButton) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'incrementButton' outlet is not an instance of 'EBButton'") ;
    }
    if nil == mNamesTableView {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mNamesTableView' outlet is nil") ;
//    }else if !mNamesTableView!.isKindOfClass (EBTableView) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mNamesTableView' outlet is not an instance of 'EBTableView'") ;
    }
    if nil == mOtherTableView {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mOtherTableView' outlet is nil") ;
//    }else if !mOtherTableView!.isKindOfClass (EBTableView) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mOtherTableView' outlet is not an instance of 'EBTableView'") ;
    }
    if nil == mSelectionCountTextField {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mSelectionCountTextField' outlet is nil") ;
//    }else if !mSelectionCountTextField!.isKindOfClass (EBTextObserverField) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mSelectionCountTextField' outlet is not an instance of 'EBTextObserverField'") ;
    }
    if nil == mSelectionTableView {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mSelectionTableView' outlet is nil") ;
//    }else if !mSelectionTableView!.isKindOfClass (EBTableView) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mSelectionTableView' outlet is not an instance of 'EBTableView'") ;
    }
    if nil == nameDetailTextField {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'nameDetailTextField' outlet is nil") ;
//    }else if !nameDetailTextField!.isKindOfClass (EBTextField) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'nameDetailTextField' outlet is not an instance of 'EBTextField'") ;
    }
    if nil == removePathButton {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'removePathButton' outlet is nil") ;
//    }else if !removePathButton!.isKindOfClass (EBButton) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'removePathButton' outlet is not an instance of 'EBButton'") ;
    }
    if nil == totalTextField {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'totalTextField' outlet is nil") ;
//    }else if !totalTextField!.isKindOfClass (EBIntObserverField) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'totalTextField' outlet is not an instance of 'EBIntObserverField'") ;
    }
    if nil == valueDetailTextField {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'valueDetailTextField' outlet is nil") ;
//    }else if !valueDetailTextField!.isKindOfClass (EBIntField) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'valueDetailTextField' outlet is not an instance of 'EBIntField'") ;
    }
  //--------------------------- Array controllers
    self.nameController.bind_modelAndView (
      model: self.rootObject.mNames_property,
      tableViewArray: [mNamesTableView!],
      file: #file,
      line: #line
    )
    self.otherController.bind_modelAndView (
      model: self.rootObject.mNames_property,
      tableViewArray: [mOtherTableView!],
      file: #file,
      line: #line
    )
    self.selController.bind_modelAndView (
      model: self.nameController.selectedArray_property,
      tableViewArray: [mSelectionTableView!],
      file: #file,
      line: #line
    )
  //--------------------------- Selection controllers
    detailController.bind_selection (
      model: nameController.selectedArray_property,
      file: #file,
      line: #line
    )
  //--------------------------- Custom object controllers
  //--------------------------- Transient compute functions
    self.selectionCountString_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.selController.sortedArray_property.count_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.selController.sortedArray_property.count_property_selection) {
          case (.single (let v0)) :
            return .single (compute_PMDocument_selectionCountString (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.evenValueString_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.otherController.sortedArray_property.count_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.otherController.sortedArray_property.count_property_selection) {
          case (.single (let v0)) :
            return .single (compute_PMDocument_evenValueString (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.canRemoveString_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.nameController.selectedArray_property.count_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.nameController.selectedArray_property.count_property_selection) {
          case (.single (let v0)) :
            return .single (compute_PMDocument_canRemoveString (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.countItemMessage_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.rootObject.mNames_property.count_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.rootObject.mNames_property.count_property_selection) {
          case (.single (let v0)) :
            return .single (compute_PMDocument_countItemMessage (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.total_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.rootObject.mNames_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.rootObject.mNames_property_selection) {
          case (.single (let v0)) :
            return .single (compute_PMDocument_total (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.documentFilePath_property.readModelFunction = { return .single (self.computeTransient_documentFilePath ()) }
  //--------------------------- Install property observers for transients
    self.selController.sortedArray_property.count_property.addEBObserver (self.selectionCountString_property)
    self.otherController.sortedArray_property.count_property.addEBObserver (self.evenValueString_property)
    self.nameController.selectedArray_property.count_property.addEBObserver (self.canRemoveString_property)
    self.rootObject.mNames_property.count_property.addEBObserver (self.countItemMessage_property)
    self.rootObject.mNames_property.addEBObserverOf_aValue (self.total_property)
  //--------------------------- Install regular bindings
    mSelectionCountTextField?.bind_valueObserver (self.selectionCountString_property, file: #file, line: #line)
    evenValueTextField?.bind_valueObserver (self.evenValueString_property, file: #file, line: #line)
    canRemoveTextField?.bind_valueObserver (self.canRemoveString_property, file: #file, line: #line)
    countItemTextField?.bind_valueObserver (self.rootObject.mNames_property.count_property, file: #file, line: #line, autoFormatter:false)
    countItemMessageTextField?.bind_valueObserver (self.countItemMessage_property, file: #file, line: #line)
    totalTextField?.bind_valueObserver (self.total_property, file: #file, line: #line, autoFormatter:false)
    nameDetailTextField?.bind_value (self.detailController.name_property, file: #file, line: #line, sendContinously:true)
    valueDetailTextField?.bind_value (self.detailController.aValue_property, file: #file, line: #line, sendContinously:true, autoFormatter:false)
  //--------------------------- Install multiple bindings
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction:{
          return (self.nameController.selectedArray_property.count_property.prop > EBSelection.single (0))
        },
        outlet:self.removePathButton
      )
      self.nameController.selectedArray_property.count_property.addEBObserver (controller)
      mController_removePathButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction:{
          return (self.rootObject.mNames_property.count_property.prop > EBSelection.single (0))
        },
        outlet:self.incrementButton
      )
      self.rootObject.mNames_property.count_property.addEBObserver (controller)
      mController_incrementButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction:{
          return (self.rootObject.mNames_property.count_property.prop > EBSelection.single (0))
        },
        outlet:self.decrementButton
      )
      self.rootObject.mNames_property.count_property.addEBObserver (controller)
      mController_decrementButton_enabled = controller
    }
  //--------------------------- Set targets / actions
    addPathButton?.target = nameController
    addPathButton?.action = #selector (ArrayController_PMDocument_nameController.add (_:))
    removePathButton?.target = nameController
    removePathButton?.action = #selector (ArrayController_PMDocument_nameController.remove (_:))
    incrementButton?.target = self
    incrementButton?.action = #selector (PMDocument.increment (_:))
    decrementButton?.target = self
    decrementButton?.action = #selector (PMDocument.decrement (_:))
  //--------------------------- Update display
    super.windowControllerDidLoadNib (aController)
    flushOutletEvents ()
  }

  //····················································································································
  //   removeWindowController
  //····················································································································

  override func removeUserInterface () {
  //--------------------------- Unbind regular bindings
    mSelectionCountTextField?.unbind_valueObserver ()
    evenValueTextField?.unbind_valueObserver ()
    canRemoveTextField?.unbind_valueObserver ()
    countItemTextField?.unbind_valueObserver ()
    countItemMessageTextField?.unbind_valueObserver ()
    totalTextField?.unbind_valueObserver ()
    nameDetailTextField?.unbind_value ()
    valueDetailTextField?.unbind_value ()
  //--------------------------- Unbind multiple bindings
    self.nameController.selectedArray_property.count_property.removeEBObserver (mController_removePathButton_enabled!)
    mController_removePathButton_enabled = nil
    self.rootObject.mNames_property.count_property.removeEBObserver (mController_incrementButton_enabled!)
    mController_incrementButton_enabled = nil
    self.rootObject.mNames_property.count_property.removeEBObserver (mController_decrementButton_enabled!)
    mController_decrementButton_enabled = nil
  //--------------------------- Uninstall compute functions for transients
    self.selectionCountString_property.readModelFunction = nil
    self.evenValueString_property.readModelFunction = nil
    self.canRemoveString_property.readModelFunction = nil
    self.countItemMessage_property.readModelFunction = nil
    self.total_property.readModelFunction = nil
    self.documentFilePath_property.readModelFunction = nil
  //--------------------------- Unbind array controllers
    nameController.unbind_modelAndView ()
    otherController.unbind_modelAndView ()
    selController.unbind_modelAndView ()
  //--------------------------- Unbind selection controllers
    detailController.unbind_selection ()
  //--------------------------- Uninstall property observers for transients
    self.selController.sortedArray_property.count_property.removeEBObserver (self.selectionCountString_property)
    self.otherController.sortedArray_property.count_property.removeEBObserver (self.evenValueString_property)
    self.nameController.selectedArray_property.count_property.removeEBObserver (self.canRemoveString_property)
    self.rootObject.mNames_property.count_property.removeEBObserver (self.countItemMessage_property)
    self.rootObject.mNames_property.removeEBObserverOf_aValue (self.total_property)
  //--------------------------- Remove targets / actions
    addPathButton?.target = nil
    removePathButton?.target = nil
    incrementButton?.target = nil
    decrementButton?.target = nil
  //--------------------------- Clean up outlets
    self.addPathButton?.ebCleanUp ()
    self.canRemoveTextField?.ebCleanUp ()
    self.countItemMessageTextField?.ebCleanUp ()
    self.countItemTextField?.ebCleanUp ()
    self.decrementButton?.ebCleanUp ()
    self.evenValueTextField?.ebCleanUp ()
    self.incrementButton?.ebCleanUp ()
    self.mNamesTableView?.ebCleanUp ()
    self.mOtherTableView?.ebCleanUp ()
    self.mSelectionCountTextField?.ebCleanUp ()
    self.mSelectionTableView?.ebCleanUp ()
    self.nameDetailTextField?.ebCleanUp ()
    self.removePathButton?.ebCleanUp ()
    self.totalTextField?.ebCleanUp ()
    self.valueDetailTextField?.ebCleanUp ()
  }

  //····················································································································
  //    Multiple bindings controller
  //····················································································································

  fileprivate var mController_removePathButton_enabled : MultipleBindingController_enabled?
  fileprivate var mController_incrementButton_enabled : MultipleBindingController_enabled?
  fileprivate var mController_decrementButton_enabled : MultipleBindingController_enabled?

  //····················································································································

}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

