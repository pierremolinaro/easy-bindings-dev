//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

fileprivate let OPAQUE_LAYERS = true ;
fileprivate let DRAWS_ASYNCHRONOUSLY = true ;

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBViewControllerProtocol
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc protocol EBViewControllerProtocol {

  var objectCount : Int { get }

  func mouseDown (with inEvent: NSEvent, objectIndex inObjectIndex : Int)
  func mouseDragged (with inEvent : NSEvent)
  func mouseUp (with inEvent : NSEvent)

  func keyDown (with inEvent: NSEvent)

  func selectAllObjects ()

  func canBringForward () -> Bool
  func bringForward ()

  func canBringToFront () -> Bool
  func bringToFront ()

  func canSendBackward () -> Bool
  func sendBackward ()

  func canSendToBack () -> Bool
  func sendToBack ()
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBView
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBView) class EBView : NSView, EBUserClassNameProtocol {

  //····················································································································

  required init? (coder: NSCoder) {
    super.init (coder:coder)
    noteObjectAllocation (self)
  }

  //····················································································································

  override init (frame:NSRect) {
    super.init (frame:frame)
    noteObjectAllocation (self)
  }
  
  //····················································································································

  deinit {
    noteObjectDeallocation (self)
  }

  //····················································································································
  //  Properties
  //····················································································································

   private weak var mViewController : EBViewControllerProtocol? = nil
   fileprivate var mObjectLayer = CALayer ()
   private var mObjectSelectionLayer = CALayer ()
   private var mSelectionRectangleLayer = CALayer ()

  //····················································································································
  //  awakeFromNib
  //····················································································································

  final override func awakeFromNib () {
    self.layer?.drawsAsynchronously = DRAWS_ASYNCHRONOUSLY
    self.layer?.isOpaque = OPAQUE_LAYERS

    self.mObjectLayer.drawsAsynchronously = DRAWS_ASYNCHRONOUSLY
    self.mObjectLayer.isOpaque = OPAQUE_LAYERS
    self.layer?.addSublayer (mObjectLayer)
    self.layer?.addSublayer (mObjectSelectionLayer)
    self.layer?.addSublayer (mSelectionRectangleLayer)
  }

  //····················································································································
  //    set controller
  //····················································································································

  func set (controller inController : EBViewControllerProtocol?) {
    mViewController = inController
  }

  //····················································································································
  //    Object Layer
  //····················································································································

  private var mObjectLayerController : Controller_EBView_objectLayer?

  func bind_objectLayer (_ layer:EBReadOnlyProperty_CALayer, file:String, line:Int) {
    mObjectLayerController = Controller_EBView_objectLayer (layer:layer, outlet:self)
  }

  //····················································································································

  func unbind_objectLayer () {
    mObjectLayerController?.unregister ()
    mObjectLayerController = nil
  }

  //····················································································································
  //    Selection Layer
  //····················································································································

  var objectSelectionLayer : CALayer { return mObjectSelectionLayer }
  var selectionRectangleLayer : CALayer { return mSelectionRectangleLayer }

  //····················································································································

  func indexesOfObjects (intersecting inRect : CGRect) -> Set <Int> {
    return self.mObjectLayer.findIndexesOfObjects (intersecting: inRect)
  }

  //····················································································································
  // Mouse Events
  //····················································································································

  override func mouseDown (with inEvent: NSEvent) {
    let mouseDownLocation = self.convert (inEvent.locationInWindow, from:nil)
    if let result = self.mObjectLayer.findLayer (at: mouseDownLocation) {
      if let name = result.name, let idx = Int (name) {
        mViewController?.mouseDown (with:inEvent, objectIndex:idx) // No object
      }else{
        mViewController?.mouseDown (with:inEvent, objectIndex:-1) // No object
      }
    }else{
      mViewController?.mouseDown (with: inEvent, objectIndex: -1) // No object
    }
    super.mouseDown (with: inEvent)
  }

  //····················································································································

  override func mouseDragged (with inEvent : NSEvent) {
    mViewController?.mouseDragged (with: inEvent)
  }

  //····················································································································

  override func mouseUp (with inEvent : NSEvent) {
    mViewController?.mouseUp (with: inEvent)
  }

  //····················································································································
  // key Events
  //····················································································································

  override func keyDown (with inEvent: NSEvent) {
    mViewController?.keyDown (with:inEvent)
  }

  //····················································································································
  // Menu Events
  //····················································································································

  override func validateMenuItem (_ inMenuItem : NSMenuItem) -> Bool {
    let validate : Bool
    let action = inMenuItem.action
    if action == #selector (EBView.selectAll(_:)) {
      validate = (mViewController?.objectCount ?? 0) > 0
    }else if action == #selector (EBView.bringToFront(_:)) {
      validate = mViewController?.canBringToFront () ?? false
    }else if action == #selector (EBView.bringForward(_:)) {
      validate = mViewController?.canBringForward () ?? false
    }else if action == #selector (EBView.sendToBack(_:)) {
      validate = mViewController?.canSendToBack () ?? false
    }else if action == #selector (EBView.sendBackward(_:)) {
      validate = mViewController?.canSendBackward () ?? false
    }else{
      validate = super.validateMenuItem (inMenuItem)
    }
    // NSLog ("VALIDATE \(action) -> \(validate)")
    return validate
  }

  //····················································································································

  override func selectAll (_ : Any?) {
    mViewController?.selectAllObjects ()
  }

  //····················································································································

  func bringToFront (_ : Any?) {
    mViewController?.bringToFront ()
  }

  //····················································································································

  func bringForward (_ : Any?) {
    mViewController?.bringForward ()
  }

  //····················································································································

  func sendToBack (_ : Any?) {
    mViewController?.sendToBack ()
  }

  //····················································································································

  func sendBackward (_ : Any?) {
    mViewController?.sendBackward ()
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Controller_EBView_objectLayer
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class Controller_EBView_objectLayer : EBSimpleController {

  private let mLayer : EBReadOnlyProperty_CALayer
  private let mOutlet : EBView

  //····················································································································

  init (layer : EBReadOnlyProperty_CALayer, outlet : EBView) {
    mLayer = layer
    mOutlet = outlet
    super.init (observedObjects:[layer], outlet:outlet)
    self.eventCallBack = { [weak self] in self?.updateOutlet () }
  }

  //····················································································································

  private func updateOutlet () {
    switch mLayer.prop {
    case .empty :
      mOutlet.mObjectLayer.sublayers = nil
    case .single (let v) :
      mOutlet.mObjectLayer.sublayers = [v]
    case .multiple :
      mOutlet.mObjectLayer.sublayers = nil
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
