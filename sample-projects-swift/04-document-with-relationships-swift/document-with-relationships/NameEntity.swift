//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: NameEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class NameEntity : EBManagedObject,
  NameEntity_name,
  NameEntity_aValue {

  //····················································································································
  //   Accessing name stored property
  //····················································································································

  var name : String {
    get {
      return self.name_property.propval
    }
    set {
      self.name_property.setProp (newValue)
    }
  }

  var name_property_selection : EBSelection <String> {
    get {
      return self.name_property.prop
    }
  }

  //····················································································································
  //   Accessing aValue stored property
  //····················································································································

  var aValue : Int {
    get {
      return self.aValue_property.propval
    }
    set {
      self.aValue_property.setProp (newValue)
    }
  }

  var aValue_property_selection : EBSelection <Int> {
    get {
      return self.aValue_property.prop
    }
  }

  //····················································································································
  //    Stored Properties
  //····················································································································

  var name_property = EBStoredProperty_String ("Name")
  var aValue_property = EBStoredProperty_Int (100)

  //····················································································································
  //    Transient properties
  //····················································································································


  //····················································································································
  //    Relationships
  //····················································································································

  var mRoot_property = ToOneRelationship_NameEntity_mRoot ()

  //····················································································································
  //    init
  //····················································································································

  override init (managedObjectContext : EBManagedObjectContext) {
    super.init (managedObjectContext:managedObjectContext)
  //--- Install compute functions for transients
  //--- Install property observers for transients
  //--- Install undoers for properties
    self.name_property.undoManager = undoManager ()
    self.aValue_property.undoManager = undoManager ()
  //--- Install owner for relationships
    self.mRoot_property.owner = self
  //--- register properties for handling signature
  }

  //····················································································································

  deinit {
  //--- Remove observers
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "name",
      idx:self.name_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.name_property.mObserverExplorer,
      valueExplorer:&self.name_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "aValue",
      idx:self.aValue_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.aValue_property.mObserverExplorer,
      valueExplorer:&self.aValue_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForToOneRelationshipNamed (
      "mRoot",
      idx:self.mRoot_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mRoot_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
    self.name_property.mObserverExplorer = nil
    self.name_property.mValueExplorer = nil
    self.aValue_property.mObserverExplorer = nil
    self.aValue_property.mValueExplorer = nil
    self.mRoot_property.mObserverExplorer = nil
    self.mRoot_property.mValueExplorer = nil
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    self.name_property.storeIn (dictionary: ioDictionary, forKey: "name")
    self.aValue_property.storeIn (dictionary: ioDictionary, forKey: "aValue")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
    self.name_property.readFrom (dictionary: inDictionary, forKey:"name")
    self.aValue_property.readFrom (dictionary: inDictionary, forKey:"aValue")
  }

  //····················································································································
  //   cascadeObjectRemoving
  //····················································································································

  override func cascadeObjectRemoving (_ ioObjectsToRemove : inout Set <EBManagedObject>) {
    self.mRoot_property.setProp (nil) // Set relationship to nil
    super.cascadeObjectRemoving (&ioObjectsToRemove)
  }

  //····················································································································
  //   resetToOneRelationships
  //····················································································································

  override func resetToOneRelationships () {
    super.resetToOneRelationships ()
    self.mRoot_property.setProp (nil)
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
    if let object = self.mRoot_property.propval {
      objects.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_NameEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_NameEntity : ReadOnlyAbstractArrayProperty <NameEntity> {

  //····················································································································
  //   Observers of 'name' stored property
  //····················································································································

  private var mObserversOf_name = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_name (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_name.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.name_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_name (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_name.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.name_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_name_toElementsOfSet (_ inSet : Set<NameEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_name {
        managedObject.name_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_name_fromElementsOfSet (_ inSet : Set<NameEntity>) {
    for observer in mObserversOf_name {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.name_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'aValue' stored property
  //····················································································································

  private var mObserversOf_aValue = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_aValue (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_aValue.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.aValue_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_aValue (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_aValue.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.aValue_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_aValue_toElementsOfSet (_ inSet : Set<NameEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_aValue {
        managedObject.aValue_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_aValue_fromElementsOfSet (_ inSet : Set<NameEntity>) {
    for observer in mObserversOf_aValue {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.aValue_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_NameEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_NameEntity : ReadOnlyArrayOf_NameEntity {

  var readModelFunction : Optional<() -> EBSelection < [NameEntity] > >

  private var prop_cache : EBSelection < [NameEntity] >? 

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <NameEntity> ()

  override var prop : EBSelection < [NameEntity] > {
    get {
      if let unwrappedComputeFunction = readModelFunction, prop_cache == nil {
        prop_cache = unwrappedComputeFunction ()
        let newSet : Set <NameEntity>
        switch prop_cache! {
        case .multiple, .empty :
          newSet = Set <NameEntity> ()
        case .single (let array) :
          newSet = Set (array)
        }
     //--- Removed object set
        let removedSet = mSet.subtracting (newSet)
      //--- Remove observers of stored properties
        removeEBObserversOf_name_fromElementsOfSet (removedSet)
        removeEBObserversOf_aValue_fromElementsOfSet (removedSet)
      //--- Remove observers of transient properties
      //--- Added object set
        let addedSet = newSet.subtracting (mSet)
       //--- Add observers of stored properties
        addEBObserversOf_name_toElementsOfSet (addedSet)
        addEBObserversOf_aValue_toElementsOfSet (addedSet)
       //--- Add observers of transient properties
      //--- Update object set
        mSet = newSet
      }
      if prop_cache == nil {
        prop_cache = .empty
      }
      return prop_cache!
    }
  }

  //····················································································································

  override func postEvent () {
    if prop_cache != nil {
      prop_cache = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NameEntity_name : class {
  var name : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NameEntity_aValue : class {
  var aValue : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To one relationship: mRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToOneRelationship_NameEntity_mRoot : EBAbstractProperty {
  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button:unwrappedExplorer)
        }
      }
    }
  }

  weak var owner : NameEntity? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        updateManagedObjectToOneRelationshipDisplay (object: propval, button:unwrappedExplorer)
      }
    }
  }
 
  weak private var mValue : MyRootEntity? {
    didSet {
      if let unwrappedOwner = owner, oldValue !== mValue {
      //--- Register old value in undo manager
        unwrappedOwner.undoManager()?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let unwrappedExplorer = mValueExplorer {
          updateManagedObjectToOneRelationshipDisplay (object: mValue, button:unwrappedExplorer)
        }
      //--- Reset old opposite relation ship
        if let unwrappedOldValue = oldValue {
          unwrappedOldValue.mNames_property.remove (unwrappedOwner)
        }
      //--- Set new opposite relation ship
        if let unwrappedValue = mValue {
          unwrappedValue.mNames_property.add (unwrappedOwner)
        }
      //--- Notify observers
        postEvent ()
      }
    }
  }

  var propval : MyRootEntity? { get { return mValue } }

  var prop : EBSelection <MyRootEntity?> { get { return .single (mValue) } }

  func setProp (_ value : MyRootEntity?) { mValue = value }

  //····················································································································

  func performUndo (_ oldValue : MyRootEntity?) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : MyRootEntity) {
    if mValue === object {
      mValue = nil
    }
  }
  
  //····················································································································

  func add (_ object : MyRootEntity) {
    mValue = object
  }

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

