//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_NameEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_NameEntity : ReadOnlyAbstractArrayProperty <NameEntity> {

  //····················································································································
  //   Observers of 'name' stored property
  //····················································································································

  private var mObserversOf_name = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_name (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_name.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.name.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_name (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_name.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.name.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_name_toElementsOfSet (_ inSet : Set<NameEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_name {
        managedObject.name.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_name_fromElementsOfSet (_ inSet : Set<NameEntity>) {
    for observer in mObserversOf_name {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.name.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'aValue' stored property
  //····················································································································

  private var mObserversOf_aValue = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_aValue (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_aValue.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.aValue.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_aValue (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_aValue.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.aValue.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_aValue_toElementsOfSet (_ inSet : Set<NameEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_aValue {
        managedObject.aValue.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_aValue_fromElementsOfSet (_ inSet : Set<NameEntity>) {
    for observer in mObserversOf_aValue {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.aValue.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_NameEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_NameEntity : ReadOnlyArrayOf_NameEntity {

  var readModelFunction : Optional<() -> EBProperty < [NameEntity] > >

  private var prop_cache : EBProperty < [NameEntity] >? 

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <NameEntity> ()

  override var prop : EBProperty < [NameEntity] > {
    get {
      if let unwrappedComputeFunction = readModelFunction, prop_cache == nil {
        prop_cache = unwrappedComputeFunction ()
        let newSet : Set <NameEntity>
        switch prop_cache! {
        case .multipleSelection, .noSelection :
          newSet = Set <NameEntity> ()
        case .singleSelection (let array) :
          newSet = Set (array)
        }
     //--- Removed object set
        let removedSet = mSet.subtracting (newSet)
        removeEBObserversOf_name_fromElementsOfSet (removedSet)
        removeEBObserversOf_aValue_fromElementsOfSet (removedSet)
      //--- Added object set
        let addedSet = newSet.subtracting (mSet)
        addEBObserversOf_name_toElementsOfSet (addedSet)
        addEBObserversOf_aValue_toElementsOfSet (addedSet)
      //--- Update object set
        mSet = newSet
      }
      if prop_cache == nil {
        prop_cache = .noSelection
      }
      return prop_cache!
    }
  }

  //····················································································································

  override func postEvent () {
    if prop_cache != nil {
      prop_cache = nil
      super.postEvent ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NameEntity_name : class {
  var name : EBStoredProperty_String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NameEntity_aValue : class {
  var aValue : EBStoredProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To one relationship: mRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToOneRelationship_NameEntity_mRoot : EBAbstractProperty {
  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .noSelection, .multipleSelection :
          break ;
        case .singleSelection (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button:unwrappedExplorer)
        }
      }
    }
  }

  weak var owner : NameEntity? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        updateManagedObjectToOneRelationshipDisplay (object: propval, button:unwrappedExplorer)
      }
    }
  }
 
  weak private var mValue : MyRootEntity? {
    didSet {
      if let unwrappedOwner = owner, oldValue !== mValue {
      //--- Register old value in undo manager
        unwrappedOwner.undoManager()?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let unwrappedExplorer = mValueExplorer {
          updateManagedObjectToOneRelationshipDisplay (object: mValue, button:unwrappedExplorer)
        }
      //--- Reset old opposite relation ship
        if let unwrappedOldValue = oldValue {
          unwrappedOldValue.mNames.remove (unwrappedOwner)
        }
      //--- Set new opposite relation ship
        if let unwrappedValue = mValue {
          unwrappedValue.mNames.add (unwrappedOwner)
        }
      //--- Notify observers
        postEvent ()
      }
    }
  }

  var propval : MyRootEntity? { get { return mValue } }

  var prop : EBProperty <MyRootEntity?> { get { return .singleSelection (mValue) } }

  func setProp (_ value : MyRootEntity?) { mValue = value }

  //····················································································································

  func performUndo (_ oldValue : MyRootEntity?) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : MyRootEntity) {
    if mValue === object {
      mValue = nil
    }
  }
  
  //····················································································································

  func add (_ object : MyRootEntity) {
    mValue = object
  }

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: NameEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class NameEntity : EBManagedObject, NameEntity_name, NameEntity_aValue
{

  //····················································································································
  //    Properties
  //····················································································································

  var name = EBStoredProperty_String ("Name")

  var aValue = EBStoredProperty_Int (100)

  //····················································································································
  //    Transient properties
  //····················································································································


  //····················································································································
  //    Relationships
  //····················································································································

  var mRoot = ToOneRelationship_NameEntity_mRoot ()

  //····················································································································
  //    init
  //····················································································································

  override init (managedObjectContext : EBManagedObjectContext) {
    super.init (managedObjectContext:managedObjectContext)
  //--- Install compute functions for transients
  //--- Install property observers for transients
  //--- Install undoers for properties
    self.name.undoManager = undoManager ()
    self.aValue.undoManager = undoManager ()
  //--- Install owner for relationships
    mRoot.owner = self
  //--- register properties for handling signature
  }

  //····················································································································

  deinit {
  //--- Remove observers
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "name",
      idx:self.name.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.name.mObserverExplorer,
      valueExplorer:&self.name.mValueExplorer
    )
    createEntryForPropertyNamed (
      "aValue",
      idx:self.aValue.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.aValue.mObserverExplorer,
      valueExplorer:&self.aValue.mValueExplorer
    )
    createEntryForToOneRelationshipNamed (
      "mRoot",
      idx:mRoot.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mRoot.mValueExplorer
    )
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
    self.name.mObserverExplorer = nil
    self.name.mValueExplorer = nil
    self.aValue.mObserverExplorer = nil
    self.aValue.mValueExplorer = nil
    mRoot.mObserverExplorer = nil
    mRoot.mValueExplorer = nil
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    self.name.storeIn (dictionary: ioDictionary, forKey: "name")
    self.aValue.storeIn (dictionary: ioDictionary, forKey: "aValue")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
    self.name.readFrom (dictionary: inDictionary, forKey:"name")
    self.aValue.readFrom (dictionary: inDictionary, forKey:"aValue")
  }

  //····················································································································
  //   resetToOneRelationships
  //····················································································································

  override func resetToOneRelationships () {
    super.resetToOneRelationships ()
    mRoot.setProp (nil)
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
    if let object = mRoot.propval {
      objects.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

