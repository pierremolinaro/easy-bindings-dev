
entity MyRootEntity {
  toMany NameEntity mNames inverse toOne mRoot ;
}

#--------------------------------------------------------------*

entity NameEntity {
  toOne MyRootEntity mRoot inverse toMany mNames ;
  property String name default "Name" ;
  property Int aValue default 100 ;
}

#--------------------------------------------------------------*

document PMDocument root MyRootEntity {
  outlet EBTableView mNamesTableView $tableValue nameController ;
  arrayController nameController {allowsEmptySelection:no, allowsMultipleSelection:yes} : root.mNames
     column "name" EBTextField name { sendContinously : no}
     column "int"  EBIntField aValue { sendContinously : no}
  ;

  outlet EBTableView mOtherTableView $tableValue otherController ;
  arrayController otherController {allowsEmptySelection:no, allowsMultipleSelection:yes} : root.mNames filter aValue
     column "name" EBTextField name { sendContinously : no}
     column "int"  EBIntField aValue { sendContinously : no}
  ;

  outlet EBTableView mSelectionTableView $tableValue selController ;
  arrayController selController {allowsEmptySelection:no, allowsMultipleSelection:yes} : nameController.selectedArray
     column "name" EBTextField name { sendContinously : no}
     column "int"  EBIntField aValue { sendContinously : no}
  ;

  transient String selectionCountString dependsFrom selController.sortedArray.count ;
  outlet EBTextObserverField mSelectionCountTextField $valueObserver self.selectionCountString ;

  transient String evenValueString dependsFrom otherController.sortedArray.count ;
  outlet EBTextObserverField evenValueTextField $valueObserver self.evenValueString ;

  transient String canRemoveString dependsFrom nameController.selectedArray.count ;
  outlet EBTextObserverField canRemoveTextField $valueObserver self.canRemoveString ;

  outlet EBButton addPathButton $run nameController.add ;

  outlet EBButton removePathButton $run nameController.remove $enabled nameController.selectedArray.count > 0 ;

  outlet EBIntObserverField countItemTextField $valueObserver root.mNames.count {autoFormatter:no} ;

  transient String countItemMessage dependsFrom root.mNames.count ;

  outlet EBTextObserverField countItemMessageTextField $valueObserver self.countItemMessage  ;

  transient Int total dependsFrom root.mNames.all.aValue ;
  outlet EBIntObserverField totalTextField $valueObserver self.total {autoFormatter:no} ;
  
  action increment ;
  outlet EBButton incrementButton $run self.increment $enabled root.mNames.count > 0 ;
  
  action decrement ;
  outlet EBButton decrementButton $run self.decrement $enabled root.mNames.count > 0 ;
  
  selectionController detailController : nameController.selectedArray ;
  outlet EBTextField nameDetailTextField $value detailController.name { sendContinously : yes} ;
  outlet EBIntField valueDetailTextField $value detailController.aValue { sendContinously : yes, autoFormatter:no} ;
}

#--------------------------------------------------------------*

