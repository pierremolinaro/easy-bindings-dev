//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(MyDocument) class MyDocument : EBManagedDocument {

  //····················································································································
  //   Transient property: documentFilePath
  //····················································································································

  var documentFilePath_property = EBTransientProperty_String ()

  //····················································································································

  var documentFilePath_property_selection : EBSelection <String> {
    return self.documentFilePath_property.prop
  }

  //····················································································································

    var documentFilePath : String? {
    switch self.documentFilePath_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }


  //····················································································································
  //    Outlets
  //····················································································································

  @IBOutlet var docBoolCheckBox : EBSwitch?
  @IBOutlet var myButton : EBButton?

  //····················································································································
  //    Multiple bindings controllers
  //····················································································································

  var mController_myButton_enabled : MultipleBindingController_enabled? = nil

  //····················································································································
  //    Document file path
  //····················································································································
  // Cette méthode est appelée après tout enregistrement, qu'il y ait changement de nom ou pas.

  override var fileModificationDate : Date? {
    get {
      return super.fileModificationDate
    }
    set{
      super.fileModificationDate = newValue
      self.documentFilePath_property.postEvent ()
    }
  }

  //····················································································································

  func computeTransient_documentFilePath () -> String {
    var documentFilePath = ""
    if let url = self.fileURL {
      documentFilePath = url.path
    }
    return documentFilePath
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
  //---
    super.populateExplorerWindow (&y, view:view)
  }

  //····················································································································
  //    windowNibName
  //····················································································································

  override var windowNibName : NSNib.Name {
    return NSNib.Name ("MyDocument")
  }
  
  //····················································································································
  //    rootEntityClassName
  //····················································································································

  override func rootEntityClassName () -> String {
    return "MyRootEntity"
  }

  //····················································································································
  //    rootObject
  //····················································································································

  var rootObject : MyRootEntity { get { return mRootObject as! MyRootEntity } }

  //····················································································································
  //    windowControllerDidLoadNib
  //····················································································································

  override func windowControllerDidLoadNib (_ aController: NSWindowController) {
  //--------------------------- Outlet checking
    if let outlet : Any = self.docBoolCheckBox {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'docBoolCheckBox' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'docBoolCheckBox' outlet is nil") ;
    }
    if let outlet : Any = self.myButton {
      if !(outlet is EBButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'myButton' outlet is not an instance of 'EBButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'myButton' outlet is nil") ;
    }
  //--------------------------- Install regular bindings
    docBoolCheckBox?.bind_value (self.rootObject.docBool_property, file: #file, line: #line)
  //--------------------------- Install multiple bindings
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction:{
          return (!self.rootObject.docBool_property_selection && g_Preferences!.prefBoolean_property_selection)
        },
        outlet:self.myButton
      )
      g_Preferences!.prefBoolean_property.addEBObserver (controller)
      self.rootObject.docBool_property.addEBObserver (controller)
      mController_myButton_enabled = controller
    }
  //--------------------------- Set targets / actions
  //--------------------------- Update display
    super.windowControllerDidLoadNib (aController)
    flushOutletEvents ()
  }

  //····················································································································
  //   removeWindowController
  //····················································································································

  override func removeUserInterface () {
  //--------------------------- Unbind regular bindings
    docBoolCheckBox?.unbind_value ()
  //--------------------------- Unbind multiple bindings
    g_Preferences!.prefBoolean_property.removeEBObserver (mController_myButton_enabled!)
    self.rootObject.docBool_property.removeEBObserver (mController_myButton_enabled!)
    mController_myButton_enabled = nil
  //--------------------------- Unbind array controllers
  //--------------------------- Remove targets / actions
  //--------------------------- Clean up outlets
    self.docBoolCheckBox?.ebCleanUp ()
    self.myButton?.ebCleanUp ()
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

