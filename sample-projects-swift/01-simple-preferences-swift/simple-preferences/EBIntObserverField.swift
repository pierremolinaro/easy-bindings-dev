//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
//   EBIntObserverField
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

@objc(EBIntObserverField) class EBIntObserverField : NSTextField, EBUserClassNameProtocol {

  //···················································································································*

  required init? (coder: NSCoder) {
    super.init (coder:coder)
    self.editable = false
    self.drawsBackground = false
    self.bordered = false
    noteObjectAllocation (self)
  }

  //···················································································································*

  override init (frame:NSRect) {
    super.init (frame:frame)
    self.editable = false
    self.drawsBackground = false
    self.bordered = false
    noteObjectAllocation (self)
  }
  
  //···················································································································*

  deinit {
    noteObjectDeallocation (self)
  }

  //···················································································································*
  //  valueObserver binding                                                                                            *
  //···················································································································*

  private var mValueController : Controller_EBIntObserverField_readOnlyValue?

  //···················································································································*

  func bind_valueObserver (object:EBReadOnlyProperty <Int>, file:String, line:Int, autoFormatter:Bool) {
    mValueController = Controller_EBIntObserverField_readOnlyValue (
      object:object,
      outlet:self,
      file:file,
      line:line,
      autoFormatter:autoFormatter
    )
  }

  //···················································································································*

  func unbind_valueObserver () {
    mValueController?.unregister ()
    mValueController = nil
  }

  //···················································································································*

}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
//   Controller_EBIntObserverField_readOnlyValue                                                                       *
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

@objc(Controller_EBIntObserverField_readOnlyValue)
final class Controller_EBIntObserverField_readOnlyValue : EBSimpleController {

  private let mObject : EBReadOnlyProperty <Int>
  private let mOutlet : EBIntObserverField

  //···················································································································*

  init (object : EBReadOnlyProperty <Int>, outlet : EBIntObserverField, file : String, line : Int, autoFormatter:Bool) {
    mObject = object
    mOutlet = outlet
    super.init (objects:[object], outlet:outlet)
    if autoFormatter {
      let formatter = NSNumberFormatter ()
      mOutlet.formatter = formatter
    }else if mOutlet.formatter == nil {
      presentErrorWindow (file, line:line, errorMessage:"the outlet has no formatter")
    }else if !(mOutlet.formatter is NSNumberFormatter) {
      presentErrorWindow (file, line:line, errorMessage:"the formatter should be an NSNumberFormatter")
    }
    mObject.addEBObserver (self)
  }

  //···················································································································*
  
  func unregister () {
    mObject.removeEBObserver (self)
    mOutlet.removeFromEnabledFromValueDictionary ()
  }

  //···················································································································*

  override func sendUpdateEvent () {
    switch mObject.prop {
    case .noSelection :
      mOutlet.enableFromValue (false)
      mOutlet.stringValue = "No Selection"
    case .singleSelection (let v) :
      mOutlet.enableFromValue (true)
      mOutlet.integerValue = v
    case .multipleSelection :
      mOutlet.enableFromValue (false)
      mOutlet.stringValue = "Multiple Selection"
    }
    mOutlet.updateEnabledState()
  }

  //···················································································································*
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBIntObserverField_TableViewCell
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBIntObserverField_TableViewCell) class EBIntObserverField_TableViewCell : EBTableCellView {
  @IBOutlet var mCellOutlet : EBIntObserverField?

  //····················································································································

  func checkOutlet (columnName : String, file:String, line:Int) {
    if let cellOutlet : NSObject = mCellOutlet {
      if !(cellOutlet is EBIntObserverField) {
        presentErrorWindow (file,
          line: line,
          errorMessage:"\"\(columnName)\" column view is not an instance of EBIntObserverField"
        )
      }
    }else{
      presentErrorWindow (file,
        line: line,
        errorMessage:"\"\(columnName)\" column view mCellOutlet is nil (should be an instance of EBIntObserverField)"
      )
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
