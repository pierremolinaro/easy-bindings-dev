//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

var g_Preferences : Preferences? = nil

//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

@objc(Preferences) class Preferences : EBObject {

  //····················································································································
  //    Outlets
  //····················································································································

  @IBOutlet var mColorWell : EBColorWell? = nil
  @IBOutlet var mContinuousColorWell : EBColorWell? = nil
  @IBOutlet var mDatePicker : EBDatePicker? = nil
  @IBOutlet var mIntegerObserverTextField : EBIntObserverField? = nil
  @IBOutlet var mIntegerTextField : EBIntField? = nil
  @IBOutlet var mObserverColorWell : EBColorObserverWell? = nil
  @IBOutlet var myObserverTextField : EBTextObserverField? = nil
  @IBOutlet var myOtherTextField : EBTextField? = nil
  @IBOutlet var myTextField : EBTextField? = nil

  //····················································································································
  //   Accessing myString stored property
  //····················································································································

  var myString : String {
    get {
      return self.myString_property.propval
    }
    set {
      self.myString_property.setProp (newValue)
    }
  }

  var myString_property_selection : EBSelection <String> {
    get {
      return self.myString_property.prop
    }
  }

  //····················································································································
  //   Accessing mColor stored property
  //····················································································································

  var mColor : NSColor {
    get {
      return self.mColor_property.propval
    }
    set {
      self.mColor_property.setProp (newValue)
    }
  }

  var mColor_property_selection : EBSelection <NSColor> {
    get {
      return self.mColor_property.prop
    }
  }

  //····················································································································
  //   Accessing mDate stored property
  //····················································································································

  var mDate : Date {
    get {
      return self.mDate_property.propval
    }
    set {
      self.mDate_property.setProp (newValue)
    }
  }

  var mDate_property_selection : EBSelection <Date> {
    get {
      return self.mDate_property.prop
    }
  }

  //····················································································································
  //   Accessing mIntegerValue stored property
  //····················································································································

  var mIntegerValue : Int {
    get {
      return self.mIntegerValue_property.propval
    }
    set {
      self.mIntegerValue_property.setProp (newValue)
    }
  }

  var mIntegerValue_property_selection : EBSelection <Int> {
    get {
      return self.mIntegerValue_property.prop
    }
  }
  func mIntegerValue_validateAndSetProp (_ inCandidateValue : Int, windowForSheet inWindow:NSWindow?) -> Bool {
    return self.mIntegerValue_property.validateAndSetProp (inCandidateValue, windowForSheet:inWindow)
  }

  //····················································································································
  //    Simple Stored Properties
  //····················································································································

  var myString_property = EBStoredProperty_String ("hello")
  var mColor_property = EBStoredProperty_NSColor (NSColor.yellow)
  var mDate_property = EBStoredProperty_Date (Date ())
  var mIntegerValue_property = EBStoredProperty_Int (12)

  //····················································································································
  //    Stored Array Properties
  //····················································································································


  //····················································································································
  //    Transient properties
  //····················································································································



  //····················································································································
  //    Array Controllers
  //····················································································································



  //····················································································································
  //    Init
  //····················································································································

  override init () {
    super.init ()
    g_Preferences = self ;
  //--- Read from preferences
    self.myString_property.readInPreferencesWithKey (inKey:"Preferences:myString")
    self.mColor_property.readInPreferencesWithKey (inKey:"Preferences:mColor")
    self.mDate_property.readInPreferencesWithKey (inKey:"Preferences:mDate")
    self.mIntegerValue_property.readInPreferencesWithKey (inKey:"Preferences:mIntegerValue")
  //--- Property validation function
    self.mIntegerValue_property.validationFunction = self.validate_mIntegerValue
  //---
    NotificationCenter.default.addObserver (self,
     selector:#selector(Preferences.applicationWillTerminateAction(_:)),
     name:NSNotification.Name.NSApplicationWillTerminate,
     object:nil
    )
  //--- Extern functions
  }

  //····················································································································

  @IBOutlet private var window : NSWindow?
  let OUTLET_WIDTH = 200.0
  let OUTLET_HEIGHT = 22.0

  //····················································································································
  //    awakeFromNib
  //····················································································································

  override func awakeFromNib () {
    var y = OUTLET_HEIGHT * 1.5 * 9.0
    let view = NSView (frame:NSRect (x:0.0, y:0.0, width:10.0, height:10.0))
    y -= OUTLET_HEIGHT
  //--- Text String:
  //  createTextFieldForText ("String:", y:&y, col:0, view:view)
    let tf1 = NSTextField (frame:NSRect (x:10.0 + OUTLET_WIDTH * 0.0, y:y, width:OUTLET_WIDTH, height:OUTLET_HEIGHT))
    tf1.stringValue = "String:"
    tf1.isEditable = false
    tf1.drawsBackground = false
    tf1.isBordered = false
    view.addSubview (tf1)
  //--- Outlet myTextField
    myTextField = EBTextField(frame:NSRect (x:10.0 + OUTLET_WIDTH * 1.0, y:y, width:OUTLET_WIDTH, height:OUTLET_HEIGHT))
    myTextField?.setAccessibilityIdentifier ("myTextField")
    view.addSubview (myTextField!)
    y -= OUTLET_HEIGHT / 2.0
    y -= OUTLET_HEIGHT
  //--- Text String (send continously): 
  //  createTextFieldForText ("String (send continously): ", y:&y, col:0, view:view)
    let tf2 = NSTextField (frame:NSRect (x:10.0 + OUTLET_WIDTH * 0.0, y:y, width:OUTLET_WIDTH, height:OUTLET_HEIGHT))
    tf2.stringValue = "String (send continously): "
    tf2.isEditable = false
    tf2.drawsBackground = false
    tf2.isBordered = false
    view.addSubview (tf2)
  //--- Outlet myOtherTextField
    myOtherTextField = EBTextField(frame:NSRect (x:10.0 + OUTLET_WIDTH * 1.0, y:y, width:OUTLET_WIDTH, height:OUTLET_HEIGHT))
    myOtherTextField?.setAccessibilityIdentifier ("myOtherTextField")
    view.addSubview (myOtherTextField!)
    y -= OUTLET_HEIGHT / 2.0
    y -= OUTLET_HEIGHT
  //--- Text String observer:
  //  createTextFieldForText ("String observer:", y:&y, col:0, view:view)
    let tf3 = NSTextField (frame:NSRect (x:10.0 + OUTLET_WIDTH * 0.0, y:y, width:OUTLET_WIDTH, height:OUTLET_HEIGHT))
    tf3.stringValue = "String observer:"
    tf3.isEditable = false
    tf3.drawsBackground = false
    tf3.isBordered = false
    view.addSubview (tf3)
  //--- Outlet myObserverTextField
    myObserverTextField = EBTextObserverField(frame:NSRect (x:10.0 + OUTLET_WIDTH * 1.0, y:y, width:OUTLET_WIDTH, height:OUTLET_HEIGHT))
    myObserverTextField?.setAccessibilityIdentifier ("myObserverTextField")
    view.addSubview (myObserverTextField!)
    y -= OUTLET_HEIGHT / 2.0
    y -= OUTLET_HEIGHT
  //--- Text Color:
  //  createTextFieldForText ("Color:", y:&y, col:0, view:view)
    let tf4 = NSTextField (frame:NSRect (x:10.0 + OUTLET_WIDTH * 0.0, y:y, width:OUTLET_WIDTH, height:OUTLET_HEIGHT))
    tf4.stringValue = "Color:"
    tf4.isEditable = false
    tf4.drawsBackground = false
    tf4.isBordered = false
    view.addSubview (tf4)
  //--- Outlet mColorWell
    mColorWell = EBColorWell(frame:NSRect (x:10.0 + OUTLET_WIDTH * 1.0, y:y, width:OUTLET_WIDTH, height:OUTLET_HEIGHT))
    mColorWell?.setAccessibilityIdentifier ("mColorWell")
    view.addSubview (mColorWell!)
    y -= OUTLET_HEIGHT / 2.0
    y -= OUTLET_HEIGHT
  //--- Text Color (send continously):
  //  createTextFieldForText ("Color (send continously):", y:&y, col:0, view:view)
    let tf5 = NSTextField (frame:NSRect (x:10.0 + OUTLET_WIDTH * 0.0, y:y, width:OUTLET_WIDTH, height:OUTLET_HEIGHT))
    tf5.stringValue = "Color (send continously):"
    tf5.isEditable = false
    tf5.drawsBackground = false
    tf5.isBordered = false
    view.addSubview (tf5)
  //--- Outlet mContinuousColorWell
    mContinuousColorWell = EBColorWell(frame:NSRect (x:10.0 + OUTLET_WIDTH * 1.0, y:y, width:OUTLET_WIDTH, height:OUTLET_HEIGHT))
    mContinuousColorWell?.setAccessibilityIdentifier ("mContinuousColorWell")
    view.addSubview (mContinuousColorWell!)
    y -= OUTLET_HEIGHT / 2.0
    y -= OUTLET_HEIGHT
  //--- Text Color Observer:
  //  createTextFieldForText ("Color Observer:", y:&y, col:0, view:view)
    let tf6 = NSTextField (frame:NSRect (x:10.0 + OUTLET_WIDTH * 0.0, y:y, width:OUTLET_WIDTH, height:OUTLET_HEIGHT))
    tf6.stringValue = "Color Observer:"
    tf6.isEditable = false
    tf6.drawsBackground = false
    tf6.isBordered = false
    view.addSubview (tf6)
  //--- Outlet mObserverColorWell
    mObserverColorWell = EBColorObserverWell(frame:NSRect (x:10.0 + OUTLET_WIDTH * 1.0, y:y, width:OUTLET_WIDTH, height:OUTLET_HEIGHT))
    mObserverColorWell?.setAccessibilityIdentifier ("mObserverColorWell")
    view.addSubview (mObserverColorWell!)
    y -= OUTLET_HEIGHT / 2.0
    y -= OUTLET_HEIGHT
  //--- Text Date:
  //  createTextFieldForText ("Date:", y:&y, col:0, view:view)
    let tf7 = NSTextField (frame:NSRect (x:10.0 + OUTLET_WIDTH * 0.0, y:y, width:OUTLET_WIDTH, height:OUTLET_HEIGHT))
    tf7.stringValue = "Date:"
    tf7.isEditable = false
    tf7.drawsBackground = false
    tf7.isBordered = false
    view.addSubview (tf7)
  //--- Outlet mDatePicker
    mDatePicker = EBDatePicker(frame:NSRect (x:10.0 + OUTLET_WIDTH * 1.0, y:y, width:OUTLET_WIDTH, height:OUTLET_HEIGHT))
    mDatePicker?.setAccessibilityIdentifier ("mDatePicker")
    view.addSubview (mDatePicker!)
    y -= OUTLET_HEIGHT / 2.0
    y -= OUTLET_HEIGHT
  //--- Text Even Integer:
  //  createTextFieldForText ("Even Integer:", y:&y, col:0, view:view)
    let tf8 = NSTextField (frame:NSRect (x:10.0 + OUTLET_WIDTH * 0.0, y:y, width:OUTLET_WIDTH, height:OUTLET_HEIGHT))
    tf8.stringValue = "Even Integer:"
    tf8.isEditable = false
    tf8.drawsBackground = false
    tf8.isBordered = false
    view.addSubview (tf8)
  //--- Outlet mIntegerTextField
    mIntegerTextField = EBIntField(frame:NSRect (x:10.0 + OUTLET_WIDTH * 1.0, y:y, width:OUTLET_WIDTH, height:OUTLET_HEIGHT))
    mIntegerTextField?.setAccessibilityIdentifier ("mIntegerTextField")
    view.addSubview (mIntegerTextField!)
    y -= OUTLET_HEIGHT / 2.0
    y -= OUTLET_HEIGHT
  //--- Text Even Integer Observer:
  //  createTextFieldForText ("Even Integer Observer:", y:&y, col:0, view:view)
    let tf9 = NSTextField (frame:NSRect (x:10.0 + OUTLET_WIDTH * 0.0, y:y, width:OUTLET_WIDTH, height:OUTLET_HEIGHT))
    tf9.stringValue = "Even Integer Observer:"
    tf9.isEditable = false
    tf9.drawsBackground = false
    tf9.isBordered = false
    view.addSubview (tf9)
  //--- Outlet mIntegerObserverTextField
    mIntegerObserverTextField = EBIntObserverField(frame:NSRect (x:10.0 + OUTLET_WIDTH * 1.0, y:y, width:OUTLET_WIDTH, height:OUTLET_HEIGHT))
    mIntegerObserverTextField?.setAccessibilityIdentifier ("mIntegerObserverTextField")
    view.addSubview (mIntegerObserverTextField!)
    y -= OUTLET_HEIGHT / 2.0
  //--- Set pref window content view
    window?.setContentSize (NSSize (width:20.0 + OUTLET_WIDTH * 2.0, height:OUTLET_HEIGHT * (1.5 * 9.0 + 0.5)))
    window?.contentView = view
  //--------------------------- Check mColorWell' outlet not nil
    if nil == mColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mColorWell' outlet is nil")
    }
  //--------------------------- Check mContinuousColorWell' outlet not nil
    if nil == mContinuousColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mContinuousColorWell' outlet is nil")
    }
  //--------------------------- Check mDatePicker' outlet not nil
    if nil == mDatePicker {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mDatePicker' outlet is nil")
    }
  //--------------------------- Check mIntegerObserverTextField' outlet not nil
    if nil == mIntegerObserverTextField {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mIntegerObserverTextField' outlet is nil")
    }
  //--------------------------- Check mIntegerTextField' outlet not nil
    if nil == mIntegerTextField {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mIntegerTextField' outlet is nil")
    }
  //--------------------------- Check mObserverColorWell' outlet not nil
    if nil == mObserverColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mObserverColorWell' outlet is nil")
    }
  //--------------------------- Check myObserverTextField' outlet not nil
    if nil == myObserverTextField {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'myObserverTextField' outlet is nil")
    }
  //--------------------------- Check myOtherTextField' outlet not nil
    if nil == myOtherTextField {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'myOtherTextField' outlet is nil")
    }
  //--------------------------- Check myTextField' outlet not nil
    if nil == myTextField {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'myTextField' outlet is nil")
    }
  //--------------------------- Install compute functions for transients
  //--------------------------- Install property observers for transients
  //--------------------------- Install bindings
    myTextField?.bind_value (self.myString_property, file: #file, line: #line, sendContinously:false)
    myOtherTextField?.bind_value (self.myString_property, file: #file, line: #line, sendContinously:true)
    myObserverTextField?.bind_valueObserver (self.myString_property, file: #file, line: #line)
    mContinuousColorWell?.bind_color (self.mColor_property, file: #file, line: #line, sendContinously:true)
    mColorWell?.bind_color (self.mColor_property, file: #file, line: #line, sendContinously:false)
    mObserverColorWell?.bind_colorObserver (self.mColor_property, file: #file, line: #line)
    mDatePicker?.bind_date (self.mDate_property, file: #file, line: #line)
    mIntegerTextField?.bind_value (self.mIntegerValue_property, file: #file, line: #line, sendContinously:true, autoFormatter:true)
    mIntegerObserverTextField?.bind_valueObserver (self.mIntegerValue_property, file: #file, line: #line, autoFormatter:true)
  //--------------------------- Install multiple bindings
  //--------------------------- Array controller
  //--------------------------- Set targets / actions
  //--------------------------- Extern functions
  }

  //····················································································································
  //    Multiple bindings controller
  //····················································································································


  //····················································································································
  //    applicationWillTerminateAction
  //····················································································································

  func applicationWillTerminateAction (_ : NSNotification) {
    self.myString_property.storeInPreferencesWithKey (inKey:"Preferences:myString")
    self.mColor_property.storeInPreferencesWithKey (inKey:"Preferences:mColor")
    self.mDate_property.storeInPreferencesWithKey (inKey:"Preferences:mDate")
    self.mIntegerValue_property.storeInPreferencesWithKey (inKey:"Preferences:mIntegerValue")
  }

  //····················································································································

}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

