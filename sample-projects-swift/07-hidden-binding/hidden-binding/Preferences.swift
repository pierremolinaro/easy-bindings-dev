//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

var g_Preferences : Preferences? = nil

//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

let Preferences_myHidden2 = "Preferences:myHidden2"
let Preferences_myHidden1 = "Preferences:myHidden1"

//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

@objc(Preferences) class Preferences : EBObject, NSWindowDelegate {

  //····················································································································
  //   Atomic property: myHidden2
  //····················································································································

  var myHidden2_property = EBStoredProperty_Bool (false, prefKey: Preferences_myHidden2)

  //····················································································································

  var myHidden2 : Bool {
    get {
      return self.myHidden2_property.propval
    }
    set {
      self.myHidden2_property.setProp (newValue)
    }
  }

  //····················································································································

  var myHidden2_property_selection : EBSelection <Bool> {
    return self.myHidden2_property.prop
  }

  //····················································································································
  //   Atomic property: myHidden1
  //····················································································································

  var myHidden1_property = EBStoredProperty_Bool (false, prefKey: Preferences_myHidden1)

  //····················································································································

  var myHidden1 : Bool {
    get {
      return self.myHidden1_property.propval
    }
    set {
      self.myHidden1_property.setProp (newValue)
    }
  }

  //····················································································································

  var myHidden1_property_selection : EBSelection <Bool> {
    return self.myHidden1_property.prop
  }

  //····················································································································
  //    Outlets
  //····················································································································

  @IBOutlet var mButton : EBButton? = nil
  @IBOutlet var myHidden1Switch : EBSwitch? = nil
  @IBOutlet var myHidden2Switch : EBSwitch? = nil

  //····················································································································
  //    Multiple bindings controllers
  //····················································································································

  private var mController_mButton_hidden : MultipleBindingController_hidden?

  //····················································································································
  //    Undo Manager
  //····················································································································

  private var undoManager = EBUndoManager ()

  //····················································································································
  // The preferences window should register this object as delegate (do it in Interface Builder)

  @objc func windowWillReturnUndoManager (_ window: NSWindow) -> UndoManager? {
    return self.undoManager
  }

  //····················································································································
  //    Init
  //····················································································································

  override init () {
    super.init ()
    g_Preferences = self ;
  //--- Read from preferences
  //--- Atomic property: myHidden2
    self.myHidden2_property.undoManager = self.undoManager
  //--- Atomic property: myHidden1
    self.myHidden1_property.undoManager = self.undoManager
  //--- Notify application will terminate
    NotificationCenter.default.addObserver (self,
      selector:#selector(Preferences.applicationWillTerminateAction(_:)),
      name:NSApplication.willTerminateNotification,
      object:nil
    )
  //--- Extern functions
  }

  //····················································································································

  @IBOutlet private var window : NSWindow?
  let OUTLET_WIDTH = 200.0
  let OUTLET_HEIGHT = 22.0

  //····················································································································
  //    awakeFromNib
  //····················································································································

  override func awakeFromNib () {
    var y = OUTLET_HEIGHT * 1.5 * 3.0
    let view = NSView (frame:NSRect (x:0.0, y:0.0, width:10.0, height:10.0))
    y -= OUTLET_HEIGHT
  //--- Text Hidden1:
  //  createTextFieldForText ("Hidden1:", y:&y, col:0, view:view)
    let tf1 = NSTextField (frame:NSRect (x:10.0 + OUTLET_WIDTH * 0.0, y:y, width:OUTLET_WIDTH, height:OUTLET_HEIGHT))
    tf1.stringValue = "Hidden1:"
    tf1.isEditable = false
    tf1.drawsBackground = false
    tf1.isBordered = false
    view.addSubview (tf1)
  //--- Outlet myHidden1Switch
    myHidden1Switch = EBSwitch(frame:NSRect (x:10.0 + OUTLET_WIDTH * 1.0, y:y, width:OUTLET_WIDTH, height:OUTLET_HEIGHT))
    myHidden1Switch?.setAccessibilityIdentifier ("myHidden1Switch")
    view.addSubview (myHidden1Switch!)
    y -= OUTLET_HEIGHT / 2.0
    y -= OUTLET_HEIGHT
  //--- Text Hidden2:
  //  createTextFieldForText ("Hidden2:", y:&y, col:0, view:view)
    let tf2 = NSTextField (frame:NSRect (x:10.0 + OUTLET_WIDTH * 0.0, y:y, width:OUTLET_WIDTH, height:OUTLET_HEIGHT))
    tf2.stringValue = "Hidden2:"
    tf2.isEditable = false
    tf2.drawsBackground = false
    tf2.isBordered = false
    view.addSubview (tf2)
  //--- Outlet myHidden2Switch
    myHidden2Switch = EBSwitch(frame:NSRect (x:10.0 + OUTLET_WIDTH * 1.0, y:y, width:OUTLET_WIDTH, height:OUTLET_HEIGHT))
    myHidden2Switch?.setAccessibilityIdentifier ("myHidden2Switch")
    view.addSubview (myHidden2Switch!)
    y -= OUTLET_HEIGHT / 2.0
    y -= OUTLET_HEIGHT
  //--- Text Hidden1 | Hidden2 
  //  createTextFieldForText ("Hidden1 | Hidden2 ", y:&y, col:0, view:view)
    let tf3 = NSTextField (frame:NSRect (x:10.0 + OUTLET_WIDTH * 0.0, y:y, width:OUTLET_WIDTH, height:OUTLET_HEIGHT))
    tf3.stringValue = "Hidden1 | Hidden2 "
    tf3.isEditable = false
    tf3.drawsBackground = false
    tf3.isBordered = false
    view.addSubview (tf3)
  //--- Outlet mButton
    mButton = EBButton(frame:NSRect (x:10.0 + OUTLET_WIDTH * 1.0, y:y, width:OUTLET_WIDTH, height:OUTLET_HEIGHT))
    mButton?.setAccessibilityIdentifier ("mButton")
    view.addSubview (mButton!)
    y -= OUTLET_HEIGHT / 2.0
  //--- Set pref window content view
    window?.setContentSize (NSSize (width:20.0 + OUTLET_WIDTH * 2.0, height:OUTLET_HEIGHT * (1.5 * 3.0 + 0.5)))
    window?.contentView = view
    if let outlet : Any = self.mButton {
      if !(outlet is EBButton) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'mButton' outlet is not an instance of 'EBButton'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'mButton' outlet is nil") ;
    }
    if let outlet : Any = self.myHidden1Switch {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'myHidden1Switch' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'myHidden1Switch' outlet is nil") ;
    }
    if let outlet : Any = self.myHidden2Switch {
      if !(outlet is EBSwitch) {
        presentErrorWindow (file: #file,
                            line: #line,
                            errorMessage: "the 'myHidden2Switch' outlet is not an instance of 'EBSwitch'") ;
      }
    }else{
      presentErrorWindow (file: #file,
                          line: #line,
                          errorMessage: "the 'myHidden2Switch' outlet is nil") ;
    }
  //--------------------------- Install bindings
    myHidden1Switch?.bind_value (self.myHidden1_property, file: #file, line: #line)
    myHidden2Switch?.bind_value (self.myHidden2_property, file: #file, line: #line)
  //--------------------------- Install multiple bindings
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction:{
          return (self.myHidden1_property_selection || self.myHidden2_property_selection)
        },
        outlet:self.mButton
      )
      self.myHidden1_property.addEBObserver (controller)
      self.myHidden2_property.addEBObserver (controller)
      mController_mButton_hidden = controller
    }
  //--------------------------- Array controller
  //--------------------------- Set targets / actions
  //--------------------------- Extern functions
  }

  //····················································································································
  //    applicationWillTerminateAction
  //····················································································································

  @objc func applicationWillTerminateAction (_ : NSNotification) {
  //--------------------------- Array controller
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

