//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_MyRootEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_MyRootEntity : ReadOnlyAbstractArrayProperty <MyRootEntity> {

  //····················································································································
  //   Observers of 'docString' stored property
  //····················································································································

  private var mObserversOf_docString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_docString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_docString.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.docString.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_docString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_docString.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.docString.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_docString_toElementsOfSet (_ inSet : Set<MyRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_docString {
        managedObject.docString.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_docString_fromElementsOfSet (_ inSet : Set<MyRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_docString {
        managedObject.docString.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'transientConcatString' transient property
  //····················································································································

  private var mObserversOf_transientConcatString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_transientConcatString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_transientConcatString.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.transientConcatString.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_transientConcatString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_transientConcatString.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.transientConcatString.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_transientConcatString_toElementsOfSet (_ inSet : Set<MyRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_transientConcatString {
        managedObject.transientConcatString.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_transientConcatString_fromElementsOfSet (_ inSet : Set<MyRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_transientConcatString {
        managedObject.transientConcatString.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'otherTransientConcatString' transient property
  //····················································································································

  private var mObserversOf_otherTransientConcatString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_otherTransientConcatString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_otherTransientConcatString.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.otherTransientConcatString.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_otherTransientConcatString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_otherTransientConcatString.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.otherTransientConcatString.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_otherTransientConcatString_toElementsOfSet (_ inSet : Set<MyRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_otherTransientConcatString {
        managedObject.otherTransientConcatString.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_otherTransientConcatString_fromElementsOfSet (_ inSet : Set<MyRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_otherTransientConcatString {
        managedObject.otherTransientConcatString.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_MyRootEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_MyRootEntity : ReadOnlyArrayOf_MyRootEntity {

  var readModelFunction : Optional<() -> EBProperty < [MyRootEntity] > >

  private var prop_cache : EBProperty < [MyRootEntity] >? 

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <MyRootEntity> ()

  override var prop : EBProperty < [MyRootEntity] > {
    get {
      if let unwrappedComputeFunction = readModelFunction where prop_cache == nil {
        prop_cache = unwrappedComputeFunction ()
        let newSet : Set <MyRootEntity>
        switch prop_cache! {
        case .multipleSelection, .noSelection :
          newSet = Set <MyRootEntity> ()
        case .singleSelection (let array) :
          newSet = Set (array)
        }
     //--- Removed object set
        let removedSet = mSet.subtracting (newSet)
        removeEBObserversOf_docString_fromElementsOfSet (removedSet)
      //--- Added object set
        let addedSet = newSet.subtracting (mSet)
        addEBObserversOf_docString_toElementsOfSet (addedSet)
      //--- Update object set
        mSet = newSet
      }
      if prop_cache == nil {
        prop_cache = .noSelection
      }
      return prop_cache!
    }
  }

  //····················································································································

  override func postEvent () {
    if prop_cache != nil {
      prop_cache = nil
      super.postEvent ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

/* @objc(MyRootEntity_docString) protocol MyRootEntity_docString {
  var docString : EBStoredProperty_String { get }
} */

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

/* @objc(MyRootEntity_transientConcatString) protocol MyRootEntity_transientConcatString {
  var transientConcatString : EBTransientProperty_String { get }
} */

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

/* @objc(MyRootEntity_otherTransientConcatString) protocol MyRootEntity_otherTransientConcatString {
  var otherTransientConcatString : EBTransientProperty_String { get }
} */


//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: MyRootEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class MyRootEntity : EBManagedObject
// , MyRootEntity_docString, MyRootEntity_transientConcatString, MyRootEntity_otherTransientConcatString
{

  //····················································································································
  //    Properties
  //····················································································································

  var docString = EBStoredProperty_String ("doc string")

  //····················································································································
  //    Transient properties
  //····················································································································

  var transientConcatString = EBTransientProperty_String ()
  var otherTransientConcatString = EBTransientProperty_String ()

  //····················································································································
  //    Relationships
  //····················································································································


  //····················································································································
  //    init
  //····················································································································

  override init (managedObjectContext : EBManagedObjectContext) {
    super.init (managedObjectContext:managedObjectContext)
  //--- Install compute functions for transients
    transientConcatString.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.docString.prop.kind ()
        kind &= g_Preferences!.myPrefString.prop.kind ()
        kind &= g_Preferences!.prefTransientString.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .noSelection
        case .multipleSelectionKind :
          return .multipleSelection
        case .singleSelectionKind :
          switch (unwSelf.docString.prop, g_Preferences!.myPrefString.prop, g_Preferences!.prefTransientString.prop) {
          case (.singleSelection (let v0), .singleSelection (let v1), .singleSelection (let v2)) :
            return .singleSelection (compute_MyRootEntity_transientConcatString (v0, v1, v2))
          default :
            return .noSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    otherTransientConcatString.readModelFunction = {
        let kind = g_Preferences!.myPrefString.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .noSelection
        case .multipleSelectionKind :
          return .multipleSelection
        case .singleSelectionKind :
          switch (g_Preferences!.myPrefString.prop) {
          case (.singleSelection (let v0)) :
            return .singleSelection (compute_MyRootEntity_otherTransientConcatString (v0))
          default :
            return .noSelection
          }
        }
    }
  //--- Install property observers for transients
    docString.addEBObserver (transientConcatString)
    g_Preferences?.myPrefString.addEBObserver (transientConcatString)
    g_Preferences?.prefTransientString.addEBObserver (transientConcatString)
    g_Preferences?.myPrefString.addEBObserver (otherTransientConcatString)
  //--- Install undoers for properties
    docString.undoManager = undoManager ()
  //--- Install owner for relationships
  //--- register properties for handling signature
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "docString",
      idx:docString.mExplorerObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&docString.mObserverExplorer,
      valueExplorer:&docString.mValueExplorer
    )
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
    docString.mObserverExplorer = nil
    docString.mValueExplorer = nil
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    docString.storeIn (dictionary: ioDictionary, forKey: "docString")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
    docString.readFrom (dictionary: inDictionary, forKey:"docString")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

