//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: MyRootEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class MyRootEntity : EBManagedObject,
  MyRootEntity_docString,
  MyRootEntity_transientConcatString,
  MyRootEntity_otherTransientConcatString {

  //····················································································································
  //   Accessing docString stored property
  //····················································································································

  var docString : String {
    get {
      return self.docString_property.propval
    }
    set {
      self.docString_property.setProp (newValue)
    }
  }

  var docString_property_selection : EBSelection <String> {
    get {
      return self.docString_property.prop
    }
  }

  //····················································································································
  //   Accessing transientConcatString transient property
  //····················································································································

  var transientConcatString_property_selection : EBSelection <String> {
    get {
      return self.transientConcatString_property.prop
    }
  }

  var transientConcatString : EBSelection <String> {
    get {
      return transientConcatString_property_selection
    }
  }

  //····················································································································
  //   Accessing otherTransientConcatString transient property
  //····················································································································

  var otherTransientConcatString_property_selection : EBSelection <String> {
    get {
      return self.otherTransientConcatString_property.prop
    }
  }

  var otherTransientConcatString : EBSelection <String> {
    get {
      return otherTransientConcatString_property_selection
    }
  }

  //····················································································································
  //    Stored Properties
  //····················································································································

  var docString_property = EBStoredProperty_String ("doc string")

  //····················································································································
  //    Transient properties
  //····················································································································

  var transientConcatString_property = EBTransientProperty_String ()
  var otherTransientConcatString_property = EBTransientProperty_String ()

  //····················································································································
  //    Relationships
  //····················································································································


  //····················································································································
  //    init
  //····················································································································

  override init (managedObjectContext : EBManagedObjectContext) {
    super.init (managedObjectContext:managedObjectContext)
  //--- Install compute functions for transients
    self.transientConcatString_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.docString_property_selection.kind ()
        kind &= g_Preferences!.myPrefString_property_selection.kind ()
        kind &= g_Preferences!.prefTransientString_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.docString_property.prop, g_Preferences!.myPrefString_property.prop, g_Preferences!.prefTransientString_property.prop) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (compute_MyRootEntity_transientConcatString (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.otherTransientConcatString_property.readModelFunction = {
        let kind = g_Preferences!.myPrefString_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.myPrefString_property.prop) {
          case (.single (let v0)) :
            return .single (compute_MyRootEntity_otherTransientConcatString (v0))
          default :
            return .empty
          }
        }
    }
  //--- Install property observers for transients
    self.docString_property.addEBObserver (self.transientConcatString_property)
    g_Preferences?.myPrefString_property.addEBObserver (self.transientConcatString_property)
    g_Preferences?.prefTransientString_property.addEBObserver (self.transientConcatString_property)
    g_Preferences?.myPrefString_property.addEBObserver (self.otherTransientConcatString_property)
  //--- Install undoers for properties
    self.docString_property.undoManager = undoManager ()
  //--- Install owner for relationships
  //--- register properties for handling signature
  }

  //····················································································································

  deinit {
  //--- Remove observers
    self.docString_property.removeEBObserver (self.transientConcatString_property)
    g_Preferences?.myPrefString_property.removeEBObserver (self.transientConcatString_property)
    g_Preferences?.prefTransientString_property.removeEBObserver (self.transientConcatString_property)
    g_Preferences?.myPrefString_property.removeEBObserver (self.otherTransientConcatString_property)
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "docString",
      idx:self.docString_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.docString_property.mObserverExplorer,
      valueExplorer:&self.docString_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "transientConcatString",
      idx:self.transientConcatString_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.transientConcatString_property.mObserverExplorer,
      valueExplorer:&self.transientConcatString_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "otherTransientConcatString",
      idx:self.otherTransientConcatString_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.otherTransientConcatString_property.mObserverExplorer,
      valueExplorer:&self.otherTransientConcatString_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
    self.docString_property.mObserverExplorer = nil
    self.docString_property.mValueExplorer = nil
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    self.docString_property.storeIn (dictionary: ioDictionary, forKey: "docString")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
    self.docString_property.readFrom (dictionary: inDictionary, forKey:"docString")
  }

  //····················································································································
  //   cascadeObjectRemoving
  //····················································································································

  override func cascadeObjectRemoving (_ ioObjectsToRemove : inout Set <EBManagedObject>) {
    super.cascadeObjectRemoving (&ioObjectsToRemove)
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_MyRootEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_MyRootEntity : ReadOnlyAbstractArrayProperty <MyRootEntity> {

  //····················································································································
  //   Observers of 'docString' stored property
  //····················································································································

  private var mObserversOf_docString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_docString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_docString.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.docString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_docString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_docString.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.docString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_docString_toElementsOfSet (_ inSet : Set<MyRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_docString {
        managedObject.docString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_docString_fromElementsOfSet (_ inSet : Set<MyRootEntity>) {
    for observer in mObserversOf_docString {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.docString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'transientConcatString' transient property
  //····················································································································

  private var mObserversOf_transientConcatString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_transientConcatString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_transientConcatString.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.transientConcatString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_transientConcatString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_transientConcatString.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.transientConcatString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_transientConcatString_toElementsOfSet (_ inSet : Set<MyRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_transientConcatString {
        managedObject.transientConcatString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_transientConcatString_fromElementsOfSet (_ inSet : Set<MyRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_transientConcatString {
        managedObject.transientConcatString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'otherTransientConcatString' transient property
  //····················································································································

  private var mObserversOf_otherTransientConcatString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_otherTransientConcatString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_otherTransientConcatString.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.otherTransientConcatString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_otherTransientConcatString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_otherTransientConcatString.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.otherTransientConcatString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_otherTransientConcatString_toElementsOfSet (_ inSet : Set<MyRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_otherTransientConcatString {
        managedObject.otherTransientConcatString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_otherTransientConcatString_fromElementsOfSet (_ inSet : Set<MyRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_otherTransientConcatString {
        managedObject.otherTransientConcatString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_MyRootEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_MyRootEntity : ReadOnlyArrayOf_MyRootEntity {

  var readModelFunction : Optional<() -> EBSelection < [MyRootEntity] > >

  private var prop_cache : EBSelection < [MyRootEntity] >? 

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <MyRootEntity> ()

  override var prop : EBSelection < [MyRootEntity] > {
    get {
      if let unwrappedComputeFunction = readModelFunction, prop_cache == nil {
        prop_cache = unwrappedComputeFunction ()
        let newSet : Set <MyRootEntity>
        switch prop_cache! {
        case .multiple, .empty :
          newSet = Set <MyRootEntity> ()
        case .single (let array) :
          newSet = Set (array)
        }
     //--- Removed object set
        let removedSet = mSet.subtracting (newSet)
      //--- Remove observers of stored properties
        removeEBObserversOf_docString_fromElementsOfSet (removedSet)
      //--- Remove observers of transient properties
        removeEBObserversOf_transientConcatString_fromElementsOfSet (removedSet)
        removeEBObserversOf_otherTransientConcatString_fromElementsOfSet (removedSet)
      //--- Added object set
        let addedSet = newSet.subtracting (mSet)
       //--- Add observers of stored properties
        addEBObserversOf_docString_toElementsOfSet (addedSet)
       //--- Add observers of transient properties
        addEBObserversOf_transientConcatString_toElementsOfSet (addedSet)
        addEBObserversOf_otherTransientConcatString_toElementsOfSet (addedSet)
      //--- Update object set
        mSet = newSet
      }
      if prop_cache == nil {
        prop_cache = .empty
      }
      return prop_cache!
    }
  }

  //····················································································································

  override func postEvent () {
    if prop_cache != nil {
      prop_cache = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MyRootEntity_docString : class {
  var docString : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MyRootEntity_transientConcatString : class {
//  var transientConcatString_property_selection : EBSelection < String > { get }
  var transientConcatString : EBSelection < String > { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol MyRootEntity_otherTransientConcatString : class {
//  var otherTransientConcatString_property_selection : EBSelection < String > { get }
  var otherTransientConcatString : EBSelection < String > { get }
}


//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

