//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                          File 'controller-classes.swift'                                            *
//                                             Generated by version 0.0.1                                              *
//                                         september 5th, 2014, at 18h24'49"                                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

import Cocoa

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
//   Controller MyPrefs myPrefString - PMTextField $value                                                              *
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

@objc(Controller_MyPrefs_myPrefString_PMTextField_value)
class Controller_MyPrefs_myPrefString_PMTextField_value : NSObject, PMTriggerProtocol {

  weak var mObject : MyPrefs? = nil
  weak var mOutlet: PMTextField? = nil
  var mSendContinously : Bool

  //-------------------------------------------------------------------------------------------------------------------*

  init (object : MyPrefs?, outlet : PMTextField?, file : String, line : Int, sendContinously : Bool) {
    mObject = object
    mOutlet = outlet
    mSendContinously = sendContinously
    super.init ()
    noteObjectAllocation (self)
    if let outlet = mOutlet {
      outlet.target = self
      outlet.action = "action:"
      if outlet.formatter != nil {
        presentErrorWindow (file, line, "the outlet has a formatter")
      }
      if mSendContinously {
        NSNotificationCenter.defaultCenter().addObserver (self,
          selector: "continouslySendAction:",
          name: NSControlTextDidChangeNotification,
          object: mOutlet
        )
      }
    }
    mObject?.addObserverOf_myPrefString (self)
  }

  //-------------------------------------------------------------------------------------------------------------------*
  
  func unregister () {
    if mSendContinously {
      NSNotificationCenter.defaultCenter().removeObserver (self,
        name: NSControlTextDidChangeNotification,
        object: mOutlet
      )
    }
    mOutlet?.target = nil
    mOutlet?.action = nil
    mObject?.removeObserverOf_myPrefString (self)
  }

  //-------------------------------------------------------------------------------------------------------------------*
  
  deinit {
    noteObjectDeallocation (self)
  }
  
  //-------------------------------------------------------------------------------------------------------------------*

  func continouslySendAction (notification : NSNotification) {
    updateModel ()
  }

  //-------------------------------------------------------------------------------------------------------------------*

  func trigger () {
    if (mOutlet != nil) && (mObject != nil) && (mOutlet!.stringValue != mObject!.myPrefString) {
      mOutlet!.stringValue = mObject!.myPrefString
    }
  }

  //-------------------------------------------------------------------------------------------------------------------*

  func action (sender : AnyObject!) {
    updateModel ()
  }

  //-------------------------------------------------------------------------------------------------------------------*

  func updateModel () {
    if (mOutlet != nil) && (mObject != nil) && (mOutlet!.stringValue != mObject!.myPrefString) {
      mObject!.myPrefString = mOutlet!.stringValue
    }
  }

  //-------------------------------------------------------------------------------------------------------------------*

  var mTransientIndex : Int {
    get {
      return kTriggerOutletDisplay
    }
  }

  //-------------------------------------------------------------------------------------------------------------------*

  func noteTransientChanged () {
  }
  
  //-------------------------------------------------------------------------------------------------------------------*
}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
//   Controller MyPrefs prefTransientString - PMTextField $value                                                       *
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

@objc(Controller_MyPrefs_prefTransientString_PMTextField_value)
class Controller_MyPrefs_prefTransientString_PMTextField_value : NSObject, PMTriggerProtocol {

  weak var mObject : MyPrefs? = nil
  weak var mOutlet: PMTextField? = nil
  var mSendContinously : Bool

  //-------------------------------------------------------------------------------------------------------------------*

  init (object : MyPrefs?, outlet : PMTextField?, file : String, line : Int, sendContinously : Bool) {
    mObject = object
    mOutlet = outlet
    mSendContinously = sendContinously
    super.init ()
    noteObjectAllocation (self)
    if let outlet = mOutlet {
      outlet.target = self
      outlet.action = "action:"
      if outlet.formatter != nil {
        presentErrorWindow (file, line, "the outlet has a formatter")
      }
      if mSendContinously {
        NSNotificationCenter.defaultCenter().addObserver (self,
          selector: "continouslySendAction:",
          name: NSControlTextDidChangeNotification,
          object: mOutlet
        )
      }
    }
    mObject?.addObserverOf_prefTransientString (self)
  }

  //-------------------------------------------------------------------------------------------------------------------*
  
  func unregister () {
    if mSendContinously {
      NSNotificationCenter.defaultCenter().removeObserver (self,
        name: NSControlTextDidChangeNotification,
        object: mOutlet
      )
    }
    mOutlet?.target = nil
    mOutlet?.action = nil
    mObject?.removeObserverOf_prefTransientString (self)
  }

  //-------------------------------------------------------------------------------------------------------------------*
  
  deinit {
    noteObjectDeallocation (self)
  }
  
  //-------------------------------------------------------------------------------------------------------------------*

  func continouslySendAction (notification : NSNotification) {
    updateModel ()
  }

  //-------------------------------------------------------------------------------------------------------------------*

  func trigger () {
    if (mOutlet != nil) && (mObject != nil) && (mOutlet!.stringValue != mObject!.prefTransientString) {
      mOutlet!.stringValue = mObject!.prefTransientString
    }
  }

  //-------------------------------------------------------------------------------------------------------------------*

  func action (sender : AnyObject!) {
    updateModel ()
  }

  //-------------------------------------------------------------------------------------------------------------------*

  func updateModel () {
    if (mOutlet != nil) && (mObject != nil) && (mOutlet!.stringValue != mObject!.prefTransientString) {
      mObject!.prefTransientString = mOutlet!.stringValue
    }
  }

  //-------------------------------------------------------------------------------------------------------------------*

  var mTransientIndex : Int {
    get {
      return kTriggerOutletDisplay
    }
  }

  //-------------------------------------------------------------------------------------------------------------------*

  func noteTransientChanged () {
  }
  
  //-------------------------------------------------------------------------------------------------------------------*
}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
//   Controller MyRootEntity docString - PMTextField $value                                                            *
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

@objc(Controller_MyRootEntity_docString_PMTextField_value)
class Controller_MyRootEntity_docString_PMTextField_value : NSObject, PMTriggerProtocol {

  weak var mObject : MyRootEntity? = nil
  weak var mOutlet: PMTextField? = nil
  var mSendContinously : Bool

  //-------------------------------------------------------------------------------------------------------------------*

  init (object : MyRootEntity?, outlet : PMTextField?, file : String, line : Int, sendContinously : Bool) {
    mObject = object
    mOutlet = outlet
    mSendContinously = sendContinously
    super.init ()
    noteObjectAllocation (self)
    if let outlet = mOutlet {
      outlet.target = self
      outlet.action = "action:"
      if outlet.formatter != nil {
        presentErrorWindow (file, line, "the outlet has a formatter")
      }
      if mSendContinously {
        NSNotificationCenter.defaultCenter().addObserver (self,
          selector: "continouslySendAction:",
          name: NSControlTextDidChangeNotification,
          object: mOutlet
        )
      }
    }
    mObject?.addObserverOf_docString (self)
  }

  //-------------------------------------------------------------------------------------------------------------------*
  
  func unregister () {
    if mSendContinously {
      NSNotificationCenter.defaultCenter().removeObserver (self,
        name: NSControlTextDidChangeNotification,
        object: mOutlet
      )
    }
    mOutlet?.target = nil
    mOutlet?.action = nil
    mObject?.removeObserverOf_docString (self)
  }

  //-------------------------------------------------------------------------------------------------------------------*
  
  deinit {
    noteObjectDeallocation (self)
  }
  
  //-------------------------------------------------------------------------------------------------------------------*

  func continouslySendAction (notification : NSNotification) {
    updateModel ()
  }

  //-------------------------------------------------------------------------------------------------------------------*

  func trigger () {
    if (mOutlet != nil) && (mObject != nil) && (mOutlet!.stringValue != mObject!.docString) {
      mOutlet!.stringValue = mObject!.docString
    }
  }

  //-------------------------------------------------------------------------------------------------------------------*

  func action (sender : AnyObject!) {
    updateModel ()
  }

  //-------------------------------------------------------------------------------------------------------------------*

  func updateModel () {
    if (mOutlet != nil) && (mObject != nil) && (mOutlet!.stringValue != mObject!.docString) {
      mObject!.docString = mOutlet!.stringValue
    }
  }

  //-------------------------------------------------------------------------------------------------------------------*

  var mTransientIndex : Int {
    get {
      return kTriggerOutletDisplay
    }
  }

  //-------------------------------------------------------------------------------------------------------------------*

  func noteTransientChanged () {
  }
  
  //-------------------------------------------------------------------------------------------------------------------*
}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
//   Controller MyRootEntity transientConcatString - PMTextField $value                                                *
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

@objc(Controller_MyRootEntity_transientConcatString_PMTextField_value)
class Controller_MyRootEntity_transientConcatString_PMTextField_value : NSObject, PMTriggerProtocol {

  weak var mObject : MyRootEntity? = nil
  weak var mOutlet: PMTextField? = nil
  var mSendContinously : Bool

  //-------------------------------------------------------------------------------------------------------------------*

  init (object : MyRootEntity?, outlet : PMTextField?, file : String, line : Int, sendContinously : Bool) {
    mObject = object
    mOutlet = outlet
    mSendContinously = sendContinously
    super.init ()
    noteObjectAllocation (self)
    if let outlet = mOutlet {
      outlet.target = self
      outlet.action = "action:"
      if outlet.formatter != nil {
        presentErrorWindow (file, line, "the outlet has a formatter")
      }
      if mSendContinously {
        NSNotificationCenter.defaultCenter().addObserver (self,
          selector: "continouslySendAction:",
          name: NSControlTextDidChangeNotification,
          object: mOutlet
        )
      }
    }
    mObject?.addObserverOf_transientConcatString (self)
  }

  //-------------------------------------------------------------------------------------------------------------------*
  
  func unregister () {
    if mSendContinously {
      NSNotificationCenter.defaultCenter().removeObserver (self,
        name: NSControlTextDidChangeNotification,
        object: mOutlet
      )
    }
    mOutlet?.target = nil
    mOutlet?.action = nil
    mObject?.removeObserverOf_transientConcatString (self)
  }

  //-------------------------------------------------------------------------------------------------------------------*
  
  deinit {
    noteObjectDeallocation (self)
  }
  
  //-------------------------------------------------------------------------------------------------------------------*

  func continouslySendAction (notification : NSNotification) {
    updateModel ()
  }

  //-------------------------------------------------------------------------------------------------------------------*

  func trigger () {
    if (mOutlet != nil) && (mObject != nil) && (mOutlet!.stringValue != mObject!.transientConcatString) {
      mOutlet!.stringValue = mObject!.transientConcatString
    }
  }

  //-------------------------------------------------------------------------------------------------------------------*

  func action (sender : AnyObject!) {
    updateModel ()
  }

  //-------------------------------------------------------------------------------------------------------------------*

  func updateModel () {
    if (mOutlet != nil) && (mObject != nil) && (mOutlet!.stringValue != mObject!.transientConcatString) {
      mObject!.transientConcatString = mOutlet!.stringValue
    }
  }

  //-------------------------------------------------------------------------------------------------------------------*

  var mTransientIndex : Int {
    get {
      return kTriggerOutletDisplay
    }
  }

  //-------------------------------------------------------------------------------------------------------------------*

  func noteTransientChanged () {
  }
  
  //-------------------------------------------------------------------------------------------------------------------*
}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2



