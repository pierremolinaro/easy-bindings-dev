//-----------------------------------------------------------------------------*
//                                                                             *
//                         File 'MyRootEntity.swift'                           *
//                     Generated by version 0.0.1 [debug]                      *
//                       july 28th, 2014, at 14h35'42"                         *
//                                                                             *
//-----------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

import Cocoa

//---------------------------------------------------------------------------------------------------------------------*

@objc(MyRootEntity) class MyRootEntity : PMManagedObject {

  //-------------------------------------------------------------------------------------------------------------------*
  //    Attribute: docString                                                                                           *
  //-------------------------------------------------------------------------------------------------------------------*

  var docString__explorer : NSTextField?
  var docString_observers = NSMutableSet ()
  var docString : String =  "doc string" {
    willSet {
      undoManager ().registerUndoWithTarget (self,
        selector:"setDocString:",
        object:docString
      )
    }
    didSet {
      docString__explorer?.setStringValue (docString)
   //--- Notify observers
     docString_observers.makeObjectsPerformSelector ("entity_2E_MyRootEntity_2E_docString_didChange")
      //--- Trigger 'transientConcatString transient'
        if transientConcatString__cache != nil {
          transientConcatString__cache = nil
          enterTriggerForObject_entity_2E_MyRootEntity_2E_transientConcatString (self)
        }
    }
  }

  func addObserverOf_docString (inObserver : AnyObject) {
    docString_observers.addObject (inObserver)
    NSApp.sendAction ("entity_2E_MyRootEntity_2E_docString_didChange", to:inObserver, from:self)
  }
  func removeObserverOf_docString (inObserver : AnyObject) {
    docString_observers.removeObject (inObserver)
    NSApp.sendAction ("entity_2E_MyRootEntity_2E_docString_didChange", to:inObserver, from:self)
  }





  //-------------------------------------------------------------------------------------------------------------------*
  //    init                                                                                                           *
  //-------------------------------------------------------------------------------------------------------------------*

  init (entityManager : PMObjectManager) {
    super.init (entityManager:entityManager)
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    populateExplorerWindow                                                                                         *
  //-------------------------------------------------------------------------------------------------------------------*

  override func populateExplorerWindowWithRect (inout ioRect : NSRect, view : NSView) {
    docString__explorer = createEntryForAttributeNamed ("docString", ioRect:&ioRect, view:view)
    docString__explorer?.setStringValue (docString)
   }

  //-------------------------------------------------------------------------------------------------------------------*
  //    clearObjectExplorer                                                                                            *
  //-------------------------------------------------------------------------------------------------------------------*

  override func clearObjectExplorer () {
    docString__explorer = nil
    super.clearObjectExplorer ()
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    saveIntoDictionary                                                                                             *
  //-------------------------------------------------------------------------------------------------------------------*

  override func saveIntoDictionary (ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    ioDictionary.setValue (docString, forKey: "docString")
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    setUpWithDictionary                                                                                            *
  //-------------------------------------------------------------------------------------------------------------------*

  override func setUpWithDictionary (inDictionary : NSDictionary,
                                     managedObjectArray : [PMManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:managedObjectArray)
    docString = inDictionary.readString ("docString")
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    Transient: transientConcatString                                                                               *
  //-------------------------------------------------------------------------------------------------------------------*

  var transientConcatString__cache : String?
  var transientConcatString : String {
    if transientConcatString__cache == nil {
      transientConcatString__cache = compute_MyRootEntity_transientConcatString (docString, (g_MyPrefs?.myPrefString)!, (g_MyPrefs?.prefTransientString)!) ;
    }
    return transientConcatString__cache!
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    Transient: otherTransientConcatString                                                                          *
  //-------------------------------------------------------------------------------------------------------------------*

  var otherTransientConcatString__cache : String?
  var otherTransientConcatString : String {
    if otherTransientConcatString__cache == nil {
      otherTransientConcatString__cache = compute_MyRootEntity_otherTransientConcatString ((g_MyPrefs?.myPrefString)!) ;
    }
    return otherTransientConcatString__cache!
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //   accessibleObjects                                                                                               *
  //-------------------------------------------------------------------------------------------------------------------*

  override func accessibleObjects (inout objects : [PMManagedObject]) {
    super.accessibleObjects (&objects)
  }

  //-------------------------------------------------------------------------------------------------------------------*

}

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


