semantics documentGeneration :
  import "decoratedTypes.gSemantics" ;
  import "transientGeneration.gSemantics" ;
  import "bindingSemanticAnalysis.gSemantics" ;

#----------------------------------------------------------------------------*

list @documentListForGeneration {
  @string mDocumentName ;
  @attributeListForGeneration mAttributeListForGeneration ;
  @decoratedTransientMap mDecoratedTransientMapForGeneration ;
  @decoratedOutletMap mOutletMap ;
  @stringlist mControllerInstanciationStringList ;
}

#----------------------------------------------------------------------------*

#filewrapper documentGenerationTemplate in "../generation-templates/document-generation" {
#}{
#}{
#  template documentImplementationInSwift "document.swift.gTemplate"
#    ?@string DOCUMENT_NAME
#    ?@string ROOT_ENTITY_NAME
#    ?@outletGenerationList OUTLET_GENERATION_LIST
#    ?@controllerMap CONTROLLER_MAP
#    ?@transientListForImplementation TRANSIENT_LIST_FOR_IMPLEMENTATION
#    ?@stringset INCLUSION_SET
#    ?@bool HAS_SIGNATURE_OBSERVER
#    ?@attributeListForImplementation ATTRIBUTE_LIST
#  ;
#}
#
##----------------------------------------------------------------------------*
#
#override method @documentGeneration generate
#  ??@string inOutputDirectory
#:
#  @bool hasSignatureObserver := false ;
#  foreach mTransientListForImplementation while not hasSignatureObserver do
#    hasSignatureObserver := [mRootSignDependencyList length] > 0 ;
#  end foreach ;
#  #--- Implementation
#    var s := [filewrapper documentGenerationTemplate.documentImplementationInSwift
#      !mGenerationName
#      !mRootEntityName
#      !mOutletDeclarationList
#      !mControllerMap
#      !mTransientListForImplementation
#      !mFileInclusionSet->mImplementationFileInclusionSet
#      !hasSignatureObserver
#      !mAttributeListForImplementation
#    ] ;
#    [@string generateFileWithPattern
#      !inOutputDirectory
#      !mGenerationName . ".swift"
#      !"//"
#      !"\n\n" # Defaut user zone1
#      !s
#      !"\n\n" # Defaut user zone2
#      !"\n"
#    ] ;
#end method ;

#----------------------------------------------------------------------------*


end semantics ;
