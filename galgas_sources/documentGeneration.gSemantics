semantics documentGeneration :
  import "decoratedTypes.gSemantics" ;
  import "transientGeneration.gSemantics" ;

#----------------------------------------------------------------------------*

filewrapper documentGenerationTemplate in "../generation-templates/document-generation" {
}{
}{
  template documentDeclaration1 "document-1.h.gTemplate"
    ?@string DOCUMENT_NAME
    ?@string ROOT_ENTITY_NAME
    ?@outletGenerationList OUTLET_GENERATION_LIST
    ?@controllerMap CONTROLLER_MAP
    ?@transientListForImplementation TRANSIENT_LIST
    ?@stringset HEADER_FILE_PREDECLARATION_SET
    ?@bool HAS_SIGNATURE_OBSERVER
    ?@attributeListForImplementation ATTRIBUTE_LIST
  ;
  
  template documentDeclaration2 "document-2.h.gTemplate"
    ?@attributeListForImplementation ATTRIBUTE_LIST
    ?@lstringlist ACTION_LIST
  ;
  
  template documentImplementation "document.m.gTemplate"
    ?@string DOCUMENT_NAME
    ?@string ROOT_ENTITY_NAME
    ?@outletGenerationList OUTLET_GENERATION_LIST
    ?@controllerMap CONTROLLER_MAP
    ?@transientListForImplementation TRANSIENT_LIST
    ?@stringset INCLUSION_SET
    ?@bool HAS_SIGNATURE_OBSERVER
    ?@attributeListForImplementation ATTRIBUTE_LIST
  ;

  template documentImplementationInSwift "document.swift.gTemplate"
    ?@string DOCUMENT_NAME
    ?@string ROOT_ENTITY_NAME
    ?@outletGenerationList OUTLET_GENERATION_LIST
    ?@controllerMap CONTROLLER_MAP
    ?@transientListForImplementation TRANSIENT_LIST_FOR_IMPLEMENTATION
    ?@stringset INCLUSION_SET
    ?@bool HAS_SIGNATURE_OBSERVER
    ?@attributeListForImplementation ATTRIBUTE_LIST
  ;

  template documentComputationsHeaderFile "document-computations.h.gTemplate"
    ?@string DOCUMENT_NAME
    ?@transientListForImplementation TRANSIENT_LIST_FOR_IMPLEMENTATION
  ;
  
  template documentTransientComputationImplementationFile "document-transient-computation-function.m.gTemplate"
    ?@string DOCUMENT_NAME
    ?@EXebType RESULT_TYPE
    ?@string TRANSIENT_NAME
    ?@directDependancyList DIRECT_DEPENDANCY_LIST
    ?@stringlist ROOT_SIGN_LIST
  ;

  template documentTransientComputationImplementationFileInSwift "document-transient-computation-function.swift.gTemplate"
    ?@string DOCUMENT_NAME
    ?@EXebType RESULT_TYPE
    ?@string TRANSIENT_NAME
    ?@directDependancyList DIRECT_DEPENDANCY_LIST
    ?@stringlist ROOT_SIGN_LIST
  ;

}

#----------------------------------------------------------------------------*

override method @documentGeneration generate
  ??@string inOutputDirectory
:
  @bool hasSignatureObserver := false ;
  foreach mTransientListForImplementation while not hasSignatureObserver do
    hasSignatureObserver := [mRootSignDependencyList length] > 0 ;
  end foreach ;
  if [option easyBindings_options.outputSwift value] then
  #--- Implementation
    var s := [filewrapper documentGenerationTemplate.documentImplementationInSwift
      !mGenerationName
      !mRootEntityName
      !mOutletDeclarationList
      !mControllerMap
      !mTransientListForImplementation
      !mFileInclusionSet->mImplementationFileInclusionSet
      !hasSignatureObserver
      !mAttributeListForImplementation
    ] ;
    [@string generateFileWithPattern
      !inOutputDirectory
      !mGenerationName . ".swift"
      !"//"
      !"\n\n" # Defaut user zone1
      !s
      !"\n\n" # Defaut user zone2
      !"\n"
    ] ;
  #--- Transient computation function implementation files
    foreach mTransientListForImplementation do
        s := [filewrapper documentGenerationTemplate.documentTransientComputationImplementationFileInSwift
          !mGenerationName
          !mTransientType
          !mTransientName
          !mDependencyList
          !mRootSignDependencyList
        ] ;
        [@string generateFileWithPattern
          !inOutputDirectory
          !mGenerationName . "+transient+" . mTransientName . ".swift"
          !"//"
          !"\n\n" # Defaut user zone1
          !s
          !"  return what ? ; // ADD YOUR CODE HERE\n" # Defaut user zone2
          !"}\n\n" . "//----------------------------------------------------------------------------*\n"
        ] ;
    end foreach ;
  else
  #--- Header
    @string s := [filewrapper documentGenerationTemplate.documentDeclaration1
      !mGenerationName
      !mRootEntityName
      !mOutletDeclarationList
      !mControllerMap
      !mTransientListForImplementation
      !mFileInclusionSet->mHeaderPredeclarationSet
      !hasSignatureObserver
      !mAttributeListForImplementation
    ] ;
    @string s2 := [filewrapper documentGenerationTemplate.documentDeclaration2
      !mAttributeListForImplementation
      !mActionList
    ] ;
    [@string generateFileWithPattern
      !inOutputDirectory
      !mGenerationName . ".h"
      !"//"
      !"\n\n" # Defaut user zone1
      !s
      !"\n\n}\n\n" # Defaut user zone2
      !s2
    ] ;
  #--- Implementation
    s := [filewrapper documentGenerationTemplate.documentImplementation
      !mGenerationName
      !mRootEntityName
      !mOutletDeclarationList
      !mControllerMap
      !mTransientListForImplementation
      !mFileInclusionSet->mImplementationFileInclusionSet
      !hasSignatureObserver
      !mAttributeListForImplementation
    ] ;
    [@string generateFileWithPattern
      !inOutputDirectory
      !mGenerationName . ".m"
      !"//"
      !"\n\n" # Defaut user zone1
      !s
      !"\n\n" # Defaut user zone2
      !"@end\n"
    ] ;
  #--- action header file
    if [mTransientListForImplementation length] > 0 then
      s := [filewrapper documentGenerationTemplate.documentComputationsHeaderFile
        !mGenerationName
        !mTransientListForImplementation
      ] ;
      [@string generateFileWithPattern
        !inOutputDirectory
        !mGenerationName . "-computations.h"
        !"//"
        !"\n\n" # Defaut user zone1
        !s
        !"\n\n" # Defaut user zone2
        !"\n"
      ] ;
    end if ;
  #--- Transient computation function implementation files
    foreach mTransientListForImplementation do
        s := [filewrapper documentGenerationTemplate.documentTransientComputationImplementationFile
          !mGenerationName
          !mTransientType
          !mTransientName
          !mDependencyList
          !mRootSignDependencyList
        ] ;
        [@string generateFileWithPattern
          !inOutputDirectory
          !mGenerationName . "_" . mTransientName . ".m"
          !"//"
          !"\n\n" # Defaut user zone1
          !s
          !"  return what ? ; // ADD YOUR CODE HERE\n" # Defaut user zone2
          !"}\n\n" . "//----------------------------------------------------------------------------*\n"
        ] ;
    end foreach ;
  end if ;
end method ;

#----------------------------------------------------------------------------*


end semantics ;
