semantics documentGeneration :
  import "decoratedTypes.gSemantics" ;
  import "transientGeneration.gSemantics" ;
  import "bindingSemanticAnalysis.gSemantics" ;

#----------------------------------------------------------------------------*

list @documentListForGeneration {
  @string mDocumentName ;
  @string mRootEntityName ;
  @attributeListForGeneration mAttributeListForGeneration ;
  @decoratedTransientMap mDecoratedTransientMapForGeneration ;
  @decoratedOutletMap mOutletMap ;
  @stringlist mControllerInstanciationStringList ;
  @arrayControllerForGeneration mDocumentArrayControllerForGeneration ;
}

#----------------------------------------------------------------------------*

local filewrapper documentGenerationTemplate in "../generation-templates" {
}{
}{
  template documentImplementationInSwift "document.swift.gTemplate"
    ?@string DOCUMENT_NAME
    ?@string ROOT_ENTITY_NAME
    ?@attributeListForGeneration ATTRIBUTE_LIST
    ?@decoratedTransientMap TRANSIENT_MAP_FOR_IMPLEMENTATION
    ?@decoratedOutletMap OUTLET_GENERATION_MAP
    ?@stringlist CONTROLLER_INSTANCIATION_LIST
    ?@arrayControllerForGeneration ARRAY_CONTROLLER_LIST
  ;
}

#----------------------------------------------------------------------------*

routine generateDocuments
  ??@documentListForGeneration inDocumentListForGeneration
  ??@string inOutputDirectory
:
  for () in inDocumentListForGeneration do
    const s := [filewrapper documentGenerationTemplate.documentImplementationInSwift
      !mDocumentName
      !mRootEntityName
      !mAttributeListForGeneration
      !mDecoratedTransientMapForGeneration
      !mOutletMap
      !mControllerInstanciationStringList
      !mDocumentArrayControllerForGeneration
    ] ;
    [@string generateFile
      !inOutputDirectory
      !mDocumentName . ".swift"
      !s
    ] ;
  end for ;
end routine ;

#----------------------------------------------------------------------------*


end semantics ;
