semantics documentGeneration :
  import "decoratedTypes.gSemantics" ;
  import "transientGeneration.gSemantics" ;

#----------------------------------------------------------------------------*

local filewrapper documentGenerationTemplate in "../generation-templates/document-generation" {
}{
}{
  template documentDeclaration1 "document-1.h.gTemplate"
    ?@string DOCUMENT_NAME
    ?@string ROOT_ENTITY_NAME
    ?@outletGenerationList OUTLET_GENERATION_LIST
    ?@controllerMap CONTROLLER_MAP
    ?@transientListForImplementation TRANSIENT_LIST
    ?@stringset HEADER_FILE_PREDECLARATION_SET
    ?@bool HAS_SIGNATURE_OBSERVER
    ?@attributeListForImplementation ATTRIBUTE_LIST
  ;
  
  template documentDeclaration2 "document-2.h.gTemplate"
    ?@attributeListForImplementation ATTRIBUTE_LIST
    ?@lstringlist ACTION_LIST
  ;
  
  template documentImplementation "document.m.gTemplate"
    ?@string DOCUMENT_NAME
    ?@string ROOT_ENTITY_NAME
    ?@outletGenerationList OUTLET_GENERATION_LIST
    ?@controllerMap CONTROLLER_MAP
    ?@transientListForImplementation TRANSIENT_LIST
    ?@stringset INCLUSION_SET
    ?@2stringlist TRANSIENT_DEPENDENCY_ARCS
    ?@bool HAS_SIGNATURE_OBSERVER
    ?@attributeListForImplementation ATTRIBUTE_LIST
  ;

  template documentComputationsHeaderFile "document-computations.h.gTemplate"
    ?@string DOCUMENT_NAME
    ?@transientListForImplementation TRANSIENT_LIST_FOR_IMPLEMENTATION
  ;
  
  template documentTransientComputationImplementationFile "document-transient-computation-function.m.gTemplate"
    ?@string DOCUMENT_NAME
    ?@easyBindingType RESULT_TYPE
    ?@string TRANSIENT_NAME
    ?@directDependancyList DIRECT_DEPENDANCY_LIST
    ?@stringlist ROOT_SIGN_LIST
  ;

}

#----------------------------------------------------------------------------*

routine generateDocumentCode
  ??@2stringlist inTransientDependencyArcList
  ??@documentMap inDocumentMap
  ??@string inOutputDirectory
:
  if [@uint errorCount] == 0 then
    foreach inDocumentMap do
      @bool hasSignatureObserver := false ;
      foreach mTransientListForImplementation while not hasSignatureObserver do
        hasSignatureObserver := [mRootSignDependencyList length] > 0 ;
      end foreach ;
    #--- Header
      @string s := [filewrapper documentGenerationTemplate.documentDeclaration1
        ![lkey string]
        !mRootEntityName
        !mOutletDeclarationList
        !mControllerMap
        !mTransientListForImplementation
        !mFileInclusionSet->mHeaderPredeclarationSet
        !hasSignatureObserver
        !mAttributeListForImplementation
      ] ;
      @string s2 := [filewrapper documentGenerationTemplate.documentDeclaration2
        !mAttributeListForImplementation
        !mActionList
      ] ;
      [@string generateFileWithPattern
        !inOutputDirectory
        ![lkey string] . ".h"
        !"//"
        !"\n\n" # Defaut user zone1
        !s
        !"\n\n}\n\n" # Defaut user zone2
        !s2
      ] ;
    #--- Implementation
      s := [filewrapper documentGenerationTemplate.documentImplementation
        ![lkey string]
        !mRootEntityName
        !mOutletDeclarationList
        !mControllerMap
        !mTransientListForImplementation
        !mFileInclusionSet->mImplementationFileInclusionSet
        !inTransientDependencyArcList
        !hasSignatureObserver
        !mAttributeListForImplementation
      ] ;
      [@string generateFileWithPattern
        !inOutputDirectory
        ![lkey string] . ".m"
        !"//"
        !"\n\n" # Defaut user zone1
        !s
        !"\n\n" # Defaut user zone2
        !"@end\n"
      ] ;
    #--- action header file
      if [mTransientListForImplementation length] > 0 then
        s := [filewrapper documentGenerationTemplate.documentComputationsHeaderFile
          ![lkey string]
          !mTransientListForImplementation
        ] ;
        [@string generateFileWithPattern
          !inOutputDirectory
          ![lkey string] . "-computations.h"
          !"//"
          !"\n\n" # Defaut user zone1
          !s
          !"\n\n" # Defaut user zone2
          !"\n"
        ] ;
      end if ;
    #--- Transient computation function implementation files
      foreach mTransientListForImplementation do
          s := [filewrapper documentGenerationTemplate.documentTransientComputationImplementationFile
            ![lkey string]
            !mTransientType
            !mTransientName
            !mDependencyList
            !mRootSignDependencyList
          ] ;
          [@string generateFileWithPattern
            !inOutputDirectory
            !"compute_" . [lkey string] . "_" . mTransientName . ".m"
            !"//"
            !"\n\n" # Defaut user zone1
            !s
            !"  return what ? ; // ADD YOUR CODE HERE\n" # Defaut user zone2
            !"}\n\n" . "//----------------------------------------------------------------------------*\n"
          ] ;
      end foreach ;
    end foreach ;
  end if ;
end routine ;

#----------------------------------------------------------------------------*


end semantics ;
