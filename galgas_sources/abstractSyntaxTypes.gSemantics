semantics abstractSyntaxTypes :

#-----------------------------------------------------------------------------*

struct @astDeclarationStruct {
  @astDeclarationList mDeclarationList ;
  @cursorList mCursorList ;
  @outletClassDeclarationList mOutletClassDeclarationList ;
  @controllerTemplateList mControllerTemplateList ;
}

#----------------------------------------------------------------------------*

list @controllerBindingOptionList {
  @lstring mOptionName ;
  @lstring mOptionTypeName ;
}

#-----------------------------------------------------------------------------*

list @controllerTemplateList {
  @bool mIsUserDefined ;
  @lstring mOutletClassName ;
  @lstring mBindingName ;
  @lstring mModelTypeName ;
  @lstring mModelSelector ;
  @controllerBindingOptionList mBindingOptionList ;
}

#-----------------------------------------------------------------------------*

abstract class @astDeclaration {
  @bool mUserDefined ;
}

#-----------------------------------------------------------------------------*

list @astDeclarationList {
  @astDeclaration mDeclaration ;
}

#----------------------------------------------------------------------------*

class @unifiedTypeDeclaration extends @astDeclaration {
  @lstring mTypeName ;
  @typeKind mTypeKind ;
  @lstring mSuperTypeName ;
  @outletDeclarationList mOutletDeclarationList ;
  @lstring mRootEntityName ;
  @attributeList mAttributeList ;
  @relationshipList mRelationshipList ;
  @classArrayList mArrayList ;
  @transientList mTransientList ;
  @bindingList mBindingList ;
  @lstringlist mActionDeclarationList ;
}

#----------------------------------------------------------------------------*

list @bindingOptionList {
  @lstring mOptionName ;
  @abstractDefaultValue mOptionValue ;
}

#----------------------------------------------------------------------------*

abstract class @abstractObservablePropertyAST {
  @lstring mSelectorName ;
}

#----------------------------------------------------------------------------*

class @selfObservablePropertyAST extends @abstractObservablePropertyAST {
  @lstring mSelfObservablePropertyName ;
}

#----------------------------------------------------------------------------*

class @rootObservablePropertyAST extends @abstractObservablePropertyAST {
  @lstring mRootObservablePropertyName ;
}

#----------------------------------------------------------------------------*

class @preferenceObservablePropertyAST extends @abstractObservablePropertyAST {
  @lstring mPreferenceName ;
  @lstring mPreferenceObservablePropertyName ;
}

#----------------------------------------------------------------------------*

list @bindingList {
  @abstractObservablePropertyAST mObservableProperty ;
  @lstring mOutletName ;
  @lstring mBindingName ;
  @bindingOptionList mBindingOptionList ;
}

#----------------------------------------------------------------------------*

class @predefinedTypeDeclaration extends @astDeclaration {
  @string mTypeName ;
  @typeKind mKind ;
}

#----------------------------------------------------------------------------*

list @outletClassDeclarationList {
  @bool mUserDefined ;
  @lstring mOutletClassName ;
}

#----------------------------------------------------------------------------*

class @structDeclaration extends @astDeclaration {
  @lstring mStructTypeName ;
  @structFieldASTList mFieldList ;
}

#----------------------------------------------------------------------------*

class @enumDeclaration extends @astDeclaration {
  @lstring mEnumTypeName ;
  @lstringlist mEnumConstantNameList ;
}















#-----------------------------------------------------------------------------*

abstract class @EXastDeclaration {
  @bool mUserDefined ;
}

#-----------------------------------------------------------------------------*

list @attributeList {
  @lstring mAttributeTypeName ;
  @lstring mAttributeName ;
  @abstractDefaultValue mDefaultValue ;
}

#----------------------------------------------------------------------------*

list @relationshipList {
  @bool mIsToMany ;
  @lstring mDestinationEntityName ;
  @lstring mRelationshipName ;
  @lstring mInverseRelationshipName ;
  @bool mInverseRelationIsToMany ;
}

#----------------------------------------------------------------------------*

list @outletDeclarationList {
  @lstring mOutletType ;
  @lstring mOutletName ;
}

#----------------------------------------------------------------------------*

abstract class @abstractTransientDependency {
}

#----------------------------------------------------------------------------*

class @transientRootSignDependency extends @abstractTransientDependency {
  @location mDeclarationLocation ;
}

#----------------------------------------------------------------------------*

class @transientLocalDependency extends @abstractTransientDependency {
  @lstring mMasterName ;
  @bool mNamesCountOption ;
}

#----------------------------------------------------------------------------*

class @transientRootDependency extends @abstractTransientDependency {
  @lstring mMasterName ;
  @bool mNamesCountOption ;
}

#----------------------------------------------------------------------------*

class @transientControllerDependency extends @abstractTransientDependency {
  @lstring mControllerName ;
  @lstring mMasterName ;
}

#----------------------------------------------------------------------------*

class @transientPreferenceDependency extends @abstractTransientDependency {
  @lstring mPreferencesName ;
  @lstring mMasterName ;
}

#----------------------------------------------------------------------------*

list @dependanceList {
  @abstractTransientDependency mDependency ;
}

#----------------------------------------------------------------------------*

list @transientList {
  @lstring mTransientTypeName ;
  @lstring mTransientName ;
  @dependanceList mDependencyList ;
}

#----------------------------------------------------------------------------*

list @classArrayList {
  @lstring mElementClassName ;
  @lstring mArrayName ;
}

#----------------------------------------------------------------------------*

class @EXclassDeclaration extends @EXastDeclaration {
  @lstring mClassName ;
  @typeKind mTypeKind ;
  @lstring mSuperClassName ;
  @attributeList mAttributeList ;
  @classArrayList mArrayList ;
  @transientList mTransientList ;
}

#----------------------------------------------------------------------------*

class @entityDeclaration extends @EXastDeclaration {
  @lstring mEntityName ;
  @lstring mSuperEntityName ;
  @attributeList mAttributeList ;
  @transientList mTransientList ;
  @relationshipList mRelationshipList ;
  @lstringlist mSignList ;
}

##----------------------------------------------------------------------------*
#
#list @outletBindingOptionList {
#  @lstring mOptionName ;
#  @abstractDefaultValue mDefaultValue ;
#}
#
##----------------------------------------------------------------------------*
#
#abstract class @abstractBinding {
#}
#
##----------------------------------------------------------------------------*
#
#class @regularRootBinding, @regularSelfBinding extends @abstractBinding {
#  @lstring mBindingName ;
#  @lstring mObservableAttributeName ;
#  @outletBindingOptionList mOutletBindingOptionList ;
#  @bool mNamesCountOption ;
#}
#
##----------------------------------------------------------------------------*
#
#class @regularControllerBinding extends @abstractBinding {
#  @lstring mBindingName ;
#  @lstring mControllerName ;
#  @lstring mControllerAttributeName ;
#  @outletBindingOptionList mOutletBindingOptionList ;
#  @bool mNamesCountOption ;
#}
#
##----------------------------------------------------------------------------*
#
#class @regularControllerSelectionBinding extends @abstractBinding {
#  @lstring mBindingName ;
#  @lstring mControllerName ;
#  @lstring mControllerAttributeName ;
#  @outletBindingOptionList mOutletBindingOptionList ;
#}
#
##----------------------------------------------------------------------------*
#
#class @regularPreferenceBinding extends @abstractBinding {
#  @lstring mBindingName ;
#  @lstring mPreferenceName ;
#  @lstring mPreferenceAttributeName ;
#  @outletBindingOptionList mOutletBindingOptionList ;
#}
#
##----------------------------------------------------------------------------*
#
#abstract class @multiValuedBindingBoundModel {
#  @lstring mPropertyName ;
#}
#
##----------------------------------------------------------------------------*
#
#class @multiValuedBindingBoundToRoot,
#      @multiValuedBindingBoundToSelf extends @multiValuedBindingBoundModel {
#}
#
##----------------------------------------------------------------------------*
#
#class @multiValuedBindingBoundToPref extends @multiValuedBindingBoundModel {
#  @lstring mPreferenceName ;
#}
#
##----------------------------------------------------------------------------*
#
#class @multiValuedBindingBoundToController extends @multiValuedBindingBoundModel {
#  @lstring mControllerName ;
#}
#
##----------------------------------------------------------------------------*
#
#class @multiValuedBindingBoundToControllerSelection extends @multiValuedBindingBoundModel {
#  @lstring mControllerName ;
#}
#
##----------------------------------------------------------------------------*
#
#list @multiValuedBindingList {
#  @bool mNegate ;
#  @multiValuedBindingBoundModel mBoundModel ;
#  @outletBindingOptionList mOutletBindingOptionList ;
#}
#
##----------------------------------------------------------------------------*
#
#class @multiValuedBinding extends @abstractBinding {
#  @lstring mBindingName ;
#  @multiValuedBindingList mMultiValuedBindingList ;
#}
#
##----------------------------------------------------------------------------*
#
#class @runBinding extends @abstractBinding {
#  @lstring mTargetName ;
#  @lstring mActionName ;
#}
#
##----------------------------------------------------------------------------*
#
#list @tableValueColumnBinding {
#  @lstring mColumnName ;
#  @lstring mCellTypeName ;
#  @lstring mBoundPropertyName ;
#}
#
##----------------------------------------------------------------------------*
#
#class @tableValueBinding extends @abstractBinding {
#  @lstring mControllerName ;
#  @tableValueColumnBinding mTableValueColumnBinding ;
#}
#
##----------------------------------------------------------------------------*
#
#list @bindingList {
#  @abstractBinding mBinding ;
#}
#
#----------------------------------------------------------------------------*

#class @preferencesDeclaration extends @EXastDeclaration {
#  @lstring mPreferencesName ;
#  @outletDeclarationList mOutletDeclarationList ;
#  @attributeList mAttributeList ;
#  @transientList mTransientList ;
#  @lstringlist mActionDeclarationList ;
#  @controllerList mControllerList ;
#  @classArrayList mArrayList ;
#}

#----------------------------------------------------------------------------*

#class @nibClassDeclaration extends @EXastDeclaration {
#  @lstring mClassName ;
#  @outletDeclarationList mOutletDeclarationList ;
#  @attributeList mAttributeList ;
#  @transientList mTransientList ;
#  @lstringlist mActionDeclarationList ;
#  @controllerList mControllerList ;
#  @classArrayList mArrayList ;
#}

#----------------------------------------------------------------------------*

#class @documentDeclaration extends @EXastDeclaration {
#  @lstring mDocumentName ;
#  @lstring mRootEntityName ;
#  @outletDeclarationList mOutletDeclarationList ;
#  @controllerList mControllerList ;
#  @lstringlist mActionDeclarationList ;
#  @transientList mTransientList ;
#  @attributeList mAttributeList ;
#}

#----------------------------------------------------------------------------*

#enum @formatterEnum {
#  noFormatter, numberFormatter, dateFormatter
#}
#
##----------------------------------------------------------------------------*
#
#list @attributeASTTypeAndFormatterList {
#  @lstring mTypeName ;
#  @formatterEnum mRequiredFormatter ;
#}
#
##----------------------------------------------------------------------------*
#
#list @outletClassBindingList {
#  @lstring mBindingName ;
#  @attributeASTTypeAndFormatterList mAcceptableTypeFormatterList ;
#  @bindingOptionList mBindingOptionList ;
#}
#
##----------------------------------------------------------------------------*
#
#list @bindingOptionList {
#  @lstring mBindingOptionName ;
#  @lstringlist mAcceptableTypeList ;
#}
#
##----------------------------------------------------------------------------*
#
#enum @generationKind {
#  fullGeneration, generateImport, noGeneration
#}

#----------------------------------------------------------------------------*

list @cursorList {
  @lstring mCursorName ;
  @ldouble mHotSpotX ;
  @ldouble mHotSpotY ;
}

#----------------------------------------------------------------------------*

list @controllerObservablePropertyList {
  @lstring mTypeName ;
  @lstring mPropertyName ;
}

#----------------------------------------------------------------------------*

class @protocolDeclaration extends @EXastDeclaration {
  @bool mIsPredefined ; # Generate import otherwise
  @lstring mProtocolName ;
}

#----------------------------------------------------------------------------*

enum @controllerKind {
  simpleController,
  objectController, # NSObjectController
  arrayController,  # NSArrayController
  entityController, # PMEntityController
  entityArrayController, # PMEntityArrayController
  treeController # NSTreeController
}

#----------------------------------------------------------------------------*

abstract class @abstractDefaultValue {
}

#----------------------------------------------------------------------------*

class @boolAsDefaultValue extends @abstractDefaultValue {
  @lbool mValue ;
}

#----------------------------------------------------------------------------*

class @doubleAsDefaultValue extends @abstractDefaultValue {
  @ldouble mValue ;
}

#----------------------------------------------------------------------------*

class @integerAsDefaultValue extends @abstractDefaultValue {
  @luint mValue ;
}

#----------------------------------------------------------------------------*

class @stringAsDefaultValue extends @abstractDefaultValue {
  @lstring mValue ;
}

#----------------------------------------------------------------------------*

class @identifierAsDefaultValue extends @abstractDefaultValue {
  @lstring mValue ;
}

#----------------------------------------------------------------------------*

list @defaultValueList {
  @abstractDefaultValue mDefaultValue ;
}

#----------------------------------------------------------------------------*

class @listAsDefaultValue extends @abstractDefaultValue {
  @location mStartLocation ;
  @defaultValueList mDefaultValueList ;
}

#----------------------------------------------------------------------------*

list @structFieldASTList {
  @lstring mFieldTypeName ;
  @lstring mFieldName ;
}

#----------------------------------------------------------------------------*

enum @typeKind {
  classType,
  controllerClassType,
  documentType,
  entityType,
  enumType,
  nibClassType,
  outletClassType,
  preferencesType,
  protocolType,
  structType,
#--- Predefined Type
  boolType,
  integerType,
  uintegerType,
  doubleType,
  stringType,
  colorType,
  dataType,
  dateType,
  fontType,
  imageType,
  menuType,
  bezierPathType
}

#----------------------------------------------------------------------------*

end semantics ;
