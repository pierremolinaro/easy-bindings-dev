semantics abstractSyntaxTypes :

#-----------------------------------------------------------------------------*

struct @astDeclarationStruct {
  @astDeclarationList mDeclarationList ;
  @cursorList mCursorList ;
  @outletClassDeclarationList mOutletClassDeclarationList ;
  @controllerTemplateList mControllerTemplateList ;
}

#----------------------------------------------------------------------------*

list @controllerBindingOptionList {
  @lstring mOptionName ;
  @lstring mOptionTypeName ;
}

#-----------------------------------------------------------------------------*

list @controllerTemplateList {
  @bool mIsUserDefined ;
  @lstring mOutletClassName ;
  @lstring mBindingName ;
  @lstring mModelTypeName ;
  @lstring mModelSelector ;
  @bool mModelShouldBeWritableProperty ;
  @controllerBindingOptionList mBindingOptionList ;
}

#-----------------------------------------------------------------------------*

abstract class @astDeclaration {
  @bool mUserDefined ;
}

#-----------------------------------------------------------------------------*

list @astDeclarationList {
  @astDeclaration mDeclaration ;
}

#----------------------------------------------------------------------------*

class @unifiedTypeDeclaration extends @astDeclaration {
  @lstring mTypeName ;
  @typeKind mTypeKind ;
  @lstring mSuperTypeName ;
  @outletDeclarationList mOutletDeclarationList ;
  @lstring mRootEntityName ;
  @attributeList mAttributeList ;
  @relationshipList mRelationshipList ;
  @classArrayList mArrayList ;
  @transientList mTransientList ;
  @bindingList mBindingList ;
  @lstringlist mActionDeclarationList ;
  @arrayControllerDeclarationListAST mArrayControllerDeclarationListAST ;
}

#----------------------------------------------------------------------------*

list @bindingOptionList {
  @lstring mOptionName ;
  @abstractDefaultValue mOptionValue ;
}

#----------------------------------------------------------------------------*

abstract class @abstractObservablePropertyAST {
}

#----------------------------------------------------------------------------*

class @selfObservablePropertyAST extends @abstractObservablePropertyAST {
  @lstring mSelfObservablePropertyName ;
}

#----------------------------------------------------------------------------*

class @rootObservablePropertyAST extends @abstractObservablePropertyAST {
  @lstring mRootObservablePropertyName ;
  @bool mNamesCountOption ;
}

#----------------------------------------------------------------------------*

class @preferenceObservablePropertyAST extends @abstractObservablePropertyAST {
  @lstring mPreferenceName ;
  @lstring mPreferenceObservablePropertyName ;
}

#----------------------------------------------------------------------------*

class @arrayControllerObservablePropertyAST extends @abstractObservablePropertyAST {
  @lstring mArrayControllerName ;
  @lstring mArrayControllerObservablePropertyName ;
}

#----------------------------------------------------------------------------*

list @bindingList {
  @lstring mSelectorName ;
  @abstractObservablePropertyAST mObservableProperty ;
  @lstring mOutletName ;
  @lstring mBindingName ;
  @bindingOptionList mBindingOptionList ;
}

#----------------------------------------------------------------------------*

class @predefinedTypeDeclaration extends @astDeclaration {
  @string mTypeName ;
  @typeKind mKind ;
}

#----------------------------------------------------------------------------*

list @outletClassDeclarationList {
  @bool mUserDefined ;
  @lstring mOutletClassName ;
  @bool mHasRunAction ;
  @bool mHasEnabled ;
}

#----------------------------------------------------------------------------*

class @structDeclaration extends @astDeclaration {
  @lstring mStructTypeName ;
  @structFieldASTList mFieldList ;
}

#----------------------------------------------------------------------------*

class @enumDeclaration extends @astDeclaration {
  @lstring mEnumTypeName ;
  @lstringlist mEnumConstantNameList ;
}















#-----------------------------------------------------------------------------*

list @attributeList {
  @lstring mAttributeTypeName ;
  @lstring mAttributeName ;
  @abstractDefaultValue mDefaultValue ;
  @bool mNeedsValidation ;
}

#----------------------------------------------------------------------------*

list @relationshipList {
  @bool mIsToMany ;
  @lstring mDestinationEntityName ;
  @lstring mRelationshipName ;
  @lstring mInverseRelationshipName ;
  @bool mInverseRelationIsToMany ;
}

#----------------------------------------------------------------------------*

enum @runActionDescriptor {
  noAction,
  action (@lstring target, @lstring action)
}

#----------------------------------------------------------------------------*

abstract class @abstractBooleanMultipleBindingExpressionAST {
}

#----------------------------------------------------------------------------*

class @negateBooleanMultipleBindingExpressionAST extends @abstractBooleanMultipleBindingExpressionAST {
  @abstractBooleanMultipleBindingExpressionAST mBinding ;
}

#----------------------------------------------------------------------------*

class @andBooleanMultipleBindingExpressionAST,
       @orBooleanMultipleBindingExpressionAST extends @abstractBooleanMultipleBindingExpressionAST {
  @abstractBooleanMultipleBindingExpressionAST mLeftBinding ;
  @abstractBooleanMultipleBindingExpressionAST mRightBinding ;
}

#----------------------------------------------------------------------------*

class @observablePropertyAsEnableBindingExpressionAST extends @abstractBooleanMultipleBindingExpressionAST {
  @abstractObservablePropertyAST mProperty ;
}

#----------------------------------------------------------------------------*

enum @enabledBindingDescriptor {
  noEnabledBinding,
  enabledBinding (@abstractBooleanMultipleBindingExpressionAST expression)
}
#----------------------------------------------------------------------------*

list @outletDeclarationList {
  @lstring mOutletType ;
  @lstring mOutletName ;
  @runActionDescriptor mRunDescriptor ;
  @enabledBindingDescriptor mEnabledBindingDescriptor ;
}

#----------------------------------------------------------------------------*

abstract class @abstractTransientDependencyAST {
}

#----------------------------------------------------------------------------*

class @transientRootSignDependencyAST extends @abstractTransientDependencyAST {
  @location mDeclarationLocation ;
}

#----------------------------------------------------------------------------*

class @transientLocalDependencyAST extends @abstractTransientDependencyAST {
  @lstring mMasterName ;
  @bool mNamesCountOption ;
}

#----------------------------------------------------------------------------*

class @transientRootDependencyAST extends @abstractTransientDependencyAST {
  @lstring mMasterName ;
  @bool mNamesCountOption ;
}

#----------------------------------------------------------------------------*

class @transientRootRelationshipDependencyAST extends @abstractTransientDependencyAST {
  @lstring mRelationshipName ;
  @lstring mMasterName ;
}

#----------------------------------------------------------------------------*

class @transientControllerDependencyAST extends @abstractTransientDependencyAST {
  @lstring mControllerName ;
  @lstring mMasterName ;
}

#----------------------------------------------------------------------------*

class @transientPreferenceDependencyAST extends @abstractTransientDependencyAST {
  @lstring mPreferencesName ;
  @lstring mMasterName ;
}

#----------------------------------------------------------------------------*

list @dependanceList {
  @abstractTransientDependencyAST mDependency ;
}

#----------------------------------------------------------------------------*

list @transientList {
  @lstring mTransientTypeName ;
  @lstring mTransientName ;
  @dependanceList mDependencyList ;
}

#----------------------------------------------------------------------------*

list @classArrayList {
  @lstring mElementClassName ;
  @lstring mArrayName ;
}

#----------------------------------------------------------------------------*

list @arrayControllerBoundColumnListAST {
  @lstring mColumnName ;
  @lstring mColumnOutletTypeName ;
  @lstring mObservablePropertyName ;
  @bindingOptionList mBindingOptionList ;
}

#----------------------------------------------------------------------------*

list @arrayControllerDeclarationListAST {
  @lstring mControllerName ;
  @abstractObservablePropertyAST mBoundModel ;
  @lstring mTableViewOutletName ;
  @arrayControllerBoundColumnListAST mArrayControllerBoundColumnListAST ;
}

#----------------------------------------------------------------------------*

list @cursorList {
  @lstring mCursorName ;
  @ldouble mHotSpotX ;
  @ldouble mHotSpotY ;
}

#----------------------------------------------------------------------------*

abstract class @abstractDefaultValue {
}

#----------------------------------------------------------------------------*

class @boolAsDefaultValue extends @abstractDefaultValue {
  @lbool mValue ;
}

#----------------------------------------------------------------------------*

class @doubleAsDefaultValue extends @abstractDefaultValue {
  @ldouble mValue ;
}

#----------------------------------------------------------------------------*

class @integerAsDefaultValue extends @abstractDefaultValue {
  @luint mValue ;
}

#----------------------------------------------------------------------------*

class @stringAsDefaultValue extends @abstractDefaultValue {
  @lstring mValue ;
}

#----------------------------------------------------------------------------*

class @identifierAsDefaultValue extends @abstractDefaultValue {
  @lstring mValue ;
}

#----------------------------------------------------------------------------*

list @defaultValueList {
  @abstractDefaultValue mDefaultValue ;
}

#----------------------------------------------------------------------------*

class @listAsDefaultValue extends @abstractDefaultValue {
  @location mStartLocation ;
  @defaultValueList mDefaultValueList ;
}

#----------------------------------------------------------------------------*

list @structFieldASTList {
  @lstring mFieldTypeName ;
  @lstring mFieldName ;
}

#----------------------------------------------------------------------------*

enum @typeKind {
  classType,
  controllerClassType,
  documentType,
  entityType,
  enumType,
  nibClassType,
  outletClassType,
  preferencesType,
  protocolType,
  structType,
#--- Predefined Type
  boolType,
  integerType,
  uintegerType,
  doubleType,
  stringType,
  colorType,
  dataType,
  dateType,
  fontType,
  imageType,
  menuType,
  bezierPathType
}

#----------------------------------------------------------------------------*

end semantics ;
