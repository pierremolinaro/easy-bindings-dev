semantics abstractSyntaxTree :
  import "easyBindings_options.gOption" ;

#----------------------------------------------------------------------------*

enum @easyBindingType {
 boolType, integer16Type, integer32Type, integer64Type,
 decimalType, floatType, doubleType,
 stringType, dataType, dateType,
 fontType, imageType, colorType, toManyEntitiesType
}{
}

#----------------------------------------------------------------------------*

reader @easyBindingType ebTypeName -> @string outResult :
  switch selfcopy
  when boolType : outResult := "bool" ;
  when integer16Type : outResult := "integer16" ;
  when integer32Type : outResult := "integer32" ;
  when integer64Type : outResult := "integer64" ;
  when decimalType : outResult := "decimal" ;
  when floatType : outResult := "float" ;
  when doubleType : outResult := "double" ;
  when stringType : outResult := "NSString" ;
  when dataType : outResult := "NSData" ;
  when dateType : outResult := "NSDate" ;
  when fontType : outResult := "NSFont" ;
  when imageType : outResult := "NSImage" ;
  when colorType : outResult := "NSColor" ;
  when toManyEntitiesType : outResult := "??" ;
  end switch ;
end reader ;

#----------------------------------------------------------------------------*

list @attributeList {
  @easyBindingType mType ;
  @lstring mAttributeName ;
  @easyBindingTypeList mDefaultValueCorrespondingAcceptableTypes ;
  @string mDefaultValueObjectiveCObject ;
  @string mDirectDefaultValue ;
}

#----------------------------------------------------------------------------*

enum @deleteRuleEnum {
  nullifyDeleteRule, cascadeDeleteRule, denyDeleteRule
}{
}

#----------------------------------------------------------------------------*

list @relationshipList {
  @bool mIsToMany ;
  @lstring mDestinationEntityName ;
  @lstring mRelationshipName ;
  @lstring mInverseRelationshipName ;
  @deleteRuleEnum mDeleteRule ;
}

#----------------------------------------------------------------------------*

list @transientList {
  @easyBindingType mType ;
  @lstring mTransientName ;
  @lstringlist mDependencyList ;
}

#----------------------------------------------------------------------------*

list @classList {
  @lstring mClassName ;
  @lstring mSuperClassName ;
  @attributeList mAttributeList ;
  @transientList mTransientList ;
}

#----------------------------------------------------------------------------*

list @entityList {
  @lstring mEntityName ;
  @lstring mSuperEntityName ;
  @lstring mImplementationClassName ;
  @attributeList mAttributeList ;
  @transientList mTransientList ;
  @relationshipList mRelationshipList ;
}

#----------------------------------------------------------------------------*

list @outletBindingOptionList {
  @lstring mOptionName ;
  @easyBindingTypeList mOptionValuePossibleTypes ;
  @string mOptionValueObjectiveCObject ;
}

#----------------------------------------------------------------------------*

list @bindingList {
  @lstring mBindingName ;
  @lstring mObservedObjectName ;
  @lstring mObservableAttributeName ;
  @outletBindingOptionList mOutletBindingOptionList ;
}

#----------------------------------------------------------------------------*

list @outletDeclarationList {
  @lstring mOutletType ;
  @lstring mOutletName ;
  @bindingList mOutletBindingList ;
}

#----------------------------------------------------------------------------*

list @preferencesDeclarationList {
  @lstring mPreferencesName ;
  @outletDeclarationList mOutletDeclarationList ;
  @attributeList mAttributeList ;
  @transientList mTransientList ;
}

#----------------------------------------------------------------------------*

list @controllerList {
  @lstring mControllerClassName ;
  @lstring mControllerName ;
  @lstring mControlledClassOrEntityName ;
  @bindingList mControllerBindingList ;
}

#----------------------------------------------------------------------------*

list @documentDeclarationList {
  @lstring mDocumentName ;
  @lstring mRootEntityName ;
  @outletDeclarationList mOutletDeclarationList ;
  @controllerList mControllerList ;
}

#----------------------------------------------------------------------------*

enum @formatterEnum {
  noFormatter, numberFormatter, dateFormatter
}{
}

#----------------------------------------------------------------------------*

list @easyBindingTypeAndFormatterList {
  @easyBindingType mType ;
  @formatterEnum mRequiredFormatter ;
}

#----------------------------------------------------------------------------*

list @easyBindingTypeList {
  @easyBindingType mType ;
}

#----------------------------------------------------------------------------*

list @outletClassBindingList {
  @lstring mBindingName ;
  @easyBindingTypeAndFormatterList mAcceptableTypeFormatterList ;
  @bindingOptionList mBindingOptionList ;
}

#----------------------------------------------------------------------------*

list @bindingOptionList {
  @lstring mBindingOptionName ;
  @easyBindingTypeList mAcceptableTypeList ;
}

#----------------------------------------------------------------------------*

list @outletClassList {
  @lstring mOutletClassName ;
  @lstring mSuperClassName ;
  @bool mGenerateCode ;
  @outletClassBindingList mOutletClassBindingList ;
  @bool mHasTableValueBinding ;
}

#----------------------------------------------------------------------------*

list @controllerClassList {
  @lstring mOutletClassName ;
  @bool mGenerateCode ;
  @outletClassBindingList mBindingList ;
}

#----------------------------------------------------------------------------*

struct @ASTstruct {
  @classList mClassList ;
  @entityList mEntityList ;
  @preferencesDeclarationList mPreferencesList ;
  @outletClassList mOutletClassList ;
  @controllerClassList mControllerClassList ;
  @documentDeclarationList mDocumentDeclarationList ;
}

#----------------------------------------------------------------------------*

end semantics ;
