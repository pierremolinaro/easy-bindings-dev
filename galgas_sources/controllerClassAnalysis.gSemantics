semantics controllerClassAnalysis :
  import "decoratedTypes.gSemantics" ;

#----------------------------------------------------------------------------*
# observedObjectTypeNameList                                                 *
#----------------------------------------------------------------------------*

#! observedObjectTypeNameList

#----------------------------------------------------------------------------*

abstract reader @abstractBooleanMultipleBindingExpressionForGeneration observedObjectTypeNameList
  -> @stringlist outObservedObjectTypeNameList
;

#----------------------------------------------------------------------------*

override reader @observablePropertyAsBooleanMultipleBindingExpressionForGeneration observedObjectTypeNameList
  -> @stringlist outObservedObjectTypeNameList
:
  outObservedObjectTypeNameList := {!mObservedTypeName} ;
end reader ;

#----------------------------------------------------------------------------*

override reader @negateBooleanMultipleBindingExpressionForGeneration observedObjectTypeNameList
  -> @stringlist outObservedModelNameList
:
  outObservedModelNameList := [mBinding observedObjectTypeNameList] ;
end reader ;

#----------------------------------------------------------------------------*

override reader @orBooleanMultipleBindingExpressionForGeneration observedObjectTypeNameList
  -> @stringlist outObservedModelNameList
:
  outObservedModelNameList := [mLeftBinding observedObjectTypeNameList] + [mRightBinding observedObjectTypeNameList] ;
end reader ;

#----------------------------------------------------------------------------*

override reader @andBooleanMultipleBindingExpressionForGeneration observedObjectTypeNameList
  -> @stringlist outObservedModelNameList
:
  outObservedModelNameList := [mLeftBinding observedObjectTypeNameList] + [mRightBinding observedObjectTypeNameList] ;
end reader ;

#----------------------------------------------------------------------------*
# enableExpressionString                                                     *
#----------------------------------------------------------------------------*

#! enableExpressionString

#----------------------------------------------------------------------------*

abstract reader @abstractBooleanMultipleBindingExpressionForGeneration enableExpressionString
  -> @string outEnableExpressionString
;

#----------------------------------------------------------------------------*

override reader @observablePropertyAsBooleanMultipleBindingExpressionForGeneration enableExpressionString
  -> @string outEnableExpressionString
:
  outEnableExpressionString := "object" + mIndex + "." + mObservedModel ;
end reader ;

#----------------------------------------------------------------------------*

override reader @negateBooleanMultipleBindingExpressionForGeneration enableExpressionString
  -> @string outEnableExpressionString
:
  outEnableExpressionString := "!(" + [mBinding enableExpressionString] + ")" ;
end reader ;

#----------------------------------------------------------------------------*

override reader @orBooleanMultipleBindingExpressionForGeneration enableExpressionString
  -> @string outEnableExpressionString
:
  outEnableExpressionString := "(" + [mLeftBinding enableExpressionString] +  " || " + [mRightBinding enableExpressionString] + ")" ;
end reader ;

#----------------------------------------------------------------------------*

override reader @andBooleanMultipleBindingExpressionForGeneration enableExpressionString
  -> @string outEnableExpressionString
:
  outEnableExpressionString := "(" + [mLeftBinding enableExpressionString] +  " && " + [mRightBinding enableExpressionString] + ")" ;
end reader ;

#----------------------------------------------------------------------------*
# observedModelNameList                                                      *
#----------------------------------------------------------------------------*

#! observedModelNameList

#----------------------------------------------------------------------------*

abstract reader @abstractBooleanMultipleBindingExpressionForGeneration observedModelNameList
  -> @stringlist outObservedModelNameList
;

#----------------------------------------------------------------------------*

override reader @observablePropertyAsBooleanMultipleBindingExpressionForGeneration observedModelNameList
  -> @stringlist outObservedModelNameList
:
  outObservedModelNameList := {!mObservedModel} ;
end reader ;

#----------------------------------------------------------------------------*

override reader @negateBooleanMultipleBindingExpressionForGeneration observedModelNameList
  -> @stringlist outObservedModelNameList
:
  outObservedModelNameList := [mBinding observedModelNameList] ;
end reader ;

#----------------------------------------------------------------------------*

override reader @orBooleanMultipleBindingExpressionForGeneration observedModelNameList
  -> @stringlist outObservedModelNameList
:
  outObservedModelNameList := [mLeftBinding observedModelNameList] + [mRightBinding observedModelNameList] ;
end reader ;

#----------------------------------------------------------------------------*

override reader @andBooleanMultipleBindingExpressionForGeneration observedModelNameList
  -> @stringlist outObservedModelNameList
:
  outObservedModelNameList := [mLeftBinding observedModelNameList] + [mRightBinding observedModelNameList] ;
end reader ;

#----------------------------------------------------------------------------*
# filewrapper controllerTemplates                                            *
#----------------------------------------------------------------------------*

#! filewrapper controllerTemplates

#----------------------------------------------------------------------------*

filewrapper controllerTemplates in "../generation-templates/controller-templates" {
  "txt"
}{
}{
  template enabledBindingGeneration "enabled-binding.swift.gTemplate"
    ?@string OUTLET_PROPRIETARY_CLASS_NAME
    ?@string OUTLET_NAME
#    ?@string OBJECT_CLASS
#    ?@string MODEL
    ?@abstractBooleanMultipleBindingExpressionForGeneration ENABLE_EXPRESSION
  ;
}

#----------------------------------------------------------------------------*

list @controllerBindingOptionDecoratedList {
  @lstring mOptionName ;
  @unifiedTypeProxy mOptionType ;
}

#----------------------------------------------------------------------------*

map @templateControllerMap {
  @string mTemplateString ;
  @unifiedTypeProxy mModelTypeProxy ;
  @lstring mModelSelector ;
  @bool mModelShouldBeWritableProperty ;
  @controllerBindingOptionDecoratedList mControllerBindingOptionDecoratedList ;
  insert insertKey error message "the '%K' controller template is already declared in %L" ;
  search searchKey error message "there is no '%K' controller template" ;
}

#----------------------------------------------------------------------------*

routine buildControllerTemplateMap
  ??@unifiedTypeMap inUnifiedTypeMap
  ??@controllerTemplateList inControllerTemplateList
  !@templateControllerMap outTemplateControllerMap
:
  outTemplateControllerMap := {} ;
  const @filewrapper fw := [filewrapper controllerTemplates] ;
  for () in inControllerTemplateList do
    const templateName := [@lstring new
      !mOutletClassName->string + "." + mBindingName->string + "." + mModelTypeName->string + "." + mModelSelector->string
      !mBindingName->location
    ] ;
    const templateText := [fw textFileContentsAtPath !"/" + templateName + ".txt"] ;
    const modelTypeProxy := [@unifiedTypeProxy searchKey !inUnifiedTypeMap !mModelTypeName] ;
    @controllerBindingOptionDecoratedList controllerBindingOptionDecoratedList := {} ;
    for () in mBindingOptionList do
      const bindingOptionTypeProxy := [@unifiedTypeProxy searchKey !inUnifiedTypeMap !mOptionTypeName] ;
      controllerBindingOptionDecoratedList += !mOptionName !bindingOptionTypeProxy ;    
    end for ;
    [!?outTemplateControllerMap insertKey
      !templateName
      !templateText
      !modelTypeProxy
      !mModelSelector
      !mModelShouldBeWritableProperty
      !controllerBindingOptionDecoratedList
    ] ;
  end for ;
end routine ;

#----------------------------------------------------------------------------*

end semantics ;
