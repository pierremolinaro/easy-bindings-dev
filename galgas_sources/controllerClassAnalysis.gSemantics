semantics controllerClassAnalysis :
  import "decoratedTypes.gSemantics" ;

#----------------------------------------------------------------------------*

local filewrapper controllerTemplates in "../generation-templates/controller-templates" {
  "txt"
}{
}{
}

#----------------------------------------------------------------------------*

list @controllerBindingOptionDecoratedList {
  @lstring mOptionName ;
  @unifiedTypeProxy mOptionType ;
}

#----------------------------------------------------------------------------*

map @templateControllerMap {
  @string mTemplateString ;
  @unifiedTypeProxy mModelTypeProxy ;
  @controllerBindingOptionDecoratedList mControllerBindingOptionDecoratedList ;
  insert insertKey error message "the '%K' controller template is already declared in %L" ;
  search searchKey error message "there is no '%K' controller template" ;
}

#----------------------------------------------------------------------------*

routine buildControllerTemplateMap
  ??@unifiedTypeMap inUnifiedTypeMap
  ??@controllerTemplateList inControllerTemplateList
  !@templateControllerMap outTemplateControllerMap
:
  outTemplateControllerMap := {} ;
  const @filewrapper fw := [filewrapper controllerTemplates] ;
  for () in inControllerTemplateList do
    const templateName := [@lstring new !mOutletClassName->string + "." + mBindingName->string !mBindingName->location] ;
    const templateText := [fw textFileContentsAtPath !"/" + templateName + ".txt"] ;
    const modelTypeProxy := [@unifiedTypeProxy searchKey !inUnifiedTypeMap !mModelTypeName] ;
    @controllerBindingOptionDecoratedList controllerBindingOptionDecoratedList := {} ;
    for () in mBindingOptionList do
      const bindingOptionTypeProxy := [@unifiedTypeProxy searchKey !inUnifiedTypeMap !mOptionType] ;
      controllerBindingOptionDecoratedList += !mOptionName !bindingOptionTypeProxy ;    
    end for ;
    [!?outTemplateControllerMap insertKey
      !templateName
      !templateText
      !modelTypeProxy
      !controllerBindingOptionDecoratedList
    ] ;
  end for ;
end routine ;

#----------------------------------------------------------------------------*

end semantics ;
