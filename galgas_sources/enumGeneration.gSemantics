semantics enumGeneration :
  import "easyBindings_options.gOption" ;
  import "decoratedTypes.gSemantics" ;

#----------------------------------------------------------------------------*

local filewrapper enumGenerationTemplate in "../generation-templates/enum-generation" {
}{
}{
  template enumDeclaration "enum.h.gTemplate"
    ?@string ENUM_TYPE_NAME
    ?@lstringlist CONSTANT_ORDERED_LIST
  ;
  template enumGeneration "enum.m.gTemplate"
    ?@string ENUM_TYPE_NAME
    ?@lstringlist CONSTANT_ORDERED_LIST
  ;
}

#----------------------------------------------------------------------------*

routine generateEnumerations
  ??@enumMap inEnumMap
  ??@string inOutputDirectory
:
  if [@uint errorCount] == 0 then
    foreach inEnumMap do
      @string s := [filewrapper enumGenerationTemplate.enumDeclaration
        ![lkey string]
        !mConstantOrderedList
      ] ;
      [@string generateFileWithPattern
        !inOutputDirectory
        ![lkey string] . ".h"
        !"//"
        !"\n\n" # Defaut user zone1
        !s
        !"\n\n" # Defaut user zone2
        !"\n"
      ] ;
      s := [filewrapper enumGenerationTemplate.enumGeneration
        ![lkey string]
        !mConstantOrderedList
      ] ;
      [@string generateFileWithPattern
        !inOutputDirectory
        ![lkey string] . ".m"
        !"//"
        !"\n\n" # Defaut user zone1
        !s
        !"\n\n" # Defaut user zone2
        !"\n"
      ] ;
    end foreach ;
  end if ;
end routine ;

#----------------------------------------------------------------------------*


end semantics ;
