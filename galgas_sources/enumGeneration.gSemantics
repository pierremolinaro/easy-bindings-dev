semantics enumGeneration :
  import "easyBindings_options.gOption" ;
  import "decoratedTypes.gSemantics" ;

#----------------------------------------------------------------------------*

local filewrapper enumGenerationTemplate in "../generation-templates" {
}{
}{
  template enumGenerationInSwift "enum.swift.gTemplate"
    ?@string ENUM_TYPE_NAME
    ?@lstringlist CONSTANT_ORDERED_LIST
  ;
}

#----------------------------------------------------------------------------*

list @enumListForGeneration {
  @string mEnumName ;
  @lstringlist mEnumConstantList ;
}

#----------------------------------------------------------------------------*

routine generateEnums
  ??@enumListForGeneration inEnumListForGeneration
  ??@string inOutputDirectory
:
  for () in inEnumListForGeneration do
    const s := [filewrapper enumGenerationTemplate.enumGenerationInSwift
      !mEnumName
      !mEnumConstantList
    ] ;
    [@string generateFileWithPattern
      !inOutputDirectory
      !mEnumName . ".swift"
      !"//"
      !"\n\n" # Defaut user zone1
      !s
      !"\n\n" # Defaut user zone2
      !"\n"
    ] ;
  end for ;
end routine ;

#----------------------------------------------------------------------------*


end semantics ;
