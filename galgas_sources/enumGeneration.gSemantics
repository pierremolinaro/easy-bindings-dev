semantics enumGeneration :
  import "easyBindings_options.gOption" ;
  import "decoratedTypes.gSemantics" ;

#----------------------------------------------------------------------------*

local filewrapper enumGenerationTemplate in "../generation-templates" {
}{
}{
  template enumGenerationInSwift "enum.swift.gTemplate"
    ?@string ENUM_TYPE_NAME
    ?@lstringlist CONSTANT_ORDERED_LIST
  ;
}

#----------------------------------------------------------------------------*

list @enumListForGeneration {
  @string mEnumName ;
  @lstringlist mEnumConstantList ;
}

#----------------------------------------------------------------------------*

routine generateEnums
  ??@enumListForGeneration inEnumListForGeneration
  ??@string inOutputDirectory
:
  for () in inEnumListForGeneration do
    if [mEnumConstantList length] > 0 then # Empty list is the generic type "Enum"
      const s := [filewrapper enumGenerationTemplate.enumGenerationInSwift
        !mEnumName
        !mEnumConstantList
      ] ;
      [@string generateFile
        !inOutputDirectory
        !mEnumName . ".swift"
        !s
      ] ;
    end if ;
  end for ;
end routine ;

#----------------------------------------------------------------------------*


end semantics ;
