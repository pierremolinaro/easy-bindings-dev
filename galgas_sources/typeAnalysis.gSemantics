semantics typeAnalysis :
  import "bindingSemanticAnalysis.gSemantics" ;
  import "attributeDeclarationAnalysis.gSemantics" ;
  import "preferencesGeneration.gSemantics" ;
import "controllerClassAnalysis.gSemantics" ;

#----------------------------------------------------------------------------*

struct @structForGeneration{
  @transientListForGeneration mTransientListForGeneration ;
  @actionListForGeneration mActionListForGeneration ;
  @preferenceListForGeneration mPreferenceListForGeneration ;
  @stringset mNeededOutletClasses ;
  @stringset mControllerGenerationStringSet ;
}
#----------------------------------------------------------------------------*

routine typeAnalysis
  ??@unifiedTypeMap inUnifiedTypeMap
  ??@outletClassMap inOutletClassMap
  ??@templateControllerMap inTemplateControllerMap
  !@structForGeneration outGeneration
:
  outGeneration := [@structForGeneration default] ;
  for (@lstring lkey
       @typeKind typeKind
       @unifiedTypeProxy superType
       @unifiedTypeProxy rootEntityType
       @decoratedAttributeMap decoratedAttributeMap
       @decoratedTransientMap decoratedTransientMap
       @decoratedOutletMap decoratedOutletMap
       @decoratedObservablePropertyMap observablePropertyMap
       @decoratedEntityRelationshipMap currentRelationshipMap
       @actionMap actionMap
       @bindingList bindingList) in inUnifiedTypeMap do
   #--- Build all observable property map
      @decoratedObservablePropertyMap allObservableProperties := observablePropertyMap ;
      var t := superType ;
      loop [inUnifiedTypeMap count] : while not [t isNull] do
        for () super_ in [t mObservablePropertyMap] do
          [!?allObservableProperties insertKey
            !super_lkey
            !super_mPropertyType
            !super_mIsTransient
            !super_mPropertySignature
            !super_mIsCollection
         ] ;
        end for ;
        t := [t mSuperType] ;
      end loop ; 
    unifiedTypeAnalysis
      !inUnifiedTypeMap
      !inOutletClassMap
      !inTemplateControllerMap
      !lkey
      !typeKind
      !superType
      !rootEntityType
      !decoratedAttributeMap
      !decoratedTransientMap
      !decoratedOutletMap
      !observablePropertyMap
      !currentRelationshipMap
      !allObservableProperties
      !actionMap
      !bindingList
      !?outGeneration
    ;  
  end for ;
end routine ;

#----------------------------------------------------------------------------*

local routine unifiedTypeAnalysis
  ??@unifiedTypeMap inUnifiedTypeMap
  ??@outletClassMap inOutletClassMap
  ??@templateControllerMap inTemplateControllerMap
  ??@lstring inTypeName
  ??@typeKind inTypeKind
  ??@unifiedTypeProxy unused superType
  ??@unifiedTypeProxy inRootEntityType
  ??@decoratedAttributeMap decoratedAttributeMap
  ??@decoratedTransientMap decoratedTransientMap
  ??@decoratedOutletMap decoratedOutletMap
  ??@decoratedObservablePropertyMap inCurrentObservablePropertyMap
  ??@decoratedEntityRelationshipMap unused currentRelationshipMap
  ??@decoratedObservablePropertyMap inAllObservablePropertyMap
  ??@actionMap inActionMap
  ??@bindingList inBindingList
  ?!@structForGeneration ioGeneration
:
#--- Analyze transient dependancies
  for () in decoratedTransientMap do
    @transientDependencyListForGeneration transientDependencyListForGeneration := {} ;
    for () in mDependencyList do
      if not [[mTransientType mTypeKind] suitableForObservableProperty] then
        error lkey : "the '" . [mTransientType key] . "' type is not acceptable for transient" ;
      end if ;
      [mDependency transientDependencySemanticAnalysis
        !inUnifiedTypeMap
        !lkey
        !inAllObservablePropertyMap
        !inRootEntityType
        !mTransientSignature
        !?transientDependencyListForGeneration
      ] ;
    end for ;
    ioGeneration->mTransientListForGeneration += !mTransientSignature->string !mTransientType !transientDependencyListForGeneration ;  
  end for ;
#--- Check outlet types are declared
  for () in decoratedOutletMap do
    [inOutletClassMap searchKey !mOutletTypeName] ;
    ioGeneration->mNeededOutletClasses += !mOutletTypeName->string ;
  end for ;
#--- Analyze attribute default value
  @attributeListForGeneration attributeListForGeneration := {} ;
  for () in decoratedAttributeMap do
    [mDefaultValue analyzeDefaultValueType 
      !{!mAttributeType}
      ??@string swiftDefaultValueAsString
    ] ;
    attributeListForGeneration += !mAttributeType !lkey->string !swiftDefaultValueAsString ;
  end for ;
#--- Analyze bindings
  @stringlist controllerInstanciationStringList := {} ;
  for () in inBindingList do
    [inCurrentObservablePropertyMap searchKey
      !mObservablePropertyName
      ??@unifiedTypeProxy propertyType
      ?* # ?@bool isTransient
      ?* #?@lstring propertySignature
      ??@bool isCollection
    ] ;
    if isCollection then
      error mObservablePropertyName : "the observable property should not be a collection" ;
    end if ;
    [decoratedOutletMap searchKey !mOutletName ??@lstring outletTypeName] ;
    const controllerTemplateName := [@lstring new !outletTypeName->string + "." + mBindingName !mBindingName->location] ;
    [inTemplateControllerMap searchKey
      !controllerTemplateName
      ??@string templateString
      ??@unifiedTypeProxy modelTypeProxy
      ??@controllerBindingOptionDecoratedList controllerBindingOptionDecoratedList
    ] ;
  #--- Check model type
    if [modelTypeProxy key] != [propertyType key] then
      error mBindingName : "the type of the observable property is '" + [propertyType key] + "', but this binding requires the '" + [modelTypeProxy key] + "' type" ;    
    end if ;
  #--- Check options
    var bindingOptionString := "" ;
    if [controllerBindingOptionDecoratedList length] != [mBindingOptionList length] then
      @string s ;
      if [controllerBindingOptionDecoratedList length] == 0 then
        s := "this binding has no option" ;
      else 
        s := "this binding requires the following options:" ;
        for () in controllerBindingOptionDecoratedList do
          s += "\n  - " + mOptionName + " : " + [mOptionType key] ;
        end for ;
      end if ;
      error mBindingName : s ;
    else
      for () controller_ in controllerBindingOptionDecoratedList, () binding_ in mBindingOptionList do
        if controller_mOptionName->string != binding_mOptionName->string then
          error binding_mOptionName : "the option name should be '" + controller_mOptionName + "'" ;
        end if ;
        [binding_mOptionValue analyzeDefaultValueType 
          !{!controller_mOptionType}
          ??@string optionValueAsString
        ] ;
        bindingOptionString += ", " + controller_mOptionName->string + ":" + optionValueAsString ;
      end for ;
    end if ;
  #--- Build controller string
    var controllerString := "//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*\n" ;
    controllerString += "//   Controller " + [inTypeName->string + " " + mObservablePropertyName + " - " + outletTypeName + " $" + mBindingName stringByRightPadding !103 !' '] + "*\n" ;
    controllerString += "//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*\n\n" ;
    controllerString += [
      [templateString stringByReplacingStringByString !"$MODEL$" !mObservablePropertyName->string] stringByReplacingStringByString !"$OBJECTCLASS$" !inTypeName->string
    ] ;
    ioGeneration->mControllerGenerationStringSet += !controllerString ;
  #--- Build controller instanciation string
    const controllerInstanciationString := "Controller_" + inTypeName + "_" + mObservablePropertyName + "_" + outletTypeName + "_" + mBindingName
       + " (object:self, outlet:" + mOutletName + ", file:__FILE__, line:__LINE__" + bindingOptionString + ")" ;
    controllerInstanciationStringList += !controllerInstanciationString ;
  end for ;
#--- Build action list
  for () action_ in inActionMap do
    ioGeneration->mActionListForGeneration += !inTypeName->string !action_lkey->string ;
  end for ;
#--- Build generation lists
  switch inTypeKind
  when preferencesType :
    ioGeneration->mPreferenceListForGeneration +=
      !inTypeName->string
      !attributeListForGeneration
      !decoratedTransientMap
      !decoratedOutletMap
      !controllerInstanciationStringList
    ;
  when bezierPathType, boolType, colorType, classType, controllerClassType, dataType, dateType, documentType,
       doubleType, entityType, enumType, fontType, imageType, integerType, menuType, nibClassType, outletClassType,
       protocolType, stringType, structType, uintegerType:
  end switch ;
end routine ;

#----------------------------------------------------------------------------*

abstract method @abstractTransientDependency transientDependencySemanticAnalysis
  ??@unifiedTypeMap inUnifiedTypeMap
  ??@lstring inTransientName
  ??@decoratedObservablePropertyMap inAllObservablePropertyMap
  ??@unifiedTypeProxy inRootEntityType
  ??@lstring inTransientPropertySignature
  ?!@transientDependencyListForGeneration ioTransientDependencyListForGeneration
;

#----------------------------------------------------------------------------*

end semantics ;
