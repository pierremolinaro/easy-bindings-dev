semantics typeAnalysis :
  import "bindingSemanticAnalysis.gSemantics" ;
  import "documentGeneration.gSemantics" ;
  import "preferencesGeneration.gSemantics" ;
  import "entityGeneration.gSemantics" ;
  import "enumGeneration.gSemantics" ;
  import "controllerClassAnalysis.gSemantics" ;
  import "arrayControllerGeneration.gSemantics" ;

#----------------------------------------------------------------------------*

struct @structForGeneration{
  @transientListForGeneration mTransientListForGeneration ;
  @actionListForGeneration mActionListForGeneration ;
  @preferenceListForGeneration mPreferenceListForGeneration ;
  @documentListForGeneration mDocumentListForGeneration ;
  @entityListForGeneration mEntityListForGeneration ;
  @enumListForGeneration mEnumListForGeneration ;
  @stringset mNeededOutletClasses ;
  @stringset mControllerGenerationStringSet ;
  @arrayControllerForGeneration mAllArrayControllerForGeneration ;
}

#----------------------------------------------------------------------------*

routine typeAnalysis
  ??@unifiedTypeMap inUnifiedTypeMap
  ??@outletClassMap inOutletClassMap
  ??@templateControllerMap inTemplateControllerMap
  !@structForGeneration outGeneration
:
  outGeneration := [@structForGeneration default] ;
  for (@lstring lkey
       @typeKind typeKind
       @unifiedTypeProxy superType
       @unifiedTypeProxy rootEntityType
       @decoratedAttributeMap decoratedAttributeMap
       @decoratedTransientMap decoratedTransientMap
       @decoratedOutletMap decoratedOutletMap
       @decoratedObservablePropertyMap observablePropertyMap
       @decoratedEntityRelationshipMap currentRelationshipMap
       @actionMap actionMap
       @bindingList bindingList
       @lstringlist enumConstantList
       @enumConstantMap enumConstantMap
       @arrayControllerMap arrayControllerMap) in inUnifiedTypeMap do
   #--- Build all observable property map
      @decoratedObservablePropertyMap allObservableProperties := observablePropertyMap ;
      var t := superType ;
      loop [inUnifiedTypeMap count] : while not [t isNull] do
        for () super_ in [t mObservablePropertyMap] do
          [!?allObservableProperties insertKey
            !super_lkey
            !super_mPropertyType
            !super_mIsTransient
            !super_mPropertySignature
            !super_mIsCollection
         ] ;
        end for ;
        t := [t mSuperType] ;
      end loop ; 
    unifiedTypeAnalysis
      !inUnifiedTypeMap
      !inOutletClassMap
      !inTemplateControllerMap
      !lkey
      !typeKind
      !superType
      !rootEntityType
      !decoratedAttributeMap
      !decoratedTransientMap
      !decoratedOutletMap
      !observablePropertyMap
      !currentRelationshipMap
      !allObservableProperties
      !actionMap
      !bindingList
      !enumConstantList
      !enumConstantMap
      !arrayControllerMap
      !?outGeneration
    ;  
  end for ;
end routine ;

#----------------------------------------------------------------------------*

local routine unifiedTypeAnalysis
  ??@unifiedTypeMap inUnifiedTypeMap
  ??@outletClassMap inOutletClassMap
  ??@templateControllerMap inTemplateControllerMap
  ??@lstring inTypeName
  ??@typeKind inTypeKind
  ??@unifiedTypeProxy inSuperType
  ??@unifiedTypeProxy inRootEntityType
  ??@decoratedAttributeMap decoratedAttributeMap
  ??@decoratedTransientMap decoratedTransientMap
  ??@decoratedOutletMap decoratedOutletMap
  ??@decoratedObservablePropertyMap inCurrentObservablePropertyMap
  ??@decoratedEntityRelationshipMap inCurrentRelationshipMap
  ??@decoratedObservablePropertyMap inAllObservablePropertyMap
  ??@actionMap inActionMap
  ??@bindingList inBindingList
  ??@lstringlist inEnumConstantList
  ??@enumConstantMap unused inEnumConstantMap
  ??@arrayControllerMap inArrayControllerMap
  ?!@structForGeneration ioGeneration
:
#--- Check outlet types are declared
  for () in decoratedOutletMap do
    [inOutletClassMap searchKey !mOutletTypeName] ;
    ioGeneration->mNeededOutletClasses += !mOutletTypeName->string ;
  end for ;
#--- Analyze relationships
  @entityRelationshipListForGeneration entityRelationshipListForGeneration := {} ;
  for () in inCurrentRelationshipMap do
    [[mRelationshipType mCurrentRelationshipMap] searchKey
      !mOppositeRelationshipName
      ??@bool oppositeRelationIsToMany
      ??@unifiedTypeProxy oppositeRelationshipType
      ??@lstring oppositeOfOppositeRelationshipName
    ] ;
    if oppositeOfOppositeRelationshipName->string != lkey->string then
      error lkey : "the opposite relationship is '" . mOppositeRelationshipName
         . "' and names '" . oppositeOfOppositeRelationshipName . "' as opposite, instead of '" . lkey . "'" ;
    end if ;
    if [oppositeRelationshipType key] != inTypeName->string then
      error lkey : "the opposite relationship type is '" . [oppositeRelationshipType key] . "', instead of '" . lkey . "'" ;
    end if ;
    entityRelationshipListForGeneration +=
      !lkey->string
      !mIsToMany
      !mRelationshipType
      !mOppositeRelationshipName->string
      !oppositeRelationIsToMany
    ;
  end for ;
#--- Analyze array controllers
  @arrayControllerForGeneration documentArrayControllerForGeneration := {} ;
  for () in inArrayControllerMap do
  #--- Check model is a tomany relationship
    [mBoundModel analyzeBoundObservablePropertyForArrayControllerBinding
      ![inRootEntityType mCurrentRelationshipMap]
      ??@unifiedTypeProxy outElementTypeProxy
      ??@lstring outBoundRootTomanyRelationshipName
    ] ;
  #--- Check outlet is a PMTableView
    [decoratedOutletMap searchKey !mTableViewOutletName ??outletTypeName] ;
    if outletTypeName->string != "PMTableView" then
      error mTableViewOutletName : "this outlet is not an instance of PMTableView" ;
    end if ;
  #--- Check colum bound models
    @arrayControllerBoundColumnListForGeneration arrayControllerBoundColumnListForGeneration := {} ;
    for () in mArrayControllerBoundColumnListAST do
      [[outElementTypeProxy mObservablePropertyMap] searchKey
        !mObservablePropertyName
        ??@unifiedTypeProxy propertyType
        ??@bool mIsTransient
        ??@lstring mPropertySignature
        ??@bool mIsCollection
      ] ;
      if mIsCollection then
        error mObservablePropertyName : "the bound property should not be a collection" ;
      end if ;
      arrayControllerBoundColumnListForGeneration +=
        !mColumnName->string
        !mColumnOutletTypeName->string
        !mObservablePropertyName->string
        !propertyType
        !mBindingOptionList
      ;
    end for ;
    documentArrayControllerForGeneration +=
      ![inRootEntityType key]
      !outBoundRootTomanyRelationshipName->string
      ![outElementTypeProxy key]
      !mTableViewOutletName->string
      !arrayControllerBoundColumnListForGeneration
    ;
  end for ;
  ioGeneration->mAllArrayControllerForGeneration += documentArrayControllerForGeneration ;
#--- Analyze transient dependancies
  for () in decoratedTransientMap do
    @transientDependencyListForGeneration transientDependencyListForGeneration := {} ;
    for () in mDependencyList do
      if not [[mTransientType mTypeKind] suitableForObservableProperty] then
        error lkey : "the '" . [mTransientType key] . "' type is not acceptable for transient" ;
      end if ;
      [mDependency transientDependencySemanticAnalysis
        !inUnifiedTypeMap
        !lkey
        !inAllObservablePropertyMap
        !inRootEntityType
        !mTransientSignature
        !?transientDependencyListForGeneration
      ] ;
    end for ;
    ioGeneration->mTransientListForGeneration += !mTransientSignature->string !mTransientType !transientDependencyListForGeneration ;  
  end for ;
#--- Analyze attribute default value
  @attributeListForGeneration attributeListForGeneration := {} ;
  for () in decoratedAttributeMap do
    [mDefaultValue analyzeDefaultValueType 
      !{!mAttributeType}
      ??@string swiftDefaultValueAsString
    ] ;
    attributeListForGeneration += !mAttributeType !lkey->string !swiftDefaultValueAsString ;
  end for ;
#--- Analyze bindings
  @stringlist controllerInstanciationStringList := {} ;
  for () in inBindingList do
    var controllerSignature := "" ;
    var @unifiedTypeProxySelectorList boundPropertyTypeList := {} ;
    var @2stringlist typePropertyNameList := {} ;
    var @stringlist boundObjectNameList := {} ;
    [mObservableProperty analyzeBoundObservablePropertyForSimpleBinding
      !inUnifiedTypeMap
      !inTypeName->string
      !inCurrentObservablePropertyMap
      !inRootEntityType
      !?controllerSignature
      !?boundPropertyTypeList
      !?typePropertyNameList
      !?boundObjectNameList
    ] ;
    [decoratedOutletMap searchKey !mOutletName ??@lstring outletTypeName] ;
    controllerSignature := outletTypeName->string + "." + mBindingName + controllerSignature ;
    const controllerTemplateName := [@lstring new
      !controllerSignature
      !mBindingName->location
    ] ;
    var @unifiedTypeProxySelectorList modelPropertyTypeList := {} ;
    [inTemplateControllerMap searchKey
      !controllerTemplateName
      ??@string templateString
      ??@unifiedTypeProxy modelTypeProxy
      ??@lstring modelSelector
      ??@controllerBindingOptionDecoratedList controllerBindingOptionDecoratedList
    ] ;
    modelPropertyTypeList += !modelTypeProxy !modelSelector ;
  #--- Check bound models types and selectors
    if [boundPropertyTypeList length] != [modelPropertyTypeList length] then
      error mOutletName : "internal error" ;
    else
      for () model_ in modelPropertyTypeList, () bound_ in boundPropertyTypeList do
        if ([model_mType mTypeKind] == [@typeKind enumType]) & ([bound_mType mTypeKind] == [@typeKind enumType]) then
        # Always ok for any enum type
        elsif [model_mType key] != [bound_mType key] then
          error bound_mSelector : "the type of the observable property is '" + [bound_mType key]
             + "', but this binding requires the '" + [model_mType key] + "' type"
          ;    
        end if ;
        if model_mSelector->string != bound_mSelector->string then
          error bound_mSelector : "the selector of the observable property should be '" + model_mSelector + "'" ;    
        end if ;
      end for ;
    end if ;
  #--- Check options
    var bindingOptionString := "" ;
    if [controllerBindingOptionDecoratedList length] != [mBindingOptionList length] then
      @string s ;
      if [controllerBindingOptionDecoratedList length] == 0 then
        s := "this binding has no option" ;
      else 
        s := "this binding requires the following options:" ;
        for () in controllerBindingOptionDecoratedList do
          s += "\n  - " + mOptionName + " : " + [mOptionType key] ;
        end for ;
      end if ;
      error mBindingName : s ;
    else
      for () controller_ in controllerBindingOptionDecoratedList, () binding_ in mBindingOptionList do
        if controller_mOptionName->string != binding_mOptionName->string then
          error binding_mOptionName : "the option name should be '" + controller_mOptionName + "'" ;
        end if ;
        [binding_mOptionValue analyzeDefaultValueType 
          !{!controller_mOptionType}
          ??@string optionValueAsString
        ] ;
        bindingOptionString += ", " + controller_mOptionName->string + ":" + optionValueAsString ;
      end for ;
    end if ;
  #--- Build controller string
    var title := "" ;
    for () in typePropertyNameList do
      title += mValue0 + " " + mValue1 ;
    end for ;    
    var controllerString := "//" + [@string stringWithSequenceOfCharacters !'—' !117] + "*\n" ;
    controllerString += "//   Controller " + [title + " - " + outletTypeName + " $" + mBindingName stringByRightPadding !103 !' '] + "*\n" ;
    controllerString += "//" + [@string stringWithSequenceOfCharacters !'—' !117] + "*\n\n" ;
    var templateStringWithReplacements := templateString ;
    for () in typePropertyNameList do
      templateStringWithReplacements := [templateStringWithReplacements stringByReplacingStringByString !"$OBJECTCLASS$" !mValue0] ;
      templateStringWithReplacements := [templateStringWithReplacements stringByReplacingStringByString !"$MODEL$" !mValue1] ;
    end for ;    
    controllerString += templateStringWithReplacements ;
    ioGeneration->mControllerGenerationStringSet += !controllerString ;
  #--- Build controller instanciation string
    var controllerInstanciationString := "Controller" ;
    for () in typePropertyNameList do
      controllerInstanciationString += "_" + mValue0 + "_" + mValue1 ;
    end for ;    
    controllerInstanciationString += "_" + outletTypeName + "_" + mBindingName + " (" ;
    var prefix := "object" ;
    for (s) in boundObjectNameList do index idx
      controllerInstanciationString += prefix + ":" + s + ", " ;
      prefix := "object" + (idx + 1) ;
    end for ;
    controllerInstanciationString += "outlet:" + mOutletName + ", file:__FILE__, line:__LINE__" + bindingOptionString + ")" ;
    controllerInstanciationStringList += !controllerInstanciationString ;
  end for ;
#--- Build action list
  for () action_ in inActionMap do
    ioGeneration->mActionListForGeneration += !inTypeName->string !action_lkey->string ;
  end for ;
#--- Build generation lists
  switch inTypeKind
  when enumType :
    ioGeneration->mEnumListForGeneration +=
      !inTypeName->string
      !inEnumConstantList
    ;
  when entityType :
    ioGeneration->mEntityListForGeneration +=
      !inTypeName->string
      !if [inSuperType isNull] then "" else [inSuperType key] end
      !attributeListForGeneration
      !decoratedTransientMap
      !entityRelationshipListForGeneration
    ;
  when documentType :
    ioGeneration->mDocumentListForGeneration +=
      !inTypeName->string
      ![inRootEntityType key]
      !attributeListForGeneration
      !decoratedTransientMap
      !decoratedOutletMap
      !controllerInstanciationStringList
      !documentArrayControllerForGeneration
    ;
  when preferencesType :
    ioGeneration->mPreferenceListForGeneration +=
      !inTypeName->string
      !attributeListForGeneration
      !decoratedTransientMap
      !decoratedOutletMap
      !controllerInstanciationStringList
    ;
  when bezierPathType, boolType, colorType, classType, controllerClassType, dataType, dateType,
       doubleType, fontType, imageType, integerType, menuType, nibClassType, outletClassType,
       protocolType, stringType, structType, uintegerType:
  end switch ;
end routine ;

#----------------------------------------------------------------------------*

abstract method @abstractTransientDependency transientDependencySemanticAnalysis
  ??@unifiedTypeMap inUnifiedTypeMap
  ??@lstring inTransientName
  ??@decoratedObservablePropertyMap inAllObservablePropertyMap
  ??@unifiedTypeProxy inRootEntityType
  ??@lstring inTransientPropertySignature
  ?!@transientDependencyListForGeneration ioTransientDependencyListForGeneration
;

#----------------------------------------------------------------------------*
# analyzeBoundObservablePropertyForSimpleBinding                             *
#----------------------------------------------------------------------------*

#! analyzeBoundObservablePropertyForSimpleBinding

#----------------------------------------------------------------------------*

abstract method @abstractObservablePropertyAST analyzeBoundObservablePropertyForSimpleBinding
  ??@unifiedTypeMap inUnifiedTypeMap
  ??@string inCurrentTypeName
  ??@decoratedObservablePropertyMap inObservablePropertyMap
  ??@unifiedTypeProxy inRootEntityType
  ?!@string ioControllerSignature
  ?!@unifiedTypeProxySelectorList ioBoundPropertyTypeList
  ?!@2stringlist ioTypePropertyNameList
  ?!@stringlist ioBoundObjectNameList
;

#----------------------------------------------------------------------------*

override method @selfObservablePropertyAST analyzeBoundObservablePropertyForSimpleBinding
  ??@unifiedTypeMap unused inUnifiedTypeMap
  ??@string inCurrentTypeName
  ??@decoratedObservablePropertyMap inObservablePropertyMap
  ??@unifiedTypeProxy unused inRootEntityType
  ?!@string ioControllerSignature
  ?!@unifiedTypeProxySelectorList ioBoundPropertyTypeList
  ?!@2stringlist ioTypePropertyNameList
  ?!@stringlist ioBoundObjectNameList
:
  [inObservablePropertyMap searchKey
    !mSelfObservablePropertyName
    ??@unifiedTypeProxy propertyType
    ?* # ?@bool isTransient
    ?* #?@lstring propertySignature
    ??@bool isCollection
  ] ;
  if isCollection then
    error mSelfObservablePropertyName : "the observable property should not be a collection" ;
  end if ;
  ioControllerSignature += "." + [propertyType typeNameForControllerTemplateName] + "." + mSelectorName ;
  ioBoundPropertyTypeList += !propertyType !mSelectorName ;
  ioTypePropertyNameList += !inCurrentTypeName !mSelfObservablePropertyName->string ;
  ioBoundObjectNameList += !"self" ;
end method ;

#----------------------------------------------------------------------------*

override method @rootObservablePropertyAST analyzeBoundObservablePropertyForSimpleBinding
  ??@unifiedTypeMap unused inUnifiedTypeMap
  ??@string unused inCurrentTypeName
  ??@decoratedObservablePropertyMap unused inObservablePropertyMap
  ??@unifiedTypeProxy inRootEntityType
  ?!@string ioControllerSignature
  ?!@unifiedTypeProxySelectorList ioBoundPropertyTypeList
  ?!@2stringlist ioTypePropertyNameList
  ?!@stringlist ioBoundObjectNameList
:
  [[inRootEntityType mObservablePropertyMap] searchKey
    !mRootObservablePropertyName
    ??@unifiedTypeProxy propertyType
    ?* # ?@bool isTransient
    ?* #?@lstring propertySignature
    ??@bool isCollection
  ] ;
  if isCollection then
    error mRootObservablePropertyName : "the observable property should not be a collection" ;
  end if ;
  ioControllerSignature += "." + [propertyType typeNameForControllerTemplateName] + "." + mSelectorName ;
  ioBoundPropertyTypeList += !propertyType !mSelectorName ;
  ioTypePropertyNameList += ![inRootEntityType key] !mRootObservablePropertyName->string ;
  ioBoundObjectNameList += !"rootObject" ;
end method ;

#----------------------------------------------------------------------------*

override method @preferenceObservablePropertyAST analyzeBoundObservablePropertyForSimpleBinding
  ??@unifiedTypeMap inUnifiedTypeMap
  ??@string unused inCurrentTypeName
  ??@decoratedObservablePropertyMap unused inObservablePropertyMap
  ??@unifiedTypeProxy unused inRootEntityType
  ?!@string ioControllerSignature
  ?!@unifiedTypeProxySelectorList ioBoundPropertyTypeList
  ?!@2stringlist ioTypePropertyNameList
  ?!@stringlist ioBoundObjectNameList
:
#--- Get preference type
  [inUnifiedTypeMap searchKey
    !mPreferenceName
    ??@typeKind typeKind
    ?5*
    ??@decoratedObservablePropertyMap observablePropertyMap
    ?6*
  ] ;
  if typeKind != [@typeKind preferencesType] then
    error mPreferenceName : "there is no '" . mPreferenceName . "' preferences" ;
  end if ;
#---    
  [observablePropertyMap searchKey
    !mPreferenceObservablePropertyName
    ??@unifiedTypeProxy propertyType
    ?* # ?@bool isTransient
    ?* #?@lstring propertySignature
    ??@bool isCollection
  ] ;
  if isCollection then
    error mPreferenceObservablePropertyName : "the observable property should not be a collection" ;
  end if ;
  ioControllerSignature += "." + [propertyType typeNameForControllerTemplateName] + "." + mSelectorName ;
  ioBoundPropertyTypeList += !propertyType !mSelectorName ;
  ioTypePropertyNameList += !mPreferenceName->string !mPreferenceObservablePropertyName->string ;
  ioBoundObjectNameList += !"g_" + mPreferenceName ;
end method ;

#----------------------------------------------------------------------------*
# analyzeBoundObservablePropertyForArrayControllerBinding                    *
#----------------------------------------------------------------------------*

#! analyzeBoundObservablePropertyForArrayControllerBinding

#----------------------------------------------------------------------------*

abstract method @abstractObservablePropertyAST analyzeBoundObservablePropertyForArrayControllerBinding
  ??@decoratedEntityRelationshipMap inCurrentRelationshipMap
  !@unifiedTypeProxy outRelationshipTypeProxy
  !@lstring outBoundRootTomanyRelationshipName
;

#----------------------------------------------------------------------------*

override method @selfObservablePropertyAST analyzeBoundObservablePropertyForArrayControllerBinding
  ??@decoratedEntityRelationshipMap unused inCurrentRelationshipMap
  !@unifiedTypeProxy outRelationshipTypeProxy
  !@lstring outBoundRootTomanyRelationshipName
:
  error mSelfObservablePropertyName
    : "the bound array should be a root object model"
    : outBoundRootTomanyRelationshipName, outRelationshipTypeProxy
  ;
end method ;

#----------------------------------------------------------------------------*

override method @rootObservablePropertyAST analyzeBoundObservablePropertyForArrayControllerBinding
  ??@decoratedEntityRelationshipMap inCurrentRelationshipMap
  !@unifiedTypeProxy outRelationshipTypeProxy
  !@lstring outBoundRootTomanyRelationshipName
:
  [inCurrentRelationshipMap searchKey
    !mRootObservablePropertyName
    ??@bool mIsToMany
    ?outRelationshipTypeProxy
    ?*
  ] ;
  if not mIsToMany then
    error mRootObservablePropertyName : "the observable property should be a tomany relationship" ;
  end if ;
  outBoundRootTomanyRelationshipName := mRootObservablePropertyName ;
end method ;

#----------------------------------------------------------------------------*

override method @preferenceObservablePropertyAST analyzeBoundObservablePropertyForArrayControllerBinding
  ??@decoratedEntityRelationshipMap unused inCurrentRelationshipMap
  !@unifiedTypeProxy outRelationshipTypeProxy
  !@lstring outBoundRootTomanyRelationshipName
:
  error mPreferenceObservablePropertyName
    : "the bound array should be a root object model"
    : outBoundRootTomanyRelationshipName, outRelationshipTypeProxy
  ;
end method ;

#----------------------------------------------------------------------------*

end semantics ;
