semantics semanticAnalysis :
  import "easyBindings_options.gOption" ;
  import "classAnalysis.gSemantics" ;
  import "entityAnalysis.gSemantics" ;
  import "documentAnalysis.gSemantics" ;
  import "preferencesAnalysis.gSemantics" ;
  import "outletClassAnalysis.gSemantics" ;
  import "controllerClassAnalysis.gSemantics" ;

#----------------------------------------------------------------------------*

routine semanticAnalysis
  ??@cursorList inCursorList
  ??@classList inClassList
  ??@entityList inEntityList
  ??@preferencesDeclarationList inPreferencesList
  ??@outletClassList inOutletClassList
  ??@documentDeclarationList inDocumentDeclarationList
  ??@controllerClassList inControllerClassList
  ??@protocolList inProtocolList
  ??@location inEndOfSourceFile
  ?@string inSourceFilePath
  !@userCursorMap outCursorMap
  !@stringlist outPredefinedCursorList
  !@outletClassMap outOutletClassMap
  !@controllerClassMap outControllerClassMap
  !@classMap outClassMap
  !@entityMap outEntityMap
  !@preferencesMap outPreferencesMap
  !@documentMap outDocumentMap
  !@stringlist outSortedTransientOrderedList
  !@2stringlist outTransientDependencyArcList
:
#--- Build cursor map
  outCursorMap := [@userCursorMap emptyMap] ;
  foreach inCursorList do
    [!?outCursorMap insertKey !mCursorName !mHotSpotX->double !mHotSpotY->double] ;
  end foreach ;
  outPredefinedCursorList := [@stringlist emptyList] ;
  outPredefinedCursorList += !"arrowCursor" ;
  outPredefinedCursorList += !"IBeamCursor" ;
  outPredefinedCursorList += !"crosshairCursor" ;
  outPredefinedCursorList += !"closedHandCursor" ;
  outPredefinedCursorList += !"openHandCursor" ;
  outPredefinedCursorList += !"pointingHandCursor" ;
  outPredefinedCursorList += !"resizeLeftCursor" ;
  outPredefinedCursorList += !"resizeRightCursor" ;
  outPredefinedCursorList += !"resizeLeftRightCursor" ;
  outPredefinedCursorList += !"resizeUpCursor" ;
  outPredefinedCursorList += !"resizeDownCursor" ;
  outPredefinedCursorList += !"resizeUpDownCursor" ;
  outPredefinedCursorList += !"disappearingItemCursor" ;
#--- Build protocol map
  @protocolMap protocolMap [emptyMap] ;
  foreach inProtocolList do
    [!?protocolMap insertKey !mProtocolName] ;
  end foreach ;
#---
  outSortedTransientOrderedList := [@stringlist emptyList] ;
  @transientDependencyGraph transientDependencyGraph [emptyGraph] ;
  analyzeOutletClasses !inOutletClassList !protocolMap ?outOutletClassMap ;
  analyzeControllerClasses !inControllerClassList !?transientDependencyGraph ?outControllerClassMap ;
  analyzeClasses 
    !inClassList
    ?outClassMap
    !?transientDependencyGraph
  ;
  analyzePreferences
    !inPreferencesList
    !outControllerClassMap
    !outClassMap
    !outOutletClassMap
    ?outPreferencesMap
    !?transientDependencyGraph
  ;
  analyzeEntities
    !inEntityList
    ?outEntityMap
    !outPreferencesMap
    !?transientDependencyGraph
  ;
  analyzeDocuments
    !inDocumentDeclarationList
    !outOutletClassMap
    !outControllerClassMap
    !outEntityMap
    !outPreferencesMap
    ?outDocumentMap
    !?transientDependencyGraph
  ;
#--- Output graphviz file ?
  if ([@uint errorCount] == 0) & [option easyBindings_options.outputTransientDependencyGraph value] then
    const @string s := [transientDependencyGraph graphviz] ;
    const @string path := inSourceFilePath . ".transientDependancyGraph.dot" ;
    [s writeToFileWhenDifferentContents !path ?*] ;
  end if ;
#--- Analyze transient dependencies
  outTransientDependencyArcList := [transientDependencyGraph arcs] ;
  if [@uint errorCount] == 0 then
    if [transientDependencyGraph undefinedNodeCount] > 0 then
      foreach [transientDependencyGraph undefinedNodeKeyList] do
        error inEndOfSourceFile : "the '" . mValue . "' property is not defined" ;
      end foreach ;
    else
      @stringlist unsortedTransientList ;
      [transientDependencyGraph topologicalSort
        ?outSortedTransientOrderedList
        ?*
        ?unsortedTransientList
        ?*
      ] ;
      if [unsortedTransientList length] > 0 then
        @string s := [[unsortedTransientList length] string] . " transient declarations are involved in circular dependancies:" ;
        foreach unsortedTransientList do
          s .= "\n-  " . mValue ;
        end foreach ;
        error inEndOfSourceFile : s ;
      else # all defined, no circularity
      end if ;
    end if ;
  end if ;
end routine ;

#----------------------------------------------------------------------------*

end semantics ;
