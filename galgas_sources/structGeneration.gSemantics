semantics structGeneration :
  import "easyBindings_options.gOption" ;
  import "decoratedTypes.gSemantics" ;

#-----------------------------------------------------------------------------*

reader @ebType stringConversionForExplorer
  ??@string inName
  -> @string outResult
:
  switch mKind
  when classType, controllerClassType, documentType, entityType,
       nibClassType, outletClassType, preferencesType,
       protocolType,
       stringType, colorType, dataType, dateType, fontType,
       imageType, menuType, bezierPathType :
    outResult := "" ;
  when doubleType :
    outResult := "[NSString stringWithFormat:@\"%g\", " . inName . "]" ;
  when uintegerType :
    outResult := "[NSString stringWithFormat:@\"%lu\", " . inName . "]" ;
  when integerType :
    outResult := "[NSString stringWithFormat:@\"%ld\", " . inName . "]" ;
  when boolType :
    outResult := inName . " ? @\"YES\" : @\"NO\"" ;
  when enumType :
    outResult := "convert" . mTypeName . "ValueToString ([NSNumber numberWithInteger:" . inName . "])" ;
  when structType :
    outResult := "convert" . mTypeName . "ValueToString ([NSValue valueWithBytes:& " . inName . " objCType:@encode(" . mTypeName . ")])" ;
  end switch ;
end reader ;

#----------------------------------------------------------------------------*

local filewrapper structGenerationTemplate in "../generation-templates/struct-generation" {
}{
}{
  template structDeclaration "struct.h.gTemplate"
    ?@stringset HEADER_INCLUSIONS
    ?@string STRUCT_TYPE_NAME
    ?@structFieldList STRUCT_FIELD_LIST
  ;
  template structGeneration "struct.m.gTemplate"
    ?@string STRUCT_TYPE_NAME
    ?@structFieldList STRUCT_FIELD_LIST
  ;
}

#----------------------------------------------------------------------------*

override method @structTypeGeneration generate
  ??@string inOutputDirectory
:
  @string s := [filewrapper structGenerationTemplate.structDeclaration
    !mHeaderFileInclusionSet
    !mGenerationName
    !mFieldList
  ] ;
  [@string generateFileWithPattern
    !inOutputDirectory
    !mGenerationName . ".h"
    !"//"
    !"\n\n" # Defaut user zone1
    !s
    !"\n\n" # Defaut user zone2
    !"\n"
  ] ;
  s := [filewrapper structGenerationTemplate.structGeneration
    !mGenerationName
    !mFieldList
  ] ;
  [@string generateFileWithPattern
    !inOutputDirectory
    !mGenerationName . ".m"
    !"//"
    !"\n\n" # Defaut user zone1
    !s
    !"\n\n" # Defaut user zone2
    !"\n"
  ] ;
end method ;

#----------------------------------------------------------------------------*


end semantics ;
