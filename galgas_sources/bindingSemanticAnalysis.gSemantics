semantics bindingSemanticAnalysis :
  import "decoratedTypes.gSemantics" ;

#----------------------------------------------------------------------------*

list @attributeListForGeneration {
  @unifiedTypeMap-proxy mAttributeType ;
  @string mAttributeName ;
  @string mDefaultValueInSwift ;
  @bool mNeedsValidation ;
}

#----------------------------------------------------------------------------*

reader @unifiedTypeMap-proxy swiftTypeName -> @string outResult
:
  switch [selfcopy mTypeKind]
  when boolType : outResult := "Bool" ;
  when uintegerType : outResult := "UInt" ;
  when integerType : outResult := "Int" ;
  when doubleType : outResult := "Double" ;
  when stringType : outResult := "String" ;
  when colorType : outResult := "NSColor" ;
  when dataType : outResult := "NSData" ;
  when dateType : outResult := "NSDate" ;
  when imageType : outResult := "NSImage" ;
  when fontType : outResult := "NSFont" ;
  when menuType : outResult := "NSMenu" ;
  when bezierPathType : outResult := "NSBezierPath" ;
  when structType, enumType : outResult := [selfcopy key] ;
  when classType, controllerClassType, documentType, entityType,
  preferencesType, nibClassType, outletClassType, protocolType :
    outResult := "<invalid return type '" + [selfcopy key] + "' >" ;
  end switch ;
end reader ;

#----------------------------------------------------------------------------*

reader @unifiedTypeMap-proxy valueAccessorForExplorerWindow ??@string inPropertyName -> @string outResult
:
  switch [selfcopy mTypeKind]
  when boolType : outResult := "NSString (format:\"%s\", " + inPropertyName + " ? \"true\" : \"false\")" ;
  when uintegerType : outResult := "NSString (format:\"%lu\", " + inPropertyName + ")" ;
  when integerType : outResult := "NSString (format:\"%ld\", " + inPropertyName + ")" ;
  when doubleType : outResult := "NSString (format:\"%g\", " + inPropertyName + ")" ;
  when stringType : outResult := inPropertyName ;
  when colorType : outResult := inPropertyName + ".description" ;
  when dataType : outResult := "NSData" ;
  when dateType : outResult := "NSDate" ;
  when imageType : outResult := "NSImage" ;
  when fontType : outResult := "NSFont" ;
  when enumType : outResult := inPropertyName + ".string ()" ;
  when menuType : outResult := "NSMenu" ;
  when bezierPathType : outResult := "NSBezierPath" ;
  when structType : outResult := [selfcopy key] ;
  when classType, controllerClassType, documentType, entityType,
  preferencesType, nibClassType, outletClassType, protocolType :
    outResult := "<type '" + [selfcopy key] + "' >" ;
  end switch ;
end reader ;

#----------------------------------------------------------------------------*

reader @unifiedTypeMap-proxy transformForSavingInDictionary ??@string inPropertyName -> @string outResult
:
  switch [selfcopy mTypeKind]
  when boolType : outResult := "NSNumber (bool:" + inPropertyName + ")" ;
  when uintegerType : outResult := "NSNumber (unsignedInteger:" + inPropertyName + ")" ;
  when integerType : outResult := "NSNumber (integer:" + inPropertyName + ")" ;
  when doubleType : outResult := "NSNumber (double:" + inPropertyName + ")" ;
  when stringType : outResult := inPropertyName ;
  when colorType : outResult := "NSArchiver.archivedDataWithRootObject (" + inPropertyName + ")" ;
  when dataType : outResult := "NSData" ;
  when dateType : outResult := "NSDate" ;
  when imageType : outResult := "NSImage" ;
  when fontType : outResult := "NSFont" ;
  when menuType : outResult := "NSMenu" ;
  when bezierPathType : outResult := "NSBezierPath" ;
  when enumType : outResult := "NSNumber (integer:" + inPropertyName + ".rawValue)" ;
  when structType : outResult := [selfcopy key] ;
  when classType, controllerClassType, documentType, entityType,
  preferencesType, nibClassType, outletClassType, protocolType :
    outResult := "<type '" + [selfcopy key] + "' >" ;
  end switch ;
end reader ;

#----------------------------------------------------------------------------*

reader @unifiedTypeMap-proxy transformerForRegisterUndoWithTarget ??@string inOldValue -> @string outResult
:
  switch [selfcopy mTypeKind]
  when boolType : outResult := "NSNumber (bool:" + inOldValue + ")" ;
  when uintegerType : outResult := "NSNumber (unsignedInteger:" + inOldValue + ")" ;
  when integerType : outResult := "NSNumber (integer:" + inOldValue + ")" ;
  when doubleType : outResult := "NSNumber (double:" + inOldValue + ")" ;
  when stringType, colorType : outResult := inOldValue ;
  when dataType : outResult := "NSData" ;
  when dateType : outResult := "NSDate" ;
  when imageType : outResult := "NSImage" ;
  when fontType : outResult := "NSFont" ;
  when menuType : outResult := "NSMenu" ;
  when enumType : outResult := "NSNumber (integer:" + inOldValue + ".rawValue)" ;
  when bezierPathType : outResult := "NSBezierPath" ;
  when structType : outResult := [selfcopy key] ;
  when classType, controllerClassType, documentType, entityType,
  preferencesType, nibClassType, outletClassType, protocolType :
    outResult := "<type '" + [selfcopy key] + "' >" ;
  end switch ;
end reader ;

#----------------------------------------------------------------------------*

reader @unifiedTypeMap-proxy swiftTypeUndoArgument -> @string outResult
:
  switch [selfcopy mTypeKind]
  when boolType : outResult := "NSNumber" ;
  when uintegerType : outResult := "NSNumber" ;
  when integerType : outResult := "NSNumber" ;
  when doubleType : outResult := "NSNumber" ;
  when stringType : outResult := "String" ;
  when colorType : outResult := "NSColor" ;
  when dataType : outResult := "NSData" ;
  when dateType : outResult := "NSDate" ;
  when imageType : outResult := "NSImage" ;
  when fontType : outResult := "NSFont" ;
  when menuType : outResult := "NSMenu" ;
  when enumType : outResult := "NSNumber" ;
  when bezierPathType : outResult := "NSBezierPath" ;
  when structType : outResult := "NSNumber" ;
  when classType, controllerClassType, documentType, entityType,
  preferencesType, nibClassType, outletClassType, protocolType :
    outResult := "<type '" + [selfcopy key] + "' >" ;
  end switch ;
end reader ;

#----------------------------------------------------------------------------*

reader @unifiedTypeMap-proxy transformerForUndo ??@string inValue -> @string outResult
:
  switch [selfcopy mTypeKind]
  when boolType : outResult := inValue + ".boolValue" ;
  when uintegerType : outResult := inValue + ".unsignedIntegerValue" ;
  when integerType : outResult := inValue + ".integerValue" ;
  when doubleType : outResult := inValue + ".doubleValue" ;
  when stringType, colorType : outResult := inValue ;
  when dataType : outResult := inValue ;
  when dateType : outResult := inValue ;
  when imageType : outResult := inValue ;
  when fontType : outResult := inValue ;
  when menuType : outResult := inValue ;
  when enumType : outResult := [selfcopy key] + " (rawValue:" + inValue + ".integerValue)!" ;
  when bezierPathType : outResult := "NSBezierPath" ;
  when structType : outResult := [selfcopy key] ;
  when classType, controllerClassType, documentType, entityType,
  preferencesType, nibClassType, outletClassType, protocolType :
    outResult := "<type '" + [selfcopy key] + "' >" ;
  end switch ;
end reader ;

#----------------------------------------------------------------------------*

reader @unifiedTypeMap-proxy typeNameForControllerTemplateName -> @string outResult
:
  switch [selfcopy mTypeKind]
  when enumType : outResult := "Enum" ;
  when classType, controllerClassType, documentType, entityType,
  preferencesType, nibClassType, outletClassType, protocolType,
  bezierPathType, structType, menuType, fontType, imageType, dateType,
  dataType, stringType, colorType, doubleType, integerType, uintegerType, boolType :
    outResult := [selfcopy key] ;
  end switch ;
end reader ;

#----------------------------------------------------------------------------*

reader @unifiedTypeMap-proxy transformerForTableViewAction ??@string inSenderOutletName -> @string outResult
:
  switch [selfcopy mTypeKind]
  when stringType : outResult := inSenderOutletName + ".stringValue" ;
  when integerType : outResult := inSenderOutletName + ".integerValue" ;
#--- TODO
  when boolType : outResult := "NSNumber (bool:" + inSenderOutletName + ")" ;
  when uintegerType : outResult := "NSNumber (unsignedLongLong:" + inSenderOutletName + ")" ;
  when doubleType : outResult := "NSNumber (double:" + inSenderOutletName + ")" ;
  when colorType : outResult := inSenderOutletName + ".stringValue" ;
  when dataType : outResult := "NSData" ;
  when dateType : outResult := "NSDate" ;
  when imageType : outResult := "NSImage" ;
  when fontType : outResult := "NSFont" ;
  when menuType : outResult := "NSMenu" ;
  when enumType : outResult := "NSNumber (integer:" + inSenderOutletName + ".rawValue)" ;
  when bezierPathType : outResult := "NSBezierPath" ;
  when structType : outResult := [selfcopy key] ;
  when classType, controllerClassType, documentType, entityType,
  preferencesType, nibClassType, outletClassType, protocolType :
    outResult := "<type '" + [selfcopy key] + "' >" ;
  end switch ;
end reader ;

#----------------------------------------------------------------------------*

reader @unifiedTypeMap-proxy formatterStringForFormatPrinting -> @string outResult
:
  switch [selfcopy mTypeKind]
  when stringType : outResult := "%@" ;
  when integerType : outResult := "%d" ;
#--- TODO
  when boolType : outResult := "%d" ;
  when uintegerType : outResult := "%u" ;
  when doubleType : outResult := "%g" ;
  when colorType : outResult := "%@" ;
  when dataType : outResult := "%@" ;
  when dateType : outResult := "%@" ;
  when imageType : outResult := "%@" ;
  when fontType : outResult := "%@" ;
  when menuType : outResult := "%@" ;
  when enumType : outResult := "%d" ;
  when bezierPathType : outResult := "%@" ;
  when structType : outResult := [selfcopy key] ;
  when classType, controllerClassType, documentType, entityType,
  preferencesType, nibClassType, outletClassType, protocolType :
    outResult := "<type '" + [selfcopy key] + "' >" ;
  end switch ;
end reader ;

#----------------------------------------------------------------------------*

end semantics ;
