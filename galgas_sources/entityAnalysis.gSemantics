semantics entityAnalysis :
  import "bindingSemanticAnalysis.gSemantics" ;
  import "transientAnalysis.gSemantics" ;
  import "attributeDeclarationAnalysis.gSemantics" ;

#----------------------------------------------------------------------------*

override method @entityDeclaration typeInventory
  ?!@unifiedTypeMap ioUnifiedTypeMap
:
end method ;

#----------------------------------------------------------------------------*
#   ANALYZE ENTITIES                                                         *
#----------------------------------------------------------------------------*

override method @entityDeclaration EXTypeInventory
  ?!@EXunifiedTypeMap ioUnifiedTypeMap
:
#--------------------------------------------- Get super entity (if any)
  @EXunifiedTypeProxy superClassProxy ;
  if mSuperEntityName->string == "" then
    superClassProxy := [@EXunifiedTypeProxy null] ;
  else
    [@EXunifiedTypeProxy makeProxy
      !?ioUnifiedTypeMap
      !mSuperEntityName
      ?superClassProxy
    ] ;
    [!?ioUnifiedTypeMap enterEdge !mEntityName !mSuperEntityName] ;
  end if ;
#---------------------------------- Analyze attributes
  foreach mAttributeList do
    [@EXunifiedTypeProxy makeProxy
      !?ioUnifiedTypeMap
      !mAttributeTypeName
      ?*
    ] ;
    [!?ioUnifiedTypeMap enterEdge !mEntityName !mAttributeTypeName] ;
  end foreach ;
#---------------------------------- Analyze transient properties
  foreach mTransientList do
    [@EXunifiedTypeProxy makeProxy
      !?ioUnifiedTypeMap
      !mTransientTypeName
      ?*
    ] ;
  end foreach ;
#---------------------------------------- Analyze relationship (only check name is unique)
  @EXentityRelationshipMap currentRelationshipMap := {} ;
  foreach mRelationshipList do
    [@EXunifiedTypeProxy makeProxy
      !?ioUnifiedTypeMap
      !mDestinationEntityName
      ??@EXunifiedTypeProxy destinationTypeProxy
    ] ;
    [!?currentRelationshipMap insertKey
      !mRelationshipName
      !mIsToMany
      !destinationTypeProxy
      !mInverseRelationshipName
    ] ;
  end foreach ;
#----------------------------------
  [!?ioUnifiedTypeMap insertKey
    !mEntityName
    ![@EXebType new !mEntityName ![@EXTypeKind entityType]]
    !selfcopy
    !currentRelationshipMap
  ] ;
end method ;

#----------------------------------------------------------------------------*

override method @entityDeclaration buildObservablePropertyMap
  ??@EXunifiedTypeMap inUnifiedTypeMap
  ?!@EXobservablePropertyMapMap ioObservablePropertyMapMap
  ?!@EXtransientDependencyGraph ioTransientDependencyGraph
:
#------------------------------- Super entity ?
  @EXobservablePropertyMap observablePropertyMap ;
  if [mSuperEntityName string] != "" then
    [ioObservablePropertyMapMap searchKey
       !mSuperEntityName
       ?*
       ?@EXTypeKind kind
       ?observablePropertyMap
     ] ;
     if kind != [@EXTypeKind entityType] then
       error mSuperEntityName : "'" . mSuperEntityName . "' is not an entity" ;
     end if ;
  else
    observablePropertyMap := [@EXobservablePropertyMap emptyMap] ;
  end if ;
#---------------------------------- Attributes, transients
  buildObservablePropertyMap
    !mAttributeList
    ![@classArrayList emptyList]
    !mTransientList
    ![@controllerList emptyList]
    ![@controllerObservablePropertyList emptyList]
    !?ioObservablePropertyMapMap
    !?ioTransientDependencyGraph
    !inUnifiedTypeMap
    !"entity." . mEntityName
    !?observablePropertyMap
  ;
#---------------------------------- Relationships
  foreach mRelationshipList do
    const observationDependencyKey := [@lstring new
      !"entity." . mEntityName . "." . mRelationshipName
      !mRelationshipName->location
    ] ;
    [!?ioTransientDependencyGraph addNode
      !observationDependencyKey
      !observationDependencyKey->string
    ] ;
    [inUnifiedTypeMap searchKey !mDestinationEntityName ?@EXebType type ?2*] ;
    [!?observablePropertyMap insertKey
      !mRelationshipName
      !type
      !false # is not transient
      !observationDependencyKey
      !mIsToMany
    ] ;
  end foreach ;
#---------------------------------- Enter class in observable map
  [!?ioObservablePropertyMapMap insertKey
    !mEntityName
    !mUserDefined
    ![@EXTypeKind entityType]
    !observablePropertyMap
  ] ;
end method ;

#----------------------------------------------------------------------------*

override method @entityDeclaration semanticAnalysis
  ??@EXunifiedTypeMap inUnifiedTypeMap
  ?!@EXcontextAnalysisStruct ioContextAnalysisStruct
  ?!@generationList ioGenerationList
:
#------------------------------- Get Observable property map
  [ioContextAnalysisStruct->mObservablePropertyMapMap searchKey
     !mEntityName
     ?2*
     ?@EXobservablePropertyMap selfObservablePropertyMap
   ] ;
#--------------------------------------------- Get super entity (if any)
  @attributeListForImplementation propertyListForInitMethodHeader [emptyList] ;
  @relationshipList allRelationshipList ;
  @propertyMap allPropertyMap ;
  @relationshipMap allRelationshipMap ;
  if [mSuperEntityName string] != "" then
    [ioContextAnalysisStruct->mEntityMap searchKey
      !mSuperEntityName
      ?*
      ?propertyListForInitMethodHeader
      ?4*
      ?allRelationshipList
      ?allPropertyMap
      ?*
      ?allRelationshipMap
      ?2*
    ] ;
  else
    propertyListForInitMethodHeader := [@attributeListForImplementation emptyList] ;
    allRelationshipList := [@relationshipList emptyList] ;
    allPropertyMap := [@propertyMap emptyMap] ;
    allRelationshipMap := [@relationshipMap emptyMap] ;
  end if ;
  const @attributeListForImplementation inheritedAttributeListForImplementation := propertyListForInitMethodHeader ;
#--------------------------------------- Analyze attributes
  @fileInclusionSet fileInclusionSet [default] ;
  analyzeAttributeDeclaration
    !mAttributeList
    !?ioContextAnalysisStruct
    !inUnifiedTypeMap
    !?fileInclusionSet
    ?@attributeListForImplementation attributeListForImplementation
    !?propertyListForInitMethodHeader
  ;
#---------------------------------------- Analyze relationship (only check name is unique)
  @2stringlist toManyRelationshipList [emptyList] ;
  @2stringlist toOneRelationshipList [emptyList] ;
  @relationshipMap currentRelationshipMap [emptyMap] ;
  foreach mRelationshipList do
    [!?allRelationshipMap insertKey
      !mRelationshipName
      !mIsToMany
      !mDestinationEntityName
      !mInverseRelationshipName
      !mInverseRelationIsToMany
      !mDeleteRule
    ] ;
    [!?currentRelationshipMap insertKey
      !mRelationshipName
      !mIsToMany
      !mDestinationEntityName
      !mInverseRelationshipName
      !mInverseRelationIsToMany
      !mDeleteRule
    ] ;
    [!?allPropertyMap insertKey !mRelationshipName] ;
    fileInclusionSet->mHeaderPredeclarationSet += !mDestinationEntityName->string ;
    fileInclusionSet->mImplementationFileInclusionSet += !mDestinationEntityName->string ;
    if mIsToMany then
      toManyRelationshipList += !mRelationshipName->string !mDestinationEntityName->string ;
    else
      toOneRelationshipList += !mRelationshipName->string !mDestinationEntityName->string ;
    end if ;
  end foreach ;
#---------------------------------------- Analyze sign list
  @signListForGeneration signList [emptyList] ;
  foreach mSignList do
    [selfObservablePropertyMap searchKey
      !mValue
      ?@EXebType type
      ?* # Transient ?
      ?@lstring dependancyKey
      ?@bool isToMany
    ] ;
    signList += !mValue->string !type !isToMany ;
  end foreach ;
  if [mSignList length] > 0 then
    const @string key := "entity." . mEntityName . ".sign" ;
    [!?ioContextAnalysisStruct->mTransientDependencyGraph addNode
      ![@lstring new !key !mEntityName->location]
      !key
    ] ;
  end if ;
#---------------------------------------- Analyze transient properties
  @transientListForImplementation transientListForImplementation ;
  analyzeTransientProperties
    !mTransientList
    ![@EXobservablePropertyMap emptyMap] # Root property map
    !?ioContextAnalysisStruct
    !"" # No Root entity
    !selfObservablePropertyMap
    !?fileInclusionSet
    ?transientListForImplementation
  ;
#----------------------------------------- Enter entity in entity map
  [!?ioContextAnalysisStruct->mEntityMap insertKey
    !mEntityName
    !mSuperEntityName->string
    !propertyListForInitMethodHeader
    !inheritedAttributeListForImplementation
    !attributeListForImplementation
    !transientListForImplementation
    !mRelationshipList
    !allRelationshipList + mRelationshipList
    !allPropertyMap
    !currentRelationshipMap
    !allRelationshipMap
    !fileInclusionSet
    !signList
  ] ;
  [inUnifiedTypeMap searchKey
    !mEntityName
    ?2*
    ??@EXentityRelationshipMap theCurrentRelationshipMap
  ] ;
#----------------------------------------- Generation
  ioGenerationList += ![@entityGeneration new
    !mEntityName->string
    !mSuperEntityName->string
    !propertyListForInitMethodHeader
    !inheritedAttributeListForImplementation
    !attributeListForImplementation
    !transientListForImplementation
    !mRelationshipList
    !fileInclusionSet
    !signList
    !theCurrentRelationshipMap
    !toManyRelationshipList
    !toOneRelationshipList
  ] ;
end method ;

#----------------------------------------------------------------------------*

end semantics ;
