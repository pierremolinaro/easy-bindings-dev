semantics decoratedTypes :
  import "abstractSyntaxTypes.gSemantics" ;

#----------------------------------------------------------------------------*

map @userCursorMap {
  @double mHotSpotX ;
  @double mHotSpotY ;
  insert insertKey error message "the '%K' cursor is already declared" ;
  search searchKey error message "the '%K' cursor is not declared" ;
}

#----------------------------------------------------------------------------*

map @classMap {
  @string mSuperClassName ;
  @observablePropertyMap mPropertyMap ;
  @attributeListForImplementation mAttributeListForInitMethodHeader ;
  @attributeListForImplementation mInheritedAttributeListForImplementation ;
  @attributeListForImplementation mAttributeListForImplementation ;
  @transientListForImplementation mTransientListForImplementation ;
  @stringset mImplementationFileInclusionSet ;
  @stringset mHeaderFileInclusionSet ;
  insert insertKey error message "the '%K' class is already declared" ;
  search searchKey error message "the '%K' class is not declared" ;
}

#----------------------------------------------------------------------------*

map @entityMap {
  @string mSuperEntityName ;
  @string mImplementationClassName ;
  @string mSuperImplementationClassName ;
  @observablePropertyMap mObservablePropertyMap ;
  @attributeListForImplementation mAttributeListForInitMethodHeader ;
  @attributeListForImplementation mInheritedAttributeListForImplementation ;
  @attributeListForImplementation mAttributeListForImplementation ;
  @transientListForImplementation mTransientListForImplementation ;
  @relationshipList mCurrentRelationshipList ;
  @relationshipList mAllRelationshipList ;
  @propertyMap mAllPropertyMap ;
  @relationshipMap mCurrentRelationshipMap ;
  @stringset mHeaderFileInclusionSet ;
  @relationshipMap mAllRelationshipMap ;
  @stringset mImplementationFileInclusionSet ;
  @signListForGeneration mSignList ;
  insert insertKey error message "the '%K' entity is already declared" ;
  search searchKey error message "the '%K' entity is not declared" ;
}

#----------------------------------------------------------------------------*

list @signListForGeneration {
  @string mPropertyName ;
  @easyBindingType mPropertyType ;
}

#----------------------------------------------------------------------------*

list @entityListForGeneration {
  @string mEntityName ;
  @string mSuperEntityName ;
  @string mImplementationClassName ;
  @string mSuperImplementationClassName ;
  @observablePropertyMap mObservablePropertyMap ;
  @attributeListForImplementation mAttributeListForInitMethodHeader ;
  @attributeListForImplementation mInheritedAttributeListForImplementation ;
  @attributeListForImplementation mAttributeListForImplementation ;
  @transientListForImplementation mTransientListForImplementation ;
  @relationshipList mCurrentRelationshipList ;
  @relationshipList mAllRelationshipList ;
  @propertyMap mAllPropertyMap ;
  @relationshipMap mCurrentRelationshipMap ;
  @relationshipMap mAllRelationshipMap ;
  @stringset mHeaderFilePredeclarationSet ;
  @2stringlist mToManyRelationshipList ;
  @stringset mHeaderFileInclusionSet ;
  @stringset mImplementationFileInclusionSet ;
  @2stringlist mToOneRelationshipList ;
  @signListForGeneration mSignList ;
}

#----------------------------------------------------------------------------*

class @runBindingForGeneration extends @abstractBindingForGeneration {
  @string mTargetName ;
  @string mActionName ;
}

#----------------------------------------------------------------------------*

class @regularBindingForGeneration extends @abstractBindingForGeneration {
  @string mBindingName ;
  @formatterEnum mRequiredFormatter ;
  @string mObservedObjectName ;
  @string mObservableAttributeName ;
  @2stringlist mOutletBindingOptionList ;
}

#----------------------------------------------------------------------------*

list @columnBindingForTableValueBindingForGeneration {
  @string mColumnIdentifier ;
  @string mRequiredCellClass ;
  @string mObservableAttributeName ;
  @2stringlist mOutletBindingOptionList ;
}

#----------------------------------------------------------------------------*

class @tableValueBindingForGeneration extends @abstractBindingForGeneration {
  @string mControllerName ;
  @columnBindingForTableValueBindingForGeneration mColumnBindingForTableValueBindingForGeneration ;
}

#----------------------------------------------------------------------------*

map @protocolMap {
  @bool mIsPredefined ; # Generate import otherwise
  insert insertKey error message "the '%K' protocol is already declared" ;
  search searchKey error message "the '%K' protocol is not declared" ;
}

#----------------------------------------------------------------------------*

map @documentMap {
  @string mRootEntityName ;
  @string mRootEntityImplementationClassName ;
  @outletGenerationList mOutletDeclarationList ;
  @controllerMap mControllerMap ;
  @lstringlist mActionList ;
  @stringset mHeaderFilePredeclarationSet ;
  @transientListForImplementation mTransientListForImplementation ;
  @stringset mImplementationFileInclusionSet ;
  insert insertKey error message "the '%K' document is already declared" ;
  search searchKey error message "the '%K' document is not declared" ;
}

#----------------------------------------------------------------------------*

map @outletClassBindingOptionMap {
  @easyBindingTypeList mAcceptableTypeList ;
  insert insertKey error message "the '%K' binding option is already declared" ;
  search searchKey error message "the '%K' binding option is not declared" ;
}

#----------------------------------------------------------------------------*

map @outletClassBindingMap {
  @easyBindingTypeAndFormatterList mAcceptableTypeList ;
  @outletClassBindingOptionMap mOutletClassBindingOptionMap ;
  insert insertKey error message "the '%K' binding is already declared" ;
  search searchKey error message "the '%K' binding is not declared" ;
}

#----------------------------------------------------------------------------*

map @outletClassMap {
  @generationKind mGenerationKind ;
  @string mSuperClassName ;
  @protocolList mAdoptedProtocolList ;
  @bool mImplementsDeallocProtocol ;
  @outletClassBindingMap mAllBindingMap ;
  @outletClassBindingMap mCurrentBindingMap ;
  @bool mHasTableValueBinding ;
  insert insertKey error message "the '%K' outlet class is already declared" ;
  search searchKey error message "the '%K' outlet class is not declared" ;
}

#----------------------------------------------------------------------------*

map @controllerClassMap {
  @controllerKind mControllerKind ;
  @generationKind mGenerationKind ;
  @outletClassBindingMap mBindingMap ;
  @actionMap mActionMap ;
  @observablePropertyMap mObservablePropertyMap ;
  @outletClassBindingOptionMap mControlledObjectAvailableBindingOptionMap ;
  insert insertKey error message "the '%K' controller class is already declared" ;
  search searchKey error message "the '%K' controller class is not declared" ;
}

#----------------------------------------------------------------------------*

map @relationshipMap {
  @bool mIsToMany ;
  @lstring mDestinationEntityName ;
  @lstring mInverseRelationshipName ;
  @deleteRuleEnum mDeleteRule ;
  insert insertKey error message "the '%K' relationship is already declared" ;
  search searchKey error message "the '%K' relationship is not declared" ;
}

#----------------------------------------------------------------------------*

map @propertyMap {
  insert insertKey error message "there is already a '%K' property (attribute, transient or relationship)" ;
}

#----------------------------------------------------------------------------*

list @attributeListForImplementation {
  @easyBindingType mType ;
  @string mAttributeName ;
  @string mDefaultValueAsObjectiveCObject ;
  @string mDirectDefaultValue ;
}

#----------------------------------------------------------------------------*

abstract class @abstractBindingForGeneration {
}

#----------------------------------------------------------------------------*

list @outletBindingListForGeneration {
  @abstractBindingForGeneration mBinding ;
}

#----------------------------------------------------------------------------*

list @outletGenerationList {
  @string mOutletType ;
  @string mOutletName ;
  @outletBindingListForGeneration mOutletBindingList ;
  @bool mImplementsDeallocProtocol ;
}

#----------------------------------------------------------------------------*

map @preferenceArrayMap {
  @string mClassName ;
  @observablePropertyMap mClassObservablePropertyMap ;
  @attributeListForImplementation mAttributeListForImplementation ;
  insert insertKey error message "the '%K' array is already declared" ;
  search searchKey error message "the '%K' array is not declared" ;
}

#----------------------------------------------------------------------------*

map @preferencesMap {
  @attributeListForImplementation mAttributeListForImplementation ;
  @transientListForImplementation mTransientListForImplementation ;
  @outletGenerationList mOutletDeclarationList ;
  @lstringlist mActionList ;
  @observablePropertyMap mObservablePropertyMap ;
  @stringset mHeaderFileInclusionSet ;
  @stringset mImplementationFileInclusionSet ;
  @controllerMap mControllerMap ;
  @preferenceArrayMap mArrayMap ;
  insert insertKey error message "the '%K' preference is already declared" ;
  search searchKey error message "the '%K' preference is not declared" ;
}

#----------------------------------------------------------------------------*

map @observablePropertyMap {
  @easyBindingType mType ;
  @bool mIsTransient ;
  @string mPropertySignature ;
  insert insertKey error message "the '%K' attribute is already declared" ;
  search searchKey error message "the '%K' attribute is not declared" ;
}

#----------------------------------------------------------------------------*

map @observableObjectMap {
  @string mObservableObjectOCName ;
  @string mObservableObjectTypeOCName ;
  @string mIncludeFileName ; # Empty string if no file to include
  @observablePropertyMap mObservableProperties ;
  insert insertKey error message "the '%K' observable object is already declared" ;
  search searchKey error message "the '%K' observable object is not declared" ;
}

#----------------------------------------------------------------------------*

map @actionMap {
  insert insertKey error message "there is already a '%K' action" ;
  search searchKey error message "the '%K' action is not defined" ;
}

#----------------------------------------------------------------------------*

map @controllerMap {
  @string mControllerClassName ;
  @lstring mControlledClassOrEntityName ;
  @bool mIsEntity ;
  @outletBindingListForGeneration mControllerBindingList ;
  @actionMap mActionMap ;
  @observablePropertyMap mObservableAttributeMap ;
  insert insertKey error message "the '%K' controller is already declared" ;
  search searchKey error message "the '%K' controller is not declared" ;
}

#----------------------------------------------------------------------------*

abstract class @abstractTransientDependencyForImplementation {
}

#----------------------------------------------------------------------------*

class @transientDependencyFromSelfForImplementation extends @abstractTransientDependencyForImplementation {
  @string mMasterAttributeName ;
  @easyBindingType mMasterAttributeType ;
}

#----------------------------------------------------------------------------*

class @transientDependencyFromControllerForImplementation extends @abstractTransientDependencyForImplementation {
  @string mControllerName ;
  @string mMasterAttributeName ;
  @easyBindingType mMasterAttributeType ;
}

#----------------------------------------------------------------------------*

class @transientDependencyFromRootForImplementation extends @abstractTransientDependencyForImplementation {
  @string mMasterAttributeName ;
  @easyBindingType mMasterAttributeType ;
  @bool mNamesCountOption ;
  @string mTriggerRoutineName ;
}

#----------------------------------------------------------------------------*

class @transientDependencyFromPreferenceForImplementation extends @abstractTransientDependencyForImplementation {
  @string mPreferenceName ;
  @string mMasterAttributeName ;
  @bool mMasterIsTransient ;
  @easyBindingType mMasterAttributeType ;
}

#----------------------------------------------------------------------------*

list @directDependancyList {
  @abstractTransientDependencyForImplementation mDependency ;
}

#----------------------------------------------------------------------------*

list @transientListForImplementation {
  @easyBindingType mTransientType ;
  @string mTransientName ;
  @directDependancyList mDependencyList ;
  @stringlist mRootSignDependencyList ;
}

#----------------------------------------------------------------------------*

graph @transientDependencyGraph (@stringlist) {
  insert addNode error message "the '%K' transient is already declared at %L" ;
}

#----------------------------------------------------------------------------*

abstract reader @abstractBindingForGeneration generateBinding
  ??@string inOutletName
  -> @string outResult
;

#----------------------------------------------------------------------------*

abstract method @abstractBinding analyzeOutletBinding
  ??@observablePropertyMap inRootEntityObservableAttributeMap
  ??@observablePropertyMap inSelfObservableAttributeMap
  ??@preferencesMap inPreferencesMap
  ??@entityMap inEntityMap
  ??@classMap inClassMap
  ??@outletClassBindingMap inBindingMap
  ??@controllerMap inControllerMap
  ??@actionMap inActionMap
  ??@bool inHasTableValueBinding
  ??@globalEnumConstantMap inGlobalEnumConstantMap
  ?!@outletBindingListForGeneration ioOutletBindingListForGeneration
  ?!@stringset ioImplementationFileInclusionSet
;

#----------------------------------------------------------------------------*

abstract reader @abstractBindingForGeneration generateRemoveBinding
  ??@string inOutletName
  -> @string outResult
;

#----------------------------------------------------------------------------*

map @globalEnumConstantMap {
  @lstring mEnumTypeName ;
  insert insertKey error message "the '%K' enumeration constant is already declared" ;
  search searchKey error message "the '%K' enumeration constant is not declared" ;
}

#----------------------------------------------------------------------------*

map @enumConstantMap {
  insert insertKey error message "the '%K' enumeration constant is already declared" ;
  search searchKey error message "the '%K' enumeration constant is not declared" ;
}

#----------------------------------------------------------------------------*

map @enumMap {
  @lstringlist mConstantOrderedList ;
  @enumConstantMap mEnumConstantMap ;
  insert insertKey error message "the '%K' enumeration is already declared" ;
  search searchKey error message "the '%K' enumeration is not declared" ;
}

#----------------------------------------------------------------------------*

abstract method @abstractDefaultValue analyzeDefaultValueType 
  ??@easyBindingTypeList inAttributeActualTypeList
  ??@globalEnumConstantMap inGlobalEnumConstantMap
  !@string outDirectDefaultValueAsString
  !@string outObjectiveCDefaultValueAsString
;

#----------------------------------------------------------------------------*
  
override method @boolDefaultValue analyzeDefaultValueType 
  ??@easyBindingTypeList inAttributeActualTypeList
  ??@globalEnumConstantMap unused inGlobalEnumConstantMap
  !@string outDirectDefaultValueAsString
  !@string outObjectiveCDefaultValueAsString
:
  outObjectiveCDefaultValueAsString := "" ;
  outDirectDefaultValueAsString := "" ;
  @bool found := false ;
  foreach inAttributeActualTypeList while not found do
    if [mType isBoolType] then
      outDirectDefaultValueAsString := if mValue->bool then "YES" else "NO" end ;
      outObjectiveCDefaultValueAsString := "[NSNumber numberWithBool:" . outDirectDefaultValueAsString . "]" ;
      found := true ;
    end if ;
  end foreach ;
  if not found then
    error mValue
    : "only a boolean attribute can be initialized by YES or NO"
    ;  
  end if ;
end method ;

#----------------------------------------------------------------------------*
  
override method @integerDefaultValue analyzeDefaultValueType 
  ??@easyBindingTypeList inAttributeActualTypeList
  ??@globalEnumConstantMap unused inGlobalEnumConstantMap
  !@string outDirectDefaultValueAsString
  !@string outObjectiveCDefaultValueAsString
:
  outObjectiveCDefaultValueAsString := "" ;
  outDirectDefaultValueAsString := "" ;
  @bool found := false ;
  foreach inAttributeActualTypeList while not found do
    if [mType isIntegerType] then
      outDirectDefaultValueAsString := [mValue->uint string] ;
      outObjectiveCDefaultValueAsString := "[NSNumber numberWithInteger:" . outDirectDefaultValueAsString . "]" ;
      found := true ;
    end if ;
  end foreach ;
  if not found then
    error mValue
    : "only an integer attribute can be initialized by an integer constant"
    ;  
  end if ;
end method ;

#----------------------------------------------------------------------------*
  
override method @doubleDefaultValue analyzeDefaultValueType 
  ??@easyBindingTypeList inAttributeActualTypeList
  ??@globalEnumConstantMap unused inGlobalEnumConstantMap
  !@string outDirectDefaultValueAsString
  !@string outObjectiveCDefaultValueAsString
:
  outObjectiveCDefaultValueAsString := "" ;
  outDirectDefaultValueAsString := "" ;
  @bool found := false ;
  foreach inAttributeActualTypeList while not found do
    if [mType isDoubleType] then
      outDirectDefaultValueAsString := [mValue->double string] ;
      outObjectiveCDefaultValueAsString := "[NSNumber numberWithDouble:" . outDirectDefaultValueAsString . "]" ;
      found := true ;
    end if ;
  end foreach ;
  if not found then
    error mValue
    : "only a double attribute can be initialized by a floating point constant"
    ;  
  end if ;
end method ;

#----------------------------------------------------------------------------*
  
override method @stringDefaultValue analyzeDefaultValueType 
  ??@easyBindingTypeList inAttributeActualTypeList
  ??@globalEnumConstantMap unused inGlobalEnumConstantMap
  !@string outDirectDefaultValueAsString
  !@string outObjectiveCDefaultValueAsString
:
  outObjectiveCDefaultValueAsString := "" ;
  outDirectDefaultValueAsString := "" ;
  @bool found := false ;
  foreach inAttributeActualTypeList while not found do
    if [mType isStringType] then
      outDirectDefaultValueAsString := "@" . [mValue->string utf8Representation] ;
      outObjectiveCDefaultValueAsString := outDirectDefaultValueAsString ;
      found := true ;
    end if ;
  end foreach ;
  if not found then
    error mValue
    : "only a string attribute can be initialized by a string constant"
    ;  
  end if ;
end method ;

#----------------------------------------------------------------------------*

local once predefinedColors -> @stringset outResult :
  outResult := [@stringset emptySet] ;
  outResult += !"blackColor" ;
  outResult += !"blueColor" ;
  outResult += !"brownColor" ;
  outResult += !"clearColor" ;
  outResult += !"controlColor" ;
  outResult += !"controlDarkShadowColor" ;
  outResult += !"controlHighlightColor" ;
  outResult += !"controlLightHighlightColor" ;
  outResult += !"controlShadowColor" ;
  outResult += !"controlTextColor" ;
  outResult += !"cyanColor" ;
  outResult += !"darkGrayColor" ;
  outResult += !"disabledControlTextColor" ;
  outResult += !"grayColor" ;
  outResult += !"greenColor" ;
  outResult += !"gridColor" ;
  outResult += !"headerColor" ;
  outResult += !"headerTextColor" ;
  outResult += !"highlightColor" ;
  outResult += !"keyboardFocusIndicatorColor" ;
  outResult += !"knobColor" ;
  outResult += !"lightGrayColor" ;
  outResult += !"magentaColor" ;
  outResult += !"orangeColor" ;
  outResult += !"purpleColor" ;
  outResult += !"redColor" ;
  outResult += !"scrollBarColor" ;
  outResult += !"selectedControlColor" ;
  outResult += !"selectedControlTextColor" ;
  outResult += !"selectedKnobColor" ;
  outResult += !"selectedMenuItemColor" ;
  outResult += !"selectedMenuItemTextColor" ;
  outResult += !"selectedTextBackgroundColor" ;
  outResult += !"selectedTextColor" ;
  outResult += !"shadowColor" ;
  outResult += !"textBackgroundColor" ;
  outResult += !"textColor" ;
  outResult += !"whiteColor" ;
  outResult += !"windowBackgroundColor" ;
  outResult += !"windowFrameColor" ;
  outResult += !"windowFrameTextColor" ;
  outResult += !"yellowColor" ;
end once ;

#----------------------------------------------------------------------------*

local once predefinedDates -> @stringset outResult :
  outResult := [@stringset emptySet] ;
  outResult += !"date" ;
end once ;

#----------------------------------------------------------------------------*
  
override method @identifierDefaultValue analyzeDefaultValueType 
  ??@easyBindingTypeList inAttributeActualTypeList
  ??@globalEnumConstantMap inGlobalEnumConstantMap
  !@string outDirectDefaultValueAsString
  !@string outObjectiveCDefaultValueAsString
:
  outObjectiveCDefaultValueAsString := "" ;
  outDirectDefaultValueAsString := "" ;
  @bool found := false ;
  foreach inAttributeActualTypeList while not found do
    if [mType isColorType] then
      found := true ;
      if [predefinedColors [] hasKey !mValue->string] then
        outDirectDefaultValueAsString := "[NSColor " . mValue->string . "]" ;
        outObjectiveCDefaultValueAsString := outDirectDefaultValueAsString ;
      else
        error mValue
        : "unknown predefined color"
        : outDirectDefaultValueAsString, outObjectiveCDefaultValueAsString
        ;  
      end if ;
    elsif [mType isDateType] then
      found := true ;
      if [predefinedDates [] hasKey !mValue->string] then
        outDirectDefaultValueAsString := "[NSDate " . mValue->string . "]" ;
        outObjectiveCDefaultValueAsString := outDirectDefaultValueAsString ;
      else
        error mValue
        : "unknown predefined date"
        : outDirectDefaultValueAsString, outObjectiveCDefaultValueAsString
        ;  
      end if ;
    elsif [mType isEnumType] then
      found := true ;
      if [inGlobalEnumConstantMap hasKey !mValue->string] then
        [inGlobalEnumConstantMap searchKey !mValue ?@lstring inEnumTypeName] ;
        if [mType ebTypeIdentifier] == [[@enumType new !inEnumTypeName->string] ebTypeIdentifier] then
          outDirectDefaultValueAsString := mValue->string ;
          outObjectiveCDefaultValueAsString := "[NSNumber numberWithInteger:" . mValue->string . "]" ; ;
        else
          error mValue
          : "bad enum constant, belongs to the '" . inEnumTypeName . "' enum type"
          : outDirectDefaultValueAsString, outObjectiveCDefaultValueAsString
          ;  
        end if ;
      else
        error mValue
        : "unknown predefined date"
        : outDirectDefaultValueAsString, outObjectiveCDefaultValueAsString
        ;  
      end if ;
    end if ;
  end foreach ;
  if not found then
    error mValue
    : "unknow type for this identifier"
    : outDirectDefaultValueAsString, outObjectiveCDefaultValueAsString
    ;  
  end if ;
end method ;

#----------------------------------------------------------------------------*

local once predefinedFonts -> @stringset outResult :
  outResult := [@stringset emptySet] ;
  outResult += !"boldSystemFontOfSize" ;
  outResult += !"controlContentFontOfSize" ;
  outResult += !"labelFontOfSize" ;
  outResult += !"menuFontOfSize" ;
  outResult += !"menuBarFontOfSize" ;
  outResult += !"messageFontOfSize" ;
  outResult += !"paletteFontOfSize" ;
  outResult += !"systemFontOfSize" ;
  outResult += !"titleBarFontOfSize" ;
  outResult += !"toolTipsFontOfSize" ;
end once ;

#----------------------------------------------------------------------------*
 
override method @identifierIntegerDefaultValue analyzeDefaultValueType 
  ??@easyBindingTypeList inAttributeActualTypeList
  ??@globalEnumConstantMap unused inGlobalEnumConstantMap
  !@string outDirectDefaultValueAsString
  !@string outObjectiveCDefaultValueAsString
:
  outObjectiveCDefaultValueAsString := "" ;
  outDirectDefaultValueAsString := "" ;
  @bool found := false ;
  foreach inAttributeActualTypeList while not found do
    if [mType isFontType] then
      found := true ;
      if [predefinedFonts [] hasKey !mIdentifier->string] then
        outDirectDefaultValueAsString := "[NSFont " . mIdentifier->string . ":" . [mInteger->uint string] . "]" ;
        outObjectiveCDefaultValueAsString := outDirectDefaultValueAsString ;
      else
        error mIdentifier
        : "unknown predefined font name"
        : outDirectDefaultValueAsString, outObjectiveCDefaultValueAsString
        ;  
      end if ;
    end if ;
  end foreach ;
  if not found then
    error mIdentifier
    : "only a font attribute can be initialized by an identifier followed by an integer constant"
    ;  
  end if ;
end method ;

#----------------------------------------------------------------------------*

end semantics ;
