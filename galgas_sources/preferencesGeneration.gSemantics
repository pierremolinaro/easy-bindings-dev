semantics preferencesGeneration :
  import "easyBindings_options.gOption" ;
  import "semanticAnalysis.gSemantics" ;

#----------------------------------------------------------------------------*

reader @easyBindingType preferencesGetterTransformerFunctionName -> @string outResult :
  switch selfcopy
  when boolType : outResult := "boolFromNSNumber" ;
  when integer16Type : outResult := "sint16FromNSNumber" ;
  when integer32Type : outResult := "sint32FromNSNumber" ;
  when integer64Type : outResult := "sint64FromNSNumber" ;
  when floatType : outResult := "floatFromNSNumber" ;
  when doubleType : outResult := "doubleFromNSNumber" ;
  when colorType : outResult := "valueFromData" ;
  when stringType, fontType, imageType, toManyEntitiesType, uintegerType,
       dataType, dateType, decimalType : outResult := "" ;
  end switch ;
end reader ;

#----------------------------------------------------------------------------*

reader @easyBindingType preferencesSetterTransformerFunctionName -> @string outResult :
  switch selfcopy
  when boolType : outResult := "numberEncodedBool" ;
  when integer16Type : outResult := "numberEncodedSInt16" ;
  when integer32Type : outResult := "numberEncodedSInt32" ;
  when integer64Type : outResult := "numberEncodedSInt64" ;
  when floatType : outResult := "numberEncodedFloat" ;
  when doubleType : outResult := "numberEncodedDouble" ;
  when colorType : outResult := "dataEncodedValue" ;
  when stringType, fontType, imageType, toManyEntitiesType, uintegerType,
       dataType, dateType, decimalType : outResult := "" ;
  end switch ;
end reader ;

#----------------------------------------------------------------------------*

local filewrapper prefsGenerationTemplate in "../generation-templates/preferences-generation" {
}{
}{
  template preferencesDeclaration "preferences.h.gTemplate"
    ?@string PREFERENCES_NAME
    ?@attributeListForImplementation ATTRIBUTE_LIST_FOR_GENERATION
    ?@transientListForImplementation TRANSIENT_LIST_FOR_IMPLEMENTATION
    ?@outletGenerationList OUTLET_DECLARATION_LIST
    ?@lstringlist ACTION_LIST
  ;
  
  template preferencesImplementation "preferences.m.gTemplate"
    ?@string PREFERENCES_NAME
    ?@attributeListForImplementation ATTRIBUTE_LIST_FOR_GENERATION
    ?@transientListForImplementation TRANSIENT_LIST_FOR_IMPLEMENTATION
    ?@outletGenerationList OUTLET_DECLARATION_LIST
    ?@lstringlist ACTION_LIST
    ?@stringset INCLUSION_SET
  ;
  
  template preferencesTransientComputationsHeaderFile "preferences-computations.h.gTemplate"
    ?@string PREFERENCES_NAME
    ?@transientListForImplementation TRANSIENT_LIST_FOR_IMPLEMENTATION
    ?@lstringlist ACTION_LIST
  ;
  
  template preferencesTransientComputationImplementationFile "preferences-transient-computation-function.m.gTemplate"
    ?@string PREFERENCES_NAME
    ?@easyBindingType RESULT_TYPE
    ?@string TRANSIENT_NAME
    ?@directDependancyList DIRECT_DEPENDANCY_LIST
  ;

  template preferencesActionImplementationFile "preferences-action.m.gTemplate"
    ?@string PREFERENCES_NAME
    ?@string ACTION_NAME
  ;
}

#----------------------------------------------------------------------------*

routine generatePreferencesCode
  ??@preferencesMap inPreferencesMap
  ??@string inOutputDirectory
:
  if [@uint errorCount] == 0 then
    foreach inPreferencesMap do
    #--- Header
      @string s := [filewrapper prefsGenerationTemplate.preferencesDeclaration
        ![lkey string]
        !mAttributeListForImplementation
        !mTransientListForImplementation
        !mOutletDeclarationList
        !mActionList
      ] ;
      [@string generateFile
        !inOutputDirectory
        ![lkey string] . ".h"
        !"//"
        !"\n\n" # Defaut user zone1
        !s
        !"\n\n" # Defaut user zone2
        !"\n"
      ] ;
    #--- Implementation
      s := [filewrapper prefsGenerationTemplate.preferencesImplementation
        ![lkey string]
        !mAttributeListForImplementation
        !mTransientListForImplementation
        !mOutletDeclarationList
        !mActionList
        !mImplementationFileInclusionSet
      ] ;
      [@string generateFile
        !inOutputDirectory
        ![lkey string] . ".m"
        !"//"
        !"\n\n" # Defaut user zone1
        !s
        !"\n\n" # Defaut user zone2
        !"@end\n\n"
      ] ;
    #--- Transient computation function header file
      if ([mTransientListForImplementation length] + [mActionList length]) > 0 then
        s := [filewrapper prefsGenerationTemplate.preferencesTransientComputationsHeaderFile
          ![lkey string]
          !mTransientListForImplementation
          !mActionList
        ] ;
        [@string generateFile
          !inOutputDirectory
          ![lkey string] . "-computations.h"
          !"//"
          !"\n\n" # Defaut user zone1
          !s
          !"\n\n" # Defaut user zone2
          !"\n"
        ] ;
      end if ;
    #--- Transient computation function implementation files
      foreach mTransientListForImplementation do
          s := [filewrapper prefsGenerationTemplate.preferencesTransientComputationImplementationFile
            ![lkey string]
            !mType
            !mTransientName
            !mDependencyList
          ] ;
          [@string generateFile
            !inOutputDirectory
            !"compute_" . [lkey string] . "_" . mTransientName . ".m"
            !"//"
            !"\n\n" # Defaut user zone1
            !s
            !"  return what ? ; // ADD YOUR CODE HERE\n" # Defaut user zone2
            !"}\n\n" . "//----------------------------------------------------------------------------*\n"
          ] ;
      end foreach ;
    #--- Action computation function implementation files
      foreach mActionList do
          s := [filewrapper prefsGenerationTemplate.preferencesActionImplementationFile
            ![lkey string]
            !mValue->string
          ] ;
          [@string generateFile
            !inOutputDirectory
            ![lkey string] . "_" . mValue->string . "_action.m"
            !"//"
            !"\n\n" # Defaut user zone1
            !s
            !"  what ? ; // ADD YOUR CODE HERE\n" # Defaut user zone2
            !"}\n\n" . "//----------------------------------------------------------------------------*\n"
          ] ;
      end foreach ;
    end foreach ;
  end if ;
end routine ;

#----------------------------------------------------------------------------*


end semantics ;
