semantics classGeneration :
  import "transientGeneration.gSemantics" ;
  import "entityGeneration.gSemantics" ;

#----------------------------------------------------------------------------*

filewrapper classGenerationTemplate in "../generation-templates/class-generation" {
}{
}{
  template classDeclarationPart1 "class-1.h.gTemplate"
    ?@string CLASS_NAME
    ?@string SUPER_CLASS_NAME
    ?@attributeListForImplementation ATTRIBUTE_LIST
    ?@transientListForImplementation TRANSIENT_LIST_FOR_IMPLEMENTATION
    ?@attributeListForImplementation ALL_PROPERTIES_FOR_INIT_METHOD_HEADER
    ?@stringset HEADER_INCLUSION_SET
  ;
  
  template classDeclarationPart2 "class-2.h.gTemplate"
    ?@string CLASS_NAME
    ?@string SUPER_CLASS_NAME
    ?@attributeListForImplementation ATTRIBUTE_LIST
    ?@transientListForImplementation TRANSIENT_LIST_FOR_IMPLEMENTATION
    ?@attributeListForImplementation ALL_PROPERTIES_FOR_INIT_METHOD_HEADER
    ?@propertyArrayMap CURRENT_ARRAY_MAP
  ;
  
  template classImplementation "class.m.gTemplate"
    ?@string CLASS_NAME
    ?@string SUPER_CLASS_NAME
    ?@attributeListForImplementation ATTRIBUTE_LIST
    ?@transientListForImplementation TRANSIENT_LIST_FOR_IMPLEMENTATION
    ?@attributeListForImplementation ALL_PROPERTIES_FOR_INIT_METHOD_HEADER
    ?@attributeListForImplementation INHERITED_PROPERTIES_FOR_SUPER_INIT_CALL
    ?@stringset IMPLEMENTATION_INCLUSION_SET
    ?@propertyArrayMap CURRENT_ARRAY_MAP
  ;
  
  template classImplementationInSwift "class.swift.gTemplate"
    ?@string CLASS_NAME
    ?@string SUPER_CLASS_NAME
    ?@attributeListForImplementation ATTRIBUTE_LIST
    ?@transientListForImplementation TRANSIENT_LIST_FOR_IMPLEMENTATION
    ?@attributeListForImplementation ALL_PROPERTIES_FOR_INIT_METHOD_HEADER
    ?@attributeListForImplementation INHERITED_PROPERTIES_FOR_SUPER_INIT_CALL
    ?@stringset IMPLEMENTATION_INCLUSION_SET
    ?@propertyArrayMap CURRENT_ARRAY_MAP
  ;
  
  template classTransientComputationsHeaderFile "class-transient-computations.h.gTemplate"
    ?@string CLASS_NAME
    ?@stringset INCLUSION_SET
    ?@transientListForImplementation TRANSIENT_LIST_FOR_IMPLEMENTATION
  ;
  
  template classTransientComputationImplementationFile "class-transient-computation-function.m.gTemplate"
    ?@string CLASS_NAME
    ?@EXebType RESULT_TYPE
    ?@string TRANSIENT_NAME
    ?@directDependancyList DIRECT_DEPENDANCY_LIST
  ;
}

#----------------------------------------------------------------------------*

override method @classTypeGeneration generate
  ??@string inOutputDirectory
:
  if [option easyBindings_options.outputSwift value] then
    var s := [filewrapper classGenerationTemplate.classImplementationInSwift
      !mGenerationName
      !mSuperClassName
      !mAttributeListForImplementation
      !mTransientListForImplementation
      !mAttributeListForInitMethodHeader
      !mInheritedAttributeListForImplementation
      !mInclusionSet->mImplementationFileInclusionSet
      !mCurrentArrayPropertyForImplementation
    ] ;
    [@string generateFileWithPattern
      !inOutputDirectory
      !mGenerationName . ".swift"
      !"//"
      !"\n\n" # Defaut user zone1
      !s
      !"\n\n" # Defaut user zone2
      !"\n"
    ] ;
    #--- Transient computation function implementation files
#    foreach mTransientListForImplementation do
#       s := [filewrapper entityGenerationTemplate.entityTransientComputationImplementationFileInSwift
#          !mGenerationName
#          !mTransientType
#          !mTransientName
#          !mDependencyList
#        ] ;
#        [@string generateFileWithPattern
#          !inOutputDirectory
#          !mGenerationName . "+transient+" . mTransientName . ".swift"
#          !"//"
#          !"\n\n" # Defaut user zone1
#          !s
#          !"  return what ? ; // ADD YOUR CODE HERE\n" # Defaut user zone2
#          !"}\n\n" . "//----------------------------------------------------------------------------*\n"
#        ] ;
#    end foreach ;
  else
   #--- Header
    @string s := [filewrapper classGenerationTemplate.classDeclarationPart1
      !mGenerationName
      !mSuperClassName
      !mAttributeListForImplementation
      !mTransientListForImplementation
      !mAttributeListForInitMethodHeader
      !mInclusionSet->mHeaderFileInclusionSet
    ] ;
    @string s2 := [filewrapper classGenerationTemplate.classDeclarationPart2
      !mGenerationName
      !mSuperClassName
      !mAttributeListForImplementation
      !mTransientListForImplementation
      !mAttributeListForInitMethodHeader
      !mCurrentArrayPropertyForImplementation
    ] ;
    [@string generateFileWithPattern
      !inOutputDirectory
      !mGenerationName . ".h"
      !"//"
      !"\n\n" # Defaut user zone1
      !s
      !"\n\n}\n\n" # Defaut user zone2
      !s2
    ] ;
  #--- Implementation
    s := [filewrapper classGenerationTemplate.classImplementation
      !mGenerationName
      !mSuperClassName
      !mAttributeListForImplementation
      !mTransientListForImplementation
      !mAttributeListForInitMethodHeader
      !mInheritedAttributeListForImplementation
      !mInclusionSet->mImplementationFileInclusionSet
      !mCurrentArrayPropertyForImplementation
    ] ;
    [@string generateFileWithPattern
      !inOutputDirectory
      !mGenerationName . ".m"
      !"//"
      !"\n\n" # Defaut user zone1
      !s
      !"\n\n" # Defaut user zone2
      !"@end\n"
    ] ;
  #--- Transient computation function header file
    if [mTransientListForImplementation length] > 0 then
      @stringset inclusionSet [emptySet] ;
      s := [filewrapper classGenerationTemplate.classTransientComputationsHeaderFile
        !mGenerationName
        !inclusionSet
        !mTransientListForImplementation
      ] ;
      [@string generateFileWithPattern
        !inOutputDirectory
        !mGenerationName . "-transient-computations.h"
        !"//"
        !"\n\n" # Defaut user zone1
        !s
        !"\n\n" # Defaut user zone2
        !"\n"
      ] ;
    end if ;
  #--- Transient computation function implementation files
    foreach mTransientListForImplementation do
        s := [filewrapper classGenerationTemplate.classTransientComputationImplementationFile
          !mGenerationName
          !mTransientType
          !mTransientName
          !mDependencyList
        ] ;
        [@string generateFileWithPattern
          !inOutputDirectory
          !mGenerationName . "_" . mTransientName . ".m"
          !"//"
          !"\n\n" # Defaut user zone1
          !s
          !"  return what ? ; // ADD YOUR CODE HERE\n" # Defaut user zone2
          !"}\n\n" . "//----------------------------------------------------------------------------*\n"
        ] ;
    end foreach ;
  end if ;
end method ;

#----------------------------------------------------------------------------*

end semantics ;
