//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'abstractSyntaxTypes.cpp'                       *
//                        Generated by version 2.5.0                         *
//                      july 16th, 2013, at 19h10'39"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "abstractSyntaxTypes.h"
#include "galgas2/C_Compiler.h"
#include "galgas2/C_galgas_io.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "utilities/C_PrologueEpilogue.h"

//---------------------------------------------------------------------------*


//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "abstractSyntaxTypes.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Class for element of '@attributeASTTypeList' list             *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_attributeASTTypeList : public cCollectionElement {
  public : GALGAS_attributeASTTypeList_2E_element mObject ;

//--- Constructor
  public : cCollectionElement_attributeASTTypeList (const GALGAS_attributeASTType & in_mType,
                                                    const GALGAS_lstring & in_mTypeName
                                                    COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_attributeASTTypeList::cCollectionElement_attributeASTTypeList (const GALGAS_attributeASTType & in_mType,
                                                                                  const GALGAS_lstring & in_mTypeName
                                                                                  COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mType, in_mTypeName) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_attributeASTTypeList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_attributeASTTypeList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_attributeASTTypeList (mObject.mAttribute_mType, mObject.mAttribute_mTypeName COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_attributeASTTypeList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mType" ":" ;
  mObject.mAttribute_mType.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mTypeName" ":" ;
  mObject.mAttribute_mTypeName.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_attributeASTTypeList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_attributeASTTypeList * operand = (cCollectionElement_attributeASTTypeList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_attributeASTTypeList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTTypeList::GALGAS_attributeASTTypeList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTTypeList::GALGAS_attributeASTTypeList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTTypeList GALGAS_attributeASTTypeList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_attributeASTTypeList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTTypeList GALGAS_attributeASTTypeList::constructor_listWithValue (const GALGAS_attributeASTType & inOperand0,
                                                                                    const GALGAS_lstring & inOperand1
                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_attributeASTTypeList result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_attributeASTTypeList::makeAttributesFromObjects (attributes, inOperand0, inOperand1 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_attributeASTTypeList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                             const GALGAS_attributeASTType & in_mType,
                                                             const GALGAS_lstring & in_mTypeName
                                                             COMMA_LOCATION_ARGS) {
  cCollectionElement_attributeASTTypeList * p = NULL ;
  macroMyNew (p, cCollectionElement_attributeASTTypeList (in_mType,
                                                          in_mTypeName COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_attributeASTTypeList::addAssign_operation (const GALGAS_attributeASTType & inOperand0,
                                                       const GALGAS_lstring & inOperand1
                                                       COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_attributeASTTypeList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_attributeASTTypeList::modifier_prependValue (GALGAS_attributeASTType inOperand0,
                                                         GALGAS_lstring inOperand1
                                                         COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_attributeASTTypeList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_attributeASTTypeList::modifier_popFirst (GALGAS_attributeASTType & outOperand0,
                                                     GALGAS_lstring & outOperand1,
                                                     C_Compiler * inCompiler
                                                     COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_attributeASTTypeList * p = (cCollectionElement_attributeASTTypeList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_attributeASTTypeList) ;
    outOperand0 = p->mObject.mAttribute_mType ;
    outOperand1 = p->mObject.mAttribute_mTypeName ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_attributeASTTypeList::modifier_popLast (GALGAS_attributeASTType & outOperand0,
                                                    GALGAS_lstring & outOperand1,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_attributeASTTypeList * p = (cCollectionElement_attributeASTTypeList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_attributeASTTypeList) ;
    macroUniqueSharedObject (p) ;
    outOperand0 = p->mObject.mAttribute_mType ;
    outOperand1 = p->mObject.mAttribute_mTypeName ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_attributeASTTypeList::method_first (GALGAS_attributeASTType & outOperand0,
                                                GALGAS_lstring & outOperand1,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_attributeASTTypeList * p = (cCollectionElement_attributeASTTypeList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_attributeASTTypeList) ;
    outOperand0 = p->mObject.mAttribute_mType ;
    outOperand1 = p->mObject.mAttribute_mTypeName ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_attributeASTTypeList::method_last (GALGAS_attributeASTType & outOperand0,
                                               GALGAS_lstring & outOperand1,
                                               C_Compiler * inCompiler
                                               COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_attributeASTTypeList * p = (cCollectionElement_attributeASTTypeList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_attributeASTTypeList) ;
    outOperand0 = p->mObject.mAttribute_mType ;
    outOperand1 = p->mObject.mAttribute_mTypeName ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTTypeList GALGAS_attributeASTTypeList::operator_concat (const GALGAS_attributeASTTypeList & inOperand
                                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_attributeASTTypeList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTTypeList GALGAS_attributeASTTypeList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                                  C_Compiler * inCompiler
                                                                                  COMMA_LOCATION_ARGS) const {
  GALGAS_attributeASTTypeList result = GALGAS_attributeASTTypeList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTTypeList GALGAS_attributeASTTypeList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                  C_Compiler * inCompiler
                                                                                  COMMA_LOCATION_ARGS) const {
  GALGAS_attributeASTTypeList result = GALGAS_attributeASTTypeList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_attributeASTTypeList::dotAssign_operation (const GALGAS_attributeASTTypeList inOperand
                                                       COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTType GALGAS_attributeASTTypeList::reader_mTypeAtIndex (const GALGAS_uint & inIndex,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_attributeASTTypeList * p = (cCollectionElement_attributeASTTypeList *) attributes.ptr () ;
  GALGAS_attributeASTType result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_attributeASTTypeList) ;
    result = p->mObject.mAttribute_mType ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_attributeASTTypeList::reader_mTypeNameAtIndex (const GALGAS_uint & inIndex,
                                                                     C_Compiler * inCompiler
                                                                     COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_attributeASTTypeList * p = (cCollectionElement_attributeASTTypeList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_attributeASTTypeList) ;
    result = p->mObject.mAttribute_mTypeName ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_attributeASTTypeList::cEnumerator_attributeASTTypeList (const GALGAS_attributeASTTypeList & inEnumeratedObject,
                                                                    const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTTypeList_2E_element cEnumerator_attributeASTTypeList::current (LOCATION_ARGS) const {
  const cCollectionElement_attributeASTTypeList * p = (const cCollectionElement_attributeASTTypeList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_attributeASTTypeList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------*

GALGAS_attributeASTType cEnumerator_attributeASTTypeList::current_mType (LOCATION_ARGS) const {
  const cCollectionElement_attributeASTTypeList * p = (const cCollectionElement_attributeASTTypeList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_attributeASTTypeList) ;
  return p->mObject.mAttribute_mType ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_attributeASTTypeList::current_mTypeName (LOCATION_ARGS) const {
  const cCollectionElement_attributeASTTypeList * p = (const cCollectionElement_attributeASTTypeList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_attributeASTTypeList) ;
  return p->mObject.mAttribute_mTypeName ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                        @attributeASTTypeList type                         *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_attributeASTTypeList ("attributeASTTypeList",
                                             NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_attributeASTTypeList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_attributeASTTypeList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_attributeASTTypeList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_attributeASTTypeList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTTypeList GALGAS_attributeASTTypeList::extractObject (const GALGAS_object & inObject,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_attributeASTTypeList result ;
  const GALGAS_attributeASTTypeList * p = (const GALGAS_attributeASTTypeList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_attributeASTTypeList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("attributeASTTypeList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Class for element of '@attributeList' list                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_attributeList : public cCollectionElement {
  public : GALGAS_attributeList_2E_element mObject ;

//--- Constructor
  public : cCollectionElement_attributeList (const GALGAS_attributeASTType & in_mType,
                                             const GALGAS_lstring & in_mAttributeTypeName,
                                             const GALGAS_lstring & in_mAttributeName,
                                             const GALGAS_abstractDefaultValue & in_mDefaultValue
                                             COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_attributeList::cCollectionElement_attributeList (const GALGAS_attributeASTType & in_mType,
                                                                    const GALGAS_lstring & in_mAttributeTypeName,
                                                                    const GALGAS_lstring & in_mAttributeName,
                                                                    const GALGAS_abstractDefaultValue & in_mDefaultValue
                                                                    COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mType, in_mAttributeTypeName, in_mAttributeName, in_mDefaultValue) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_attributeList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_attributeList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_attributeList (mObject.mAttribute_mType, mObject.mAttribute_mAttributeTypeName, mObject.mAttribute_mAttributeName, mObject.mAttribute_mDefaultValue COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_attributeList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mType" ":" ;
  mObject.mAttribute_mType.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mAttributeTypeName" ":" ;
  mObject.mAttribute_mAttributeTypeName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mAttributeName" ":" ;
  mObject.mAttribute_mAttributeName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mDefaultValue" ":" ;
  mObject.mAttribute_mDefaultValue.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_attributeList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_attributeList * operand = (cCollectionElement_attributeList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_attributeList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeList::GALGAS_attributeList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_attributeList::GALGAS_attributeList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_attributeList GALGAS_attributeList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_attributeList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeList GALGAS_attributeList::constructor_listWithValue (const GALGAS_attributeASTType & inOperand0,
                                                                      const GALGAS_lstring & inOperand1,
                                                                      const GALGAS_lstring & inOperand2,
                                                                      const GALGAS_abstractDefaultValue & inOperand3
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_attributeList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_attributeList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2, inOperand3 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_attributeList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                      const GALGAS_attributeASTType & in_mType,
                                                      const GALGAS_lstring & in_mAttributeTypeName,
                                                      const GALGAS_lstring & in_mAttributeName,
                                                      const GALGAS_abstractDefaultValue & in_mDefaultValue
                                                      COMMA_LOCATION_ARGS) {
  cCollectionElement_attributeList * p = NULL ;
  macroMyNew (p, cCollectionElement_attributeList (in_mType,
                                                   in_mAttributeTypeName,
                                                   in_mAttributeName,
                                                   in_mDefaultValue COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_attributeList::addAssign_operation (const GALGAS_attributeASTType & inOperand0,
                                                const GALGAS_lstring & inOperand1,
                                                const GALGAS_lstring & inOperand2,
                                                const GALGAS_abstractDefaultValue & inOperand3
                                                COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_attributeList (inOperand0, inOperand1, inOperand2, inOperand3 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_attributeList::modifier_prependValue (GALGAS_attributeASTType inOperand0,
                                                  GALGAS_lstring inOperand1,
                                                  GALGAS_lstring inOperand2,
                                                  GALGAS_abstractDefaultValue inOperand3
                                                  COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_attributeList (inOperand0, inOperand1, inOperand2, inOperand3 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_attributeList::modifier_popFirst (GALGAS_attributeASTType & outOperand0,
                                              GALGAS_lstring & outOperand1,
                                              GALGAS_lstring & outOperand2,
                                              GALGAS_abstractDefaultValue & outOperand3,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_attributeList * p = (cCollectionElement_attributeList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_attributeList) ;
    outOperand0 = p->mObject.mAttribute_mType ;
    outOperand1 = p->mObject.mAttribute_mAttributeTypeName ;
    outOperand2 = p->mObject.mAttribute_mAttributeName ;
    outOperand3 = p->mObject.mAttribute_mDefaultValue ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_attributeList::modifier_popLast (GALGAS_attributeASTType & outOperand0,
                                             GALGAS_lstring & outOperand1,
                                             GALGAS_lstring & outOperand2,
                                             GALGAS_abstractDefaultValue & outOperand3,
                                             C_Compiler * inCompiler
                                             COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_attributeList * p = (cCollectionElement_attributeList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_attributeList) ;
    macroUniqueSharedObject (p) ;
    outOperand0 = p->mObject.mAttribute_mType ;
    outOperand1 = p->mObject.mAttribute_mAttributeTypeName ;
    outOperand2 = p->mObject.mAttribute_mAttributeName ;
    outOperand3 = p->mObject.mAttribute_mDefaultValue ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_attributeList::method_first (GALGAS_attributeASTType & outOperand0,
                                         GALGAS_lstring & outOperand1,
                                         GALGAS_lstring & outOperand2,
                                         GALGAS_abstractDefaultValue & outOperand3,
                                         C_Compiler * inCompiler
                                         COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_attributeList * p = (cCollectionElement_attributeList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_attributeList) ;
    outOperand0 = p->mObject.mAttribute_mType ;
    outOperand1 = p->mObject.mAttribute_mAttributeTypeName ;
    outOperand2 = p->mObject.mAttribute_mAttributeName ;
    outOperand3 = p->mObject.mAttribute_mDefaultValue ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_attributeList::method_last (GALGAS_attributeASTType & outOperand0,
                                        GALGAS_lstring & outOperand1,
                                        GALGAS_lstring & outOperand2,
                                        GALGAS_abstractDefaultValue & outOperand3,
                                        C_Compiler * inCompiler
                                        COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_attributeList * p = (cCollectionElement_attributeList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_attributeList) ;
    outOperand0 = p->mObject.mAttribute_mType ;
    outOperand1 = p->mObject.mAttribute_mAttributeTypeName ;
    outOperand2 = p->mObject.mAttribute_mAttributeName ;
    outOperand3 = p->mObject.mAttribute_mDefaultValue ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_attributeList GALGAS_attributeList::operator_concat (const GALGAS_attributeList & inOperand
                                                            COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_attributeList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeList GALGAS_attributeList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) const {
  GALGAS_attributeList result = GALGAS_attributeList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeList GALGAS_attributeList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) const {
  GALGAS_attributeList result = GALGAS_attributeList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_attributeList::dotAssign_operation (const GALGAS_attributeList inOperand
                                                COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTType GALGAS_attributeList::reader_mTypeAtIndex (const GALGAS_uint & inIndex,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_attributeList * p = (cCollectionElement_attributeList *) attributes.ptr () ;
  GALGAS_attributeASTType result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_attributeList) ;
    result = p->mObject.mAttribute_mType ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_attributeList::reader_mAttributeTypeNameAtIndex (const GALGAS_uint & inIndex,
                                                                       C_Compiler * inCompiler
                                                                       COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_attributeList * p = (cCollectionElement_attributeList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_attributeList) ;
    result = p->mObject.mAttribute_mAttributeTypeName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_attributeList::reader_mAttributeNameAtIndex (const GALGAS_uint & inIndex,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_attributeList * p = (cCollectionElement_attributeList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_attributeList) ;
    result = p->mObject.mAttribute_mAttributeName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_abstractDefaultValue GALGAS_attributeList::reader_mDefaultValueAtIndex (const GALGAS_uint & inIndex,
                                                                               C_Compiler * inCompiler
                                                                               COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_attributeList * p = (cCollectionElement_attributeList *) attributes.ptr () ;
  GALGAS_abstractDefaultValue result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_attributeList) ;
    result = p->mObject.mAttribute_mDefaultValue ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_attributeList::cEnumerator_attributeList (const GALGAS_attributeList & inEnumeratedObject,
                                                      const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeList_2E_element cEnumerator_attributeList::current (LOCATION_ARGS) const {
  const cCollectionElement_attributeList * p = (const cCollectionElement_attributeList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_attributeList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------*

GALGAS_attributeASTType cEnumerator_attributeList::current_mType (LOCATION_ARGS) const {
  const cCollectionElement_attributeList * p = (const cCollectionElement_attributeList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_attributeList) ;
  return p->mObject.mAttribute_mType ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_attributeList::current_mAttributeTypeName (LOCATION_ARGS) const {
  const cCollectionElement_attributeList * p = (const cCollectionElement_attributeList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_attributeList) ;
  return p->mObject.mAttribute_mAttributeTypeName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_attributeList::current_mAttributeName (LOCATION_ARGS) const {
  const cCollectionElement_attributeList * p = (const cCollectionElement_attributeList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_attributeList) ;
  return p->mObject.mAttribute_mAttributeName ;
}

//---------------------------------------------------------------------------*

GALGAS_abstractDefaultValue cEnumerator_attributeList::current_mDefaultValue (LOCATION_ARGS) const {
  const cCollectionElement_attributeList * p = (const cCollectionElement_attributeList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_attributeList) ;
  return p->mObject.mAttribute_mDefaultValue ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                            @attributeList type                            *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_attributeList ("attributeList",
                                      NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_attributeList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_attributeList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_attributeList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_attributeList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeList GALGAS_attributeList::extractObject (const GALGAS_object & inObject,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) {
  GALGAS_attributeList result ;
  const GALGAS_attributeList * p = (const GALGAS_attributeList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_attributeList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("attributeList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_deleteRuleEnum::GALGAS_deleteRuleEnum (void) :
mEnum (kNotBuilt) {
}

//---------------------------------------------------------------------------*

GALGAS_deleteRuleEnum GALGAS_deleteRuleEnum::constructor_nullifyDeleteRule (UNUSED_LOCATION_ARGS) {
  GALGAS_deleteRuleEnum result ;
  result.mEnum = kEnum_nullifyDeleteRule ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_deleteRuleEnum GALGAS_deleteRuleEnum::constructor_cascadeDeleteRule (UNUSED_LOCATION_ARGS) {
  GALGAS_deleteRuleEnum result ;
  result.mEnum = kEnum_cascadeDeleteRule ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_deleteRuleEnum GALGAS_deleteRuleEnum::constructor_denyDeleteRule (UNUSED_LOCATION_ARGS) {
  GALGAS_deleteRuleEnum result ;
  result.mEnum = kEnum_denyDeleteRule ;
  return result ;
}

//---------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_deleteRuleEnum [4] = {
  "(not built)",
  "nullifyDeleteRule",
  "cascadeDeleteRule",
  "denyDeleteRule"
} ;

//---------------------------------------------------------------------------*

void GALGAS_deleteRuleEnum::description (C_String & ioString,
                                         const PMSInt32 /* inIndentation */) const {
  ioString << "<enum @deleteRuleEnum: " << gEnumNameArrayFor_deleteRuleEnum [mEnum] << ">" ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_deleteRuleEnum::objectCompare (const GALGAS_deleteRuleEnum & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = kOperandEqual ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                           @deleteRuleEnum type                            *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_deleteRuleEnum ("deleteRuleEnum",
                                       NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_deleteRuleEnum::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_deleteRuleEnum ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_deleteRuleEnum::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_deleteRuleEnum (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_deleteRuleEnum GALGAS_deleteRuleEnum::extractObject (const GALGAS_object & inObject,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) {
  GALGAS_deleteRuleEnum result ;
  const GALGAS_deleteRuleEnum * p = (const GALGAS_deleteRuleEnum *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_deleteRuleEnum *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("deleteRuleEnum", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Class for element of '@relationshipList' list               *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_relationshipList : public cCollectionElement {
  public : GALGAS_relationshipList_2E_element mObject ;

//--- Constructor
  public : cCollectionElement_relationshipList (const GALGAS_bool & in_mIsToMany,
                                                const GALGAS_lstring & in_mDestinationEntityName,
                                                const GALGAS_lstring & in_mRelationshipName,
                                                const GALGAS_lstring & in_mInverseRelationshipName,
                                                const GALGAS_bool & in_mInverseRelationIsToMany,
                                                const GALGAS_deleteRuleEnum & in_mDeleteRule
                                                COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_relationshipList::cCollectionElement_relationshipList (const GALGAS_bool & in_mIsToMany,
                                                                          const GALGAS_lstring & in_mDestinationEntityName,
                                                                          const GALGAS_lstring & in_mRelationshipName,
                                                                          const GALGAS_lstring & in_mInverseRelationshipName,
                                                                          const GALGAS_bool & in_mInverseRelationIsToMany,
                                                                          const GALGAS_deleteRuleEnum & in_mDeleteRule
                                                                          COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mIsToMany, in_mDestinationEntityName, in_mRelationshipName, in_mInverseRelationshipName, in_mInverseRelationIsToMany, in_mDeleteRule) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_relationshipList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_relationshipList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_relationshipList (mObject.mAttribute_mIsToMany, mObject.mAttribute_mDestinationEntityName, mObject.mAttribute_mRelationshipName, mObject.mAttribute_mInverseRelationshipName, mObject.mAttribute_mInverseRelationIsToMany, mObject.mAttribute_mDeleteRule COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_relationshipList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mIsToMany" ":" ;
  mObject.mAttribute_mIsToMany.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mDestinationEntityName" ":" ;
  mObject.mAttribute_mDestinationEntityName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mRelationshipName" ":" ;
  mObject.mAttribute_mRelationshipName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mInverseRelationshipName" ":" ;
  mObject.mAttribute_mInverseRelationshipName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mInverseRelationIsToMany" ":" ;
  mObject.mAttribute_mInverseRelationIsToMany.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mDeleteRule" ":" ;
  mObject.mAttribute_mDeleteRule.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_relationshipList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_relationshipList * operand = (cCollectionElement_relationshipList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_relationshipList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------*

GALGAS_relationshipList::GALGAS_relationshipList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_relationshipList::GALGAS_relationshipList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_relationshipList GALGAS_relationshipList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_relationshipList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_relationshipList GALGAS_relationshipList::constructor_listWithValue (const GALGAS_bool & inOperand0,
                                                                            const GALGAS_lstring & inOperand1,
                                                                            const GALGAS_lstring & inOperand2,
                                                                            const GALGAS_lstring & inOperand3,
                                                                            const GALGAS_bool & inOperand4,
                                                                            const GALGAS_deleteRuleEnum & inOperand5
                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_relationshipList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_relationshipList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_relationshipList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                         const GALGAS_bool & in_mIsToMany,
                                                         const GALGAS_lstring & in_mDestinationEntityName,
                                                         const GALGAS_lstring & in_mRelationshipName,
                                                         const GALGAS_lstring & in_mInverseRelationshipName,
                                                         const GALGAS_bool & in_mInverseRelationIsToMany,
                                                         const GALGAS_deleteRuleEnum & in_mDeleteRule
                                                         COMMA_LOCATION_ARGS) {
  cCollectionElement_relationshipList * p = NULL ;
  macroMyNew (p, cCollectionElement_relationshipList (in_mIsToMany,
                                                      in_mDestinationEntityName,
                                                      in_mRelationshipName,
                                                      in_mInverseRelationshipName,
                                                      in_mInverseRelationIsToMany,
                                                      in_mDeleteRule COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_relationshipList::addAssign_operation (const GALGAS_bool & inOperand0,
                                                   const GALGAS_lstring & inOperand1,
                                                   const GALGAS_lstring & inOperand2,
                                                   const GALGAS_lstring & inOperand3,
                                                   const GALGAS_bool & inOperand4,
                                                   const GALGAS_deleteRuleEnum & inOperand5
                                                   COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_relationshipList (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_relationshipList::modifier_prependValue (GALGAS_bool inOperand0,
                                                     GALGAS_lstring inOperand1,
                                                     GALGAS_lstring inOperand2,
                                                     GALGAS_lstring inOperand3,
                                                     GALGAS_bool inOperand4,
                                                     GALGAS_deleteRuleEnum inOperand5
                                                     COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_relationshipList (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_relationshipList::modifier_popFirst (GALGAS_bool & outOperand0,
                                                 GALGAS_lstring & outOperand1,
                                                 GALGAS_lstring & outOperand2,
                                                 GALGAS_lstring & outOperand3,
                                                 GALGAS_bool & outOperand4,
                                                 GALGAS_deleteRuleEnum & outOperand5,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_relationshipList * p = (cCollectionElement_relationshipList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_relationshipList) ;
    outOperand0 = p->mObject.mAttribute_mIsToMany ;
    outOperand1 = p->mObject.mAttribute_mDestinationEntityName ;
    outOperand2 = p->mObject.mAttribute_mRelationshipName ;
    outOperand3 = p->mObject.mAttribute_mInverseRelationshipName ;
    outOperand4 = p->mObject.mAttribute_mInverseRelationIsToMany ;
    outOperand5 = p->mObject.mAttribute_mDeleteRule ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_relationshipList::modifier_popLast (GALGAS_bool & outOperand0,
                                                GALGAS_lstring & outOperand1,
                                                GALGAS_lstring & outOperand2,
                                                GALGAS_lstring & outOperand3,
                                                GALGAS_bool & outOperand4,
                                                GALGAS_deleteRuleEnum & outOperand5,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_relationshipList * p = (cCollectionElement_relationshipList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_relationshipList) ;
    macroUniqueSharedObject (p) ;
    outOperand0 = p->mObject.mAttribute_mIsToMany ;
    outOperand1 = p->mObject.mAttribute_mDestinationEntityName ;
    outOperand2 = p->mObject.mAttribute_mRelationshipName ;
    outOperand3 = p->mObject.mAttribute_mInverseRelationshipName ;
    outOperand4 = p->mObject.mAttribute_mInverseRelationIsToMany ;
    outOperand5 = p->mObject.mAttribute_mDeleteRule ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_relationshipList::method_first (GALGAS_bool & outOperand0,
                                            GALGAS_lstring & outOperand1,
                                            GALGAS_lstring & outOperand2,
                                            GALGAS_lstring & outOperand3,
                                            GALGAS_bool & outOperand4,
                                            GALGAS_deleteRuleEnum & outOperand5,
                                            C_Compiler * inCompiler
                                            COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_relationshipList * p = (cCollectionElement_relationshipList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_relationshipList) ;
    outOperand0 = p->mObject.mAttribute_mIsToMany ;
    outOperand1 = p->mObject.mAttribute_mDestinationEntityName ;
    outOperand2 = p->mObject.mAttribute_mRelationshipName ;
    outOperand3 = p->mObject.mAttribute_mInverseRelationshipName ;
    outOperand4 = p->mObject.mAttribute_mInverseRelationIsToMany ;
    outOperand5 = p->mObject.mAttribute_mDeleteRule ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_relationshipList::method_last (GALGAS_bool & outOperand0,
                                           GALGAS_lstring & outOperand1,
                                           GALGAS_lstring & outOperand2,
                                           GALGAS_lstring & outOperand3,
                                           GALGAS_bool & outOperand4,
                                           GALGAS_deleteRuleEnum & outOperand5,
                                           C_Compiler * inCompiler
                                           COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_relationshipList * p = (cCollectionElement_relationshipList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_relationshipList) ;
    outOperand0 = p->mObject.mAttribute_mIsToMany ;
    outOperand1 = p->mObject.mAttribute_mDestinationEntityName ;
    outOperand2 = p->mObject.mAttribute_mRelationshipName ;
    outOperand3 = p->mObject.mAttribute_mInverseRelationshipName ;
    outOperand4 = p->mObject.mAttribute_mInverseRelationIsToMany ;
    outOperand5 = p->mObject.mAttribute_mDeleteRule ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_relationshipList GALGAS_relationshipList::operator_concat (const GALGAS_relationshipList & inOperand
                                                                  COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_relationshipList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_relationshipList GALGAS_relationshipList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) const {
  GALGAS_relationshipList result = GALGAS_relationshipList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_relationshipList GALGAS_relationshipList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) const {
  GALGAS_relationshipList result = GALGAS_relationshipList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_relationshipList::dotAssign_operation (const GALGAS_relationshipList inOperand
                                                   COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_relationshipList::reader_mIsToManyAtIndex (const GALGAS_uint & inIndex,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_relationshipList * p = (cCollectionElement_relationshipList *) attributes.ptr () ;
  GALGAS_bool result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_relationshipList) ;
    result = p->mObject.mAttribute_mIsToMany ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_relationshipList::reader_mDestinationEntityNameAtIndex (const GALGAS_uint & inIndex,
                                                                              C_Compiler * inCompiler
                                                                              COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_relationshipList * p = (cCollectionElement_relationshipList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_relationshipList) ;
    result = p->mObject.mAttribute_mDestinationEntityName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_relationshipList::reader_mRelationshipNameAtIndex (const GALGAS_uint & inIndex,
                                                                         C_Compiler * inCompiler
                                                                         COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_relationshipList * p = (cCollectionElement_relationshipList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_relationshipList) ;
    result = p->mObject.mAttribute_mRelationshipName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_relationshipList::reader_mInverseRelationshipNameAtIndex (const GALGAS_uint & inIndex,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_relationshipList * p = (cCollectionElement_relationshipList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_relationshipList) ;
    result = p->mObject.mAttribute_mInverseRelationshipName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_relationshipList::reader_mInverseRelationIsToManyAtIndex (const GALGAS_uint & inIndex,
                                                                             C_Compiler * inCompiler
                                                                             COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_relationshipList * p = (cCollectionElement_relationshipList *) attributes.ptr () ;
  GALGAS_bool result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_relationshipList) ;
    result = p->mObject.mAttribute_mInverseRelationIsToMany ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_deleteRuleEnum GALGAS_relationshipList::reader_mDeleteRuleAtIndex (const GALGAS_uint & inIndex,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_relationshipList * p = (cCollectionElement_relationshipList *) attributes.ptr () ;
  GALGAS_deleteRuleEnum result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_relationshipList) ;
    result = p->mObject.mAttribute_mDeleteRule ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_relationshipList::cEnumerator_relationshipList (const GALGAS_relationshipList & inEnumeratedObject,
                                                            const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_relationshipList_2E_element cEnumerator_relationshipList::current (LOCATION_ARGS) const {
  const cCollectionElement_relationshipList * p = (const cCollectionElement_relationshipList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_relationshipList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------*

GALGAS_bool cEnumerator_relationshipList::current_mIsToMany (LOCATION_ARGS) const {
  const cCollectionElement_relationshipList * p = (const cCollectionElement_relationshipList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_relationshipList) ;
  return p->mObject.mAttribute_mIsToMany ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_relationshipList::current_mDestinationEntityName (LOCATION_ARGS) const {
  const cCollectionElement_relationshipList * p = (const cCollectionElement_relationshipList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_relationshipList) ;
  return p->mObject.mAttribute_mDestinationEntityName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_relationshipList::current_mRelationshipName (LOCATION_ARGS) const {
  const cCollectionElement_relationshipList * p = (const cCollectionElement_relationshipList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_relationshipList) ;
  return p->mObject.mAttribute_mRelationshipName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_relationshipList::current_mInverseRelationshipName (LOCATION_ARGS) const {
  const cCollectionElement_relationshipList * p = (const cCollectionElement_relationshipList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_relationshipList) ;
  return p->mObject.mAttribute_mInverseRelationshipName ;
}

//---------------------------------------------------------------------------*

GALGAS_bool cEnumerator_relationshipList::current_mInverseRelationIsToMany (LOCATION_ARGS) const {
  const cCollectionElement_relationshipList * p = (const cCollectionElement_relationshipList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_relationshipList) ;
  return p->mObject.mAttribute_mInverseRelationIsToMany ;
}

//---------------------------------------------------------------------------*

GALGAS_deleteRuleEnum cEnumerator_relationshipList::current_mDeleteRule (LOCATION_ARGS) const {
  const cCollectionElement_relationshipList * p = (const cCollectionElement_relationshipList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_relationshipList) ;
  return p->mObject.mAttribute_mDeleteRule ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                          @relationshipList type                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_relationshipList ("relationshipList",
                                         NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_relationshipList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_relationshipList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_relationshipList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_relationshipList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_relationshipList GALGAS_relationshipList::extractObject (const GALGAS_object & inObject,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) {
  GALGAS_relationshipList result ;
  const GALGAS_relationshipList * p = (const GALGAS_relationshipList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_relationshipList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("relationshipList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Class for element of '@dependanceList' list                *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_dependanceList : public cCollectionElement {
  public : GALGAS_dependanceList_2E_element mObject ;

//--- Constructor
  public : cCollectionElement_dependanceList (const GALGAS_abstractTransientDependency & in_mDependency
                                              COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_dependanceList::cCollectionElement_dependanceList (const GALGAS_abstractTransientDependency & in_mDependency
                                                                      COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mDependency) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_dependanceList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_dependanceList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_dependanceList (mObject.mAttribute_mDependency COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_dependanceList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mDependency" ":" ;
  mObject.mAttribute_mDependency.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_dependanceList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_dependanceList * operand = (cCollectionElement_dependanceList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_dependanceList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------*

GALGAS_dependanceList::GALGAS_dependanceList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_dependanceList::GALGAS_dependanceList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_dependanceList GALGAS_dependanceList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_dependanceList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_dependanceList GALGAS_dependanceList::constructor_listWithValue (const GALGAS_abstractTransientDependency & inOperand0
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_dependanceList result ;
  if (inOperand0.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_dependanceList::makeAttributesFromObjects (attributes, inOperand0 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_dependanceList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                       const GALGAS_abstractTransientDependency & in_mDependency
                                                       COMMA_LOCATION_ARGS) {
  cCollectionElement_dependanceList * p = NULL ;
  macroMyNew (p, cCollectionElement_dependanceList (in_mDependency COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_dependanceList::addAssign_operation (const GALGAS_abstractTransientDependency & inOperand0
                                                 COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_dependanceList (inOperand0 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_dependanceList::modifier_prependValue (GALGAS_abstractTransientDependency inOperand0
                                                   COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_dependanceList (inOperand0 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_dependanceList::modifier_popFirst (GALGAS_abstractTransientDependency & outOperand0,
                                               C_Compiler * inCompiler
                                               COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_dependanceList * p = (cCollectionElement_dependanceList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_dependanceList) ;
    outOperand0 = p->mObject.mAttribute_mDependency ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_dependanceList::modifier_popLast (GALGAS_abstractTransientDependency & outOperand0,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_dependanceList * p = (cCollectionElement_dependanceList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_dependanceList) ;
    macroUniqueSharedObject (p) ;
    outOperand0 = p->mObject.mAttribute_mDependency ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_dependanceList::method_first (GALGAS_abstractTransientDependency & outOperand0,
                                          C_Compiler * inCompiler
                                          COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_dependanceList * p = (cCollectionElement_dependanceList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_dependanceList) ;
    outOperand0 = p->mObject.mAttribute_mDependency ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_dependanceList::method_last (GALGAS_abstractTransientDependency & outOperand0,
                                         C_Compiler * inCompiler
                                         COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_dependanceList * p = (cCollectionElement_dependanceList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_dependanceList) ;
    outOperand0 = p->mObject.mAttribute_mDependency ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_dependanceList GALGAS_dependanceList::operator_concat (const GALGAS_dependanceList & inOperand
                                                              COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_dependanceList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_dependanceList GALGAS_dependanceList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) const {
  GALGAS_dependanceList result = GALGAS_dependanceList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_dependanceList GALGAS_dependanceList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) const {
  GALGAS_dependanceList result = GALGAS_dependanceList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_dependanceList::dotAssign_operation (const GALGAS_dependanceList inOperand
                                                 COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_abstractTransientDependency GALGAS_dependanceList::reader_mDependencyAtIndex (const GALGAS_uint & inIndex,
                                                                                     C_Compiler * inCompiler
                                                                                     COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_dependanceList * p = (cCollectionElement_dependanceList *) attributes.ptr () ;
  GALGAS_abstractTransientDependency result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_dependanceList) ;
    result = p->mObject.mAttribute_mDependency ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_dependanceList::cEnumerator_dependanceList (const GALGAS_dependanceList & inEnumeratedObject,
                                                        const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_dependanceList_2E_element cEnumerator_dependanceList::current (LOCATION_ARGS) const {
  const cCollectionElement_dependanceList * p = (const cCollectionElement_dependanceList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_dependanceList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------*

GALGAS_abstractTransientDependency cEnumerator_dependanceList::current_mDependency (LOCATION_ARGS) const {
  const cCollectionElement_dependanceList * p = (const cCollectionElement_dependanceList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_dependanceList) ;
  return p->mObject.mAttribute_mDependency ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                           @dependanceList type                            *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_dependanceList ("dependanceList",
                                       NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_dependanceList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_dependanceList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_dependanceList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_dependanceList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_dependanceList GALGAS_dependanceList::extractObject (const GALGAS_object & inObject,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) {
  GALGAS_dependanceList result ;
  const GALGAS_dependanceList * p = (const GALGAS_dependanceList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_dependanceList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("dependanceList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Class for element of '@transientList' list                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_transientList : public cCollectionElement {
  public : GALGAS_transientList_2E_element mObject ;

//--- Constructor
  public : cCollectionElement_transientList (const GALGAS_attributeASTType & in_mType,
                                             const GALGAS_lstring & in_mTransientTypeName,
                                             const GALGAS_lstring & in_mTransientName,
                                             const GALGAS_dependanceList & in_mDependencyList
                                             COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_transientList::cCollectionElement_transientList (const GALGAS_attributeASTType & in_mType,
                                                                    const GALGAS_lstring & in_mTransientTypeName,
                                                                    const GALGAS_lstring & in_mTransientName,
                                                                    const GALGAS_dependanceList & in_mDependencyList
                                                                    COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mType, in_mTransientTypeName, in_mTransientName, in_mDependencyList) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_transientList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_transientList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_transientList (mObject.mAttribute_mType, mObject.mAttribute_mTransientTypeName, mObject.mAttribute_mTransientName, mObject.mAttribute_mDependencyList COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_transientList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mType" ":" ;
  mObject.mAttribute_mType.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mTransientTypeName" ":" ;
  mObject.mAttribute_mTransientTypeName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mTransientName" ":" ;
  mObject.mAttribute_mTransientName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mDependencyList" ":" ;
  mObject.mAttribute_mDependencyList.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_transientList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_transientList * operand = (cCollectionElement_transientList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_transientList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------*

GALGAS_transientList::GALGAS_transientList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_transientList::GALGAS_transientList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_transientList GALGAS_transientList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_transientList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_transientList GALGAS_transientList::constructor_listWithValue (const GALGAS_attributeASTType & inOperand0,
                                                                      const GALGAS_lstring & inOperand1,
                                                                      const GALGAS_lstring & inOperand2,
                                                                      const GALGAS_dependanceList & inOperand3
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_transientList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_transientList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2, inOperand3 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_transientList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                      const GALGAS_attributeASTType & in_mType,
                                                      const GALGAS_lstring & in_mTransientTypeName,
                                                      const GALGAS_lstring & in_mTransientName,
                                                      const GALGAS_dependanceList & in_mDependencyList
                                                      COMMA_LOCATION_ARGS) {
  cCollectionElement_transientList * p = NULL ;
  macroMyNew (p, cCollectionElement_transientList (in_mType,
                                                   in_mTransientTypeName,
                                                   in_mTransientName,
                                                   in_mDependencyList COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_transientList::addAssign_operation (const GALGAS_attributeASTType & inOperand0,
                                                const GALGAS_lstring & inOperand1,
                                                const GALGAS_lstring & inOperand2,
                                                const GALGAS_dependanceList & inOperand3
                                                COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_transientList (inOperand0, inOperand1, inOperand2, inOperand3 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_transientList::modifier_prependValue (GALGAS_attributeASTType inOperand0,
                                                  GALGAS_lstring inOperand1,
                                                  GALGAS_lstring inOperand2,
                                                  GALGAS_dependanceList inOperand3
                                                  COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_transientList (inOperand0, inOperand1, inOperand2, inOperand3 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_transientList::modifier_popFirst (GALGAS_attributeASTType & outOperand0,
                                              GALGAS_lstring & outOperand1,
                                              GALGAS_lstring & outOperand2,
                                              GALGAS_dependanceList & outOperand3,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_transientList * p = (cCollectionElement_transientList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_transientList) ;
    outOperand0 = p->mObject.mAttribute_mType ;
    outOperand1 = p->mObject.mAttribute_mTransientTypeName ;
    outOperand2 = p->mObject.mAttribute_mTransientName ;
    outOperand3 = p->mObject.mAttribute_mDependencyList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_transientList::modifier_popLast (GALGAS_attributeASTType & outOperand0,
                                             GALGAS_lstring & outOperand1,
                                             GALGAS_lstring & outOperand2,
                                             GALGAS_dependanceList & outOperand3,
                                             C_Compiler * inCompiler
                                             COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_transientList * p = (cCollectionElement_transientList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_transientList) ;
    macroUniqueSharedObject (p) ;
    outOperand0 = p->mObject.mAttribute_mType ;
    outOperand1 = p->mObject.mAttribute_mTransientTypeName ;
    outOperand2 = p->mObject.mAttribute_mTransientName ;
    outOperand3 = p->mObject.mAttribute_mDependencyList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_transientList::method_first (GALGAS_attributeASTType & outOperand0,
                                         GALGAS_lstring & outOperand1,
                                         GALGAS_lstring & outOperand2,
                                         GALGAS_dependanceList & outOperand3,
                                         C_Compiler * inCompiler
                                         COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_transientList * p = (cCollectionElement_transientList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_transientList) ;
    outOperand0 = p->mObject.mAttribute_mType ;
    outOperand1 = p->mObject.mAttribute_mTransientTypeName ;
    outOperand2 = p->mObject.mAttribute_mTransientName ;
    outOperand3 = p->mObject.mAttribute_mDependencyList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_transientList::method_last (GALGAS_attributeASTType & outOperand0,
                                        GALGAS_lstring & outOperand1,
                                        GALGAS_lstring & outOperand2,
                                        GALGAS_dependanceList & outOperand3,
                                        C_Compiler * inCompiler
                                        COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_transientList * p = (cCollectionElement_transientList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_transientList) ;
    outOperand0 = p->mObject.mAttribute_mType ;
    outOperand1 = p->mObject.mAttribute_mTransientTypeName ;
    outOperand2 = p->mObject.mAttribute_mTransientName ;
    outOperand3 = p->mObject.mAttribute_mDependencyList ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_transientList GALGAS_transientList::operator_concat (const GALGAS_transientList & inOperand
                                                            COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_transientList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_transientList GALGAS_transientList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) const {
  GALGAS_transientList result = GALGAS_transientList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_transientList GALGAS_transientList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) const {
  GALGAS_transientList result = GALGAS_transientList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_transientList::dotAssign_operation (const GALGAS_transientList inOperand
                                                COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTType GALGAS_transientList::reader_mTypeAtIndex (const GALGAS_uint & inIndex,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_transientList * p = (cCollectionElement_transientList *) attributes.ptr () ;
  GALGAS_attributeASTType result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_transientList) ;
    result = p->mObject.mAttribute_mType ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_transientList::reader_mTransientTypeNameAtIndex (const GALGAS_uint & inIndex,
                                                                       C_Compiler * inCompiler
                                                                       COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_transientList * p = (cCollectionElement_transientList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_transientList) ;
    result = p->mObject.mAttribute_mTransientTypeName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_transientList::reader_mTransientNameAtIndex (const GALGAS_uint & inIndex,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_transientList * p = (cCollectionElement_transientList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_transientList) ;
    result = p->mObject.mAttribute_mTransientName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_dependanceList GALGAS_transientList::reader_mDependencyListAtIndex (const GALGAS_uint & inIndex,
                                                                           C_Compiler * inCompiler
                                                                           COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_transientList * p = (cCollectionElement_transientList *) attributes.ptr () ;
  GALGAS_dependanceList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_transientList) ;
    result = p->mObject.mAttribute_mDependencyList ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_transientList::cEnumerator_transientList (const GALGAS_transientList & inEnumeratedObject,
                                                      const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_transientList_2E_element cEnumerator_transientList::current (LOCATION_ARGS) const {
  const cCollectionElement_transientList * p = (const cCollectionElement_transientList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_transientList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------*

GALGAS_attributeASTType cEnumerator_transientList::current_mType (LOCATION_ARGS) const {
  const cCollectionElement_transientList * p = (const cCollectionElement_transientList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_transientList) ;
  return p->mObject.mAttribute_mType ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_transientList::current_mTransientTypeName (LOCATION_ARGS) const {
  const cCollectionElement_transientList * p = (const cCollectionElement_transientList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_transientList) ;
  return p->mObject.mAttribute_mTransientTypeName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_transientList::current_mTransientName (LOCATION_ARGS) const {
  const cCollectionElement_transientList * p = (const cCollectionElement_transientList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_transientList) ;
  return p->mObject.mAttribute_mTransientName ;
}

//---------------------------------------------------------------------------*

GALGAS_dependanceList cEnumerator_transientList::current_mDependencyList (LOCATION_ARGS) const {
  const cCollectionElement_transientList * p = (const cCollectionElement_transientList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_transientList) ;
  return p->mObject.mAttribute_mDependencyList ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                            @transientList type                            *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_transientList ("transientList",
                                      NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_transientList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_transientList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_transientList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_transientList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_transientList GALGAS_transientList::extractObject (const GALGAS_object & inObject,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) {
  GALGAS_transientList result ;
  const GALGAS_transientList * p = (const GALGAS_transientList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_transientList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("transientList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Class for element of '@classArrayList' list                *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_classArrayList : public cCollectionElement {
  public : GALGAS_classArrayList_2E_element mObject ;

//--- Constructor
  public : cCollectionElement_classArrayList (const GALGAS_lstring & in_mClassName,
                                              const GALGAS_lstring & in_mArrayName
                                              COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_classArrayList::cCollectionElement_classArrayList (const GALGAS_lstring & in_mClassName,
                                                                      const GALGAS_lstring & in_mArrayName
                                                                      COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mClassName, in_mArrayName) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_classArrayList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_classArrayList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_classArrayList (mObject.mAttribute_mClassName, mObject.mAttribute_mArrayName COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_classArrayList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mClassName" ":" ;
  mObject.mAttribute_mClassName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mArrayName" ":" ;
  mObject.mAttribute_mArrayName.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_classArrayList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_classArrayList * operand = (cCollectionElement_classArrayList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_classArrayList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------*

GALGAS_classArrayList::GALGAS_classArrayList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_classArrayList::GALGAS_classArrayList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_classArrayList GALGAS_classArrayList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_classArrayList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_classArrayList GALGAS_classArrayList::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                                        const GALGAS_lstring & inOperand1
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_classArrayList result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_classArrayList::makeAttributesFromObjects (attributes, inOperand0, inOperand1 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_classArrayList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                       const GALGAS_lstring & in_mClassName,
                                                       const GALGAS_lstring & in_mArrayName
                                                       COMMA_LOCATION_ARGS) {
  cCollectionElement_classArrayList * p = NULL ;
  macroMyNew (p, cCollectionElement_classArrayList (in_mClassName,
                                                    in_mArrayName COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_classArrayList::addAssign_operation (const GALGAS_lstring & inOperand0,
                                                 const GALGAS_lstring & inOperand1
                                                 COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_classArrayList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_classArrayList::modifier_prependValue (GALGAS_lstring inOperand0,
                                                   GALGAS_lstring inOperand1
                                                   COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_classArrayList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_classArrayList::modifier_popFirst (GALGAS_lstring & outOperand0,
                                               GALGAS_lstring & outOperand1,
                                               C_Compiler * inCompiler
                                               COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_classArrayList * p = (cCollectionElement_classArrayList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_classArrayList) ;
    outOperand0 = p->mObject.mAttribute_mClassName ;
    outOperand1 = p->mObject.mAttribute_mArrayName ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_classArrayList::modifier_popLast (GALGAS_lstring & outOperand0,
                                              GALGAS_lstring & outOperand1,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_classArrayList * p = (cCollectionElement_classArrayList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_classArrayList) ;
    macroUniqueSharedObject (p) ;
    outOperand0 = p->mObject.mAttribute_mClassName ;
    outOperand1 = p->mObject.mAttribute_mArrayName ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_classArrayList::method_first (GALGAS_lstring & outOperand0,
                                          GALGAS_lstring & outOperand1,
                                          C_Compiler * inCompiler
                                          COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_classArrayList * p = (cCollectionElement_classArrayList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_classArrayList) ;
    outOperand0 = p->mObject.mAttribute_mClassName ;
    outOperand1 = p->mObject.mAttribute_mArrayName ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_classArrayList::method_last (GALGAS_lstring & outOperand0,
                                         GALGAS_lstring & outOperand1,
                                         C_Compiler * inCompiler
                                         COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_classArrayList * p = (cCollectionElement_classArrayList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_classArrayList) ;
    outOperand0 = p->mObject.mAttribute_mClassName ;
    outOperand1 = p->mObject.mAttribute_mArrayName ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_classArrayList GALGAS_classArrayList::operator_concat (const GALGAS_classArrayList & inOperand
                                                              COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_classArrayList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_classArrayList GALGAS_classArrayList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) const {
  GALGAS_classArrayList result = GALGAS_classArrayList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_classArrayList GALGAS_classArrayList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) const {
  GALGAS_classArrayList result = GALGAS_classArrayList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_classArrayList::dotAssign_operation (const GALGAS_classArrayList inOperand
                                                 COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_classArrayList::reader_mClassNameAtIndex (const GALGAS_uint & inIndex,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_classArrayList * p = (cCollectionElement_classArrayList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_classArrayList) ;
    result = p->mObject.mAttribute_mClassName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_classArrayList::reader_mArrayNameAtIndex (const GALGAS_uint & inIndex,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_classArrayList * p = (cCollectionElement_classArrayList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_classArrayList) ;
    result = p->mObject.mAttribute_mArrayName ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_classArrayList::cEnumerator_classArrayList (const GALGAS_classArrayList & inEnumeratedObject,
                                                        const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_classArrayList_2E_element cEnumerator_classArrayList::current (LOCATION_ARGS) const {
  const cCollectionElement_classArrayList * p = (const cCollectionElement_classArrayList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_classArrayList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_classArrayList::current_mClassName (LOCATION_ARGS) const {
  const cCollectionElement_classArrayList * p = (const cCollectionElement_classArrayList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_classArrayList) ;
  return p->mObject.mAttribute_mClassName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_classArrayList::current_mArrayName (LOCATION_ARGS) const {
  const cCollectionElement_classArrayList * p = (const cCollectionElement_classArrayList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_classArrayList) ;
  return p->mObject.mAttribute_mArrayName ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                           @classArrayList type                            *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_classArrayList ("classArrayList",
                                       NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_classArrayList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_classArrayList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_classArrayList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_classArrayList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_classArrayList GALGAS_classArrayList::extractObject (const GALGAS_object & inObject,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) {
  GALGAS_classArrayList result ;
  const GALGAS_classArrayList * p = (const GALGAS_classArrayList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_classArrayList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("classArrayList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Class for element of '@classList' list                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_classList : public cCollectionElement {
  public : GALGAS_classList_2E_element mObject ;

//--- Constructor
  public : cCollectionElement_classList (const GALGAS_lstring & in_mClassName,
                                         const GALGAS_lstring & in_mSuperClassName,
                                         const GALGAS_attributeList & in_mAttributeList,
                                         const GALGAS_classArrayList & in_mArrayList,
                                         const GALGAS_transientList & in_mTransientList
                                         COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_classList::cCollectionElement_classList (const GALGAS_lstring & in_mClassName,
                                                            const GALGAS_lstring & in_mSuperClassName,
                                                            const GALGAS_attributeList & in_mAttributeList,
                                                            const GALGAS_classArrayList & in_mArrayList,
                                                            const GALGAS_transientList & in_mTransientList
                                                            COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mClassName, in_mSuperClassName, in_mAttributeList, in_mArrayList, in_mTransientList) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_classList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_classList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_classList (mObject.mAttribute_mClassName, mObject.mAttribute_mSuperClassName, mObject.mAttribute_mAttributeList, mObject.mAttribute_mArrayList, mObject.mAttribute_mTransientList COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_classList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mClassName" ":" ;
  mObject.mAttribute_mClassName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mSuperClassName" ":" ;
  mObject.mAttribute_mSuperClassName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mAttributeList" ":" ;
  mObject.mAttribute_mAttributeList.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mArrayList" ":" ;
  mObject.mAttribute_mArrayList.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mTransientList" ":" ;
  mObject.mAttribute_mTransientList.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_classList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_classList * operand = (cCollectionElement_classList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_classList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------*

GALGAS_classList::GALGAS_classList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_classList::GALGAS_classList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_classList GALGAS_classList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_classList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_classList GALGAS_classList::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                              const GALGAS_lstring & inOperand1,
                                                              const GALGAS_attributeList & inOperand2,
                                                              const GALGAS_classArrayList & inOperand3,
                                                              const GALGAS_transientList & inOperand4
                                                              COMMA_LOCATION_ARGS) {
  GALGAS_classList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_classList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2, inOperand3, inOperand4 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_classList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                  const GALGAS_lstring & in_mClassName,
                                                  const GALGAS_lstring & in_mSuperClassName,
                                                  const GALGAS_attributeList & in_mAttributeList,
                                                  const GALGAS_classArrayList & in_mArrayList,
                                                  const GALGAS_transientList & in_mTransientList
                                                  COMMA_LOCATION_ARGS) {
  cCollectionElement_classList * p = NULL ;
  macroMyNew (p, cCollectionElement_classList (in_mClassName,
                                               in_mSuperClassName,
                                               in_mAttributeList,
                                               in_mArrayList,
                                               in_mTransientList COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_classList::addAssign_operation (const GALGAS_lstring & inOperand0,
                                            const GALGAS_lstring & inOperand1,
                                            const GALGAS_attributeList & inOperand2,
                                            const GALGAS_classArrayList & inOperand3,
                                            const GALGAS_transientList & inOperand4
                                            COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_classList (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_classList::modifier_prependValue (GALGAS_lstring inOperand0,
                                              GALGAS_lstring inOperand1,
                                              GALGAS_attributeList inOperand2,
                                              GALGAS_classArrayList inOperand3,
                                              GALGAS_transientList inOperand4
                                              COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_classList (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_classList::modifier_popFirst (GALGAS_lstring & outOperand0,
                                          GALGAS_lstring & outOperand1,
                                          GALGAS_attributeList & outOperand2,
                                          GALGAS_classArrayList & outOperand3,
                                          GALGAS_transientList & outOperand4,
                                          C_Compiler * inCompiler
                                          COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_classList * p = (cCollectionElement_classList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_classList) ;
    outOperand0 = p->mObject.mAttribute_mClassName ;
    outOperand1 = p->mObject.mAttribute_mSuperClassName ;
    outOperand2 = p->mObject.mAttribute_mAttributeList ;
    outOperand3 = p->mObject.mAttribute_mArrayList ;
    outOperand4 = p->mObject.mAttribute_mTransientList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_classList::modifier_popLast (GALGAS_lstring & outOperand0,
                                         GALGAS_lstring & outOperand1,
                                         GALGAS_attributeList & outOperand2,
                                         GALGAS_classArrayList & outOperand3,
                                         GALGAS_transientList & outOperand4,
                                         C_Compiler * inCompiler
                                         COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_classList * p = (cCollectionElement_classList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_classList) ;
    macroUniqueSharedObject (p) ;
    outOperand0 = p->mObject.mAttribute_mClassName ;
    outOperand1 = p->mObject.mAttribute_mSuperClassName ;
    outOperand2 = p->mObject.mAttribute_mAttributeList ;
    outOperand3 = p->mObject.mAttribute_mArrayList ;
    outOperand4 = p->mObject.mAttribute_mTransientList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_classList::method_first (GALGAS_lstring & outOperand0,
                                     GALGAS_lstring & outOperand1,
                                     GALGAS_attributeList & outOperand2,
                                     GALGAS_classArrayList & outOperand3,
                                     GALGAS_transientList & outOperand4,
                                     C_Compiler * inCompiler
                                     COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_classList * p = (cCollectionElement_classList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_classList) ;
    outOperand0 = p->mObject.mAttribute_mClassName ;
    outOperand1 = p->mObject.mAttribute_mSuperClassName ;
    outOperand2 = p->mObject.mAttribute_mAttributeList ;
    outOperand3 = p->mObject.mAttribute_mArrayList ;
    outOperand4 = p->mObject.mAttribute_mTransientList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_classList::method_last (GALGAS_lstring & outOperand0,
                                    GALGAS_lstring & outOperand1,
                                    GALGAS_attributeList & outOperand2,
                                    GALGAS_classArrayList & outOperand3,
                                    GALGAS_transientList & outOperand4,
                                    C_Compiler * inCompiler
                                    COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_classList * p = (cCollectionElement_classList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_classList) ;
    outOperand0 = p->mObject.mAttribute_mClassName ;
    outOperand1 = p->mObject.mAttribute_mSuperClassName ;
    outOperand2 = p->mObject.mAttribute_mAttributeList ;
    outOperand3 = p->mObject.mAttribute_mArrayList ;
    outOperand4 = p->mObject.mAttribute_mTransientList ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_classList GALGAS_classList::operator_concat (const GALGAS_classList & inOperand
                                                    COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_classList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_classList GALGAS_classList::reader_subListWithRange (const GALGAS_range & inRange,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) const {
  GALGAS_classList result = GALGAS_classList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_classList GALGAS_classList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) const {
  GALGAS_classList result = GALGAS_classList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_classList::dotAssign_operation (const GALGAS_classList inOperand
                                            COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_classList::reader_mClassNameAtIndex (const GALGAS_uint & inIndex,
                                                           C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_classList * p = (cCollectionElement_classList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_classList) ;
    result = p->mObject.mAttribute_mClassName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_classList::reader_mSuperClassNameAtIndex (const GALGAS_uint & inIndex,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_classList * p = (cCollectionElement_classList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_classList) ;
    result = p->mObject.mAttribute_mSuperClassName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeList GALGAS_classList::reader_mAttributeListAtIndex (const GALGAS_uint & inIndex,
                                                                     C_Compiler * inCompiler
                                                                     COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_classList * p = (cCollectionElement_classList *) attributes.ptr () ;
  GALGAS_attributeList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_classList) ;
    result = p->mObject.mAttribute_mAttributeList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_classArrayList GALGAS_classList::reader_mArrayListAtIndex (const GALGAS_uint & inIndex,
                                                                  C_Compiler * inCompiler
                                                                  COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_classList * p = (cCollectionElement_classList *) attributes.ptr () ;
  GALGAS_classArrayList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_classList) ;
    result = p->mObject.mAttribute_mArrayList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_transientList GALGAS_classList::reader_mTransientListAtIndex (const GALGAS_uint & inIndex,
                                                                     C_Compiler * inCompiler
                                                                     COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_classList * p = (cCollectionElement_classList *) attributes.ptr () ;
  GALGAS_transientList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_classList) ;
    result = p->mObject.mAttribute_mTransientList ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_classList::cEnumerator_classList (const GALGAS_classList & inEnumeratedObject,
                                              const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_classList_2E_element cEnumerator_classList::current (LOCATION_ARGS) const {
  const cCollectionElement_classList * p = (const cCollectionElement_classList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_classList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_classList::current_mClassName (LOCATION_ARGS) const {
  const cCollectionElement_classList * p = (const cCollectionElement_classList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_classList) ;
  return p->mObject.mAttribute_mClassName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_classList::current_mSuperClassName (LOCATION_ARGS) const {
  const cCollectionElement_classList * p = (const cCollectionElement_classList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_classList) ;
  return p->mObject.mAttribute_mSuperClassName ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeList cEnumerator_classList::current_mAttributeList (LOCATION_ARGS) const {
  const cCollectionElement_classList * p = (const cCollectionElement_classList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_classList) ;
  return p->mObject.mAttribute_mAttributeList ;
}

//---------------------------------------------------------------------------*

GALGAS_classArrayList cEnumerator_classList::current_mArrayList (LOCATION_ARGS) const {
  const cCollectionElement_classList * p = (const cCollectionElement_classList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_classList) ;
  return p->mObject.mAttribute_mArrayList ;
}

//---------------------------------------------------------------------------*

GALGAS_transientList cEnumerator_classList::current_mTransientList (LOCATION_ARGS) const {
  const cCollectionElement_classList * p = (const cCollectionElement_classList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_classList) ;
  return p->mObject.mAttribute_mTransientList ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                              @classList type                              *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_classList ("classList",
                                  NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_classList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_classList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_classList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_classList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_classList GALGAS_classList::extractObject (const GALGAS_object & inObject,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) {
  GALGAS_classList result ;
  const GALGAS_classList * p = (const GALGAS_classList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_classList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("classList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Class for element of '@entityList' list                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_entityList : public cCollectionElement {
  public : GALGAS_entityList_2E_element mObject ;

//--- Constructor
  public : cCollectionElement_entityList (const GALGAS_lstring & in_mEntityName,
                                          const GALGAS_lstring & in_mSuperEntityName,
                                          const GALGAS_attributeList & in_mAttributeList,
                                          const GALGAS_transientList & in_mTransientList,
                                          const GALGAS_relationshipList & in_mRelationshipList,
                                          const GALGAS_lstringlist & in_mSignList
                                          COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_entityList::cCollectionElement_entityList (const GALGAS_lstring & in_mEntityName,
                                                              const GALGAS_lstring & in_mSuperEntityName,
                                                              const GALGAS_attributeList & in_mAttributeList,
                                                              const GALGAS_transientList & in_mTransientList,
                                                              const GALGAS_relationshipList & in_mRelationshipList,
                                                              const GALGAS_lstringlist & in_mSignList
                                                              COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mEntityName, in_mSuperEntityName, in_mAttributeList, in_mTransientList, in_mRelationshipList, in_mSignList) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_entityList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_entityList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_entityList (mObject.mAttribute_mEntityName, mObject.mAttribute_mSuperEntityName, mObject.mAttribute_mAttributeList, mObject.mAttribute_mTransientList, mObject.mAttribute_mRelationshipList, mObject.mAttribute_mSignList COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_entityList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mEntityName" ":" ;
  mObject.mAttribute_mEntityName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mSuperEntityName" ":" ;
  mObject.mAttribute_mSuperEntityName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mAttributeList" ":" ;
  mObject.mAttribute_mAttributeList.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mTransientList" ":" ;
  mObject.mAttribute_mTransientList.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mRelationshipList" ":" ;
  mObject.mAttribute_mRelationshipList.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mSignList" ":" ;
  mObject.mAttribute_mSignList.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_entityList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_entityList * operand = (cCollectionElement_entityList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_entityList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------*

GALGAS_entityList::GALGAS_entityList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_entityList::GALGAS_entityList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_entityList GALGAS_entityList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_entityList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_entityList GALGAS_entityList::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                                const GALGAS_lstring & inOperand1,
                                                                const GALGAS_attributeList & inOperand2,
                                                                const GALGAS_transientList & inOperand3,
                                                                const GALGAS_relationshipList & inOperand4,
                                                                const GALGAS_lstringlist & inOperand5
                                                                COMMA_LOCATION_ARGS) {
  GALGAS_entityList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_entityList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_entityList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                   const GALGAS_lstring & in_mEntityName,
                                                   const GALGAS_lstring & in_mSuperEntityName,
                                                   const GALGAS_attributeList & in_mAttributeList,
                                                   const GALGAS_transientList & in_mTransientList,
                                                   const GALGAS_relationshipList & in_mRelationshipList,
                                                   const GALGAS_lstringlist & in_mSignList
                                                   COMMA_LOCATION_ARGS) {
  cCollectionElement_entityList * p = NULL ;
  macroMyNew (p, cCollectionElement_entityList (in_mEntityName,
                                                in_mSuperEntityName,
                                                in_mAttributeList,
                                                in_mTransientList,
                                                in_mRelationshipList,
                                                in_mSignList COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_entityList::addAssign_operation (const GALGAS_lstring & inOperand0,
                                             const GALGAS_lstring & inOperand1,
                                             const GALGAS_attributeList & inOperand2,
                                             const GALGAS_transientList & inOperand3,
                                             const GALGAS_relationshipList & inOperand4,
                                             const GALGAS_lstringlist & inOperand5
                                             COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_entityList (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_entityList::modifier_prependValue (GALGAS_lstring inOperand0,
                                               GALGAS_lstring inOperand1,
                                               GALGAS_attributeList inOperand2,
                                               GALGAS_transientList inOperand3,
                                               GALGAS_relationshipList inOperand4,
                                               GALGAS_lstringlist inOperand5
                                               COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_entityList (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_entityList::modifier_popFirst (GALGAS_lstring & outOperand0,
                                           GALGAS_lstring & outOperand1,
                                           GALGAS_attributeList & outOperand2,
                                           GALGAS_transientList & outOperand3,
                                           GALGAS_relationshipList & outOperand4,
                                           GALGAS_lstringlist & outOperand5,
                                           C_Compiler * inCompiler
                                           COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_entityList * p = (cCollectionElement_entityList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_entityList) ;
    outOperand0 = p->mObject.mAttribute_mEntityName ;
    outOperand1 = p->mObject.mAttribute_mSuperEntityName ;
    outOperand2 = p->mObject.mAttribute_mAttributeList ;
    outOperand3 = p->mObject.mAttribute_mTransientList ;
    outOperand4 = p->mObject.mAttribute_mRelationshipList ;
    outOperand5 = p->mObject.mAttribute_mSignList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_entityList::modifier_popLast (GALGAS_lstring & outOperand0,
                                          GALGAS_lstring & outOperand1,
                                          GALGAS_attributeList & outOperand2,
                                          GALGAS_transientList & outOperand3,
                                          GALGAS_relationshipList & outOperand4,
                                          GALGAS_lstringlist & outOperand5,
                                          C_Compiler * inCompiler
                                          COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_entityList * p = (cCollectionElement_entityList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_entityList) ;
    macroUniqueSharedObject (p) ;
    outOperand0 = p->mObject.mAttribute_mEntityName ;
    outOperand1 = p->mObject.mAttribute_mSuperEntityName ;
    outOperand2 = p->mObject.mAttribute_mAttributeList ;
    outOperand3 = p->mObject.mAttribute_mTransientList ;
    outOperand4 = p->mObject.mAttribute_mRelationshipList ;
    outOperand5 = p->mObject.mAttribute_mSignList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_entityList::method_first (GALGAS_lstring & outOperand0,
                                      GALGAS_lstring & outOperand1,
                                      GALGAS_attributeList & outOperand2,
                                      GALGAS_transientList & outOperand3,
                                      GALGAS_relationshipList & outOperand4,
                                      GALGAS_lstringlist & outOperand5,
                                      C_Compiler * inCompiler
                                      COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_entityList * p = (cCollectionElement_entityList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_entityList) ;
    outOperand0 = p->mObject.mAttribute_mEntityName ;
    outOperand1 = p->mObject.mAttribute_mSuperEntityName ;
    outOperand2 = p->mObject.mAttribute_mAttributeList ;
    outOperand3 = p->mObject.mAttribute_mTransientList ;
    outOperand4 = p->mObject.mAttribute_mRelationshipList ;
    outOperand5 = p->mObject.mAttribute_mSignList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_entityList::method_last (GALGAS_lstring & outOperand0,
                                     GALGAS_lstring & outOperand1,
                                     GALGAS_attributeList & outOperand2,
                                     GALGAS_transientList & outOperand3,
                                     GALGAS_relationshipList & outOperand4,
                                     GALGAS_lstringlist & outOperand5,
                                     C_Compiler * inCompiler
                                     COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_entityList * p = (cCollectionElement_entityList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_entityList) ;
    outOperand0 = p->mObject.mAttribute_mEntityName ;
    outOperand1 = p->mObject.mAttribute_mSuperEntityName ;
    outOperand2 = p->mObject.mAttribute_mAttributeList ;
    outOperand3 = p->mObject.mAttribute_mTransientList ;
    outOperand4 = p->mObject.mAttribute_mRelationshipList ;
    outOperand5 = p->mObject.mAttribute_mSignList ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_entityList GALGAS_entityList::operator_concat (const GALGAS_entityList & inOperand
                                                      COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_entityList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_entityList GALGAS_entityList::reader_subListWithRange (const GALGAS_range & inRange,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) const {
  GALGAS_entityList result = GALGAS_entityList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_entityList GALGAS_entityList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) const {
  GALGAS_entityList result = GALGAS_entityList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_entityList::dotAssign_operation (const GALGAS_entityList inOperand
                                             COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_entityList::reader_mEntityNameAtIndex (const GALGAS_uint & inIndex,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_entityList * p = (cCollectionElement_entityList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_entityList) ;
    result = p->mObject.mAttribute_mEntityName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_entityList::reader_mSuperEntityNameAtIndex (const GALGAS_uint & inIndex,
                                                                  C_Compiler * inCompiler
                                                                  COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_entityList * p = (cCollectionElement_entityList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_entityList) ;
    result = p->mObject.mAttribute_mSuperEntityName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeList GALGAS_entityList::reader_mAttributeListAtIndex (const GALGAS_uint & inIndex,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_entityList * p = (cCollectionElement_entityList *) attributes.ptr () ;
  GALGAS_attributeList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_entityList) ;
    result = p->mObject.mAttribute_mAttributeList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_transientList GALGAS_entityList::reader_mTransientListAtIndex (const GALGAS_uint & inIndex,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_entityList * p = (cCollectionElement_entityList *) attributes.ptr () ;
  GALGAS_transientList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_entityList) ;
    result = p->mObject.mAttribute_mTransientList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_relationshipList GALGAS_entityList::reader_mRelationshipListAtIndex (const GALGAS_uint & inIndex,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_entityList * p = (cCollectionElement_entityList *) attributes.ptr () ;
  GALGAS_relationshipList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_entityList) ;
    result = p->mObject.mAttribute_mRelationshipList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstringlist GALGAS_entityList::reader_mSignListAtIndex (const GALGAS_uint & inIndex,
                                                               C_Compiler * inCompiler
                                                               COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_entityList * p = (cCollectionElement_entityList *) attributes.ptr () ;
  GALGAS_lstringlist result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_entityList) ;
    result = p->mObject.mAttribute_mSignList ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_entityList::cEnumerator_entityList (const GALGAS_entityList & inEnumeratedObject,
                                                const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_entityList_2E_element cEnumerator_entityList::current (LOCATION_ARGS) const {
  const cCollectionElement_entityList * p = (const cCollectionElement_entityList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_entityList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_entityList::current_mEntityName (LOCATION_ARGS) const {
  const cCollectionElement_entityList * p = (const cCollectionElement_entityList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_entityList) ;
  return p->mObject.mAttribute_mEntityName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_entityList::current_mSuperEntityName (LOCATION_ARGS) const {
  const cCollectionElement_entityList * p = (const cCollectionElement_entityList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_entityList) ;
  return p->mObject.mAttribute_mSuperEntityName ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeList cEnumerator_entityList::current_mAttributeList (LOCATION_ARGS) const {
  const cCollectionElement_entityList * p = (const cCollectionElement_entityList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_entityList) ;
  return p->mObject.mAttribute_mAttributeList ;
}

//---------------------------------------------------------------------------*

GALGAS_transientList cEnumerator_entityList::current_mTransientList (LOCATION_ARGS) const {
  const cCollectionElement_entityList * p = (const cCollectionElement_entityList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_entityList) ;
  return p->mObject.mAttribute_mTransientList ;
}

//---------------------------------------------------------------------------*

GALGAS_relationshipList cEnumerator_entityList::current_mRelationshipList (LOCATION_ARGS) const {
  const cCollectionElement_entityList * p = (const cCollectionElement_entityList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_entityList) ;
  return p->mObject.mAttribute_mRelationshipList ;
}

//---------------------------------------------------------------------------*

GALGAS_lstringlist cEnumerator_entityList::current_mSignList (LOCATION_ARGS) const {
  const cCollectionElement_entityList * p = (const cCollectionElement_entityList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_entityList) ;
  return p->mObject.mAttribute_mSignList ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                             @entityList type                              *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_entityList ("entityList",
                                   NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_entityList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_entityList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_entityList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_entityList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_entityList GALGAS_entityList::extractObject (const GALGAS_object & inObject,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) {
  GALGAS_entityList result ;
  const GALGAS_entityList * p = (const GALGAS_entityList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_entityList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("entityList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Class for element of '@outletBindingOptionList' list            *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_outletBindingOptionList : public cCollectionElement {
  public : GALGAS_outletBindingOptionList_2E_element mObject ;

//--- Constructor
  public : cCollectionElement_outletBindingOptionList (const GALGAS_lstring & in_mOptionName,
                                                       const GALGAS_abstractDefaultValue & in_mDefaultValue
                                                       COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_outletBindingOptionList::cCollectionElement_outletBindingOptionList (const GALGAS_lstring & in_mOptionName,
                                                                                        const GALGAS_abstractDefaultValue & in_mDefaultValue
                                                                                        COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mOptionName, in_mDefaultValue) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_outletBindingOptionList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_outletBindingOptionList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_outletBindingOptionList (mObject.mAttribute_mOptionName, mObject.mAttribute_mDefaultValue COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_outletBindingOptionList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mOptionName" ":" ;
  mObject.mAttribute_mOptionName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mDefaultValue" ":" ;
  mObject.mAttribute_mDefaultValue.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_outletBindingOptionList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_outletBindingOptionList * operand = (cCollectionElement_outletBindingOptionList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_outletBindingOptionList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingOptionList::GALGAS_outletBindingOptionList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingOptionList::GALGAS_outletBindingOptionList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingOptionList GALGAS_outletBindingOptionList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_outletBindingOptionList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingOptionList GALGAS_outletBindingOptionList::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                                                          const GALGAS_abstractDefaultValue & inOperand1
                                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_outletBindingOptionList result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_outletBindingOptionList::makeAttributesFromObjects (attributes, inOperand0, inOperand1 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_outletBindingOptionList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                                const GALGAS_lstring & in_mOptionName,
                                                                const GALGAS_abstractDefaultValue & in_mDefaultValue
                                                                COMMA_LOCATION_ARGS) {
  cCollectionElement_outletBindingOptionList * p = NULL ;
  macroMyNew (p, cCollectionElement_outletBindingOptionList (in_mOptionName,
                                                             in_mDefaultValue COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_outletBindingOptionList::addAssign_operation (const GALGAS_lstring & inOperand0,
                                                          const GALGAS_abstractDefaultValue & inOperand1
                                                          COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_outletBindingOptionList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletBindingOptionList::modifier_prependValue (GALGAS_lstring inOperand0,
                                                            GALGAS_abstractDefaultValue inOperand1
                                                            COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_outletBindingOptionList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletBindingOptionList::modifier_popFirst (GALGAS_lstring & outOperand0,
                                                        GALGAS_abstractDefaultValue & outOperand1,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletBindingOptionList * p = (cCollectionElement_outletBindingOptionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletBindingOptionList) ;
    outOperand0 = p->mObject.mAttribute_mOptionName ;
    outOperand1 = p->mObject.mAttribute_mDefaultValue ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletBindingOptionList::modifier_popLast (GALGAS_lstring & outOperand0,
                                                       GALGAS_abstractDefaultValue & outOperand1,
                                                       C_Compiler * inCompiler
                                                       COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletBindingOptionList * p = (cCollectionElement_outletBindingOptionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletBindingOptionList) ;
    macroUniqueSharedObject (p) ;
    outOperand0 = p->mObject.mAttribute_mOptionName ;
    outOperand1 = p->mObject.mAttribute_mDefaultValue ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletBindingOptionList::method_first (GALGAS_lstring & outOperand0,
                                                   GALGAS_abstractDefaultValue & outOperand1,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletBindingOptionList * p = (cCollectionElement_outletBindingOptionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletBindingOptionList) ;
    outOperand0 = p->mObject.mAttribute_mOptionName ;
    outOperand1 = p->mObject.mAttribute_mDefaultValue ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletBindingOptionList::method_last (GALGAS_lstring & outOperand0,
                                                  GALGAS_abstractDefaultValue & outOperand1,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletBindingOptionList * p = (cCollectionElement_outletBindingOptionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletBindingOptionList) ;
    outOperand0 = p->mObject.mAttribute_mOptionName ;
    outOperand1 = p->mObject.mAttribute_mDefaultValue ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingOptionList GALGAS_outletBindingOptionList::operator_concat (const GALGAS_outletBindingOptionList & inOperand
                                                                                COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_outletBindingOptionList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingOptionList GALGAS_outletBindingOptionList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                                        C_Compiler * inCompiler
                                                                                        COMMA_LOCATION_ARGS) const {
  GALGAS_outletBindingOptionList result = GALGAS_outletBindingOptionList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingOptionList GALGAS_outletBindingOptionList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                        C_Compiler * inCompiler
                                                                                        COMMA_LOCATION_ARGS) const {
  GALGAS_outletBindingOptionList result = GALGAS_outletBindingOptionList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_outletBindingOptionList::dotAssign_operation (const GALGAS_outletBindingOptionList inOperand
                                                          COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_outletBindingOptionList::reader_mOptionNameAtIndex (const GALGAS_uint & inIndex,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_outletBindingOptionList * p = (cCollectionElement_outletBindingOptionList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_outletBindingOptionList) ;
    result = p->mObject.mAttribute_mOptionName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_abstractDefaultValue GALGAS_outletBindingOptionList::reader_mDefaultValueAtIndex (const GALGAS_uint & inIndex,
                                                                                         C_Compiler * inCompiler
                                                                                         COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_outletBindingOptionList * p = (cCollectionElement_outletBindingOptionList *) attributes.ptr () ;
  GALGAS_abstractDefaultValue result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_outletBindingOptionList) ;
    result = p->mObject.mAttribute_mDefaultValue ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_outletBindingOptionList::cEnumerator_outletBindingOptionList (const GALGAS_outletBindingOptionList & inEnumeratedObject,
                                                                          const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingOptionList_2E_element cEnumerator_outletBindingOptionList::current (LOCATION_ARGS) const {
  const cCollectionElement_outletBindingOptionList * p = (const cCollectionElement_outletBindingOptionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_outletBindingOptionList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_outletBindingOptionList::current_mOptionName (LOCATION_ARGS) const {
  const cCollectionElement_outletBindingOptionList * p = (const cCollectionElement_outletBindingOptionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_outletBindingOptionList) ;
  return p->mObject.mAttribute_mOptionName ;
}

//---------------------------------------------------------------------------*

GALGAS_abstractDefaultValue cEnumerator_outletBindingOptionList::current_mDefaultValue (LOCATION_ARGS) const {
  const cCollectionElement_outletBindingOptionList * p = (const cCollectionElement_outletBindingOptionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_outletBindingOptionList) ;
  return p->mObject.mAttribute_mDefaultValue ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                       @outletBindingOptionList type                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_outletBindingOptionList ("outletBindingOptionList",
                                                NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_outletBindingOptionList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_outletBindingOptionList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_outletBindingOptionList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_outletBindingOptionList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingOptionList GALGAS_outletBindingOptionList::extractObject (const GALGAS_object & inObject,
                                                                              C_Compiler * inCompiler
                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_outletBindingOptionList result ;
  const GALGAS_outletBindingOptionList * p = (const GALGAS_outletBindingOptionList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_outletBindingOptionList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("outletBindingOptionList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Class for element of '@multiValuedBindingList' list            *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_multiValuedBindingList : public cCollectionElement {
  public : GALGAS_multiValuedBindingList_2E_element mObject ;

//--- Constructor
  public : cCollectionElement_multiValuedBindingList (const GALGAS_bool & in_mNegate,
                                                      const GALGAS_multiValuedBindingBoundModel & in_mBoundModel,
                                                      const GALGAS_outletBindingOptionList & in_mOutletBindingOptionList
                                                      COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_multiValuedBindingList::cCollectionElement_multiValuedBindingList (const GALGAS_bool & in_mNegate,
                                                                                      const GALGAS_multiValuedBindingBoundModel & in_mBoundModel,
                                                                                      const GALGAS_outletBindingOptionList & in_mOutletBindingOptionList
                                                                                      COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mNegate, in_mBoundModel, in_mOutletBindingOptionList) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_multiValuedBindingList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_multiValuedBindingList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_multiValuedBindingList (mObject.mAttribute_mNegate, mObject.mAttribute_mBoundModel, mObject.mAttribute_mOutletBindingOptionList COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_multiValuedBindingList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mNegate" ":" ;
  mObject.mAttribute_mNegate.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mBoundModel" ":" ;
  mObject.mAttribute_mBoundModel.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mOutletBindingOptionList" ":" ;
  mObject.mAttribute_mOutletBindingOptionList.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_multiValuedBindingList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_multiValuedBindingList * operand = (cCollectionElement_multiValuedBindingList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_multiValuedBindingList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingList::GALGAS_multiValuedBindingList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingList::GALGAS_multiValuedBindingList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingList GALGAS_multiValuedBindingList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_multiValuedBindingList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingList GALGAS_multiValuedBindingList::constructor_listWithValue (const GALGAS_bool & inOperand0,
                                                                                        const GALGAS_multiValuedBindingBoundModel & inOperand1,
                                                                                        const GALGAS_outletBindingOptionList & inOperand2
                                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_multiValuedBindingList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_multiValuedBindingList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_multiValuedBindingList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                               const GALGAS_bool & in_mNegate,
                                                               const GALGAS_multiValuedBindingBoundModel & in_mBoundModel,
                                                               const GALGAS_outletBindingOptionList & in_mOutletBindingOptionList
                                                               COMMA_LOCATION_ARGS) {
  cCollectionElement_multiValuedBindingList * p = NULL ;
  macroMyNew (p, cCollectionElement_multiValuedBindingList (in_mNegate,
                                                            in_mBoundModel,
                                                            in_mOutletBindingOptionList COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_multiValuedBindingList::addAssign_operation (const GALGAS_bool & inOperand0,
                                                         const GALGAS_multiValuedBindingBoundModel & inOperand1,
                                                         const GALGAS_outletBindingOptionList & inOperand2
                                                         COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_multiValuedBindingList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_multiValuedBindingList::modifier_prependValue (GALGAS_bool inOperand0,
                                                           GALGAS_multiValuedBindingBoundModel inOperand1,
                                                           GALGAS_outletBindingOptionList inOperand2
                                                           COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_multiValuedBindingList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_multiValuedBindingList::modifier_popFirst (GALGAS_bool & outOperand0,
                                                       GALGAS_multiValuedBindingBoundModel & outOperand1,
                                                       GALGAS_outletBindingOptionList & outOperand2,
                                                       C_Compiler * inCompiler
                                                       COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_multiValuedBindingList * p = (cCollectionElement_multiValuedBindingList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_multiValuedBindingList) ;
    outOperand0 = p->mObject.mAttribute_mNegate ;
    outOperand1 = p->mObject.mAttribute_mBoundModel ;
    outOperand2 = p->mObject.mAttribute_mOutletBindingOptionList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_multiValuedBindingList::modifier_popLast (GALGAS_bool & outOperand0,
                                                      GALGAS_multiValuedBindingBoundModel & outOperand1,
                                                      GALGAS_outletBindingOptionList & outOperand2,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_multiValuedBindingList * p = (cCollectionElement_multiValuedBindingList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_multiValuedBindingList) ;
    macroUniqueSharedObject (p) ;
    outOperand0 = p->mObject.mAttribute_mNegate ;
    outOperand1 = p->mObject.mAttribute_mBoundModel ;
    outOperand2 = p->mObject.mAttribute_mOutletBindingOptionList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_multiValuedBindingList::method_first (GALGAS_bool & outOperand0,
                                                  GALGAS_multiValuedBindingBoundModel & outOperand1,
                                                  GALGAS_outletBindingOptionList & outOperand2,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_multiValuedBindingList * p = (cCollectionElement_multiValuedBindingList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_multiValuedBindingList) ;
    outOperand0 = p->mObject.mAttribute_mNegate ;
    outOperand1 = p->mObject.mAttribute_mBoundModel ;
    outOperand2 = p->mObject.mAttribute_mOutletBindingOptionList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_multiValuedBindingList::method_last (GALGAS_bool & outOperand0,
                                                 GALGAS_multiValuedBindingBoundModel & outOperand1,
                                                 GALGAS_outletBindingOptionList & outOperand2,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_multiValuedBindingList * p = (cCollectionElement_multiValuedBindingList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_multiValuedBindingList) ;
    outOperand0 = p->mObject.mAttribute_mNegate ;
    outOperand1 = p->mObject.mAttribute_mBoundModel ;
    outOperand2 = p->mObject.mAttribute_mOutletBindingOptionList ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingList GALGAS_multiValuedBindingList::operator_concat (const GALGAS_multiValuedBindingList & inOperand
                                                                              COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_multiValuedBindingList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingList GALGAS_multiValuedBindingList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) const {
  GALGAS_multiValuedBindingList result = GALGAS_multiValuedBindingList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingList GALGAS_multiValuedBindingList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) const {
  GALGAS_multiValuedBindingList result = GALGAS_multiValuedBindingList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_multiValuedBindingList::dotAssign_operation (const GALGAS_multiValuedBindingList inOperand
                                                         COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_multiValuedBindingList::reader_mNegateAtIndex (const GALGAS_uint & inIndex,
                                                                  C_Compiler * inCompiler
                                                                  COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_multiValuedBindingList * p = (cCollectionElement_multiValuedBindingList *) attributes.ptr () ;
  GALGAS_bool result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_multiValuedBindingList) ;
    result = p->mObject.mAttribute_mNegate ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundModel GALGAS_multiValuedBindingList::reader_mBoundModelAtIndex (const GALGAS_uint & inIndex,
                                                                                              C_Compiler * inCompiler
                                                                                              COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_multiValuedBindingList * p = (cCollectionElement_multiValuedBindingList *) attributes.ptr () ;
  GALGAS_multiValuedBindingBoundModel result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_multiValuedBindingList) ;
    result = p->mObject.mAttribute_mBoundModel ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingOptionList GALGAS_multiValuedBindingList::reader_mOutletBindingOptionListAtIndex (const GALGAS_uint & inIndex,
                                                                                                      C_Compiler * inCompiler
                                                                                                      COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_multiValuedBindingList * p = (cCollectionElement_multiValuedBindingList *) attributes.ptr () ;
  GALGAS_outletBindingOptionList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_multiValuedBindingList) ;
    result = p->mObject.mAttribute_mOutletBindingOptionList ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_multiValuedBindingList::cEnumerator_multiValuedBindingList (const GALGAS_multiValuedBindingList & inEnumeratedObject,
                                                                        const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingList_2E_element cEnumerator_multiValuedBindingList::current (LOCATION_ARGS) const {
  const cCollectionElement_multiValuedBindingList * p = (const cCollectionElement_multiValuedBindingList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_multiValuedBindingList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------*

GALGAS_bool cEnumerator_multiValuedBindingList::current_mNegate (LOCATION_ARGS) const {
  const cCollectionElement_multiValuedBindingList * p = (const cCollectionElement_multiValuedBindingList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_multiValuedBindingList) ;
  return p->mObject.mAttribute_mNegate ;
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundModel cEnumerator_multiValuedBindingList::current_mBoundModel (LOCATION_ARGS) const {
  const cCollectionElement_multiValuedBindingList * p = (const cCollectionElement_multiValuedBindingList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_multiValuedBindingList) ;
  return p->mObject.mAttribute_mBoundModel ;
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingOptionList cEnumerator_multiValuedBindingList::current_mOutletBindingOptionList (LOCATION_ARGS) const {
  const cCollectionElement_multiValuedBindingList * p = (const cCollectionElement_multiValuedBindingList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_multiValuedBindingList) ;
  return p->mObject.mAttribute_mOutletBindingOptionList ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                       @multiValuedBindingList type                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_multiValuedBindingList ("multiValuedBindingList",
                                               NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_multiValuedBindingList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_multiValuedBindingList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_multiValuedBindingList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_multiValuedBindingList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingList GALGAS_multiValuedBindingList::extractObject (const GALGAS_object & inObject,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_multiValuedBindingList result ;
  const GALGAS_multiValuedBindingList * p = (const GALGAS_multiValuedBindingList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_multiValuedBindingList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("multiValuedBindingList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Class for element of '@tableValueColumnBinding' list            *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_tableValueColumnBinding : public cCollectionElement {
  public : GALGAS_tableValueColumnBinding_2E_element mObject ;

//--- Constructor
  public : cCollectionElement_tableValueColumnBinding (const GALGAS_lstring & in_mColumnName,
                                                       const GALGAS_lstring & in_mCellTypeName,
                                                       const GALGAS_lstring & in_mBoundPropertyName
                                                       COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_tableValueColumnBinding::cCollectionElement_tableValueColumnBinding (const GALGAS_lstring & in_mColumnName,
                                                                                        const GALGAS_lstring & in_mCellTypeName,
                                                                                        const GALGAS_lstring & in_mBoundPropertyName
                                                                                        COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mColumnName, in_mCellTypeName, in_mBoundPropertyName) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_tableValueColumnBinding::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_tableValueColumnBinding::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_tableValueColumnBinding (mObject.mAttribute_mColumnName, mObject.mAttribute_mCellTypeName, mObject.mAttribute_mBoundPropertyName COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_tableValueColumnBinding::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mColumnName" ":" ;
  mObject.mAttribute_mColumnName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mCellTypeName" ":" ;
  mObject.mAttribute_mCellTypeName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mBoundPropertyName" ":" ;
  mObject.mAttribute_mBoundPropertyName.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_tableValueColumnBinding::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_tableValueColumnBinding * operand = (cCollectionElement_tableValueColumnBinding *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_tableValueColumnBinding) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------*

GALGAS_tableValueColumnBinding::GALGAS_tableValueColumnBinding (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_tableValueColumnBinding::GALGAS_tableValueColumnBinding (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_tableValueColumnBinding GALGAS_tableValueColumnBinding::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_tableValueColumnBinding result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_tableValueColumnBinding GALGAS_tableValueColumnBinding::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                                                          const GALGAS_lstring & inOperand1,
                                                                                          const GALGAS_lstring & inOperand2
                                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_tableValueColumnBinding result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_tableValueColumnBinding::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_tableValueColumnBinding::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                                const GALGAS_lstring & in_mColumnName,
                                                                const GALGAS_lstring & in_mCellTypeName,
                                                                const GALGAS_lstring & in_mBoundPropertyName
                                                                COMMA_LOCATION_ARGS) {
  cCollectionElement_tableValueColumnBinding * p = NULL ;
  macroMyNew (p, cCollectionElement_tableValueColumnBinding (in_mColumnName,
                                                             in_mCellTypeName,
                                                             in_mBoundPropertyName COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_tableValueColumnBinding::addAssign_operation (const GALGAS_lstring & inOperand0,
                                                          const GALGAS_lstring & inOperand1,
                                                          const GALGAS_lstring & inOperand2
                                                          COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_tableValueColumnBinding (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_tableValueColumnBinding::modifier_prependValue (GALGAS_lstring inOperand0,
                                                            GALGAS_lstring inOperand1,
                                                            GALGAS_lstring inOperand2
                                                            COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_tableValueColumnBinding (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_tableValueColumnBinding::modifier_popFirst (GALGAS_lstring & outOperand0,
                                                        GALGAS_lstring & outOperand1,
                                                        GALGAS_lstring & outOperand2,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_tableValueColumnBinding * p = (cCollectionElement_tableValueColumnBinding *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_tableValueColumnBinding) ;
    outOperand0 = p->mObject.mAttribute_mColumnName ;
    outOperand1 = p->mObject.mAttribute_mCellTypeName ;
    outOperand2 = p->mObject.mAttribute_mBoundPropertyName ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_tableValueColumnBinding::modifier_popLast (GALGAS_lstring & outOperand0,
                                                       GALGAS_lstring & outOperand1,
                                                       GALGAS_lstring & outOperand2,
                                                       C_Compiler * inCompiler
                                                       COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_tableValueColumnBinding * p = (cCollectionElement_tableValueColumnBinding *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_tableValueColumnBinding) ;
    macroUniqueSharedObject (p) ;
    outOperand0 = p->mObject.mAttribute_mColumnName ;
    outOperand1 = p->mObject.mAttribute_mCellTypeName ;
    outOperand2 = p->mObject.mAttribute_mBoundPropertyName ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_tableValueColumnBinding::method_first (GALGAS_lstring & outOperand0,
                                                   GALGAS_lstring & outOperand1,
                                                   GALGAS_lstring & outOperand2,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_tableValueColumnBinding * p = (cCollectionElement_tableValueColumnBinding *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_tableValueColumnBinding) ;
    outOperand0 = p->mObject.mAttribute_mColumnName ;
    outOperand1 = p->mObject.mAttribute_mCellTypeName ;
    outOperand2 = p->mObject.mAttribute_mBoundPropertyName ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_tableValueColumnBinding::method_last (GALGAS_lstring & outOperand0,
                                                  GALGAS_lstring & outOperand1,
                                                  GALGAS_lstring & outOperand2,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_tableValueColumnBinding * p = (cCollectionElement_tableValueColumnBinding *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_tableValueColumnBinding) ;
    outOperand0 = p->mObject.mAttribute_mColumnName ;
    outOperand1 = p->mObject.mAttribute_mCellTypeName ;
    outOperand2 = p->mObject.mAttribute_mBoundPropertyName ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_tableValueColumnBinding GALGAS_tableValueColumnBinding::operator_concat (const GALGAS_tableValueColumnBinding & inOperand
                                                                                COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_tableValueColumnBinding result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_tableValueColumnBinding GALGAS_tableValueColumnBinding::reader_subListWithRange (const GALGAS_range & inRange,
                                                                                        C_Compiler * inCompiler
                                                                                        COMMA_LOCATION_ARGS) const {
  GALGAS_tableValueColumnBinding result = GALGAS_tableValueColumnBinding::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_tableValueColumnBinding GALGAS_tableValueColumnBinding::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                        C_Compiler * inCompiler
                                                                                        COMMA_LOCATION_ARGS) const {
  GALGAS_tableValueColumnBinding result = GALGAS_tableValueColumnBinding::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_tableValueColumnBinding::dotAssign_operation (const GALGAS_tableValueColumnBinding inOperand
                                                          COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_tableValueColumnBinding::reader_mColumnNameAtIndex (const GALGAS_uint & inIndex,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_tableValueColumnBinding * p = (cCollectionElement_tableValueColumnBinding *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_tableValueColumnBinding) ;
    result = p->mObject.mAttribute_mColumnName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_tableValueColumnBinding::reader_mCellTypeNameAtIndex (const GALGAS_uint & inIndex,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_tableValueColumnBinding * p = (cCollectionElement_tableValueColumnBinding *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_tableValueColumnBinding) ;
    result = p->mObject.mAttribute_mCellTypeName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_tableValueColumnBinding::reader_mBoundPropertyNameAtIndex (const GALGAS_uint & inIndex,
                                                                                 C_Compiler * inCompiler
                                                                                 COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_tableValueColumnBinding * p = (cCollectionElement_tableValueColumnBinding *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_tableValueColumnBinding) ;
    result = p->mObject.mAttribute_mBoundPropertyName ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_tableValueColumnBinding::cEnumerator_tableValueColumnBinding (const GALGAS_tableValueColumnBinding & inEnumeratedObject,
                                                                          const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_tableValueColumnBinding_2E_element cEnumerator_tableValueColumnBinding::current (LOCATION_ARGS) const {
  const cCollectionElement_tableValueColumnBinding * p = (const cCollectionElement_tableValueColumnBinding *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_tableValueColumnBinding) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_tableValueColumnBinding::current_mColumnName (LOCATION_ARGS) const {
  const cCollectionElement_tableValueColumnBinding * p = (const cCollectionElement_tableValueColumnBinding *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_tableValueColumnBinding) ;
  return p->mObject.mAttribute_mColumnName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_tableValueColumnBinding::current_mCellTypeName (LOCATION_ARGS) const {
  const cCollectionElement_tableValueColumnBinding * p = (const cCollectionElement_tableValueColumnBinding *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_tableValueColumnBinding) ;
  return p->mObject.mAttribute_mCellTypeName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_tableValueColumnBinding::current_mBoundPropertyName (LOCATION_ARGS) const {
  const cCollectionElement_tableValueColumnBinding * p = (const cCollectionElement_tableValueColumnBinding *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_tableValueColumnBinding) ;
  return p->mObject.mAttribute_mBoundPropertyName ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                       @tableValueColumnBinding type                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_tableValueColumnBinding ("tableValueColumnBinding",
                                                NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_tableValueColumnBinding::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_tableValueColumnBinding ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_tableValueColumnBinding::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_tableValueColumnBinding (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_tableValueColumnBinding GALGAS_tableValueColumnBinding::extractObject (const GALGAS_object & inObject,
                                                                              C_Compiler * inCompiler
                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_tableValueColumnBinding result ;
  const GALGAS_tableValueColumnBinding * p = (const GALGAS_tableValueColumnBinding *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_tableValueColumnBinding *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("tableValueColumnBinding", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Class for element of '@bindingList' list                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_bindingList : public cCollectionElement {
  public : GALGAS_bindingList_2E_element mObject ;

//--- Constructor
  public : cCollectionElement_bindingList (const GALGAS_abstractBinding & in_mBinding
                                           COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_bindingList::cCollectionElement_bindingList (const GALGAS_abstractBinding & in_mBinding
                                                                COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mBinding) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_bindingList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_bindingList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_bindingList (mObject.mAttribute_mBinding COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_bindingList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mBinding" ":" ;
  mObject.mAttribute_mBinding.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_bindingList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_bindingList * operand = (cCollectionElement_bindingList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_bindingList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------*

GALGAS_bindingList::GALGAS_bindingList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_bindingList::GALGAS_bindingList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_bindingList GALGAS_bindingList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_bindingList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bindingList GALGAS_bindingList::constructor_listWithValue (const GALGAS_abstractBinding & inOperand0
                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_bindingList result ;
  if (inOperand0.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_bindingList::makeAttributesFromObjects (attributes, inOperand0 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_bindingList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                    const GALGAS_abstractBinding & in_mBinding
                                                    COMMA_LOCATION_ARGS) {
  cCollectionElement_bindingList * p = NULL ;
  macroMyNew (p, cCollectionElement_bindingList (in_mBinding COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_bindingList::addAssign_operation (const GALGAS_abstractBinding & inOperand0
                                              COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_bindingList (inOperand0 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_bindingList::modifier_prependValue (GALGAS_abstractBinding inOperand0
                                                COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_bindingList (inOperand0 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_bindingList::modifier_popFirst (GALGAS_abstractBinding & outOperand0,
                                            C_Compiler * inCompiler
                                            COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_bindingList * p = (cCollectionElement_bindingList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_bindingList) ;
    outOperand0 = p->mObject.mAttribute_mBinding ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_bindingList::modifier_popLast (GALGAS_abstractBinding & outOperand0,
                                           C_Compiler * inCompiler
                                           COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_bindingList * p = (cCollectionElement_bindingList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_bindingList) ;
    macroUniqueSharedObject (p) ;
    outOperand0 = p->mObject.mAttribute_mBinding ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_bindingList::method_first (GALGAS_abstractBinding & outOperand0,
                                       C_Compiler * inCompiler
                                       COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_bindingList * p = (cCollectionElement_bindingList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_bindingList) ;
    outOperand0 = p->mObject.mAttribute_mBinding ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_bindingList::method_last (GALGAS_abstractBinding & outOperand0,
                                      C_Compiler * inCompiler
                                      COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_bindingList * p = (cCollectionElement_bindingList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_bindingList) ;
    outOperand0 = p->mObject.mAttribute_mBinding ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_bindingList GALGAS_bindingList::operator_concat (const GALGAS_bindingList & inOperand
                                                        COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_bindingList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bindingList GALGAS_bindingList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) const {
  GALGAS_bindingList result = GALGAS_bindingList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bindingList GALGAS_bindingList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) const {
  GALGAS_bindingList result = GALGAS_bindingList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_bindingList::dotAssign_operation (const GALGAS_bindingList inOperand
                                              COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_abstractBinding GALGAS_bindingList::reader_mBindingAtIndex (const GALGAS_uint & inIndex,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_bindingList * p = (cCollectionElement_bindingList *) attributes.ptr () ;
  GALGAS_abstractBinding result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_bindingList) ;
    result = p->mObject.mAttribute_mBinding ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_bindingList::cEnumerator_bindingList (const GALGAS_bindingList & inEnumeratedObject,
                                                  const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_bindingList_2E_element cEnumerator_bindingList::current (LOCATION_ARGS) const {
  const cCollectionElement_bindingList * p = (const cCollectionElement_bindingList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_bindingList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------*

GALGAS_abstractBinding cEnumerator_bindingList::current_mBinding (LOCATION_ARGS) const {
  const cCollectionElement_bindingList * p = (const cCollectionElement_bindingList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_bindingList) ;
  return p->mObject.mAttribute_mBinding ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                             @bindingList type                             *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_bindingList ("bindingList",
                                    NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_bindingList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_bindingList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_bindingList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_bindingList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bindingList GALGAS_bindingList::extractObject (const GALGAS_object & inObject,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) {
  GALGAS_bindingList result ;
  const GALGAS_bindingList * p = (const GALGAS_bindingList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_bindingList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("bindingList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Class for element of '@outletDeclarationList' list             *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_outletDeclarationList : public cCollectionElement {
  public : GALGAS_outletDeclarationList_2E_element mObject ;

//--- Constructor
  public : cCollectionElement_outletDeclarationList (const GALGAS_lstring & in_mOutletType,
                                                     const GALGAS_lstring & in_mOutletName,
                                                     const GALGAS_bindingList & in_mOutletBindingList
                                                     COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_outletDeclarationList::cCollectionElement_outletDeclarationList (const GALGAS_lstring & in_mOutletType,
                                                                                    const GALGAS_lstring & in_mOutletName,
                                                                                    const GALGAS_bindingList & in_mOutletBindingList
                                                                                    COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mOutletType, in_mOutletName, in_mOutletBindingList) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_outletDeclarationList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_outletDeclarationList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_outletDeclarationList (mObject.mAttribute_mOutletType, mObject.mAttribute_mOutletName, mObject.mAttribute_mOutletBindingList COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_outletDeclarationList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mOutletType" ":" ;
  mObject.mAttribute_mOutletType.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mOutletName" ":" ;
  mObject.mAttribute_mOutletName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mOutletBindingList" ":" ;
  mObject.mAttribute_mOutletBindingList.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_outletDeclarationList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_outletDeclarationList * operand = (cCollectionElement_outletDeclarationList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_outletDeclarationList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------*

GALGAS_outletDeclarationList::GALGAS_outletDeclarationList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_outletDeclarationList::GALGAS_outletDeclarationList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_outletDeclarationList GALGAS_outletDeclarationList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_outletDeclarationList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletDeclarationList GALGAS_outletDeclarationList::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                                                      const GALGAS_lstring & inOperand1,
                                                                                      const GALGAS_bindingList & inOperand2
                                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_outletDeclarationList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_outletDeclarationList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_outletDeclarationList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                              const GALGAS_lstring & in_mOutletType,
                                                              const GALGAS_lstring & in_mOutletName,
                                                              const GALGAS_bindingList & in_mOutletBindingList
                                                              COMMA_LOCATION_ARGS) {
  cCollectionElement_outletDeclarationList * p = NULL ;
  macroMyNew (p, cCollectionElement_outletDeclarationList (in_mOutletType,
                                                           in_mOutletName,
                                                           in_mOutletBindingList COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_outletDeclarationList::addAssign_operation (const GALGAS_lstring & inOperand0,
                                                        const GALGAS_lstring & inOperand1,
                                                        const GALGAS_bindingList & inOperand2
                                                        COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_outletDeclarationList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletDeclarationList::modifier_prependValue (GALGAS_lstring inOperand0,
                                                          GALGAS_lstring inOperand1,
                                                          GALGAS_bindingList inOperand2
                                                          COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_outletDeclarationList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletDeclarationList::modifier_popFirst (GALGAS_lstring & outOperand0,
                                                      GALGAS_lstring & outOperand1,
                                                      GALGAS_bindingList & outOperand2,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletDeclarationList * p = (cCollectionElement_outletDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletDeclarationList) ;
    outOperand0 = p->mObject.mAttribute_mOutletType ;
    outOperand1 = p->mObject.mAttribute_mOutletName ;
    outOperand2 = p->mObject.mAttribute_mOutletBindingList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletDeclarationList::modifier_popLast (GALGAS_lstring & outOperand0,
                                                     GALGAS_lstring & outOperand1,
                                                     GALGAS_bindingList & outOperand2,
                                                     C_Compiler * inCompiler
                                                     COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletDeclarationList * p = (cCollectionElement_outletDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletDeclarationList) ;
    macroUniqueSharedObject (p) ;
    outOperand0 = p->mObject.mAttribute_mOutletType ;
    outOperand1 = p->mObject.mAttribute_mOutletName ;
    outOperand2 = p->mObject.mAttribute_mOutletBindingList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletDeclarationList::method_first (GALGAS_lstring & outOperand0,
                                                 GALGAS_lstring & outOperand1,
                                                 GALGAS_bindingList & outOperand2,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletDeclarationList * p = (cCollectionElement_outletDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletDeclarationList) ;
    outOperand0 = p->mObject.mAttribute_mOutletType ;
    outOperand1 = p->mObject.mAttribute_mOutletName ;
    outOperand2 = p->mObject.mAttribute_mOutletBindingList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletDeclarationList::method_last (GALGAS_lstring & outOperand0,
                                                GALGAS_lstring & outOperand1,
                                                GALGAS_bindingList & outOperand2,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletDeclarationList * p = (cCollectionElement_outletDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletDeclarationList) ;
    outOperand0 = p->mObject.mAttribute_mOutletType ;
    outOperand1 = p->mObject.mAttribute_mOutletName ;
    outOperand2 = p->mObject.mAttribute_mOutletBindingList ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_outletDeclarationList GALGAS_outletDeclarationList::operator_concat (const GALGAS_outletDeclarationList & inOperand
                                                                            COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_outletDeclarationList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletDeclarationList GALGAS_outletDeclarationList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                                    C_Compiler * inCompiler
                                                                                    COMMA_LOCATION_ARGS) const {
  GALGAS_outletDeclarationList result = GALGAS_outletDeclarationList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletDeclarationList GALGAS_outletDeclarationList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                    C_Compiler * inCompiler
                                                                                    COMMA_LOCATION_ARGS) const {
  GALGAS_outletDeclarationList result = GALGAS_outletDeclarationList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_outletDeclarationList::dotAssign_operation (const GALGAS_outletDeclarationList inOperand
                                                        COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_outletDeclarationList::reader_mOutletTypeAtIndex (const GALGAS_uint & inIndex,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_outletDeclarationList * p = (cCollectionElement_outletDeclarationList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_outletDeclarationList) ;
    result = p->mObject.mAttribute_mOutletType ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_outletDeclarationList::reader_mOutletNameAtIndex (const GALGAS_uint & inIndex,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_outletDeclarationList * p = (cCollectionElement_outletDeclarationList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_outletDeclarationList) ;
    result = p->mObject.mAttribute_mOutletName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bindingList GALGAS_outletDeclarationList::reader_mOutletBindingListAtIndex (const GALGAS_uint & inIndex,
                                                                                   C_Compiler * inCompiler
                                                                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_outletDeclarationList * p = (cCollectionElement_outletDeclarationList *) attributes.ptr () ;
  GALGAS_bindingList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_outletDeclarationList) ;
    result = p->mObject.mAttribute_mOutletBindingList ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_outletDeclarationList::cEnumerator_outletDeclarationList (const GALGAS_outletDeclarationList & inEnumeratedObject,
                                                                      const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_outletDeclarationList_2E_element cEnumerator_outletDeclarationList::current (LOCATION_ARGS) const {
  const cCollectionElement_outletDeclarationList * p = (const cCollectionElement_outletDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_outletDeclarationList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_outletDeclarationList::current_mOutletType (LOCATION_ARGS) const {
  const cCollectionElement_outletDeclarationList * p = (const cCollectionElement_outletDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_outletDeclarationList) ;
  return p->mObject.mAttribute_mOutletType ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_outletDeclarationList::current_mOutletName (LOCATION_ARGS) const {
  const cCollectionElement_outletDeclarationList * p = (const cCollectionElement_outletDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_outletDeclarationList) ;
  return p->mObject.mAttribute_mOutletName ;
}

//---------------------------------------------------------------------------*

GALGAS_bindingList cEnumerator_outletDeclarationList::current_mOutletBindingList (LOCATION_ARGS) const {
  const cCollectionElement_outletDeclarationList * p = (const cCollectionElement_outletDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_outletDeclarationList) ;
  return p->mObject.mAttribute_mOutletBindingList ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                        @outletDeclarationList type                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_outletDeclarationList ("outletDeclarationList",
                                              NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_outletDeclarationList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_outletDeclarationList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_outletDeclarationList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_outletDeclarationList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletDeclarationList GALGAS_outletDeclarationList::extractObject (const GALGAS_object & inObject,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_outletDeclarationList result ;
  const GALGAS_outletDeclarationList * p = (const GALGAS_outletDeclarationList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_outletDeclarationList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("outletDeclarationList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Class for element of '@preferencesDeclarationList' list          *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_preferencesDeclarationList : public cCollectionElement {
  public : GALGAS_preferencesDeclarationList_2E_element mObject ;

//--- Constructor
  public : cCollectionElement_preferencesDeclarationList (const GALGAS_lstring & in_mPreferencesName,
                                                          const GALGAS_outletDeclarationList & in_mOutletDeclarationList,
                                                          const GALGAS_attributeList & in_mAttributeList,
                                                          const GALGAS_transientList & in_mTransientList,
                                                          const GALGAS_lstringlist & in_mActionDeclarationList,
                                                          const GALGAS_controllerList & in_mControllerList,
                                                          const GALGAS_classArrayList & in_mClassArrayList
                                                          COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_preferencesDeclarationList::cCollectionElement_preferencesDeclarationList (const GALGAS_lstring & in_mPreferencesName,
                                                                                              const GALGAS_outletDeclarationList & in_mOutletDeclarationList,
                                                                                              const GALGAS_attributeList & in_mAttributeList,
                                                                                              const GALGAS_transientList & in_mTransientList,
                                                                                              const GALGAS_lstringlist & in_mActionDeclarationList,
                                                                                              const GALGAS_controllerList & in_mControllerList,
                                                                                              const GALGAS_classArrayList & in_mClassArrayList
                                                                                              COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mPreferencesName, in_mOutletDeclarationList, in_mAttributeList, in_mTransientList, in_mActionDeclarationList, in_mControllerList, in_mClassArrayList) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_preferencesDeclarationList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_preferencesDeclarationList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_preferencesDeclarationList (mObject.mAttribute_mPreferencesName, mObject.mAttribute_mOutletDeclarationList, mObject.mAttribute_mAttributeList, mObject.mAttribute_mTransientList, mObject.mAttribute_mActionDeclarationList, mObject.mAttribute_mControllerList, mObject.mAttribute_mClassArrayList COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_preferencesDeclarationList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mPreferencesName" ":" ;
  mObject.mAttribute_mPreferencesName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mOutletDeclarationList" ":" ;
  mObject.mAttribute_mOutletDeclarationList.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mAttributeList" ":" ;
  mObject.mAttribute_mAttributeList.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mTransientList" ":" ;
  mObject.mAttribute_mTransientList.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mActionDeclarationList" ":" ;
  mObject.mAttribute_mActionDeclarationList.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mControllerList" ":" ;
  mObject.mAttribute_mControllerList.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mClassArrayList" ":" ;
  mObject.mAttribute_mClassArrayList.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_preferencesDeclarationList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_preferencesDeclarationList * operand = (cCollectionElement_preferencesDeclarationList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_preferencesDeclarationList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------*

GALGAS_preferencesDeclarationList::GALGAS_preferencesDeclarationList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_preferencesDeclarationList::GALGAS_preferencesDeclarationList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_preferencesDeclarationList GALGAS_preferencesDeclarationList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_preferencesDeclarationList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_preferencesDeclarationList GALGAS_preferencesDeclarationList::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                                                                const GALGAS_outletDeclarationList & inOperand1,
                                                                                                const GALGAS_attributeList & inOperand2,
                                                                                                const GALGAS_transientList & inOperand3,
                                                                                                const GALGAS_lstringlist & inOperand4,
                                                                                                const GALGAS_controllerList & inOperand5,
                                                                                                const GALGAS_classArrayList & inOperand6
                                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_preferencesDeclarationList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid () && inOperand6.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_preferencesDeclarationList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5, inOperand6 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_preferencesDeclarationList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                                   const GALGAS_lstring & in_mPreferencesName,
                                                                   const GALGAS_outletDeclarationList & in_mOutletDeclarationList,
                                                                   const GALGAS_attributeList & in_mAttributeList,
                                                                   const GALGAS_transientList & in_mTransientList,
                                                                   const GALGAS_lstringlist & in_mActionDeclarationList,
                                                                   const GALGAS_controllerList & in_mControllerList,
                                                                   const GALGAS_classArrayList & in_mClassArrayList
                                                                   COMMA_LOCATION_ARGS) {
  cCollectionElement_preferencesDeclarationList * p = NULL ;
  macroMyNew (p, cCollectionElement_preferencesDeclarationList (in_mPreferencesName,
                                                                in_mOutletDeclarationList,
                                                                in_mAttributeList,
                                                                in_mTransientList,
                                                                in_mActionDeclarationList,
                                                                in_mControllerList,
                                                                in_mClassArrayList COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_preferencesDeclarationList::addAssign_operation (const GALGAS_lstring & inOperand0,
                                                             const GALGAS_outletDeclarationList & inOperand1,
                                                             const GALGAS_attributeList & inOperand2,
                                                             const GALGAS_transientList & inOperand3,
                                                             const GALGAS_lstringlist & inOperand4,
                                                             const GALGAS_controllerList & inOperand5,
                                                             const GALGAS_classArrayList & inOperand6
                                                             COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid () && inOperand6.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_preferencesDeclarationList (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5, inOperand6 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_preferencesDeclarationList::modifier_prependValue (GALGAS_lstring inOperand0,
                                                               GALGAS_outletDeclarationList inOperand1,
                                                               GALGAS_attributeList inOperand2,
                                                               GALGAS_transientList inOperand3,
                                                               GALGAS_lstringlist inOperand4,
                                                               GALGAS_controllerList inOperand5,
                                                               GALGAS_classArrayList inOperand6
                                                               COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid () && inOperand6.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_preferencesDeclarationList (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5, inOperand6 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_preferencesDeclarationList::modifier_popFirst (GALGAS_lstring & outOperand0,
                                                           GALGAS_outletDeclarationList & outOperand1,
                                                           GALGAS_attributeList & outOperand2,
                                                           GALGAS_transientList & outOperand3,
                                                           GALGAS_lstringlist & outOperand4,
                                                           GALGAS_controllerList & outOperand5,
                                                           GALGAS_classArrayList & outOperand6,
                                                           C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_preferencesDeclarationList * p = (cCollectionElement_preferencesDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
    outOperand6.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_preferencesDeclarationList) ;
    outOperand0 = p->mObject.mAttribute_mPreferencesName ;
    outOperand1 = p->mObject.mAttribute_mOutletDeclarationList ;
    outOperand2 = p->mObject.mAttribute_mAttributeList ;
    outOperand3 = p->mObject.mAttribute_mTransientList ;
    outOperand4 = p->mObject.mAttribute_mActionDeclarationList ;
    outOperand5 = p->mObject.mAttribute_mControllerList ;
    outOperand6 = p->mObject.mAttribute_mClassArrayList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_preferencesDeclarationList::modifier_popLast (GALGAS_lstring & outOperand0,
                                                          GALGAS_outletDeclarationList & outOperand1,
                                                          GALGAS_attributeList & outOperand2,
                                                          GALGAS_transientList & outOperand3,
                                                          GALGAS_lstringlist & outOperand4,
                                                          GALGAS_controllerList & outOperand5,
                                                          GALGAS_classArrayList & outOperand6,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_preferencesDeclarationList * p = (cCollectionElement_preferencesDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
    outOperand6.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_preferencesDeclarationList) ;
    macroUniqueSharedObject (p) ;
    outOperand0 = p->mObject.mAttribute_mPreferencesName ;
    outOperand1 = p->mObject.mAttribute_mOutletDeclarationList ;
    outOperand2 = p->mObject.mAttribute_mAttributeList ;
    outOperand3 = p->mObject.mAttribute_mTransientList ;
    outOperand4 = p->mObject.mAttribute_mActionDeclarationList ;
    outOperand5 = p->mObject.mAttribute_mControllerList ;
    outOperand6 = p->mObject.mAttribute_mClassArrayList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_preferencesDeclarationList::method_first (GALGAS_lstring & outOperand0,
                                                      GALGAS_outletDeclarationList & outOperand1,
                                                      GALGAS_attributeList & outOperand2,
                                                      GALGAS_transientList & outOperand3,
                                                      GALGAS_lstringlist & outOperand4,
                                                      GALGAS_controllerList & outOperand5,
                                                      GALGAS_classArrayList & outOperand6,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_preferencesDeclarationList * p = (cCollectionElement_preferencesDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
    outOperand6.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_preferencesDeclarationList) ;
    outOperand0 = p->mObject.mAttribute_mPreferencesName ;
    outOperand1 = p->mObject.mAttribute_mOutletDeclarationList ;
    outOperand2 = p->mObject.mAttribute_mAttributeList ;
    outOperand3 = p->mObject.mAttribute_mTransientList ;
    outOperand4 = p->mObject.mAttribute_mActionDeclarationList ;
    outOperand5 = p->mObject.mAttribute_mControllerList ;
    outOperand6 = p->mObject.mAttribute_mClassArrayList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_preferencesDeclarationList::method_last (GALGAS_lstring & outOperand0,
                                                     GALGAS_outletDeclarationList & outOperand1,
                                                     GALGAS_attributeList & outOperand2,
                                                     GALGAS_transientList & outOperand3,
                                                     GALGAS_lstringlist & outOperand4,
                                                     GALGAS_controllerList & outOperand5,
                                                     GALGAS_classArrayList & outOperand6,
                                                     C_Compiler * inCompiler
                                                     COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_preferencesDeclarationList * p = (cCollectionElement_preferencesDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
    outOperand6.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_preferencesDeclarationList) ;
    outOperand0 = p->mObject.mAttribute_mPreferencesName ;
    outOperand1 = p->mObject.mAttribute_mOutletDeclarationList ;
    outOperand2 = p->mObject.mAttribute_mAttributeList ;
    outOperand3 = p->mObject.mAttribute_mTransientList ;
    outOperand4 = p->mObject.mAttribute_mActionDeclarationList ;
    outOperand5 = p->mObject.mAttribute_mControllerList ;
    outOperand6 = p->mObject.mAttribute_mClassArrayList ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_preferencesDeclarationList GALGAS_preferencesDeclarationList::operator_concat (const GALGAS_preferencesDeclarationList & inOperand
                                                                                      COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_preferencesDeclarationList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_preferencesDeclarationList GALGAS_preferencesDeclarationList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                                              C_Compiler * inCompiler
                                                                                              COMMA_LOCATION_ARGS) const {
  GALGAS_preferencesDeclarationList result = GALGAS_preferencesDeclarationList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_preferencesDeclarationList GALGAS_preferencesDeclarationList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                              C_Compiler * inCompiler
                                                                                              COMMA_LOCATION_ARGS) const {
  GALGAS_preferencesDeclarationList result = GALGAS_preferencesDeclarationList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_preferencesDeclarationList::dotAssign_operation (const GALGAS_preferencesDeclarationList inOperand
                                                             COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_preferencesDeclarationList::reader_mPreferencesNameAtIndex (const GALGAS_uint & inIndex,
                                                                                  C_Compiler * inCompiler
                                                                                  COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_preferencesDeclarationList * p = (cCollectionElement_preferencesDeclarationList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_preferencesDeclarationList) ;
    result = p->mObject.mAttribute_mPreferencesName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletDeclarationList GALGAS_preferencesDeclarationList::reader_mOutletDeclarationListAtIndex (const GALGAS_uint & inIndex,
                                                                                                      C_Compiler * inCompiler
                                                                                                      COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_preferencesDeclarationList * p = (cCollectionElement_preferencesDeclarationList *) attributes.ptr () ;
  GALGAS_outletDeclarationList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_preferencesDeclarationList) ;
    result = p->mObject.mAttribute_mOutletDeclarationList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeList GALGAS_preferencesDeclarationList::reader_mAttributeListAtIndex (const GALGAS_uint & inIndex,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_preferencesDeclarationList * p = (cCollectionElement_preferencesDeclarationList *) attributes.ptr () ;
  GALGAS_attributeList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_preferencesDeclarationList) ;
    result = p->mObject.mAttribute_mAttributeList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_transientList GALGAS_preferencesDeclarationList::reader_mTransientListAtIndex (const GALGAS_uint & inIndex,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_preferencesDeclarationList * p = (cCollectionElement_preferencesDeclarationList *) attributes.ptr () ;
  GALGAS_transientList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_preferencesDeclarationList) ;
    result = p->mObject.mAttribute_mTransientList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstringlist GALGAS_preferencesDeclarationList::reader_mActionDeclarationListAtIndex (const GALGAS_uint & inIndex,
                                                                                            C_Compiler * inCompiler
                                                                                            COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_preferencesDeclarationList * p = (cCollectionElement_preferencesDeclarationList *) attributes.ptr () ;
  GALGAS_lstringlist result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_preferencesDeclarationList) ;
    result = p->mObject.mAttribute_mActionDeclarationList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerList GALGAS_preferencesDeclarationList::reader_mControllerListAtIndex (const GALGAS_uint & inIndex,
                                                                                        C_Compiler * inCompiler
                                                                                        COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_preferencesDeclarationList * p = (cCollectionElement_preferencesDeclarationList *) attributes.ptr () ;
  GALGAS_controllerList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_preferencesDeclarationList) ;
    result = p->mObject.mAttribute_mControllerList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_classArrayList GALGAS_preferencesDeclarationList::reader_mClassArrayListAtIndex (const GALGAS_uint & inIndex,
                                                                                        C_Compiler * inCompiler
                                                                                        COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_preferencesDeclarationList * p = (cCollectionElement_preferencesDeclarationList *) attributes.ptr () ;
  GALGAS_classArrayList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_preferencesDeclarationList) ;
    result = p->mObject.mAttribute_mClassArrayList ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_preferencesDeclarationList::cEnumerator_preferencesDeclarationList (const GALGAS_preferencesDeclarationList & inEnumeratedObject,
                                                                                const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_preferencesDeclarationList_2E_element cEnumerator_preferencesDeclarationList::current (LOCATION_ARGS) const {
  const cCollectionElement_preferencesDeclarationList * p = (const cCollectionElement_preferencesDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_preferencesDeclarationList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_preferencesDeclarationList::current_mPreferencesName (LOCATION_ARGS) const {
  const cCollectionElement_preferencesDeclarationList * p = (const cCollectionElement_preferencesDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_preferencesDeclarationList) ;
  return p->mObject.mAttribute_mPreferencesName ;
}

//---------------------------------------------------------------------------*

GALGAS_outletDeclarationList cEnumerator_preferencesDeclarationList::current_mOutletDeclarationList (LOCATION_ARGS) const {
  const cCollectionElement_preferencesDeclarationList * p = (const cCollectionElement_preferencesDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_preferencesDeclarationList) ;
  return p->mObject.mAttribute_mOutletDeclarationList ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeList cEnumerator_preferencesDeclarationList::current_mAttributeList (LOCATION_ARGS) const {
  const cCollectionElement_preferencesDeclarationList * p = (const cCollectionElement_preferencesDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_preferencesDeclarationList) ;
  return p->mObject.mAttribute_mAttributeList ;
}

//---------------------------------------------------------------------------*

GALGAS_transientList cEnumerator_preferencesDeclarationList::current_mTransientList (LOCATION_ARGS) const {
  const cCollectionElement_preferencesDeclarationList * p = (const cCollectionElement_preferencesDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_preferencesDeclarationList) ;
  return p->mObject.mAttribute_mTransientList ;
}

//---------------------------------------------------------------------------*

GALGAS_lstringlist cEnumerator_preferencesDeclarationList::current_mActionDeclarationList (LOCATION_ARGS) const {
  const cCollectionElement_preferencesDeclarationList * p = (const cCollectionElement_preferencesDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_preferencesDeclarationList) ;
  return p->mObject.mAttribute_mActionDeclarationList ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerList cEnumerator_preferencesDeclarationList::current_mControllerList (LOCATION_ARGS) const {
  const cCollectionElement_preferencesDeclarationList * p = (const cCollectionElement_preferencesDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_preferencesDeclarationList) ;
  return p->mObject.mAttribute_mControllerList ;
}

//---------------------------------------------------------------------------*

GALGAS_classArrayList cEnumerator_preferencesDeclarationList::current_mClassArrayList (LOCATION_ARGS) const {
  const cCollectionElement_preferencesDeclarationList * p = (const cCollectionElement_preferencesDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_preferencesDeclarationList) ;
  return p->mObject.mAttribute_mClassArrayList ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                     @preferencesDeclarationList type                      *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_preferencesDeclarationList ("preferencesDeclarationList",
                                                   NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_preferencesDeclarationList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_preferencesDeclarationList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_preferencesDeclarationList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_preferencesDeclarationList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_preferencesDeclarationList GALGAS_preferencesDeclarationList::extractObject (const GALGAS_object & inObject,
                                                                                    C_Compiler * inCompiler
                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_preferencesDeclarationList result ;
  const GALGAS_preferencesDeclarationList * p = (const GALGAS_preferencesDeclarationList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_preferencesDeclarationList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("preferencesDeclarationList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Class for element of '@nibClassDeclarationList' list            *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_nibClassDeclarationList : public cCollectionElement {
  public : GALGAS_nibClassDeclarationList_2E_element mObject ;

//--- Constructor
  public : cCollectionElement_nibClassDeclarationList (const GALGAS_lstring & in_mClassName,
                                                       const GALGAS_outletDeclarationList & in_mOutletDeclarationList,
                                                       const GALGAS_attributeList & in_mAttributeList,
                                                       const GALGAS_transientList & in_mTransientList,
                                                       const GALGAS_lstringlist & in_mActionDeclarationList,
                                                       const GALGAS_controllerList & in_mControllerList,
                                                       const GALGAS_classArrayList & in_mClassArrayList
                                                       COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_nibClassDeclarationList::cCollectionElement_nibClassDeclarationList (const GALGAS_lstring & in_mClassName,
                                                                                        const GALGAS_outletDeclarationList & in_mOutletDeclarationList,
                                                                                        const GALGAS_attributeList & in_mAttributeList,
                                                                                        const GALGAS_transientList & in_mTransientList,
                                                                                        const GALGAS_lstringlist & in_mActionDeclarationList,
                                                                                        const GALGAS_controllerList & in_mControllerList,
                                                                                        const GALGAS_classArrayList & in_mClassArrayList
                                                                                        COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mClassName, in_mOutletDeclarationList, in_mAttributeList, in_mTransientList, in_mActionDeclarationList, in_mControllerList, in_mClassArrayList) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_nibClassDeclarationList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_nibClassDeclarationList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_nibClassDeclarationList (mObject.mAttribute_mClassName, mObject.mAttribute_mOutletDeclarationList, mObject.mAttribute_mAttributeList, mObject.mAttribute_mTransientList, mObject.mAttribute_mActionDeclarationList, mObject.mAttribute_mControllerList, mObject.mAttribute_mClassArrayList COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_nibClassDeclarationList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mClassName" ":" ;
  mObject.mAttribute_mClassName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mOutletDeclarationList" ":" ;
  mObject.mAttribute_mOutletDeclarationList.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mAttributeList" ":" ;
  mObject.mAttribute_mAttributeList.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mTransientList" ":" ;
  mObject.mAttribute_mTransientList.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mActionDeclarationList" ":" ;
  mObject.mAttribute_mActionDeclarationList.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mControllerList" ":" ;
  mObject.mAttribute_mControllerList.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mClassArrayList" ":" ;
  mObject.mAttribute_mClassArrayList.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_nibClassDeclarationList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_nibClassDeclarationList * operand = (cCollectionElement_nibClassDeclarationList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_nibClassDeclarationList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------*

GALGAS_nibClassDeclarationList::GALGAS_nibClassDeclarationList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_nibClassDeclarationList::GALGAS_nibClassDeclarationList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_nibClassDeclarationList GALGAS_nibClassDeclarationList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_nibClassDeclarationList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_nibClassDeclarationList GALGAS_nibClassDeclarationList::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                                                          const GALGAS_outletDeclarationList & inOperand1,
                                                                                          const GALGAS_attributeList & inOperand2,
                                                                                          const GALGAS_transientList & inOperand3,
                                                                                          const GALGAS_lstringlist & inOperand4,
                                                                                          const GALGAS_controllerList & inOperand5,
                                                                                          const GALGAS_classArrayList & inOperand6
                                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_nibClassDeclarationList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid () && inOperand6.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_nibClassDeclarationList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5, inOperand6 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_nibClassDeclarationList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                                const GALGAS_lstring & in_mClassName,
                                                                const GALGAS_outletDeclarationList & in_mOutletDeclarationList,
                                                                const GALGAS_attributeList & in_mAttributeList,
                                                                const GALGAS_transientList & in_mTransientList,
                                                                const GALGAS_lstringlist & in_mActionDeclarationList,
                                                                const GALGAS_controllerList & in_mControllerList,
                                                                const GALGAS_classArrayList & in_mClassArrayList
                                                                COMMA_LOCATION_ARGS) {
  cCollectionElement_nibClassDeclarationList * p = NULL ;
  macroMyNew (p, cCollectionElement_nibClassDeclarationList (in_mClassName,
                                                             in_mOutletDeclarationList,
                                                             in_mAttributeList,
                                                             in_mTransientList,
                                                             in_mActionDeclarationList,
                                                             in_mControllerList,
                                                             in_mClassArrayList COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_nibClassDeclarationList::addAssign_operation (const GALGAS_lstring & inOperand0,
                                                          const GALGAS_outletDeclarationList & inOperand1,
                                                          const GALGAS_attributeList & inOperand2,
                                                          const GALGAS_transientList & inOperand3,
                                                          const GALGAS_lstringlist & inOperand4,
                                                          const GALGAS_controllerList & inOperand5,
                                                          const GALGAS_classArrayList & inOperand6
                                                          COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid () && inOperand6.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_nibClassDeclarationList (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5, inOperand6 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_nibClassDeclarationList::modifier_prependValue (GALGAS_lstring inOperand0,
                                                            GALGAS_outletDeclarationList inOperand1,
                                                            GALGAS_attributeList inOperand2,
                                                            GALGAS_transientList inOperand3,
                                                            GALGAS_lstringlist inOperand4,
                                                            GALGAS_controllerList inOperand5,
                                                            GALGAS_classArrayList inOperand6
                                                            COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid () && inOperand6.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_nibClassDeclarationList (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5, inOperand6 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_nibClassDeclarationList::modifier_popFirst (GALGAS_lstring & outOperand0,
                                                        GALGAS_outletDeclarationList & outOperand1,
                                                        GALGAS_attributeList & outOperand2,
                                                        GALGAS_transientList & outOperand3,
                                                        GALGAS_lstringlist & outOperand4,
                                                        GALGAS_controllerList & outOperand5,
                                                        GALGAS_classArrayList & outOperand6,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_nibClassDeclarationList * p = (cCollectionElement_nibClassDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
    outOperand6.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_nibClassDeclarationList) ;
    outOperand0 = p->mObject.mAttribute_mClassName ;
    outOperand1 = p->mObject.mAttribute_mOutletDeclarationList ;
    outOperand2 = p->mObject.mAttribute_mAttributeList ;
    outOperand3 = p->mObject.mAttribute_mTransientList ;
    outOperand4 = p->mObject.mAttribute_mActionDeclarationList ;
    outOperand5 = p->mObject.mAttribute_mControllerList ;
    outOperand6 = p->mObject.mAttribute_mClassArrayList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_nibClassDeclarationList::modifier_popLast (GALGAS_lstring & outOperand0,
                                                       GALGAS_outletDeclarationList & outOperand1,
                                                       GALGAS_attributeList & outOperand2,
                                                       GALGAS_transientList & outOperand3,
                                                       GALGAS_lstringlist & outOperand4,
                                                       GALGAS_controllerList & outOperand5,
                                                       GALGAS_classArrayList & outOperand6,
                                                       C_Compiler * inCompiler
                                                       COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_nibClassDeclarationList * p = (cCollectionElement_nibClassDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
    outOperand6.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_nibClassDeclarationList) ;
    macroUniqueSharedObject (p) ;
    outOperand0 = p->mObject.mAttribute_mClassName ;
    outOperand1 = p->mObject.mAttribute_mOutletDeclarationList ;
    outOperand2 = p->mObject.mAttribute_mAttributeList ;
    outOperand3 = p->mObject.mAttribute_mTransientList ;
    outOperand4 = p->mObject.mAttribute_mActionDeclarationList ;
    outOperand5 = p->mObject.mAttribute_mControllerList ;
    outOperand6 = p->mObject.mAttribute_mClassArrayList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_nibClassDeclarationList::method_first (GALGAS_lstring & outOperand0,
                                                   GALGAS_outletDeclarationList & outOperand1,
                                                   GALGAS_attributeList & outOperand2,
                                                   GALGAS_transientList & outOperand3,
                                                   GALGAS_lstringlist & outOperand4,
                                                   GALGAS_controllerList & outOperand5,
                                                   GALGAS_classArrayList & outOperand6,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_nibClassDeclarationList * p = (cCollectionElement_nibClassDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
    outOperand6.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_nibClassDeclarationList) ;
    outOperand0 = p->mObject.mAttribute_mClassName ;
    outOperand1 = p->mObject.mAttribute_mOutletDeclarationList ;
    outOperand2 = p->mObject.mAttribute_mAttributeList ;
    outOperand3 = p->mObject.mAttribute_mTransientList ;
    outOperand4 = p->mObject.mAttribute_mActionDeclarationList ;
    outOperand5 = p->mObject.mAttribute_mControllerList ;
    outOperand6 = p->mObject.mAttribute_mClassArrayList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_nibClassDeclarationList::method_last (GALGAS_lstring & outOperand0,
                                                  GALGAS_outletDeclarationList & outOperand1,
                                                  GALGAS_attributeList & outOperand2,
                                                  GALGAS_transientList & outOperand3,
                                                  GALGAS_lstringlist & outOperand4,
                                                  GALGAS_controllerList & outOperand5,
                                                  GALGAS_classArrayList & outOperand6,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_nibClassDeclarationList * p = (cCollectionElement_nibClassDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
    outOperand6.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_nibClassDeclarationList) ;
    outOperand0 = p->mObject.mAttribute_mClassName ;
    outOperand1 = p->mObject.mAttribute_mOutletDeclarationList ;
    outOperand2 = p->mObject.mAttribute_mAttributeList ;
    outOperand3 = p->mObject.mAttribute_mTransientList ;
    outOperand4 = p->mObject.mAttribute_mActionDeclarationList ;
    outOperand5 = p->mObject.mAttribute_mControllerList ;
    outOperand6 = p->mObject.mAttribute_mClassArrayList ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_nibClassDeclarationList GALGAS_nibClassDeclarationList::operator_concat (const GALGAS_nibClassDeclarationList & inOperand
                                                                                COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_nibClassDeclarationList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_nibClassDeclarationList GALGAS_nibClassDeclarationList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                                        C_Compiler * inCompiler
                                                                                        COMMA_LOCATION_ARGS) const {
  GALGAS_nibClassDeclarationList result = GALGAS_nibClassDeclarationList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_nibClassDeclarationList GALGAS_nibClassDeclarationList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                        C_Compiler * inCompiler
                                                                                        COMMA_LOCATION_ARGS) const {
  GALGAS_nibClassDeclarationList result = GALGAS_nibClassDeclarationList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_nibClassDeclarationList::dotAssign_operation (const GALGAS_nibClassDeclarationList inOperand
                                                          COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_nibClassDeclarationList::reader_mClassNameAtIndex (const GALGAS_uint & inIndex,
                                                                         C_Compiler * inCompiler
                                                                         COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_nibClassDeclarationList * p = (cCollectionElement_nibClassDeclarationList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_nibClassDeclarationList) ;
    result = p->mObject.mAttribute_mClassName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletDeclarationList GALGAS_nibClassDeclarationList::reader_mOutletDeclarationListAtIndex (const GALGAS_uint & inIndex,
                                                                                                   C_Compiler * inCompiler
                                                                                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_nibClassDeclarationList * p = (cCollectionElement_nibClassDeclarationList *) attributes.ptr () ;
  GALGAS_outletDeclarationList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_nibClassDeclarationList) ;
    result = p->mObject.mAttribute_mOutletDeclarationList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeList GALGAS_nibClassDeclarationList::reader_mAttributeListAtIndex (const GALGAS_uint & inIndex,
                                                                                   C_Compiler * inCompiler
                                                                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_nibClassDeclarationList * p = (cCollectionElement_nibClassDeclarationList *) attributes.ptr () ;
  GALGAS_attributeList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_nibClassDeclarationList) ;
    result = p->mObject.mAttribute_mAttributeList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_transientList GALGAS_nibClassDeclarationList::reader_mTransientListAtIndex (const GALGAS_uint & inIndex,
                                                                                   C_Compiler * inCompiler
                                                                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_nibClassDeclarationList * p = (cCollectionElement_nibClassDeclarationList *) attributes.ptr () ;
  GALGAS_transientList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_nibClassDeclarationList) ;
    result = p->mObject.mAttribute_mTransientList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstringlist GALGAS_nibClassDeclarationList::reader_mActionDeclarationListAtIndex (const GALGAS_uint & inIndex,
                                                                                         C_Compiler * inCompiler
                                                                                         COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_nibClassDeclarationList * p = (cCollectionElement_nibClassDeclarationList *) attributes.ptr () ;
  GALGAS_lstringlist result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_nibClassDeclarationList) ;
    result = p->mObject.mAttribute_mActionDeclarationList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerList GALGAS_nibClassDeclarationList::reader_mControllerListAtIndex (const GALGAS_uint & inIndex,
                                                                                     C_Compiler * inCompiler
                                                                                     COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_nibClassDeclarationList * p = (cCollectionElement_nibClassDeclarationList *) attributes.ptr () ;
  GALGAS_controllerList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_nibClassDeclarationList) ;
    result = p->mObject.mAttribute_mControllerList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_classArrayList GALGAS_nibClassDeclarationList::reader_mClassArrayListAtIndex (const GALGAS_uint & inIndex,
                                                                                     C_Compiler * inCompiler
                                                                                     COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_nibClassDeclarationList * p = (cCollectionElement_nibClassDeclarationList *) attributes.ptr () ;
  GALGAS_classArrayList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_nibClassDeclarationList) ;
    result = p->mObject.mAttribute_mClassArrayList ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_nibClassDeclarationList::cEnumerator_nibClassDeclarationList (const GALGAS_nibClassDeclarationList & inEnumeratedObject,
                                                                          const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_nibClassDeclarationList_2E_element cEnumerator_nibClassDeclarationList::current (LOCATION_ARGS) const {
  const cCollectionElement_nibClassDeclarationList * p = (const cCollectionElement_nibClassDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_nibClassDeclarationList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_nibClassDeclarationList::current_mClassName (LOCATION_ARGS) const {
  const cCollectionElement_nibClassDeclarationList * p = (const cCollectionElement_nibClassDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_nibClassDeclarationList) ;
  return p->mObject.mAttribute_mClassName ;
}

//---------------------------------------------------------------------------*

GALGAS_outletDeclarationList cEnumerator_nibClassDeclarationList::current_mOutletDeclarationList (LOCATION_ARGS) const {
  const cCollectionElement_nibClassDeclarationList * p = (const cCollectionElement_nibClassDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_nibClassDeclarationList) ;
  return p->mObject.mAttribute_mOutletDeclarationList ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeList cEnumerator_nibClassDeclarationList::current_mAttributeList (LOCATION_ARGS) const {
  const cCollectionElement_nibClassDeclarationList * p = (const cCollectionElement_nibClassDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_nibClassDeclarationList) ;
  return p->mObject.mAttribute_mAttributeList ;
}

//---------------------------------------------------------------------------*

GALGAS_transientList cEnumerator_nibClassDeclarationList::current_mTransientList (LOCATION_ARGS) const {
  const cCollectionElement_nibClassDeclarationList * p = (const cCollectionElement_nibClassDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_nibClassDeclarationList) ;
  return p->mObject.mAttribute_mTransientList ;
}

//---------------------------------------------------------------------------*

GALGAS_lstringlist cEnumerator_nibClassDeclarationList::current_mActionDeclarationList (LOCATION_ARGS) const {
  const cCollectionElement_nibClassDeclarationList * p = (const cCollectionElement_nibClassDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_nibClassDeclarationList) ;
  return p->mObject.mAttribute_mActionDeclarationList ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerList cEnumerator_nibClassDeclarationList::current_mControllerList (LOCATION_ARGS) const {
  const cCollectionElement_nibClassDeclarationList * p = (const cCollectionElement_nibClassDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_nibClassDeclarationList) ;
  return p->mObject.mAttribute_mControllerList ;
}

//---------------------------------------------------------------------------*

GALGAS_classArrayList cEnumerator_nibClassDeclarationList::current_mClassArrayList (LOCATION_ARGS) const {
  const cCollectionElement_nibClassDeclarationList * p = (const cCollectionElement_nibClassDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_nibClassDeclarationList) ;
  return p->mObject.mAttribute_mClassArrayList ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                       @nibClassDeclarationList type                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_nibClassDeclarationList ("nibClassDeclarationList",
                                                NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_nibClassDeclarationList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_nibClassDeclarationList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_nibClassDeclarationList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_nibClassDeclarationList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_nibClassDeclarationList GALGAS_nibClassDeclarationList::extractObject (const GALGAS_object & inObject,
                                                                              C_Compiler * inCompiler
                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_nibClassDeclarationList result ;
  const GALGAS_nibClassDeclarationList * p = (const GALGAS_nibClassDeclarationList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_nibClassDeclarationList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("nibClassDeclarationList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Class for element of '@controllerList' list                *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_controllerList : public cCollectionElement {
  public : GALGAS_controllerList_2E_element mObject ;

//--- Constructor
  public : cCollectionElement_controllerList (const GALGAS_controllerKind & in_mControllerKind,
                                              const GALGAS_lstring & in_mControllerClassName,
                                              const GALGAS_lstring & in_mControllerName,
                                              const GALGAS_lbool & in_mIsRootObject,
                                              const GALGAS_lstring & in_mControlledObjectName,
                                              const GALGAS_outletBindingOptionList & in_mControlledObjectBindingOptionList,
                                              const GALGAS_bindingList & in_mControllerBindingList
                                              COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_controllerList::cCollectionElement_controllerList (const GALGAS_controllerKind & in_mControllerKind,
                                                                      const GALGAS_lstring & in_mControllerClassName,
                                                                      const GALGAS_lstring & in_mControllerName,
                                                                      const GALGAS_lbool & in_mIsRootObject,
                                                                      const GALGAS_lstring & in_mControlledObjectName,
                                                                      const GALGAS_outletBindingOptionList & in_mControlledObjectBindingOptionList,
                                                                      const GALGAS_bindingList & in_mControllerBindingList
                                                                      COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mControllerKind, in_mControllerClassName, in_mControllerName, in_mIsRootObject, in_mControlledObjectName, in_mControlledObjectBindingOptionList, in_mControllerBindingList) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_controllerList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_controllerList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_controllerList (mObject.mAttribute_mControllerKind, mObject.mAttribute_mControllerClassName, mObject.mAttribute_mControllerName, mObject.mAttribute_mIsRootObject, mObject.mAttribute_mControlledObjectName, mObject.mAttribute_mControlledObjectBindingOptionList, mObject.mAttribute_mControllerBindingList COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_controllerList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mControllerKind" ":" ;
  mObject.mAttribute_mControllerKind.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mControllerClassName" ":" ;
  mObject.mAttribute_mControllerClassName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mControllerName" ":" ;
  mObject.mAttribute_mControllerName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mIsRootObject" ":" ;
  mObject.mAttribute_mIsRootObject.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mControlledObjectName" ":" ;
  mObject.mAttribute_mControlledObjectName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mControlledObjectBindingOptionList" ":" ;
  mObject.mAttribute_mControlledObjectBindingOptionList.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mControllerBindingList" ":" ;
  mObject.mAttribute_mControllerBindingList.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_controllerList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_controllerList * operand = (cCollectionElement_controllerList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_controllerList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerList::GALGAS_controllerList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_controllerList::GALGAS_controllerList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_controllerList GALGAS_controllerList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_controllerList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerList GALGAS_controllerList::constructor_listWithValue (const GALGAS_controllerKind & inOperand0,
                                                                        const GALGAS_lstring & inOperand1,
                                                                        const GALGAS_lstring & inOperand2,
                                                                        const GALGAS_lbool & inOperand3,
                                                                        const GALGAS_lstring & inOperand4,
                                                                        const GALGAS_outletBindingOptionList & inOperand5,
                                                                        const GALGAS_bindingList & inOperand6
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_controllerList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid () && inOperand6.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_controllerList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5, inOperand6 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_controllerList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                       const GALGAS_controllerKind & in_mControllerKind,
                                                       const GALGAS_lstring & in_mControllerClassName,
                                                       const GALGAS_lstring & in_mControllerName,
                                                       const GALGAS_lbool & in_mIsRootObject,
                                                       const GALGAS_lstring & in_mControlledObjectName,
                                                       const GALGAS_outletBindingOptionList & in_mControlledObjectBindingOptionList,
                                                       const GALGAS_bindingList & in_mControllerBindingList
                                                       COMMA_LOCATION_ARGS) {
  cCollectionElement_controllerList * p = NULL ;
  macroMyNew (p, cCollectionElement_controllerList (in_mControllerKind,
                                                    in_mControllerClassName,
                                                    in_mControllerName,
                                                    in_mIsRootObject,
                                                    in_mControlledObjectName,
                                                    in_mControlledObjectBindingOptionList,
                                                    in_mControllerBindingList COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_controllerList::addAssign_operation (const GALGAS_controllerKind & inOperand0,
                                                 const GALGAS_lstring & inOperand1,
                                                 const GALGAS_lstring & inOperand2,
                                                 const GALGAS_lbool & inOperand3,
                                                 const GALGAS_lstring & inOperand4,
                                                 const GALGAS_outletBindingOptionList & inOperand5,
                                                 const GALGAS_bindingList & inOperand6
                                                 COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid () && inOperand6.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_controllerList (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5, inOperand6 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_controllerList::modifier_prependValue (GALGAS_controllerKind inOperand0,
                                                   GALGAS_lstring inOperand1,
                                                   GALGAS_lstring inOperand2,
                                                   GALGAS_lbool inOperand3,
                                                   GALGAS_lstring inOperand4,
                                                   GALGAS_outletBindingOptionList inOperand5,
                                                   GALGAS_bindingList inOperand6
                                                   COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid () && inOperand6.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_controllerList (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5, inOperand6 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_controllerList::modifier_popFirst (GALGAS_controllerKind & outOperand0,
                                               GALGAS_lstring & outOperand1,
                                               GALGAS_lstring & outOperand2,
                                               GALGAS_lbool & outOperand3,
                                               GALGAS_lstring & outOperand4,
                                               GALGAS_outletBindingOptionList & outOperand5,
                                               GALGAS_bindingList & outOperand6,
                                               C_Compiler * inCompiler
                                               COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerList * p = (cCollectionElement_controllerList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
    outOperand6.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_controllerList) ;
    outOperand0 = p->mObject.mAttribute_mControllerKind ;
    outOperand1 = p->mObject.mAttribute_mControllerClassName ;
    outOperand2 = p->mObject.mAttribute_mControllerName ;
    outOperand3 = p->mObject.mAttribute_mIsRootObject ;
    outOperand4 = p->mObject.mAttribute_mControlledObjectName ;
    outOperand5 = p->mObject.mAttribute_mControlledObjectBindingOptionList ;
    outOperand6 = p->mObject.mAttribute_mControllerBindingList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_controllerList::modifier_popLast (GALGAS_controllerKind & outOperand0,
                                              GALGAS_lstring & outOperand1,
                                              GALGAS_lstring & outOperand2,
                                              GALGAS_lbool & outOperand3,
                                              GALGAS_lstring & outOperand4,
                                              GALGAS_outletBindingOptionList & outOperand5,
                                              GALGAS_bindingList & outOperand6,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerList * p = (cCollectionElement_controllerList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
    outOperand6.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_controllerList) ;
    macroUniqueSharedObject (p) ;
    outOperand0 = p->mObject.mAttribute_mControllerKind ;
    outOperand1 = p->mObject.mAttribute_mControllerClassName ;
    outOperand2 = p->mObject.mAttribute_mControllerName ;
    outOperand3 = p->mObject.mAttribute_mIsRootObject ;
    outOperand4 = p->mObject.mAttribute_mControlledObjectName ;
    outOperand5 = p->mObject.mAttribute_mControlledObjectBindingOptionList ;
    outOperand6 = p->mObject.mAttribute_mControllerBindingList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_controllerList::method_first (GALGAS_controllerKind & outOperand0,
                                          GALGAS_lstring & outOperand1,
                                          GALGAS_lstring & outOperand2,
                                          GALGAS_lbool & outOperand3,
                                          GALGAS_lstring & outOperand4,
                                          GALGAS_outletBindingOptionList & outOperand5,
                                          GALGAS_bindingList & outOperand6,
                                          C_Compiler * inCompiler
                                          COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerList * p = (cCollectionElement_controllerList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
    outOperand6.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_controllerList) ;
    outOperand0 = p->mObject.mAttribute_mControllerKind ;
    outOperand1 = p->mObject.mAttribute_mControllerClassName ;
    outOperand2 = p->mObject.mAttribute_mControllerName ;
    outOperand3 = p->mObject.mAttribute_mIsRootObject ;
    outOperand4 = p->mObject.mAttribute_mControlledObjectName ;
    outOperand5 = p->mObject.mAttribute_mControlledObjectBindingOptionList ;
    outOperand6 = p->mObject.mAttribute_mControllerBindingList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_controllerList::method_last (GALGAS_controllerKind & outOperand0,
                                         GALGAS_lstring & outOperand1,
                                         GALGAS_lstring & outOperand2,
                                         GALGAS_lbool & outOperand3,
                                         GALGAS_lstring & outOperand4,
                                         GALGAS_outletBindingOptionList & outOperand5,
                                         GALGAS_bindingList & outOperand6,
                                         C_Compiler * inCompiler
                                         COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerList * p = (cCollectionElement_controllerList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
    outOperand6.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_controllerList) ;
    outOperand0 = p->mObject.mAttribute_mControllerKind ;
    outOperand1 = p->mObject.mAttribute_mControllerClassName ;
    outOperand2 = p->mObject.mAttribute_mControllerName ;
    outOperand3 = p->mObject.mAttribute_mIsRootObject ;
    outOperand4 = p->mObject.mAttribute_mControlledObjectName ;
    outOperand5 = p->mObject.mAttribute_mControlledObjectBindingOptionList ;
    outOperand6 = p->mObject.mAttribute_mControllerBindingList ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_controllerList GALGAS_controllerList::operator_concat (const GALGAS_controllerList & inOperand
                                                              COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_controllerList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerList GALGAS_controllerList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) const {
  GALGAS_controllerList result = GALGAS_controllerList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerList GALGAS_controllerList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) const {
  GALGAS_controllerList result = GALGAS_controllerList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_controllerList::dotAssign_operation (const GALGAS_controllerList inOperand
                                                 COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerKind GALGAS_controllerList::reader_mControllerKindAtIndex (const GALGAS_uint & inIndex,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerList * p = (cCollectionElement_controllerList *) attributes.ptr () ;
  GALGAS_controllerKind result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_controllerList) ;
    result = p->mObject.mAttribute_mControllerKind ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_controllerList::reader_mControllerClassNameAtIndex (const GALGAS_uint & inIndex,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerList * p = (cCollectionElement_controllerList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_controllerList) ;
    result = p->mObject.mAttribute_mControllerClassName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_controllerList::reader_mControllerNameAtIndex (const GALGAS_uint & inIndex,
                                                                     C_Compiler * inCompiler
                                                                     COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerList * p = (cCollectionElement_controllerList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_controllerList) ;
    result = p->mObject.mAttribute_mControllerName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lbool GALGAS_controllerList::reader_mIsRootObjectAtIndex (const GALGAS_uint & inIndex,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerList * p = (cCollectionElement_controllerList *) attributes.ptr () ;
  GALGAS_lbool result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_controllerList) ;
    result = p->mObject.mAttribute_mIsRootObject ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_controllerList::reader_mControlledObjectNameAtIndex (const GALGAS_uint & inIndex,
                                                                           C_Compiler * inCompiler
                                                                           COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerList * p = (cCollectionElement_controllerList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_controllerList) ;
    result = p->mObject.mAttribute_mControlledObjectName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingOptionList GALGAS_controllerList::reader_mControlledObjectBindingOptionListAtIndex (const GALGAS_uint & inIndex,
                                                                                                        C_Compiler * inCompiler
                                                                                                        COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerList * p = (cCollectionElement_controllerList *) attributes.ptr () ;
  GALGAS_outletBindingOptionList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_controllerList) ;
    result = p->mObject.mAttribute_mControlledObjectBindingOptionList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bindingList GALGAS_controllerList::reader_mControllerBindingListAtIndex (const GALGAS_uint & inIndex,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerList * p = (cCollectionElement_controllerList *) attributes.ptr () ;
  GALGAS_bindingList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_controllerList) ;
    result = p->mObject.mAttribute_mControllerBindingList ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_controllerList::cEnumerator_controllerList (const GALGAS_controllerList & inEnumeratedObject,
                                                        const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerList_2E_element cEnumerator_controllerList::current (LOCATION_ARGS) const {
  const cCollectionElement_controllerList * p = (const cCollectionElement_controllerList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_controllerList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------*

GALGAS_controllerKind cEnumerator_controllerList::current_mControllerKind (LOCATION_ARGS) const {
  const cCollectionElement_controllerList * p = (const cCollectionElement_controllerList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_controllerList) ;
  return p->mObject.mAttribute_mControllerKind ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_controllerList::current_mControllerClassName (LOCATION_ARGS) const {
  const cCollectionElement_controllerList * p = (const cCollectionElement_controllerList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_controllerList) ;
  return p->mObject.mAttribute_mControllerClassName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_controllerList::current_mControllerName (LOCATION_ARGS) const {
  const cCollectionElement_controllerList * p = (const cCollectionElement_controllerList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_controllerList) ;
  return p->mObject.mAttribute_mControllerName ;
}

//---------------------------------------------------------------------------*

GALGAS_lbool cEnumerator_controllerList::current_mIsRootObject (LOCATION_ARGS) const {
  const cCollectionElement_controllerList * p = (const cCollectionElement_controllerList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_controllerList) ;
  return p->mObject.mAttribute_mIsRootObject ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_controllerList::current_mControlledObjectName (LOCATION_ARGS) const {
  const cCollectionElement_controllerList * p = (const cCollectionElement_controllerList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_controllerList) ;
  return p->mObject.mAttribute_mControlledObjectName ;
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingOptionList cEnumerator_controllerList::current_mControlledObjectBindingOptionList (LOCATION_ARGS) const {
  const cCollectionElement_controllerList * p = (const cCollectionElement_controllerList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_controllerList) ;
  return p->mObject.mAttribute_mControlledObjectBindingOptionList ;
}

//---------------------------------------------------------------------------*

GALGAS_bindingList cEnumerator_controllerList::current_mControllerBindingList (LOCATION_ARGS) const {
  const cCollectionElement_controllerList * p = (const cCollectionElement_controllerList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_controllerList) ;
  return p->mObject.mAttribute_mControllerBindingList ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                           @controllerList type                            *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_controllerList ("controllerList",
                                       NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_controllerList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_controllerList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_controllerList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_controllerList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerList GALGAS_controllerList::extractObject (const GALGAS_object & inObject,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) {
  GALGAS_controllerList result ;
  const GALGAS_controllerList * p = (const GALGAS_controllerList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_controllerList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("controllerList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Class for element of '@documentDeclarationList' list            *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_documentDeclarationList : public cCollectionElement {
  public : GALGAS_documentDeclarationList_2E_element mObject ;

//--- Constructor
  public : cCollectionElement_documentDeclarationList (const GALGAS_lstring & in_mDocumentName,
                                                       const GALGAS_lstring & in_mRootEntityName,
                                                       const GALGAS_outletDeclarationList & in_mOutletDeclarationList,
                                                       const GALGAS_controllerList & in_mControllerList,
                                                       const GALGAS_lstringlist & in_mActionDeclarationList,
                                                       const GALGAS_transientList & in_mTransientList,
                                                       const GALGAS_attributeList & in_mAttributeList
                                                       COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_documentDeclarationList::cCollectionElement_documentDeclarationList (const GALGAS_lstring & in_mDocumentName,
                                                                                        const GALGAS_lstring & in_mRootEntityName,
                                                                                        const GALGAS_outletDeclarationList & in_mOutletDeclarationList,
                                                                                        const GALGAS_controllerList & in_mControllerList,
                                                                                        const GALGAS_lstringlist & in_mActionDeclarationList,
                                                                                        const GALGAS_transientList & in_mTransientList,
                                                                                        const GALGAS_attributeList & in_mAttributeList
                                                                                        COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mDocumentName, in_mRootEntityName, in_mOutletDeclarationList, in_mControllerList, in_mActionDeclarationList, in_mTransientList, in_mAttributeList) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_documentDeclarationList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_documentDeclarationList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_documentDeclarationList (mObject.mAttribute_mDocumentName, mObject.mAttribute_mRootEntityName, mObject.mAttribute_mOutletDeclarationList, mObject.mAttribute_mControllerList, mObject.mAttribute_mActionDeclarationList, mObject.mAttribute_mTransientList, mObject.mAttribute_mAttributeList COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_documentDeclarationList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mDocumentName" ":" ;
  mObject.mAttribute_mDocumentName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mRootEntityName" ":" ;
  mObject.mAttribute_mRootEntityName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mOutletDeclarationList" ":" ;
  mObject.mAttribute_mOutletDeclarationList.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mControllerList" ":" ;
  mObject.mAttribute_mControllerList.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mActionDeclarationList" ":" ;
  mObject.mAttribute_mActionDeclarationList.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mTransientList" ":" ;
  mObject.mAttribute_mTransientList.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mAttributeList" ":" ;
  mObject.mAttribute_mAttributeList.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_documentDeclarationList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_documentDeclarationList * operand = (cCollectionElement_documentDeclarationList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_documentDeclarationList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------*

GALGAS_documentDeclarationList::GALGAS_documentDeclarationList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_documentDeclarationList::GALGAS_documentDeclarationList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_documentDeclarationList GALGAS_documentDeclarationList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_documentDeclarationList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_documentDeclarationList GALGAS_documentDeclarationList::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                                                          const GALGAS_lstring & inOperand1,
                                                                                          const GALGAS_outletDeclarationList & inOperand2,
                                                                                          const GALGAS_controllerList & inOperand3,
                                                                                          const GALGAS_lstringlist & inOperand4,
                                                                                          const GALGAS_transientList & inOperand5,
                                                                                          const GALGAS_attributeList & inOperand6
                                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_documentDeclarationList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid () && inOperand6.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_documentDeclarationList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5, inOperand6 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_documentDeclarationList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                                const GALGAS_lstring & in_mDocumentName,
                                                                const GALGAS_lstring & in_mRootEntityName,
                                                                const GALGAS_outletDeclarationList & in_mOutletDeclarationList,
                                                                const GALGAS_controllerList & in_mControllerList,
                                                                const GALGAS_lstringlist & in_mActionDeclarationList,
                                                                const GALGAS_transientList & in_mTransientList,
                                                                const GALGAS_attributeList & in_mAttributeList
                                                                COMMA_LOCATION_ARGS) {
  cCollectionElement_documentDeclarationList * p = NULL ;
  macroMyNew (p, cCollectionElement_documentDeclarationList (in_mDocumentName,
                                                             in_mRootEntityName,
                                                             in_mOutletDeclarationList,
                                                             in_mControllerList,
                                                             in_mActionDeclarationList,
                                                             in_mTransientList,
                                                             in_mAttributeList COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_documentDeclarationList::addAssign_operation (const GALGAS_lstring & inOperand0,
                                                          const GALGAS_lstring & inOperand1,
                                                          const GALGAS_outletDeclarationList & inOperand2,
                                                          const GALGAS_controllerList & inOperand3,
                                                          const GALGAS_lstringlist & inOperand4,
                                                          const GALGAS_transientList & inOperand5,
                                                          const GALGAS_attributeList & inOperand6
                                                          COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid () && inOperand6.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_documentDeclarationList (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5, inOperand6 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_documentDeclarationList::modifier_prependValue (GALGAS_lstring inOperand0,
                                                            GALGAS_lstring inOperand1,
                                                            GALGAS_outletDeclarationList inOperand2,
                                                            GALGAS_controllerList inOperand3,
                                                            GALGAS_lstringlist inOperand4,
                                                            GALGAS_transientList inOperand5,
                                                            GALGAS_attributeList inOperand6
                                                            COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid () && inOperand6.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_documentDeclarationList (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5, inOperand6 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_documentDeclarationList::modifier_popFirst (GALGAS_lstring & outOperand0,
                                                        GALGAS_lstring & outOperand1,
                                                        GALGAS_outletDeclarationList & outOperand2,
                                                        GALGAS_controllerList & outOperand3,
                                                        GALGAS_lstringlist & outOperand4,
                                                        GALGAS_transientList & outOperand5,
                                                        GALGAS_attributeList & outOperand6,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_documentDeclarationList * p = (cCollectionElement_documentDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
    outOperand6.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_documentDeclarationList) ;
    outOperand0 = p->mObject.mAttribute_mDocumentName ;
    outOperand1 = p->mObject.mAttribute_mRootEntityName ;
    outOperand2 = p->mObject.mAttribute_mOutletDeclarationList ;
    outOperand3 = p->mObject.mAttribute_mControllerList ;
    outOperand4 = p->mObject.mAttribute_mActionDeclarationList ;
    outOperand5 = p->mObject.mAttribute_mTransientList ;
    outOperand6 = p->mObject.mAttribute_mAttributeList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_documentDeclarationList::modifier_popLast (GALGAS_lstring & outOperand0,
                                                       GALGAS_lstring & outOperand1,
                                                       GALGAS_outletDeclarationList & outOperand2,
                                                       GALGAS_controllerList & outOperand3,
                                                       GALGAS_lstringlist & outOperand4,
                                                       GALGAS_transientList & outOperand5,
                                                       GALGAS_attributeList & outOperand6,
                                                       C_Compiler * inCompiler
                                                       COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_documentDeclarationList * p = (cCollectionElement_documentDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
    outOperand6.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_documentDeclarationList) ;
    macroUniqueSharedObject (p) ;
    outOperand0 = p->mObject.mAttribute_mDocumentName ;
    outOperand1 = p->mObject.mAttribute_mRootEntityName ;
    outOperand2 = p->mObject.mAttribute_mOutletDeclarationList ;
    outOperand3 = p->mObject.mAttribute_mControllerList ;
    outOperand4 = p->mObject.mAttribute_mActionDeclarationList ;
    outOperand5 = p->mObject.mAttribute_mTransientList ;
    outOperand6 = p->mObject.mAttribute_mAttributeList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_documentDeclarationList::method_first (GALGAS_lstring & outOperand0,
                                                   GALGAS_lstring & outOperand1,
                                                   GALGAS_outletDeclarationList & outOperand2,
                                                   GALGAS_controllerList & outOperand3,
                                                   GALGAS_lstringlist & outOperand4,
                                                   GALGAS_transientList & outOperand5,
                                                   GALGAS_attributeList & outOperand6,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_documentDeclarationList * p = (cCollectionElement_documentDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
    outOperand6.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_documentDeclarationList) ;
    outOperand0 = p->mObject.mAttribute_mDocumentName ;
    outOperand1 = p->mObject.mAttribute_mRootEntityName ;
    outOperand2 = p->mObject.mAttribute_mOutletDeclarationList ;
    outOperand3 = p->mObject.mAttribute_mControllerList ;
    outOperand4 = p->mObject.mAttribute_mActionDeclarationList ;
    outOperand5 = p->mObject.mAttribute_mTransientList ;
    outOperand6 = p->mObject.mAttribute_mAttributeList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_documentDeclarationList::method_last (GALGAS_lstring & outOperand0,
                                                  GALGAS_lstring & outOperand1,
                                                  GALGAS_outletDeclarationList & outOperand2,
                                                  GALGAS_controllerList & outOperand3,
                                                  GALGAS_lstringlist & outOperand4,
                                                  GALGAS_transientList & outOperand5,
                                                  GALGAS_attributeList & outOperand6,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_documentDeclarationList * p = (cCollectionElement_documentDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
    outOperand6.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_documentDeclarationList) ;
    outOperand0 = p->mObject.mAttribute_mDocumentName ;
    outOperand1 = p->mObject.mAttribute_mRootEntityName ;
    outOperand2 = p->mObject.mAttribute_mOutletDeclarationList ;
    outOperand3 = p->mObject.mAttribute_mControllerList ;
    outOperand4 = p->mObject.mAttribute_mActionDeclarationList ;
    outOperand5 = p->mObject.mAttribute_mTransientList ;
    outOperand6 = p->mObject.mAttribute_mAttributeList ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_documentDeclarationList GALGAS_documentDeclarationList::operator_concat (const GALGAS_documentDeclarationList & inOperand
                                                                                COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_documentDeclarationList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_documentDeclarationList GALGAS_documentDeclarationList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                                        C_Compiler * inCompiler
                                                                                        COMMA_LOCATION_ARGS) const {
  GALGAS_documentDeclarationList result = GALGAS_documentDeclarationList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_documentDeclarationList GALGAS_documentDeclarationList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                        C_Compiler * inCompiler
                                                                                        COMMA_LOCATION_ARGS) const {
  GALGAS_documentDeclarationList result = GALGAS_documentDeclarationList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_documentDeclarationList::dotAssign_operation (const GALGAS_documentDeclarationList inOperand
                                                          COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_documentDeclarationList::reader_mDocumentNameAtIndex (const GALGAS_uint & inIndex,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_documentDeclarationList * p = (cCollectionElement_documentDeclarationList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_documentDeclarationList) ;
    result = p->mObject.mAttribute_mDocumentName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_documentDeclarationList::reader_mRootEntityNameAtIndex (const GALGAS_uint & inIndex,
                                                                              C_Compiler * inCompiler
                                                                              COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_documentDeclarationList * p = (cCollectionElement_documentDeclarationList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_documentDeclarationList) ;
    result = p->mObject.mAttribute_mRootEntityName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletDeclarationList GALGAS_documentDeclarationList::reader_mOutletDeclarationListAtIndex (const GALGAS_uint & inIndex,
                                                                                                   C_Compiler * inCompiler
                                                                                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_documentDeclarationList * p = (cCollectionElement_documentDeclarationList *) attributes.ptr () ;
  GALGAS_outletDeclarationList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_documentDeclarationList) ;
    result = p->mObject.mAttribute_mOutletDeclarationList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerList GALGAS_documentDeclarationList::reader_mControllerListAtIndex (const GALGAS_uint & inIndex,
                                                                                     C_Compiler * inCompiler
                                                                                     COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_documentDeclarationList * p = (cCollectionElement_documentDeclarationList *) attributes.ptr () ;
  GALGAS_controllerList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_documentDeclarationList) ;
    result = p->mObject.mAttribute_mControllerList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstringlist GALGAS_documentDeclarationList::reader_mActionDeclarationListAtIndex (const GALGAS_uint & inIndex,
                                                                                         C_Compiler * inCompiler
                                                                                         COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_documentDeclarationList * p = (cCollectionElement_documentDeclarationList *) attributes.ptr () ;
  GALGAS_lstringlist result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_documentDeclarationList) ;
    result = p->mObject.mAttribute_mActionDeclarationList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_transientList GALGAS_documentDeclarationList::reader_mTransientListAtIndex (const GALGAS_uint & inIndex,
                                                                                   C_Compiler * inCompiler
                                                                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_documentDeclarationList * p = (cCollectionElement_documentDeclarationList *) attributes.ptr () ;
  GALGAS_transientList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_documentDeclarationList) ;
    result = p->mObject.mAttribute_mTransientList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeList GALGAS_documentDeclarationList::reader_mAttributeListAtIndex (const GALGAS_uint & inIndex,
                                                                                   C_Compiler * inCompiler
                                                                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_documentDeclarationList * p = (cCollectionElement_documentDeclarationList *) attributes.ptr () ;
  GALGAS_attributeList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_documentDeclarationList) ;
    result = p->mObject.mAttribute_mAttributeList ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_documentDeclarationList::cEnumerator_documentDeclarationList (const GALGAS_documentDeclarationList & inEnumeratedObject,
                                                                          const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_documentDeclarationList_2E_element cEnumerator_documentDeclarationList::current (LOCATION_ARGS) const {
  const cCollectionElement_documentDeclarationList * p = (const cCollectionElement_documentDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_documentDeclarationList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_documentDeclarationList::current_mDocumentName (LOCATION_ARGS) const {
  const cCollectionElement_documentDeclarationList * p = (const cCollectionElement_documentDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_documentDeclarationList) ;
  return p->mObject.mAttribute_mDocumentName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_documentDeclarationList::current_mRootEntityName (LOCATION_ARGS) const {
  const cCollectionElement_documentDeclarationList * p = (const cCollectionElement_documentDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_documentDeclarationList) ;
  return p->mObject.mAttribute_mRootEntityName ;
}

//---------------------------------------------------------------------------*

GALGAS_outletDeclarationList cEnumerator_documentDeclarationList::current_mOutletDeclarationList (LOCATION_ARGS) const {
  const cCollectionElement_documentDeclarationList * p = (const cCollectionElement_documentDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_documentDeclarationList) ;
  return p->mObject.mAttribute_mOutletDeclarationList ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerList cEnumerator_documentDeclarationList::current_mControllerList (LOCATION_ARGS) const {
  const cCollectionElement_documentDeclarationList * p = (const cCollectionElement_documentDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_documentDeclarationList) ;
  return p->mObject.mAttribute_mControllerList ;
}

//---------------------------------------------------------------------------*

GALGAS_lstringlist cEnumerator_documentDeclarationList::current_mActionDeclarationList (LOCATION_ARGS) const {
  const cCollectionElement_documentDeclarationList * p = (const cCollectionElement_documentDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_documentDeclarationList) ;
  return p->mObject.mAttribute_mActionDeclarationList ;
}

//---------------------------------------------------------------------------*

GALGAS_transientList cEnumerator_documentDeclarationList::current_mTransientList (LOCATION_ARGS) const {
  const cCollectionElement_documentDeclarationList * p = (const cCollectionElement_documentDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_documentDeclarationList) ;
  return p->mObject.mAttribute_mTransientList ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeList cEnumerator_documentDeclarationList::current_mAttributeList (LOCATION_ARGS) const {
  const cCollectionElement_documentDeclarationList * p = (const cCollectionElement_documentDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_documentDeclarationList) ;
  return p->mObject.mAttribute_mAttributeList ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                       @documentDeclarationList type                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_documentDeclarationList ("documentDeclarationList",
                                                NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_documentDeclarationList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_documentDeclarationList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_documentDeclarationList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_documentDeclarationList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_documentDeclarationList GALGAS_documentDeclarationList::extractObject (const GALGAS_object & inObject,
                                                                              C_Compiler * inCompiler
                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_documentDeclarationList result ;
  const GALGAS_documentDeclarationList * p = (const GALGAS_documentDeclarationList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_documentDeclarationList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("documentDeclarationList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_formatterEnum::GALGAS_formatterEnum (void) :
mEnum (kNotBuilt) {
}

//---------------------------------------------------------------------------*

GALGAS_formatterEnum GALGAS_formatterEnum::constructor_noFormatter (UNUSED_LOCATION_ARGS) {
  GALGAS_formatterEnum result ;
  result.mEnum = kEnum_noFormatter ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_formatterEnum GALGAS_formatterEnum::constructor_numberFormatter (UNUSED_LOCATION_ARGS) {
  GALGAS_formatterEnum result ;
  result.mEnum = kEnum_numberFormatter ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_formatterEnum GALGAS_formatterEnum::constructor_dateFormatter (UNUSED_LOCATION_ARGS) {
  GALGAS_formatterEnum result ;
  result.mEnum = kEnum_dateFormatter ;
  return result ;
}

//---------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_formatterEnum [4] = {
  "(not built)",
  "noFormatter",
  "numberFormatter",
  "dateFormatter"
} ;

//---------------------------------------------------------------------------*

void GALGAS_formatterEnum::description (C_String & ioString,
                                        const PMSInt32 /* inIndentation */) const {
  ioString << "<enum @formatterEnum: " << gEnumNameArrayFor_formatterEnum [mEnum] << ">" ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_formatterEnum::objectCompare (const GALGAS_formatterEnum & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = kOperandEqual ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                            @formatterEnum type                            *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_formatterEnum ("formatterEnum",
                                      NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_formatterEnum::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_formatterEnum ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_formatterEnum::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_formatterEnum (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_formatterEnum GALGAS_formatterEnum::extractObject (const GALGAS_object & inObject,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) {
  GALGAS_formatterEnum result ;
  const GALGAS_formatterEnum * p = (const GALGAS_formatterEnum *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_formatterEnum *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("formatterEnum", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Class for element of '@attributeASTTypeAndFormatterList' list       *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_attributeASTTypeAndFormatterList : public cCollectionElement {
  public : GALGAS_attributeASTTypeAndFormatterList_2E_element mObject ;

//--- Constructor
  public : cCollectionElement_attributeASTTypeAndFormatterList (const GALGAS_attributeASTType & in_mType,
                                                                const GALGAS_lstring & in_mTypeName,
                                                                const GALGAS_formatterEnum & in_mRequiredFormatter
                                                                COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_attributeASTTypeAndFormatterList::cCollectionElement_attributeASTTypeAndFormatterList (const GALGAS_attributeASTType & in_mType,
                                                                                                          const GALGAS_lstring & in_mTypeName,
                                                                                                          const GALGAS_formatterEnum & in_mRequiredFormatter
                                                                                                          COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mType, in_mTypeName, in_mRequiredFormatter) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_attributeASTTypeAndFormatterList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_attributeASTTypeAndFormatterList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_attributeASTTypeAndFormatterList (mObject.mAttribute_mType, mObject.mAttribute_mTypeName, mObject.mAttribute_mRequiredFormatter COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_attributeASTTypeAndFormatterList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mType" ":" ;
  mObject.mAttribute_mType.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mTypeName" ":" ;
  mObject.mAttribute_mTypeName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mRequiredFormatter" ":" ;
  mObject.mAttribute_mRequiredFormatter.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_attributeASTTypeAndFormatterList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_attributeASTTypeAndFormatterList * operand = (cCollectionElement_attributeASTTypeAndFormatterList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_attributeASTTypeAndFormatterList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTTypeAndFormatterList::GALGAS_attributeASTTypeAndFormatterList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTTypeAndFormatterList::GALGAS_attributeASTTypeAndFormatterList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTTypeAndFormatterList GALGAS_attributeASTTypeAndFormatterList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_attributeASTTypeAndFormatterList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTTypeAndFormatterList GALGAS_attributeASTTypeAndFormatterList::constructor_listWithValue (const GALGAS_attributeASTType & inOperand0,
                                                                                                            const GALGAS_lstring & inOperand1,
                                                                                                            const GALGAS_formatterEnum & inOperand2
                                                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_attributeASTTypeAndFormatterList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_attributeASTTypeAndFormatterList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_attributeASTTypeAndFormatterList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                                         const GALGAS_attributeASTType & in_mType,
                                                                         const GALGAS_lstring & in_mTypeName,
                                                                         const GALGAS_formatterEnum & in_mRequiredFormatter
                                                                         COMMA_LOCATION_ARGS) {
  cCollectionElement_attributeASTTypeAndFormatterList * p = NULL ;
  macroMyNew (p, cCollectionElement_attributeASTTypeAndFormatterList (in_mType,
                                                                      in_mTypeName,
                                                                      in_mRequiredFormatter COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_attributeASTTypeAndFormatterList::addAssign_operation (const GALGAS_attributeASTType & inOperand0,
                                                                   const GALGAS_lstring & inOperand1,
                                                                   const GALGAS_formatterEnum & inOperand2
                                                                   COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_attributeASTTypeAndFormatterList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_attributeASTTypeAndFormatterList::modifier_prependValue (GALGAS_attributeASTType inOperand0,
                                                                     GALGAS_lstring inOperand1,
                                                                     GALGAS_formatterEnum inOperand2
                                                                     COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_attributeASTTypeAndFormatterList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_attributeASTTypeAndFormatterList::modifier_popFirst (GALGAS_attributeASTType & outOperand0,
                                                                 GALGAS_lstring & outOperand1,
                                                                 GALGAS_formatterEnum & outOperand2,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_attributeASTTypeAndFormatterList * p = (cCollectionElement_attributeASTTypeAndFormatterList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_attributeASTTypeAndFormatterList) ;
    outOperand0 = p->mObject.mAttribute_mType ;
    outOperand1 = p->mObject.mAttribute_mTypeName ;
    outOperand2 = p->mObject.mAttribute_mRequiredFormatter ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_attributeASTTypeAndFormatterList::modifier_popLast (GALGAS_attributeASTType & outOperand0,
                                                                GALGAS_lstring & outOperand1,
                                                                GALGAS_formatterEnum & outOperand2,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_attributeASTTypeAndFormatterList * p = (cCollectionElement_attributeASTTypeAndFormatterList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_attributeASTTypeAndFormatterList) ;
    macroUniqueSharedObject (p) ;
    outOperand0 = p->mObject.mAttribute_mType ;
    outOperand1 = p->mObject.mAttribute_mTypeName ;
    outOperand2 = p->mObject.mAttribute_mRequiredFormatter ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_attributeASTTypeAndFormatterList::method_first (GALGAS_attributeASTType & outOperand0,
                                                            GALGAS_lstring & outOperand1,
                                                            GALGAS_formatterEnum & outOperand2,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_attributeASTTypeAndFormatterList * p = (cCollectionElement_attributeASTTypeAndFormatterList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_attributeASTTypeAndFormatterList) ;
    outOperand0 = p->mObject.mAttribute_mType ;
    outOperand1 = p->mObject.mAttribute_mTypeName ;
    outOperand2 = p->mObject.mAttribute_mRequiredFormatter ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_attributeASTTypeAndFormatterList::method_last (GALGAS_attributeASTType & outOperand0,
                                                           GALGAS_lstring & outOperand1,
                                                           GALGAS_formatterEnum & outOperand2,
                                                           C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_attributeASTTypeAndFormatterList * p = (cCollectionElement_attributeASTTypeAndFormatterList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_attributeASTTypeAndFormatterList) ;
    outOperand0 = p->mObject.mAttribute_mType ;
    outOperand1 = p->mObject.mAttribute_mTypeName ;
    outOperand2 = p->mObject.mAttribute_mRequiredFormatter ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTTypeAndFormatterList GALGAS_attributeASTTypeAndFormatterList::operator_concat (const GALGAS_attributeASTTypeAndFormatterList & inOperand
                                                                                                  COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_attributeASTTypeAndFormatterList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTTypeAndFormatterList GALGAS_attributeASTTypeAndFormatterList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                                                          C_Compiler * inCompiler
                                                                                                          COMMA_LOCATION_ARGS) const {
  GALGAS_attributeASTTypeAndFormatterList result = GALGAS_attributeASTTypeAndFormatterList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTTypeAndFormatterList GALGAS_attributeASTTypeAndFormatterList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                                          C_Compiler * inCompiler
                                                                                                          COMMA_LOCATION_ARGS) const {
  GALGAS_attributeASTTypeAndFormatterList result = GALGAS_attributeASTTypeAndFormatterList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_attributeASTTypeAndFormatterList::dotAssign_operation (const GALGAS_attributeASTTypeAndFormatterList inOperand
                                                                   COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTType GALGAS_attributeASTTypeAndFormatterList::reader_mTypeAtIndex (const GALGAS_uint & inIndex,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_attributeASTTypeAndFormatterList * p = (cCollectionElement_attributeASTTypeAndFormatterList *) attributes.ptr () ;
  GALGAS_attributeASTType result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_attributeASTTypeAndFormatterList) ;
    result = p->mObject.mAttribute_mType ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_attributeASTTypeAndFormatterList::reader_mTypeNameAtIndex (const GALGAS_uint & inIndex,
                                                                                 C_Compiler * inCompiler
                                                                                 COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_attributeASTTypeAndFormatterList * p = (cCollectionElement_attributeASTTypeAndFormatterList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_attributeASTTypeAndFormatterList) ;
    result = p->mObject.mAttribute_mTypeName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_formatterEnum GALGAS_attributeASTTypeAndFormatterList::reader_mRequiredFormatterAtIndex (const GALGAS_uint & inIndex,
                                                                                                C_Compiler * inCompiler
                                                                                                COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_attributeASTTypeAndFormatterList * p = (cCollectionElement_attributeASTTypeAndFormatterList *) attributes.ptr () ;
  GALGAS_formatterEnum result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_attributeASTTypeAndFormatterList) ;
    result = p->mObject.mAttribute_mRequiredFormatter ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_attributeASTTypeAndFormatterList::cEnumerator_attributeASTTypeAndFormatterList (const GALGAS_attributeASTTypeAndFormatterList & inEnumeratedObject,
                                                                                            const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTTypeAndFormatterList_2E_element cEnumerator_attributeASTTypeAndFormatterList::current (LOCATION_ARGS) const {
  const cCollectionElement_attributeASTTypeAndFormatterList * p = (const cCollectionElement_attributeASTTypeAndFormatterList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_attributeASTTypeAndFormatterList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------*

GALGAS_attributeASTType cEnumerator_attributeASTTypeAndFormatterList::current_mType (LOCATION_ARGS) const {
  const cCollectionElement_attributeASTTypeAndFormatterList * p = (const cCollectionElement_attributeASTTypeAndFormatterList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_attributeASTTypeAndFormatterList) ;
  return p->mObject.mAttribute_mType ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_attributeASTTypeAndFormatterList::current_mTypeName (LOCATION_ARGS) const {
  const cCollectionElement_attributeASTTypeAndFormatterList * p = (const cCollectionElement_attributeASTTypeAndFormatterList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_attributeASTTypeAndFormatterList) ;
  return p->mObject.mAttribute_mTypeName ;
}

//---------------------------------------------------------------------------*

GALGAS_formatterEnum cEnumerator_attributeASTTypeAndFormatterList::current_mRequiredFormatter (LOCATION_ARGS) const {
  const cCollectionElement_attributeASTTypeAndFormatterList * p = (const cCollectionElement_attributeASTTypeAndFormatterList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_attributeASTTypeAndFormatterList) ;
  return p->mObject.mAttribute_mRequiredFormatter ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                  @attributeASTTypeAndFormatterList type                   *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_attributeASTTypeAndFormatterList ("attributeASTTypeAndFormatterList",
                                                         NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_attributeASTTypeAndFormatterList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_attributeASTTypeAndFormatterList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_attributeASTTypeAndFormatterList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_attributeASTTypeAndFormatterList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTTypeAndFormatterList GALGAS_attributeASTTypeAndFormatterList::extractObject (const GALGAS_object & inObject,
                                                                                                C_Compiler * inCompiler
                                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_attributeASTTypeAndFormatterList result ;
  const GALGAS_attributeASTTypeAndFormatterList * p = (const GALGAS_attributeASTTypeAndFormatterList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_attributeASTTypeAndFormatterList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("attributeASTTypeAndFormatterList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Class for element of '@easyBindingTypeAndFormatterList' list        *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_easyBindingTypeAndFormatterList : public cCollectionElement {
  public : GALGAS_easyBindingTypeAndFormatterList_2E_element mObject ;

//--- Constructor
  public : cCollectionElement_easyBindingTypeAndFormatterList (const GALGAS_easyBindingType & in_mType,
                                                               const GALGAS_formatterEnum & in_mRequiredFormatter
                                                               COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_easyBindingTypeAndFormatterList::cCollectionElement_easyBindingTypeAndFormatterList (const GALGAS_easyBindingType & in_mType,
                                                                                                        const GALGAS_formatterEnum & in_mRequiredFormatter
                                                                                                        COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mType, in_mRequiredFormatter) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_easyBindingTypeAndFormatterList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_easyBindingTypeAndFormatterList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_easyBindingTypeAndFormatterList (mObject.mAttribute_mType, mObject.mAttribute_mRequiredFormatter COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_easyBindingTypeAndFormatterList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mType" ":" ;
  mObject.mAttribute_mType.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mRequiredFormatter" ":" ;
  mObject.mAttribute_mRequiredFormatter.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_easyBindingTypeAndFormatterList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_easyBindingTypeAndFormatterList * operand = (cCollectionElement_easyBindingTypeAndFormatterList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_easyBindingTypeAndFormatterList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeAndFormatterList::GALGAS_easyBindingTypeAndFormatterList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeAndFormatterList::GALGAS_easyBindingTypeAndFormatterList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeAndFormatterList GALGAS_easyBindingTypeAndFormatterList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_easyBindingTypeAndFormatterList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeAndFormatterList GALGAS_easyBindingTypeAndFormatterList::constructor_listWithValue (const GALGAS_easyBindingType & inOperand0,
                                                                                                          const GALGAS_formatterEnum & inOperand1
                                                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_easyBindingTypeAndFormatterList result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_easyBindingTypeAndFormatterList::makeAttributesFromObjects (attributes, inOperand0, inOperand1 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_easyBindingTypeAndFormatterList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                                        const GALGAS_easyBindingType & in_mType,
                                                                        const GALGAS_formatterEnum & in_mRequiredFormatter
                                                                        COMMA_LOCATION_ARGS) {
  cCollectionElement_easyBindingTypeAndFormatterList * p = NULL ;
  macroMyNew (p, cCollectionElement_easyBindingTypeAndFormatterList (in_mType,
                                                                     in_mRequiredFormatter COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_easyBindingTypeAndFormatterList::addAssign_operation (const GALGAS_easyBindingType & inOperand0,
                                                                  const GALGAS_formatterEnum & inOperand1
                                                                  COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_easyBindingTypeAndFormatterList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_easyBindingTypeAndFormatterList::modifier_prependValue (GALGAS_easyBindingType inOperand0,
                                                                    GALGAS_formatterEnum inOperand1
                                                                    COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_easyBindingTypeAndFormatterList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_easyBindingTypeAndFormatterList::modifier_popFirst (GALGAS_easyBindingType & outOperand0,
                                                                GALGAS_formatterEnum & outOperand1,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_easyBindingTypeAndFormatterList * p = (cCollectionElement_easyBindingTypeAndFormatterList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_easyBindingTypeAndFormatterList) ;
    outOperand0 = p->mObject.mAttribute_mType ;
    outOperand1 = p->mObject.mAttribute_mRequiredFormatter ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_easyBindingTypeAndFormatterList::modifier_popLast (GALGAS_easyBindingType & outOperand0,
                                                               GALGAS_formatterEnum & outOperand1,
                                                               C_Compiler * inCompiler
                                                               COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_easyBindingTypeAndFormatterList * p = (cCollectionElement_easyBindingTypeAndFormatterList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_easyBindingTypeAndFormatterList) ;
    macroUniqueSharedObject (p) ;
    outOperand0 = p->mObject.mAttribute_mType ;
    outOperand1 = p->mObject.mAttribute_mRequiredFormatter ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_easyBindingTypeAndFormatterList::method_first (GALGAS_easyBindingType & outOperand0,
                                                           GALGAS_formatterEnum & outOperand1,
                                                           C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_easyBindingTypeAndFormatterList * p = (cCollectionElement_easyBindingTypeAndFormatterList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_easyBindingTypeAndFormatterList) ;
    outOperand0 = p->mObject.mAttribute_mType ;
    outOperand1 = p->mObject.mAttribute_mRequiredFormatter ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_easyBindingTypeAndFormatterList::method_last (GALGAS_easyBindingType & outOperand0,
                                                          GALGAS_formatterEnum & outOperand1,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_easyBindingTypeAndFormatterList * p = (cCollectionElement_easyBindingTypeAndFormatterList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_easyBindingTypeAndFormatterList) ;
    outOperand0 = p->mObject.mAttribute_mType ;
    outOperand1 = p->mObject.mAttribute_mRequiredFormatter ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeAndFormatterList GALGAS_easyBindingTypeAndFormatterList::operator_concat (const GALGAS_easyBindingTypeAndFormatterList & inOperand
                                                                                                COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_easyBindingTypeAndFormatterList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeAndFormatterList GALGAS_easyBindingTypeAndFormatterList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                                                        C_Compiler * inCompiler
                                                                                                        COMMA_LOCATION_ARGS) const {
  GALGAS_easyBindingTypeAndFormatterList result = GALGAS_easyBindingTypeAndFormatterList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeAndFormatterList GALGAS_easyBindingTypeAndFormatterList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                                        C_Compiler * inCompiler
                                                                                                        COMMA_LOCATION_ARGS) const {
  GALGAS_easyBindingTypeAndFormatterList result = GALGAS_easyBindingTypeAndFormatterList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_easyBindingTypeAndFormatterList::dotAssign_operation (const GALGAS_easyBindingTypeAndFormatterList inOperand
                                                                  COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingType GALGAS_easyBindingTypeAndFormatterList::reader_mTypeAtIndex (const GALGAS_uint & inIndex,
                                                                                    C_Compiler * inCompiler
                                                                                    COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_easyBindingTypeAndFormatterList * p = (cCollectionElement_easyBindingTypeAndFormatterList *) attributes.ptr () ;
  GALGAS_easyBindingType result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_easyBindingTypeAndFormatterList) ;
    result = p->mObject.mAttribute_mType ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_formatterEnum GALGAS_easyBindingTypeAndFormatterList::reader_mRequiredFormatterAtIndex (const GALGAS_uint & inIndex,
                                                                                               C_Compiler * inCompiler
                                                                                               COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_easyBindingTypeAndFormatterList * p = (cCollectionElement_easyBindingTypeAndFormatterList *) attributes.ptr () ;
  GALGAS_formatterEnum result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_easyBindingTypeAndFormatterList) ;
    result = p->mObject.mAttribute_mRequiredFormatter ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_easyBindingTypeAndFormatterList::cEnumerator_easyBindingTypeAndFormatterList (const GALGAS_easyBindingTypeAndFormatterList & inEnumeratedObject,
                                                                                          const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeAndFormatterList_2E_element cEnumerator_easyBindingTypeAndFormatterList::current (LOCATION_ARGS) const {
  const cCollectionElement_easyBindingTypeAndFormatterList * p = (const cCollectionElement_easyBindingTypeAndFormatterList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_easyBindingTypeAndFormatterList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------*

GALGAS_easyBindingType cEnumerator_easyBindingTypeAndFormatterList::current_mType (LOCATION_ARGS) const {
  const cCollectionElement_easyBindingTypeAndFormatterList * p = (const cCollectionElement_easyBindingTypeAndFormatterList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_easyBindingTypeAndFormatterList) ;
  return p->mObject.mAttribute_mType ;
}

//---------------------------------------------------------------------------*

GALGAS_formatterEnum cEnumerator_easyBindingTypeAndFormatterList::current_mRequiredFormatter (LOCATION_ARGS) const {
  const cCollectionElement_easyBindingTypeAndFormatterList * p = (const cCollectionElement_easyBindingTypeAndFormatterList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_easyBindingTypeAndFormatterList) ;
  return p->mObject.mAttribute_mRequiredFormatter ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                   @easyBindingTypeAndFormatterList type                   *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_easyBindingTypeAndFormatterList ("easyBindingTypeAndFormatterList",
                                                        NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_easyBindingTypeAndFormatterList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_easyBindingTypeAndFormatterList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_easyBindingTypeAndFormatterList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_easyBindingTypeAndFormatterList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeAndFormatterList GALGAS_easyBindingTypeAndFormatterList::extractObject (const GALGAS_object & inObject,
                                                                                              C_Compiler * inCompiler
                                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_easyBindingTypeAndFormatterList result ;
  const GALGAS_easyBindingTypeAndFormatterList * p = (const GALGAS_easyBindingTypeAndFormatterList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_easyBindingTypeAndFormatterList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("easyBindingTypeAndFormatterList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Class for element of '@easyBindingTypeList' list              *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_easyBindingTypeList : public cCollectionElement {
  public : GALGAS_easyBindingTypeList_2E_element mObject ;

//--- Constructor
  public : cCollectionElement_easyBindingTypeList (const GALGAS_easyBindingType & in_mType
                                                   COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_easyBindingTypeList::cCollectionElement_easyBindingTypeList (const GALGAS_easyBindingType & in_mType
                                                                                COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mType) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_easyBindingTypeList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_easyBindingTypeList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_easyBindingTypeList (mObject.mAttribute_mType COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_easyBindingTypeList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mType" ":" ;
  mObject.mAttribute_mType.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_easyBindingTypeList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_easyBindingTypeList * operand = (cCollectionElement_easyBindingTypeList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_easyBindingTypeList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeList::GALGAS_easyBindingTypeList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeList::GALGAS_easyBindingTypeList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeList GALGAS_easyBindingTypeList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_easyBindingTypeList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeList GALGAS_easyBindingTypeList::constructor_listWithValue (const GALGAS_easyBindingType & inOperand0
                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_easyBindingTypeList result ;
  if (inOperand0.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_easyBindingTypeList::makeAttributesFromObjects (attributes, inOperand0 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_easyBindingTypeList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                            const GALGAS_easyBindingType & in_mType
                                                            COMMA_LOCATION_ARGS) {
  cCollectionElement_easyBindingTypeList * p = NULL ;
  macroMyNew (p, cCollectionElement_easyBindingTypeList (in_mType COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_easyBindingTypeList::addAssign_operation (const GALGAS_easyBindingType & inOperand0
                                                      COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_easyBindingTypeList (inOperand0 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_easyBindingTypeList::modifier_prependValue (GALGAS_easyBindingType inOperand0
                                                        COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_easyBindingTypeList (inOperand0 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_easyBindingTypeList::modifier_popFirst (GALGAS_easyBindingType & outOperand0,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_easyBindingTypeList * p = (cCollectionElement_easyBindingTypeList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_easyBindingTypeList) ;
    outOperand0 = p->mObject.mAttribute_mType ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_easyBindingTypeList::modifier_popLast (GALGAS_easyBindingType & outOperand0,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_easyBindingTypeList * p = (cCollectionElement_easyBindingTypeList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_easyBindingTypeList) ;
    macroUniqueSharedObject (p) ;
    outOperand0 = p->mObject.mAttribute_mType ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_easyBindingTypeList::method_first (GALGAS_easyBindingType & outOperand0,
                                               C_Compiler * inCompiler
                                               COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_easyBindingTypeList * p = (cCollectionElement_easyBindingTypeList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_easyBindingTypeList) ;
    outOperand0 = p->mObject.mAttribute_mType ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_easyBindingTypeList::method_last (GALGAS_easyBindingType & outOperand0,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_easyBindingTypeList * p = (cCollectionElement_easyBindingTypeList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_easyBindingTypeList) ;
    outOperand0 = p->mObject.mAttribute_mType ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeList GALGAS_easyBindingTypeList::operator_concat (const GALGAS_easyBindingTypeList & inOperand
                                                                        COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_easyBindingTypeList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeList GALGAS_easyBindingTypeList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_LOCATION_ARGS) const {
  GALGAS_easyBindingTypeList result = GALGAS_easyBindingTypeList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeList GALGAS_easyBindingTypeList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_LOCATION_ARGS) const {
  GALGAS_easyBindingTypeList result = GALGAS_easyBindingTypeList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_easyBindingTypeList::dotAssign_operation (const GALGAS_easyBindingTypeList inOperand
                                                      COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingType GALGAS_easyBindingTypeList::reader_mTypeAtIndex (const GALGAS_uint & inIndex,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_easyBindingTypeList * p = (cCollectionElement_easyBindingTypeList *) attributes.ptr () ;
  GALGAS_easyBindingType result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_easyBindingTypeList) ;
    result = p->mObject.mAttribute_mType ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_easyBindingTypeList::cEnumerator_easyBindingTypeList (const GALGAS_easyBindingTypeList & inEnumeratedObject,
                                                                  const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeList_2E_element cEnumerator_easyBindingTypeList::current (LOCATION_ARGS) const {
  const cCollectionElement_easyBindingTypeList * p = (const cCollectionElement_easyBindingTypeList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_easyBindingTypeList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------*

GALGAS_easyBindingType cEnumerator_easyBindingTypeList::current_mType (LOCATION_ARGS) const {
  const cCollectionElement_easyBindingTypeList * p = (const cCollectionElement_easyBindingTypeList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_easyBindingTypeList) ;
  return p->mObject.mAttribute_mType ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                         @easyBindingTypeList type                         *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_easyBindingTypeList ("easyBindingTypeList",
                                            NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_easyBindingTypeList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_easyBindingTypeList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_easyBindingTypeList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_easyBindingTypeList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeList GALGAS_easyBindingTypeList::extractObject (const GALGAS_object & inObject,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_easyBindingTypeList result ;
  const GALGAS_easyBindingTypeList * p = (const GALGAS_easyBindingTypeList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_easyBindingTypeList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("easyBindingTypeList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Class for element of '@outletClassBindingList' list            *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_outletClassBindingList : public cCollectionElement {
  public : GALGAS_outletClassBindingList_2E_element mObject ;

//--- Constructor
  public : cCollectionElement_outletClassBindingList (const GALGAS_lstring & in_mBindingName,
                                                      const GALGAS_attributeASTTypeAndFormatterList & in_mAcceptableTypeFormatterList,
                                                      const GALGAS_bindingOptionList & in_mBindingOptionList
                                                      COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_outletClassBindingList::cCollectionElement_outletClassBindingList (const GALGAS_lstring & in_mBindingName,
                                                                                      const GALGAS_attributeASTTypeAndFormatterList & in_mAcceptableTypeFormatterList,
                                                                                      const GALGAS_bindingOptionList & in_mBindingOptionList
                                                                                      COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mBindingName, in_mAcceptableTypeFormatterList, in_mBindingOptionList) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_outletClassBindingList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_outletClassBindingList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_outletClassBindingList (mObject.mAttribute_mBindingName, mObject.mAttribute_mAcceptableTypeFormatterList, mObject.mAttribute_mBindingOptionList COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_outletClassBindingList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mBindingName" ":" ;
  mObject.mAttribute_mBindingName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mAcceptableTypeFormatterList" ":" ;
  mObject.mAttribute_mAcceptableTypeFormatterList.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mBindingOptionList" ":" ;
  mObject.mAttribute_mBindingOptionList.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_outletClassBindingList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_outletClassBindingList * operand = (cCollectionElement_outletClassBindingList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_outletClassBindingList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------*

GALGAS_outletClassBindingList::GALGAS_outletClassBindingList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_outletClassBindingList::GALGAS_outletClassBindingList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_outletClassBindingList GALGAS_outletClassBindingList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_outletClassBindingList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletClassBindingList GALGAS_outletClassBindingList::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                                                        const GALGAS_attributeASTTypeAndFormatterList & inOperand1,
                                                                                        const GALGAS_bindingOptionList & inOperand2
                                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_outletClassBindingList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_outletClassBindingList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_outletClassBindingList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                               const GALGAS_lstring & in_mBindingName,
                                                               const GALGAS_attributeASTTypeAndFormatterList & in_mAcceptableTypeFormatterList,
                                                               const GALGAS_bindingOptionList & in_mBindingOptionList
                                                               COMMA_LOCATION_ARGS) {
  cCollectionElement_outletClassBindingList * p = NULL ;
  macroMyNew (p, cCollectionElement_outletClassBindingList (in_mBindingName,
                                                            in_mAcceptableTypeFormatterList,
                                                            in_mBindingOptionList COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_outletClassBindingList::addAssign_operation (const GALGAS_lstring & inOperand0,
                                                         const GALGAS_attributeASTTypeAndFormatterList & inOperand1,
                                                         const GALGAS_bindingOptionList & inOperand2
                                                         COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_outletClassBindingList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletClassBindingList::modifier_prependValue (GALGAS_lstring inOperand0,
                                                           GALGAS_attributeASTTypeAndFormatterList inOperand1,
                                                           GALGAS_bindingOptionList inOperand2
                                                           COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_outletClassBindingList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletClassBindingList::modifier_popFirst (GALGAS_lstring & outOperand0,
                                                       GALGAS_attributeASTTypeAndFormatterList & outOperand1,
                                                       GALGAS_bindingOptionList & outOperand2,
                                                       C_Compiler * inCompiler
                                                       COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletClassBindingList * p = (cCollectionElement_outletClassBindingList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletClassBindingList) ;
    outOperand0 = p->mObject.mAttribute_mBindingName ;
    outOperand1 = p->mObject.mAttribute_mAcceptableTypeFormatterList ;
    outOperand2 = p->mObject.mAttribute_mBindingOptionList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletClassBindingList::modifier_popLast (GALGAS_lstring & outOperand0,
                                                      GALGAS_attributeASTTypeAndFormatterList & outOperand1,
                                                      GALGAS_bindingOptionList & outOperand2,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletClassBindingList * p = (cCollectionElement_outletClassBindingList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletClassBindingList) ;
    macroUniqueSharedObject (p) ;
    outOperand0 = p->mObject.mAttribute_mBindingName ;
    outOperand1 = p->mObject.mAttribute_mAcceptableTypeFormatterList ;
    outOperand2 = p->mObject.mAttribute_mBindingOptionList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletClassBindingList::method_first (GALGAS_lstring & outOperand0,
                                                  GALGAS_attributeASTTypeAndFormatterList & outOperand1,
                                                  GALGAS_bindingOptionList & outOperand2,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletClassBindingList * p = (cCollectionElement_outletClassBindingList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletClassBindingList) ;
    outOperand0 = p->mObject.mAttribute_mBindingName ;
    outOperand1 = p->mObject.mAttribute_mAcceptableTypeFormatterList ;
    outOperand2 = p->mObject.mAttribute_mBindingOptionList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletClassBindingList::method_last (GALGAS_lstring & outOperand0,
                                                 GALGAS_attributeASTTypeAndFormatterList & outOperand1,
                                                 GALGAS_bindingOptionList & outOperand2,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletClassBindingList * p = (cCollectionElement_outletClassBindingList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletClassBindingList) ;
    outOperand0 = p->mObject.mAttribute_mBindingName ;
    outOperand1 = p->mObject.mAttribute_mAcceptableTypeFormatterList ;
    outOperand2 = p->mObject.mAttribute_mBindingOptionList ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_outletClassBindingList GALGAS_outletClassBindingList::operator_concat (const GALGAS_outletClassBindingList & inOperand
                                                                              COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_outletClassBindingList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletClassBindingList GALGAS_outletClassBindingList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) const {
  GALGAS_outletClassBindingList result = GALGAS_outletClassBindingList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletClassBindingList GALGAS_outletClassBindingList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) const {
  GALGAS_outletClassBindingList result = GALGAS_outletClassBindingList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_outletClassBindingList::dotAssign_operation (const GALGAS_outletClassBindingList inOperand
                                                         COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_outletClassBindingList::reader_mBindingNameAtIndex (const GALGAS_uint & inIndex,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_outletClassBindingList * p = (cCollectionElement_outletClassBindingList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_outletClassBindingList) ;
    result = p->mObject.mAttribute_mBindingName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTTypeAndFormatterList GALGAS_outletClassBindingList::reader_mAcceptableTypeFormatterListAtIndex (const GALGAS_uint & inIndex,
                                                                                                                   C_Compiler * inCompiler
                                                                                                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_outletClassBindingList * p = (cCollectionElement_outletClassBindingList *) attributes.ptr () ;
  GALGAS_attributeASTTypeAndFormatterList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_outletClassBindingList) ;
    result = p->mObject.mAttribute_mAcceptableTypeFormatterList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bindingOptionList GALGAS_outletClassBindingList::reader_mBindingOptionListAtIndex (const GALGAS_uint & inIndex,
                                                                                          C_Compiler * inCompiler
                                                                                          COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_outletClassBindingList * p = (cCollectionElement_outletClassBindingList *) attributes.ptr () ;
  GALGAS_bindingOptionList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_outletClassBindingList) ;
    result = p->mObject.mAttribute_mBindingOptionList ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_outletClassBindingList::cEnumerator_outletClassBindingList (const GALGAS_outletClassBindingList & inEnumeratedObject,
                                                                        const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_outletClassBindingList_2E_element cEnumerator_outletClassBindingList::current (LOCATION_ARGS) const {
  const cCollectionElement_outletClassBindingList * p = (const cCollectionElement_outletClassBindingList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_outletClassBindingList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_outletClassBindingList::current_mBindingName (LOCATION_ARGS) const {
  const cCollectionElement_outletClassBindingList * p = (const cCollectionElement_outletClassBindingList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_outletClassBindingList) ;
  return p->mObject.mAttribute_mBindingName ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTTypeAndFormatterList cEnumerator_outletClassBindingList::current_mAcceptableTypeFormatterList (LOCATION_ARGS) const {
  const cCollectionElement_outletClassBindingList * p = (const cCollectionElement_outletClassBindingList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_outletClassBindingList) ;
  return p->mObject.mAttribute_mAcceptableTypeFormatterList ;
}

//---------------------------------------------------------------------------*

GALGAS_bindingOptionList cEnumerator_outletClassBindingList::current_mBindingOptionList (LOCATION_ARGS) const {
  const cCollectionElement_outletClassBindingList * p = (const cCollectionElement_outletClassBindingList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_outletClassBindingList) ;
  return p->mObject.mAttribute_mBindingOptionList ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                       @outletClassBindingList type                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_outletClassBindingList ("outletClassBindingList",
                                               NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_outletClassBindingList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_outletClassBindingList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_outletClassBindingList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_outletClassBindingList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletClassBindingList GALGAS_outletClassBindingList::extractObject (const GALGAS_object & inObject,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_outletClassBindingList result ;
  const GALGAS_outletClassBindingList * p = (const GALGAS_outletClassBindingList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_outletClassBindingList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("outletClassBindingList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Class for element of '@bindingOptionList' list               *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_bindingOptionList : public cCollectionElement {
  public : GALGAS_bindingOptionList_2E_element mObject ;

//--- Constructor
  public : cCollectionElement_bindingOptionList (const GALGAS_lstring & in_mBindingOptionName,
                                                 const GALGAS_attributeASTTypeList & in_mAcceptableTypeList
                                                 COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_bindingOptionList::cCollectionElement_bindingOptionList (const GALGAS_lstring & in_mBindingOptionName,
                                                                            const GALGAS_attributeASTTypeList & in_mAcceptableTypeList
                                                                            COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mBindingOptionName, in_mAcceptableTypeList) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_bindingOptionList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_bindingOptionList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_bindingOptionList (mObject.mAttribute_mBindingOptionName, mObject.mAttribute_mAcceptableTypeList COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_bindingOptionList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mBindingOptionName" ":" ;
  mObject.mAttribute_mBindingOptionName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mAcceptableTypeList" ":" ;
  mObject.mAttribute_mAcceptableTypeList.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_bindingOptionList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_bindingOptionList * operand = (cCollectionElement_bindingOptionList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_bindingOptionList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------*

GALGAS_bindingOptionList::GALGAS_bindingOptionList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_bindingOptionList::GALGAS_bindingOptionList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_bindingOptionList GALGAS_bindingOptionList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_bindingOptionList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bindingOptionList GALGAS_bindingOptionList::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                                              const GALGAS_attributeASTTypeList & inOperand1
                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_bindingOptionList result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_bindingOptionList::makeAttributesFromObjects (attributes, inOperand0, inOperand1 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_bindingOptionList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                          const GALGAS_lstring & in_mBindingOptionName,
                                                          const GALGAS_attributeASTTypeList & in_mAcceptableTypeList
                                                          COMMA_LOCATION_ARGS) {
  cCollectionElement_bindingOptionList * p = NULL ;
  macroMyNew (p, cCollectionElement_bindingOptionList (in_mBindingOptionName,
                                                       in_mAcceptableTypeList COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_bindingOptionList::addAssign_operation (const GALGAS_lstring & inOperand0,
                                                    const GALGAS_attributeASTTypeList & inOperand1
                                                    COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_bindingOptionList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_bindingOptionList::modifier_prependValue (GALGAS_lstring inOperand0,
                                                      GALGAS_attributeASTTypeList inOperand1
                                                      COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_bindingOptionList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_bindingOptionList::modifier_popFirst (GALGAS_lstring & outOperand0,
                                                  GALGAS_attributeASTTypeList & outOperand1,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_bindingOptionList * p = (cCollectionElement_bindingOptionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_bindingOptionList) ;
    outOperand0 = p->mObject.mAttribute_mBindingOptionName ;
    outOperand1 = p->mObject.mAttribute_mAcceptableTypeList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_bindingOptionList::modifier_popLast (GALGAS_lstring & outOperand0,
                                                 GALGAS_attributeASTTypeList & outOperand1,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_bindingOptionList * p = (cCollectionElement_bindingOptionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_bindingOptionList) ;
    macroUniqueSharedObject (p) ;
    outOperand0 = p->mObject.mAttribute_mBindingOptionName ;
    outOperand1 = p->mObject.mAttribute_mAcceptableTypeList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_bindingOptionList::method_first (GALGAS_lstring & outOperand0,
                                             GALGAS_attributeASTTypeList & outOperand1,
                                             C_Compiler * inCompiler
                                             COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_bindingOptionList * p = (cCollectionElement_bindingOptionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_bindingOptionList) ;
    outOperand0 = p->mObject.mAttribute_mBindingOptionName ;
    outOperand1 = p->mObject.mAttribute_mAcceptableTypeList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_bindingOptionList::method_last (GALGAS_lstring & outOperand0,
                                            GALGAS_attributeASTTypeList & outOperand1,
                                            C_Compiler * inCompiler
                                            COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_bindingOptionList * p = (cCollectionElement_bindingOptionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_bindingOptionList) ;
    outOperand0 = p->mObject.mAttribute_mBindingOptionName ;
    outOperand1 = p->mObject.mAttribute_mAcceptableTypeList ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_bindingOptionList GALGAS_bindingOptionList::operator_concat (const GALGAS_bindingOptionList & inOperand
                                                                    COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_bindingOptionList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bindingOptionList GALGAS_bindingOptionList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_LOCATION_ARGS) const {
  GALGAS_bindingOptionList result = GALGAS_bindingOptionList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bindingOptionList GALGAS_bindingOptionList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_LOCATION_ARGS) const {
  GALGAS_bindingOptionList result = GALGAS_bindingOptionList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_bindingOptionList::dotAssign_operation (const GALGAS_bindingOptionList inOperand
                                                    COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_bindingOptionList::reader_mBindingOptionNameAtIndex (const GALGAS_uint & inIndex,
                                                                           C_Compiler * inCompiler
                                                                           COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_bindingOptionList * p = (cCollectionElement_bindingOptionList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_bindingOptionList) ;
    result = p->mObject.mAttribute_mBindingOptionName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTTypeList GALGAS_bindingOptionList::reader_mAcceptableTypeListAtIndex (const GALGAS_uint & inIndex,
                                                                                         C_Compiler * inCompiler
                                                                                         COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_bindingOptionList * p = (cCollectionElement_bindingOptionList *) attributes.ptr () ;
  GALGAS_attributeASTTypeList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_bindingOptionList) ;
    result = p->mObject.mAttribute_mAcceptableTypeList ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_bindingOptionList::cEnumerator_bindingOptionList (const GALGAS_bindingOptionList & inEnumeratedObject,
                                                              const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_bindingOptionList_2E_element cEnumerator_bindingOptionList::current (LOCATION_ARGS) const {
  const cCollectionElement_bindingOptionList * p = (const cCollectionElement_bindingOptionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_bindingOptionList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_bindingOptionList::current_mBindingOptionName (LOCATION_ARGS) const {
  const cCollectionElement_bindingOptionList * p = (const cCollectionElement_bindingOptionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_bindingOptionList) ;
  return p->mObject.mAttribute_mBindingOptionName ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTTypeList cEnumerator_bindingOptionList::current_mAcceptableTypeList (LOCATION_ARGS) const {
  const cCollectionElement_bindingOptionList * p = (const cCollectionElement_bindingOptionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_bindingOptionList) ;
  return p->mObject.mAttribute_mAcceptableTypeList ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                          @bindingOptionList type                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_bindingOptionList ("bindingOptionList",
                                          NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_bindingOptionList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_bindingOptionList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_bindingOptionList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_bindingOptionList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bindingOptionList GALGAS_bindingOptionList::extractObject (const GALGAS_object & inObject,
                                                                  C_Compiler * inCompiler
                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_bindingOptionList result ;
  const GALGAS_bindingOptionList * p = (const GALGAS_bindingOptionList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_bindingOptionList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("bindingOptionList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_generationKind::GALGAS_generationKind (void) :
mEnum (kNotBuilt) {
}

//---------------------------------------------------------------------------*

GALGAS_generationKind GALGAS_generationKind::constructor_fullGeneration (UNUSED_LOCATION_ARGS) {
  GALGAS_generationKind result ;
  result.mEnum = kEnum_fullGeneration ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_generationKind GALGAS_generationKind::constructor_generateImport (UNUSED_LOCATION_ARGS) {
  GALGAS_generationKind result ;
  result.mEnum = kEnum_generateImport ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_generationKind GALGAS_generationKind::constructor_noGeneration (UNUSED_LOCATION_ARGS) {
  GALGAS_generationKind result ;
  result.mEnum = kEnum_noGeneration ;
  return result ;
}

//---------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_generationKind [4] = {
  "(not built)",
  "fullGeneration",
  "generateImport",
  "noGeneration"
} ;

//---------------------------------------------------------------------------*

void GALGAS_generationKind::description (C_String & ioString,
                                         const PMSInt32 /* inIndentation */) const {
  ioString << "<enum @generationKind: " << gEnumNameArrayFor_generationKind [mEnum] << ">" ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_generationKind::objectCompare (const GALGAS_generationKind & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = kOperandEqual ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                           @generationKind type                            *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_generationKind ("generationKind",
                                       NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_generationKind::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_generationKind ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_generationKind::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_generationKind (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_generationKind GALGAS_generationKind::extractObject (const GALGAS_object & inObject,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) {
  GALGAS_generationKind result ;
  const GALGAS_generationKind * p = (const GALGAS_generationKind *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_generationKind *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("generationKind", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Class for element of '@cursorList' list                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_cursorList : public cCollectionElement {
  public : GALGAS_cursorList_2E_element mObject ;

//--- Constructor
  public : cCollectionElement_cursorList (const GALGAS_lstring & in_mCursorName,
                                          const GALGAS_ldouble & in_mHotSpotX,
                                          const GALGAS_ldouble & in_mHotSpotY
                                          COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_cursorList::cCollectionElement_cursorList (const GALGAS_lstring & in_mCursorName,
                                                              const GALGAS_ldouble & in_mHotSpotX,
                                                              const GALGAS_ldouble & in_mHotSpotY
                                                              COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mCursorName, in_mHotSpotX, in_mHotSpotY) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_cursorList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_cursorList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_cursorList (mObject.mAttribute_mCursorName, mObject.mAttribute_mHotSpotX, mObject.mAttribute_mHotSpotY COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_cursorList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mCursorName" ":" ;
  mObject.mAttribute_mCursorName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mHotSpotX" ":" ;
  mObject.mAttribute_mHotSpotX.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mHotSpotY" ":" ;
  mObject.mAttribute_mHotSpotY.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_cursorList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_cursorList * operand = (cCollectionElement_cursorList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_cursorList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------*

GALGAS_cursorList::GALGAS_cursorList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_cursorList::GALGAS_cursorList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_cursorList GALGAS_cursorList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_cursorList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_cursorList GALGAS_cursorList::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                                const GALGAS_ldouble & inOperand1,
                                                                const GALGAS_ldouble & inOperand2
                                                                COMMA_LOCATION_ARGS) {
  GALGAS_cursorList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_cursorList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_cursorList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                   const GALGAS_lstring & in_mCursorName,
                                                   const GALGAS_ldouble & in_mHotSpotX,
                                                   const GALGAS_ldouble & in_mHotSpotY
                                                   COMMA_LOCATION_ARGS) {
  cCollectionElement_cursorList * p = NULL ;
  macroMyNew (p, cCollectionElement_cursorList (in_mCursorName,
                                                in_mHotSpotX,
                                                in_mHotSpotY COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_cursorList::addAssign_operation (const GALGAS_lstring & inOperand0,
                                             const GALGAS_ldouble & inOperand1,
                                             const GALGAS_ldouble & inOperand2
                                             COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_cursorList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_cursorList::modifier_prependValue (GALGAS_lstring inOperand0,
                                               GALGAS_ldouble inOperand1,
                                               GALGAS_ldouble inOperand2
                                               COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_cursorList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_cursorList::modifier_popFirst (GALGAS_lstring & outOperand0,
                                           GALGAS_ldouble & outOperand1,
                                           GALGAS_ldouble & outOperand2,
                                           C_Compiler * inCompiler
                                           COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_cursorList * p = (cCollectionElement_cursorList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_cursorList) ;
    outOperand0 = p->mObject.mAttribute_mCursorName ;
    outOperand1 = p->mObject.mAttribute_mHotSpotX ;
    outOperand2 = p->mObject.mAttribute_mHotSpotY ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_cursorList::modifier_popLast (GALGAS_lstring & outOperand0,
                                          GALGAS_ldouble & outOperand1,
                                          GALGAS_ldouble & outOperand2,
                                          C_Compiler * inCompiler
                                          COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_cursorList * p = (cCollectionElement_cursorList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_cursorList) ;
    macroUniqueSharedObject (p) ;
    outOperand0 = p->mObject.mAttribute_mCursorName ;
    outOperand1 = p->mObject.mAttribute_mHotSpotX ;
    outOperand2 = p->mObject.mAttribute_mHotSpotY ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_cursorList::method_first (GALGAS_lstring & outOperand0,
                                      GALGAS_ldouble & outOperand1,
                                      GALGAS_ldouble & outOperand2,
                                      C_Compiler * inCompiler
                                      COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_cursorList * p = (cCollectionElement_cursorList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_cursorList) ;
    outOperand0 = p->mObject.mAttribute_mCursorName ;
    outOperand1 = p->mObject.mAttribute_mHotSpotX ;
    outOperand2 = p->mObject.mAttribute_mHotSpotY ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_cursorList::method_last (GALGAS_lstring & outOperand0,
                                     GALGAS_ldouble & outOperand1,
                                     GALGAS_ldouble & outOperand2,
                                     C_Compiler * inCompiler
                                     COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_cursorList * p = (cCollectionElement_cursorList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_cursorList) ;
    outOperand0 = p->mObject.mAttribute_mCursorName ;
    outOperand1 = p->mObject.mAttribute_mHotSpotX ;
    outOperand2 = p->mObject.mAttribute_mHotSpotY ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_cursorList GALGAS_cursorList::operator_concat (const GALGAS_cursorList & inOperand
                                                      COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_cursorList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_cursorList GALGAS_cursorList::reader_subListWithRange (const GALGAS_range & inRange,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) const {
  GALGAS_cursorList result = GALGAS_cursorList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_cursorList GALGAS_cursorList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) const {
  GALGAS_cursorList result = GALGAS_cursorList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_cursorList::dotAssign_operation (const GALGAS_cursorList inOperand
                                             COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_cursorList::reader_mCursorNameAtIndex (const GALGAS_uint & inIndex,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_cursorList * p = (cCollectionElement_cursorList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_cursorList) ;
    result = p->mObject.mAttribute_mCursorName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_ldouble GALGAS_cursorList::reader_mHotSpotXAtIndex (const GALGAS_uint & inIndex,
                                                           C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_cursorList * p = (cCollectionElement_cursorList *) attributes.ptr () ;
  GALGAS_ldouble result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_cursorList) ;
    result = p->mObject.mAttribute_mHotSpotX ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_ldouble GALGAS_cursorList::reader_mHotSpotYAtIndex (const GALGAS_uint & inIndex,
                                                           C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_cursorList * p = (cCollectionElement_cursorList *) attributes.ptr () ;
  GALGAS_ldouble result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_cursorList) ;
    result = p->mObject.mAttribute_mHotSpotY ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_cursorList::cEnumerator_cursorList (const GALGAS_cursorList & inEnumeratedObject,
                                                const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_cursorList_2E_element cEnumerator_cursorList::current (LOCATION_ARGS) const {
  const cCollectionElement_cursorList * p = (const cCollectionElement_cursorList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_cursorList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_cursorList::current_mCursorName (LOCATION_ARGS) const {
  const cCollectionElement_cursorList * p = (const cCollectionElement_cursorList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_cursorList) ;
  return p->mObject.mAttribute_mCursorName ;
}

//---------------------------------------------------------------------------*

GALGAS_ldouble cEnumerator_cursorList::current_mHotSpotX (LOCATION_ARGS) const {
  const cCollectionElement_cursorList * p = (const cCollectionElement_cursorList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_cursorList) ;
  return p->mObject.mAttribute_mHotSpotX ;
}

//---------------------------------------------------------------------------*

GALGAS_ldouble cEnumerator_cursorList::current_mHotSpotY (LOCATION_ARGS) const {
  const cCollectionElement_cursorList * p = (const cCollectionElement_cursorList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_cursorList) ;
  return p->mObject.mAttribute_mHotSpotY ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                             @cursorList type                              *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_cursorList ("cursorList",
                                   NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_cursorList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_cursorList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_cursorList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_cursorList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_cursorList GALGAS_cursorList::extractObject (const GALGAS_object & inObject,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) {
  GALGAS_cursorList result ;
  const GALGAS_cursorList * p = (const GALGAS_cursorList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_cursorList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("cursorList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Class for element of '@outletClassList' list                *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_outletClassList : public cCollectionElement {
  public : GALGAS_outletClassList_2E_element mObject ;

//--- Constructor
  public : cCollectionElement_outletClassList (const GALGAS_lstring & in_mOutletClassName,
                                               const GALGAS_lstring & in_mSuperClassName,
                                               const GALGAS_lstringlist & in_mAdoptedProtocolList,
                                               const GALGAS_generationKind & in_mGeneration,
                                               const GALGAS_outletClassBindingList & in_mOutletClassBindingList,
                                               const GALGAS_bool & in_mHasTableValueBinding,
                                               const GALGAS_lstringlist & in_mOptionList
                                               COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_outletClassList::cCollectionElement_outletClassList (const GALGAS_lstring & in_mOutletClassName,
                                                                        const GALGAS_lstring & in_mSuperClassName,
                                                                        const GALGAS_lstringlist & in_mAdoptedProtocolList,
                                                                        const GALGAS_generationKind & in_mGeneration,
                                                                        const GALGAS_outletClassBindingList & in_mOutletClassBindingList,
                                                                        const GALGAS_bool & in_mHasTableValueBinding,
                                                                        const GALGAS_lstringlist & in_mOptionList
                                                                        COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mOutletClassName, in_mSuperClassName, in_mAdoptedProtocolList, in_mGeneration, in_mOutletClassBindingList, in_mHasTableValueBinding, in_mOptionList) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_outletClassList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_outletClassList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_outletClassList (mObject.mAttribute_mOutletClassName, mObject.mAttribute_mSuperClassName, mObject.mAttribute_mAdoptedProtocolList, mObject.mAttribute_mGeneration, mObject.mAttribute_mOutletClassBindingList, mObject.mAttribute_mHasTableValueBinding, mObject.mAttribute_mOptionList COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_outletClassList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mOutletClassName" ":" ;
  mObject.mAttribute_mOutletClassName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mSuperClassName" ":" ;
  mObject.mAttribute_mSuperClassName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mAdoptedProtocolList" ":" ;
  mObject.mAttribute_mAdoptedProtocolList.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mGeneration" ":" ;
  mObject.mAttribute_mGeneration.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mOutletClassBindingList" ":" ;
  mObject.mAttribute_mOutletClassBindingList.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mHasTableValueBinding" ":" ;
  mObject.mAttribute_mHasTableValueBinding.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mOptionList" ":" ;
  mObject.mAttribute_mOptionList.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_outletClassList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_outletClassList * operand = (cCollectionElement_outletClassList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_outletClassList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------*

GALGAS_outletClassList::GALGAS_outletClassList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_outletClassList::GALGAS_outletClassList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_outletClassList GALGAS_outletClassList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_outletClassList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletClassList GALGAS_outletClassList::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                                          const GALGAS_lstring & inOperand1,
                                                                          const GALGAS_lstringlist & inOperand2,
                                                                          const GALGAS_generationKind & inOperand3,
                                                                          const GALGAS_outletClassBindingList & inOperand4,
                                                                          const GALGAS_bool & inOperand5,
                                                                          const GALGAS_lstringlist & inOperand6
                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_outletClassList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid () && inOperand6.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_outletClassList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5, inOperand6 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_outletClassList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                        const GALGAS_lstring & in_mOutletClassName,
                                                        const GALGAS_lstring & in_mSuperClassName,
                                                        const GALGAS_lstringlist & in_mAdoptedProtocolList,
                                                        const GALGAS_generationKind & in_mGeneration,
                                                        const GALGAS_outletClassBindingList & in_mOutletClassBindingList,
                                                        const GALGAS_bool & in_mHasTableValueBinding,
                                                        const GALGAS_lstringlist & in_mOptionList
                                                        COMMA_LOCATION_ARGS) {
  cCollectionElement_outletClassList * p = NULL ;
  macroMyNew (p, cCollectionElement_outletClassList (in_mOutletClassName,
                                                     in_mSuperClassName,
                                                     in_mAdoptedProtocolList,
                                                     in_mGeneration,
                                                     in_mOutletClassBindingList,
                                                     in_mHasTableValueBinding,
                                                     in_mOptionList COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_outletClassList::addAssign_operation (const GALGAS_lstring & inOperand0,
                                                  const GALGAS_lstring & inOperand1,
                                                  const GALGAS_lstringlist & inOperand2,
                                                  const GALGAS_generationKind & inOperand3,
                                                  const GALGAS_outletClassBindingList & inOperand4,
                                                  const GALGAS_bool & inOperand5,
                                                  const GALGAS_lstringlist & inOperand6
                                                  COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid () && inOperand6.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_outletClassList (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5, inOperand6 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletClassList::modifier_prependValue (GALGAS_lstring inOperand0,
                                                    GALGAS_lstring inOperand1,
                                                    GALGAS_lstringlist inOperand2,
                                                    GALGAS_generationKind inOperand3,
                                                    GALGAS_outletClassBindingList inOperand4,
                                                    GALGAS_bool inOperand5,
                                                    GALGAS_lstringlist inOperand6
                                                    COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid () && inOperand6.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_outletClassList (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5, inOperand6 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletClassList::modifier_popFirst (GALGAS_lstring & outOperand0,
                                                GALGAS_lstring & outOperand1,
                                                GALGAS_lstringlist & outOperand2,
                                                GALGAS_generationKind & outOperand3,
                                                GALGAS_outletClassBindingList & outOperand4,
                                                GALGAS_bool & outOperand5,
                                                GALGAS_lstringlist & outOperand6,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletClassList * p = (cCollectionElement_outletClassList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
    outOperand6.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletClassList) ;
    outOperand0 = p->mObject.mAttribute_mOutletClassName ;
    outOperand1 = p->mObject.mAttribute_mSuperClassName ;
    outOperand2 = p->mObject.mAttribute_mAdoptedProtocolList ;
    outOperand3 = p->mObject.mAttribute_mGeneration ;
    outOperand4 = p->mObject.mAttribute_mOutletClassBindingList ;
    outOperand5 = p->mObject.mAttribute_mHasTableValueBinding ;
    outOperand6 = p->mObject.mAttribute_mOptionList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletClassList::modifier_popLast (GALGAS_lstring & outOperand0,
                                               GALGAS_lstring & outOperand1,
                                               GALGAS_lstringlist & outOperand2,
                                               GALGAS_generationKind & outOperand3,
                                               GALGAS_outletClassBindingList & outOperand4,
                                               GALGAS_bool & outOperand5,
                                               GALGAS_lstringlist & outOperand6,
                                               C_Compiler * inCompiler
                                               COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletClassList * p = (cCollectionElement_outletClassList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
    outOperand6.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletClassList) ;
    macroUniqueSharedObject (p) ;
    outOperand0 = p->mObject.mAttribute_mOutletClassName ;
    outOperand1 = p->mObject.mAttribute_mSuperClassName ;
    outOperand2 = p->mObject.mAttribute_mAdoptedProtocolList ;
    outOperand3 = p->mObject.mAttribute_mGeneration ;
    outOperand4 = p->mObject.mAttribute_mOutletClassBindingList ;
    outOperand5 = p->mObject.mAttribute_mHasTableValueBinding ;
    outOperand6 = p->mObject.mAttribute_mOptionList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletClassList::method_first (GALGAS_lstring & outOperand0,
                                           GALGAS_lstring & outOperand1,
                                           GALGAS_lstringlist & outOperand2,
                                           GALGAS_generationKind & outOperand3,
                                           GALGAS_outletClassBindingList & outOperand4,
                                           GALGAS_bool & outOperand5,
                                           GALGAS_lstringlist & outOperand6,
                                           C_Compiler * inCompiler
                                           COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletClassList * p = (cCollectionElement_outletClassList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
    outOperand6.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletClassList) ;
    outOperand0 = p->mObject.mAttribute_mOutletClassName ;
    outOperand1 = p->mObject.mAttribute_mSuperClassName ;
    outOperand2 = p->mObject.mAttribute_mAdoptedProtocolList ;
    outOperand3 = p->mObject.mAttribute_mGeneration ;
    outOperand4 = p->mObject.mAttribute_mOutletClassBindingList ;
    outOperand5 = p->mObject.mAttribute_mHasTableValueBinding ;
    outOperand6 = p->mObject.mAttribute_mOptionList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletClassList::method_last (GALGAS_lstring & outOperand0,
                                          GALGAS_lstring & outOperand1,
                                          GALGAS_lstringlist & outOperand2,
                                          GALGAS_generationKind & outOperand3,
                                          GALGAS_outletClassBindingList & outOperand4,
                                          GALGAS_bool & outOperand5,
                                          GALGAS_lstringlist & outOperand6,
                                          C_Compiler * inCompiler
                                          COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletClassList * p = (cCollectionElement_outletClassList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
    outOperand6.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletClassList) ;
    outOperand0 = p->mObject.mAttribute_mOutletClassName ;
    outOperand1 = p->mObject.mAttribute_mSuperClassName ;
    outOperand2 = p->mObject.mAttribute_mAdoptedProtocolList ;
    outOperand3 = p->mObject.mAttribute_mGeneration ;
    outOperand4 = p->mObject.mAttribute_mOutletClassBindingList ;
    outOperand5 = p->mObject.mAttribute_mHasTableValueBinding ;
    outOperand6 = p->mObject.mAttribute_mOptionList ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_outletClassList GALGAS_outletClassList::operator_concat (const GALGAS_outletClassList & inOperand
                                                                COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_outletClassList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletClassList GALGAS_outletClassList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) const {
  GALGAS_outletClassList result = GALGAS_outletClassList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletClassList GALGAS_outletClassList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) const {
  GALGAS_outletClassList result = GALGAS_outletClassList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_outletClassList::dotAssign_operation (const GALGAS_outletClassList inOperand
                                                  COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_outletClassList::reader_mOutletClassNameAtIndex (const GALGAS_uint & inIndex,
                                                                       C_Compiler * inCompiler
                                                                       COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_outletClassList * p = (cCollectionElement_outletClassList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_outletClassList) ;
    result = p->mObject.mAttribute_mOutletClassName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_outletClassList::reader_mSuperClassNameAtIndex (const GALGAS_uint & inIndex,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_outletClassList * p = (cCollectionElement_outletClassList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_outletClassList) ;
    result = p->mObject.mAttribute_mSuperClassName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstringlist GALGAS_outletClassList::reader_mAdoptedProtocolListAtIndex (const GALGAS_uint & inIndex,
                                                                               C_Compiler * inCompiler
                                                                               COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_outletClassList * p = (cCollectionElement_outletClassList *) attributes.ptr () ;
  GALGAS_lstringlist result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_outletClassList) ;
    result = p->mObject.mAttribute_mAdoptedProtocolList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_generationKind GALGAS_outletClassList::reader_mGenerationAtIndex (const GALGAS_uint & inIndex,
                                                                         C_Compiler * inCompiler
                                                                         COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_outletClassList * p = (cCollectionElement_outletClassList *) attributes.ptr () ;
  GALGAS_generationKind result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_outletClassList) ;
    result = p->mObject.mAttribute_mGeneration ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletClassBindingList GALGAS_outletClassList::reader_mOutletClassBindingListAtIndex (const GALGAS_uint & inIndex,
                                                                                             C_Compiler * inCompiler
                                                                                             COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_outletClassList * p = (cCollectionElement_outletClassList *) attributes.ptr () ;
  GALGAS_outletClassBindingList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_outletClassList) ;
    result = p->mObject.mAttribute_mOutletClassBindingList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_outletClassList::reader_mHasTableValueBindingAtIndex (const GALGAS_uint & inIndex,
                                                                         C_Compiler * inCompiler
                                                                         COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_outletClassList * p = (cCollectionElement_outletClassList *) attributes.ptr () ;
  GALGAS_bool result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_outletClassList) ;
    result = p->mObject.mAttribute_mHasTableValueBinding ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstringlist GALGAS_outletClassList::reader_mOptionListAtIndex (const GALGAS_uint & inIndex,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_outletClassList * p = (cCollectionElement_outletClassList *) attributes.ptr () ;
  GALGAS_lstringlist result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_outletClassList) ;
    result = p->mObject.mAttribute_mOptionList ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_outletClassList::cEnumerator_outletClassList (const GALGAS_outletClassList & inEnumeratedObject,
                                                          const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_outletClassList_2E_element cEnumerator_outletClassList::current (LOCATION_ARGS) const {
  const cCollectionElement_outletClassList * p = (const cCollectionElement_outletClassList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_outletClassList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_outletClassList::current_mOutletClassName (LOCATION_ARGS) const {
  const cCollectionElement_outletClassList * p = (const cCollectionElement_outletClassList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_outletClassList) ;
  return p->mObject.mAttribute_mOutletClassName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_outletClassList::current_mSuperClassName (LOCATION_ARGS) const {
  const cCollectionElement_outletClassList * p = (const cCollectionElement_outletClassList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_outletClassList) ;
  return p->mObject.mAttribute_mSuperClassName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstringlist cEnumerator_outletClassList::current_mAdoptedProtocolList (LOCATION_ARGS) const {
  const cCollectionElement_outletClassList * p = (const cCollectionElement_outletClassList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_outletClassList) ;
  return p->mObject.mAttribute_mAdoptedProtocolList ;
}

//---------------------------------------------------------------------------*

GALGAS_generationKind cEnumerator_outletClassList::current_mGeneration (LOCATION_ARGS) const {
  const cCollectionElement_outletClassList * p = (const cCollectionElement_outletClassList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_outletClassList) ;
  return p->mObject.mAttribute_mGeneration ;
}

//---------------------------------------------------------------------------*

GALGAS_outletClassBindingList cEnumerator_outletClassList::current_mOutletClassBindingList (LOCATION_ARGS) const {
  const cCollectionElement_outletClassList * p = (const cCollectionElement_outletClassList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_outletClassList) ;
  return p->mObject.mAttribute_mOutletClassBindingList ;
}

//---------------------------------------------------------------------------*

GALGAS_bool cEnumerator_outletClassList::current_mHasTableValueBinding (LOCATION_ARGS) const {
  const cCollectionElement_outletClassList * p = (const cCollectionElement_outletClassList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_outletClassList) ;
  return p->mObject.mAttribute_mHasTableValueBinding ;
}

//---------------------------------------------------------------------------*

GALGAS_lstringlist cEnumerator_outletClassList::current_mOptionList (LOCATION_ARGS) const {
  const cCollectionElement_outletClassList * p = (const cCollectionElement_outletClassList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_outletClassList) ;
  return p->mObject.mAttribute_mOptionList ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                           @outletClassList type                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_outletClassList ("outletClassList",
                                        NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_outletClassList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_outletClassList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_outletClassList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_outletClassList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletClassList GALGAS_outletClassList::extractObject (const GALGAS_object & inObject,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) {
  GALGAS_outletClassList result ;
  const GALGAS_outletClassList * p = (const GALGAS_outletClassList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_outletClassList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("outletClassList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Class for element of '@controllerObservablePropertyList' list       *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_controllerObservablePropertyList : public cCollectionElement {
  public : GALGAS_controllerObservablePropertyList_2E_element mObject ;

//--- Constructor
  public : cCollectionElement_controllerObservablePropertyList (const GALGAS_attributeASTType & in_mType,
                                                                const GALGAS_lstring & in_mTypeName,
                                                                const GALGAS_lstring & in_mPropertyName
                                                                COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_controllerObservablePropertyList::cCollectionElement_controllerObservablePropertyList (const GALGAS_attributeASTType & in_mType,
                                                                                                          const GALGAS_lstring & in_mTypeName,
                                                                                                          const GALGAS_lstring & in_mPropertyName
                                                                                                          COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mType, in_mTypeName, in_mPropertyName) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_controllerObservablePropertyList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_controllerObservablePropertyList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_controllerObservablePropertyList (mObject.mAttribute_mType, mObject.mAttribute_mTypeName, mObject.mAttribute_mPropertyName COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_controllerObservablePropertyList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mType" ":" ;
  mObject.mAttribute_mType.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mTypeName" ":" ;
  mObject.mAttribute_mTypeName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mPropertyName" ":" ;
  mObject.mAttribute_mPropertyName.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_controllerObservablePropertyList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_controllerObservablePropertyList * operand = (cCollectionElement_controllerObservablePropertyList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_controllerObservablePropertyList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerObservablePropertyList::GALGAS_controllerObservablePropertyList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_controllerObservablePropertyList::GALGAS_controllerObservablePropertyList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_controllerObservablePropertyList GALGAS_controllerObservablePropertyList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_controllerObservablePropertyList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerObservablePropertyList GALGAS_controllerObservablePropertyList::constructor_listWithValue (const GALGAS_attributeASTType & inOperand0,
                                                                                                            const GALGAS_lstring & inOperand1,
                                                                                                            const GALGAS_lstring & inOperand2
                                                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_controllerObservablePropertyList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_controllerObservablePropertyList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_controllerObservablePropertyList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                                         const GALGAS_attributeASTType & in_mType,
                                                                         const GALGAS_lstring & in_mTypeName,
                                                                         const GALGAS_lstring & in_mPropertyName
                                                                         COMMA_LOCATION_ARGS) {
  cCollectionElement_controllerObservablePropertyList * p = NULL ;
  macroMyNew (p, cCollectionElement_controllerObservablePropertyList (in_mType,
                                                                      in_mTypeName,
                                                                      in_mPropertyName COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_controllerObservablePropertyList::addAssign_operation (const GALGAS_attributeASTType & inOperand0,
                                                                   const GALGAS_lstring & inOperand1,
                                                                   const GALGAS_lstring & inOperand2
                                                                   COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_controllerObservablePropertyList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_controllerObservablePropertyList::modifier_prependValue (GALGAS_attributeASTType inOperand0,
                                                                     GALGAS_lstring inOperand1,
                                                                     GALGAS_lstring inOperand2
                                                                     COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_controllerObservablePropertyList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_controllerObservablePropertyList::modifier_popFirst (GALGAS_attributeASTType & outOperand0,
                                                                 GALGAS_lstring & outOperand1,
                                                                 GALGAS_lstring & outOperand2,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerObservablePropertyList * p = (cCollectionElement_controllerObservablePropertyList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_controllerObservablePropertyList) ;
    outOperand0 = p->mObject.mAttribute_mType ;
    outOperand1 = p->mObject.mAttribute_mTypeName ;
    outOperand2 = p->mObject.mAttribute_mPropertyName ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_controllerObservablePropertyList::modifier_popLast (GALGAS_attributeASTType & outOperand0,
                                                                GALGAS_lstring & outOperand1,
                                                                GALGAS_lstring & outOperand2,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerObservablePropertyList * p = (cCollectionElement_controllerObservablePropertyList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_controllerObservablePropertyList) ;
    macroUniqueSharedObject (p) ;
    outOperand0 = p->mObject.mAttribute_mType ;
    outOperand1 = p->mObject.mAttribute_mTypeName ;
    outOperand2 = p->mObject.mAttribute_mPropertyName ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_controllerObservablePropertyList::method_first (GALGAS_attributeASTType & outOperand0,
                                                            GALGAS_lstring & outOperand1,
                                                            GALGAS_lstring & outOperand2,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerObservablePropertyList * p = (cCollectionElement_controllerObservablePropertyList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_controllerObservablePropertyList) ;
    outOperand0 = p->mObject.mAttribute_mType ;
    outOperand1 = p->mObject.mAttribute_mTypeName ;
    outOperand2 = p->mObject.mAttribute_mPropertyName ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_controllerObservablePropertyList::method_last (GALGAS_attributeASTType & outOperand0,
                                                           GALGAS_lstring & outOperand1,
                                                           GALGAS_lstring & outOperand2,
                                                           C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerObservablePropertyList * p = (cCollectionElement_controllerObservablePropertyList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_controllerObservablePropertyList) ;
    outOperand0 = p->mObject.mAttribute_mType ;
    outOperand1 = p->mObject.mAttribute_mTypeName ;
    outOperand2 = p->mObject.mAttribute_mPropertyName ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_controllerObservablePropertyList GALGAS_controllerObservablePropertyList::operator_concat (const GALGAS_controllerObservablePropertyList & inOperand
                                                                                                  COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_controllerObservablePropertyList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerObservablePropertyList GALGAS_controllerObservablePropertyList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                                                          C_Compiler * inCompiler
                                                                                                          COMMA_LOCATION_ARGS) const {
  GALGAS_controllerObservablePropertyList result = GALGAS_controllerObservablePropertyList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerObservablePropertyList GALGAS_controllerObservablePropertyList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                                          C_Compiler * inCompiler
                                                                                                          COMMA_LOCATION_ARGS) const {
  GALGAS_controllerObservablePropertyList result = GALGAS_controllerObservablePropertyList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_controllerObservablePropertyList::dotAssign_operation (const GALGAS_controllerObservablePropertyList inOperand
                                                                   COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTType GALGAS_controllerObservablePropertyList::reader_mTypeAtIndex (const GALGAS_uint & inIndex,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerObservablePropertyList * p = (cCollectionElement_controllerObservablePropertyList *) attributes.ptr () ;
  GALGAS_attributeASTType result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_controllerObservablePropertyList) ;
    result = p->mObject.mAttribute_mType ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_controllerObservablePropertyList::reader_mTypeNameAtIndex (const GALGAS_uint & inIndex,
                                                                                 C_Compiler * inCompiler
                                                                                 COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerObservablePropertyList * p = (cCollectionElement_controllerObservablePropertyList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_controllerObservablePropertyList) ;
    result = p->mObject.mAttribute_mTypeName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_controllerObservablePropertyList::reader_mPropertyNameAtIndex (const GALGAS_uint & inIndex,
                                                                                     C_Compiler * inCompiler
                                                                                     COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerObservablePropertyList * p = (cCollectionElement_controllerObservablePropertyList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_controllerObservablePropertyList) ;
    result = p->mObject.mAttribute_mPropertyName ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_controllerObservablePropertyList::cEnumerator_controllerObservablePropertyList (const GALGAS_controllerObservablePropertyList & inEnumeratedObject,
                                                                                            const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerObservablePropertyList_2E_element cEnumerator_controllerObservablePropertyList::current (LOCATION_ARGS) const {
  const cCollectionElement_controllerObservablePropertyList * p = (const cCollectionElement_controllerObservablePropertyList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_controllerObservablePropertyList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------*

GALGAS_attributeASTType cEnumerator_controllerObservablePropertyList::current_mType (LOCATION_ARGS) const {
  const cCollectionElement_controllerObservablePropertyList * p = (const cCollectionElement_controllerObservablePropertyList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_controllerObservablePropertyList) ;
  return p->mObject.mAttribute_mType ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_controllerObservablePropertyList::current_mTypeName (LOCATION_ARGS) const {
  const cCollectionElement_controllerObservablePropertyList * p = (const cCollectionElement_controllerObservablePropertyList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_controllerObservablePropertyList) ;
  return p->mObject.mAttribute_mTypeName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_controllerObservablePropertyList::current_mPropertyName (LOCATION_ARGS) const {
  const cCollectionElement_controllerObservablePropertyList * p = (const cCollectionElement_controllerObservablePropertyList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_controllerObservablePropertyList) ;
  return p->mObject.mAttribute_mPropertyName ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                  @controllerObservablePropertyList type                   *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_controllerObservablePropertyList ("controllerObservablePropertyList",
                                                         NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_controllerObservablePropertyList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_controllerObservablePropertyList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_controllerObservablePropertyList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_controllerObservablePropertyList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerObservablePropertyList GALGAS_controllerObservablePropertyList::extractObject (const GALGAS_object & inObject,
                                                                                                C_Compiler * inCompiler
                                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_controllerObservablePropertyList result ;
  const GALGAS_controllerObservablePropertyList * p = (const GALGAS_controllerObservablePropertyList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_controllerObservablePropertyList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("controllerObservablePropertyList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Class for element of '@protocolList' list                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_protocolList : public cCollectionElement {
  public : GALGAS_protocolList_2E_element mObject ;

//--- Constructor
  public : cCollectionElement_protocolList (const GALGAS_bool & in_mIsPredefined,
                                            const GALGAS_lstring & in_mProtocolName
                                            COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_protocolList::cCollectionElement_protocolList (const GALGAS_bool & in_mIsPredefined,
                                                                  const GALGAS_lstring & in_mProtocolName
                                                                  COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mIsPredefined, in_mProtocolName) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_protocolList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_protocolList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_protocolList (mObject.mAttribute_mIsPredefined, mObject.mAttribute_mProtocolName COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_protocolList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mIsPredefined" ":" ;
  mObject.mAttribute_mIsPredefined.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mProtocolName" ":" ;
  mObject.mAttribute_mProtocolName.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_protocolList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_protocolList * operand = (cCollectionElement_protocolList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_protocolList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------*

GALGAS_protocolList::GALGAS_protocolList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_protocolList::GALGAS_protocolList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_protocolList GALGAS_protocolList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_protocolList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_protocolList GALGAS_protocolList::constructor_listWithValue (const GALGAS_bool & inOperand0,
                                                                    const GALGAS_lstring & inOperand1
                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_protocolList result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_protocolList::makeAttributesFromObjects (attributes, inOperand0, inOperand1 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_protocolList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                     const GALGAS_bool & in_mIsPredefined,
                                                     const GALGAS_lstring & in_mProtocolName
                                                     COMMA_LOCATION_ARGS) {
  cCollectionElement_protocolList * p = NULL ;
  macroMyNew (p, cCollectionElement_protocolList (in_mIsPredefined,
                                                  in_mProtocolName COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_protocolList::addAssign_operation (const GALGAS_bool & inOperand0,
                                               const GALGAS_lstring & inOperand1
                                               COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_protocolList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_protocolList::modifier_prependValue (GALGAS_bool inOperand0,
                                                 GALGAS_lstring inOperand1
                                                 COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_protocolList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_protocolList::modifier_popFirst (GALGAS_bool & outOperand0,
                                             GALGAS_lstring & outOperand1,
                                             C_Compiler * inCompiler
                                             COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_protocolList * p = (cCollectionElement_protocolList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_protocolList) ;
    outOperand0 = p->mObject.mAttribute_mIsPredefined ;
    outOperand1 = p->mObject.mAttribute_mProtocolName ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_protocolList::modifier_popLast (GALGAS_bool & outOperand0,
                                            GALGAS_lstring & outOperand1,
                                            C_Compiler * inCompiler
                                            COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_protocolList * p = (cCollectionElement_protocolList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_protocolList) ;
    macroUniqueSharedObject (p) ;
    outOperand0 = p->mObject.mAttribute_mIsPredefined ;
    outOperand1 = p->mObject.mAttribute_mProtocolName ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_protocolList::method_first (GALGAS_bool & outOperand0,
                                        GALGAS_lstring & outOperand1,
                                        C_Compiler * inCompiler
                                        COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_protocolList * p = (cCollectionElement_protocolList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_protocolList) ;
    outOperand0 = p->mObject.mAttribute_mIsPredefined ;
    outOperand1 = p->mObject.mAttribute_mProtocolName ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_protocolList::method_last (GALGAS_bool & outOperand0,
                                       GALGAS_lstring & outOperand1,
                                       C_Compiler * inCompiler
                                       COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_protocolList * p = (cCollectionElement_protocolList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_protocolList) ;
    outOperand0 = p->mObject.mAttribute_mIsPredefined ;
    outOperand1 = p->mObject.mAttribute_mProtocolName ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_protocolList GALGAS_protocolList::operator_concat (const GALGAS_protocolList & inOperand
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_protocolList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_protocolList GALGAS_protocolList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                  C_Compiler * inCompiler
                                                                  COMMA_LOCATION_ARGS) const {
  GALGAS_protocolList result = GALGAS_protocolList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_protocolList GALGAS_protocolList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                  C_Compiler * inCompiler
                                                                  COMMA_LOCATION_ARGS) const {
  GALGAS_protocolList result = GALGAS_protocolList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_protocolList::dotAssign_operation (const GALGAS_protocolList inOperand
                                               COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_protocolList::reader_mIsPredefinedAtIndex (const GALGAS_uint & inIndex,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_protocolList * p = (cCollectionElement_protocolList *) attributes.ptr () ;
  GALGAS_bool result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_protocolList) ;
    result = p->mObject.mAttribute_mIsPredefined ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_protocolList::reader_mProtocolNameAtIndex (const GALGAS_uint & inIndex,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_protocolList * p = (cCollectionElement_protocolList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_protocolList) ;
    result = p->mObject.mAttribute_mProtocolName ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_protocolList::cEnumerator_protocolList (const GALGAS_protocolList & inEnumeratedObject,
                                                    const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_protocolList_2E_element cEnumerator_protocolList::current (LOCATION_ARGS) const {
  const cCollectionElement_protocolList * p = (const cCollectionElement_protocolList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_protocolList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------*

GALGAS_bool cEnumerator_protocolList::current_mIsPredefined (LOCATION_ARGS) const {
  const cCollectionElement_protocolList * p = (const cCollectionElement_protocolList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_protocolList) ;
  return p->mObject.mAttribute_mIsPredefined ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_protocolList::current_mProtocolName (LOCATION_ARGS) const {
  const cCollectionElement_protocolList * p = (const cCollectionElement_protocolList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_protocolList) ;
  return p->mObject.mAttribute_mProtocolName ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                            @protocolList type                             *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_protocolList ("protocolList",
                                     NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_protocolList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_protocolList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_protocolList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_protocolList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_protocolList GALGAS_protocolList::extractObject (const GALGAS_object & inObject,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) {
  GALGAS_protocolList result ;
  const GALGAS_protocolList * p = (const GALGAS_protocolList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_protocolList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("protocolList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerKind::GALGAS_controllerKind (void) :
mEnum (kNotBuilt) {
}

//---------------------------------------------------------------------------*

GALGAS_controllerKind GALGAS_controllerKind::constructor_simpleController (UNUSED_LOCATION_ARGS) {
  GALGAS_controllerKind result ;
  result.mEnum = kEnum_simpleController ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerKind GALGAS_controllerKind::constructor_objectController (UNUSED_LOCATION_ARGS) {
  GALGAS_controllerKind result ;
  result.mEnum = kEnum_objectController ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerKind GALGAS_controllerKind::constructor_arrayController (UNUSED_LOCATION_ARGS) {
  GALGAS_controllerKind result ;
  result.mEnum = kEnum_arrayController ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerKind GALGAS_controllerKind::constructor_entityController (UNUSED_LOCATION_ARGS) {
  GALGAS_controllerKind result ;
  result.mEnum = kEnum_entityController ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerKind GALGAS_controllerKind::constructor_entityArrayController (UNUSED_LOCATION_ARGS) {
  GALGAS_controllerKind result ;
  result.mEnum = kEnum_entityArrayController ;
  return result ;
}

//---------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_controllerKind [6] = {
  "(not built)",
  "simpleController",
  "objectController",
  "arrayController",
  "entityController",
  "entityArrayController"
} ;

//---------------------------------------------------------------------------*

void GALGAS_controllerKind::description (C_String & ioString,
                                         const PMSInt32 /* inIndentation */) const {
  ioString << "<enum @controllerKind: " << gEnumNameArrayFor_controllerKind [mEnum] << ">" ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_controllerKind::objectCompare (const GALGAS_controllerKind & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = kOperandEqual ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                           @controllerKind type                            *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_controllerKind ("controllerKind",
                                       NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_controllerKind::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_controllerKind ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_controllerKind::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_controllerKind (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerKind GALGAS_controllerKind::extractObject (const GALGAS_object & inObject,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) {
  GALGAS_controllerKind result ;
  const GALGAS_controllerKind * p = (const GALGAS_controllerKind *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_controllerKind *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("controllerKind", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Class for element of '@controllerClassList' list              *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_controllerClassList : public cCollectionElement {
  public : GALGAS_controllerClassList_2E_element mObject ;

//--- Constructor
  public : cCollectionElement_controllerClassList (const GALGAS_controllerKind & in_mControllerKind,
                                                   const GALGAS_lstring & in_mControllerClassName,
                                                   const GALGAS_bindingOptionList & in_mControlledObjectBindingOptionList,
                                                   const GALGAS_generationKind & in_mGenerationKind,
                                                   const GALGAS_outletClassBindingList & in_mBindingList,
                                                   const GALGAS_lstringlist & in_mActionDeclarationList,
                                                   const GALGAS_controllerObservablePropertyList & in_mControllerObservablePropertyList
                                                   COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_controllerClassList::cCollectionElement_controllerClassList (const GALGAS_controllerKind & in_mControllerKind,
                                                                                const GALGAS_lstring & in_mControllerClassName,
                                                                                const GALGAS_bindingOptionList & in_mControlledObjectBindingOptionList,
                                                                                const GALGAS_generationKind & in_mGenerationKind,
                                                                                const GALGAS_outletClassBindingList & in_mBindingList,
                                                                                const GALGAS_lstringlist & in_mActionDeclarationList,
                                                                                const GALGAS_controllerObservablePropertyList & in_mControllerObservablePropertyList
                                                                                COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mControllerKind, in_mControllerClassName, in_mControlledObjectBindingOptionList, in_mGenerationKind, in_mBindingList, in_mActionDeclarationList, in_mControllerObservablePropertyList) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_controllerClassList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_controllerClassList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_controllerClassList (mObject.mAttribute_mControllerKind, mObject.mAttribute_mControllerClassName, mObject.mAttribute_mControlledObjectBindingOptionList, mObject.mAttribute_mGenerationKind, mObject.mAttribute_mBindingList, mObject.mAttribute_mActionDeclarationList, mObject.mAttribute_mControllerObservablePropertyList COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_controllerClassList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mControllerKind" ":" ;
  mObject.mAttribute_mControllerKind.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mControllerClassName" ":" ;
  mObject.mAttribute_mControllerClassName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mControlledObjectBindingOptionList" ":" ;
  mObject.mAttribute_mControlledObjectBindingOptionList.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mGenerationKind" ":" ;
  mObject.mAttribute_mGenerationKind.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mBindingList" ":" ;
  mObject.mAttribute_mBindingList.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mActionDeclarationList" ":" ;
  mObject.mAttribute_mActionDeclarationList.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mControllerObservablePropertyList" ":" ;
  mObject.mAttribute_mControllerObservablePropertyList.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_controllerClassList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_controllerClassList * operand = (cCollectionElement_controllerClassList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_controllerClassList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerClassList::GALGAS_controllerClassList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_controllerClassList::GALGAS_controllerClassList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_controllerClassList GALGAS_controllerClassList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_controllerClassList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerClassList GALGAS_controllerClassList::constructor_listWithValue (const GALGAS_controllerKind & inOperand0,
                                                                                  const GALGAS_lstring & inOperand1,
                                                                                  const GALGAS_bindingOptionList & inOperand2,
                                                                                  const GALGAS_generationKind & inOperand3,
                                                                                  const GALGAS_outletClassBindingList & inOperand4,
                                                                                  const GALGAS_lstringlist & inOperand5,
                                                                                  const GALGAS_controllerObservablePropertyList & inOperand6
                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_controllerClassList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid () && inOperand6.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_controllerClassList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5, inOperand6 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_controllerClassList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                            const GALGAS_controllerKind & in_mControllerKind,
                                                            const GALGAS_lstring & in_mControllerClassName,
                                                            const GALGAS_bindingOptionList & in_mControlledObjectBindingOptionList,
                                                            const GALGAS_generationKind & in_mGenerationKind,
                                                            const GALGAS_outletClassBindingList & in_mBindingList,
                                                            const GALGAS_lstringlist & in_mActionDeclarationList,
                                                            const GALGAS_controllerObservablePropertyList & in_mControllerObservablePropertyList
                                                            COMMA_LOCATION_ARGS) {
  cCollectionElement_controllerClassList * p = NULL ;
  macroMyNew (p, cCollectionElement_controllerClassList (in_mControllerKind,
                                                         in_mControllerClassName,
                                                         in_mControlledObjectBindingOptionList,
                                                         in_mGenerationKind,
                                                         in_mBindingList,
                                                         in_mActionDeclarationList,
                                                         in_mControllerObservablePropertyList COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_controllerClassList::addAssign_operation (const GALGAS_controllerKind & inOperand0,
                                                      const GALGAS_lstring & inOperand1,
                                                      const GALGAS_bindingOptionList & inOperand2,
                                                      const GALGAS_generationKind & inOperand3,
                                                      const GALGAS_outletClassBindingList & inOperand4,
                                                      const GALGAS_lstringlist & inOperand5,
                                                      const GALGAS_controllerObservablePropertyList & inOperand6
                                                      COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid () && inOperand6.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_controllerClassList (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5, inOperand6 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_controllerClassList::modifier_prependValue (GALGAS_controllerKind inOperand0,
                                                        GALGAS_lstring inOperand1,
                                                        GALGAS_bindingOptionList inOperand2,
                                                        GALGAS_generationKind inOperand3,
                                                        GALGAS_outletClassBindingList inOperand4,
                                                        GALGAS_lstringlist inOperand5,
                                                        GALGAS_controllerObservablePropertyList inOperand6
                                                        COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid () && inOperand6.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_controllerClassList (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5, inOperand6 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_controllerClassList::modifier_popFirst (GALGAS_controllerKind & outOperand0,
                                                    GALGAS_lstring & outOperand1,
                                                    GALGAS_bindingOptionList & outOperand2,
                                                    GALGAS_generationKind & outOperand3,
                                                    GALGAS_outletClassBindingList & outOperand4,
                                                    GALGAS_lstringlist & outOperand5,
                                                    GALGAS_controllerObservablePropertyList & outOperand6,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerClassList * p = (cCollectionElement_controllerClassList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
    outOperand6.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_controllerClassList) ;
    outOperand0 = p->mObject.mAttribute_mControllerKind ;
    outOperand1 = p->mObject.mAttribute_mControllerClassName ;
    outOperand2 = p->mObject.mAttribute_mControlledObjectBindingOptionList ;
    outOperand3 = p->mObject.mAttribute_mGenerationKind ;
    outOperand4 = p->mObject.mAttribute_mBindingList ;
    outOperand5 = p->mObject.mAttribute_mActionDeclarationList ;
    outOperand6 = p->mObject.mAttribute_mControllerObservablePropertyList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_controllerClassList::modifier_popLast (GALGAS_controllerKind & outOperand0,
                                                   GALGAS_lstring & outOperand1,
                                                   GALGAS_bindingOptionList & outOperand2,
                                                   GALGAS_generationKind & outOperand3,
                                                   GALGAS_outletClassBindingList & outOperand4,
                                                   GALGAS_lstringlist & outOperand5,
                                                   GALGAS_controllerObservablePropertyList & outOperand6,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerClassList * p = (cCollectionElement_controllerClassList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
    outOperand6.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_controllerClassList) ;
    macroUniqueSharedObject (p) ;
    outOperand0 = p->mObject.mAttribute_mControllerKind ;
    outOperand1 = p->mObject.mAttribute_mControllerClassName ;
    outOperand2 = p->mObject.mAttribute_mControlledObjectBindingOptionList ;
    outOperand3 = p->mObject.mAttribute_mGenerationKind ;
    outOperand4 = p->mObject.mAttribute_mBindingList ;
    outOperand5 = p->mObject.mAttribute_mActionDeclarationList ;
    outOperand6 = p->mObject.mAttribute_mControllerObservablePropertyList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_controllerClassList::method_first (GALGAS_controllerKind & outOperand0,
                                               GALGAS_lstring & outOperand1,
                                               GALGAS_bindingOptionList & outOperand2,
                                               GALGAS_generationKind & outOperand3,
                                               GALGAS_outletClassBindingList & outOperand4,
                                               GALGAS_lstringlist & outOperand5,
                                               GALGAS_controllerObservablePropertyList & outOperand6,
                                               C_Compiler * inCompiler
                                               COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerClassList * p = (cCollectionElement_controllerClassList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
    outOperand6.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_controllerClassList) ;
    outOperand0 = p->mObject.mAttribute_mControllerKind ;
    outOperand1 = p->mObject.mAttribute_mControllerClassName ;
    outOperand2 = p->mObject.mAttribute_mControlledObjectBindingOptionList ;
    outOperand3 = p->mObject.mAttribute_mGenerationKind ;
    outOperand4 = p->mObject.mAttribute_mBindingList ;
    outOperand5 = p->mObject.mAttribute_mActionDeclarationList ;
    outOperand6 = p->mObject.mAttribute_mControllerObservablePropertyList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_controllerClassList::method_last (GALGAS_controllerKind & outOperand0,
                                              GALGAS_lstring & outOperand1,
                                              GALGAS_bindingOptionList & outOperand2,
                                              GALGAS_generationKind & outOperand3,
                                              GALGAS_outletClassBindingList & outOperand4,
                                              GALGAS_lstringlist & outOperand5,
                                              GALGAS_controllerObservablePropertyList & outOperand6,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerClassList * p = (cCollectionElement_controllerClassList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
    outOperand6.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_controllerClassList) ;
    outOperand0 = p->mObject.mAttribute_mControllerKind ;
    outOperand1 = p->mObject.mAttribute_mControllerClassName ;
    outOperand2 = p->mObject.mAttribute_mControlledObjectBindingOptionList ;
    outOperand3 = p->mObject.mAttribute_mGenerationKind ;
    outOperand4 = p->mObject.mAttribute_mBindingList ;
    outOperand5 = p->mObject.mAttribute_mActionDeclarationList ;
    outOperand6 = p->mObject.mAttribute_mControllerObservablePropertyList ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_controllerClassList GALGAS_controllerClassList::operator_concat (const GALGAS_controllerClassList & inOperand
                                                                        COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_controllerClassList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerClassList GALGAS_controllerClassList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_LOCATION_ARGS) const {
  GALGAS_controllerClassList result = GALGAS_controllerClassList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerClassList GALGAS_controllerClassList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_LOCATION_ARGS) const {
  GALGAS_controllerClassList result = GALGAS_controllerClassList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_controllerClassList::dotAssign_operation (const GALGAS_controllerClassList inOperand
                                                      COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerKind GALGAS_controllerClassList::reader_mControllerKindAtIndex (const GALGAS_uint & inIndex,
                                                                                 C_Compiler * inCompiler
                                                                                 COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerClassList * p = (cCollectionElement_controllerClassList *) attributes.ptr () ;
  GALGAS_controllerKind result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_controllerClassList) ;
    result = p->mObject.mAttribute_mControllerKind ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_controllerClassList::reader_mControllerClassNameAtIndex (const GALGAS_uint & inIndex,
                                                                               C_Compiler * inCompiler
                                                                               COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerClassList * p = (cCollectionElement_controllerClassList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_controllerClassList) ;
    result = p->mObject.mAttribute_mControllerClassName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bindingOptionList GALGAS_controllerClassList::reader_mControlledObjectBindingOptionListAtIndex (const GALGAS_uint & inIndex,
                                                                                                       C_Compiler * inCompiler
                                                                                                       COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerClassList * p = (cCollectionElement_controllerClassList *) attributes.ptr () ;
  GALGAS_bindingOptionList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_controllerClassList) ;
    result = p->mObject.mAttribute_mControlledObjectBindingOptionList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_generationKind GALGAS_controllerClassList::reader_mGenerationKindAtIndex (const GALGAS_uint & inIndex,
                                                                                 C_Compiler * inCompiler
                                                                                 COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerClassList * p = (cCollectionElement_controllerClassList *) attributes.ptr () ;
  GALGAS_generationKind result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_controllerClassList) ;
    result = p->mObject.mAttribute_mGenerationKind ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletClassBindingList GALGAS_controllerClassList::reader_mBindingListAtIndex (const GALGAS_uint & inIndex,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerClassList * p = (cCollectionElement_controllerClassList *) attributes.ptr () ;
  GALGAS_outletClassBindingList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_controllerClassList) ;
    result = p->mObject.mAttribute_mBindingList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstringlist GALGAS_controllerClassList::reader_mActionDeclarationListAtIndex (const GALGAS_uint & inIndex,
                                                                                     C_Compiler * inCompiler
                                                                                     COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerClassList * p = (cCollectionElement_controllerClassList *) attributes.ptr () ;
  GALGAS_lstringlist result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_controllerClassList) ;
    result = p->mObject.mAttribute_mActionDeclarationList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerObservablePropertyList GALGAS_controllerClassList::reader_mControllerObservablePropertyListAtIndex (const GALGAS_uint & inIndex,
                                                                                                                     C_Compiler * inCompiler
                                                                                                                     COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerClassList * p = (cCollectionElement_controllerClassList *) attributes.ptr () ;
  GALGAS_controllerObservablePropertyList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_controllerClassList) ;
    result = p->mObject.mAttribute_mControllerObservablePropertyList ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_controllerClassList::cEnumerator_controllerClassList (const GALGAS_controllerClassList & inEnumeratedObject,
                                                                  const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerClassList_2E_element cEnumerator_controllerClassList::current (LOCATION_ARGS) const {
  const cCollectionElement_controllerClassList * p = (const cCollectionElement_controllerClassList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_controllerClassList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------*

GALGAS_controllerKind cEnumerator_controllerClassList::current_mControllerKind (LOCATION_ARGS) const {
  const cCollectionElement_controllerClassList * p = (const cCollectionElement_controllerClassList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_controllerClassList) ;
  return p->mObject.mAttribute_mControllerKind ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_controllerClassList::current_mControllerClassName (LOCATION_ARGS) const {
  const cCollectionElement_controllerClassList * p = (const cCollectionElement_controllerClassList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_controllerClassList) ;
  return p->mObject.mAttribute_mControllerClassName ;
}

//---------------------------------------------------------------------------*

GALGAS_bindingOptionList cEnumerator_controllerClassList::current_mControlledObjectBindingOptionList (LOCATION_ARGS) const {
  const cCollectionElement_controllerClassList * p = (const cCollectionElement_controllerClassList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_controllerClassList) ;
  return p->mObject.mAttribute_mControlledObjectBindingOptionList ;
}

//---------------------------------------------------------------------------*

GALGAS_generationKind cEnumerator_controllerClassList::current_mGenerationKind (LOCATION_ARGS) const {
  const cCollectionElement_controllerClassList * p = (const cCollectionElement_controllerClassList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_controllerClassList) ;
  return p->mObject.mAttribute_mGenerationKind ;
}

//---------------------------------------------------------------------------*

GALGAS_outletClassBindingList cEnumerator_controllerClassList::current_mBindingList (LOCATION_ARGS) const {
  const cCollectionElement_controllerClassList * p = (const cCollectionElement_controllerClassList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_controllerClassList) ;
  return p->mObject.mAttribute_mBindingList ;
}

//---------------------------------------------------------------------------*

GALGAS_lstringlist cEnumerator_controllerClassList::current_mActionDeclarationList (LOCATION_ARGS) const {
  const cCollectionElement_controllerClassList * p = (const cCollectionElement_controllerClassList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_controllerClassList) ;
  return p->mObject.mAttribute_mActionDeclarationList ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerObservablePropertyList cEnumerator_controllerClassList::current_mControllerObservablePropertyList (LOCATION_ARGS) const {
  const cCollectionElement_controllerClassList * p = (const cCollectionElement_controllerClassList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_controllerClassList) ;
  return p->mObject.mAttribute_mControllerObservablePropertyList ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                         @controllerClassList type                         *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_controllerClassList ("controllerClassList",
                                            NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_controllerClassList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_controllerClassList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_controllerClassList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_controllerClassList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerClassList GALGAS_controllerClassList::extractObject (const GALGAS_object & inObject,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_controllerClassList result ;
  const GALGAS_controllerClassList * p = (const GALGAS_controllerClassList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_controllerClassList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("controllerClassList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Class for element of '@enumList' list                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_enumList : public cCollectionElement {
  public : GALGAS_enumList_2E_element mObject ;

//--- Constructor
  public : cCollectionElement_enumList (const GALGAS_lstring & in_mEnumTypeName,
                                        const GALGAS_lstringlist & in_mEnumConstantNameList
                                        COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_enumList::cCollectionElement_enumList (const GALGAS_lstring & in_mEnumTypeName,
                                                          const GALGAS_lstringlist & in_mEnumConstantNameList
                                                          COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mEnumTypeName, in_mEnumConstantNameList) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_enumList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_enumList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_enumList (mObject.mAttribute_mEnumTypeName, mObject.mAttribute_mEnumConstantNameList COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_enumList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mEnumTypeName" ":" ;
  mObject.mAttribute_mEnumTypeName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mEnumConstantNameList" ":" ;
  mObject.mAttribute_mEnumConstantNameList.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_enumList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_enumList * operand = (cCollectionElement_enumList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_enumList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------*

GALGAS_enumList::GALGAS_enumList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_enumList::GALGAS_enumList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_enumList GALGAS_enumList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_enumList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_enumList GALGAS_enumList::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                            const GALGAS_lstringlist & inOperand1
                                                            COMMA_LOCATION_ARGS) {
  GALGAS_enumList result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_enumList::makeAttributesFromObjects (attributes, inOperand0, inOperand1 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_enumList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                 const GALGAS_lstring & in_mEnumTypeName,
                                                 const GALGAS_lstringlist & in_mEnumConstantNameList
                                                 COMMA_LOCATION_ARGS) {
  cCollectionElement_enumList * p = NULL ;
  macroMyNew (p, cCollectionElement_enumList (in_mEnumTypeName,
                                              in_mEnumConstantNameList COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_enumList::addAssign_operation (const GALGAS_lstring & inOperand0,
                                           const GALGAS_lstringlist & inOperand1
                                           COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_enumList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_enumList::modifier_prependValue (GALGAS_lstring inOperand0,
                                             GALGAS_lstringlist inOperand1
                                             COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_enumList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_enumList::modifier_popFirst (GALGAS_lstring & outOperand0,
                                         GALGAS_lstringlist & outOperand1,
                                         C_Compiler * inCompiler
                                         COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_enumList * p = (cCollectionElement_enumList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_enumList) ;
    outOperand0 = p->mObject.mAttribute_mEnumTypeName ;
    outOperand1 = p->mObject.mAttribute_mEnumConstantNameList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_enumList::modifier_popLast (GALGAS_lstring & outOperand0,
                                        GALGAS_lstringlist & outOperand1,
                                        C_Compiler * inCompiler
                                        COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_enumList * p = (cCollectionElement_enumList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_enumList) ;
    macroUniqueSharedObject (p) ;
    outOperand0 = p->mObject.mAttribute_mEnumTypeName ;
    outOperand1 = p->mObject.mAttribute_mEnumConstantNameList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_enumList::method_first (GALGAS_lstring & outOperand0,
                                    GALGAS_lstringlist & outOperand1,
                                    C_Compiler * inCompiler
                                    COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_enumList * p = (cCollectionElement_enumList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_enumList) ;
    outOperand0 = p->mObject.mAttribute_mEnumTypeName ;
    outOperand1 = p->mObject.mAttribute_mEnumConstantNameList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_enumList::method_last (GALGAS_lstring & outOperand0,
                                   GALGAS_lstringlist & outOperand1,
                                   C_Compiler * inCompiler
                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_enumList * p = (cCollectionElement_enumList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_enumList) ;
    outOperand0 = p->mObject.mAttribute_mEnumTypeName ;
    outOperand1 = p->mObject.mAttribute_mEnumConstantNameList ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_enumList GALGAS_enumList::operator_concat (const GALGAS_enumList & inOperand
                                                  COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_enumList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_enumList GALGAS_enumList::reader_subListWithRange (const GALGAS_range & inRange,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) const {
  GALGAS_enumList result = GALGAS_enumList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_enumList GALGAS_enumList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) const {
  GALGAS_enumList result = GALGAS_enumList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_enumList::dotAssign_operation (const GALGAS_enumList inOperand
                                           COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_enumList::reader_mEnumTypeNameAtIndex (const GALGAS_uint & inIndex,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_enumList * p = (cCollectionElement_enumList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_enumList) ;
    result = p->mObject.mAttribute_mEnumTypeName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstringlist GALGAS_enumList::reader_mEnumConstantNameListAtIndex (const GALGAS_uint & inIndex,
                                                                         C_Compiler * inCompiler
                                                                         COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_enumList * p = (cCollectionElement_enumList *) attributes.ptr () ;
  GALGAS_lstringlist result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_enumList) ;
    result = p->mObject.mAttribute_mEnumConstantNameList ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_enumList::cEnumerator_enumList (const GALGAS_enumList & inEnumeratedObject,
                                            const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_enumList_2E_element cEnumerator_enumList::current (LOCATION_ARGS) const {
  const cCollectionElement_enumList * p = (const cCollectionElement_enumList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_enumList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_enumList::current_mEnumTypeName (LOCATION_ARGS) const {
  const cCollectionElement_enumList * p = (const cCollectionElement_enumList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_enumList) ;
  return p->mObject.mAttribute_mEnumTypeName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstringlist cEnumerator_enumList::current_mEnumConstantNameList (LOCATION_ARGS) const {
  const cCollectionElement_enumList * p = (const cCollectionElement_enumList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_enumList) ;
  return p->mObject.mAttribute_mEnumConstantNameList ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                              @enumList type                               *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_enumList ("enumList",
                                 NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_enumList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_enumList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_enumList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_enumList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_enumList GALGAS_enumList::extractObject (const GALGAS_object & inObject,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) {
  GALGAS_enumList result ;
  const GALGAS_enumList * p = (const GALGAS_enumList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_enumList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("enumList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Class for element of '@defaultValueList' list               *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_defaultValueList : public cCollectionElement {
  public : GALGAS_defaultValueList_2E_element mObject ;

//--- Constructor
  public : cCollectionElement_defaultValueList (const GALGAS_abstractDefaultValue & in_mDefaultValue
                                                COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_defaultValueList::cCollectionElement_defaultValueList (const GALGAS_abstractDefaultValue & in_mDefaultValue
                                                                          COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mDefaultValue) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_defaultValueList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_defaultValueList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_defaultValueList (mObject.mAttribute_mDefaultValue COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_defaultValueList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mDefaultValue" ":" ;
  mObject.mAttribute_mDefaultValue.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_defaultValueList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_defaultValueList * operand = (cCollectionElement_defaultValueList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_defaultValueList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------*

GALGAS_defaultValueList::GALGAS_defaultValueList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_defaultValueList::GALGAS_defaultValueList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_defaultValueList GALGAS_defaultValueList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_defaultValueList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_defaultValueList GALGAS_defaultValueList::constructor_listWithValue (const GALGAS_abstractDefaultValue & inOperand0
                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_defaultValueList result ;
  if (inOperand0.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_defaultValueList::makeAttributesFromObjects (attributes, inOperand0 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_defaultValueList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                         const GALGAS_abstractDefaultValue & in_mDefaultValue
                                                         COMMA_LOCATION_ARGS) {
  cCollectionElement_defaultValueList * p = NULL ;
  macroMyNew (p, cCollectionElement_defaultValueList (in_mDefaultValue COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_defaultValueList::addAssign_operation (const GALGAS_abstractDefaultValue & inOperand0
                                                   COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_defaultValueList (inOperand0 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_defaultValueList::modifier_prependValue (GALGAS_abstractDefaultValue inOperand0
                                                     COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_defaultValueList (inOperand0 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_defaultValueList::modifier_popFirst (GALGAS_abstractDefaultValue & outOperand0,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_defaultValueList * p = (cCollectionElement_defaultValueList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_defaultValueList) ;
    outOperand0 = p->mObject.mAttribute_mDefaultValue ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_defaultValueList::modifier_popLast (GALGAS_abstractDefaultValue & outOperand0,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_defaultValueList * p = (cCollectionElement_defaultValueList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_defaultValueList) ;
    macroUniqueSharedObject (p) ;
    outOperand0 = p->mObject.mAttribute_mDefaultValue ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_defaultValueList::method_first (GALGAS_abstractDefaultValue & outOperand0,
                                            C_Compiler * inCompiler
                                            COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_defaultValueList * p = (cCollectionElement_defaultValueList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_defaultValueList) ;
    outOperand0 = p->mObject.mAttribute_mDefaultValue ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_defaultValueList::method_last (GALGAS_abstractDefaultValue & outOperand0,
                                           C_Compiler * inCompiler
                                           COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_defaultValueList * p = (cCollectionElement_defaultValueList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_defaultValueList) ;
    outOperand0 = p->mObject.mAttribute_mDefaultValue ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_defaultValueList GALGAS_defaultValueList::operator_concat (const GALGAS_defaultValueList & inOperand
                                                                  COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_defaultValueList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_defaultValueList GALGAS_defaultValueList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) const {
  GALGAS_defaultValueList result = GALGAS_defaultValueList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_defaultValueList GALGAS_defaultValueList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) const {
  GALGAS_defaultValueList result = GALGAS_defaultValueList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_defaultValueList::dotAssign_operation (const GALGAS_defaultValueList inOperand
                                                   COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_abstractDefaultValue GALGAS_defaultValueList::reader_mDefaultValueAtIndex (const GALGAS_uint & inIndex,
                                                                                  C_Compiler * inCompiler
                                                                                  COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_defaultValueList * p = (cCollectionElement_defaultValueList *) attributes.ptr () ;
  GALGAS_abstractDefaultValue result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_defaultValueList) ;
    result = p->mObject.mAttribute_mDefaultValue ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_defaultValueList::cEnumerator_defaultValueList (const GALGAS_defaultValueList & inEnumeratedObject,
                                                            const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_defaultValueList_2E_element cEnumerator_defaultValueList::current (LOCATION_ARGS) const {
  const cCollectionElement_defaultValueList * p = (const cCollectionElement_defaultValueList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_defaultValueList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------*

GALGAS_abstractDefaultValue cEnumerator_defaultValueList::current_mDefaultValue (LOCATION_ARGS) const {
  const cCollectionElement_defaultValueList * p = (const cCollectionElement_defaultValueList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_defaultValueList) ;
  return p->mObject.mAttribute_mDefaultValue ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                          @defaultValueList type                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_defaultValueList ("defaultValueList",
                                         NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_defaultValueList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_defaultValueList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_defaultValueList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_defaultValueList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_defaultValueList GALGAS_defaultValueList::extractObject (const GALGAS_object & inObject,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) {
  GALGAS_defaultValueList result ;
  const GALGAS_defaultValueList * p = (const GALGAS_defaultValueList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_defaultValueList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("defaultValueList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Class for element of '@structFieldASTList' list              *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_structFieldASTList : public cCollectionElement {
  public : GALGAS_structFieldASTList_2E_element mObject ;

//--- Constructor
  public : cCollectionElement_structFieldASTList (const GALGAS_attributeASTType & in_mFieldType,
                                                  const GALGAS_lstring & in_mFieldTypeName,
                                                  const GALGAS_lstring & in_mFieldName
                                                  COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_structFieldASTList::cCollectionElement_structFieldASTList (const GALGAS_attributeASTType & in_mFieldType,
                                                                              const GALGAS_lstring & in_mFieldTypeName,
                                                                              const GALGAS_lstring & in_mFieldName
                                                                              COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mFieldType, in_mFieldTypeName, in_mFieldName) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_structFieldASTList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_structFieldASTList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_structFieldASTList (mObject.mAttribute_mFieldType, mObject.mAttribute_mFieldTypeName, mObject.mAttribute_mFieldName COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_structFieldASTList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mFieldType" ":" ;
  mObject.mAttribute_mFieldType.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mFieldTypeName" ":" ;
  mObject.mAttribute_mFieldTypeName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mFieldName" ":" ;
  mObject.mAttribute_mFieldName.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_structFieldASTList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_structFieldASTList * operand = (cCollectionElement_structFieldASTList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_structFieldASTList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------*

GALGAS_structFieldASTList::GALGAS_structFieldASTList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_structFieldASTList::GALGAS_structFieldASTList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_structFieldASTList GALGAS_structFieldASTList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_structFieldASTList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_structFieldASTList GALGAS_structFieldASTList::constructor_listWithValue (const GALGAS_attributeASTType & inOperand0,
                                                                                const GALGAS_lstring & inOperand1,
                                                                                const GALGAS_lstring & inOperand2
                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_structFieldASTList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_structFieldASTList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_structFieldASTList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                           const GALGAS_attributeASTType & in_mFieldType,
                                                           const GALGAS_lstring & in_mFieldTypeName,
                                                           const GALGAS_lstring & in_mFieldName
                                                           COMMA_LOCATION_ARGS) {
  cCollectionElement_structFieldASTList * p = NULL ;
  macroMyNew (p, cCollectionElement_structFieldASTList (in_mFieldType,
                                                        in_mFieldTypeName,
                                                        in_mFieldName COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_structFieldASTList::addAssign_operation (const GALGAS_attributeASTType & inOperand0,
                                                     const GALGAS_lstring & inOperand1,
                                                     const GALGAS_lstring & inOperand2
                                                     COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_structFieldASTList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_structFieldASTList::modifier_prependValue (GALGAS_attributeASTType inOperand0,
                                                       GALGAS_lstring inOperand1,
                                                       GALGAS_lstring inOperand2
                                                       COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_structFieldASTList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_structFieldASTList::modifier_popFirst (GALGAS_attributeASTType & outOperand0,
                                                   GALGAS_lstring & outOperand1,
                                                   GALGAS_lstring & outOperand2,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_structFieldASTList * p = (cCollectionElement_structFieldASTList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_structFieldASTList) ;
    outOperand0 = p->mObject.mAttribute_mFieldType ;
    outOperand1 = p->mObject.mAttribute_mFieldTypeName ;
    outOperand2 = p->mObject.mAttribute_mFieldName ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_structFieldASTList::modifier_popLast (GALGAS_attributeASTType & outOperand0,
                                                  GALGAS_lstring & outOperand1,
                                                  GALGAS_lstring & outOperand2,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_structFieldASTList * p = (cCollectionElement_structFieldASTList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_structFieldASTList) ;
    macroUniqueSharedObject (p) ;
    outOperand0 = p->mObject.mAttribute_mFieldType ;
    outOperand1 = p->mObject.mAttribute_mFieldTypeName ;
    outOperand2 = p->mObject.mAttribute_mFieldName ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_structFieldASTList::method_first (GALGAS_attributeASTType & outOperand0,
                                              GALGAS_lstring & outOperand1,
                                              GALGAS_lstring & outOperand2,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_structFieldASTList * p = (cCollectionElement_structFieldASTList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_structFieldASTList) ;
    outOperand0 = p->mObject.mAttribute_mFieldType ;
    outOperand1 = p->mObject.mAttribute_mFieldTypeName ;
    outOperand2 = p->mObject.mAttribute_mFieldName ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_structFieldASTList::method_last (GALGAS_attributeASTType & outOperand0,
                                             GALGAS_lstring & outOperand1,
                                             GALGAS_lstring & outOperand2,
                                             C_Compiler * inCompiler
                                             COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_structFieldASTList * p = (cCollectionElement_structFieldASTList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_structFieldASTList) ;
    outOperand0 = p->mObject.mAttribute_mFieldType ;
    outOperand1 = p->mObject.mAttribute_mFieldTypeName ;
    outOperand2 = p->mObject.mAttribute_mFieldName ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_structFieldASTList GALGAS_structFieldASTList::operator_concat (const GALGAS_structFieldASTList & inOperand
                                                                      COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_structFieldASTList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_structFieldASTList GALGAS_structFieldASTList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                              C_Compiler * inCompiler
                                                                              COMMA_LOCATION_ARGS) const {
  GALGAS_structFieldASTList result = GALGAS_structFieldASTList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_structFieldASTList GALGAS_structFieldASTList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                              C_Compiler * inCompiler
                                                                              COMMA_LOCATION_ARGS) const {
  GALGAS_structFieldASTList result = GALGAS_structFieldASTList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_structFieldASTList::dotAssign_operation (const GALGAS_structFieldASTList inOperand
                                                     COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTType GALGAS_structFieldASTList::reader_mFieldTypeAtIndex (const GALGAS_uint & inIndex,
                                                                             C_Compiler * inCompiler
                                                                             COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_structFieldASTList * p = (cCollectionElement_structFieldASTList *) attributes.ptr () ;
  GALGAS_attributeASTType result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_structFieldASTList) ;
    result = p->mObject.mAttribute_mFieldType ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_structFieldASTList::reader_mFieldTypeNameAtIndex (const GALGAS_uint & inIndex,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_structFieldASTList * p = (cCollectionElement_structFieldASTList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_structFieldASTList) ;
    result = p->mObject.mAttribute_mFieldTypeName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_structFieldASTList::reader_mFieldNameAtIndex (const GALGAS_uint & inIndex,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_structFieldASTList * p = (cCollectionElement_structFieldASTList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_structFieldASTList) ;
    result = p->mObject.mAttribute_mFieldName ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_structFieldASTList::cEnumerator_structFieldASTList (const GALGAS_structFieldASTList & inEnumeratedObject,
                                                                const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_structFieldASTList_2E_element cEnumerator_structFieldASTList::current (LOCATION_ARGS) const {
  const cCollectionElement_structFieldASTList * p = (const cCollectionElement_structFieldASTList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_structFieldASTList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------*

GALGAS_attributeASTType cEnumerator_structFieldASTList::current_mFieldType (LOCATION_ARGS) const {
  const cCollectionElement_structFieldASTList * p = (const cCollectionElement_structFieldASTList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_structFieldASTList) ;
  return p->mObject.mAttribute_mFieldType ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_structFieldASTList::current_mFieldTypeName (LOCATION_ARGS) const {
  const cCollectionElement_structFieldASTList * p = (const cCollectionElement_structFieldASTList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_structFieldASTList) ;
  return p->mObject.mAttribute_mFieldTypeName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_structFieldASTList::current_mFieldName (LOCATION_ARGS) const {
  const cCollectionElement_structFieldASTList * p = (const cCollectionElement_structFieldASTList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_structFieldASTList) ;
  return p->mObject.mAttribute_mFieldName ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                         @structFieldASTList type                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_structFieldASTList ("structFieldASTList",
                                           NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_structFieldASTList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_structFieldASTList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_structFieldASTList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_structFieldASTList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_structFieldASTList GALGAS_structFieldASTList::extractObject (const GALGAS_object & inObject,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_structFieldASTList result ;
  const GALGAS_structFieldASTList * p = (const GALGAS_structFieldASTList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_structFieldASTList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("structFieldASTList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Class for element of '@structTypeList' list                *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_structTypeList : public cCollectionElement {
  public : GALGAS_structTypeList_2E_element mObject ;

//--- Constructor
  public : cCollectionElement_structTypeList (const GALGAS_lstring & in_mStructTypeName,
                                              const GALGAS_structFieldASTList & in_mFieldList
                                              COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_structTypeList::cCollectionElement_structTypeList (const GALGAS_lstring & in_mStructTypeName,
                                                                      const GALGAS_structFieldASTList & in_mFieldList
                                                                      COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mStructTypeName, in_mFieldList) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_structTypeList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_structTypeList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_structTypeList (mObject.mAttribute_mStructTypeName, mObject.mAttribute_mFieldList COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_structTypeList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mStructTypeName" ":" ;
  mObject.mAttribute_mStructTypeName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mFieldList" ":" ;
  mObject.mAttribute_mFieldList.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_structTypeList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_structTypeList * operand = (cCollectionElement_structTypeList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_structTypeList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------*

GALGAS_structTypeList::GALGAS_structTypeList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_structTypeList::GALGAS_structTypeList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_structTypeList GALGAS_structTypeList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_structTypeList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_structTypeList GALGAS_structTypeList::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                                        const GALGAS_structFieldASTList & inOperand1
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_structTypeList result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_structTypeList::makeAttributesFromObjects (attributes, inOperand0, inOperand1 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_structTypeList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                       const GALGAS_lstring & in_mStructTypeName,
                                                       const GALGAS_structFieldASTList & in_mFieldList
                                                       COMMA_LOCATION_ARGS) {
  cCollectionElement_structTypeList * p = NULL ;
  macroMyNew (p, cCollectionElement_structTypeList (in_mStructTypeName,
                                                    in_mFieldList COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_structTypeList::addAssign_operation (const GALGAS_lstring & inOperand0,
                                                 const GALGAS_structFieldASTList & inOperand1
                                                 COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_structTypeList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_structTypeList::modifier_prependValue (GALGAS_lstring inOperand0,
                                                   GALGAS_structFieldASTList inOperand1
                                                   COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_structTypeList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_structTypeList::modifier_popFirst (GALGAS_lstring & outOperand0,
                                               GALGAS_structFieldASTList & outOperand1,
                                               C_Compiler * inCompiler
                                               COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_structTypeList * p = (cCollectionElement_structTypeList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_structTypeList) ;
    outOperand0 = p->mObject.mAttribute_mStructTypeName ;
    outOperand1 = p->mObject.mAttribute_mFieldList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_structTypeList::modifier_popLast (GALGAS_lstring & outOperand0,
                                              GALGAS_structFieldASTList & outOperand1,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_structTypeList * p = (cCollectionElement_structTypeList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_structTypeList) ;
    macroUniqueSharedObject (p) ;
    outOperand0 = p->mObject.mAttribute_mStructTypeName ;
    outOperand1 = p->mObject.mAttribute_mFieldList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_structTypeList::method_first (GALGAS_lstring & outOperand0,
                                          GALGAS_structFieldASTList & outOperand1,
                                          C_Compiler * inCompiler
                                          COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_structTypeList * p = (cCollectionElement_structTypeList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_structTypeList) ;
    outOperand0 = p->mObject.mAttribute_mStructTypeName ;
    outOperand1 = p->mObject.mAttribute_mFieldList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_structTypeList::method_last (GALGAS_lstring & outOperand0,
                                         GALGAS_structFieldASTList & outOperand1,
                                         C_Compiler * inCompiler
                                         COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_structTypeList * p = (cCollectionElement_structTypeList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_structTypeList) ;
    outOperand0 = p->mObject.mAttribute_mStructTypeName ;
    outOperand1 = p->mObject.mAttribute_mFieldList ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_structTypeList GALGAS_structTypeList::operator_concat (const GALGAS_structTypeList & inOperand
                                                              COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_structTypeList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_structTypeList GALGAS_structTypeList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) const {
  GALGAS_structTypeList result = GALGAS_structTypeList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_structTypeList GALGAS_structTypeList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) const {
  GALGAS_structTypeList result = GALGAS_structTypeList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_structTypeList::dotAssign_operation (const GALGAS_structTypeList inOperand
                                                 COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_structTypeList::reader_mStructTypeNameAtIndex (const GALGAS_uint & inIndex,
                                                                     C_Compiler * inCompiler
                                                                     COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_structTypeList * p = (cCollectionElement_structTypeList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_structTypeList) ;
    result = p->mObject.mAttribute_mStructTypeName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_structFieldASTList GALGAS_structTypeList::reader_mFieldListAtIndex (const GALGAS_uint & inIndex,
                                                                           C_Compiler * inCompiler
                                                                           COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_structTypeList * p = (cCollectionElement_structTypeList *) attributes.ptr () ;
  GALGAS_structFieldASTList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_structTypeList) ;
    result = p->mObject.mAttribute_mFieldList ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_structTypeList::cEnumerator_structTypeList (const GALGAS_structTypeList & inEnumeratedObject,
                                                        const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_structTypeList_2E_element cEnumerator_structTypeList::current (LOCATION_ARGS) const {
  const cCollectionElement_structTypeList * p = (const cCollectionElement_structTypeList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_structTypeList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_structTypeList::current_mStructTypeName (LOCATION_ARGS) const {
  const cCollectionElement_structTypeList * p = (const cCollectionElement_structTypeList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_structTypeList) ;
  return p->mObject.mAttribute_mStructTypeName ;
}

//---------------------------------------------------------------------------*

GALGAS_structFieldASTList cEnumerator_structTypeList::current_mFieldList (LOCATION_ARGS) const {
  const cCollectionElement_structTypeList * p = (const cCollectionElement_structTypeList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_structTypeList) ;
  return p->mObject.mAttribute_mFieldList ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                           @structTypeList type                            *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_structTypeList ("structTypeList",
                                       NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_structTypeList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_structTypeList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_structTypeList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_structTypeList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_structTypeList GALGAS_structTypeList::extractObject (const GALGAS_object & inObject,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) {
  GALGAS_structTypeList result ;
  const GALGAS_structTypeList * p = (const GALGAS_structTypeList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_structTypeList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("structTypeList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*



typeComparisonResult GALGAS_abstractBinding::objectCompare (const GALGAS_abstractBinding & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_abstractBinding::GALGAS_abstractBinding (void) :
AC_GALGAS_class () {
}

//---------------------------------------------------------------------------*

GALGAS_abstractBinding::GALGAS_abstractBinding (const cPtr_abstractBinding * inSourcePtr) :
AC_GALGAS_class (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_abstractBinding) ;
}

//---------------------------------------------------------------------------*
//                 Pointer class for @abstractBinding class                  *
//---------------------------------------------------------------------------*

cPtr_abstractBinding::cPtr_abstractBinding (LOCATION_ARGS) :
acPtr_class (THERE) {
}



//---------------------------------------------------------------------------*
//                                                                           *
//                           @abstractBinding type                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_abstractBinding ("abstractBinding",
                                        NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_abstractBinding::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_abstractBinding ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_abstractBinding::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_abstractBinding (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_abstractBinding GALGAS_abstractBinding::extractObject (const GALGAS_object & inObject,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) {
  GALGAS_abstractBinding result ;
  const GALGAS_abstractBinding * p = (const GALGAS_abstractBinding *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_abstractBinding *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("abstractBinding", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_multiValuedBinding::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_multiValuedBinding * p = (const cPtr_multiValuedBinding *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_multiValuedBinding) ;
  if (kOperandEqual == result) {
    result = mAttribute_mBindingName.objectCompare (p->mAttribute_mBindingName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mMultiValuedBindingList.objectCompare (p->mAttribute_mMultiValuedBindingList) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_multiValuedBinding::objectCompare (const GALGAS_multiValuedBinding & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBinding::GALGAS_multiValuedBinding (void) :
GALGAS_abstractBinding () {
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBinding GALGAS_multiValuedBinding::constructor_default (LOCATION_ARGS) {
  return GALGAS_multiValuedBinding::constructor_new (GALGAS_lstring::constructor_default (HERE),
                                                     GALGAS_multiValuedBindingList::constructor_emptyList (HERE)
                                                     COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBinding::GALGAS_multiValuedBinding (const cPtr_multiValuedBinding * inSourcePtr) :
GALGAS_abstractBinding (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_multiValuedBinding) ;
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBinding GALGAS_multiValuedBinding::constructor_new (const GALGAS_lstring & inAttribute_mBindingName,
                                                                      const GALGAS_multiValuedBindingList & inAttribute_mMultiValuedBindingList
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_multiValuedBinding result ;
  if (inAttribute_mBindingName.isValid () && inAttribute_mMultiValuedBindingList.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_multiValuedBinding (inAttribute_mBindingName, inAttribute_mMultiValuedBindingList COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_multiValuedBinding::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_multiValuedBinding * p = (cPtr_multiValuedBinding *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_multiValuedBinding) ;
    cPtr_multiValuedBinding * r = NULL ;
    macroMyNew (r, cPtr_multiValuedBinding (p->mAttribute_mBindingName, p->mAttribute_mMultiValuedBindingList COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_multiValuedBinding::reader_mBindingName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_multiValuedBinding * p = (const cPtr_multiValuedBinding *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_multiValuedBinding) ;
    result = p->mAttribute_mBindingName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cPtr_multiValuedBinding::reader_mBindingName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mBindingName ;
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingList GALGAS_multiValuedBinding::reader_mMultiValuedBindingList (UNUSED_LOCATION_ARGS) const {
  GALGAS_multiValuedBindingList result ;
  if (NULL != mObjectPtr) {
    const cPtr_multiValuedBinding * p = (const cPtr_multiValuedBinding *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_multiValuedBinding) ;
    result = p->mAttribute_mMultiValuedBindingList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingList cPtr_multiValuedBinding::reader_mMultiValuedBindingList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mMultiValuedBindingList ;
}

//---------------------------------------------------------------------------*
//                Pointer class for @multiValuedBinding class                *
//---------------------------------------------------------------------------*

cPtr_multiValuedBinding::cPtr_multiValuedBinding (const GALGAS_lstring & in_mBindingName,
                                                  const GALGAS_multiValuedBindingList & in_mMultiValuedBindingList
                                                  COMMA_LOCATION_ARGS) :
cPtr_abstractBinding (THERE),
mAttribute_mBindingName (in_mBindingName),
mAttribute_mMultiValuedBindingList (in_mMultiValuedBindingList) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_multiValuedBinding::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_multiValuedBinding ;
}

void cPtr_multiValuedBinding::description (C_String & ioString,
                                           const PMSInt32 inIndentation) const {
  ioString << "[@multiValuedBinding:" ;
  mAttribute_mBindingName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mMultiValuedBindingList.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                         @multiValuedBinding type                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_multiValuedBinding ("multiValuedBinding",
                                           & kTypeDescriptor_GALGAS_abstractBinding) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_multiValuedBinding::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_multiValuedBinding ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_multiValuedBinding::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_multiValuedBinding (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBinding GALGAS_multiValuedBinding::extractObject (const GALGAS_object & inObject,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_multiValuedBinding result ;
  const GALGAS_multiValuedBinding * p = (const GALGAS_multiValuedBinding *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_multiValuedBinding *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("multiValuedBinding", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_regularControllerBinding::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_regularControllerBinding * p = (const cPtr_regularControllerBinding *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_regularControllerBinding) ;
  if (kOperandEqual == result) {
    result = mAttribute_mBindingName.objectCompare (p->mAttribute_mBindingName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mControllerName.objectCompare (p->mAttribute_mControllerName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mControllerAttributeName.objectCompare (p->mAttribute_mControllerAttributeName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mOutletBindingOptionList.objectCompare (p->mAttribute_mOutletBindingOptionList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mNamesCountOption.objectCompare (p->mAttribute_mNamesCountOption) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_regularControllerBinding::objectCompare (const GALGAS_regularControllerBinding & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_regularControllerBinding::GALGAS_regularControllerBinding (void) :
GALGAS_abstractBinding () {
}

//---------------------------------------------------------------------------*

GALGAS_regularControllerBinding GALGAS_regularControllerBinding::constructor_default (LOCATION_ARGS) {
  return GALGAS_regularControllerBinding::constructor_new (GALGAS_lstring::constructor_default (HERE),
                                                           GALGAS_lstring::constructor_default (HERE),
                                                           GALGAS_lstring::constructor_default (HERE),
                                                           GALGAS_outletBindingOptionList::constructor_emptyList (HERE),
                                                           GALGAS_bool::constructor_default (HERE)
                                                           COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GALGAS_regularControllerBinding::GALGAS_regularControllerBinding (const cPtr_regularControllerBinding * inSourcePtr) :
GALGAS_abstractBinding (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_regularControllerBinding) ;
}

//---------------------------------------------------------------------------*

GALGAS_regularControllerBinding GALGAS_regularControllerBinding::constructor_new (const GALGAS_lstring & inAttribute_mBindingName,
                                                                                  const GALGAS_lstring & inAttribute_mControllerName,
                                                                                  const GALGAS_lstring & inAttribute_mControllerAttributeName,
                                                                                  const GALGAS_outletBindingOptionList & inAttribute_mOutletBindingOptionList,
                                                                                  const GALGAS_bool & inAttribute_mNamesCountOption
                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_regularControllerBinding result ;
  if (inAttribute_mBindingName.isValid () && inAttribute_mControllerName.isValid () && inAttribute_mControllerAttributeName.isValid () && inAttribute_mOutletBindingOptionList.isValid () && inAttribute_mNamesCountOption.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_regularControllerBinding (inAttribute_mBindingName, inAttribute_mControllerName, inAttribute_mControllerAttributeName, inAttribute_mOutletBindingOptionList, inAttribute_mNamesCountOption COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_regularControllerBinding::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_regularControllerBinding * p = (cPtr_regularControllerBinding *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_regularControllerBinding) ;
    cPtr_regularControllerBinding * r = NULL ;
    macroMyNew (r, cPtr_regularControllerBinding (p->mAttribute_mBindingName, p->mAttribute_mControllerName, p->mAttribute_mControllerAttributeName, p->mAttribute_mOutletBindingOptionList, p->mAttribute_mNamesCountOption COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_regularControllerBinding::reader_mBindingName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_regularControllerBinding * p = (const cPtr_regularControllerBinding *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_regularControllerBinding) ;
    result = p->mAttribute_mBindingName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cPtr_regularControllerBinding::reader_mBindingName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mBindingName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_regularControllerBinding::reader_mControllerName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_regularControllerBinding * p = (const cPtr_regularControllerBinding *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_regularControllerBinding) ;
    result = p->mAttribute_mControllerName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cPtr_regularControllerBinding::reader_mControllerName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mControllerName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_regularControllerBinding::reader_mControllerAttributeName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_regularControllerBinding * p = (const cPtr_regularControllerBinding *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_regularControllerBinding) ;
    result = p->mAttribute_mControllerAttributeName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cPtr_regularControllerBinding::reader_mControllerAttributeName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mControllerAttributeName ;
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingOptionList GALGAS_regularControllerBinding::reader_mOutletBindingOptionList (UNUSED_LOCATION_ARGS) const {
  GALGAS_outletBindingOptionList result ;
  if (NULL != mObjectPtr) {
    const cPtr_regularControllerBinding * p = (const cPtr_regularControllerBinding *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_regularControllerBinding) ;
    result = p->mAttribute_mOutletBindingOptionList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingOptionList cPtr_regularControllerBinding::reader_mOutletBindingOptionList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mOutletBindingOptionList ;
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_regularControllerBinding::reader_mNamesCountOption (UNUSED_LOCATION_ARGS) const {
  GALGAS_bool result ;
  if (NULL != mObjectPtr) {
    const cPtr_regularControllerBinding * p = (const cPtr_regularControllerBinding *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_regularControllerBinding) ;
    result = p->mAttribute_mNamesCountOption ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bool cPtr_regularControllerBinding::reader_mNamesCountOption (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mNamesCountOption ;
}

//---------------------------------------------------------------------------*
//             Pointer class for @regularControllerBinding class             *
//---------------------------------------------------------------------------*

cPtr_regularControllerBinding::cPtr_regularControllerBinding (const GALGAS_lstring & in_mBindingName,
                                                              const GALGAS_lstring & in_mControllerName,
                                                              const GALGAS_lstring & in_mControllerAttributeName,
                                                              const GALGAS_outletBindingOptionList & in_mOutletBindingOptionList,
                                                              const GALGAS_bool & in_mNamesCountOption
                                                              COMMA_LOCATION_ARGS) :
cPtr_abstractBinding (THERE),
mAttribute_mBindingName (in_mBindingName),
mAttribute_mControllerName (in_mControllerName),
mAttribute_mControllerAttributeName (in_mControllerAttributeName),
mAttribute_mOutletBindingOptionList (in_mOutletBindingOptionList),
mAttribute_mNamesCountOption (in_mNamesCountOption) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_regularControllerBinding::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_regularControllerBinding ;
}

void cPtr_regularControllerBinding::description (C_String & ioString,
                                                 const PMSInt32 inIndentation) const {
  ioString << "[@regularControllerBinding:" ;
  mAttribute_mBindingName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mControllerName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mControllerAttributeName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mOutletBindingOptionList.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mNamesCountOption.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                      @regularControllerBinding type                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_regularControllerBinding ("regularControllerBinding",
                                                 & kTypeDescriptor_GALGAS_abstractBinding) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_regularControllerBinding::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_regularControllerBinding ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_regularControllerBinding::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_regularControllerBinding (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_regularControllerBinding GALGAS_regularControllerBinding::extractObject (const GALGAS_object & inObject,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_regularControllerBinding result ;
  const GALGAS_regularControllerBinding * p = (const GALGAS_regularControllerBinding *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_regularControllerBinding *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("regularControllerBinding", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_regularControllerSelectionBinding::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_regularControllerSelectionBinding * p = (const cPtr_regularControllerSelectionBinding *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_regularControllerSelectionBinding) ;
  if (kOperandEqual == result) {
    result = mAttribute_mBindingName.objectCompare (p->mAttribute_mBindingName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mControllerName.objectCompare (p->mAttribute_mControllerName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mControllerAttributeName.objectCompare (p->mAttribute_mControllerAttributeName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mOutletBindingOptionList.objectCompare (p->mAttribute_mOutletBindingOptionList) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_regularControllerSelectionBinding::objectCompare (const GALGAS_regularControllerSelectionBinding & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_regularControllerSelectionBinding::GALGAS_regularControllerSelectionBinding (void) :
GALGAS_abstractBinding () {
}

//---------------------------------------------------------------------------*

GALGAS_regularControllerSelectionBinding GALGAS_regularControllerSelectionBinding::constructor_default (LOCATION_ARGS) {
  return GALGAS_regularControllerSelectionBinding::constructor_new (GALGAS_lstring::constructor_default (HERE),
                                                                    GALGAS_lstring::constructor_default (HERE),
                                                                    GALGAS_lstring::constructor_default (HERE),
                                                                    GALGAS_outletBindingOptionList::constructor_emptyList (HERE)
                                                                    COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GALGAS_regularControllerSelectionBinding::GALGAS_regularControllerSelectionBinding (const cPtr_regularControllerSelectionBinding * inSourcePtr) :
GALGAS_abstractBinding (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_regularControllerSelectionBinding) ;
}

//---------------------------------------------------------------------------*

GALGAS_regularControllerSelectionBinding GALGAS_regularControllerSelectionBinding::constructor_new (const GALGAS_lstring & inAttribute_mBindingName,
                                                                                                    const GALGAS_lstring & inAttribute_mControllerName,
                                                                                                    const GALGAS_lstring & inAttribute_mControllerAttributeName,
                                                                                                    const GALGAS_outletBindingOptionList & inAttribute_mOutletBindingOptionList
                                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_regularControllerSelectionBinding result ;
  if (inAttribute_mBindingName.isValid () && inAttribute_mControllerName.isValid () && inAttribute_mControllerAttributeName.isValid () && inAttribute_mOutletBindingOptionList.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_regularControllerSelectionBinding (inAttribute_mBindingName, inAttribute_mControllerName, inAttribute_mControllerAttributeName, inAttribute_mOutletBindingOptionList COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_regularControllerSelectionBinding::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_regularControllerSelectionBinding * p = (cPtr_regularControllerSelectionBinding *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_regularControllerSelectionBinding) ;
    cPtr_regularControllerSelectionBinding * r = NULL ;
    macroMyNew (r, cPtr_regularControllerSelectionBinding (p->mAttribute_mBindingName, p->mAttribute_mControllerName, p->mAttribute_mControllerAttributeName, p->mAttribute_mOutletBindingOptionList COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_regularControllerSelectionBinding::reader_mBindingName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_regularControllerSelectionBinding * p = (const cPtr_regularControllerSelectionBinding *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_regularControllerSelectionBinding) ;
    result = p->mAttribute_mBindingName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cPtr_regularControllerSelectionBinding::reader_mBindingName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mBindingName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_regularControllerSelectionBinding::reader_mControllerName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_regularControllerSelectionBinding * p = (const cPtr_regularControllerSelectionBinding *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_regularControllerSelectionBinding) ;
    result = p->mAttribute_mControllerName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cPtr_regularControllerSelectionBinding::reader_mControllerName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mControllerName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_regularControllerSelectionBinding::reader_mControllerAttributeName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_regularControllerSelectionBinding * p = (const cPtr_regularControllerSelectionBinding *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_regularControllerSelectionBinding) ;
    result = p->mAttribute_mControllerAttributeName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cPtr_regularControllerSelectionBinding::reader_mControllerAttributeName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mControllerAttributeName ;
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingOptionList GALGAS_regularControllerSelectionBinding::reader_mOutletBindingOptionList (UNUSED_LOCATION_ARGS) const {
  GALGAS_outletBindingOptionList result ;
  if (NULL != mObjectPtr) {
    const cPtr_regularControllerSelectionBinding * p = (const cPtr_regularControllerSelectionBinding *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_regularControllerSelectionBinding) ;
    result = p->mAttribute_mOutletBindingOptionList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingOptionList cPtr_regularControllerSelectionBinding::reader_mOutletBindingOptionList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mOutletBindingOptionList ;
}

//---------------------------------------------------------------------------*
//        Pointer class for @regularControllerSelectionBinding class         *
//---------------------------------------------------------------------------*

cPtr_regularControllerSelectionBinding::cPtr_regularControllerSelectionBinding (const GALGAS_lstring & in_mBindingName,
                                                                                const GALGAS_lstring & in_mControllerName,
                                                                                const GALGAS_lstring & in_mControllerAttributeName,
                                                                                const GALGAS_outletBindingOptionList & in_mOutletBindingOptionList
                                                                                COMMA_LOCATION_ARGS) :
cPtr_abstractBinding (THERE),
mAttribute_mBindingName (in_mBindingName),
mAttribute_mControllerName (in_mControllerName),
mAttribute_mControllerAttributeName (in_mControllerAttributeName),
mAttribute_mOutletBindingOptionList (in_mOutletBindingOptionList) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_regularControllerSelectionBinding::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_regularControllerSelectionBinding ;
}

void cPtr_regularControllerSelectionBinding::description (C_String & ioString,
                                                          const PMSInt32 inIndentation) const {
  ioString << "[@regularControllerSelectionBinding:" ;
  mAttribute_mBindingName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mControllerName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mControllerAttributeName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mOutletBindingOptionList.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                  @regularControllerSelectionBinding type                  *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_regularControllerSelectionBinding ("regularControllerSelectionBinding",
                                                          & kTypeDescriptor_GALGAS_abstractBinding) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_regularControllerSelectionBinding::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_regularControllerSelectionBinding ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_regularControllerSelectionBinding::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_regularControllerSelectionBinding (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_regularControllerSelectionBinding GALGAS_regularControllerSelectionBinding::extractObject (const GALGAS_object & inObject,
                                                                                                  C_Compiler * inCompiler
                                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_regularControllerSelectionBinding result ;
  const GALGAS_regularControllerSelectionBinding * p = (const GALGAS_regularControllerSelectionBinding *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_regularControllerSelectionBinding *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("regularControllerSelectionBinding", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_regularPreferenceBinding::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_regularPreferenceBinding * p = (const cPtr_regularPreferenceBinding *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_regularPreferenceBinding) ;
  if (kOperandEqual == result) {
    result = mAttribute_mBindingName.objectCompare (p->mAttribute_mBindingName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mPreferenceName.objectCompare (p->mAttribute_mPreferenceName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mPreferenceAttributeName.objectCompare (p->mAttribute_mPreferenceAttributeName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mOutletBindingOptionList.objectCompare (p->mAttribute_mOutletBindingOptionList) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_regularPreferenceBinding::objectCompare (const GALGAS_regularPreferenceBinding & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_regularPreferenceBinding::GALGAS_regularPreferenceBinding (void) :
GALGAS_abstractBinding () {
}

//---------------------------------------------------------------------------*

GALGAS_regularPreferenceBinding GALGAS_regularPreferenceBinding::constructor_default (LOCATION_ARGS) {
  return GALGAS_regularPreferenceBinding::constructor_new (GALGAS_lstring::constructor_default (HERE),
                                                           GALGAS_lstring::constructor_default (HERE),
                                                           GALGAS_lstring::constructor_default (HERE),
                                                           GALGAS_outletBindingOptionList::constructor_emptyList (HERE)
                                                           COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GALGAS_regularPreferenceBinding::GALGAS_regularPreferenceBinding (const cPtr_regularPreferenceBinding * inSourcePtr) :
GALGAS_abstractBinding (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_regularPreferenceBinding) ;
}

//---------------------------------------------------------------------------*

GALGAS_regularPreferenceBinding GALGAS_regularPreferenceBinding::constructor_new (const GALGAS_lstring & inAttribute_mBindingName,
                                                                                  const GALGAS_lstring & inAttribute_mPreferenceName,
                                                                                  const GALGAS_lstring & inAttribute_mPreferenceAttributeName,
                                                                                  const GALGAS_outletBindingOptionList & inAttribute_mOutletBindingOptionList
                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_regularPreferenceBinding result ;
  if (inAttribute_mBindingName.isValid () && inAttribute_mPreferenceName.isValid () && inAttribute_mPreferenceAttributeName.isValid () && inAttribute_mOutletBindingOptionList.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_regularPreferenceBinding (inAttribute_mBindingName, inAttribute_mPreferenceName, inAttribute_mPreferenceAttributeName, inAttribute_mOutletBindingOptionList COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_regularPreferenceBinding::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_regularPreferenceBinding * p = (cPtr_regularPreferenceBinding *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_regularPreferenceBinding) ;
    cPtr_regularPreferenceBinding * r = NULL ;
    macroMyNew (r, cPtr_regularPreferenceBinding (p->mAttribute_mBindingName, p->mAttribute_mPreferenceName, p->mAttribute_mPreferenceAttributeName, p->mAttribute_mOutletBindingOptionList COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_regularPreferenceBinding::reader_mBindingName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_regularPreferenceBinding * p = (const cPtr_regularPreferenceBinding *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_regularPreferenceBinding) ;
    result = p->mAttribute_mBindingName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cPtr_regularPreferenceBinding::reader_mBindingName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mBindingName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_regularPreferenceBinding::reader_mPreferenceName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_regularPreferenceBinding * p = (const cPtr_regularPreferenceBinding *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_regularPreferenceBinding) ;
    result = p->mAttribute_mPreferenceName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cPtr_regularPreferenceBinding::reader_mPreferenceName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mPreferenceName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_regularPreferenceBinding::reader_mPreferenceAttributeName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_regularPreferenceBinding * p = (const cPtr_regularPreferenceBinding *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_regularPreferenceBinding) ;
    result = p->mAttribute_mPreferenceAttributeName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cPtr_regularPreferenceBinding::reader_mPreferenceAttributeName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mPreferenceAttributeName ;
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingOptionList GALGAS_regularPreferenceBinding::reader_mOutletBindingOptionList (UNUSED_LOCATION_ARGS) const {
  GALGAS_outletBindingOptionList result ;
  if (NULL != mObjectPtr) {
    const cPtr_regularPreferenceBinding * p = (const cPtr_regularPreferenceBinding *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_regularPreferenceBinding) ;
    result = p->mAttribute_mOutletBindingOptionList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingOptionList cPtr_regularPreferenceBinding::reader_mOutletBindingOptionList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mOutletBindingOptionList ;
}

//---------------------------------------------------------------------------*
//             Pointer class for @regularPreferenceBinding class             *
//---------------------------------------------------------------------------*

cPtr_regularPreferenceBinding::cPtr_regularPreferenceBinding (const GALGAS_lstring & in_mBindingName,
                                                              const GALGAS_lstring & in_mPreferenceName,
                                                              const GALGAS_lstring & in_mPreferenceAttributeName,
                                                              const GALGAS_outletBindingOptionList & in_mOutletBindingOptionList
                                                              COMMA_LOCATION_ARGS) :
cPtr_abstractBinding (THERE),
mAttribute_mBindingName (in_mBindingName),
mAttribute_mPreferenceName (in_mPreferenceName),
mAttribute_mPreferenceAttributeName (in_mPreferenceAttributeName),
mAttribute_mOutletBindingOptionList (in_mOutletBindingOptionList) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_regularPreferenceBinding::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_regularPreferenceBinding ;
}

void cPtr_regularPreferenceBinding::description (C_String & ioString,
                                                 const PMSInt32 inIndentation) const {
  ioString << "[@regularPreferenceBinding:" ;
  mAttribute_mBindingName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mPreferenceName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mPreferenceAttributeName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mOutletBindingOptionList.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                      @regularPreferenceBinding type                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_regularPreferenceBinding ("regularPreferenceBinding",
                                                 & kTypeDescriptor_GALGAS_abstractBinding) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_regularPreferenceBinding::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_regularPreferenceBinding ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_regularPreferenceBinding::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_regularPreferenceBinding (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_regularPreferenceBinding GALGAS_regularPreferenceBinding::extractObject (const GALGAS_object & inObject,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_regularPreferenceBinding result ;
  const GALGAS_regularPreferenceBinding * p = (const GALGAS_regularPreferenceBinding *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_regularPreferenceBinding *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("regularPreferenceBinding", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_regularRootBinding::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_regularRootBinding * p = (const cPtr_regularRootBinding *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_regularRootBinding) ;
  if (kOperandEqual == result) {
    result = mAttribute_mBindingName.objectCompare (p->mAttribute_mBindingName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mObservableAttributeName.objectCompare (p->mAttribute_mObservableAttributeName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mOutletBindingOptionList.objectCompare (p->mAttribute_mOutletBindingOptionList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mNamesCountOption.objectCompare (p->mAttribute_mNamesCountOption) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_regularRootBinding::objectCompare (const GALGAS_regularRootBinding & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_regularRootBinding::GALGAS_regularRootBinding (void) :
GALGAS_abstractBinding () {
}

//---------------------------------------------------------------------------*

GALGAS_regularRootBinding GALGAS_regularRootBinding::constructor_default (LOCATION_ARGS) {
  return GALGAS_regularRootBinding::constructor_new (GALGAS_lstring::constructor_default (HERE),
                                                     GALGAS_lstring::constructor_default (HERE),
                                                     GALGAS_outletBindingOptionList::constructor_emptyList (HERE),
                                                     GALGAS_bool::constructor_default (HERE)
                                                     COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GALGAS_regularRootBinding::GALGAS_regularRootBinding (const cPtr_regularRootBinding * inSourcePtr) :
GALGAS_abstractBinding (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_regularRootBinding) ;
}

//---------------------------------------------------------------------------*

GALGAS_regularRootBinding GALGAS_regularRootBinding::constructor_new (const GALGAS_lstring & inAttribute_mBindingName,
                                                                      const GALGAS_lstring & inAttribute_mObservableAttributeName,
                                                                      const GALGAS_outletBindingOptionList & inAttribute_mOutletBindingOptionList,
                                                                      const GALGAS_bool & inAttribute_mNamesCountOption
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_regularRootBinding result ;
  if (inAttribute_mBindingName.isValid () && inAttribute_mObservableAttributeName.isValid () && inAttribute_mOutletBindingOptionList.isValid () && inAttribute_mNamesCountOption.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_regularRootBinding (inAttribute_mBindingName, inAttribute_mObservableAttributeName, inAttribute_mOutletBindingOptionList, inAttribute_mNamesCountOption COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_regularRootBinding::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_regularRootBinding * p = (cPtr_regularRootBinding *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_regularRootBinding) ;
    cPtr_regularRootBinding * r = NULL ;
    macroMyNew (r, cPtr_regularRootBinding (p->mAttribute_mBindingName, p->mAttribute_mObservableAttributeName, p->mAttribute_mOutletBindingOptionList, p->mAttribute_mNamesCountOption COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_regularRootBinding::reader_mBindingName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_regularRootBinding * p = (const cPtr_regularRootBinding *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_regularRootBinding) ;
    result = p->mAttribute_mBindingName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cPtr_regularRootBinding::reader_mBindingName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mBindingName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_regularRootBinding::reader_mObservableAttributeName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_regularRootBinding * p = (const cPtr_regularRootBinding *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_regularRootBinding) ;
    result = p->mAttribute_mObservableAttributeName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cPtr_regularRootBinding::reader_mObservableAttributeName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mObservableAttributeName ;
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingOptionList GALGAS_regularRootBinding::reader_mOutletBindingOptionList (UNUSED_LOCATION_ARGS) const {
  GALGAS_outletBindingOptionList result ;
  if (NULL != mObjectPtr) {
    const cPtr_regularRootBinding * p = (const cPtr_regularRootBinding *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_regularRootBinding) ;
    result = p->mAttribute_mOutletBindingOptionList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingOptionList cPtr_regularRootBinding::reader_mOutletBindingOptionList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mOutletBindingOptionList ;
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_regularRootBinding::reader_mNamesCountOption (UNUSED_LOCATION_ARGS) const {
  GALGAS_bool result ;
  if (NULL != mObjectPtr) {
    const cPtr_regularRootBinding * p = (const cPtr_regularRootBinding *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_regularRootBinding) ;
    result = p->mAttribute_mNamesCountOption ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bool cPtr_regularRootBinding::reader_mNamesCountOption (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mNamesCountOption ;
}

//---------------------------------------------------------------------------*
//                Pointer class for @regularRootBinding class                *
//---------------------------------------------------------------------------*

cPtr_regularRootBinding::cPtr_regularRootBinding (const GALGAS_lstring & in_mBindingName,
                                                  const GALGAS_lstring & in_mObservableAttributeName,
                                                  const GALGAS_outletBindingOptionList & in_mOutletBindingOptionList,
                                                  const GALGAS_bool & in_mNamesCountOption
                                                  COMMA_LOCATION_ARGS) :
cPtr_abstractBinding (THERE),
mAttribute_mBindingName (in_mBindingName),
mAttribute_mObservableAttributeName (in_mObservableAttributeName),
mAttribute_mOutletBindingOptionList (in_mOutletBindingOptionList),
mAttribute_mNamesCountOption (in_mNamesCountOption) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_regularRootBinding::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_regularRootBinding ;
}

void cPtr_regularRootBinding::description (C_String & ioString,
                                           const PMSInt32 inIndentation) const {
  ioString << "[@regularRootBinding:" ;
  mAttribute_mBindingName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mObservableAttributeName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mOutletBindingOptionList.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mNamesCountOption.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                         @regularRootBinding type                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_regularRootBinding ("regularRootBinding",
                                           & kTypeDescriptor_GALGAS_abstractBinding) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_regularRootBinding::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_regularRootBinding ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_regularRootBinding::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_regularRootBinding (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_regularRootBinding GALGAS_regularRootBinding::extractObject (const GALGAS_object & inObject,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_regularRootBinding result ;
  const GALGAS_regularRootBinding * p = (const GALGAS_regularRootBinding *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_regularRootBinding *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("regularRootBinding", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_regularSelfBinding::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_regularSelfBinding * p = (const cPtr_regularSelfBinding *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_regularSelfBinding) ;
  if (kOperandEqual == result) {
    result = mAttribute_mBindingName.objectCompare (p->mAttribute_mBindingName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mObservableAttributeName.objectCompare (p->mAttribute_mObservableAttributeName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mOutletBindingOptionList.objectCompare (p->mAttribute_mOutletBindingOptionList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mNamesCountOption.objectCompare (p->mAttribute_mNamesCountOption) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_regularSelfBinding::objectCompare (const GALGAS_regularSelfBinding & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_regularSelfBinding::GALGAS_regularSelfBinding (void) :
GALGAS_abstractBinding () {
}

//---------------------------------------------------------------------------*

GALGAS_regularSelfBinding GALGAS_regularSelfBinding::constructor_default (LOCATION_ARGS) {
  return GALGAS_regularSelfBinding::constructor_new (GALGAS_lstring::constructor_default (HERE),
                                                     GALGAS_lstring::constructor_default (HERE),
                                                     GALGAS_outletBindingOptionList::constructor_emptyList (HERE),
                                                     GALGAS_bool::constructor_default (HERE)
                                                     COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GALGAS_regularSelfBinding::GALGAS_regularSelfBinding (const cPtr_regularSelfBinding * inSourcePtr) :
GALGAS_abstractBinding (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_regularSelfBinding) ;
}

//---------------------------------------------------------------------------*

GALGAS_regularSelfBinding GALGAS_regularSelfBinding::constructor_new (const GALGAS_lstring & inAttribute_mBindingName,
                                                                      const GALGAS_lstring & inAttribute_mObservableAttributeName,
                                                                      const GALGAS_outletBindingOptionList & inAttribute_mOutletBindingOptionList,
                                                                      const GALGAS_bool & inAttribute_mNamesCountOption
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_regularSelfBinding result ;
  if (inAttribute_mBindingName.isValid () && inAttribute_mObservableAttributeName.isValid () && inAttribute_mOutletBindingOptionList.isValid () && inAttribute_mNamesCountOption.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_regularSelfBinding (inAttribute_mBindingName, inAttribute_mObservableAttributeName, inAttribute_mOutletBindingOptionList, inAttribute_mNamesCountOption COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_regularSelfBinding::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_regularSelfBinding * p = (cPtr_regularSelfBinding *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_regularSelfBinding) ;
    cPtr_regularSelfBinding * r = NULL ;
    macroMyNew (r, cPtr_regularSelfBinding (p->mAttribute_mBindingName, p->mAttribute_mObservableAttributeName, p->mAttribute_mOutletBindingOptionList, p->mAttribute_mNamesCountOption COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_regularSelfBinding::reader_mBindingName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_regularSelfBinding * p = (const cPtr_regularSelfBinding *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_regularSelfBinding) ;
    result = p->mAttribute_mBindingName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cPtr_regularSelfBinding::reader_mBindingName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mBindingName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_regularSelfBinding::reader_mObservableAttributeName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_regularSelfBinding * p = (const cPtr_regularSelfBinding *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_regularSelfBinding) ;
    result = p->mAttribute_mObservableAttributeName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cPtr_regularSelfBinding::reader_mObservableAttributeName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mObservableAttributeName ;
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingOptionList GALGAS_regularSelfBinding::reader_mOutletBindingOptionList (UNUSED_LOCATION_ARGS) const {
  GALGAS_outletBindingOptionList result ;
  if (NULL != mObjectPtr) {
    const cPtr_regularSelfBinding * p = (const cPtr_regularSelfBinding *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_regularSelfBinding) ;
    result = p->mAttribute_mOutletBindingOptionList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingOptionList cPtr_regularSelfBinding::reader_mOutletBindingOptionList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mOutletBindingOptionList ;
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_regularSelfBinding::reader_mNamesCountOption (UNUSED_LOCATION_ARGS) const {
  GALGAS_bool result ;
  if (NULL != mObjectPtr) {
    const cPtr_regularSelfBinding * p = (const cPtr_regularSelfBinding *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_regularSelfBinding) ;
    result = p->mAttribute_mNamesCountOption ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bool cPtr_regularSelfBinding::reader_mNamesCountOption (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mNamesCountOption ;
}

//---------------------------------------------------------------------------*
//                Pointer class for @regularSelfBinding class                *
//---------------------------------------------------------------------------*

cPtr_regularSelfBinding::cPtr_regularSelfBinding (const GALGAS_lstring & in_mBindingName,
                                                  const GALGAS_lstring & in_mObservableAttributeName,
                                                  const GALGAS_outletBindingOptionList & in_mOutletBindingOptionList,
                                                  const GALGAS_bool & in_mNamesCountOption
                                                  COMMA_LOCATION_ARGS) :
cPtr_abstractBinding (THERE),
mAttribute_mBindingName (in_mBindingName),
mAttribute_mObservableAttributeName (in_mObservableAttributeName),
mAttribute_mOutletBindingOptionList (in_mOutletBindingOptionList),
mAttribute_mNamesCountOption (in_mNamesCountOption) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_regularSelfBinding::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_regularSelfBinding ;
}

void cPtr_regularSelfBinding::description (C_String & ioString,
                                           const PMSInt32 inIndentation) const {
  ioString << "[@regularSelfBinding:" ;
  mAttribute_mBindingName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mObservableAttributeName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mOutletBindingOptionList.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mNamesCountOption.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                         @regularSelfBinding type                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_regularSelfBinding ("regularSelfBinding",
                                           & kTypeDescriptor_GALGAS_abstractBinding) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_regularSelfBinding::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_regularSelfBinding ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_regularSelfBinding::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_regularSelfBinding (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_regularSelfBinding GALGAS_regularSelfBinding::extractObject (const GALGAS_object & inObject,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_regularSelfBinding result ;
  const GALGAS_regularSelfBinding * p = (const GALGAS_regularSelfBinding *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_regularSelfBinding *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("regularSelfBinding", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_runBinding::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_runBinding * p = (const cPtr_runBinding *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_runBinding) ;
  if (kOperandEqual == result) {
    result = mAttribute_mTargetName.objectCompare (p->mAttribute_mTargetName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mActionName.objectCompare (p->mAttribute_mActionName) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_runBinding::objectCompare (const GALGAS_runBinding & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_runBinding::GALGAS_runBinding (void) :
GALGAS_abstractBinding () {
}

//---------------------------------------------------------------------------*

GALGAS_runBinding GALGAS_runBinding::constructor_default (LOCATION_ARGS) {
  return GALGAS_runBinding::constructor_new (GALGAS_lstring::constructor_default (HERE),
                                             GALGAS_lstring::constructor_default (HERE)
                                             COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GALGAS_runBinding::GALGAS_runBinding (const cPtr_runBinding * inSourcePtr) :
GALGAS_abstractBinding (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_runBinding) ;
}

//---------------------------------------------------------------------------*

GALGAS_runBinding GALGAS_runBinding::constructor_new (const GALGAS_lstring & inAttribute_mTargetName,
                                                      const GALGAS_lstring & inAttribute_mActionName
                                                      COMMA_LOCATION_ARGS) {
  GALGAS_runBinding result ;
  if (inAttribute_mTargetName.isValid () && inAttribute_mActionName.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_runBinding (inAttribute_mTargetName, inAttribute_mActionName COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_runBinding::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_runBinding * p = (cPtr_runBinding *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_runBinding) ;
    cPtr_runBinding * r = NULL ;
    macroMyNew (r, cPtr_runBinding (p->mAttribute_mTargetName, p->mAttribute_mActionName COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_runBinding::reader_mTargetName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_runBinding * p = (const cPtr_runBinding *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_runBinding) ;
    result = p->mAttribute_mTargetName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cPtr_runBinding::reader_mTargetName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mTargetName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_runBinding::reader_mActionName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_runBinding * p = (const cPtr_runBinding *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_runBinding) ;
    result = p->mAttribute_mActionName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cPtr_runBinding::reader_mActionName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mActionName ;
}

//---------------------------------------------------------------------------*
//                    Pointer class for @runBinding class                    *
//---------------------------------------------------------------------------*

cPtr_runBinding::cPtr_runBinding (const GALGAS_lstring & in_mTargetName,
                                  const GALGAS_lstring & in_mActionName
                                  COMMA_LOCATION_ARGS) :
cPtr_abstractBinding (THERE),
mAttribute_mTargetName (in_mTargetName),
mAttribute_mActionName (in_mActionName) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_runBinding::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_runBinding ;
}

void cPtr_runBinding::description (C_String & ioString,
                                   const PMSInt32 inIndentation) const {
  ioString << "[@runBinding:" ;
  mAttribute_mTargetName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mActionName.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                             @runBinding type                              *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_runBinding ("runBinding",
                                   & kTypeDescriptor_GALGAS_abstractBinding) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_runBinding::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_runBinding ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_runBinding::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_runBinding (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_runBinding GALGAS_runBinding::extractObject (const GALGAS_object & inObject,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) {
  GALGAS_runBinding result ;
  const GALGAS_runBinding * p = (const GALGAS_runBinding *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_runBinding *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("runBinding", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_tableValueBinding::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_tableValueBinding * p = (const cPtr_tableValueBinding *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_tableValueBinding) ;
  if (kOperandEqual == result) {
    result = mAttribute_mControllerName.objectCompare (p->mAttribute_mControllerName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mTableValueColumnBinding.objectCompare (p->mAttribute_mTableValueColumnBinding) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_tableValueBinding::objectCompare (const GALGAS_tableValueBinding & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_tableValueBinding::GALGAS_tableValueBinding (void) :
GALGAS_abstractBinding () {
}

//---------------------------------------------------------------------------*

GALGAS_tableValueBinding GALGAS_tableValueBinding::constructor_default (LOCATION_ARGS) {
  return GALGAS_tableValueBinding::constructor_new (GALGAS_lstring::constructor_default (HERE),
                                                    GALGAS_tableValueColumnBinding::constructor_emptyList (HERE)
                                                    COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GALGAS_tableValueBinding::GALGAS_tableValueBinding (const cPtr_tableValueBinding * inSourcePtr) :
GALGAS_abstractBinding (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_tableValueBinding) ;
}

//---------------------------------------------------------------------------*

GALGAS_tableValueBinding GALGAS_tableValueBinding::constructor_new (const GALGAS_lstring & inAttribute_mControllerName,
                                                                    const GALGAS_tableValueColumnBinding & inAttribute_mTableValueColumnBinding
                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_tableValueBinding result ;
  if (inAttribute_mControllerName.isValid () && inAttribute_mTableValueColumnBinding.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_tableValueBinding (inAttribute_mControllerName, inAttribute_mTableValueColumnBinding COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_tableValueBinding::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_tableValueBinding * p = (cPtr_tableValueBinding *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_tableValueBinding) ;
    cPtr_tableValueBinding * r = NULL ;
    macroMyNew (r, cPtr_tableValueBinding (p->mAttribute_mControllerName, p->mAttribute_mTableValueColumnBinding COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_tableValueBinding::reader_mControllerName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_tableValueBinding * p = (const cPtr_tableValueBinding *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_tableValueBinding) ;
    result = p->mAttribute_mControllerName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cPtr_tableValueBinding::reader_mControllerName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mControllerName ;
}

//---------------------------------------------------------------------------*

GALGAS_tableValueColumnBinding GALGAS_tableValueBinding::reader_mTableValueColumnBinding (UNUSED_LOCATION_ARGS) const {
  GALGAS_tableValueColumnBinding result ;
  if (NULL != mObjectPtr) {
    const cPtr_tableValueBinding * p = (const cPtr_tableValueBinding *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_tableValueBinding) ;
    result = p->mAttribute_mTableValueColumnBinding ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_tableValueColumnBinding cPtr_tableValueBinding::reader_mTableValueColumnBinding (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mTableValueColumnBinding ;
}

//---------------------------------------------------------------------------*
//                Pointer class for @tableValueBinding class                 *
//---------------------------------------------------------------------------*

cPtr_tableValueBinding::cPtr_tableValueBinding (const GALGAS_lstring & in_mControllerName,
                                                const GALGAS_tableValueColumnBinding & in_mTableValueColumnBinding
                                                COMMA_LOCATION_ARGS) :
cPtr_abstractBinding (THERE),
mAttribute_mControllerName (in_mControllerName),
mAttribute_mTableValueColumnBinding (in_mTableValueColumnBinding) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_tableValueBinding::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_tableValueBinding ;
}

void cPtr_tableValueBinding::description (C_String & ioString,
                                          const PMSInt32 inIndentation) const {
  ioString << "[@tableValueBinding:" ;
  mAttribute_mControllerName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mTableValueColumnBinding.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                          @tableValueBinding type                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_tableValueBinding ("tableValueBinding",
                                          & kTypeDescriptor_GALGAS_abstractBinding) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_tableValueBinding::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_tableValueBinding ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_tableValueBinding::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_tableValueBinding (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_tableValueBinding GALGAS_tableValueBinding::extractObject (const GALGAS_object & inObject,
                                                                  C_Compiler * inCompiler
                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_tableValueBinding result ;
  const GALGAS_tableValueBinding * p = (const GALGAS_tableValueBinding *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_tableValueBinding *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("tableValueBinding", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*



typeComparisonResult GALGAS_abstractDefaultValue::objectCompare (const GALGAS_abstractDefaultValue & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_abstractDefaultValue::GALGAS_abstractDefaultValue (void) :
AC_GALGAS_class () {
}

//---------------------------------------------------------------------------*

GALGAS_abstractDefaultValue::GALGAS_abstractDefaultValue (const cPtr_abstractDefaultValue * inSourcePtr) :
AC_GALGAS_class (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_abstractDefaultValue) ;
}

//---------------------------------------------------------------------------*
//               Pointer class for @abstractDefaultValue class               *
//---------------------------------------------------------------------------*

cPtr_abstractDefaultValue::cPtr_abstractDefaultValue (LOCATION_ARGS) :
acPtr_class (THERE) {
}



//---------------------------------------------------------------------------*
//                                                                           *
//                        @abstractDefaultValue type                         *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_abstractDefaultValue ("abstractDefaultValue",
                                             NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_abstractDefaultValue::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_abstractDefaultValue ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_abstractDefaultValue::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_abstractDefaultValue (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_abstractDefaultValue GALGAS_abstractDefaultValue::extractObject (const GALGAS_object & inObject,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_abstractDefaultValue result ;
  const GALGAS_abstractDefaultValue * p = (const GALGAS_abstractDefaultValue *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_abstractDefaultValue *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("abstractDefaultValue", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_boolAsDefaultValue::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_boolAsDefaultValue * p = (const cPtr_boolAsDefaultValue *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_boolAsDefaultValue) ;
  if (kOperandEqual == result) {
    result = mAttribute_mValue.objectCompare (p->mAttribute_mValue) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_boolAsDefaultValue::objectCompare (const GALGAS_boolAsDefaultValue & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_boolAsDefaultValue::GALGAS_boolAsDefaultValue (void) :
GALGAS_abstractDefaultValue () {
}

//---------------------------------------------------------------------------*

GALGAS_boolAsDefaultValue GALGAS_boolAsDefaultValue::constructor_default (LOCATION_ARGS) {
  return GALGAS_boolAsDefaultValue::constructor_new (GALGAS_lbool::constructor_default (HERE)
                                                     COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GALGAS_boolAsDefaultValue::GALGAS_boolAsDefaultValue (const cPtr_boolAsDefaultValue * inSourcePtr) :
GALGAS_abstractDefaultValue (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_boolAsDefaultValue) ;
}

//---------------------------------------------------------------------------*

GALGAS_boolAsDefaultValue GALGAS_boolAsDefaultValue::constructor_new (const GALGAS_lbool & inAttribute_mValue
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_boolAsDefaultValue result ;
  if (inAttribute_mValue.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_boolAsDefaultValue (inAttribute_mValue COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_boolAsDefaultValue::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_boolAsDefaultValue * p = (cPtr_boolAsDefaultValue *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_boolAsDefaultValue) ;
    cPtr_boolAsDefaultValue * r = NULL ;
    macroMyNew (r, cPtr_boolAsDefaultValue (p->mAttribute_mValue COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//---------------------------------------------------------------------------*

GALGAS_lbool GALGAS_boolAsDefaultValue::reader_mValue (UNUSED_LOCATION_ARGS) const {
  GALGAS_lbool result ;
  if (NULL != mObjectPtr) {
    const cPtr_boolAsDefaultValue * p = (const cPtr_boolAsDefaultValue *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_boolAsDefaultValue) ;
    result = p->mAttribute_mValue ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lbool cPtr_boolAsDefaultValue::reader_mValue (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mValue ;
}

//---------------------------------------------------------------------------*
//                Pointer class for @boolAsDefaultValue class                *
//---------------------------------------------------------------------------*

cPtr_boolAsDefaultValue::cPtr_boolAsDefaultValue (const GALGAS_lbool & in_mValue
                                                  COMMA_LOCATION_ARGS) :
cPtr_abstractDefaultValue (THERE),
mAttribute_mValue (in_mValue) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_boolAsDefaultValue::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_boolAsDefaultValue ;
}

void cPtr_boolAsDefaultValue::description (C_String & ioString,
                                           const PMSInt32 inIndentation) const {
  ioString << "[@boolAsDefaultValue:" ;
  mAttribute_mValue.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                         @boolAsDefaultValue type                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_boolAsDefaultValue ("boolAsDefaultValue",
                                           & kTypeDescriptor_GALGAS_abstractDefaultValue) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_boolAsDefaultValue::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_boolAsDefaultValue ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_boolAsDefaultValue::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_boolAsDefaultValue (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_boolAsDefaultValue GALGAS_boolAsDefaultValue::extractObject (const GALGAS_object & inObject,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_boolAsDefaultValue result ;
  const GALGAS_boolAsDefaultValue * p = (const GALGAS_boolAsDefaultValue *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_boolAsDefaultValue *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("boolAsDefaultValue", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_doubleAsDefaultValue::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_doubleAsDefaultValue * p = (const cPtr_doubleAsDefaultValue *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_doubleAsDefaultValue) ;
  if (kOperandEqual == result) {
    result = mAttribute_mValue.objectCompare (p->mAttribute_mValue) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_doubleAsDefaultValue::objectCompare (const GALGAS_doubleAsDefaultValue & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_doubleAsDefaultValue::GALGAS_doubleAsDefaultValue (void) :
GALGAS_abstractDefaultValue () {
}

//---------------------------------------------------------------------------*

GALGAS_doubleAsDefaultValue GALGAS_doubleAsDefaultValue::constructor_default (LOCATION_ARGS) {
  return GALGAS_doubleAsDefaultValue::constructor_new (GALGAS_ldouble::constructor_default (HERE)
                                                       COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GALGAS_doubleAsDefaultValue::GALGAS_doubleAsDefaultValue (const cPtr_doubleAsDefaultValue * inSourcePtr) :
GALGAS_abstractDefaultValue (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_doubleAsDefaultValue) ;
}

//---------------------------------------------------------------------------*

GALGAS_doubleAsDefaultValue GALGAS_doubleAsDefaultValue::constructor_new (const GALGAS_ldouble & inAttribute_mValue
                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_doubleAsDefaultValue result ;
  if (inAttribute_mValue.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_doubleAsDefaultValue (inAttribute_mValue COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_doubleAsDefaultValue::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_doubleAsDefaultValue * p = (cPtr_doubleAsDefaultValue *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_doubleAsDefaultValue) ;
    cPtr_doubleAsDefaultValue * r = NULL ;
    macroMyNew (r, cPtr_doubleAsDefaultValue (p->mAttribute_mValue COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//---------------------------------------------------------------------------*

GALGAS_ldouble GALGAS_doubleAsDefaultValue::reader_mValue (UNUSED_LOCATION_ARGS) const {
  GALGAS_ldouble result ;
  if (NULL != mObjectPtr) {
    const cPtr_doubleAsDefaultValue * p = (const cPtr_doubleAsDefaultValue *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_doubleAsDefaultValue) ;
    result = p->mAttribute_mValue ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_ldouble cPtr_doubleAsDefaultValue::reader_mValue (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mValue ;
}

//---------------------------------------------------------------------------*
//               Pointer class for @doubleAsDefaultValue class               *
//---------------------------------------------------------------------------*

cPtr_doubleAsDefaultValue::cPtr_doubleAsDefaultValue (const GALGAS_ldouble & in_mValue
                                                      COMMA_LOCATION_ARGS) :
cPtr_abstractDefaultValue (THERE),
mAttribute_mValue (in_mValue) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_doubleAsDefaultValue::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_doubleAsDefaultValue ;
}

void cPtr_doubleAsDefaultValue::description (C_String & ioString,
                                             const PMSInt32 inIndentation) const {
  ioString << "[@doubleAsDefaultValue:" ;
  mAttribute_mValue.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                        @doubleAsDefaultValue type                         *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_doubleAsDefaultValue ("doubleAsDefaultValue",
                                             & kTypeDescriptor_GALGAS_abstractDefaultValue) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_doubleAsDefaultValue::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_doubleAsDefaultValue ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_doubleAsDefaultValue::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_doubleAsDefaultValue (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_doubleAsDefaultValue GALGAS_doubleAsDefaultValue::extractObject (const GALGAS_object & inObject,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_doubleAsDefaultValue result ;
  const GALGAS_doubleAsDefaultValue * p = (const GALGAS_doubleAsDefaultValue *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_doubleAsDefaultValue *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("doubleAsDefaultValue", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_identifierAsDefaultValue::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_identifierAsDefaultValue * p = (const cPtr_identifierAsDefaultValue *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_identifierAsDefaultValue) ;
  if (kOperandEqual == result) {
    result = mAttribute_mValue.objectCompare (p->mAttribute_mValue) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_identifierAsDefaultValue::objectCompare (const GALGAS_identifierAsDefaultValue & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_identifierAsDefaultValue::GALGAS_identifierAsDefaultValue (void) :
GALGAS_abstractDefaultValue () {
}

//---------------------------------------------------------------------------*

GALGAS_identifierAsDefaultValue GALGAS_identifierAsDefaultValue::constructor_default (LOCATION_ARGS) {
  return GALGAS_identifierAsDefaultValue::constructor_new (GALGAS_lstring::constructor_default (HERE)
                                                           COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GALGAS_identifierAsDefaultValue::GALGAS_identifierAsDefaultValue (const cPtr_identifierAsDefaultValue * inSourcePtr) :
GALGAS_abstractDefaultValue (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_identifierAsDefaultValue) ;
}

//---------------------------------------------------------------------------*

GALGAS_identifierAsDefaultValue GALGAS_identifierAsDefaultValue::constructor_new (const GALGAS_lstring & inAttribute_mValue
                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_identifierAsDefaultValue result ;
  if (inAttribute_mValue.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_identifierAsDefaultValue (inAttribute_mValue COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_identifierAsDefaultValue::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_identifierAsDefaultValue * p = (cPtr_identifierAsDefaultValue *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_identifierAsDefaultValue) ;
    cPtr_identifierAsDefaultValue * r = NULL ;
    macroMyNew (r, cPtr_identifierAsDefaultValue (p->mAttribute_mValue COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_identifierAsDefaultValue::reader_mValue (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_identifierAsDefaultValue * p = (const cPtr_identifierAsDefaultValue *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_identifierAsDefaultValue) ;
    result = p->mAttribute_mValue ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cPtr_identifierAsDefaultValue::reader_mValue (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mValue ;
}

//---------------------------------------------------------------------------*
//             Pointer class for @identifierAsDefaultValue class             *
//---------------------------------------------------------------------------*

cPtr_identifierAsDefaultValue::cPtr_identifierAsDefaultValue (const GALGAS_lstring & in_mValue
                                                              COMMA_LOCATION_ARGS) :
cPtr_abstractDefaultValue (THERE),
mAttribute_mValue (in_mValue) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_identifierAsDefaultValue::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_identifierAsDefaultValue ;
}

void cPtr_identifierAsDefaultValue::description (C_String & ioString,
                                                 const PMSInt32 inIndentation) const {
  ioString << "[@identifierAsDefaultValue:" ;
  mAttribute_mValue.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                      @identifierAsDefaultValue type                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_identifierAsDefaultValue ("identifierAsDefaultValue",
                                                 & kTypeDescriptor_GALGAS_abstractDefaultValue) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_identifierAsDefaultValue::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_identifierAsDefaultValue ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_identifierAsDefaultValue::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_identifierAsDefaultValue (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_identifierAsDefaultValue GALGAS_identifierAsDefaultValue::extractObject (const GALGAS_object & inObject,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_identifierAsDefaultValue result ;
  const GALGAS_identifierAsDefaultValue * p = (const GALGAS_identifierAsDefaultValue *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_identifierAsDefaultValue *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("identifierAsDefaultValue", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_integerAsDefaultValue::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_integerAsDefaultValue * p = (const cPtr_integerAsDefaultValue *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_integerAsDefaultValue) ;
  if (kOperandEqual == result) {
    result = mAttribute_mValue.objectCompare (p->mAttribute_mValue) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_integerAsDefaultValue::objectCompare (const GALGAS_integerAsDefaultValue & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_integerAsDefaultValue::GALGAS_integerAsDefaultValue (void) :
GALGAS_abstractDefaultValue () {
}

//---------------------------------------------------------------------------*

GALGAS_integerAsDefaultValue GALGAS_integerAsDefaultValue::constructor_default (LOCATION_ARGS) {
  return GALGAS_integerAsDefaultValue::constructor_new (GALGAS_luint::constructor_default (HERE)
                                                        COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GALGAS_integerAsDefaultValue::GALGAS_integerAsDefaultValue (const cPtr_integerAsDefaultValue * inSourcePtr) :
GALGAS_abstractDefaultValue (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_integerAsDefaultValue) ;
}

//---------------------------------------------------------------------------*

GALGAS_integerAsDefaultValue GALGAS_integerAsDefaultValue::constructor_new (const GALGAS_luint & inAttribute_mValue
                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_integerAsDefaultValue result ;
  if (inAttribute_mValue.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_integerAsDefaultValue (inAttribute_mValue COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_integerAsDefaultValue::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_integerAsDefaultValue * p = (cPtr_integerAsDefaultValue *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_integerAsDefaultValue) ;
    cPtr_integerAsDefaultValue * r = NULL ;
    macroMyNew (r, cPtr_integerAsDefaultValue (p->mAttribute_mValue COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//---------------------------------------------------------------------------*

GALGAS_luint GALGAS_integerAsDefaultValue::reader_mValue (UNUSED_LOCATION_ARGS) const {
  GALGAS_luint result ;
  if (NULL != mObjectPtr) {
    const cPtr_integerAsDefaultValue * p = (const cPtr_integerAsDefaultValue *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_integerAsDefaultValue) ;
    result = p->mAttribute_mValue ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_luint cPtr_integerAsDefaultValue::reader_mValue (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mValue ;
}

//---------------------------------------------------------------------------*
//              Pointer class for @integerAsDefaultValue class               *
//---------------------------------------------------------------------------*

cPtr_integerAsDefaultValue::cPtr_integerAsDefaultValue (const GALGAS_luint & in_mValue
                                                        COMMA_LOCATION_ARGS) :
cPtr_abstractDefaultValue (THERE),
mAttribute_mValue (in_mValue) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_integerAsDefaultValue::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_integerAsDefaultValue ;
}

void cPtr_integerAsDefaultValue::description (C_String & ioString,
                                              const PMSInt32 inIndentation) const {
  ioString << "[@integerAsDefaultValue:" ;
  mAttribute_mValue.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                        @integerAsDefaultValue type                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_integerAsDefaultValue ("integerAsDefaultValue",
                                              & kTypeDescriptor_GALGAS_abstractDefaultValue) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_integerAsDefaultValue::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_integerAsDefaultValue ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_integerAsDefaultValue::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_integerAsDefaultValue (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_integerAsDefaultValue GALGAS_integerAsDefaultValue::extractObject (const GALGAS_object & inObject,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_integerAsDefaultValue result ;
  const GALGAS_integerAsDefaultValue * p = (const GALGAS_integerAsDefaultValue *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_integerAsDefaultValue *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("integerAsDefaultValue", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_listAsDefaultValue::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_listAsDefaultValue * p = (const cPtr_listAsDefaultValue *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_listAsDefaultValue) ;
  if (kOperandEqual == result) {
    result = mAttribute_mStartLocation.objectCompare (p->mAttribute_mStartLocation) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mDefaultValueList.objectCompare (p->mAttribute_mDefaultValueList) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_listAsDefaultValue::objectCompare (const GALGAS_listAsDefaultValue & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_listAsDefaultValue::GALGAS_listAsDefaultValue (void) :
GALGAS_abstractDefaultValue () {
}

//---------------------------------------------------------------------------*

GALGAS_listAsDefaultValue GALGAS_listAsDefaultValue::constructor_default (LOCATION_ARGS) {
  return GALGAS_listAsDefaultValue::constructor_new (GALGAS_location::constructor_nowhere (HERE),
                                                     GALGAS_defaultValueList::constructor_emptyList (HERE)
                                                     COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GALGAS_listAsDefaultValue::GALGAS_listAsDefaultValue (const cPtr_listAsDefaultValue * inSourcePtr) :
GALGAS_abstractDefaultValue (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_listAsDefaultValue) ;
}

//---------------------------------------------------------------------------*

GALGAS_listAsDefaultValue GALGAS_listAsDefaultValue::constructor_new (const GALGAS_location & inAttribute_mStartLocation,
                                                                      const GALGAS_defaultValueList & inAttribute_mDefaultValueList
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_listAsDefaultValue result ;
  if (inAttribute_mStartLocation.isValid () && inAttribute_mDefaultValueList.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_listAsDefaultValue (inAttribute_mStartLocation, inAttribute_mDefaultValueList COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_listAsDefaultValue::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_listAsDefaultValue * p = (cPtr_listAsDefaultValue *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_listAsDefaultValue) ;
    cPtr_listAsDefaultValue * r = NULL ;
    macroMyNew (r, cPtr_listAsDefaultValue (p->mAttribute_mStartLocation, p->mAttribute_mDefaultValueList COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//---------------------------------------------------------------------------*

GALGAS_location GALGAS_listAsDefaultValue::reader_mStartLocation (UNUSED_LOCATION_ARGS) const {
  GALGAS_location result ;
  if (NULL != mObjectPtr) {
    const cPtr_listAsDefaultValue * p = (const cPtr_listAsDefaultValue *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_listAsDefaultValue) ;
    result = p->mAttribute_mStartLocation ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_location cPtr_listAsDefaultValue::reader_mStartLocation (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mStartLocation ;
}

//---------------------------------------------------------------------------*

GALGAS_defaultValueList GALGAS_listAsDefaultValue::reader_mDefaultValueList (UNUSED_LOCATION_ARGS) const {
  GALGAS_defaultValueList result ;
  if (NULL != mObjectPtr) {
    const cPtr_listAsDefaultValue * p = (const cPtr_listAsDefaultValue *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_listAsDefaultValue) ;
    result = p->mAttribute_mDefaultValueList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_defaultValueList cPtr_listAsDefaultValue::reader_mDefaultValueList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mDefaultValueList ;
}

//---------------------------------------------------------------------------*
//                Pointer class for @listAsDefaultValue class                *
//---------------------------------------------------------------------------*

cPtr_listAsDefaultValue::cPtr_listAsDefaultValue (const GALGAS_location & in_mStartLocation,
                                                  const GALGAS_defaultValueList & in_mDefaultValueList
                                                  COMMA_LOCATION_ARGS) :
cPtr_abstractDefaultValue (THERE),
mAttribute_mStartLocation (in_mStartLocation),
mAttribute_mDefaultValueList (in_mDefaultValueList) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_listAsDefaultValue::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_listAsDefaultValue ;
}

void cPtr_listAsDefaultValue::description (C_String & ioString,
                                           const PMSInt32 inIndentation) const {
  ioString << "[@listAsDefaultValue:" ;
  mAttribute_mStartLocation.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mDefaultValueList.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                         @listAsDefaultValue type                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_listAsDefaultValue ("listAsDefaultValue",
                                           & kTypeDescriptor_GALGAS_abstractDefaultValue) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_listAsDefaultValue::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_listAsDefaultValue ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_listAsDefaultValue::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_listAsDefaultValue (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_listAsDefaultValue GALGAS_listAsDefaultValue::extractObject (const GALGAS_object & inObject,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_listAsDefaultValue result ;
  const GALGAS_listAsDefaultValue * p = (const GALGAS_listAsDefaultValue *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_listAsDefaultValue *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("listAsDefaultValue", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_stringAsDefaultValue::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_stringAsDefaultValue * p = (const cPtr_stringAsDefaultValue *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_stringAsDefaultValue) ;
  if (kOperandEqual == result) {
    result = mAttribute_mValue.objectCompare (p->mAttribute_mValue) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_stringAsDefaultValue::objectCompare (const GALGAS_stringAsDefaultValue & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_stringAsDefaultValue::GALGAS_stringAsDefaultValue (void) :
GALGAS_abstractDefaultValue () {
}

//---------------------------------------------------------------------------*

GALGAS_stringAsDefaultValue GALGAS_stringAsDefaultValue::constructor_default (LOCATION_ARGS) {
  return GALGAS_stringAsDefaultValue::constructor_new (GALGAS_lstring::constructor_default (HERE)
                                                       COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GALGAS_stringAsDefaultValue::GALGAS_stringAsDefaultValue (const cPtr_stringAsDefaultValue * inSourcePtr) :
GALGAS_abstractDefaultValue (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_stringAsDefaultValue) ;
}

//---------------------------------------------------------------------------*

GALGAS_stringAsDefaultValue GALGAS_stringAsDefaultValue::constructor_new (const GALGAS_lstring & inAttribute_mValue
                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_stringAsDefaultValue result ;
  if (inAttribute_mValue.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_stringAsDefaultValue (inAttribute_mValue COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_stringAsDefaultValue::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_stringAsDefaultValue * p = (cPtr_stringAsDefaultValue *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_stringAsDefaultValue) ;
    cPtr_stringAsDefaultValue * r = NULL ;
    macroMyNew (r, cPtr_stringAsDefaultValue (p->mAttribute_mValue COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_stringAsDefaultValue::reader_mValue (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_stringAsDefaultValue * p = (const cPtr_stringAsDefaultValue *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_stringAsDefaultValue) ;
    result = p->mAttribute_mValue ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cPtr_stringAsDefaultValue::reader_mValue (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mValue ;
}

//---------------------------------------------------------------------------*
//               Pointer class for @stringAsDefaultValue class               *
//---------------------------------------------------------------------------*

cPtr_stringAsDefaultValue::cPtr_stringAsDefaultValue (const GALGAS_lstring & in_mValue
                                                      COMMA_LOCATION_ARGS) :
cPtr_abstractDefaultValue (THERE),
mAttribute_mValue (in_mValue) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_stringAsDefaultValue::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_stringAsDefaultValue ;
}

void cPtr_stringAsDefaultValue::description (C_String & ioString,
                                             const PMSInt32 inIndentation) const {
  ioString << "[@stringAsDefaultValue:" ;
  mAttribute_mValue.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                        @stringAsDefaultValue type                         *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_stringAsDefaultValue ("stringAsDefaultValue",
                                             & kTypeDescriptor_GALGAS_abstractDefaultValue) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_stringAsDefaultValue::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_stringAsDefaultValue ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_stringAsDefaultValue::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_stringAsDefaultValue (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_stringAsDefaultValue GALGAS_stringAsDefaultValue::extractObject (const GALGAS_object & inObject,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_stringAsDefaultValue result ;
  const GALGAS_stringAsDefaultValue * p = (const GALGAS_stringAsDefaultValue *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_stringAsDefaultValue *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("stringAsDefaultValue", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*



typeComparisonResult GALGAS_abstractTransientDependency::objectCompare (const GALGAS_abstractTransientDependency & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_abstractTransientDependency::GALGAS_abstractTransientDependency (void) :
AC_GALGAS_class () {
}

//---------------------------------------------------------------------------*

GALGAS_abstractTransientDependency::GALGAS_abstractTransientDependency (const cPtr_abstractTransientDependency * inSourcePtr) :
AC_GALGAS_class (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_abstractTransientDependency) ;
}

//---------------------------------------------------------------------------*
//           Pointer class for @abstractTransientDependency class            *
//---------------------------------------------------------------------------*

cPtr_abstractTransientDependency::cPtr_abstractTransientDependency (LOCATION_ARGS) :
acPtr_class (THERE) {
}



//---------------------------------------------------------------------------*
//                                                                           *
//                     @abstractTransientDependency type                     *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_abstractTransientDependency ("abstractTransientDependency",
                                                    NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_abstractTransientDependency::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_abstractTransientDependency ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_abstractTransientDependency::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_abstractTransientDependency (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_abstractTransientDependency GALGAS_abstractTransientDependency::extractObject (const GALGAS_object & inObject,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_abstractTransientDependency result ;
  const GALGAS_abstractTransientDependency * p = (const GALGAS_abstractTransientDependency *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_abstractTransientDependency *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("abstractTransientDependency", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_transientControllerDependency::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_transientControllerDependency * p = (const cPtr_transientControllerDependency *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_transientControllerDependency) ;
  if (kOperandEqual == result) {
    result = mAttribute_mControllerName.objectCompare (p->mAttribute_mControllerName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mMasterName.objectCompare (p->mAttribute_mMasterName) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_transientControllerDependency::objectCompare (const GALGAS_transientControllerDependency & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_transientControllerDependency::GALGAS_transientControllerDependency (void) :
GALGAS_abstractTransientDependency () {
}

//---------------------------------------------------------------------------*

GALGAS_transientControllerDependency GALGAS_transientControllerDependency::constructor_default (LOCATION_ARGS) {
  return GALGAS_transientControllerDependency::constructor_new (GALGAS_lstring::constructor_default (HERE),
                                                                GALGAS_lstring::constructor_default (HERE)
                                                                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GALGAS_transientControllerDependency::GALGAS_transientControllerDependency (const cPtr_transientControllerDependency * inSourcePtr) :
GALGAS_abstractTransientDependency (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_transientControllerDependency) ;
}

//---------------------------------------------------------------------------*

GALGAS_transientControllerDependency GALGAS_transientControllerDependency::constructor_new (const GALGAS_lstring & inAttribute_mControllerName,
                                                                                            const GALGAS_lstring & inAttribute_mMasterName
                                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_transientControllerDependency result ;
  if (inAttribute_mControllerName.isValid () && inAttribute_mMasterName.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_transientControllerDependency (inAttribute_mControllerName, inAttribute_mMasterName COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_transientControllerDependency::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_transientControllerDependency * p = (cPtr_transientControllerDependency *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_transientControllerDependency) ;
    cPtr_transientControllerDependency * r = NULL ;
    macroMyNew (r, cPtr_transientControllerDependency (p->mAttribute_mControllerName, p->mAttribute_mMasterName COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_transientControllerDependency::reader_mControllerName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_transientControllerDependency * p = (const cPtr_transientControllerDependency *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_transientControllerDependency) ;
    result = p->mAttribute_mControllerName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cPtr_transientControllerDependency::reader_mControllerName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mControllerName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_transientControllerDependency::reader_mMasterName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_transientControllerDependency * p = (const cPtr_transientControllerDependency *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_transientControllerDependency) ;
    result = p->mAttribute_mMasterName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cPtr_transientControllerDependency::reader_mMasterName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mMasterName ;
}

//---------------------------------------------------------------------------*
//          Pointer class for @transientControllerDependency class           *
//---------------------------------------------------------------------------*

cPtr_transientControllerDependency::cPtr_transientControllerDependency (const GALGAS_lstring & in_mControllerName,
                                                                        const GALGAS_lstring & in_mMasterName
                                                                        COMMA_LOCATION_ARGS) :
cPtr_abstractTransientDependency (THERE),
mAttribute_mControllerName (in_mControllerName),
mAttribute_mMasterName (in_mMasterName) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_transientControllerDependency::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_transientControllerDependency ;
}

void cPtr_transientControllerDependency::description (C_String & ioString,
                                                      const PMSInt32 inIndentation) const {
  ioString << "[@transientControllerDependency:" ;
  mAttribute_mControllerName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mMasterName.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                    @transientControllerDependency type                    *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_transientControllerDependency ("transientControllerDependency",
                                                      & kTypeDescriptor_GALGAS_abstractTransientDependency) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_transientControllerDependency::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_transientControllerDependency ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_transientControllerDependency::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_transientControllerDependency (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_transientControllerDependency GALGAS_transientControllerDependency::extractObject (const GALGAS_object & inObject,
                                                                                          C_Compiler * inCompiler
                                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_transientControllerDependency result ;
  const GALGAS_transientControllerDependency * p = (const GALGAS_transientControllerDependency *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_transientControllerDependency *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("transientControllerDependency", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_transientLocalDependency::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_transientLocalDependency * p = (const cPtr_transientLocalDependency *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_transientLocalDependency) ;
  if (kOperandEqual == result) {
    result = mAttribute_mMasterName.objectCompare (p->mAttribute_mMasterName) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_transientLocalDependency::objectCompare (const GALGAS_transientLocalDependency & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_transientLocalDependency::GALGAS_transientLocalDependency (void) :
GALGAS_abstractTransientDependency () {
}

//---------------------------------------------------------------------------*

GALGAS_transientLocalDependency GALGAS_transientLocalDependency::constructor_default (LOCATION_ARGS) {
  return GALGAS_transientLocalDependency::constructor_new (GALGAS_lstring::constructor_default (HERE)
                                                           COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GALGAS_transientLocalDependency::GALGAS_transientLocalDependency (const cPtr_transientLocalDependency * inSourcePtr) :
GALGAS_abstractTransientDependency (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_transientLocalDependency) ;
}

//---------------------------------------------------------------------------*

GALGAS_transientLocalDependency GALGAS_transientLocalDependency::constructor_new (const GALGAS_lstring & inAttribute_mMasterName
                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_transientLocalDependency result ;
  if (inAttribute_mMasterName.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_transientLocalDependency (inAttribute_mMasterName COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_transientLocalDependency::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_transientLocalDependency * p = (cPtr_transientLocalDependency *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_transientLocalDependency) ;
    cPtr_transientLocalDependency * r = NULL ;
    macroMyNew (r, cPtr_transientLocalDependency (p->mAttribute_mMasterName COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_transientLocalDependency::reader_mMasterName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_transientLocalDependency * p = (const cPtr_transientLocalDependency *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_transientLocalDependency) ;
    result = p->mAttribute_mMasterName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cPtr_transientLocalDependency::reader_mMasterName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mMasterName ;
}

//---------------------------------------------------------------------------*
//             Pointer class for @transientLocalDependency class             *
//---------------------------------------------------------------------------*

cPtr_transientLocalDependency::cPtr_transientLocalDependency (const GALGAS_lstring & in_mMasterName
                                                              COMMA_LOCATION_ARGS) :
cPtr_abstractTransientDependency (THERE),
mAttribute_mMasterName (in_mMasterName) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_transientLocalDependency::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_transientLocalDependency ;
}

void cPtr_transientLocalDependency::description (C_String & ioString,
                                                 const PMSInt32 inIndentation) const {
  ioString << "[@transientLocalDependency:" ;
  mAttribute_mMasterName.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                      @transientLocalDependency type                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_transientLocalDependency ("transientLocalDependency",
                                                 & kTypeDescriptor_GALGAS_abstractTransientDependency) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_transientLocalDependency::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_transientLocalDependency ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_transientLocalDependency::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_transientLocalDependency (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_transientLocalDependency GALGAS_transientLocalDependency::extractObject (const GALGAS_object & inObject,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_transientLocalDependency result ;
  const GALGAS_transientLocalDependency * p = (const GALGAS_transientLocalDependency *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_transientLocalDependency *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("transientLocalDependency", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_transientPreferenceDependency::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_transientPreferenceDependency * p = (const cPtr_transientPreferenceDependency *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_transientPreferenceDependency) ;
  if (kOperandEqual == result) {
    result = mAttribute_mPreferencesName.objectCompare (p->mAttribute_mPreferencesName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mMasterName.objectCompare (p->mAttribute_mMasterName) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_transientPreferenceDependency::objectCompare (const GALGAS_transientPreferenceDependency & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_transientPreferenceDependency::GALGAS_transientPreferenceDependency (void) :
GALGAS_abstractTransientDependency () {
}

//---------------------------------------------------------------------------*

GALGAS_transientPreferenceDependency GALGAS_transientPreferenceDependency::constructor_default (LOCATION_ARGS) {
  return GALGAS_transientPreferenceDependency::constructor_new (GALGAS_lstring::constructor_default (HERE),
                                                                GALGAS_lstring::constructor_default (HERE)
                                                                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GALGAS_transientPreferenceDependency::GALGAS_transientPreferenceDependency (const cPtr_transientPreferenceDependency * inSourcePtr) :
GALGAS_abstractTransientDependency (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_transientPreferenceDependency) ;
}

//---------------------------------------------------------------------------*

GALGAS_transientPreferenceDependency GALGAS_transientPreferenceDependency::constructor_new (const GALGAS_lstring & inAttribute_mPreferencesName,
                                                                                            const GALGAS_lstring & inAttribute_mMasterName
                                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_transientPreferenceDependency result ;
  if (inAttribute_mPreferencesName.isValid () && inAttribute_mMasterName.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_transientPreferenceDependency (inAttribute_mPreferencesName, inAttribute_mMasterName COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_transientPreferenceDependency::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_transientPreferenceDependency * p = (cPtr_transientPreferenceDependency *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_transientPreferenceDependency) ;
    cPtr_transientPreferenceDependency * r = NULL ;
    macroMyNew (r, cPtr_transientPreferenceDependency (p->mAttribute_mPreferencesName, p->mAttribute_mMasterName COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_transientPreferenceDependency::reader_mPreferencesName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_transientPreferenceDependency * p = (const cPtr_transientPreferenceDependency *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_transientPreferenceDependency) ;
    result = p->mAttribute_mPreferencesName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cPtr_transientPreferenceDependency::reader_mPreferencesName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mPreferencesName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_transientPreferenceDependency::reader_mMasterName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_transientPreferenceDependency * p = (const cPtr_transientPreferenceDependency *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_transientPreferenceDependency) ;
    result = p->mAttribute_mMasterName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cPtr_transientPreferenceDependency::reader_mMasterName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mMasterName ;
}

//---------------------------------------------------------------------------*
//          Pointer class for @transientPreferenceDependency class           *
//---------------------------------------------------------------------------*

cPtr_transientPreferenceDependency::cPtr_transientPreferenceDependency (const GALGAS_lstring & in_mPreferencesName,
                                                                        const GALGAS_lstring & in_mMasterName
                                                                        COMMA_LOCATION_ARGS) :
cPtr_abstractTransientDependency (THERE),
mAttribute_mPreferencesName (in_mPreferencesName),
mAttribute_mMasterName (in_mMasterName) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_transientPreferenceDependency::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_transientPreferenceDependency ;
}

void cPtr_transientPreferenceDependency::description (C_String & ioString,
                                                      const PMSInt32 inIndentation) const {
  ioString << "[@transientPreferenceDependency:" ;
  mAttribute_mPreferencesName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mMasterName.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                    @transientPreferenceDependency type                    *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_transientPreferenceDependency ("transientPreferenceDependency",
                                                      & kTypeDescriptor_GALGAS_abstractTransientDependency) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_transientPreferenceDependency::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_transientPreferenceDependency ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_transientPreferenceDependency::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_transientPreferenceDependency (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_transientPreferenceDependency GALGAS_transientPreferenceDependency::extractObject (const GALGAS_object & inObject,
                                                                                          C_Compiler * inCompiler
                                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_transientPreferenceDependency result ;
  const GALGAS_transientPreferenceDependency * p = (const GALGAS_transientPreferenceDependency *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_transientPreferenceDependency *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("transientPreferenceDependency", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_transientRootDependency::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_transientRootDependency * p = (const cPtr_transientRootDependency *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_transientRootDependency) ;
  if (kOperandEqual == result) {
    result = mAttribute_mMasterName.objectCompare (p->mAttribute_mMasterName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mNamesCountOption.objectCompare (p->mAttribute_mNamesCountOption) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_transientRootDependency::objectCompare (const GALGAS_transientRootDependency & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_transientRootDependency::GALGAS_transientRootDependency (void) :
GALGAS_abstractTransientDependency () {
}

//---------------------------------------------------------------------------*

GALGAS_transientRootDependency GALGAS_transientRootDependency::constructor_default (LOCATION_ARGS) {
  return GALGAS_transientRootDependency::constructor_new (GALGAS_lstring::constructor_default (HERE),
                                                          GALGAS_bool::constructor_default (HERE)
                                                          COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GALGAS_transientRootDependency::GALGAS_transientRootDependency (const cPtr_transientRootDependency * inSourcePtr) :
GALGAS_abstractTransientDependency (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_transientRootDependency) ;
}

//---------------------------------------------------------------------------*

GALGAS_transientRootDependency GALGAS_transientRootDependency::constructor_new (const GALGAS_lstring & inAttribute_mMasterName,
                                                                                const GALGAS_bool & inAttribute_mNamesCountOption
                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_transientRootDependency result ;
  if (inAttribute_mMasterName.isValid () && inAttribute_mNamesCountOption.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_transientRootDependency (inAttribute_mMasterName, inAttribute_mNamesCountOption COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_transientRootDependency::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_transientRootDependency * p = (cPtr_transientRootDependency *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_transientRootDependency) ;
    cPtr_transientRootDependency * r = NULL ;
    macroMyNew (r, cPtr_transientRootDependency (p->mAttribute_mMasterName, p->mAttribute_mNamesCountOption COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_transientRootDependency::reader_mMasterName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_transientRootDependency * p = (const cPtr_transientRootDependency *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_transientRootDependency) ;
    result = p->mAttribute_mMasterName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cPtr_transientRootDependency::reader_mMasterName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mMasterName ;
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_transientRootDependency::reader_mNamesCountOption (UNUSED_LOCATION_ARGS) const {
  GALGAS_bool result ;
  if (NULL != mObjectPtr) {
    const cPtr_transientRootDependency * p = (const cPtr_transientRootDependency *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_transientRootDependency) ;
    result = p->mAttribute_mNamesCountOption ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bool cPtr_transientRootDependency::reader_mNamesCountOption (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mNamesCountOption ;
}

//---------------------------------------------------------------------------*
//             Pointer class for @transientRootDependency class              *
//---------------------------------------------------------------------------*

cPtr_transientRootDependency::cPtr_transientRootDependency (const GALGAS_lstring & in_mMasterName,
                                                            const GALGAS_bool & in_mNamesCountOption
                                                            COMMA_LOCATION_ARGS) :
cPtr_abstractTransientDependency (THERE),
mAttribute_mMasterName (in_mMasterName),
mAttribute_mNamesCountOption (in_mNamesCountOption) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_transientRootDependency::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_transientRootDependency ;
}

void cPtr_transientRootDependency::description (C_String & ioString,
                                                const PMSInt32 inIndentation) const {
  ioString << "[@transientRootDependency:" ;
  mAttribute_mMasterName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mNamesCountOption.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                       @transientRootDependency type                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_transientRootDependency ("transientRootDependency",
                                                & kTypeDescriptor_GALGAS_abstractTransientDependency) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_transientRootDependency::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_transientRootDependency ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_transientRootDependency::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_transientRootDependency (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_transientRootDependency GALGAS_transientRootDependency::extractObject (const GALGAS_object & inObject,
                                                                              C_Compiler * inCompiler
                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_transientRootDependency result ;
  const GALGAS_transientRootDependency * p = (const GALGAS_transientRootDependency *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_transientRootDependency *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("transientRootDependency", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_transientRootSignDependency::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_transientRootSignDependency * p = (const cPtr_transientRootSignDependency *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_transientRootSignDependency) ;
  if (kOperandEqual == result) {
    result = mAttribute_mDeclarationLocation.objectCompare (p->mAttribute_mDeclarationLocation) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_transientRootSignDependency::objectCompare (const GALGAS_transientRootSignDependency & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_transientRootSignDependency::GALGAS_transientRootSignDependency (void) :
GALGAS_abstractTransientDependency () {
}

//---------------------------------------------------------------------------*

GALGAS_transientRootSignDependency GALGAS_transientRootSignDependency::constructor_default (LOCATION_ARGS) {
  return GALGAS_transientRootSignDependency::constructor_new (GALGAS_location::constructor_nowhere (HERE)
                                                              COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GALGAS_transientRootSignDependency::GALGAS_transientRootSignDependency (const cPtr_transientRootSignDependency * inSourcePtr) :
GALGAS_abstractTransientDependency (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_transientRootSignDependency) ;
}

//---------------------------------------------------------------------------*

GALGAS_transientRootSignDependency GALGAS_transientRootSignDependency::constructor_new (const GALGAS_location & inAttribute_mDeclarationLocation
                                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_transientRootSignDependency result ;
  if (inAttribute_mDeclarationLocation.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_transientRootSignDependency (inAttribute_mDeclarationLocation COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_transientRootSignDependency::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_transientRootSignDependency * p = (cPtr_transientRootSignDependency *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_transientRootSignDependency) ;
    cPtr_transientRootSignDependency * r = NULL ;
    macroMyNew (r, cPtr_transientRootSignDependency (p->mAttribute_mDeclarationLocation COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//---------------------------------------------------------------------------*

GALGAS_location GALGAS_transientRootSignDependency::reader_mDeclarationLocation (UNUSED_LOCATION_ARGS) const {
  GALGAS_location result ;
  if (NULL != mObjectPtr) {
    const cPtr_transientRootSignDependency * p = (const cPtr_transientRootSignDependency *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_transientRootSignDependency) ;
    result = p->mAttribute_mDeclarationLocation ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_location cPtr_transientRootSignDependency::reader_mDeclarationLocation (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mDeclarationLocation ;
}

//---------------------------------------------------------------------------*
//           Pointer class for @transientRootSignDependency class            *
//---------------------------------------------------------------------------*

cPtr_transientRootSignDependency::cPtr_transientRootSignDependency (const GALGAS_location & in_mDeclarationLocation
                                                                    COMMA_LOCATION_ARGS) :
cPtr_abstractTransientDependency (THERE),
mAttribute_mDeclarationLocation (in_mDeclarationLocation) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_transientRootSignDependency::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_transientRootSignDependency ;
}

void cPtr_transientRootSignDependency::description (C_String & ioString,
                                                    const PMSInt32 inIndentation) const {
  ioString << "[@transientRootSignDependency:" ;
  mAttribute_mDeclarationLocation.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                     @transientRootSignDependency type                     *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_transientRootSignDependency ("transientRootSignDependency",
                                                    & kTypeDescriptor_GALGAS_abstractTransientDependency) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_transientRootSignDependency::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_transientRootSignDependency ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_transientRootSignDependency::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_transientRootSignDependency (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_transientRootSignDependency GALGAS_transientRootSignDependency::extractObject (const GALGAS_object & inObject,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_transientRootSignDependency result ;
  const GALGAS_transientRootSignDependency * p = (const GALGAS_transientRootSignDependency *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_transientRootSignDependency *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("transientRootSignDependency", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*



typeComparisonResult GALGAS_attributeASTType::objectCompare (const GALGAS_attributeASTType & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTType::GALGAS_attributeASTType (void) :
AC_GALGAS_class () {
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTType::GALGAS_attributeASTType (const cPtr_attributeASTType * inSourcePtr) :
AC_GALGAS_class (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_attributeASTType) ;
}

//---------------------------------------------------------------------------*
//                 Pointer class for @attributeASTType class                 *
//---------------------------------------------------------------------------*

cPtr_attributeASTType::cPtr_attributeASTType (LOCATION_ARGS) :
acPtr_class (THERE) {
}



//---------------------------------------------------------------------------*
//                                                                           *
//                          @attributeASTType type                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_attributeASTType ("attributeASTType",
                                         NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_attributeASTType::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_attributeASTType ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_attributeASTType::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_attributeASTType (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTType GALGAS_attributeASTType::extractObject (const GALGAS_object & inObject,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) {
  GALGAS_attributeASTType result ;
  const GALGAS_attributeASTType * p = (const GALGAS_attributeASTType *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_attributeASTType *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("attributeASTType", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_anyEnumASTType::dynamicObjectCompare (const acPtr_class * /* inOperandPtr */) const {
  return kOperandEqual ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_anyEnumASTType::objectCompare (const GALGAS_anyEnumASTType & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_anyEnumASTType::GALGAS_anyEnumASTType (void) :
GALGAS_attributeASTType () {
}

//---------------------------------------------------------------------------*

GALGAS_anyEnumASTType GALGAS_anyEnumASTType::constructor_default (LOCATION_ARGS) {
  return GALGAS_anyEnumASTType::constructor_new (THERE) ;
}

//---------------------------------------------------------------------------*

GALGAS_anyEnumASTType::GALGAS_anyEnumASTType (const cPtr_anyEnumASTType * inSourcePtr) :
GALGAS_attributeASTType (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_anyEnumASTType) ;
}

//---------------------------------------------------------------------------*

GALGAS_anyEnumASTType GALGAS_anyEnumASTType::constructor_new (LOCATION_ARGS) {
  GALGAS_anyEnumASTType result ;
  macroMyNew (result.mObjectPtr, cPtr_anyEnumASTType (THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                  Pointer class for @anyEnumASTType class                  *
//---------------------------------------------------------------------------*

cPtr_anyEnumASTType::cPtr_anyEnumASTType (LOCATION_ARGS) :
cPtr_attributeASTType (THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_anyEnumASTType::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_anyEnumASTType ;
}

void cPtr_anyEnumASTType::description (C_String & ioString,
                                       const PMSInt32 /* inIndentation */) const {
  ioString << "[@anyEnumASTType]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                           @anyEnumASTType type                            *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_anyEnumASTType ("anyEnumASTType",
                                       & kTypeDescriptor_GALGAS_attributeASTType) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_anyEnumASTType::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_anyEnumASTType ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_anyEnumASTType::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_anyEnumASTType (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_anyEnumASTType GALGAS_anyEnumASTType::extractObject (const GALGAS_object & inObject,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) {
  GALGAS_anyEnumASTType result ;
  const GALGAS_anyEnumASTType * p = (const GALGAS_anyEnumASTType *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_anyEnumASTType *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("anyEnumASTType", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_bezierASTType::dynamicObjectCompare (const acPtr_class * /* inOperandPtr */) const {
  return kOperandEqual ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_bezierASTType::objectCompare (const GALGAS_bezierASTType & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bezierASTType::GALGAS_bezierASTType (void) :
GALGAS_attributeASTType () {
}

//---------------------------------------------------------------------------*

GALGAS_bezierASTType GALGAS_bezierASTType::constructor_default (LOCATION_ARGS) {
  return GALGAS_bezierASTType::constructor_new (THERE) ;
}

//---------------------------------------------------------------------------*

GALGAS_bezierASTType::GALGAS_bezierASTType (const cPtr_bezierASTType * inSourcePtr) :
GALGAS_attributeASTType (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_bezierASTType) ;
}

//---------------------------------------------------------------------------*

GALGAS_bezierASTType GALGAS_bezierASTType::constructor_new (LOCATION_ARGS) {
  GALGAS_bezierASTType result ;
  macroMyNew (result.mObjectPtr, cPtr_bezierASTType (THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                  Pointer class for @bezierASTType class                   *
//---------------------------------------------------------------------------*

cPtr_bezierASTType::cPtr_bezierASTType (LOCATION_ARGS) :
cPtr_attributeASTType (THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_bezierASTType::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_bezierASTType ;
}

void cPtr_bezierASTType::description (C_String & ioString,
                                      const PMSInt32 /* inIndentation */) const {
  ioString << "[@bezierASTType]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                            @bezierASTType type                            *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_bezierASTType ("bezierASTType",
                                      & kTypeDescriptor_GALGAS_attributeASTType) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_bezierASTType::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_bezierASTType ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_bezierASTType::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_bezierASTType (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bezierASTType GALGAS_bezierASTType::extractObject (const GALGAS_object & inObject,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) {
  GALGAS_bezierASTType result ;
  const GALGAS_bezierASTType * p = (const GALGAS_bezierASTType *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_bezierASTType *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("bezierASTType", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_boolASTType::dynamicObjectCompare (const acPtr_class * /* inOperandPtr */) const {
  return kOperandEqual ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_boolASTType::objectCompare (const GALGAS_boolASTType & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_boolASTType::GALGAS_boolASTType (void) :
GALGAS_attributeASTType () {
}

//---------------------------------------------------------------------------*

GALGAS_boolASTType GALGAS_boolASTType::constructor_default (LOCATION_ARGS) {
  return GALGAS_boolASTType::constructor_new (THERE) ;
}

//---------------------------------------------------------------------------*

GALGAS_boolASTType::GALGAS_boolASTType (const cPtr_boolASTType * inSourcePtr) :
GALGAS_attributeASTType (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_boolASTType) ;
}

//---------------------------------------------------------------------------*

GALGAS_boolASTType GALGAS_boolASTType::constructor_new (LOCATION_ARGS) {
  GALGAS_boolASTType result ;
  macroMyNew (result.mObjectPtr, cPtr_boolASTType (THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                   Pointer class for @boolASTType class                    *
//---------------------------------------------------------------------------*

cPtr_boolASTType::cPtr_boolASTType (LOCATION_ARGS) :
cPtr_attributeASTType (THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_boolASTType::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_boolASTType ;
}

void cPtr_boolASTType::description (C_String & ioString,
                                    const PMSInt32 /* inIndentation */) const {
  ioString << "[@boolASTType]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                             @boolASTType type                             *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_boolASTType ("boolASTType",
                                    & kTypeDescriptor_GALGAS_attributeASTType) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_boolASTType::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_boolASTType ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_boolASTType::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_boolASTType (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_boolASTType GALGAS_boolASTType::extractObject (const GALGAS_object & inObject,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) {
  GALGAS_boolASTType result ;
  const GALGAS_boolASTType * p = (const GALGAS_boolASTType *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_boolASTType *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("boolASTType", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_colorASTType::dynamicObjectCompare (const acPtr_class * /* inOperandPtr */) const {
  return kOperandEqual ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_colorASTType::objectCompare (const GALGAS_colorASTType & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_colorASTType::GALGAS_colorASTType (void) :
GALGAS_attributeASTType () {
}

//---------------------------------------------------------------------------*

GALGAS_colorASTType GALGAS_colorASTType::constructor_default (LOCATION_ARGS) {
  return GALGAS_colorASTType::constructor_new (THERE) ;
}

//---------------------------------------------------------------------------*

GALGAS_colorASTType::GALGAS_colorASTType (const cPtr_colorASTType * inSourcePtr) :
GALGAS_attributeASTType (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_colorASTType) ;
}

//---------------------------------------------------------------------------*

GALGAS_colorASTType GALGAS_colorASTType::constructor_new (LOCATION_ARGS) {
  GALGAS_colorASTType result ;
  macroMyNew (result.mObjectPtr, cPtr_colorASTType (THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                   Pointer class for @colorASTType class                   *
//---------------------------------------------------------------------------*

cPtr_colorASTType::cPtr_colorASTType (LOCATION_ARGS) :
cPtr_attributeASTType (THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_colorASTType::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_colorASTType ;
}

void cPtr_colorASTType::description (C_String & ioString,
                                     const PMSInt32 /* inIndentation */) const {
  ioString << "[@colorASTType]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                            @colorASTType type                             *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_colorASTType ("colorASTType",
                                     & kTypeDescriptor_GALGAS_attributeASTType) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_colorASTType::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_colorASTType ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_colorASTType::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_colorASTType (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_colorASTType GALGAS_colorASTType::extractObject (const GALGAS_object & inObject,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) {
  GALGAS_colorASTType result ;
  const GALGAS_colorASTType * p = (const GALGAS_colorASTType *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_colorASTType *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("colorASTType", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_dataASTType::dynamicObjectCompare (const acPtr_class * /* inOperandPtr */) const {
  return kOperandEqual ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_dataASTType::objectCompare (const GALGAS_dataASTType & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_dataASTType::GALGAS_dataASTType (void) :
GALGAS_attributeASTType () {
}

//---------------------------------------------------------------------------*

GALGAS_dataASTType GALGAS_dataASTType::constructor_default (LOCATION_ARGS) {
  return GALGAS_dataASTType::constructor_new (THERE) ;
}

//---------------------------------------------------------------------------*

GALGAS_dataASTType::GALGAS_dataASTType (const cPtr_dataASTType * inSourcePtr) :
GALGAS_attributeASTType (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_dataASTType) ;
}

//---------------------------------------------------------------------------*

GALGAS_dataASTType GALGAS_dataASTType::constructor_new (LOCATION_ARGS) {
  GALGAS_dataASTType result ;
  macroMyNew (result.mObjectPtr, cPtr_dataASTType (THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                   Pointer class for @dataASTType class                    *
//---------------------------------------------------------------------------*

cPtr_dataASTType::cPtr_dataASTType (LOCATION_ARGS) :
cPtr_attributeASTType (THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_dataASTType::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_dataASTType ;
}

void cPtr_dataASTType::description (C_String & ioString,
                                    const PMSInt32 /* inIndentation */) const {
  ioString << "[@dataASTType]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                             @dataASTType type                             *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_dataASTType ("dataASTType",
                                    & kTypeDescriptor_GALGAS_attributeASTType) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_dataASTType::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_dataASTType ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_dataASTType::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_dataASTType (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_dataASTType GALGAS_dataASTType::extractObject (const GALGAS_object & inObject,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) {
  GALGAS_dataASTType result ;
  const GALGAS_dataASTType * p = (const GALGAS_dataASTType *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_dataASTType *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("dataASTType", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_dateASTType::dynamicObjectCompare (const acPtr_class * /* inOperandPtr */) const {
  return kOperandEqual ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_dateASTType::objectCompare (const GALGAS_dateASTType & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_dateASTType::GALGAS_dateASTType (void) :
GALGAS_attributeASTType () {
}

//---------------------------------------------------------------------------*

GALGAS_dateASTType GALGAS_dateASTType::constructor_default (LOCATION_ARGS) {
  return GALGAS_dateASTType::constructor_new (THERE) ;
}

//---------------------------------------------------------------------------*

GALGAS_dateASTType::GALGAS_dateASTType (const cPtr_dateASTType * inSourcePtr) :
GALGAS_attributeASTType (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_dateASTType) ;
}

//---------------------------------------------------------------------------*

GALGAS_dateASTType GALGAS_dateASTType::constructor_new (LOCATION_ARGS) {
  GALGAS_dateASTType result ;
  macroMyNew (result.mObjectPtr, cPtr_dateASTType (THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                   Pointer class for @dateASTType class                    *
//---------------------------------------------------------------------------*

cPtr_dateASTType::cPtr_dateASTType (LOCATION_ARGS) :
cPtr_attributeASTType (THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_dateASTType::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_dateASTType ;
}

void cPtr_dateASTType::description (C_String & ioString,
                                    const PMSInt32 /* inIndentation */) const {
  ioString << "[@dateASTType]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                             @dateASTType type                             *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_dateASTType ("dateASTType",
                                    & kTypeDescriptor_GALGAS_attributeASTType) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_dateASTType::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_dateASTType ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_dateASTType::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_dateASTType (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_dateASTType GALGAS_dateASTType::extractObject (const GALGAS_object & inObject,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) {
  GALGAS_dateASTType result ;
  const GALGAS_dateASTType * p = (const GALGAS_dateASTType *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_dateASTType *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("dateASTType", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_decimalASTType::dynamicObjectCompare (const acPtr_class * /* inOperandPtr */) const {
  return kOperandEqual ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_decimalASTType::objectCompare (const GALGAS_decimalASTType & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_decimalASTType::GALGAS_decimalASTType (void) :
GALGAS_attributeASTType () {
}

//---------------------------------------------------------------------------*

GALGAS_decimalASTType GALGAS_decimalASTType::constructor_default (LOCATION_ARGS) {
  return GALGAS_decimalASTType::constructor_new (THERE) ;
}

//---------------------------------------------------------------------------*

GALGAS_decimalASTType::GALGAS_decimalASTType (const cPtr_decimalASTType * inSourcePtr) :
GALGAS_attributeASTType (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_decimalASTType) ;
}

//---------------------------------------------------------------------------*

GALGAS_decimalASTType GALGAS_decimalASTType::constructor_new (LOCATION_ARGS) {
  GALGAS_decimalASTType result ;
  macroMyNew (result.mObjectPtr, cPtr_decimalASTType (THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                  Pointer class for @decimalASTType class                  *
//---------------------------------------------------------------------------*

cPtr_decimalASTType::cPtr_decimalASTType (LOCATION_ARGS) :
cPtr_attributeASTType (THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_decimalASTType::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_decimalASTType ;
}

void cPtr_decimalASTType::description (C_String & ioString,
                                       const PMSInt32 /* inIndentation */) const {
  ioString << "[@decimalASTType]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                           @decimalASTType type                            *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_decimalASTType ("decimalASTType",
                                       & kTypeDescriptor_GALGAS_attributeASTType) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_decimalASTType::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_decimalASTType ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_decimalASTType::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_decimalASTType (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_decimalASTType GALGAS_decimalASTType::extractObject (const GALGAS_object & inObject,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) {
  GALGAS_decimalASTType result ;
  const GALGAS_decimalASTType * p = (const GALGAS_decimalASTType *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_decimalASTType *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("decimalASTType", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_doubleASTType::dynamicObjectCompare (const acPtr_class * /* inOperandPtr */) const {
  return kOperandEqual ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_doubleASTType::objectCompare (const GALGAS_doubleASTType & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_doubleASTType::GALGAS_doubleASTType (void) :
GALGAS_attributeASTType () {
}

//---------------------------------------------------------------------------*

GALGAS_doubleASTType GALGAS_doubleASTType::constructor_default (LOCATION_ARGS) {
  return GALGAS_doubleASTType::constructor_new (THERE) ;
}

//---------------------------------------------------------------------------*

GALGAS_doubleASTType::GALGAS_doubleASTType (const cPtr_doubleASTType * inSourcePtr) :
GALGAS_attributeASTType (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_doubleASTType) ;
}

//---------------------------------------------------------------------------*

GALGAS_doubleASTType GALGAS_doubleASTType::constructor_new (LOCATION_ARGS) {
  GALGAS_doubleASTType result ;
  macroMyNew (result.mObjectPtr, cPtr_doubleASTType (THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                  Pointer class for @doubleASTType class                   *
//---------------------------------------------------------------------------*

cPtr_doubleASTType::cPtr_doubleASTType (LOCATION_ARGS) :
cPtr_attributeASTType (THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_doubleASTType::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_doubleASTType ;
}

void cPtr_doubleASTType::description (C_String & ioString,
                                      const PMSInt32 /* inIndentation */) const {
  ioString << "[@doubleASTType]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                            @doubleASTType type                            *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_doubleASTType ("doubleASTType",
                                      & kTypeDescriptor_GALGAS_attributeASTType) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_doubleASTType::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_doubleASTType ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_doubleASTType::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_doubleASTType (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_doubleASTType GALGAS_doubleASTType::extractObject (const GALGAS_object & inObject,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) {
  GALGAS_doubleASTType result ;
  const GALGAS_doubleASTType * p = (const GALGAS_doubleASTType *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_doubleASTType *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("doubleASTType", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_fontASTType::dynamicObjectCompare (const acPtr_class * /* inOperandPtr */) const {
  return kOperandEqual ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_fontASTType::objectCompare (const GALGAS_fontASTType & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_fontASTType::GALGAS_fontASTType (void) :
GALGAS_attributeASTType () {
}

//---------------------------------------------------------------------------*

GALGAS_fontASTType GALGAS_fontASTType::constructor_default (LOCATION_ARGS) {
  return GALGAS_fontASTType::constructor_new (THERE) ;
}

//---------------------------------------------------------------------------*

GALGAS_fontASTType::GALGAS_fontASTType (const cPtr_fontASTType * inSourcePtr) :
GALGAS_attributeASTType (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_fontASTType) ;
}

//---------------------------------------------------------------------------*

GALGAS_fontASTType GALGAS_fontASTType::constructor_new (LOCATION_ARGS) {
  GALGAS_fontASTType result ;
  macroMyNew (result.mObjectPtr, cPtr_fontASTType (THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                   Pointer class for @fontASTType class                    *
//---------------------------------------------------------------------------*

cPtr_fontASTType::cPtr_fontASTType (LOCATION_ARGS) :
cPtr_attributeASTType (THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_fontASTType::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_fontASTType ;
}

void cPtr_fontASTType::description (C_String & ioString,
                                    const PMSInt32 /* inIndentation */) const {
  ioString << "[@fontASTType]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                             @fontASTType type                             *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_fontASTType ("fontASTType",
                                    & kTypeDescriptor_GALGAS_attributeASTType) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_fontASTType::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_fontASTType ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_fontASTType::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_fontASTType (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_fontASTType GALGAS_fontASTType::extractObject (const GALGAS_object & inObject,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) {
  GALGAS_fontASTType result ;
  const GALGAS_fontASTType * p = (const GALGAS_fontASTType *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_fontASTType *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("fontASTType", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_imageASTType::dynamicObjectCompare (const acPtr_class * /* inOperandPtr */) const {
  return kOperandEqual ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_imageASTType::objectCompare (const GALGAS_imageASTType & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_imageASTType::GALGAS_imageASTType (void) :
GALGAS_attributeASTType () {
}

//---------------------------------------------------------------------------*

GALGAS_imageASTType GALGAS_imageASTType::constructor_default (LOCATION_ARGS) {
  return GALGAS_imageASTType::constructor_new (THERE) ;
}

//---------------------------------------------------------------------------*

GALGAS_imageASTType::GALGAS_imageASTType (const cPtr_imageASTType * inSourcePtr) :
GALGAS_attributeASTType (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_imageASTType) ;
}

//---------------------------------------------------------------------------*

GALGAS_imageASTType GALGAS_imageASTType::constructor_new (LOCATION_ARGS) {
  GALGAS_imageASTType result ;
  macroMyNew (result.mObjectPtr, cPtr_imageASTType (THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                   Pointer class for @imageASTType class                   *
//---------------------------------------------------------------------------*

cPtr_imageASTType::cPtr_imageASTType (LOCATION_ARGS) :
cPtr_attributeASTType (THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_imageASTType::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_imageASTType ;
}

void cPtr_imageASTType::description (C_String & ioString,
                                     const PMSInt32 /* inIndentation */) const {
  ioString << "[@imageASTType]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                            @imageASTType type                             *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_imageASTType ("imageASTType",
                                     & kTypeDescriptor_GALGAS_attributeASTType) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_imageASTType::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_imageASTType ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_imageASTType::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_imageASTType (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_imageASTType GALGAS_imageASTType::extractObject (const GALGAS_object & inObject,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) {
  GALGAS_imageASTType result ;
  const GALGAS_imageASTType * p = (const GALGAS_imageASTType *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_imageASTType *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("imageASTType", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_integerASTType::dynamicObjectCompare (const acPtr_class * /* inOperandPtr */) const {
  return kOperandEqual ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_integerASTType::objectCompare (const GALGAS_integerASTType & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_integerASTType::GALGAS_integerASTType (void) :
GALGAS_attributeASTType () {
}

//---------------------------------------------------------------------------*

GALGAS_integerASTType GALGAS_integerASTType::constructor_default (LOCATION_ARGS) {
  return GALGAS_integerASTType::constructor_new (THERE) ;
}

//---------------------------------------------------------------------------*

GALGAS_integerASTType::GALGAS_integerASTType (const cPtr_integerASTType * inSourcePtr) :
GALGAS_attributeASTType (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_integerASTType) ;
}

//---------------------------------------------------------------------------*

GALGAS_integerASTType GALGAS_integerASTType::constructor_new (LOCATION_ARGS) {
  GALGAS_integerASTType result ;
  macroMyNew (result.mObjectPtr, cPtr_integerASTType (THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                  Pointer class for @integerASTType class                  *
//---------------------------------------------------------------------------*

cPtr_integerASTType::cPtr_integerASTType (LOCATION_ARGS) :
cPtr_attributeASTType (THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_integerASTType::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_integerASTType ;
}

void cPtr_integerASTType::description (C_String & ioString,
                                       const PMSInt32 /* inIndentation */) const {
  ioString << "[@integerASTType]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                           @integerASTType type                            *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_integerASTType ("integerASTType",
                                       & kTypeDescriptor_GALGAS_attributeASTType) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_integerASTType::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_integerASTType ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_integerASTType::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_integerASTType (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_integerASTType GALGAS_integerASTType::extractObject (const GALGAS_object & inObject,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) {
  GALGAS_integerASTType result ;
  const GALGAS_integerASTType * p = (const GALGAS_integerASTType *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_integerASTType *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("integerASTType", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_menuASTType::dynamicObjectCompare (const acPtr_class * /* inOperandPtr */) const {
  return kOperandEqual ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_menuASTType::objectCompare (const GALGAS_menuASTType & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_menuASTType::GALGAS_menuASTType (void) :
GALGAS_attributeASTType () {
}

//---------------------------------------------------------------------------*

GALGAS_menuASTType GALGAS_menuASTType::constructor_default (LOCATION_ARGS) {
  return GALGAS_menuASTType::constructor_new (THERE) ;
}

//---------------------------------------------------------------------------*

GALGAS_menuASTType::GALGAS_menuASTType (const cPtr_menuASTType * inSourcePtr) :
GALGAS_attributeASTType (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_menuASTType) ;
}

//---------------------------------------------------------------------------*

GALGAS_menuASTType GALGAS_menuASTType::constructor_new (LOCATION_ARGS) {
  GALGAS_menuASTType result ;
  macroMyNew (result.mObjectPtr, cPtr_menuASTType (THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                   Pointer class for @menuASTType class                    *
//---------------------------------------------------------------------------*

cPtr_menuASTType::cPtr_menuASTType (LOCATION_ARGS) :
cPtr_attributeASTType (THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_menuASTType::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_menuASTType ;
}

void cPtr_menuASTType::description (C_String & ioString,
                                    const PMSInt32 /* inIndentation */) const {
  ioString << "[@menuASTType]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                             @menuASTType type                             *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_menuASTType ("menuASTType",
                                    & kTypeDescriptor_GALGAS_attributeASTType) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_menuASTType::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_menuASTType ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_menuASTType::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_menuASTType (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_menuASTType GALGAS_menuASTType::extractObject (const GALGAS_object & inObject,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) {
  GALGAS_menuASTType result ;
  const GALGAS_menuASTType * p = (const GALGAS_menuASTType *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_menuASTType *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("menuASTType", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_namedASTType::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_namedASTType * p = (const cPtr_namedASTType *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_namedASTType) ;
  if (kOperandEqual == result) {
    result = mAttribute_mTypeName.objectCompare (p->mAttribute_mTypeName) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_namedASTType::objectCompare (const GALGAS_namedASTType & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_namedASTType::GALGAS_namedASTType (void) :
GALGAS_attributeASTType () {
}

//---------------------------------------------------------------------------*

GALGAS_namedASTType GALGAS_namedASTType::constructor_default (LOCATION_ARGS) {
  return GALGAS_namedASTType::constructor_new (GALGAS_lstring::constructor_default (HERE)
                                               COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GALGAS_namedASTType::GALGAS_namedASTType (const cPtr_namedASTType * inSourcePtr) :
GALGAS_attributeASTType (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_namedASTType) ;
}

//---------------------------------------------------------------------------*

GALGAS_namedASTType GALGAS_namedASTType::constructor_new (const GALGAS_lstring & inAttribute_mTypeName
                                                          COMMA_LOCATION_ARGS) {
  GALGAS_namedASTType result ;
  if (inAttribute_mTypeName.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_namedASTType (inAttribute_mTypeName COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_namedASTType::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_namedASTType * p = (cPtr_namedASTType *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_namedASTType) ;
    cPtr_namedASTType * r = NULL ;
    macroMyNew (r, cPtr_namedASTType (p->mAttribute_mTypeName COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_namedASTType::reader_mTypeName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_namedASTType * p = (const cPtr_namedASTType *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_namedASTType) ;
    result = p->mAttribute_mTypeName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cPtr_namedASTType::reader_mTypeName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mTypeName ;
}

//---------------------------------------------------------------------------*
//                   Pointer class for @namedASTType class                   *
//---------------------------------------------------------------------------*

cPtr_namedASTType::cPtr_namedASTType (const GALGAS_lstring & in_mTypeName
                                      COMMA_LOCATION_ARGS) :
cPtr_attributeASTType (THERE),
mAttribute_mTypeName (in_mTypeName) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_namedASTType::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_namedASTType ;
}

void cPtr_namedASTType::description (C_String & ioString,
                                     const PMSInt32 inIndentation) const {
  ioString << "[@namedASTType:" ;
  mAttribute_mTypeName.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                            @namedASTType type                             *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_namedASTType ("namedASTType",
                                     & kTypeDescriptor_GALGAS_attributeASTType) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_namedASTType::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_namedASTType ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_namedASTType::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_namedASTType (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_namedASTType GALGAS_namedASTType::extractObject (const GALGAS_object & inObject,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) {
  GALGAS_namedASTType result ;
  const GALGAS_namedASTType * p = (const GALGAS_namedASTType *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_namedASTType *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("namedASTType", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_stringASTType::dynamicObjectCompare (const acPtr_class * /* inOperandPtr */) const {
  return kOperandEqual ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_stringASTType::objectCompare (const GALGAS_stringASTType & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_stringASTType::GALGAS_stringASTType (void) :
GALGAS_attributeASTType () {
}

//---------------------------------------------------------------------------*

GALGAS_stringASTType GALGAS_stringASTType::constructor_default (LOCATION_ARGS) {
  return GALGAS_stringASTType::constructor_new (THERE) ;
}

//---------------------------------------------------------------------------*

GALGAS_stringASTType::GALGAS_stringASTType (const cPtr_stringASTType * inSourcePtr) :
GALGAS_attributeASTType (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_stringASTType) ;
}

//---------------------------------------------------------------------------*

GALGAS_stringASTType GALGAS_stringASTType::constructor_new (LOCATION_ARGS) {
  GALGAS_stringASTType result ;
  macroMyNew (result.mObjectPtr, cPtr_stringASTType (THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                  Pointer class for @stringASTType class                   *
//---------------------------------------------------------------------------*

cPtr_stringASTType::cPtr_stringASTType (LOCATION_ARGS) :
cPtr_attributeASTType (THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_stringASTType::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_stringASTType ;
}

void cPtr_stringASTType::description (C_String & ioString,
                                      const PMSInt32 /* inIndentation */) const {
  ioString << "[@stringASTType]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                            @stringASTType type                            *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_stringASTType ("stringASTType",
                                      & kTypeDescriptor_GALGAS_attributeASTType) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_stringASTType::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_stringASTType ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_stringASTType::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_stringASTType (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_stringASTType GALGAS_stringASTType::extractObject (const GALGAS_object & inObject,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) {
  GALGAS_stringASTType result ;
  const GALGAS_stringASTType * p = (const GALGAS_stringASTType *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_stringASTType *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("stringASTType", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_uintegerASTType::dynamicObjectCompare (const acPtr_class * /* inOperandPtr */) const {
  return kOperandEqual ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_uintegerASTType::objectCompare (const GALGAS_uintegerASTType & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_uintegerASTType::GALGAS_uintegerASTType (void) :
GALGAS_attributeASTType () {
}

//---------------------------------------------------------------------------*

GALGAS_uintegerASTType GALGAS_uintegerASTType::constructor_default (LOCATION_ARGS) {
  return GALGAS_uintegerASTType::constructor_new (THERE) ;
}

//---------------------------------------------------------------------------*

GALGAS_uintegerASTType::GALGAS_uintegerASTType (const cPtr_uintegerASTType * inSourcePtr) :
GALGAS_attributeASTType (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_uintegerASTType) ;
}

//---------------------------------------------------------------------------*

GALGAS_uintegerASTType GALGAS_uintegerASTType::constructor_new (LOCATION_ARGS) {
  GALGAS_uintegerASTType result ;
  macroMyNew (result.mObjectPtr, cPtr_uintegerASTType (THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                 Pointer class for @uintegerASTType class                  *
//---------------------------------------------------------------------------*

cPtr_uintegerASTType::cPtr_uintegerASTType (LOCATION_ARGS) :
cPtr_attributeASTType (THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_uintegerASTType::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_uintegerASTType ;
}

void cPtr_uintegerASTType::description (C_String & ioString,
                                        const PMSInt32 /* inIndentation */) const {
  ioString << "[@uintegerASTType]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                           @uintegerASTType type                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_uintegerASTType ("uintegerASTType",
                                        & kTypeDescriptor_GALGAS_attributeASTType) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_uintegerASTType::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_uintegerASTType ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_uintegerASTType::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_uintegerASTType (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_uintegerASTType GALGAS_uintegerASTType::extractObject (const GALGAS_object & inObject,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) {
  GALGAS_uintegerASTType result ;
  const GALGAS_uintegerASTType * p = (const GALGAS_uintegerASTType *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_uintegerASTType *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("uintegerASTType", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_valueASTType::dynamicObjectCompare (const acPtr_class * /* inOperandPtr */) const {
  return kOperandEqual ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_valueASTType::objectCompare (const GALGAS_valueASTType & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_valueASTType::GALGAS_valueASTType (void) :
GALGAS_attributeASTType () {
}

//---------------------------------------------------------------------------*

GALGAS_valueASTType GALGAS_valueASTType::constructor_default (LOCATION_ARGS) {
  return GALGAS_valueASTType::constructor_new (THERE) ;
}

//---------------------------------------------------------------------------*

GALGAS_valueASTType::GALGAS_valueASTType (const cPtr_valueASTType * inSourcePtr) :
GALGAS_attributeASTType (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_valueASTType) ;
}

//---------------------------------------------------------------------------*

GALGAS_valueASTType GALGAS_valueASTType::constructor_new (LOCATION_ARGS) {
  GALGAS_valueASTType result ;
  macroMyNew (result.mObjectPtr, cPtr_valueASTType (THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                   Pointer class for @valueASTType class                   *
//---------------------------------------------------------------------------*

cPtr_valueASTType::cPtr_valueASTType (LOCATION_ARGS) :
cPtr_attributeASTType (THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_valueASTType::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_valueASTType ;
}

void cPtr_valueASTType::description (C_String & ioString,
                                     const PMSInt32 /* inIndentation */) const {
  ioString << "[@valueASTType]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                            @valueASTType type                             *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_valueASTType ("valueASTType",
                                     & kTypeDescriptor_GALGAS_attributeASTType) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_valueASTType::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_valueASTType ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_valueASTType::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_valueASTType (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_valueASTType GALGAS_valueASTType::extractObject (const GALGAS_object & inObject,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) {
  GALGAS_valueASTType result ;
  const GALGAS_valueASTType * p = (const GALGAS_valueASTType *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_valueASTType *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("valueASTType", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*



typeComparisonResult GALGAS_multiValuedBindingBoundModel::objectCompare (const GALGAS_multiValuedBindingBoundModel & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundModel::GALGAS_multiValuedBindingBoundModel (void) :
AC_GALGAS_class () {
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundModel::GALGAS_multiValuedBindingBoundModel (const cPtr_multiValuedBindingBoundModel * inSourcePtr) :
AC_GALGAS_class (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_multiValuedBindingBoundModel) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_multiValuedBindingBoundModel::reader_mPropertyName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_multiValuedBindingBoundModel * p = (const cPtr_multiValuedBindingBoundModel *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_multiValuedBindingBoundModel) ;
    result = p->mAttribute_mPropertyName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cPtr_multiValuedBindingBoundModel::reader_mPropertyName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mPropertyName ;
}

//---------------------------------------------------------------------------*
//           Pointer class for @multiValuedBindingBoundModel class           *
//---------------------------------------------------------------------------*

cPtr_multiValuedBindingBoundModel::cPtr_multiValuedBindingBoundModel (const GALGAS_lstring & in_mPropertyName
                                                                      COMMA_LOCATION_ARGS) :
acPtr_class (THERE),
mAttribute_mPropertyName (in_mPropertyName) {
}



//---------------------------------------------------------------------------*
//                                                                           *
//                    @multiValuedBindingBoundModel type                     *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_multiValuedBindingBoundModel ("multiValuedBindingBoundModel",
                                                     NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_multiValuedBindingBoundModel::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_multiValuedBindingBoundModel ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_multiValuedBindingBoundModel::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_multiValuedBindingBoundModel (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundModel GALGAS_multiValuedBindingBoundModel::extractObject (const GALGAS_object & inObject,
                                                                                        C_Compiler * inCompiler
                                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_multiValuedBindingBoundModel result ;
  const GALGAS_multiValuedBindingBoundModel * p = (const GALGAS_multiValuedBindingBoundModel *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_multiValuedBindingBoundModel *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("multiValuedBindingBoundModel", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_multiValuedBindingBoundToController::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_multiValuedBindingBoundToController * p = (const cPtr_multiValuedBindingBoundToController *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_multiValuedBindingBoundToController) ;
  if (kOperandEqual == result) {
    result = mAttribute_mPropertyName.objectCompare (p->mAttribute_mPropertyName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mControllerName.objectCompare (p->mAttribute_mControllerName) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_multiValuedBindingBoundToController::objectCompare (const GALGAS_multiValuedBindingBoundToController & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToController::GALGAS_multiValuedBindingBoundToController (void) :
GALGAS_multiValuedBindingBoundModel () {
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToController GALGAS_multiValuedBindingBoundToController::constructor_default (LOCATION_ARGS) {
  return GALGAS_multiValuedBindingBoundToController::constructor_new (GALGAS_lstring::constructor_default (HERE),
                                                                      GALGAS_lstring::constructor_default (HERE)
                                                                      COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToController::GALGAS_multiValuedBindingBoundToController (const cPtr_multiValuedBindingBoundToController * inSourcePtr) :
GALGAS_multiValuedBindingBoundModel (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_multiValuedBindingBoundToController) ;
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToController GALGAS_multiValuedBindingBoundToController::constructor_new (const GALGAS_lstring & inAttribute_mPropertyName,
                                                                                                        const GALGAS_lstring & inAttribute_mControllerName
                                                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_multiValuedBindingBoundToController result ;
  if (inAttribute_mPropertyName.isValid () && inAttribute_mControllerName.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_multiValuedBindingBoundToController (inAttribute_mPropertyName, inAttribute_mControllerName COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_multiValuedBindingBoundToController::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_multiValuedBindingBoundToController * p = (cPtr_multiValuedBindingBoundToController *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_multiValuedBindingBoundToController) ;
    cPtr_multiValuedBindingBoundToController * r = NULL ;
    macroMyNew (r, cPtr_multiValuedBindingBoundToController (p->mAttribute_mPropertyName, p->mAttribute_mControllerName COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_multiValuedBindingBoundToController::reader_mControllerName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_multiValuedBindingBoundToController * p = (const cPtr_multiValuedBindingBoundToController *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_multiValuedBindingBoundToController) ;
    result = p->mAttribute_mControllerName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cPtr_multiValuedBindingBoundToController::reader_mControllerName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mControllerName ;
}

//---------------------------------------------------------------------------*
//       Pointer class for @multiValuedBindingBoundToController class        *
//---------------------------------------------------------------------------*

cPtr_multiValuedBindingBoundToController::cPtr_multiValuedBindingBoundToController (const GALGAS_lstring & in_mPropertyName,
                                                                                    const GALGAS_lstring & in_mControllerName
                                                                                    COMMA_LOCATION_ARGS) :
cPtr_multiValuedBindingBoundModel (in_mPropertyName COMMA_THERE),
mAttribute_mControllerName (in_mControllerName) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_multiValuedBindingBoundToController::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_multiValuedBindingBoundToController ;
}

void cPtr_multiValuedBindingBoundToController::description (C_String & ioString,
                                                            const PMSInt32 inIndentation) const {
  ioString << "[@multiValuedBindingBoundToController:" ;
  mAttribute_mPropertyName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mControllerName.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                 @multiValuedBindingBoundToController type                 *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_multiValuedBindingBoundToController ("multiValuedBindingBoundToController",
                                                            & kTypeDescriptor_GALGAS_multiValuedBindingBoundModel) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_multiValuedBindingBoundToController::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_multiValuedBindingBoundToController ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_multiValuedBindingBoundToController::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_multiValuedBindingBoundToController (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToController GALGAS_multiValuedBindingBoundToController::extractObject (const GALGAS_object & inObject,
                                                                                                      C_Compiler * inCompiler
                                                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_multiValuedBindingBoundToController result ;
  const GALGAS_multiValuedBindingBoundToController * p = (const GALGAS_multiValuedBindingBoundToController *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_multiValuedBindingBoundToController *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("multiValuedBindingBoundToController", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_multiValuedBindingBoundToControllerSelection::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_multiValuedBindingBoundToControllerSelection * p = (const cPtr_multiValuedBindingBoundToControllerSelection *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_multiValuedBindingBoundToControllerSelection) ;
  if (kOperandEqual == result) {
    result = mAttribute_mPropertyName.objectCompare (p->mAttribute_mPropertyName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mControllerName.objectCompare (p->mAttribute_mControllerName) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_multiValuedBindingBoundToControllerSelection::objectCompare (const GALGAS_multiValuedBindingBoundToControllerSelection & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToControllerSelection::GALGAS_multiValuedBindingBoundToControllerSelection (void) :
GALGAS_multiValuedBindingBoundModel () {
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToControllerSelection GALGAS_multiValuedBindingBoundToControllerSelection::constructor_default (LOCATION_ARGS) {
  return GALGAS_multiValuedBindingBoundToControllerSelection::constructor_new (GALGAS_lstring::constructor_default (HERE),
                                                                               GALGAS_lstring::constructor_default (HERE)
                                                                               COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToControllerSelection::GALGAS_multiValuedBindingBoundToControllerSelection (const cPtr_multiValuedBindingBoundToControllerSelection * inSourcePtr) :
GALGAS_multiValuedBindingBoundModel (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_multiValuedBindingBoundToControllerSelection) ;
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToControllerSelection GALGAS_multiValuedBindingBoundToControllerSelection::constructor_new (const GALGAS_lstring & inAttribute_mPropertyName,
                                                                                                                          const GALGAS_lstring & inAttribute_mControllerName
                                                                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_multiValuedBindingBoundToControllerSelection result ;
  if (inAttribute_mPropertyName.isValid () && inAttribute_mControllerName.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_multiValuedBindingBoundToControllerSelection (inAttribute_mPropertyName, inAttribute_mControllerName COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_multiValuedBindingBoundToControllerSelection::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_multiValuedBindingBoundToControllerSelection * p = (cPtr_multiValuedBindingBoundToControllerSelection *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_multiValuedBindingBoundToControllerSelection) ;
    cPtr_multiValuedBindingBoundToControllerSelection * r = NULL ;
    macroMyNew (r, cPtr_multiValuedBindingBoundToControllerSelection (p->mAttribute_mPropertyName, p->mAttribute_mControllerName COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_multiValuedBindingBoundToControllerSelection::reader_mControllerName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_multiValuedBindingBoundToControllerSelection * p = (const cPtr_multiValuedBindingBoundToControllerSelection *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_multiValuedBindingBoundToControllerSelection) ;
    result = p->mAttribute_mControllerName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cPtr_multiValuedBindingBoundToControllerSelection::reader_mControllerName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mControllerName ;
}

//---------------------------------------------------------------------------*
//   Pointer class for @multiValuedBindingBoundToControllerSelection class   *
//---------------------------------------------------------------------------*

cPtr_multiValuedBindingBoundToControllerSelection::cPtr_multiValuedBindingBoundToControllerSelection (const GALGAS_lstring & in_mPropertyName,
                                                                                                      const GALGAS_lstring & in_mControllerName
                                                                                                      COMMA_LOCATION_ARGS) :
cPtr_multiValuedBindingBoundModel (in_mPropertyName COMMA_THERE),
mAttribute_mControllerName (in_mControllerName) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_multiValuedBindingBoundToControllerSelection::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_multiValuedBindingBoundToControllerSelection ;
}

void cPtr_multiValuedBindingBoundToControllerSelection::description (C_String & ioString,
                                                                     const PMSInt32 inIndentation) const {
  ioString << "[@multiValuedBindingBoundToControllerSelection:" ;
  mAttribute_mPropertyName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mControllerName.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//            @multiValuedBindingBoundToControllerSelection type             *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_multiValuedBindingBoundToControllerSelection ("multiValuedBindingBoundToControllerSelection",
                                                                     & kTypeDescriptor_GALGAS_multiValuedBindingBoundModel) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_multiValuedBindingBoundToControllerSelection::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_multiValuedBindingBoundToControllerSelection ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_multiValuedBindingBoundToControllerSelection::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_multiValuedBindingBoundToControllerSelection (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToControllerSelection GALGAS_multiValuedBindingBoundToControllerSelection::extractObject (const GALGAS_object & inObject,
                                                                                                                        C_Compiler * inCompiler
                                                                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_multiValuedBindingBoundToControllerSelection result ;
  const GALGAS_multiValuedBindingBoundToControllerSelection * p = (const GALGAS_multiValuedBindingBoundToControllerSelection *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_multiValuedBindingBoundToControllerSelection *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("multiValuedBindingBoundToControllerSelection", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_multiValuedBindingBoundToPref::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_multiValuedBindingBoundToPref * p = (const cPtr_multiValuedBindingBoundToPref *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_multiValuedBindingBoundToPref) ;
  if (kOperandEqual == result) {
    result = mAttribute_mPropertyName.objectCompare (p->mAttribute_mPropertyName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mPreferenceName.objectCompare (p->mAttribute_mPreferenceName) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_multiValuedBindingBoundToPref::objectCompare (const GALGAS_multiValuedBindingBoundToPref & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToPref::GALGAS_multiValuedBindingBoundToPref (void) :
GALGAS_multiValuedBindingBoundModel () {
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToPref GALGAS_multiValuedBindingBoundToPref::constructor_default (LOCATION_ARGS) {
  return GALGAS_multiValuedBindingBoundToPref::constructor_new (GALGAS_lstring::constructor_default (HERE),
                                                                GALGAS_lstring::constructor_default (HERE)
                                                                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToPref::GALGAS_multiValuedBindingBoundToPref (const cPtr_multiValuedBindingBoundToPref * inSourcePtr) :
GALGAS_multiValuedBindingBoundModel (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_multiValuedBindingBoundToPref) ;
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToPref GALGAS_multiValuedBindingBoundToPref::constructor_new (const GALGAS_lstring & inAttribute_mPropertyName,
                                                                                            const GALGAS_lstring & inAttribute_mPreferenceName
                                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_multiValuedBindingBoundToPref result ;
  if (inAttribute_mPropertyName.isValid () && inAttribute_mPreferenceName.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_multiValuedBindingBoundToPref (inAttribute_mPropertyName, inAttribute_mPreferenceName COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_multiValuedBindingBoundToPref::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_multiValuedBindingBoundToPref * p = (cPtr_multiValuedBindingBoundToPref *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_multiValuedBindingBoundToPref) ;
    cPtr_multiValuedBindingBoundToPref * r = NULL ;
    macroMyNew (r, cPtr_multiValuedBindingBoundToPref (p->mAttribute_mPropertyName, p->mAttribute_mPreferenceName COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_multiValuedBindingBoundToPref::reader_mPreferenceName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_multiValuedBindingBoundToPref * p = (const cPtr_multiValuedBindingBoundToPref *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_multiValuedBindingBoundToPref) ;
    result = p->mAttribute_mPreferenceName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cPtr_multiValuedBindingBoundToPref::reader_mPreferenceName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mPreferenceName ;
}

//---------------------------------------------------------------------------*
//          Pointer class for @multiValuedBindingBoundToPref class           *
//---------------------------------------------------------------------------*

cPtr_multiValuedBindingBoundToPref::cPtr_multiValuedBindingBoundToPref (const GALGAS_lstring & in_mPropertyName,
                                                                        const GALGAS_lstring & in_mPreferenceName
                                                                        COMMA_LOCATION_ARGS) :
cPtr_multiValuedBindingBoundModel (in_mPropertyName COMMA_THERE),
mAttribute_mPreferenceName (in_mPreferenceName) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_multiValuedBindingBoundToPref::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_multiValuedBindingBoundToPref ;
}

void cPtr_multiValuedBindingBoundToPref::description (C_String & ioString,
                                                      const PMSInt32 inIndentation) const {
  ioString << "[@multiValuedBindingBoundToPref:" ;
  mAttribute_mPropertyName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mPreferenceName.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                    @multiValuedBindingBoundToPref type                    *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_multiValuedBindingBoundToPref ("multiValuedBindingBoundToPref",
                                                      & kTypeDescriptor_GALGAS_multiValuedBindingBoundModel) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_multiValuedBindingBoundToPref::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_multiValuedBindingBoundToPref ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_multiValuedBindingBoundToPref::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_multiValuedBindingBoundToPref (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToPref GALGAS_multiValuedBindingBoundToPref::extractObject (const GALGAS_object & inObject,
                                                                                          C_Compiler * inCompiler
                                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_multiValuedBindingBoundToPref result ;
  const GALGAS_multiValuedBindingBoundToPref * p = (const GALGAS_multiValuedBindingBoundToPref *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_multiValuedBindingBoundToPref *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("multiValuedBindingBoundToPref", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_multiValuedBindingBoundToRoot::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_multiValuedBindingBoundToRoot * p = (const cPtr_multiValuedBindingBoundToRoot *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_multiValuedBindingBoundToRoot) ;
  if (kOperandEqual == result) {
    result = mAttribute_mPropertyName.objectCompare (p->mAttribute_mPropertyName) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_multiValuedBindingBoundToRoot::objectCompare (const GALGAS_multiValuedBindingBoundToRoot & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToRoot::GALGAS_multiValuedBindingBoundToRoot (void) :
GALGAS_multiValuedBindingBoundModel () {
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToRoot GALGAS_multiValuedBindingBoundToRoot::constructor_default (LOCATION_ARGS) {
  return GALGAS_multiValuedBindingBoundToRoot::constructor_new (GALGAS_lstring::constructor_default (HERE)
                                                                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToRoot::GALGAS_multiValuedBindingBoundToRoot (const cPtr_multiValuedBindingBoundToRoot * inSourcePtr) :
GALGAS_multiValuedBindingBoundModel (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_multiValuedBindingBoundToRoot) ;
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToRoot GALGAS_multiValuedBindingBoundToRoot::constructor_new (const GALGAS_lstring & inAttribute_mPropertyName
                                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_multiValuedBindingBoundToRoot result ;
  if (inAttribute_mPropertyName.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_multiValuedBindingBoundToRoot (inAttribute_mPropertyName COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_multiValuedBindingBoundToRoot::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_multiValuedBindingBoundToRoot * p = (cPtr_multiValuedBindingBoundToRoot *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_multiValuedBindingBoundToRoot) ;
    cPtr_multiValuedBindingBoundToRoot * r = NULL ;
    macroMyNew (r, cPtr_multiValuedBindingBoundToRoot (p->mAttribute_mPropertyName COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//---------------------------------------------------------------------------*
//          Pointer class for @multiValuedBindingBoundToRoot class           *
//---------------------------------------------------------------------------*

cPtr_multiValuedBindingBoundToRoot::cPtr_multiValuedBindingBoundToRoot (const GALGAS_lstring & in_mPropertyName
                                                                        COMMA_LOCATION_ARGS) :
cPtr_multiValuedBindingBoundModel (in_mPropertyName COMMA_THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_multiValuedBindingBoundToRoot::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_multiValuedBindingBoundToRoot ;
}

void cPtr_multiValuedBindingBoundToRoot::description (C_String & ioString,
                                                      const PMSInt32 inIndentation) const {
  ioString << "[@multiValuedBindingBoundToRoot:" ;
  mAttribute_mPropertyName.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                    @multiValuedBindingBoundToRoot type                    *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_multiValuedBindingBoundToRoot ("multiValuedBindingBoundToRoot",
                                                      & kTypeDescriptor_GALGAS_multiValuedBindingBoundModel) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_multiValuedBindingBoundToRoot::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_multiValuedBindingBoundToRoot ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_multiValuedBindingBoundToRoot::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_multiValuedBindingBoundToRoot (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToRoot GALGAS_multiValuedBindingBoundToRoot::extractObject (const GALGAS_object & inObject,
                                                                                          C_Compiler * inCompiler
                                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_multiValuedBindingBoundToRoot result ;
  const GALGAS_multiValuedBindingBoundToRoot * p = (const GALGAS_multiValuedBindingBoundToRoot *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_multiValuedBindingBoundToRoot *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("multiValuedBindingBoundToRoot", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_multiValuedBindingBoundToSelf::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_multiValuedBindingBoundToSelf * p = (const cPtr_multiValuedBindingBoundToSelf *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_multiValuedBindingBoundToSelf) ;
  if (kOperandEqual == result) {
    result = mAttribute_mPropertyName.objectCompare (p->mAttribute_mPropertyName) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_multiValuedBindingBoundToSelf::objectCompare (const GALGAS_multiValuedBindingBoundToSelf & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToSelf::GALGAS_multiValuedBindingBoundToSelf (void) :
GALGAS_multiValuedBindingBoundModel () {
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToSelf GALGAS_multiValuedBindingBoundToSelf::constructor_default (LOCATION_ARGS) {
  return GALGAS_multiValuedBindingBoundToSelf::constructor_new (GALGAS_lstring::constructor_default (HERE)
                                                                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToSelf::GALGAS_multiValuedBindingBoundToSelf (const cPtr_multiValuedBindingBoundToSelf * inSourcePtr) :
GALGAS_multiValuedBindingBoundModel (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_multiValuedBindingBoundToSelf) ;
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToSelf GALGAS_multiValuedBindingBoundToSelf::constructor_new (const GALGAS_lstring & inAttribute_mPropertyName
                                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_multiValuedBindingBoundToSelf result ;
  if (inAttribute_mPropertyName.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_multiValuedBindingBoundToSelf (inAttribute_mPropertyName COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_multiValuedBindingBoundToSelf::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_multiValuedBindingBoundToSelf * p = (cPtr_multiValuedBindingBoundToSelf *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_multiValuedBindingBoundToSelf) ;
    cPtr_multiValuedBindingBoundToSelf * r = NULL ;
    macroMyNew (r, cPtr_multiValuedBindingBoundToSelf (p->mAttribute_mPropertyName COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//---------------------------------------------------------------------------*
//          Pointer class for @multiValuedBindingBoundToSelf class           *
//---------------------------------------------------------------------------*

cPtr_multiValuedBindingBoundToSelf::cPtr_multiValuedBindingBoundToSelf (const GALGAS_lstring & in_mPropertyName
                                                                        COMMA_LOCATION_ARGS) :
cPtr_multiValuedBindingBoundModel (in_mPropertyName COMMA_THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_multiValuedBindingBoundToSelf::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_multiValuedBindingBoundToSelf ;
}

void cPtr_multiValuedBindingBoundToSelf::description (C_String & ioString,
                                                      const PMSInt32 inIndentation) const {
  ioString << "[@multiValuedBindingBoundToSelf:" ;
  mAttribute_mPropertyName.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                    @multiValuedBindingBoundToSelf type                    *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_multiValuedBindingBoundToSelf ("multiValuedBindingBoundToSelf",
                                                      & kTypeDescriptor_GALGAS_multiValuedBindingBoundModel) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_multiValuedBindingBoundToSelf::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_multiValuedBindingBoundToSelf ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_multiValuedBindingBoundToSelf::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_multiValuedBindingBoundToSelf (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToSelf GALGAS_multiValuedBindingBoundToSelf::extractObject (const GALGAS_object & inObject,
                                                                                          C_Compiler * inCompiler
                                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_multiValuedBindingBoundToSelf result ;
  const GALGAS_multiValuedBindingBoundToSelf * p = (const GALGAS_multiValuedBindingBoundToSelf *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_multiValuedBindingBoundToSelf *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("multiValuedBindingBoundToSelf", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTTypeList_2E_element::GALGAS_attributeASTTypeList_2E_element (void) :
mAttribute_mType (),
mAttribute_mTypeName () {
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTTypeList_2E_element::~ GALGAS_attributeASTTypeList_2E_element (void) {
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTTypeList_2E_element::GALGAS_attributeASTTypeList_2E_element (const GALGAS_attributeASTType & inOperand0,
                                                                                const GALGAS_lstring & inOperand1) :
mAttribute_mType (inOperand0),
mAttribute_mTypeName (inOperand1) {
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTTypeList_2E_element GALGAS_attributeASTTypeList_2E_element::constructor_new (const GALGAS_attributeASTType & inOperand0,
                                                                                                const GALGAS_lstring & inOperand1 
                                                                                                COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_attributeASTTypeList_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result = GALGAS_attributeASTTypeList_2E_element (inOperand0, inOperand1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_attributeASTTypeList_2E_element::objectCompare (const GALGAS_attributeASTTypeList_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mType.objectCompare (inOperand.mAttribute_mType) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mTypeName.objectCompare (inOperand.mAttribute_mTypeName) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_attributeASTTypeList_2E_element::isValid (void) const {
  return mAttribute_mType.isValid () && mAttribute_mTypeName.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_attributeASTTypeList_2E_element::drop (void) {
  mAttribute_mType.drop () ;
  mAttribute_mTypeName.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_attributeASTTypeList_2E_element::description (C_String & ioString,
                                                          const PMSInt32 inIndentation) const {
  ioString << "<struct @attributeASTTypeList.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mType.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mTypeName.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTType GALGAS_attributeASTTypeList_2E_element::reader_mType (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mType ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_attributeASTTypeList_2E_element::reader_mTypeName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mTypeName ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                    @attributeASTTypeList.element type                     *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_attributeASTTypeList_2E_element ("attributeASTTypeList.element",
                                                        NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_attributeASTTypeList_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_attributeASTTypeList_2E_element ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_attributeASTTypeList_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_attributeASTTypeList_2E_element (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTTypeList_2E_element GALGAS_attributeASTTypeList_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                              C_Compiler * inCompiler
                                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_attributeASTTypeList_2E_element result ;
  const GALGAS_attributeASTTypeList_2E_element * p = (const GALGAS_attributeASTTypeList_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_attributeASTTypeList_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("attributeASTTypeList.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeList_2E_element::GALGAS_attributeList_2E_element (void) :
mAttribute_mType (),
mAttribute_mAttributeTypeName (),
mAttribute_mAttributeName (),
mAttribute_mDefaultValue () {
}

//---------------------------------------------------------------------------*

GALGAS_attributeList_2E_element::~ GALGAS_attributeList_2E_element (void) {
}

//---------------------------------------------------------------------------*

GALGAS_attributeList_2E_element::GALGAS_attributeList_2E_element (const GALGAS_attributeASTType & inOperand0,
                                                                  const GALGAS_lstring & inOperand1,
                                                                  const GALGAS_lstring & inOperand2,
                                                                  const GALGAS_abstractDefaultValue & inOperand3) :
mAttribute_mType (inOperand0),
mAttribute_mAttributeTypeName (inOperand1),
mAttribute_mAttributeName (inOperand2),
mAttribute_mDefaultValue (inOperand3) {
}

//---------------------------------------------------------------------------*

GALGAS_attributeList_2E_element GALGAS_attributeList_2E_element::constructor_new (const GALGAS_attributeASTType & inOperand0,
                                                                                  const GALGAS_lstring & inOperand1,
                                                                                  const GALGAS_lstring & inOperand2,
                                                                                  const GALGAS_abstractDefaultValue & inOperand3 
                                                                                  COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_attributeList_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid ()) {
    result = GALGAS_attributeList_2E_element (inOperand0, inOperand1, inOperand2, inOperand3) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_attributeList_2E_element::objectCompare (const GALGAS_attributeList_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mType.objectCompare (inOperand.mAttribute_mType) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mAttributeTypeName.objectCompare (inOperand.mAttribute_mAttributeTypeName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mAttributeName.objectCompare (inOperand.mAttribute_mAttributeName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mDefaultValue.objectCompare (inOperand.mAttribute_mDefaultValue) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_attributeList_2E_element::isValid (void) const {
  return mAttribute_mType.isValid () && mAttribute_mAttributeTypeName.isValid () && mAttribute_mAttributeName.isValid () && mAttribute_mDefaultValue.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_attributeList_2E_element::drop (void) {
  mAttribute_mType.drop () ;
  mAttribute_mAttributeTypeName.drop () ;
  mAttribute_mAttributeName.drop () ;
  mAttribute_mDefaultValue.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_attributeList_2E_element::description (C_String & ioString,
                                                   const PMSInt32 inIndentation) const {
  ioString << "<struct @attributeList.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mType.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mAttributeTypeName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mAttributeName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mDefaultValue.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTType GALGAS_attributeList_2E_element::reader_mType (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mType ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_attributeList_2E_element::reader_mAttributeTypeName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mAttributeTypeName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_attributeList_2E_element::reader_mAttributeName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mAttributeName ;
}

//---------------------------------------------------------------------------*

GALGAS_abstractDefaultValue GALGAS_attributeList_2E_element::reader_mDefaultValue (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mDefaultValue ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                        @attributeList.element type                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_attributeList_2E_element ("attributeList.element",
                                                 NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_attributeList_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_attributeList_2E_element ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_attributeList_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_attributeList_2E_element (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeList_2E_element GALGAS_attributeList_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_attributeList_2E_element result ;
  const GALGAS_attributeList_2E_element * p = (const GALGAS_attributeList_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_attributeList_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("attributeList.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_relationshipList_2E_element::GALGAS_relationshipList_2E_element (void) :
mAttribute_mIsToMany (),
mAttribute_mDestinationEntityName (),
mAttribute_mRelationshipName (),
mAttribute_mInverseRelationshipName (),
mAttribute_mInverseRelationIsToMany (),
mAttribute_mDeleteRule () {
}

//---------------------------------------------------------------------------*

GALGAS_relationshipList_2E_element::~ GALGAS_relationshipList_2E_element (void) {
}

//---------------------------------------------------------------------------*

GALGAS_relationshipList_2E_element::GALGAS_relationshipList_2E_element (const GALGAS_bool & inOperand0,
                                                                        const GALGAS_lstring & inOperand1,
                                                                        const GALGAS_lstring & inOperand2,
                                                                        const GALGAS_lstring & inOperand3,
                                                                        const GALGAS_bool & inOperand4,
                                                                        const GALGAS_deleteRuleEnum & inOperand5) :
mAttribute_mIsToMany (inOperand0),
mAttribute_mDestinationEntityName (inOperand1),
mAttribute_mRelationshipName (inOperand2),
mAttribute_mInverseRelationshipName (inOperand3),
mAttribute_mInverseRelationIsToMany (inOperand4),
mAttribute_mDeleteRule (inOperand5) {
}

//---------------------------------------------------------------------------*

GALGAS_relationshipList_2E_element GALGAS_relationshipList_2E_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_relationshipList_2E_element (GALGAS_bool::constructor_default (HERE),
                                             GALGAS_lstring::constructor_default (HERE),
                                             GALGAS_lstring::constructor_default (HERE),
                                             GALGAS_lstring::constructor_default (HERE),
                                             GALGAS_bool::constructor_default (HERE),
                                             GALGAS_deleteRuleEnum::constructor_nullifyDeleteRule (HERE)) ;
}

//---------------------------------------------------------------------------*

GALGAS_relationshipList_2E_element GALGAS_relationshipList_2E_element::constructor_new (const GALGAS_bool & inOperand0,
                                                                                        const GALGAS_lstring & inOperand1,
                                                                                        const GALGAS_lstring & inOperand2,
                                                                                        const GALGAS_lstring & inOperand3,
                                                                                        const GALGAS_bool & inOperand4,
                                                                                        const GALGAS_deleteRuleEnum & inOperand5 
                                                                                        COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_relationshipList_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid ()) {
    result = GALGAS_relationshipList_2E_element (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_relationshipList_2E_element::objectCompare (const GALGAS_relationshipList_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mIsToMany.objectCompare (inOperand.mAttribute_mIsToMany) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mDestinationEntityName.objectCompare (inOperand.mAttribute_mDestinationEntityName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mRelationshipName.objectCompare (inOperand.mAttribute_mRelationshipName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mInverseRelationshipName.objectCompare (inOperand.mAttribute_mInverseRelationshipName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mInverseRelationIsToMany.objectCompare (inOperand.mAttribute_mInverseRelationIsToMany) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mDeleteRule.objectCompare (inOperand.mAttribute_mDeleteRule) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_relationshipList_2E_element::isValid (void) const {
  return mAttribute_mIsToMany.isValid () && mAttribute_mDestinationEntityName.isValid () && mAttribute_mRelationshipName.isValid () && mAttribute_mInverseRelationshipName.isValid () && mAttribute_mInverseRelationIsToMany.isValid () && mAttribute_mDeleteRule.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_relationshipList_2E_element::drop (void) {
  mAttribute_mIsToMany.drop () ;
  mAttribute_mDestinationEntityName.drop () ;
  mAttribute_mRelationshipName.drop () ;
  mAttribute_mInverseRelationshipName.drop () ;
  mAttribute_mInverseRelationIsToMany.drop () ;
  mAttribute_mDeleteRule.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_relationshipList_2E_element::description (C_String & ioString,
                                                      const PMSInt32 inIndentation) const {
  ioString << "<struct @relationshipList.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mIsToMany.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mDestinationEntityName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mRelationshipName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mInverseRelationshipName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mInverseRelationIsToMany.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mDeleteRule.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_relationshipList_2E_element::reader_mIsToMany (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mIsToMany ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_relationshipList_2E_element::reader_mDestinationEntityName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mDestinationEntityName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_relationshipList_2E_element::reader_mRelationshipName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mRelationshipName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_relationshipList_2E_element::reader_mInverseRelationshipName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mInverseRelationshipName ;
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_relationshipList_2E_element::reader_mInverseRelationIsToMany (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mInverseRelationIsToMany ;
}

//---------------------------------------------------------------------------*

GALGAS_deleteRuleEnum GALGAS_relationshipList_2E_element::reader_mDeleteRule (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mDeleteRule ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                      @relationshipList.element type                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_relationshipList_2E_element ("relationshipList.element",
                                                    NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_relationshipList_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_relationshipList_2E_element ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_relationshipList_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_relationshipList_2E_element (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_relationshipList_2E_element GALGAS_relationshipList_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_relationshipList_2E_element result ;
  const GALGAS_relationshipList_2E_element * p = (const GALGAS_relationshipList_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_relationshipList_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("relationshipList.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_dependanceList_2E_element::GALGAS_dependanceList_2E_element (void) :
mAttribute_mDependency () {
}

//---------------------------------------------------------------------------*

GALGAS_dependanceList_2E_element::~ GALGAS_dependanceList_2E_element (void) {
}

//---------------------------------------------------------------------------*

GALGAS_dependanceList_2E_element::GALGAS_dependanceList_2E_element (const GALGAS_abstractTransientDependency & inOperand0) :
mAttribute_mDependency (inOperand0) {
}

//---------------------------------------------------------------------------*

GALGAS_dependanceList_2E_element GALGAS_dependanceList_2E_element::constructor_new (const GALGAS_abstractTransientDependency & inOperand0 
                                                                                    COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_dependanceList_2E_element result ;
  if (inOperand0.isValid ()) {
    result = GALGAS_dependanceList_2E_element (inOperand0) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_dependanceList_2E_element::objectCompare (const GALGAS_dependanceList_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mDependency.objectCompare (inOperand.mAttribute_mDependency) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_dependanceList_2E_element::isValid (void) const {
  return mAttribute_mDependency.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_dependanceList_2E_element::drop (void) {
  mAttribute_mDependency.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_dependanceList_2E_element::description (C_String & ioString,
                                                    const PMSInt32 inIndentation) const {
  ioString << "<struct @dependanceList.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mDependency.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_abstractTransientDependency GALGAS_dependanceList_2E_element::reader_mDependency (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mDependency ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                       @dependanceList.element type                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_dependanceList_2E_element ("dependanceList.element",
                                                  NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_dependanceList_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_dependanceList_2E_element ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_dependanceList_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_dependanceList_2E_element (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_dependanceList_2E_element GALGAS_dependanceList_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                  C_Compiler * inCompiler
                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_dependanceList_2E_element result ;
  const GALGAS_dependanceList_2E_element * p = (const GALGAS_dependanceList_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_dependanceList_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("dependanceList.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_transientList_2E_element::GALGAS_transientList_2E_element (void) :
mAttribute_mType (),
mAttribute_mTransientTypeName (),
mAttribute_mTransientName (),
mAttribute_mDependencyList () {
}

//---------------------------------------------------------------------------*

GALGAS_transientList_2E_element::~ GALGAS_transientList_2E_element (void) {
}

//---------------------------------------------------------------------------*

GALGAS_transientList_2E_element::GALGAS_transientList_2E_element (const GALGAS_attributeASTType & inOperand0,
                                                                  const GALGAS_lstring & inOperand1,
                                                                  const GALGAS_lstring & inOperand2,
                                                                  const GALGAS_dependanceList & inOperand3) :
mAttribute_mType (inOperand0),
mAttribute_mTransientTypeName (inOperand1),
mAttribute_mTransientName (inOperand2),
mAttribute_mDependencyList (inOperand3) {
}

//---------------------------------------------------------------------------*

GALGAS_transientList_2E_element GALGAS_transientList_2E_element::constructor_new (const GALGAS_attributeASTType & inOperand0,
                                                                                  const GALGAS_lstring & inOperand1,
                                                                                  const GALGAS_lstring & inOperand2,
                                                                                  const GALGAS_dependanceList & inOperand3 
                                                                                  COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_transientList_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid ()) {
    result = GALGAS_transientList_2E_element (inOperand0, inOperand1, inOperand2, inOperand3) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_transientList_2E_element::objectCompare (const GALGAS_transientList_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mType.objectCompare (inOperand.mAttribute_mType) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mTransientTypeName.objectCompare (inOperand.mAttribute_mTransientTypeName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mTransientName.objectCompare (inOperand.mAttribute_mTransientName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mDependencyList.objectCompare (inOperand.mAttribute_mDependencyList) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_transientList_2E_element::isValid (void) const {
  return mAttribute_mType.isValid () && mAttribute_mTransientTypeName.isValid () && mAttribute_mTransientName.isValid () && mAttribute_mDependencyList.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_transientList_2E_element::drop (void) {
  mAttribute_mType.drop () ;
  mAttribute_mTransientTypeName.drop () ;
  mAttribute_mTransientName.drop () ;
  mAttribute_mDependencyList.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_transientList_2E_element::description (C_String & ioString,
                                                   const PMSInt32 inIndentation) const {
  ioString << "<struct @transientList.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mType.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mTransientTypeName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mTransientName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mDependencyList.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTType GALGAS_transientList_2E_element::reader_mType (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mType ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_transientList_2E_element::reader_mTransientTypeName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mTransientTypeName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_transientList_2E_element::reader_mTransientName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mTransientName ;
}

//---------------------------------------------------------------------------*

GALGAS_dependanceList GALGAS_transientList_2E_element::reader_mDependencyList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mDependencyList ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                        @transientList.element type                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_transientList_2E_element ("transientList.element",
                                                 NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_transientList_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_transientList_2E_element ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_transientList_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_transientList_2E_element (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_transientList_2E_element GALGAS_transientList_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_transientList_2E_element result ;
  const GALGAS_transientList_2E_element * p = (const GALGAS_transientList_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_transientList_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("transientList.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_classArrayList_2E_element::GALGAS_classArrayList_2E_element (void) :
mAttribute_mClassName (),
mAttribute_mArrayName () {
}

//---------------------------------------------------------------------------*

GALGAS_classArrayList_2E_element::~ GALGAS_classArrayList_2E_element (void) {
}

//---------------------------------------------------------------------------*

GALGAS_classArrayList_2E_element::GALGAS_classArrayList_2E_element (const GALGAS_lstring & inOperand0,
                                                                    const GALGAS_lstring & inOperand1) :
mAttribute_mClassName (inOperand0),
mAttribute_mArrayName (inOperand1) {
}

//---------------------------------------------------------------------------*

GALGAS_classArrayList_2E_element GALGAS_classArrayList_2E_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_classArrayList_2E_element (GALGAS_lstring::constructor_default (HERE),
                                           GALGAS_lstring::constructor_default (HERE)) ;
}

//---------------------------------------------------------------------------*

GALGAS_classArrayList_2E_element GALGAS_classArrayList_2E_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                                    const GALGAS_lstring & inOperand1 
                                                                                    COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_classArrayList_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result = GALGAS_classArrayList_2E_element (inOperand0, inOperand1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_classArrayList_2E_element::objectCompare (const GALGAS_classArrayList_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mClassName.objectCompare (inOperand.mAttribute_mClassName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mArrayName.objectCompare (inOperand.mAttribute_mArrayName) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_classArrayList_2E_element::isValid (void) const {
  return mAttribute_mClassName.isValid () && mAttribute_mArrayName.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_classArrayList_2E_element::drop (void) {
  mAttribute_mClassName.drop () ;
  mAttribute_mArrayName.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_classArrayList_2E_element::description (C_String & ioString,
                                                    const PMSInt32 inIndentation) const {
  ioString << "<struct @classArrayList.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mClassName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mArrayName.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_classArrayList_2E_element::reader_mClassName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mClassName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_classArrayList_2E_element::reader_mArrayName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mArrayName ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                       @classArrayList.element type                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_classArrayList_2E_element ("classArrayList.element",
                                                  NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_classArrayList_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_classArrayList_2E_element ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_classArrayList_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_classArrayList_2E_element (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_classArrayList_2E_element GALGAS_classArrayList_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                  C_Compiler * inCompiler
                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_classArrayList_2E_element result ;
  const GALGAS_classArrayList_2E_element * p = (const GALGAS_classArrayList_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_classArrayList_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("classArrayList.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_classList_2E_element::GALGAS_classList_2E_element (void) :
mAttribute_mClassName (),
mAttribute_mSuperClassName (),
mAttribute_mAttributeList (),
mAttribute_mArrayList (),
mAttribute_mTransientList () {
}

//---------------------------------------------------------------------------*

GALGAS_classList_2E_element::~ GALGAS_classList_2E_element (void) {
}

//---------------------------------------------------------------------------*

GALGAS_classList_2E_element::GALGAS_classList_2E_element (const GALGAS_lstring & inOperand0,
                                                          const GALGAS_lstring & inOperand1,
                                                          const GALGAS_attributeList & inOperand2,
                                                          const GALGAS_classArrayList & inOperand3,
                                                          const GALGAS_transientList & inOperand4) :
mAttribute_mClassName (inOperand0),
mAttribute_mSuperClassName (inOperand1),
mAttribute_mAttributeList (inOperand2),
mAttribute_mArrayList (inOperand3),
mAttribute_mTransientList (inOperand4) {
}

//---------------------------------------------------------------------------*

GALGAS_classList_2E_element GALGAS_classList_2E_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_classList_2E_element (GALGAS_lstring::constructor_default (HERE),
                                      GALGAS_lstring::constructor_default (HERE),
                                      GALGAS_attributeList::constructor_emptyList (HERE),
                                      GALGAS_classArrayList::constructor_emptyList (HERE),
                                      GALGAS_transientList::constructor_emptyList (HERE)) ;
}

//---------------------------------------------------------------------------*

GALGAS_classList_2E_element GALGAS_classList_2E_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                          const GALGAS_lstring & inOperand1,
                                                                          const GALGAS_attributeList & inOperand2,
                                                                          const GALGAS_classArrayList & inOperand3,
                                                                          const GALGAS_transientList & inOperand4 
                                                                          COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_classList_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid ()) {
    result = GALGAS_classList_2E_element (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_classList_2E_element::objectCompare (const GALGAS_classList_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mClassName.objectCompare (inOperand.mAttribute_mClassName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mSuperClassName.objectCompare (inOperand.mAttribute_mSuperClassName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mAttributeList.objectCompare (inOperand.mAttribute_mAttributeList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mArrayList.objectCompare (inOperand.mAttribute_mArrayList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mTransientList.objectCompare (inOperand.mAttribute_mTransientList) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_classList_2E_element::isValid (void) const {
  return mAttribute_mClassName.isValid () && mAttribute_mSuperClassName.isValid () && mAttribute_mAttributeList.isValid () && mAttribute_mArrayList.isValid () && mAttribute_mTransientList.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_classList_2E_element::drop (void) {
  mAttribute_mClassName.drop () ;
  mAttribute_mSuperClassName.drop () ;
  mAttribute_mAttributeList.drop () ;
  mAttribute_mArrayList.drop () ;
  mAttribute_mTransientList.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_classList_2E_element::description (C_String & ioString,
                                               const PMSInt32 inIndentation) const {
  ioString << "<struct @classList.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mClassName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mSuperClassName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mAttributeList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mArrayList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mTransientList.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_classList_2E_element::reader_mClassName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mClassName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_classList_2E_element::reader_mSuperClassName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mSuperClassName ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeList GALGAS_classList_2E_element::reader_mAttributeList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mAttributeList ;
}

//---------------------------------------------------------------------------*

GALGAS_classArrayList GALGAS_classList_2E_element::reader_mArrayList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mArrayList ;
}

//---------------------------------------------------------------------------*

GALGAS_transientList GALGAS_classList_2E_element::reader_mTransientList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mTransientList ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                          @classList.element type                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_classList_2E_element ("classList.element",
                                             NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_classList_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_classList_2E_element ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_classList_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_classList_2E_element (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_classList_2E_element GALGAS_classList_2E_element::extractObject (const GALGAS_object & inObject,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_classList_2E_element result ;
  const GALGAS_classList_2E_element * p = (const GALGAS_classList_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_classList_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("classList.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_entityList_2E_element::GALGAS_entityList_2E_element (void) :
mAttribute_mEntityName (),
mAttribute_mSuperEntityName (),
mAttribute_mAttributeList (),
mAttribute_mTransientList (),
mAttribute_mRelationshipList (),
mAttribute_mSignList () {
}

//---------------------------------------------------------------------------*

GALGAS_entityList_2E_element::~ GALGAS_entityList_2E_element (void) {
}

//---------------------------------------------------------------------------*

GALGAS_entityList_2E_element::GALGAS_entityList_2E_element (const GALGAS_lstring & inOperand0,
                                                            const GALGAS_lstring & inOperand1,
                                                            const GALGAS_attributeList & inOperand2,
                                                            const GALGAS_transientList & inOperand3,
                                                            const GALGAS_relationshipList & inOperand4,
                                                            const GALGAS_lstringlist & inOperand5) :
mAttribute_mEntityName (inOperand0),
mAttribute_mSuperEntityName (inOperand1),
mAttribute_mAttributeList (inOperand2),
mAttribute_mTransientList (inOperand3),
mAttribute_mRelationshipList (inOperand4),
mAttribute_mSignList (inOperand5) {
}

//---------------------------------------------------------------------------*

GALGAS_entityList_2E_element GALGAS_entityList_2E_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_entityList_2E_element (GALGAS_lstring::constructor_default (HERE),
                                       GALGAS_lstring::constructor_default (HERE),
                                       GALGAS_attributeList::constructor_emptyList (HERE),
                                       GALGAS_transientList::constructor_emptyList (HERE),
                                       GALGAS_relationshipList::constructor_emptyList (HERE),
                                       GALGAS_lstringlist::constructor_emptyList (HERE)) ;
}

//---------------------------------------------------------------------------*

GALGAS_entityList_2E_element GALGAS_entityList_2E_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                            const GALGAS_lstring & inOperand1,
                                                                            const GALGAS_attributeList & inOperand2,
                                                                            const GALGAS_transientList & inOperand3,
                                                                            const GALGAS_relationshipList & inOperand4,
                                                                            const GALGAS_lstringlist & inOperand5 
                                                                            COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_entityList_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid ()) {
    result = GALGAS_entityList_2E_element (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_entityList_2E_element::objectCompare (const GALGAS_entityList_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mEntityName.objectCompare (inOperand.mAttribute_mEntityName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mSuperEntityName.objectCompare (inOperand.mAttribute_mSuperEntityName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mAttributeList.objectCompare (inOperand.mAttribute_mAttributeList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mTransientList.objectCompare (inOperand.mAttribute_mTransientList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mRelationshipList.objectCompare (inOperand.mAttribute_mRelationshipList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mSignList.objectCompare (inOperand.mAttribute_mSignList) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_entityList_2E_element::isValid (void) const {
  return mAttribute_mEntityName.isValid () && mAttribute_mSuperEntityName.isValid () && mAttribute_mAttributeList.isValid () && mAttribute_mTransientList.isValid () && mAttribute_mRelationshipList.isValid () && mAttribute_mSignList.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_entityList_2E_element::drop (void) {
  mAttribute_mEntityName.drop () ;
  mAttribute_mSuperEntityName.drop () ;
  mAttribute_mAttributeList.drop () ;
  mAttribute_mTransientList.drop () ;
  mAttribute_mRelationshipList.drop () ;
  mAttribute_mSignList.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_entityList_2E_element::description (C_String & ioString,
                                                const PMSInt32 inIndentation) const {
  ioString << "<struct @entityList.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mEntityName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mSuperEntityName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mAttributeList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mTransientList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mRelationshipList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mSignList.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_entityList_2E_element::reader_mEntityName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mEntityName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_entityList_2E_element::reader_mSuperEntityName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mSuperEntityName ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeList GALGAS_entityList_2E_element::reader_mAttributeList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mAttributeList ;
}

//---------------------------------------------------------------------------*

GALGAS_transientList GALGAS_entityList_2E_element::reader_mTransientList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mTransientList ;
}

//---------------------------------------------------------------------------*

GALGAS_relationshipList GALGAS_entityList_2E_element::reader_mRelationshipList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mRelationshipList ;
}

//---------------------------------------------------------------------------*

GALGAS_lstringlist GALGAS_entityList_2E_element::reader_mSignList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mSignList ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                         @entityList.element type                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_entityList_2E_element ("entityList.element",
                                              NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_entityList_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_entityList_2E_element ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_entityList_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_entityList_2E_element (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_entityList_2E_element GALGAS_entityList_2E_element::extractObject (const GALGAS_object & inObject,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_entityList_2E_element result ;
  const GALGAS_entityList_2E_element * p = (const GALGAS_entityList_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_entityList_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("entityList.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingOptionList_2E_element::GALGAS_outletBindingOptionList_2E_element (void) :
mAttribute_mOptionName (),
mAttribute_mDefaultValue () {
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingOptionList_2E_element::~ GALGAS_outletBindingOptionList_2E_element (void) {
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingOptionList_2E_element::GALGAS_outletBindingOptionList_2E_element (const GALGAS_lstring & inOperand0,
                                                                                      const GALGAS_abstractDefaultValue & inOperand1) :
mAttribute_mOptionName (inOperand0),
mAttribute_mDefaultValue (inOperand1) {
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingOptionList_2E_element GALGAS_outletBindingOptionList_2E_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                                                      const GALGAS_abstractDefaultValue & inOperand1 
                                                                                                      COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_outletBindingOptionList_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result = GALGAS_outletBindingOptionList_2E_element (inOperand0, inOperand1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_outletBindingOptionList_2E_element::objectCompare (const GALGAS_outletBindingOptionList_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mOptionName.objectCompare (inOperand.mAttribute_mOptionName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mDefaultValue.objectCompare (inOperand.mAttribute_mDefaultValue) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_outletBindingOptionList_2E_element::isValid (void) const {
  return mAttribute_mOptionName.isValid () && mAttribute_mDefaultValue.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_outletBindingOptionList_2E_element::drop (void) {
  mAttribute_mOptionName.drop () ;
  mAttribute_mDefaultValue.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_outletBindingOptionList_2E_element::description (C_String & ioString,
                                                             const PMSInt32 inIndentation) const {
  ioString << "<struct @outletBindingOptionList.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mOptionName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mDefaultValue.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_outletBindingOptionList_2E_element::reader_mOptionName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mOptionName ;
}

//---------------------------------------------------------------------------*

GALGAS_abstractDefaultValue GALGAS_outletBindingOptionList_2E_element::reader_mDefaultValue (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mDefaultValue ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                   @outletBindingOptionList.element type                   *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_outletBindingOptionList_2E_element ("outletBindingOptionList.element",
                                                           NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_outletBindingOptionList_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_outletBindingOptionList_2E_element ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_outletBindingOptionList_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_outletBindingOptionList_2E_element (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingOptionList_2E_element GALGAS_outletBindingOptionList_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                                    C_Compiler * inCompiler
                                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_outletBindingOptionList_2E_element result ;
  const GALGAS_outletBindingOptionList_2E_element * p = (const GALGAS_outletBindingOptionList_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_outletBindingOptionList_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("outletBindingOptionList.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingList_2E_element::GALGAS_multiValuedBindingList_2E_element (void) :
mAttribute_mNegate (),
mAttribute_mBoundModel (),
mAttribute_mOutletBindingOptionList () {
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingList_2E_element::~ GALGAS_multiValuedBindingList_2E_element (void) {
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingList_2E_element::GALGAS_multiValuedBindingList_2E_element (const GALGAS_bool & inOperand0,
                                                                                    const GALGAS_multiValuedBindingBoundModel & inOperand1,
                                                                                    const GALGAS_outletBindingOptionList & inOperand2) :
mAttribute_mNegate (inOperand0),
mAttribute_mBoundModel (inOperand1),
mAttribute_mOutletBindingOptionList (inOperand2) {
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingList_2E_element GALGAS_multiValuedBindingList_2E_element::constructor_new (const GALGAS_bool & inOperand0,
                                                                                                    const GALGAS_multiValuedBindingBoundModel & inOperand1,
                                                                                                    const GALGAS_outletBindingOptionList & inOperand2 
                                                                                                    COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_multiValuedBindingList_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result = GALGAS_multiValuedBindingList_2E_element (inOperand0, inOperand1, inOperand2) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_multiValuedBindingList_2E_element::objectCompare (const GALGAS_multiValuedBindingList_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mNegate.objectCompare (inOperand.mAttribute_mNegate) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mBoundModel.objectCompare (inOperand.mAttribute_mBoundModel) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mOutletBindingOptionList.objectCompare (inOperand.mAttribute_mOutletBindingOptionList) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_multiValuedBindingList_2E_element::isValid (void) const {
  return mAttribute_mNegate.isValid () && mAttribute_mBoundModel.isValid () && mAttribute_mOutletBindingOptionList.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_multiValuedBindingList_2E_element::drop (void) {
  mAttribute_mNegate.drop () ;
  mAttribute_mBoundModel.drop () ;
  mAttribute_mOutletBindingOptionList.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_multiValuedBindingList_2E_element::description (C_String & ioString,
                                                            const PMSInt32 inIndentation) const {
  ioString << "<struct @multiValuedBindingList.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mNegate.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mBoundModel.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mOutletBindingOptionList.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_multiValuedBindingList_2E_element::reader_mNegate (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mNegate ;
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundModel GALGAS_multiValuedBindingList_2E_element::reader_mBoundModel (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mBoundModel ;
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingOptionList GALGAS_multiValuedBindingList_2E_element::reader_mOutletBindingOptionList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mOutletBindingOptionList ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                   @multiValuedBindingList.element type                    *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_multiValuedBindingList_2E_element ("multiValuedBindingList.element",
                                                          NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_multiValuedBindingList_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_multiValuedBindingList_2E_element ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_multiValuedBindingList_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_multiValuedBindingList_2E_element (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_multiValuedBindingList_2E_element GALGAS_multiValuedBindingList_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                                  C_Compiler * inCompiler
                                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_multiValuedBindingList_2E_element result ;
  const GALGAS_multiValuedBindingList_2E_element * p = (const GALGAS_multiValuedBindingList_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_multiValuedBindingList_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("multiValuedBindingList.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_tableValueColumnBinding_2E_element::GALGAS_tableValueColumnBinding_2E_element (void) :
mAttribute_mColumnName (),
mAttribute_mCellTypeName (),
mAttribute_mBoundPropertyName () {
}

//---------------------------------------------------------------------------*

GALGAS_tableValueColumnBinding_2E_element::~ GALGAS_tableValueColumnBinding_2E_element (void) {
}

//---------------------------------------------------------------------------*

GALGAS_tableValueColumnBinding_2E_element::GALGAS_tableValueColumnBinding_2E_element (const GALGAS_lstring & inOperand0,
                                                                                      const GALGAS_lstring & inOperand1,
                                                                                      const GALGAS_lstring & inOperand2) :
mAttribute_mColumnName (inOperand0),
mAttribute_mCellTypeName (inOperand1),
mAttribute_mBoundPropertyName (inOperand2) {
}

//---------------------------------------------------------------------------*

GALGAS_tableValueColumnBinding_2E_element GALGAS_tableValueColumnBinding_2E_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_tableValueColumnBinding_2E_element (GALGAS_lstring::constructor_default (HERE),
                                                    GALGAS_lstring::constructor_default (HERE),
                                                    GALGAS_lstring::constructor_default (HERE)) ;
}

//---------------------------------------------------------------------------*

GALGAS_tableValueColumnBinding_2E_element GALGAS_tableValueColumnBinding_2E_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                                                      const GALGAS_lstring & inOperand1,
                                                                                                      const GALGAS_lstring & inOperand2 
                                                                                                      COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_tableValueColumnBinding_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result = GALGAS_tableValueColumnBinding_2E_element (inOperand0, inOperand1, inOperand2) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_tableValueColumnBinding_2E_element::objectCompare (const GALGAS_tableValueColumnBinding_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mColumnName.objectCompare (inOperand.mAttribute_mColumnName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mCellTypeName.objectCompare (inOperand.mAttribute_mCellTypeName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mBoundPropertyName.objectCompare (inOperand.mAttribute_mBoundPropertyName) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_tableValueColumnBinding_2E_element::isValid (void) const {
  return mAttribute_mColumnName.isValid () && mAttribute_mCellTypeName.isValid () && mAttribute_mBoundPropertyName.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_tableValueColumnBinding_2E_element::drop (void) {
  mAttribute_mColumnName.drop () ;
  mAttribute_mCellTypeName.drop () ;
  mAttribute_mBoundPropertyName.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_tableValueColumnBinding_2E_element::description (C_String & ioString,
                                                             const PMSInt32 inIndentation) const {
  ioString << "<struct @tableValueColumnBinding.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mColumnName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mCellTypeName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mBoundPropertyName.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_tableValueColumnBinding_2E_element::reader_mColumnName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mColumnName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_tableValueColumnBinding_2E_element::reader_mCellTypeName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mCellTypeName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_tableValueColumnBinding_2E_element::reader_mBoundPropertyName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mBoundPropertyName ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                   @tableValueColumnBinding.element type                   *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_tableValueColumnBinding_2E_element ("tableValueColumnBinding.element",
                                                           NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_tableValueColumnBinding_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_tableValueColumnBinding_2E_element ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_tableValueColumnBinding_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_tableValueColumnBinding_2E_element (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_tableValueColumnBinding_2E_element GALGAS_tableValueColumnBinding_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                                    C_Compiler * inCompiler
                                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_tableValueColumnBinding_2E_element result ;
  const GALGAS_tableValueColumnBinding_2E_element * p = (const GALGAS_tableValueColumnBinding_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_tableValueColumnBinding_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("tableValueColumnBinding.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bindingList_2E_element::GALGAS_bindingList_2E_element (void) :
mAttribute_mBinding () {
}

//---------------------------------------------------------------------------*

GALGAS_bindingList_2E_element::~ GALGAS_bindingList_2E_element (void) {
}

//---------------------------------------------------------------------------*

GALGAS_bindingList_2E_element::GALGAS_bindingList_2E_element (const GALGAS_abstractBinding & inOperand0) :
mAttribute_mBinding (inOperand0) {
}

//---------------------------------------------------------------------------*

GALGAS_bindingList_2E_element GALGAS_bindingList_2E_element::constructor_new (const GALGAS_abstractBinding & inOperand0 
                                                                              COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_bindingList_2E_element result ;
  if (inOperand0.isValid ()) {
    result = GALGAS_bindingList_2E_element (inOperand0) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_bindingList_2E_element::objectCompare (const GALGAS_bindingList_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mBinding.objectCompare (inOperand.mAttribute_mBinding) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_bindingList_2E_element::isValid (void) const {
  return mAttribute_mBinding.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_bindingList_2E_element::drop (void) {
  mAttribute_mBinding.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_bindingList_2E_element::description (C_String & ioString,
                                                 const PMSInt32 inIndentation) const {
  ioString << "<struct @bindingList.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mBinding.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_abstractBinding GALGAS_bindingList_2E_element::reader_mBinding (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mBinding ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                         @bindingList.element type                         *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_bindingList_2E_element ("bindingList.element",
                                               NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_bindingList_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_bindingList_2E_element ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_bindingList_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_bindingList_2E_element (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bindingList_2E_element GALGAS_bindingList_2E_element::extractObject (const GALGAS_object & inObject,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_bindingList_2E_element result ;
  const GALGAS_bindingList_2E_element * p = (const GALGAS_bindingList_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_bindingList_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("bindingList.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletDeclarationList_2E_element::GALGAS_outletDeclarationList_2E_element (void) :
mAttribute_mOutletType (),
mAttribute_mOutletName (),
mAttribute_mOutletBindingList () {
}

//---------------------------------------------------------------------------*

GALGAS_outletDeclarationList_2E_element::~ GALGAS_outletDeclarationList_2E_element (void) {
}

//---------------------------------------------------------------------------*

GALGAS_outletDeclarationList_2E_element::GALGAS_outletDeclarationList_2E_element (const GALGAS_lstring & inOperand0,
                                                                                  const GALGAS_lstring & inOperand1,
                                                                                  const GALGAS_bindingList & inOperand2) :
mAttribute_mOutletType (inOperand0),
mAttribute_mOutletName (inOperand1),
mAttribute_mOutletBindingList (inOperand2) {
}

//---------------------------------------------------------------------------*

GALGAS_outletDeclarationList_2E_element GALGAS_outletDeclarationList_2E_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_outletDeclarationList_2E_element (GALGAS_lstring::constructor_default (HERE),
                                                  GALGAS_lstring::constructor_default (HERE),
                                                  GALGAS_bindingList::constructor_emptyList (HERE)) ;
}

//---------------------------------------------------------------------------*

GALGAS_outletDeclarationList_2E_element GALGAS_outletDeclarationList_2E_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                                                  const GALGAS_lstring & inOperand1,
                                                                                                  const GALGAS_bindingList & inOperand2 
                                                                                                  COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_outletDeclarationList_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result = GALGAS_outletDeclarationList_2E_element (inOperand0, inOperand1, inOperand2) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_outletDeclarationList_2E_element::objectCompare (const GALGAS_outletDeclarationList_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mOutletType.objectCompare (inOperand.mAttribute_mOutletType) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mOutletName.objectCompare (inOperand.mAttribute_mOutletName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mOutletBindingList.objectCompare (inOperand.mAttribute_mOutletBindingList) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_outletDeclarationList_2E_element::isValid (void) const {
  return mAttribute_mOutletType.isValid () && mAttribute_mOutletName.isValid () && mAttribute_mOutletBindingList.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_outletDeclarationList_2E_element::drop (void) {
  mAttribute_mOutletType.drop () ;
  mAttribute_mOutletName.drop () ;
  mAttribute_mOutletBindingList.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_outletDeclarationList_2E_element::description (C_String & ioString,
                                                           const PMSInt32 inIndentation) const {
  ioString << "<struct @outletDeclarationList.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mOutletType.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mOutletName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mOutletBindingList.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_outletDeclarationList_2E_element::reader_mOutletType (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mOutletType ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_outletDeclarationList_2E_element::reader_mOutletName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mOutletName ;
}

//---------------------------------------------------------------------------*

GALGAS_bindingList GALGAS_outletDeclarationList_2E_element::reader_mOutletBindingList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mOutletBindingList ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                    @outletDeclarationList.element type                    *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_outletDeclarationList_2E_element ("outletDeclarationList.element",
                                                         NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_outletDeclarationList_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_outletDeclarationList_2E_element ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_outletDeclarationList_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_outletDeclarationList_2E_element (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletDeclarationList_2E_element GALGAS_outletDeclarationList_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                                C_Compiler * inCompiler
                                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_outletDeclarationList_2E_element result ;
  const GALGAS_outletDeclarationList_2E_element * p = (const GALGAS_outletDeclarationList_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_outletDeclarationList_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("outletDeclarationList.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_preferencesDeclarationList_2E_element::GALGAS_preferencesDeclarationList_2E_element (void) :
mAttribute_mPreferencesName (),
mAttribute_mOutletDeclarationList (),
mAttribute_mAttributeList (),
mAttribute_mTransientList (),
mAttribute_mActionDeclarationList (),
mAttribute_mControllerList (),
mAttribute_mClassArrayList () {
}

//---------------------------------------------------------------------------*

GALGAS_preferencesDeclarationList_2E_element::~ GALGAS_preferencesDeclarationList_2E_element (void) {
}

//---------------------------------------------------------------------------*

GALGAS_preferencesDeclarationList_2E_element::GALGAS_preferencesDeclarationList_2E_element (const GALGAS_lstring & inOperand0,
                                                                                            const GALGAS_outletDeclarationList & inOperand1,
                                                                                            const GALGAS_attributeList & inOperand2,
                                                                                            const GALGAS_transientList & inOperand3,
                                                                                            const GALGAS_lstringlist & inOperand4,
                                                                                            const GALGAS_controllerList & inOperand5,
                                                                                            const GALGAS_classArrayList & inOperand6) :
mAttribute_mPreferencesName (inOperand0),
mAttribute_mOutletDeclarationList (inOperand1),
mAttribute_mAttributeList (inOperand2),
mAttribute_mTransientList (inOperand3),
mAttribute_mActionDeclarationList (inOperand4),
mAttribute_mControllerList (inOperand5),
mAttribute_mClassArrayList (inOperand6) {
}

//---------------------------------------------------------------------------*

GALGAS_preferencesDeclarationList_2E_element GALGAS_preferencesDeclarationList_2E_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_preferencesDeclarationList_2E_element (GALGAS_lstring::constructor_default (HERE),
                                                       GALGAS_outletDeclarationList::constructor_emptyList (HERE),
                                                       GALGAS_attributeList::constructor_emptyList (HERE),
                                                       GALGAS_transientList::constructor_emptyList (HERE),
                                                       GALGAS_lstringlist::constructor_emptyList (HERE),
                                                       GALGAS_controllerList::constructor_emptyList (HERE),
                                                       GALGAS_classArrayList::constructor_emptyList (HERE)) ;
}

//---------------------------------------------------------------------------*

GALGAS_preferencesDeclarationList_2E_element GALGAS_preferencesDeclarationList_2E_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                                                            const GALGAS_outletDeclarationList & inOperand1,
                                                                                                            const GALGAS_attributeList & inOperand2,
                                                                                                            const GALGAS_transientList & inOperand3,
                                                                                                            const GALGAS_lstringlist & inOperand4,
                                                                                                            const GALGAS_controllerList & inOperand5,
                                                                                                            const GALGAS_classArrayList & inOperand6 
                                                                                                            COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_preferencesDeclarationList_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid () && inOperand6.isValid ()) {
    result = GALGAS_preferencesDeclarationList_2E_element (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5, inOperand6) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_preferencesDeclarationList_2E_element::objectCompare (const GALGAS_preferencesDeclarationList_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mPreferencesName.objectCompare (inOperand.mAttribute_mPreferencesName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mOutletDeclarationList.objectCompare (inOperand.mAttribute_mOutletDeclarationList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mAttributeList.objectCompare (inOperand.mAttribute_mAttributeList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mTransientList.objectCompare (inOperand.mAttribute_mTransientList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mActionDeclarationList.objectCompare (inOperand.mAttribute_mActionDeclarationList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mControllerList.objectCompare (inOperand.mAttribute_mControllerList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mClassArrayList.objectCompare (inOperand.mAttribute_mClassArrayList) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_preferencesDeclarationList_2E_element::isValid (void) const {
  return mAttribute_mPreferencesName.isValid () && mAttribute_mOutletDeclarationList.isValid () && mAttribute_mAttributeList.isValid () && mAttribute_mTransientList.isValid () && mAttribute_mActionDeclarationList.isValid () && mAttribute_mControllerList.isValid () && mAttribute_mClassArrayList.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_preferencesDeclarationList_2E_element::drop (void) {
  mAttribute_mPreferencesName.drop () ;
  mAttribute_mOutletDeclarationList.drop () ;
  mAttribute_mAttributeList.drop () ;
  mAttribute_mTransientList.drop () ;
  mAttribute_mActionDeclarationList.drop () ;
  mAttribute_mControllerList.drop () ;
  mAttribute_mClassArrayList.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_preferencesDeclarationList_2E_element::description (C_String & ioString,
                                                                const PMSInt32 inIndentation) const {
  ioString << "<struct @preferencesDeclarationList.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mPreferencesName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mOutletDeclarationList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mAttributeList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mTransientList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mActionDeclarationList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mControllerList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mClassArrayList.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_preferencesDeclarationList_2E_element::reader_mPreferencesName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mPreferencesName ;
}

//---------------------------------------------------------------------------*

GALGAS_outletDeclarationList GALGAS_preferencesDeclarationList_2E_element::reader_mOutletDeclarationList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mOutletDeclarationList ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeList GALGAS_preferencesDeclarationList_2E_element::reader_mAttributeList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mAttributeList ;
}

//---------------------------------------------------------------------------*

GALGAS_transientList GALGAS_preferencesDeclarationList_2E_element::reader_mTransientList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mTransientList ;
}

//---------------------------------------------------------------------------*

GALGAS_lstringlist GALGAS_preferencesDeclarationList_2E_element::reader_mActionDeclarationList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mActionDeclarationList ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerList GALGAS_preferencesDeclarationList_2E_element::reader_mControllerList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mControllerList ;
}

//---------------------------------------------------------------------------*

GALGAS_classArrayList GALGAS_preferencesDeclarationList_2E_element::reader_mClassArrayList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mClassArrayList ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                 @preferencesDeclarationList.element type                  *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_preferencesDeclarationList_2E_element ("preferencesDeclarationList.element",
                                                              NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_preferencesDeclarationList_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_preferencesDeclarationList_2E_element ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_preferencesDeclarationList_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_preferencesDeclarationList_2E_element (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_preferencesDeclarationList_2E_element GALGAS_preferencesDeclarationList_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                                          C_Compiler * inCompiler
                                                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_preferencesDeclarationList_2E_element result ;
  const GALGAS_preferencesDeclarationList_2E_element * p = (const GALGAS_preferencesDeclarationList_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_preferencesDeclarationList_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("preferencesDeclarationList.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_nibClassDeclarationList_2E_element::GALGAS_nibClassDeclarationList_2E_element (void) :
mAttribute_mClassName (),
mAttribute_mOutletDeclarationList (),
mAttribute_mAttributeList (),
mAttribute_mTransientList (),
mAttribute_mActionDeclarationList (),
mAttribute_mControllerList (),
mAttribute_mClassArrayList () {
}

//---------------------------------------------------------------------------*

GALGAS_nibClassDeclarationList_2E_element::~ GALGAS_nibClassDeclarationList_2E_element (void) {
}

//---------------------------------------------------------------------------*

GALGAS_nibClassDeclarationList_2E_element::GALGAS_nibClassDeclarationList_2E_element (const GALGAS_lstring & inOperand0,
                                                                                      const GALGAS_outletDeclarationList & inOperand1,
                                                                                      const GALGAS_attributeList & inOperand2,
                                                                                      const GALGAS_transientList & inOperand3,
                                                                                      const GALGAS_lstringlist & inOperand4,
                                                                                      const GALGAS_controllerList & inOperand5,
                                                                                      const GALGAS_classArrayList & inOperand6) :
mAttribute_mClassName (inOperand0),
mAttribute_mOutletDeclarationList (inOperand1),
mAttribute_mAttributeList (inOperand2),
mAttribute_mTransientList (inOperand3),
mAttribute_mActionDeclarationList (inOperand4),
mAttribute_mControllerList (inOperand5),
mAttribute_mClassArrayList (inOperand6) {
}

//---------------------------------------------------------------------------*

GALGAS_nibClassDeclarationList_2E_element GALGAS_nibClassDeclarationList_2E_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_nibClassDeclarationList_2E_element (GALGAS_lstring::constructor_default (HERE),
                                                    GALGAS_outletDeclarationList::constructor_emptyList (HERE),
                                                    GALGAS_attributeList::constructor_emptyList (HERE),
                                                    GALGAS_transientList::constructor_emptyList (HERE),
                                                    GALGAS_lstringlist::constructor_emptyList (HERE),
                                                    GALGAS_controllerList::constructor_emptyList (HERE),
                                                    GALGAS_classArrayList::constructor_emptyList (HERE)) ;
}

//---------------------------------------------------------------------------*

GALGAS_nibClassDeclarationList_2E_element GALGAS_nibClassDeclarationList_2E_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                                                      const GALGAS_outletDeclarationList & inOperand1,
                                                                                                      const GALGAS_attributeList & inOperand2,
                                                                                                      const GALGAS_transientList & inOperand3,
                                                                                                      const GALGAS_lstringlist & inOperand4,
                                                                                                      const GALGAS_controllerList & inOperand5,
                                                                                                      const GALGAS_classArrayList & inOperand6 
                                                                                                      COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_nibClassDeclarationList_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid () && inOperand6.isValid ()) {
    result = GALGAS_nibClassDeclarationList_2E_element (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5, inOperand6) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_nibClassDeclarationList_2E_element::objectCompare (const GALGAS_nibClassDeclarationList_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mClassName.objectCompare (inOperand.mAttribute_mClassName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mOutletDeclarationList.objectCompare (inOperand.mAttribute_mOutletDeclarationList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mAttributeList.objectCompare (inOperand.mAttribute_mAttributeList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mTransientList.objectCompare (inOperand.mAttribute_mTransientList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mActionDeclarationList.objectCompare (inOperand.mAttribute_mActionDeclarationList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mControllerList.objectCompare (inOperand.mAttribute_mControllerList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mClassArrayList.objectCompare (inOperand.mAttribute_mClassArrayList) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_nibClassDeclarationList_2E_element::isValid (void) const {
  return mAttribute_mClassName.isValid () && mAttribute_mOutletDeclarationList.isValid () && mAttribute_mAttributeList.isValid () && mAttribute_mTransientList.isValid () && mAttribute_mActionDeclarationList.isValid () && mAttribute_mControllerList.isValid () && mAttribute_mClassArrayList.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_nibClassDeclarationList_2E_element::drop (void) {
  mAttribute_mClassName.drop () ;
  mAttribute_mOutletDeclarationList.drop () ;
  mAttribute_mAttributeList.drop () ;
  mAttribute_mTransientList.drop () ;
  mAttribute_mActionDeclarationList.drop () ;
  mAttribute_mControllerList.drop () ;
  mAttribute_mClassArrayList.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_nibClassDeclarationList_2E_element::description (C_String & ioString,
                                                             const PMSInt32 inIndentation) const {
  ioString << "<struct @nibClassDeclarationList.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mClassName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mOutletDeclarationList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mAttributeList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mTransientList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mActionDeclarationList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mControllerList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mClassArrayList.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_nibClassDeclarationList_2E_element::reader_mClassName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mClassName ;
}

//---------------------------------------------------------------------------*

GALGAS_outletDeclarationList GALGAS_nibClassDeclarationList_2E_element::reader_mOutletDeclarationList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mOutletDeclarationList ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeList GALGAS_nibClassDeclarationList_2E_element::reader_mAttributeList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mAttributeList ;
}

//---------------------------------------------------------------------------*

GALGAS_transientList GALGAS_nibClassDeclarationList_2E_element::reader_mTransientList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mTransientList ;
}

//---------------------------------------------------------------------------*

GALGAS_lstringlist GALGAS_nibClassDeclarationList_2E_element::reader_mActionDeclarationList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mActionDeclarationList ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerList GALGAS_nibClassDeclarationList_2E_element::reader_mControllerList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mControllerList ;
}

//---------------------------------------------------------------------------*

GALGAS_classArrayList GALGAS_nibClassDeclarationList_2E_element::reader_mClassArrayList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mClassArrayList ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                   @nibClassDeclarationList.element type                   *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_nibClassDeclarationList_2E_element ("nibClassDeclarationList.element",
                                                           NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_nibClassDeclarationList_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_nibClassDeclarationList_2E_element ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_nibClassDeclarationList_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_nibClassDeclarationList_2E_element (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_nibClassDeclarationList_2E_element GALGAS_nibClassDeclarationList_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                                    C_Compiler * inCompiler
                                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_nibClassDeclarationList_2E_element result ;
  const GALGAS_nibClassDeclarationList_2E_element * p = (const GALGAS_nibClassDeclarationList_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_nibClassDeclarationList_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("nibClassDeclarationList.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerList_2E_element::GALGAS_controllerList_2E_element (void) :
mAttribute_mControllerKind (),
mAttribute_mControllerClassName (),
mAttribute_mControllerName (),
mAttribute_mIsRootObject (),
mAttribute_mControlledObjectName (),
mAttribute_mControlledObjectBindingOptionList (),
mAttribute_mControllerBindingList () {
}

//---------------------------------------------------------------------------*

GALGAS_controllerList_2E_element::~ GALGAS_controllerList_2E_element (void) {
}

//---------------------------------------------------------------------------*

GALGAS_controllerList_2E_element::GALGAS_controllerList_2E_element (const GALGAS_controllerKind & inOperand0,
                                                                    const GALGAS_lstring & inOperand1,
                                                                    const GALGAS_lstring & inOperand2,
                                                                    const GALGAS_lbool & inOperand3,
                                                                    const GALGAS_lstring & inOperand4,
                                                                    const GALGAS_outletBindingOptionList & inOperand5,
                                                                    const GALGAS_bindingList & inOperand6) :
mAttribute_mControllerKind (inOperand0),
mAttribute_mControllerClassName (inOperand1),
mAttribute_mControllerName (inOperand2),
mAttribute_mIsRootObject (inOperand3),
mAttribute_mControlledObjectName (inOperand4),
mAttribute_mControlledObjectBindingOptionList (inOperand5),
mAttribute_mControllerBindingList (inOperand6) {
}

//---------------------------------------------------------------------------*

GALGAS_controllerList_2E_element GALGAS_controllerList_2E_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_controllerList_2E_element (GALGAS_controllerKind::constructor_simpleController (HERE),
                                           GALGAS_lstring::constructor_default (HERE),
                                           GALGAS_lstring::constructor_default (HERE),
                                           GALGAS_lbool::constructor_default (HERE),
                                           GALGAS_lstring::constructor_default (HERE),
                                           GALGAS_outletBindingOptionList::constructor_emptyList (HERE),
                                           GALGAS_bindingList::constructor_emptyList (HERE)) ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerList_2E_element GALGAS_controllerList_2E_element::constructor_new (const GALGAS_controllerKind & inOperand0,
                                                                                    const GALGAS_lstring & inOperand1,
                                                                                    const GALGAS_lstring & inOperand2,
                                                                                    const GALGAS_lbool & inOperand3,
                                                                                    const GALGAS_lstring & inOperand4,
                                                                                    const GALGAS_outletBindingOptionList & inOperand5,
                                                                                    const GALGAS_bindingList & inOperand6 
                                                                                    COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_controllerList_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid () && inOperand6.isValid ()) {
    result = GALGAS_controllerList_2E_element (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5, inOperand6) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_controllerList_2E_element::objectCompare (const GALGAS_controllerList_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mControllerKind.objectCompare (inOperand.mAttribute_mControllerKind) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mControllerClassName.objectCompare (inOperand.mAttribute_mControllerClassName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mControllerName.objectCompare (inOperand.mAttribute_mControllerName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mIsRootObject.objectCompare (inOperand.mAttribute_mIsRootObject) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mControlledObjectName.objectCompare (inOperand.mAttribute_mControlledObjectName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mControlledObjectBindingOptionList.objectCompare (inOperand.mAttribute_mControlledObjectBindingOptionList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mControllerBindingList.objectCompare (inOperand.mAttribute_mControllerBindingList) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_controllerList_2E_element::isValid (void) const {
  return mAttribute_mControllerKind.isValid () && mAttribute_mControllerClassName.isValid () && mAttribute_mControllerName.isValid () && mAttribute_mIsRootObject.isValid () && mAttribute_mControlledObjectName.isValid () && mAttribute_mControlledObjectBindingOptionList.isValid () && mAttribute_mControllerBindingList.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_controllerList_2E_element::drop (void) {
  mAttribute_mControllerKind.drop () ;
  mAttribute_mControllerClassName.drop () ;
  mAttribute_mControllerName.drop () ;
  mAttribute_mIsRootObject.drop () ;
  mAttribute_mControlledObjectName.drop () ;
  mAttribute_mControlledObjectBindingOptionList.drop () ;
  mAttribute_mControllerBindingList.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_controllerList_2E_element::description (C_String & ioString,
                                                    const PMSInt32 inIndentation) const {
  ioString << "<struct @controllerList.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mControllerKind.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mControllerClassName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mControllerName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mIsRootObject.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mControlledObjectName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mControlledObjectBindingOptionList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mControllerBindingList.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerKind GALGAS_controllerList_2E_element::reader_mControllerKind (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mControllerKind ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_controllerList_2E_element::reader_mControllerClassName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mControllerClassName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_controllerList_2E_element::reader_mControllerName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mControllerName ;
}

//---------------------------------------------------------------------------*

GALGAS_lbool GALGAS_controllerList_2E_element::reader_mIsRootObject (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mIsRootObject ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_controllerList_2E_element::reader_mControlledObjectName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mControlledObjectName ;
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingOptionList GALGAS_controllerList_2E_element::reader_mControlledObjectBindingOptionList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mControlledObjectBindingOptionList ;
}

//---------------------------------------------------------------------------*

GALGAS_bindingList GALGAS_controllerList_2E_element::reader_mControllerBindingList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mControllerBindingList ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                       @controllerList.element type                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_controllerList_2E_element ("controllerList.element",
                                                  NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_controllerList_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_controllerList_2E_element ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_controllerList_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_controllerList_2E_element (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerList_2E_element GALGAS_controllerList_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                  C_Compiler * inCompiler
                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_controllerList_2E_element result ;
  const GALGAS_controllerList_2E_element * p = (const GALGAS_controllerList_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_controllerList_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("controllerList.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_documentDeclarationList_2E_element::GALGAS_documentDeclarationList_2E_element (void) :
mAttribute_mDocumentName (),
mAttribute_mRootEntityName (),
mAttribute_mOutletDeclarationList (),
mAttribute_mControllerList (),
mAttribute_mActionDeclarationList (),
mAttribute_mTransientList (),
mAttribute_mAttributeList () {
}

//---------------------------------------------------------------------------*

GALGAS_documentDeclarationList_2E_element::~ GALGAS_documentDeclarationList_2E_element (void) {
}

//---------------------------------------------------------------------------*

GALGAS_documentDeclarationList_2E_element::GALGAS_documentDeclarationList_2E_element (const GALGAS_lstring & inOperand0,
                                                                                      const GALGAS_lstring & inOperand1,
                                                                                      const GALGAS_outletDeclarationList & inOperand2,
                                                                                      const GALGAS_controllerList & inOperand3,
                                                                                      const GALGAS_lstringlist & inOperand4,
                                                                                      const GALGAS_transientList & inOperand5,
                                                                                      const GALGAS_attributeList & inOperand6) :
mAttribute_mDocumentName (inOperand0),
mAttribute_mRootEntityName (inOperand1),
mAttribute_mOutletDeclarationList (inOperand2),
mAttribute_mControllerList (inOperand3),
mAttribute_mActionDeclarationList (inOperand4),
mAttribute_mTransientList (inOperand5),
mAttribute_mAttributeList (inOperand6) {
}

//---------------------------------------------------------------------------*

GALGAS_documentDeclarationList_2E_element GALGAS_documentDeclarationList_2E_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_documentDeclarationList_2E_element (GALGAS_lstring::constructor_default (HERE),
                                                    GALGAS_lstring::constructor_default (HERE),
                                                    GALGAS_outletDeclarationList::constructor_emptyList (HERE),
                                                    GALGAS_controllerList::constructor_emptyList (HERE),
                                                    GALGAS_lstringlist::constructor_emptyList (HERE),
                                                    GALGAS_transientList::constructor_emptyList (HERE),
                                                    GALGAS_attributeList::constructor_emptyList (HERE)) ;
}

//---------------------------------------------------------------------------*

GALGAS_documentDeclarationList_2E_element GALGAS_documentDeclarationList_2E_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                                                      const GALGAS_lstring & inOperand1,
                                                                                                      const GALGAS_outletDeclarationList & inOperand2,
                                                                                                      const GALGAS_controllerList & inOperand3,
                                                                                                      const GALGAS_lstringlist & inOperand4,
                                                                                                      const GALGAS_transientList & inOperand5,
                                                                                                      const GALGAS_attributeList & inOperand6 
                                                                                                      COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_documentDeclarationList_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid () && inOperand6.isValid ()) {
    result = GALGAS_documentDeclarationList_2E_element (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5, inOperand6) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_documentDeclarationList_2E_element::objectCompare (const GALGAS_documentDeclarationList_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mDocumentName.objectCompare (inOperand.mAttribute_mDocumentName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mRootEntityName.objectCompare (inOperand.mAttribute_mRootEntityName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mOutletDeclarationList.objectCompare (inOperand.mAttribute_mOutletDeclarationList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mControllerList.objectCompare (inOperand.mAttribute_mControllerList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mActionDeclarationList.objectCompare (inOperand.mAttribute_mActionDeclarationList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mTransientList.objectCompare (inOperand.mAttribute_mTransientList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mAttributeList.objectCompare (inOperand.mAttribute_mAttributeList) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_documentDeclarationList_2E_element::isValid (void) const {
  return mAttribute_mDocumentName.isValid () && mAttribute_mRootEntityName.isValid () && mAttribute_mOutletDeclarationList.isValid () && mAttribute_mControllerList.isValid () && mAttribute_mActionDeclarationList.isValid () && mAttribute_mTransientList.isValid () && mAttribute_mAttributeList.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_documentDeclarationList_2E_element::drop (void) {
  mAttribute_mDocumentName.drop () ;
  mAttribute_mRootEntityName.drop () ;
  mAttribute_mOutletDeclarationList.drop () ;
  mAttribute_mControllerList.drop () ;
  mAttribute_mActionDeclarationList.drop () ;
  mAttribute_mTransientList.drop () ;
  mAttribute_mAttributeList.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_documentDeclarationList_2E_element::description (C_String & ioString,
                                                             const PMSInt32 inIndentation) const {
  ioString << "<struct @documentDeclarationList.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mDocumentName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mRootEntityName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mOutletDeclarationList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mControllerList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mActionDeclarationList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mTransientList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mAttributeList.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_documentDeclarationList_2E_element::reader_mDocumentName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mDocumentName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_documentDeclarationList_2E_element::reader_mRootEntityName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mRootEntityName ;
}

//---------------------------------------------------------------------------*

GALGAS_outletDeclarationList GALGAS_documentDeclarationList_2E_element::reader_mOutletDeclarationList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mOutletDeclarationList ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerList GALGAS_documentDeclarationList_2E_element::reader_mControllerList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mControllerList ;
}

//---------------------------------------------------------------------------*

GALGAS_lstringlist GALGAS_documentDeclarationList_2E_element::reader_mActionDeclarationList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mActionDeclarationList ;
}

//---------------------------------------------------------------------------*

GALGAS_transientList GALGAS_documentDeclarationList_2E_element::reader_mTransientList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mTransientList ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeList GALGAS_documentDeclarationList_2E_element::reader_mAttributeList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mAttributeList ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                   @documentDeclarationList.element type                   *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_documentDeclarationList_2E_element ("documentDeclarationList.element",
                                                           NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_documentDeclarationList_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_documentDeclarationList_2E_element ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_documentDeclarationList_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_documentDeclarationList_2E_element (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_documentDeclarationList_2E_element GALGAS_documentDeclarationList_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                                    C_Compiler * inCompiler
                                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_documentDeclarationList_2E_element result ;
  const GALGAS_documentDeclarationList_2E_element * p = (const GALGAS_documentDeclarationList_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_documentDeclarationList_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("documentDeclarationList.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTTypeAndFormatterList_2E_element::GALGAS_attributeASTTypeAndFormatterList_2E_element (void) :
mAttribute_mType (),
mAttribute_mTypeName (),
mAttribute_mRequiredFormatter () {
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTTypeAndFormatterList_2E_element::~ GALGAS_attributeASTTypeAndFormatterList_2E_element (void) {
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTTypeAndFormatterList_2E_element::GALGAS_attributeASTTypeAndFormatterList_2E_element (const GALGAS_attributeASTType & inOperand0,
                                                                                                        const GALGAS_lstring & inOperand1,
                                                                                                        const GALGAS_formatterEnum & inOperand2) :
mAttribute_mType (inOperand0),
mAttribute_mTypeName (inOperand1),
mAttribute_mRequiredFormatter (inOperand2) {
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTTypeAndFormatterList_2E_element GALGAS_attributeASTTypeAndFormatterList_2E_element::constructor_new (const GALGAS_attributeASTType & inOperand0,
                                                                                                                        const GALGAS_lstring & inOperand1,
                                                                                                                        const GALGAS_formatterEnum & inOperand2 
                                                                                                                        COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_attributeASTTypeAndFormatterList_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result = GALGAS_attributeASTTypeAndFormatterList_2E_element (inOperand0, inOperand1, inOperand2) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_attributeASTTypeAndFormatterList_2E_element::objectCompare (const GALGAS_attributeASTTypeAndFormatterList_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mType.objectCompare (inOperand.mAttribute_mType) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mTypeName.objectCompare (inOperand.mAttribute_mTypeName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mRequiredFormatter.objectCompare (inOperand.mAttribute_mRequiredFormatter) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_attributeASTTypeAndFormatterList_2E_element::isValid (void) const {
  return mAttribute_mType.isValid () && mAttribute_mTypeName.isValid () && mAttribute_mRequiredFormatter.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_attributeASTTypeAndFormatterList_2E_element::drop (void) {
  mAttribute_mType.drop () ;
  mAttribute_mTypeName.drop () ;
  mAttribute_mRequiredFormatter.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_attributeASTTypeAndFormatterList_2E_element::description (C_String & ioString,
                                                                      const PMSInt32 inIndentation) const {
  ioString << "<struct @attributeASTTypeAndFormatterList.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mType.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mTypeName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mRequiredFormatter.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTType GALGAS_attributeASTTypeAndFormatterList_2E_element::reader_mType (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mType ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_attributeASTTypeAndFormatterList_2E_element::reader_mTypeName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mTypeName ;
}

//---------------------------------------------------------------------------*

GALGAS_formatterEnum GALGAS_attributeASTTypeAndFormatterList_2E_element::reader_mRequiredFormatter (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mRequiredFormatter ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//              @attributeASTTypeAndFormatterList.element type               *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_attributeASTTypeAndFormatterList_2E_element ("attributeASTTypeAndFormatterList.element",
                                                                    NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_attributeASTTypeAndFormatterList_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_attributeASTTypeAndFormatterList_2E_element ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_attributeASTTypeAndFormatterList_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_attributeASTTypeAndFormatterList_2E_element (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTTypeAndFormatterList_2E_element GALGAS_attributeASTTypeAndFormatterList_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                                                      C_Compiler * inCompiler
                                                                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_attributeASTTypeAndFormatterList_2E_element result ;
  const GALGAS_attributeASTTypeAndFormatterList_2E_element * p = (const GALGAS_attributeASTTypeAndFormatterList_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_attributeASTTypeAndFormatterList_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("attributeASTTypeAndFormatterList.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeAndFormatterList_2E_element::GALGAS_easyBindingTypeAndFormatterList_2E_element (void) :
mAttribute_mType (),
mAttribute_mRequiredFormatter () {
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeAndFormatterList_2E_element::~ GALGAS_easyBindingTypeAndFormatterList_2E_element (void) {
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeAndFormatterList_2E_element::GALGAS_easyBindingTypeAndFormatterList_2E_element (const GALGAS_easyBindingType & inOperand0,
                                                                                                      const GALGAS_formatterEnum & inOperand1) :
mAttribute_mType (inOperand0),
mAttribute_mRequiredFormatter (inOperand1) {
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeAndFormatterList_2E_element GALGAS_easyBindingTypeAndFormatterList_2E_element::constructor_new (const GALGAS_easyBindingType & inOperand0,
                                                                                                                      const GALGAS_formatterEnum & inOperand1 
                                                                                                                      COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_easyBindingTypeAndFormatterList_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result = GALGAS_easyBindingTypeAndFormatterList_2E_element (inOperand0, inOperand1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_easyBindingTypeAndFormatterList_2E_element::objectCompare (const GALGAS_easyBindingTypeAndFormatterList_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mType.objectCompare (inOperand.mAttribute_mType) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mRequiredFormatter.objectCompare (inOperand.mAttribute_mRequiredFormatter) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_easyBindingTypeAndFormatterList_2E_element::isValid (void) const {
  return mAttribute_mType.isValid () && mAttribute_mRequiredFormatter.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_easyBindingTypeAndFormatterList_2E_element::drop (void) {
  mAttribute_mType.drop () ;
  mAttribute_mRequiredFormatter.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_easyBindingTypeAndFormatterList_2E_element::description (C_String & ioString,
                                                                     const PMSInt32 inIndentation) const {
  ioString << "<struct @easyBindingTypeAndFormatterList.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mType.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mRequiredFormatter.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingType GALGAS_easyBindingTypeAndFormatterList_2E_element::reader_mType (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mType ;
}

//---------------------------------------------------------------------------*

GALGAS_formatterEnum GALGAS_easyBindingTypeAndFormatterList_2E_element::reader_mRequiredFormatter (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mRequiredFormatter ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//               @easyBindingTypeAndFormatterList.element type               *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_easyBindingTypeAndFormatterList_2E_element ("easyBindingTypeAndFormatterList.element",
                                                                   NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_easyBindingTypeAndFormatterList_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_easyBindingTypeAndFormatterList_2E_element ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_easyBindingTypeAndFormatterList_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_easyBindingTypeAndFormatterList_2E_element (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeAndFormatterList_2E_element GALGAS_easyBindingTypeAndFormatterList_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                                                    C_Compiler * inCompiler
                                                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_easyBindingTypeAndFormatterList_2E_element result ;
  const GALGAS_easyBindingTypeAndFormatterList_2E_element * p = (const GALGAS_easyBindingTypeAndFormatterList_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_easyBindingTypeAndFormatterList_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("easyBindingTypeAndFormatterList.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeList_2E_element::GALGAS_easyBindingTypeList_2E_element (void) :
mAttribute_mType () {
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeList_2E_element::~ GALGAS_easyBindingTypeList_2E_element (void) {
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeList_2E_element::GALGAS_easyBindingTypeList_2E_element (const GALGAS_easyBindingType & inOperand0) :
mAttribute_mType (inOperand0) {
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeList_2E_element GALGAS_easyBindingTypeList_2E_element::constructor_new (const GALGAS_easyBindingType & inOperand0 
                                                                                              COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_easyBindingTypeList_2E_element result ;
  if (inOperand0.isValid ()) {
    result = GALGAS_easyBindingTypeList_2E_element (inOperand0) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_easyBindingTypeList_2E_element::objectCompare (const GALGAS_easyBindingTypeList_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mType.objectCompare (inOperand.mAttribute_mType) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_easyBindingTypeList_2E_element::isValid (void) const {
  return mAttribute_mType.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_easyBindingTypeList_2E_element::drop (void) {
  mAttribute_mType.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_easyBindingTypeList_2E_element::description (C_String & ioString,
                                                         const PMSInt32 inIndentation) const {
  ioString << "<struct @easyBindingTypeList.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mType.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingType GALGAS_easyBindingTypeList_2E_element::reader_mType (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mType ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                     @easyBindingTypeList.element type                     *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_easyBindingTypeList_2E_element ("easyBindingTypeList.element",
                                                       NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_easyBindingTypeList_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_easyBindingTypeList_2E_element ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_easyBindingTypeList_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_easyBindingTypeList_2E_element (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeList_2E_element GALGAS_easyBindingTypeList_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                            C_Compiler * inCompiler
                                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_easyBindingTypeList_2E_element result ;
  const GALGAS_easyBindingTypeList_2E_element * p = (const GALGAS_easyBindingTypeList_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_easyBindingTypeList_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("easyBindingTypeList.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletClassBindingList_2E_element::GALGAS_outletClassBindingList_2E_element (void) :
mAttribute_mBindingName (),
mAttribute_mAcceptableTypeFormatterList (),
mAttribute_mBindingOptionList () {
}

//---------------------------------------------------------------------------*

GALGAS_outletClassBindingList_2E_element::~ GALGAS_outletClassBindingList_2E_element (void) {
}

//---------------------------------------------------------------------------*

GALGAS_outletClassBindingList_2E_element::GALGAS_outletClassBindingList_2E_element (const GALGAS_lstring & inOperand0,
                                                                                    const GALGAS_attributeASTTypeAndFormatterList & inOperand1,
                                                                                    const GALGAS_bindingOptionList & inOperand2) :
mAttribute_mBindingName (inOperand0),
mAttribute_mAcceptableTypeFormatterList (inOperand1),
mAttribute_mBindingOptionList (inOperand2) {
}

//---------------------------------------------------------------------------*

GALGAS_outletClassBindingList_2E_element GALGAS_outletClassBindingList_2E_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_outletClassBindingList_2E_element (GALGAS_lstring::constructor_default (HERE),
                                                   GALGAS_attributeASTTypeAndFormatterList::constructor_emptyList (HERE),
                                                   GALGAS_bindingOptionList::constructor_emptyList (HERE)) ;
}

//---------------------------------------------------------------------------*

GALGAS_outletClassBindingList_2E_element GALGAS_outletClassBindingList_2E_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                                                    const GALGAS_attributeASTTypeAndFormatterList & inOperand1,
                                                                                                    const GALGAS_bindingOptionList & inOperand2 
                                                                                                    COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_outletClassBindingList_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result = GALGAS_outletClassBindingList_2E_element (inOperand0, inOperand1, inOperand2) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_outletClassBindingList_2E_element::objectCompare (const GALGAS_outletClassBindingList_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mBindingName.objectCompare (inOperand.mAttribute_mBindingName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mAcceptableTypeFormatterList.objectCompare (inOperand.mAttribute_mAcceptableTypeFormatterList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mBindingOptionList.objectCompare (inOperand.mAttribute_mBindingOptionList) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_outletClassBindingList_2E_element::isValid (void) const {
  return mAttribute_mBindingName.isValid () && mAttribute_mAcceptableTypeFormatterList.isValid () && mAttribute_mBindingOptionList.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_outletClassBindingList_2E_element::drop (void) {
  mAttribute_mBindingName.drop () ;
  mAttribute_mAcceptableTypeFormatterList.drop () ;
  mAttribute_mBindingOptionList.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_outletClassBindingList_2E_element::description (C_String & ioString,
                                                            const PMSInt32 inIndentation) const {
  ioString << "<struct @outletClassBindingList.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mBindingName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mAcceptableTypeFormatterList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mBindingOptionList.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_outletClassBindingList_2E_element::reader_mBindingName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mBindingName ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTTypeAndFormatterList GALGAS_outletClassBindingList_2E_element::reader_mAcceptableTypeFormatterList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mAcceptableTypeFormatterList ;
}

//---------------------------------------------------------------------------*

GALGAS_bindingOptionList GALGAS_outletClassBindingList_2E_element::reader_mBindingOptionList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mBindingOptionList ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                   @outletClassBindingList.element type                    *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_outletClassBindingList_2E_element ("outletClassBindingList.element",
                                                          NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_outletClassBindingList_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_outletClassBindingList_2E_element ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_outletClassBindingList_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_outletClassBindingList_2E_element (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletClassBindingList_2E_element GALGAS_outletClassBindingList_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                                  C_Compiler * inCompiler
                                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_outletClassBindingList_2E_element result ;
  const GALGAS_outletClassBindingList_2E_element * p = (const GALGAS_outletClassBindingList_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_outletClassBindingList_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("outletClassBindingList.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bindingOptionList_2E_element::GALGAS_bindingOptionList_2E_element (void) :
mAttribute_mBindingOptionName (),
mAttribute_mAcceptableTypeList () {
}

//---------------------------------------------------------------------------*

GALGAS_bindingOptionList_2E_element::~ GALGAS_bindingOptionList_2E_element (void) {
}

//---------------------------------------------------------------------------*

GALGAS_bindingOptionList_2E_element::GALGAS_bindingOptionList_2E_element (const GALGAS_lstring & inOperand0,
                                                                          const GALGAS_attributeASTTypeList & inOperand1) :
mAttribute_mBindingOptionName (inOperand0),
mAttribute_mAcceptableTypeList (inOperand1) {
}

//---------------------------------------------------------------------------*

GALGAS_bindingOptionList_2E_element GALGAS_bindingOptionList_2E_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_bindingOptionList_2E_element (GALGAS_lstring::constructor_default (HERE),
                                              GALGAS_attributeASTTypeList::constructor_emptyList (HERE)) ;
}

//---------------------------------------------------------------------------*

GALGAS_bindingOptionList_2E_element GALGAS_bindingOptionList_2E_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                                          const GALGAS_attributeASTTypeList & inOperand1 
                                                                                          COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_bindingOptionList_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result = GALGAS_bindingOptionList_2E_element (inOperand0, inOperand1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_bindingOptionList_2E_element::objectCompare (const GALGAS_bindingOptionList_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mBindingOptionName.objectCompare (inOperand.mAttribute_mBindingOptionName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mAcceptableTypeList.objectCompare (inOperand.mAttribute_mAcceptableTypeList) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_bindingOptionList_2E_element::isValid (void) const {
  return mAttribute_mBindingOptionName.isValid () && mAttribute_mAcceptableTypeList.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_bindingOptionList_2E_element::drop (void) {
  mAttribute_mBindingOptionName.drop () ;
  mAttribute_mAcceptableTypeList.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_bindingOptionList_2E_element::description (C_String & ioString,
                                                       const PMSInt32 inIndentation) const {
  ioString << "<struct @bindingOptionList.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mBindingOptionName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mAcceptableTypeList.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_bindingOptionList_2E_element::reader_mBindingOptionName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mBindingOptionName ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTTypeList GALGAS_bindingOptionList_2E_element::reader_mAcceptableTypeList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mAcceptableTypeList ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                      @bindingOptionList.element type                      *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_bindingOptionList_2E_element ("bindingOptionList.element",
                                                     NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_bindingOptionList_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_bindingOptionList_2E_element ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_bindingOptionList_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_bindingOptionList_2E_element (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bindingOptionList_2E_element GALGAS_bindingOptionList_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                        C_Compiler * inCompiler
                                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_bindingOptionList_2E_element result ;
  const GALGAS_bindingOptionList_2E_element * p = (const GALGAS_bindingOptionList_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_bindingOptionList_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("bindingOptionList.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_cursorList_2E_element::GALGAS_cursorList_2E_element (void) :
mAttribute_mCursorName (),
mAttribute_mHotSpotX (),
mAttribute_mHotSpotY () {
}

//---------------------------------------------------------------------------*

GALGAS_cursorList_2E_element::~ GALGAS_cursorList_2E_element (void) {
}

//---------------------------------------------------------------------------*

GALGAS_cursorList_2E_element::GALGAS_cursorList_2E_element (const GALGAS_lstring & inOperand0,
                                                            const GALGAS_ldouble & inOperand1,
                                                            const GALGAS_ldouble & inOperand2) :
mAttribute_mCursorName (inOperand0),
mAttribute_mHotSpotX (inOperand1),
mAttribute_mHotSpotY (inOperand2) {
}

//---------------------------------------------------------------------------*

GALGAS_cursorList_2E_element GALGAS_cursorList_2E_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_cursorList_2E_element (GALGAS_lstring::constructor_default (HERE),
                                       GALGAS_ldouble::constructor_default (HERE),
                                       GALGAS_ldouble::constructor_default (HERE)) ;
}

//---------------------------------------------------------------------------*

GALGAS_cursorList_2E_element GALGAS_cursorList_2E_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                            const GALGAS_ldouble & inOperand1,
                                                                            const GALGAS_ldouble & inOperand2 
                                                                            COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_cursorList_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result = GALGAS_cursorList_2E_element (inOperand0, inOperand1, inOperand2) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_cursorList_2E_element::objectCompare (const GALGAS_cursorList_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mCursorName.objectCompare (inOperand.mAttribute_mCursorName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mHotSpotX.objectCompare (inOperand.mAttribute_mHotSpotX) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mHotSpotY.objectCompare (inOperand.mAttribute_mHotSpotY) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_cursorList_2E_element::isValid (void) const {
  return mAttribute_mCursorName.isValid () && mAttribute_mHotSpotX.isValid () && mAttribute_mHotSpotY.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_cursorList_2E_element::drop (void) {
  mAttribute_mCursorName.drop () ;
  mAttribute_mHotSpotX.drop () ;
  mAttribute_mHotSpotY.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_cursorList_2E_element::description (C_String & ioString,
                                                const PMSInt32 inIndentation) const {
  ioString << "<struct @cursorList.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mCursorName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mHotSpotX.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mHotSpotY.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_cursorList_2E_element::reader_mCursorName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mCursorName ;
}

//---------------------------------------------------------------------------*

GALGAS_ldouble GALGAS_cursorList_2E_element::reader_mHotSpotX (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mHotSpotX ;
}

//---------------------------------------------------------------------------*

GALGAS_ldouble GALGAS_cursorList_2E_element::reader_mHotSpotY (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mHotSpotY ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                         @cursorList.element type                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_cursorList_2E_element ("cursorList.element",
                                              NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_cursorList_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_cursorList_2E_element ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_cursorList_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_cursorList_2E_element (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_cursorList_2E_element GALGAS_cursorList_2E_element::extractObject (const GALGAS_object & inObject,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_cursorList_2E_element result ;
  const GALGAS_cursorList_2E_element * p = (const GALGAS_cursorList_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_cursorList_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("cursorList.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletClassList_2E_element::GALGAS_outletClassList_2E_element (void) :
mAttribute_mOutletClassName (),
mAttribute_mSuperClassName (),
mAttribute_mAdoptedProtocolList (),
mAttribute_mGeneration (),
mAttribute_mOutletClassBindingList (),
mAttribute_mHasTableValueBinding (),
mAttribute_mOptionList () {
}

//---------------------------------------------------------------------------*

GALGAS_outletClassList_2E_element::~ GALGAS_outletClassList_2E_element (void) {
}

//---------------------------------------------------------------------------*

GALGAS_outletClassList_2E_element::GALGAS_outletClassList_2E_element (const GALGAS_lstring & inOperand0,
                                                                      const GALGAS_lstring & inOperand1,
                                                                      const GALGAS_lstringlist & inOperand2,
                                                                      const GALGAS_generationKind & inOperand3,
                                                                      const GALGAS_outletClassBindingList & inOperand4,
                                                                      const GALGAS_bool & inOperand5,
                                                                      const GALGAS_lstringlist & inOperand6) :
mAttribute_mOutletClassName (inOperand0),
mAttribute_mSuperClassName (inOperand1),
mAttribute_mAdoptedProtocolList (inOperand2),
mAttribute_mGeneration (inOperand3),
mAttribute_mOutletClassBindingList (inOperand4),
mAttribute_mHasTableValueBinding (inOperand5),
mAttribute_mOptionList (inOperand6) {
}

//---------------------------------------------------------------------------*

GALGAS_outletClassList_2E_element GALGAS_outletClassList_2E_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_outletClassList_2E_element (GALGAS_lstring::constructor_default (HERE),
                                            GALGAS_lstring::constructor_default (HERE),
                                            GALGAS_lstringlist::constructor_emptyList (HERE),
                                            GALGAS_generationKind::constructor_fullGeneration (HERE),
                                            GALGAS_outletClassBindingList::constructor_emptyList (HERE),
                                            GALGAS_bool::constructor_default (HERE),
                                            GALGAS_lstringlist::constructor_emptyList (HERE)) ;
}

//---------------------------------------------------------------------------*

GALGAS_outletClassList_2E_element GALGAS_outletClassList_2E_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                                      const GALGAS_lstring & inOperand1,
                                                                                      const GALGAS_lstringlist & inOperand2,
                                                                                      const GALGAS_generationKind & inOperand3,
                                                                                      const GALGAS_outletClassBindingList & inOperand4,
                                                                                      const GALGAS_bool & inOperand5,
                                                                                      const GALGAS_lstringlist & inOperand6 
                                                                                      COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_outletClassList_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid () && inOperand6.isValid ()) {
    result = GALGAS_outletClassList_2E_element (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5, inOperand6) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_outletClassList_2E_element::objectCompare (const GALGAS_outletClassList_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mOutletClassName.objectCompare (inOperand.mAttribute_mOutletClassName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mSuperClassName.objectCompare (inOperand.mAttribute_mSuperClassName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mAdoptedProtocolList.objectCompare (inOperand.mAttribute_mAdoptedProtocolList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mGeneration.objectCompare (inOperand.mAttribute_mGeneration) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mOutletClassBindingList.objectCompare (inOperand.mAttribute_mOutletClassBindingList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mHasTableValueBinding.objectCompare (inOperand.mAttribute_mHasTableValueBinding) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mOptionList.objectCompare (inOperand.mAttribute_mOptionList) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_outletClassList_2E_element::isValid (void) const {
  return mAttribute_mOutletClassName.isValid () && mAttribute_mSuperClassName.isValid () && mAttribute_mAdoptedProtocolList.isValid () && mAttribute_mGeneration.isValid () && mAttribute_mOutletClassBindingList.isValid () && mAttribute_mHasTableValueBinding.isValid () && mAttribute_mOptionList.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_outletClassList_2E_element::drop (void) {
  mAttribute_mOutletClassName.drop () ;
  mAttribute_mSuperClassName.drop () ;
  mAttribute_mAdoptedProtocolList.drop () ;
  mAttribute_mGeneration.drop () ;
  mAttribute_mOutletClassBindingList.drop () ;
  mAttribute_mHasTableValueBinding.drop () ;
  mAttribute_mOptionList.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_outletClassList_2E_element::description (C_String & ioString,
                                                     const PMSInt32 inIndentation) const {
  ioString << "<struct @outletClassList.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mOutletClassName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mSuperClassName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mAdoptedProtocolList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mGeneration.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mOutletClassBindingList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mHasTableValueBinding.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mOptionList.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_outletClassList_2E_element::reader_mOutletClassName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mOutletClassName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_outletClassList_2E_element::reader_mSuperClassName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mSuperClassName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstringlist GALGAS_outletClassList_2E_element::reader_mAdoptedProtocolList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mAdoptedProtocolList ;
}

//---------------------------------------------------------------------------*

GALGAS_generationKind GALGAS_outletClassList_2E_element::reader_mGeneration (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mGeneration ;
}

//---------------------------------------------------------------------------*

GALGAS_outletClassBindingList GALGAS_outletClassList_2E_element::reader_mOutletClassBindingList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mOutletClassBindingList ;
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_outletClassList_2E_element::reader_mHasTableValueBinding (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mHasTableValueBinding ;
}

//---------------------------------------------------------------------------*

GALGAS_lstringlist GALGAS_outletClassList_2E_element::reader_mOptionList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mOptionList ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                       @outletClassList.element type                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_outletClassList_2E_element ("outletClassList.element",
                                                   NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_outletClassList_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_outletClassList_2E_element ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_outletClassList_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_outletClassList_2E_element (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletClassList_2E_element GALGAS_outletClassList_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                    C_Compiler * inCompiler
                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_outletClassList_2E_element result ;
  const GALGAS_outletClassList_2E_element * p = (const GALGAS_outletClassList_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_outletClassList_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("outletClassList.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerObservablePropertyList_2E_element::GALGAS_controllerObservablePropertyList_2E_element (void) :
mAttribute_mType (),
mAttribute_mTypeName (),
mAttribute_mPropertyName () {
}

//---------------------------------------------------------------------------*

GALGAS_controllerObservablePropertyList_2E_element::~ GALGAS_controllerObservablePropertyList_2E_element (void) {
}

//---------------------------------------------------------------------------*

GALGAS_controllerObservablePropertyList_2E_element::GALGAS_controllerObservablePropertyList_2E_element (const GALGAS_attributeASTType & inOperand0,
                                                                                                        const GALGAS_lstring & inOperand1,
                                                                                                        const GALGAS_lstring & inOperand2) :
mAttribute_mType (inOperand0),
mAttribute_mTypeName (inOperand1),
mAttribute_mPropertyName (inOperand2) {
}

//---------------------------------------------------------------------------*

GALGAS_controllerObservablePropertyList_2E_element GALGAS_controllerObservablePropertyList_2E_element::constructor_new (const GALGAS_attributeASTType & inOperand0,
                                                                                                                        const GALGAS_lstring & inOperand1,
                                                                                                                        const GALGAS_lstring & inOperand2 
                                                                                                                        COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_controllerObservablePropertyList_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result = GALGAS_controllerObservablePropertyList_2E_element (inOperand0, inOperand1, inOperand2) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_controllerObservablePropertyList_2E_element::objectCompare (const GALGAS_controllerObservablePropertyList_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mType.objectCompare (inOperand.mAttribute_mType) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mTypeName.objectCompare (inOperand.mAttribute_mTypeName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mPropertyName.objectCompare (inOperand.mAttribute_mPropertyName) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_controllerObservablePropertyList_2E_element::isValid (void) const {
  return mAttribute_mType.isValid () && mAttribute_mTypeName.isValid () && mAttribute_mPropertyName.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_controllerObservablePropertyList_2E_element::drop (void) {
  mAttribute_mType.drop () ;
  mAttribute_mTypeName.drop () ;
  mAttribute_mPropertyName.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_controllerObservablePropertyList_2E_element::description (C_String & ioString,
                                                                      const PMSInt32 inIndentation) const {
  ioString << "<struct @controllerObservablePropertyList.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mType.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mTypeName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mPropertyName.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTType GALGAS_controllerObservablePropertyList_2E_element::reader_mType (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mType ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_controllerObservablePropertyList_2E_element::reader_mTypeName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mTypeName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_controllerObservablePropertyList_2E_element::reader_mPropertyName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mPropertyName ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//              @controllerObservablePropertyList.element type               *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_controllerObservablePropertyList_2E_element ("controllerObservablePropertyList.element",
                                                                    NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_controllerObservablePropertyList_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_controllerObservablePropertyList_2E_element ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_controllerObservablePropertyList_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_controllerObservablePropertyList_2E_element (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerObservablePropertyList_2E_element GALGAS_controllerObservablePropertyList_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                                                      C_Compiler * inCompiler
                                                                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_controllerObservablePropertyList_2E_element result ;
  const GALGAS_controllerObservablePropertyList_2E_element * p = (const GALGAS_controllerObservablePropertyList_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_controllerObservablePropertyList_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("controllerObservablePropertyList.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_protocolList_2E_element::GALGAS_protocolList_2E_element (void) :
mAttribute_mIsPredefined (),
mAttribute_mProtocolName () {
}

//---------------------------------------------------------------------------*

GALGAS_protocolList_2E_element::~ GALGAS_protocolList_2E_element (void) {
}

//---------------------------------------------------------------------------*

GALGAS_protocolList_2E_element::GALGAS_protocolList_2E_element (const GALGAS_bool & inOperand0,
                                                                const GALGAS_lstring & inOperand1) :
mAttribute_mIsPredefined (inOperand0),
mAttribute_mProtocolName (inOperand1) {
}

//---------------------------------------------------------------------------*

GALGAS_protocolList_2E_element GALGAS_protocolList_2E_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_protocolList_2E_element (GALGAS_bool::constructor_default (HERE),
                                         GALGAS_lstring::constructor_default (HERE)) ;
}

//---------------------------------------------------------------------------*

GALGAS_protocolList_2E_element GALGAS_protocolList_2E_element::constructor_new (const GALGAS_bool & inOperand0,
                                                                                const GALGAS_lstring & inOperand1 
                                                                                COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_protocolList_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result = GALGAS_protocolList_2E_element (inOperand0, inOperand1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_protocolList_2E_element::objectCompare (const GALGAS_protocolList_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mIsPredefined.objectCompare (inOperand.mAttribute_mIsPredefined) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mProtocolName.objectCompare (inOperand.mAttribute_mProtocolName) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_protocolList_2E_element::isValid (void) const {
  return mAttribute_mIsPredefined.isValid () && mAttribute_mProtocolName.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_protocolList_2E_element::drop (void) {
  mAttribute_mIsPredefined.drop () ;
  mAttribute_mProtocolName.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_protocolList_2E_element::description (C_String & ioString,
                                                  const PMSInt32 inIndentation) const {
  ioString << "<struct @protocolList.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mIsPredefined.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mProtocolName.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_protocolList_2E_element::reader_mIsPredefined (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mIsPredefined ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_protocolList_2E_element::reader_mProtocolName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mProtocolName ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                        @protocolList.element type                         *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_protocolList_2E_element ("protocolList.element",
                                                NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_protocolList_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_protocolList_2E_element ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_protocolList_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_protocolList_2E_element (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_protocolList_2E_element GALGAS_protocolList_2E_element::extractObject (const GALGAS_object & inObject,
                                                                              C_Compiler * inCompiler
                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_protocolList_2E_element result ;
  const GALGAS_protocolList_2E_element * p = (const GALGAS_protocolList_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_protocolList_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("protocolList.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerClassList_2E_element::GALGAS_controllerClassList_2E_element (void) :
mAttribute_mControllerKind (),
mAttribute_mControllerClassName (),
mAttribute_mControlledObjectBindingOptionList (),
mAttribute_mGenerationKind (),
mAttribute_mBindingList (),
mAttribute_mActionDeclarationList (),
mAttribute_mControllerObservablePropertyList () {
}

//---------------------------------------------------------------------------*

GALGAS_controllerClassList_2E_element::~ GALGAS_controllerClassList_2E_element (void) {
}

//---------------------------------------------------------------------------*

GALGAS_controllerClassList_2E_element::GALGAS_controllerClassList_2E_element (const GALGAS_controllerKind & inOperand0,
                                                                              const GALGAS_lstring & inOperand1,
                                                                              const GALGAS_bindingOptionList & inOperand2,
                                                                              const GALGAS_generationKind & inOperand3,
                                                                              const GALGAS_outletClassBindingList & inOperand4,
                                                                              const GALGAS_lstringlist & inOperand5,
                                                                              const GALGAS_controllerObservablePropertyList & inOperand6) :
mAttribute_mControllerKind (inOperand0),
mAttribute_mControllerClassName (inOperand1),
mAttribute_mControlledObjectBindingOptionList (inOperand2),
mAttribute_mGenerationKind (inOperand3),
mAttribute_mBindingList (inOperand4),
mAttribute_mActionDeclarationList (inOperand5),
mAttribute_mControllerObservablePropertyList (inOperand6) {
}

//---------------------------------------------------------------------------*

GALGAS_controllerClassList_2E_element GALGAS_controllerClassList_2E_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_controllerClassList_2E_element (GALGAS_controllerKind::constructor_simpleController (HERE),
                                                GALGAS_lstring::constructor_default (HERE),
                                                GALGAS_bindingOptionList::constructor_emptyList (HERE),
                                                GALGAS_generationKind::constructor_fullGeneration (HERE),
                                                GALGAS_outletClassBindingList::constructor_emptyList (HERE),
                                                GALGAS_lstringlist::constructor_emptyList (HERE),
                                                GALGAS_controllerObservablePropertyList::constructor_emptyList (HERE)) ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerClassList_2E_element GALGAS_controllerClassList_2E_element::constructor_new (const GALGAS_controllerKind & inOperand0,
                                                                                              const GALGAS_lstring & inOperand1,
                                                                                              const GALGAS_bindingOptionList & inOperand2,
                                                                                              const GALGAS_generationKind & inOperand3,
                                                                                              const GALGAS_outletClassBindingList & inOperand4,
                                                                                              const GALGAS_lstringlist & inOperand5,
                                                                                              const GALGAS_controllerObservablePropertyList & inOperand6 
                                                                                              COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_controllerClassList_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid () && inOperand6.isValid ()) {
    result = GALGAS_controllerClassList_2E_element (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5, inOperand6) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_controllerClassList_2E_element::objectCompare (const GALGAS_controllerClassList_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mControllerKind.objectCompare (inOperand.mAttribute_mControllerKind) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mControllerClassName.objectCompare (inOperand.mAttribute_mControllerClassName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mControlledObjectBindingOptionList.objectCompare (inOperand.mAttribute_mControlledObjectBindingOptionList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mGenerationKind.objectCompare (inOperand.mAttribute_mGenerationKind) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mBindingList.objectCompare (inOperand.mAttribute_mBindingList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mActionDeclarationList.objectCompare (inOperand.mAttribute_mActionDeclarationList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mControllerObservablePropertyList.objectCompare (inOperand.mAttribute_mControllerObservablePropertyList) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_controllerClassList_2E_element::isValid (void) const {
  return mAttribute_mControllerKind.isValid () && mAttribute_mControllerClassName.isValid () && mAttribute_mControlledObjectBindingOptionList.isValid () && mAttribute_mGenerationKind.isValid () && mAttribute_mBindingList.isValid () && mAttribute_mActionDeclarationList.isValid () && mAttribute_mControllerObservablePropertyList.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_controllerClassList_2E_element::drop (void) {
  mAttribute_mControllerKind.drop () ;
  mAttribute_mControllerClassName.drop () ;
  mAttribute_mControlledObjectBindingOptionList.drop () ;
  mAttribute_mGenerationKind.drop () ;
  mAttribute_mBindingList.drop () ;
  mAttribute_mActionDeclarationList.drop () ;
  mAttribute_mControllerObservablePropertyList.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_controllerClassList_2E_element::description (C_String & ioString,
                                                         const PMSInt32 inIndentation) const {
  ioString << "<struct @controllerClassList.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mControllerKind.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mControllerClassName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mControlledObjectBindingOptionList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mGenerationKind.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mBindingList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mActionDeclarationList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mControllerObservablePropertyList.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerKind GALGAS_controllerClassList_2E_element::reader_mControllerKind (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mControllerKind ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_controllerClassList_2E_element::reader_mControllerClassName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mControllerClassName ;
}

//---------------------------------------------------------------------------*

GALGAS_bindingOptionList GALGAS_controllerClassList_2E_element::reader_mControlledObjectBindingOptionList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mControlledObjectBindingOptionList ;
}

//---------------------------------------------------------------------------*

GALGAS_generationKind GALGAS_controllerClassList_2E_element::reader_mGenerationKind (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mGenerationKind ;
}

//---------------------------------------------------------------------------*

GALGAS_outletClassBindingList GALGAS_controllerClassList_2E_element::reader_mBindingList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mBindingList ;
}

//---------------------------------------------------------------------------*

GALGAS_lstringlist GALGAS_controllerClassList_2E_element::reader_mActionDeclarationList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mActionDeclarationList ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerObservablePropertyList GALGAS_controllerClassList_2E_element::reader_mControllerObservablePropertyList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mControllerObservablePropertyList ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                     @controllerClassList.element type                     *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_controllerClassList_2E_element ("controllerClassList.element",
                                                       NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_controllerClassList_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_controllerClassList_2E_element ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_controllerClassList_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_controllerClassList_2E_element (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_controllerClassList_2E_element GALGAS_controllerClassList_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                            C_Compiler * inCompiler
                                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_controllerClassList_2E_element result ;
  const GALGAS_controllerClassList_2E_element * p = (const GALGAS_controllerClassList_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_controllerClassList_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("controllerClassList.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_enumList_2E_element::GALGAS_enumList_2E_element (void) :
mAttribute_mEnumTypeName (),
mAttribute_mEnumConstantNameList () {
}

//---------------------------------------------------------------------------*

GALGAS_enumList_2E_element::~ GALGAS_enumList_2E_element (void) {
}

//---------------------------------------------------------------------------*

GALGAS_enumList_2E_element::GALGAS_enumList_2E_element (const GALGAS_lstring & inOperand0,
                                                        const GALGAS_lstringlist & inOperand1) :
mAttribute_mEnumTypeName (inOperand0),
mAttribute_mEnumConstantNameList (inOperand1) {
}

//---------------------------------------------------------------------------*

GALGAS_enumList_2E_element GALGAS_enumList_2E_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_enumList_2E_element (GALGAS_lstring::constructor_default (HERE),
                                     GALGAS_lstringlist::constructor_emptyList (HERE)) ;
}

//---------------------------------------------------------------------------*

GALGAS_enumList_2E_element GALGAS_enumList_2E_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                        const GALGAS_lstringlist & inOperand1 
                                                                        COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_enumList_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result = GALGAS_enumList_2E_element (inOperand0, inOperand1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_enumList_2E_element::objectCompare (const GALGAS_enumList_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mEnumTypeName.objectCompare (inOperand.mAttribute_mEnumTypeName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mEnumConstantNameList.objectCompare (inOperand.mAttribute_mEnumConstantNameList) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_enumList_2E_element::isValid (void) const {
  return mAttribute_mEnumTypeName.isValid () && mAttribute_mEnumConstantNameList.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_enumList_2E_element::drop (void) {
  mAttribute_mEnumTypeName.drop () ;
  mAttribute_mEnumConstantNameList.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_enumList_2E_element::description (C_String & ioString,
                                              const PMSInt32 inIndentation) const {
  ioString << "<struct @enumList.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mEnumTypeName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mEnumConstantNameList.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_enumList_2E_element::reader_mEnumTypeName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mEnumTypeName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstringlist GALGAS_enumList_2E_element::reader_mEnumConstantNameList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mEnumConstantNameList ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                          @enumList.element type                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_enumList_2E_element ("enumList.element",
                                            NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_enumList_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_enumList_2E_element ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_enumList_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_enumList_2E_element (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_enumList_2E_element GALGAS_enumList_2E_element::extractObject (const GALGAS_object & inObject,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_enumList_2E_element result ;
  const GALGAS_enumList_2E_element * p = (const GALGAS_enumList_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_enumList_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("enumList.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_defaultValueList_2E_element::GALGAS_defaultValueList_2E_element (void) :
mAttribute_mDefaultValue () {
}

//---------------------------------------------------------------------------*

GALGAS_defaultValueList_2E_element::~ GALGAS_defaultValueList_2E_element (void) {
}

//---------------------------------------------------------------------------*

GALGAS_defaultValueList_2E_element::GALGAS_defaultValueList_2E_element (const GALGAS_abstractDefaultValue & inOperand0) :
mAttribute_mDefaultValue (inOperand0) {
}

//---------------------------------------------------------------------------*

GALGAS_defaultValueList_2E_element GALGAS_defaultValueList_2E_element::constructor_new (const GALGAS_abstractDefaultValue & inOperand0 
                                                                                        COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_defaultValueList_2E_element result ;
  if (inOperand0.isValid ()) {
    result = GALGAS_defaultValueList_2E_element (inOperand0) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_defaultValueList_2E_element::objectCompare (const GALGAS_defaultValueList_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mDefaultValue.objectCompare (inOperand.mAttribute_mDefaultValue) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_defaultValueList_2E_element::isValid (void) const {
  return mAttribute_mDefaultValue.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_defaultValueList_2E_element::drop (void) {
  mAttribute_mDefaultValue.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_defaultValueList_2E_element::description (C_String & ioString,
                                                      const PMSInt32 inIndentation) const {
  ioString << "<struct @defaultValueList.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mDefaultValue.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_abstractDefaultValue GALGAS_defaultValueList_2E_element::reader_mDefaultValue (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mDefaultValue ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                      @defaultValueList.element type                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_defaultValueList_2E_element ("defaultValueList.element",
                                                    NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_defaultValueList_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_defaultValueList_2E_element ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_defaultValueList_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_defaultValueList_2E_element (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_defaultValueList_2E_element GALGAS_defaultValueList_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_defaultValueList_2E_element result ;
  const GALGAS_defaultValueList_2E_element * p = (const GALGAS_defaultValueList_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_defaultValueList_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("defaultValueList.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_structFieldASTList_2E_element::GALGAS_structFieldASTList_2E_element (void) :
mAttribute_mFieldType (),
mAttribute_mFieldTypeName (),
mAttribute_mFieldName () {
}

//---------------------------------------------------------------------------*

GALGAS_structFieldASTList_2E_element::~ GALGAS_structFieldASTList_2E_element (void) {
}

//---------------------------------------------------------------------------*

GALGAS_structFieldASTList_2E_element::GALGAS_structFieldASTList_2E_element (const GALGAS_attributeASTType & inOperand0,
                                                                            const GALGAS_lstring & inOperand1,
                                                                            const GALGAS_lstring & inOperand2) :
mAttribute_mFieldType (inOperand0),
mAttribute_mFieldTypeName (inOperand1),
mAttribute_mFieldName (inOperand2) {
}

//---------------------------------------------------------------------------*

GALGAS_structFieldASTList_2E_element GALGAS_structFieldASTList_2E_element::constructor_new (const GALGAS_attributeASTType & inOperand0,
                                                                                            const GALGAS_lstring & inOperand1,
                                                                                            const GALGAS_lstring & inOperand2 
                                                                                            COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_structFieldASTList_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result = GALGAS_structFieldASTList_2E_element (inOperand0, inOperand1, inOperand2) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_structFieldASTList_2E_element::objectCompare (const GALGAS_structFieldASTList_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mFieldType.objectCompare (inOperand.mAttribute_mFieldType) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mFieldTypeName.objectCompare (inOperand.mAttribute_mFieldTypeName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mFieldName.objectCompare (inOperand.mAttribute_mFieldName) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_structFieldASTList_2E_element::isValid (void) const {
  return mAttribute_mFieldType.isValid () && mAttribute_mFieldTypeName.isValid () && mAttribute_mFieldName.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_structFieldASTList_2E_element::drop (void) {
  mAttribute_mFieldType.drop () ;
  mAttribute_mFieldTypeName.drop () ;
  mAttribute_mFieldName.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_structFieldASTList_2E_element::description (C_String & ioString,
                                                        const PMSInt32 inIndentation) const {
  ioString << "<struct @structFieldASTList.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mFieldType.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mFieldTypeName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mFieldName.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeASTType GALGAS_structFieldASTList_2E_element::reader_mFieldType (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mFieldType ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_structFieldASTList_2E_element::reader_mFieldTypeName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mFieldTypeName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_structFieldASTList_2E_element::reader_mFieldName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mFieldName ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                     @structFieldASTList.element type                      *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_structFieldASTList_2E_element ("structFieldASTList.element",
                                                      NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_structFieldASTList_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_structFieldASTList_2E_element ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_structFieldASTList_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_structFieldASTList_2E_element (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_structFieldASTList_2E_element GALGAS_structFieldASTList_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                          C_Compiler * inCompiler
                                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_structFieldASTList_2E_element result ;
  const GALGAS_structFieldASTList_2E_element * p = (const GALGAS_structFieldASTList_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_structFieldASTList_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("structFieldASTList.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_structTypeList_2E_element::GALGAS_structTypeList_2E_element (void) :
mAttribute_mStructTypeName (),
mAttribute_mFieldList () {
}

//---------------------------------------------------------------------------*

GALGAS_structTypeList_2E_element::~ GALGAS_structTypeList_2E_element (void) {
}

//---------------------------------------------------------------------------*

GALGAS_structTypeList_2E_element::GALGAS_structTypeList_2E_element (const GALGAS_lstring & inOperand0,
                                                                    const GALGAS_structFieldASTList & inOperand1) :
mAttribute_mStructTypeName (inOperand0),
mAttribute_mFieldList (inOperand1) {
}

//---------------------------------------------------------------------------*

GALGAS_structTypeList_2E_element GALGAS_structTypeList_2E_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_structTypeList_2E_element (GALGAS_lstring::constructor_default (HERE),
                                           GALGAS_structFieldASTList::constructor_emptyList (HERE)) ;
}

//---------------------------------------------------------------------------*

GALGAS_structTypeList_2E_element GALGAS_structTypeList_2E_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                                    const GALGAS_structFieldASTList & inOperand1 
                                                                                    COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_structTypeList_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result = GALGAS_structTypeList_2E_element (inOperand0, inOperand1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_structTypeList_2E_element::objectCompare (const GALGAS_structTypeList_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mStructTypeName.objectCompare (inOperand.mAttribute_mStructTypeName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mFieldList.objectCompare (inOperand.mAttribute_mFieldList) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_structTypeList_2E_element::isValid (void) const {
  return mAttribute_mStructTypeName.isValid () && mAttribute_mFieldList.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_structTypeList_2E_element::drop (void) {
  mAttribute_mStructTypeName.drop () ;
  mAttribute_mFieldList.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_structTypeList_2E_element::description (C_String & ioString,
                                                    const PMSInt32 inIndentation) const {
  ioString << "<struct @structTypeList.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mStructTypeName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mFieldList.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_structTypeList_2E_element::reader_mStructTypeName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mStructTypeName ;
}

//---------------------------------------------------------------------------*

GALGAS_structFieldASTList GALGAS_structTypeList_2E_element::reader_mFieldList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mFieldList ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                       @structTypeList.element type                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_structTypeList_2E_element ("structTypeList.element",
                                                  NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_structTypeList_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_structTypeList_2E_element ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_structTypeList_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_structTypeList_2E_element (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_structTypeList_2E_element GALGAS_structTypeList_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                  C_Compiler * inCompiler
                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_structTypeList_2E_element result ;
  const GALGAS_structTypeList_2E_element * p = (const GALGAS_structTypeList_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_structTypeList_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("structTypeList.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


