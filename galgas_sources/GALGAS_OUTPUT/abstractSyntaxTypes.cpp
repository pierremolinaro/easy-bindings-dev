//-----------------------------------------------------------------------------*
//                                                                             *
//                       File 'abstractSyntaxTypes.cpp'                        *
//                         Generated by version 2.7.0                          *
//                       august 6th, 2014, at 23h7'31"                         *
//                                                                             *
//-----------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "galgas2/C_Compiler.h"
#include "galgas2/C_galgas_io.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "utilities/C_PrologueEpilogue.h"

//-----------------------------------------------------------------------------*

#include "abstractSyntaxTypes.h"


//-----------------------------------------------------------------------------*
//                                                                             *
//               Class for element of '@astDeclarationList' list               *
//                                                                             *
//-----------------------------------------------------------------------------*

class cCollectionElement_astDeclarationList : public cCollectionElement {
  public : GALGAS_astDeclarationList_2D_element mObject ;

//--- Constructor
  public : cCollectionElement_astDeclarationList (const GALGAS_astDeclaration & in_mDeclaration
                                                  COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const int32_t inIndentation) const ;
} ;

//-----------------------------------------------------------------------------*

cCollectionElement_astDeclarationList::cCollectionElement_astDeclarationList (const GALGAS_astDeclaration & in_mDeclaration
                                                                              COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mDeclaration) {
}

//-----------------------------------------------------------------------------*

bool cCollectionElement_astDeclarationList::isValid (void) const {
  return mObject.isValid () ;
}

//-----------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_astDeclarationList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_astDeclarationList (mObject.mAttribute_mDeclaration COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cCollectionElement_astDeclarationList::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mDeclaration" ":" ;
  mObject.mAttribute_mDeclaration.description (ioString, inIndentation) ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_astDeclarationList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_astDeclarationList * operand = (cCollectionElement_astDeclarationList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_astDeclarationList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//-----------------------------------------------------------------------------*

GALGAS_astDeclarationList::GALGAS_astDeclarationList (void) :
AC_GALGAS_list () {
}

//-----------------------------------------------------------------------------*

GALGAS_astDeclarationList::GALGAS_astDeclarationList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_astDeclarationList GALGAS_astDeclarationList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_astDeclarationList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_astDeclarationList GALGAS_astDeclarationList::constructor_listWithValue (const GALGAS_astDeclaration & inOperand0
                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_astDeclarationList result ;
  if (inOperand0.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_astDeclarationList::makeAttributesFromObjects (attributes, inOperand0 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_astDeclarationList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                           const GALGAS_astDeclaration & in_mDeclaration
                                                           COMMA_LOCATION_ARGS) {
  cCollectionElement_astDeclarationList * p = NULL ;
  macroMyNew (p, cCollectionElement_astDeclarationList (in_mDeclaration COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//-----------------------------------------------------------------------------*

void GALGAS_astDeclarationList::addAssign_operation (const GALGAS_astDeclaration & inOperand0
                                                     COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_astDeclarationList (inOperand0 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_astDeclarationList::modifier_insertAtIndex (const GALGAS_astDeclaration inOperand0,
                                                        const GALGAS_uint inInsertionIndex,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) {
  if (isValid () && inInsertionIndex.isValid () && inOperand0.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_astDeclarationList (inOperand0 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObjectAtIndex (attributes, inInsertionIndex.uintValue (), inCompiler COMMA_THERE) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_astDeclarationList::modifier_removeAtIndex (GALGAS_astDeclaration & outOperand0,
                                                        const GALGAS_uint inRemoveIndex,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) {
  if (isValid () && inRemoveIndex.isValid ()) {
    capCollectionElement attributes ;
    removeObjectAtIndex (attributes, inRemoveIndex.uintValue (), inCompiler COMMA_THERE) ;
    cCollectionElement_astDeclarationList * p = (cCollectionElement_astDeclarationList *) attributes.ptr () ;
    if (NULL == p) {
      outOperand0.drop () ;
    }else{
      macroValidSharedObject (p, cCollectionElement_astDeclarationList) ;
      outOperand0 = p->mObject.mAttribute_mDeclaration ;
    }
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_astDeclarationList::modifier_popFirst (GALGAS_astDeclaration & outOperand0,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_astDeclarationList * p = (cCollectionElement_astDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_astDeclarationList) ;
    outOperand0 = p->mObject.mAttribute_mDeclaration ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_astDeclarationList::modifier_popLast (GALGAS_astDeclaration & outOperand0,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_astDeclarationList * p = (cCollectionElement_astDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_astDeclarationList) ;
    outOperand0 = p->mObject.mAttribute_mDeclaration ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_astDeclarationList::method_first (GALGAS_astDeclaration & outOperand0,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_astDeclarationList * p = (cCollectionElement_astDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_astDeclarationList) ;
    outOperand0 = p->mObject.mAttribute_mDeclaration ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_astDeclarationList::method_last (GALGAS_astDeclaration & outOperand0,
                                             C_Compiler * inCompiler
                                             COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_astDeclarationList * p = (cCollectionElement_astDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_astDeclarationList) ;
    outOperand0 = p->mObject.mAttribute_mDeclaration ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_astDeclarationList GALGAS_astDeclarationList::operator_concat (const GALGAS_astDeclarationList & inOperand
                                                                      COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_astDeclarationList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_astDeclarationList GALGAS_astDeclarationList::add_operation (const GALGAS_astDeclarationList & inOperand,
                                                                    C_Compiler * /* inCompiler */
                                                                    COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_astDeclarationList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_astDeclarationList GALGAS_astDeclarationList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                              C_Compiler * inCompiler
                                                                              COMMA_LOCATION_ARGS) const {
  GALGAS_astDeclarationList result = GALGAS_astDeclarationList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_astDeclarationList GALGAS_astDeclarationList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                              C_Compiler * inCompiler
                                                                              COMMA_LOCATION_ARGS) const {
  GALGAS_astDeclarationList result = GALGAS_astDeclarationList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_astDeclarationList::dotAssign_operation (const GALGAS_astDeclarationList inOperand
                                                     COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//-----------------------------------------------------------------------------*

GALGAS_astDeclaration GALGAS_astDeclarationList::reader_mDeclarationAtIndex (const GALGAS_uint & inIndex,
                                                                             C_Compiler * inCompiler
                                                                             COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_astDeclarationList * p = (cCollectionElement_astDeclarationList *) attributes.ptr () ;
  GALGAS_astDeclaration result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_astDeclarationList) ;
    result = p->mObject.mAttribute_mDeclaration ;
  }
  return result ;
}



//-----------------------------------------------------------------------------*

cEnumerator_astDeclarationList::cEnumerator_astDeclarationList (const GALGAS_astDeclarationList & inEnumeratedObject,
                                                                const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_astDeclarationList_2D_element cEnumerator_astDeclarationList::current (LOCATION_ARGS) const {
  const cCollectionElement_astDeclarationList * p = (const cCollectionElement_astDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_astDeclarationList) ;
  return p->mObject ;
}


//-----------------------------------------------------------------------------*

GALGAS_astDeclaration cEnumerator_astDeclarationList::current_mDeclaration (LOCATION_ARGS) const {
  const cCollectionElement_astDeclarationList * p = (const cCollectionElement_astDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_astDeclarationList) ;
  return p->mObject.mAttribute_mDeclaration ;
}




//-----------------------------------------------------------------------------*
//                                                                             *
//                          @astDeclarationList type                           *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_astDeclarationList ("astDeclarationList",
                                           NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_astDeclarationList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_astDeclarationList ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_astDeclarationList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_astDeclarationList (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_astDeclarationList GALGAS_astDeclarationList::extractObject (const GALGAS_object & inObject,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_astDeclarationList result ;
  const GALGAS_astDeclarationList * p = (const GALGAS_astDeclarationList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_astDeclarationList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("astDeclarationList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//                 Class for element of '@attributeList' list                  *
//                                                                             *
//-----------------------------------------------------------------------------*

class cCollectionElement_attributeList : public cCollectionElement {
  public : GALGAS_attributeList_2D_element mObject ;

//--- Constructor
  public : cCollectionElement_attributeList (const GALGAS_lstring & in_mAttributeTypeName,
                                             const GALGAS_lstring & in_mAttributeName,
                                             const GALGAS_abstractDefaultValue & in_mDefaultValue
                                             COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const int32_t inIndentation) const ;
} ;

//-----------------------------------------------------------------------------*

cCollectionElement_attributeList::cCollectionElement_attributeList (const GALGAS_lstring & in_mAttributeTypeName,
                                                                    const GALGAS_lstring & in_mAttributeName,
                                                                    const GALGAS_abstractDefaultValue & in_mDefaultValue
                                                                    COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mAttributeTypeName, in_mAttributeName, in_mDefaultValue) {
}

//-----------------------------------------------------------------------------*

bool cCollectionElement_attributeList::isValid (void) const {
  return mObject.isValid () ;
}

//-----------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_attributeList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_attributeList (mObject.mAttribute_mAttributeTypeName, mObject.mAttribute_mAttributeName, mObject.mAttribute_mDefaultValue COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cCollectionElement_attributeList::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mAttributeTypeName" ":" ;
  mObject.mAttribute_mAttributeTypeName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mAttributeName" ":" ;
  mObject.mAttribute_mAttributeName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mDefaultValue" ":" ;
  mObject.mAttribute_mDefaultValue.description (ioString, inIndentation) ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_attributeList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_attributeList * operand = (cCollectionElement_attributeList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_attributeList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeList::GALGAS_attributeList (void) :
AC_GALGAS_list () {
}

//-----------------------------------------------------------------------------*

GALGAS_attributeList::GALGAS_attributeList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_attributeList GALGAS_attributeList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_attributeList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeList GALGAS_attributeList::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                                      const GALGAS_lstring & inOperand1,
                                                                      const GALGAS_abstractDefaultValue & inOperand2
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_attributeList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_attributeList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_attributeList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                      const GALGAS_lstring & in_mAttributeTypeName,
                                                      const GALGAS_lstring & in_mAttributeName,
                                                      const GALGAS_abstractDefaultValue & in_mDefaultValue
                                                      COMMA_LOCATION_ARGS) {
  cCollectionElement_attributeList * p = NULL ;
  macroMyNew (p, cCollectionElement_attributeList (in_mAttributeTypeName,
                                                   in_mAttributeName,
                                                   in_mDefaultValue COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//-----------------------------------------------------------------------------*

void GALGAS_attributeList::addAssign_operation (const GALGAS_lstring & inOperand0,
                                                const GALGAS_lstring & inOperand1,
                                                const GALGAS_abstractDefaultValue & inOperand2
                                                COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_attributeList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_attributeList::modifier_insertAtIndex (const GALGAS_lstring inOperand0,
                                                   const GALGAS_lstring inOperand1,
                                                   const GALGAS_abstractDefaultValue inOperand2,
                                                   const GALGAS_uint inInsertionIndex,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) {
  if (isValid () && inInsertionIndex.isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_attributeList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObjectAtIndex (attributes, inInsertionIndex.uintValue (), inCompiler COMMA_THERE) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_attributeList::modifier_removeAtIndex (GALGAS_lstring & outOperand0,
                                                   GALGAS_lstring & outOperand1,
                                                   GALGAS_abstractDefaultValue & outOperand2,
                                                   const GALGAS_uint inRemoveIndex,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) {
  if (isValid () && inRemoveIndex.isValid ()) {
    capCollectionElement attributes ;
    removeObjectAtIndex (attributes, inRemoveIndex.uintValue (), inCompiler COMMA_THERE) ;
    cCollectionElement_attributeList * p = (cCollectionElement_attributeList *) attributes.ptr () ;
    if (NULL == p) {
      outOperand0.drop () ;
      outOperand1.drop () ;
      outOperand2.drop () ;
    }else{
      macroValidSharedObject (p, cCollectionElement_attributeList) ;
      outOperand0 = p->mObject.mAttribute_mAttributeTypeName ;
      outOperand1 = p->mObject.mAttribute_mAttributeName ;
      outOperand2 = p->mObject.mAttribute_mDefaultValue ;
    }
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_attributeList::modifier_popFirst (GALGAS_lstring & outOperand0,
                                              GALGAS_lstring & outOperand1,
                                              GALGAS_abstractDefaultValue & outOperand2,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_attributeList * p = (cCollectionElement_attributeList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_attributeList) ;
    outOperand0 = p->mObject.mAttribute_mAttributeTypeName ;
    outOperand1 = p->mObject.mAttribute_mAttributeName ;
    outOperand2 = p->mObject.mAttribute_mDefaultValue ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_attributeList::modifier_popLast (GALGAS_lstring & outOperand0,
                                             GALGAS_lstring & outOperand1,
                                             GALGAS_abstractDefaultValue & outOperand2,
                                             C_Compiler * inCompiler
                                             COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_attributeList * p = (cCollectionElement_attributeList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_attributeList) ;
    outOperand0 = p->mObject.mAttribute_mAttributeTypeName ;
    outOperand1 = p->mObject.mAttribute_mAttributeName ;
    outOperand2 = p->mObject.mAttribute_mDefaultValue ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_attributeList::method_first (GALGAS_lstring & outOperand0,
                                         GALGAS_lstring & outOperand1,
                                         GALGAS_abstractDefaultValue & outOperand2,
                                         C_Compiler * inCompiler
                                         COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_attributeList * p = (cCollectionElement_attributeList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_attributeList) ;
    outOperand0 = p->mObject.mAttribute_mAttributeTypeName ;
    outOperand1 = p->mObject.mAttribute_mAttributeName ;
    outOperand2 = p->mObject.mAttribute_mDefaultValue ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_attributeList::method_last (GALGAS_lstring & outOperand0,
                                        GALGAS_lstring & outOperand1,
                                        GALGAS_abstractDefaultValue & outOperand2,
                                        C_Compiler * inCompiler
                                        COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_attributeList * p = (cCollectionElement_attributeList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_attributeList) ;
    outOperand0 = p->mObject.mAttribute_mAttributeTypeName ;
    outOperand1 = p->mObject.mAttribute_mAttributeName ;
    outOperand2 = p->mObject.mAttribute_mDefaultValue ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_attributeList GALGAS_attributeList::operator_concat (const GALGAS_attributeList & inOperand
                                                            COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_attributeList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeList GALGAS_attributeList::add_operation (const GALGAS_attributeList & inOperand,
                                                          C_Compiler * /* inCompiler */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_attributeList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeList GALGAS_attributeList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) const {
  GALGAS_attributeList result = GALGAS_attributeList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeList GALGAS_attributeList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) const {
  GALGAS_attributeList result = GALGAS_attributeList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_attributeList::dotAssign_operation (const GALGAS_attributeList inOperand
                                                COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_attributeList::reader_mAttributeTypeNameAtIndex (const GALGAS_uint & inIndex,
                                                                       C_Compiler * inCompiler
                                                                       COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_attributeList * p = (cCollectionElement_attributeList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_attributeList) ;
    result = p->mObject.mAttribute_mAttributeTypeName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_attributeList::reader_mAttributeNameAtIndex (const GALGAS_uint & inIndex,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_attributeList * p = (cCollectionElement_attributeList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_attributeList) ;
    result = p->mObject.mAttribute_mAttributeName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_abstractDefaultValue GALGAS_attributeList::reader_mDefaultValueAtIndex (const GALGAS_uint & inIndex,
                                                                               C_Compiler * inCompiler
                                                                               COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_attributeList * p = (cCollectionElement_attributeList *) attributes.ptr () ;
  GALGAS_abstractDefaultValue result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_attributeList) ;
    result = p->mObject.mAttribute_mDefaultValue ;
  }
  return result ;
}



//-----------------------------------------------------------------------------*

cEnumerator_attributeList::cEnumerator_attributeList (const GALGAS_attributeList & inEnumeratedObject,
                                                      const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeList_2D_element cEnumerator_attributeList::current (LOCATION_ARGS) const {
  const cCollectionElement_attributeList * p = (const cCollectionElement_attributeList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_attributeList) ;
  return p->mObject ;
}


//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_attributeList::current_mAttributeTypeName (LOCATION_ARGS) const {
  const cCollectionElement_attributeList * p = (const cCollectionElement_attributeList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_attributeList) ;
  return p->mObject.mAttribute_mAttributeTypeName ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_attributeList::current_mAttributeName (LOCATION_ARGS) const {
  const cCollectionElement_attributeList * p = (const cCollectionElement_attributeList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_attributeList) ;
  return p->mObject.mAttribute_mAttributeName ;
}

//-----------------------------------------------------------------------------*

GALGAS_abstractDefaultValue cEnumerator_attributeList::current_mDefaultValue (LOCATION_ARGS) const {
  const cCollectionElement_attributeList * p = (const cCollectionElement_attributeList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_attributeList) ;
  return p->mObject.mAttribute_mDefaultValue ;
}




//-----------------------------------------------------------------------------*
//                                                                             *
//                             @attributeList type                             *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_attributeList ("attributeList",
                                      NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_attributeList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_attributeList ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_attributeList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_attributeList (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeList GALGAS_attributeList::extractObject (const GALGAS_object & inObject,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) {
  GALGAS_attributeList result ;
  const GALGAS_attributeList * p = (const GALGAS_attributeList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_attributeList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("attributeList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_deleteRuleEnum::GALGAS_deleteRuleEnum (void) :
mEnum (kNotBuilt) {
}

//-----------------------------------------------------------------------------*

GALGAS_deleteRuleEnum GALGAS_deleteRuleEnum::constructor_nullifyDeleteRule (UNUSED_LOCATION_ARGS) {
  GALGAS_deleteRuleEnum result ;
  result.mEnum = kEnum_nullifyDeleteRule ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_deleteRuleEnum GALGAS_deleteRuleEnum::constructor_cascadeDeleteRule (UNUSED_LOCATION_ARGS) {
  GALGAS_deleteRuleEnum result ;
  result.mEnum = kEnum_cascadeDeleteRule ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_deleteRuleEnum GALGAS_deleteRuleEnum::constructor_denyDeleteRule (UNUSED_LOCATION_ARGS) {
  GALGAS_deleteRuleEnum result ;
  result.mEnum = kEnum_denyDeleteRule ;
  return result ;
}

//-----------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_deleteRuleEnum [4] = {
  "(not built)",
  "nullifyDeleteRule",
  "cascadeDeleteRule",
  "denyDeleteRule"
} ;

//-----------------------------------------------------------------------------*

void GALGAS_deleteRuleEnum::description (C_String & ioString,
                                         const int32_t /* inIndentation */) const {
  ioString << "<enum @deleteRuleEnum: " << gEnumNameArrayFor_deleteRuleEnum [mEnum] << ">" ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_deleteRuleEnum::objectCompare (const GALGAS_deleteRuleEnum & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = kOperandEqual ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//                            @deleteRuleEnum type                             *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_deleteRuleEnum ("deleteRuleEnum",
                                       NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_deleteRuleEnum::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_deleteRuleEnum ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_deleteRuleEnum::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_deleteRuleEnum (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_deleteRuleEnum GALGAS_deleteRuleEnum::extractObject (const GALGAS_object & inObject,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) {
  GALGAS_deleteRuleEnum result ;
  const GALGAS_deleteRuleEnum * p = (const GALGAS_deleteRuleEnum *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_deleteRuleEnum *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("deleteRuleEnum", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//                Class for element of '@relationshipList' list                *
//                                                                             *
//-----------------------------------------------------------------------------*

class cCollectionElement_relationshipList : public cCollectionElement {
  public : GALGAS_relationshipList_2D_element mObject ;

//--- Constructor
  public : cCollectionElement_relationshipList (const GALGAS_bool & in_mIsToMany,
                                                const GALGAS_lstring & in_mDestinationEntityName,
                                                const GALGAS_lstring & in_mRelationshipName,
                                                const GALGAS_lstring & in_mInverseRelationshipName,
                                                const GALGAS_bool & in_mInverseRelationIsToMany,
                                                const GALGAS_deleteRuleEnum & in_mDeleteRule
                                                COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const int32_t inIndentation) const ;
} ;

//-----------------------------------------------------------------------------*

cCollectionElement_relationshipList::cCollectionElement_relationshipList (const GALGAS_bool & in_mIsToMany,
                                                                          const GALGAS_lstring & in_mDestinationEntityName,
                                                                          const GALGAS_lstring & in_mRelationshipName,
                                                                          const GALGAS_lstring & in_mInverseRelationshipName,
                                                                          const GALGAS_bool & in_mInverseRelationIsToMany,
                                                                          const GALGAS_deleteRuleEnum & in_mDeleteRule
                                                                          COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mIsToMany, in_mDestinationEntityName, in_mRelationshipName, in_mInverseRelationshipName, in_mInverseRelationIsToMany, in_mDeleteRule) {
}

//-----------------------------------------------------------------------------*

bool cCollectionElement_relationshipList::isValid (void) const {
  return mObject.isValid () ;
}

//-----------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_relationshipList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_relationshipList (mObject.mAttribute_mIsToMany, mObject.mAttribute_mDestinationEntityName, mObject.mAttribute_mRelationshipName, mObject.mAttribute_mInverseRelationshipName, mObject.mAttribute_mInverseRelationIsToMany, mObject.mAttribute_mDeleteRule COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cCollectionElement_relationshipList::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mIsToMany" ":" ;
  mObject.mAttribute_mIsToMany.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mDestinationEntityName" ":" ;
  mObject.mAttribute_mDestinationEntityName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mRelationshipName" ":" ;
  mObject.mAttribute_mRelationshipName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mInverseRelationshipName" ":" ;
  mObject.mAttribute_mInverseRelationshipName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mInverseRelationIsToMany" ":" ;
  mObject.mAttribute_mInverseRelationIsToMany.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mDeleteRule" ":" ;
  mObject.mAttribute_mDeleteRule.description (ioString, inIndentation) ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_relationshipList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_relationshipList * operand = (cCollectionElement_relationshipList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_relationshipList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//-----------------------------------------------------------------------------*

GALGAS_relationshipList::GALGAS_relationshipList (void) :
AC_GALGAS_list () {
}

//-----------------------------------------------------------------------------*

GALGAS_relationshipList::GALGAS_relationshipList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_relationshipList GALGAS_relationshipList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_relationshipList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_relationshipList GALGAS_relationshipList::constructor_listWithValue (const GALGAS_bool & inOperand0,
                                                                            const GALGAS_lstring & inOperand1,
                                                                            const GALGAS_lstring & inOperand2,
                                                                            const GALGAS_lstring & inOperand3,
                                                                            const GALGAS_bool & inOperand4,
                                                                            const GALGAS_deleteRuleEnum & inOperand5
                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_relationshipList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_relationshipList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_relationshipList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                         const GALGAS_bool & in_mIsToMany,
                                                         const GALGAS_lstring & in_mDestinationEntityName,
                                                         const GALGAS_lstring & in_mRelationshipName,
                                                         const GALGAS_lstring & in_mInverseRelationshipName,
                                                         const GALGAS_bool & in_mInverseRelationIsToMany,
                                                         const GALGAS_deleteRuleEnum & in_mDeleteRule
                                                         COMMA_LOCATION_ARGS) {
  cCollectionElement_relationshipList * p = NULL ;
  macroMyNew (p, cCollectionElement_relationshipList (in_mIsToMany,
                                                      in_mDestinationEntityName,
                                                      in_mRelationshipName,
                                                      in_mInverseRelationshipName,
                                                      in_mInverseRelationIsToMany,
                                                      in_mDeleteRule COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//-----------------------------------------------------------------------------*

void GALGAS_relationshipList::addAssign_operation (const GALGAS_bool & inOperand0,
                                                   const GALGAS_lstring & inOperand1,
                                                   const GALGAS_lstring & inOperand2,
                                                   const GALGAS_lstring & inOperand3,
                                                   const GALGAS_bool & inOperand4,
                                                   const GALGAS_deleteRuleEnum & inOperand5
                                                   COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_relationshipList (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_relationshipList::modifier_insertAtIndex (const GALGAS_bool inOperand0,
                                                      const GALGAS_lstring inOperand1,
                                                      const GALGAS_lstring inOperand2,
                                                      const GALGAS_lstring inOperand3,
                                                      const GALGAS_bool inOperand4,
                                                      const GALGAS_deleteRuleEnum inOperand5,
                                                      const GALGAS_uint inInsertionIndex,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) {
  if (isValid () && inInsertionIndex.isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_relationshipList (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObjectAtIndex (attributes, inInsertionIndex.uintValue (), inCompiler COMMA_THERE) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_relationshipList::modifier_removeAtIndex (GALGAS_bool & outOperand0,
                                                      GALGAS_lstring & outOperand1,
                                                      GALGAS_lstring & outOperand2,
                                                      GALGAS_lstring & outOperand3,
                                                      GALGAS_bool & outOperand4,
                                                      GALGAS_deleteRuleEnum & outOperand5,
                                                      const GALGAS_uint inRemoveIndex,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) {
  if (isValid () && inRemoveIndex.isValid ()) {
    capCollectionElement attributes ;
    removeObjectAtIndex (attributes, inRemoveIndex.uintValue (), inCompiler COMMA_THERE) ;
    cCollectionElement_relationshipList * p = (cCollectionElement_relationshipList *) attributes.ptr () ;
    if (NULL == p) {
      outOperand0.drop () ;
      outOperand1.drop () ;
      outOperand2.drop () ;
      outOperand3.drop () ;
      outOperand4.drop () ;
      outOperand5.drop () ;
    }else{
      macroValidSharedObject (p, cCollectionElement_relationshipList) ;
      outOperand0 = p->mObject.mAttribute_mIsToMany ;
      outOperand1 = p->mObject.mAttribute_mDestinationEntityName ;
      outOperand2 = p->mObject.mAttribute_mRelationshipName ;
      outOperand3 = p->mObject.mAttribute_mInverseRelationshipName ;
      outOperand4 = p->mObject.mAttribute_mInverseRelationIsToMany ;
      outOperand5 = p->mObject.mAttribute_mDeleteRule ;
    }
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_relationshipList::modifier_popFirst (GALGAS_bool & outOperand0,
                                                 GALGAS_lstring & outOperand1,
                                                 GALGAS_lstring & outOperand2,
                                                 GALGAS_lstring & outOperand3,
                                                 GALGAS_bool & outOperand4,
                                                 GALGAS_deleteRuleEnum & outOperand5,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_relationshipList * p = (cCollectionElement_relationshipList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_relationshipList) ;
    outOperand0 = p->mObject.mAttribute_mIsToMany ;
    outOperand1 = p->mObject.mAttribute_mDestinationEntityName ;
    outOperand2 = p->mObject.mAttribute_mRelationshipName ;
    outOperand3 = p->mObject.mAttribute_mInverseRelationshipName ;
    outOperand4 = p->mObject.mAttribute_mInverseRelationIsToMany ;
    outOperand5 = p->mObject.mAttribute_mDeleteRule ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_relationshipList::modifier_popLast (GALGAS_bool & outOperand0,
                                                GALGAS_lstring & outOperand1,
                                                GALGAS_lstring & outOperand2,
                                                GALGAS_lstring & outOperand3,
                                                GALGAS_bool & outOperand4,
                                                GALGAS_deleteRuleEnum & outOperand5,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_relationshipList * p = (cCollectionElement_relationshipList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_relationshipList) ;
    outOperand0 = p->mObject.mAttribute_mIsToMany ;
    outOperand1 = p->mObject.mAttribute_mDestinationEntityName ;
    outOperand2 = p->mObject.mAttribute_mRelationshipName ;
    outOperand3 = p->mObject.mAttribute_mInverseRelationshipName ;
    outOperand4 = p->mObject.mAttribute_mInverseRelationIsToMany ;
    outOperand5 = p->mObject.mAttribute_mDeleteRule ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_relationshipList::method_first (GALGAS_bool & outOperand0,
                                            GALGAS_lstring & outOperand1,
                                            GALGAS_lstring & outOperand2,
                                            GALGAS_lstring & outOperand3,
                                            GALGAS_bool & outOperand4,
                                            GALGAS_deleteRuleEnum & outOperand5,
                                            C_Compiler * inCompiler
                                            COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_relationshipList * p = (cCollectionElement_relationshipList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_relationshipList) ;
    outOperand0 = p->mObject.mAttribute_mIsToMany ;
    outOperand1 = p->mObject.mAttribute_mDestinationEntityName ;
    outOperand2 = p->mObject.mAttribute_mRelationshipName ;
    outOperand3 = p->mObject.mAttribute_mInverseRelationshipName ;
    outOperand4 = p->mObject.mAttribute_mInverseRelationIsToMany ;
    outOperand5 = p->mObject.mAttribute_mDeleteRule ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_relationshipList::method_last (GALGAS_bool & outOperand0,
                                           GALGAS_lstring & outOperand1,
                                           GALGAS_lstring & outOperand2,
                                           GALGAS_lstring & outOperand3,
                                           GALGAS_bool & outOperand4,
                                           GALGAS_deleteRuleEnum & outOperand5,
                                           C_Compiler * inCompiler
                                           COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_relationshipList * p = (cCollectionElement_relationshipList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_relationshipList) ;
    outOperand0 = p->mObject.mAttribute_mIsToMany ;
    outOperand1 = p->mObject.mAttribute_mDestinationEntityName ;
    outOperand2 = p->mObject.mAttribute_mRelationshipName ;
    outOperand3 = p->mObject.mAttribute_mInverseRelationshipName ;
    outOperand4 = p->mObject.mAttribute_mInverseRelationIsToMany ;
    outOperand5 = p->mObject.mAttribute_mDeleteRule ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_relationshipList GALGAS_relationshipList::operator_concat (const GALGAS_relationshipList & inOperand
                                                                  COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_relationshipList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_relationshipList GALGAS_relationshipList::add_operation (const GALGAS_relationshipList & inOperand,
                                                                C_Compiler * /* inCompiler */
                                                                COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_relationshipList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_relationshipList GALGAS_relationshipList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) const {
  GALGAS_relationshipList result = GALGAS_relationshipList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_relationshipList GALGAS_relationshipList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) const {
  GALGAS_relationshipList result = GALGAS_relationshipList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_relationshipList::dotAssign_operation (const GALGAS_relationshipList inOperand
                                                   COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//-----------------------------------------------------------------------------*

GALGAS_bool GALGAS_relationshipList::reader_mIsToManyAtIndex (const GALGAS_uint & inIndex,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_relationshipList * p = (cCollectionElement_relationshipList *) attributes.ptr () ;
  GALGAS_bool result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_relationshipList) ;
    result = p->mObject.mAttribute_mIsToMany ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_relationshipList::reader_mDestinationEntityNameAtIndex (const GALGAS_uint & inIndex,
                                                                              C_Compiler * inCompiler
                                                                              COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_relationshipList * p = (cCollectionElement_relationshipList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_relationshipList) ;
    result = p->mObject.mAttribute_mDestinationEntityName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_relationshipList::reader_mRelationshipNameAtIndex (const GALGAS_uint & inIndex,
                                                                         C_Compiler * inCompiler
                                                                         COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_relationshipList * p = (cCollectionElement_relationshipList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_relationshipList) ;
    result = p->mObject.mAttribute_mRelationshipName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_relationshipList::reader_mInverseRelationshipNameAtIndex (const GALGAS_uint & inIndex,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_relationshipList * p = (cCollectionElement_relationshipList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_relationshipList) ;
    result = p->mObject.mAttribute_mInverseRelationshipName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_bool GALGAS_relationshipList::reader_mInverseRelationIsToManyAtIndex (const GALGAS_uint & inIndex,
                                                                             C_Compiler * inCompiler
                                                                             COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_relationshipList * p = (cCollectionElement_relationshipList *) attributes.ptr () ;
  GALGAS_bool result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_relationshipList) ;
    result = p->mObject.mAttribute_mInverseRelationIsToMany ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_deleteRuleEnum GALGAS_relationshipList::reader_mDeleteRuleAtIndex (const GALGAS_uint & inIndex,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_relationshipList * p = (cCollectionElement_relationshipList *) attributes.ptr () ;
  GALGAS_deleteRuleEnum result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_relationshipList) ;
    result = p->mObject.mAttribute_mDeleteRule ;
  }
  return result ;
}



//-----------------------------------------------------------------------------*

cEnumerator_relationshipList::cEnumerator_relationshipList (const GALGAS_relationshipList & inEnumeratedObject,
                                                            const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_relationshipList_2D_element cEnumerator_relationshipList::current (LOCATION_ARGS) const {
  const cCollectionElement_relationshipList * p = (const cCollectionElement_relationshipList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_relationshipList) ;
  return p->mObject ;
}


//-----------------------------------------------------------------------------*

GALGAS_bool cEnumerator_relationshipList::current_mIsToMany (LOCATION_ARGS) const {
  const cCollectionElement_relationshipList * p = (const cCollectionElement_relationshipList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_relationshipList) ;
  return p->mObject.mAttribute_mIsToMany ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_relationshipList::current_mDestinationEntityName (LOCATION_ARGS) const {
  const cCollectionElement_relationshipList * p = (const cCollectionElement_relationshipList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_relationshipList) ;
  return p->mObject.mAttribute_mDestinationEntityName ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_relationshipList::current_mRelationshipName (LOCATION_ARGS) const {
  const cCollectionElement_relationshipList * p = (const cCollectionElement_relationshipList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_relationshipList) ;
  return p->mObject.mAttribute_mRelationshipName ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_relationshipList::current_mInverseRelationshipName (LOCATION_ARGS) const {
  const cCollectionElement_relationshipList * p = (const cCollectionElement_relationshipList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_relationshipList) ;
  return p->mObject.mAttribute_mInverseRelationshipName ;
}

//-----------------------------------------------------------------------------*

GALGAS_bool cEnumerator_relationshipList::current_mInverseRelationIsToMany (LOCATION_ARGS) const {
  const cCollectionElement_relationshipList * p = (const cCollectionElement_relationshipList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_relationshipList) ;
  return p->mObject.mAttribute_mInverseRelationIsToMany ;
}

//-----------------------------------------------------------------------------*

GALGAS_deleteRuleEnum cEnumerator_relationshipList::current_mDeleteRule (LOCATION_ARGS) const {
  const cCollectionElement_relationshipList * p = (const cCollectionElement_relationshipList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_relationshipList) ;
  return p->mObject.mAttribute_mDeleteRule ;
}




//-----------------------------------------------------------------------------*
//                                                                             *
//                           @relationshipList type                            *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_relationshipList ("relationshipList",
                                         NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_relationshipList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_relationshipList ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_relationshipList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_relationshipList (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_relationshipList GALGAS_relationshipList::extractObject (const GALGAS_object & inObject,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) {
  GALGAS_relationshipList result ;
  const GALGAS_relationshipList * p = (const GALGAS_relationshipList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_relationshipList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("relationshipList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//                 Class for element of '@dependanceList' list                 *
//                                                                             *
//-----------------------------------------------------------------------------*

class cCollectionElement_dependanceList : public cCollectionElement {
  public : GALGAS_dependanceList_2D_element mObject ;

//--- Constructor
  public : cCollectionElement_dependanceList (const GALGAS_abstractTransientDependency & in_mDependency
                                              COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const int32_t inIndentation) const ;
} ;

//-----------------------------------------------------------------------------*

cCollectionElement_dependanceList::cCollectionElement_dependanceList (const GALGAS_abstractTransientDependency & in_mDependency
                                                                      COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mDependency) {
}

//-----------------------------------------------------------------------------*

bool cCollectionElement_dependanceList::isValid (void) const {
  return mObject.isValid () ;
}

//-----------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_dependanceList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_dependanceList (mObject.mAttribute_mDependency COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cCollectionElement_dependanceList::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mDependency" ":" ;
  mObject.mAttribute_mDependency.description (ioString, inIndentation) ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_dependanceList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_dependanceList * operand = (cCollectionElement_dependanceList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_dependanceList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//-----------------------------------------------------------------------------*

GALGAS_dependanceList::GALGAS_dependanceList (void) :
AC_GALGAS_list () {
}

//-----------------------------------------------------------------------------*

GALGAS_dependanceList::GALGAS_dependanceList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_dependanceList GALGAS_dependanceList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_dependanceList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_dependanceList GALGAS_dependanceList::constructor_listWithValue (const GALGAS_abstractTransientDependency & inOperand0
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_dependanceList result ;
  if (inOperand0.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_dependanceList::makeAttributesFromObjects (attributes, inOperand0 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_dependanceList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                       const GALGAS_abstractTransientDependency & in_mDependency
                                                       COMMA_LOCATION_ARGS) {
  cCollectionElement_dependanceList * p = NULL ;
  macroMyNew (p, cCollectionElement_dependanceList (in_mDependency COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//-----------------------------------------------------------------------------*

void GALGAS_dependanceList::addAssign_operation (const GALGAS_abstractTransientDependency & inOperand0
                                                 COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_dependanceList (inOperand0 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_dependanceList::modifier_insertAtIndex (const GALGAS_abstractTransientDependency inOperand0,
                                                    const GALGAS_uint inInsertionIndex,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) {
  if (isValid () && inInsertionIndex.isValid () && inOperand0.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_dependanceList (inOperand0 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObjectAtIndex (attributes, inInsertionIndex.uintValue (), inCompiler COMMA_THERE) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_dependanceList::modifier_removeAtIndex (GALGAS_abstractTransientDependency & outOperand0,
                                                    const GALGAS_uint inRemoveIndex,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) {
  if (isValid () && inRemoveIndex.isValid ()) {
    capCollectionElement attributes ;
    removeObjectAtIndex (attributes, inRemoveIndex.uintValue (), inCompiler COMMA_THERE) ;
    cCollectionElement_dependanceList * p = (cCollectionElement_dependanceList *) attributes.ptr () ;
    if (NULL == p) {
      outOperand0.drop () ;
    }else{
      macroValidSharedObject (p, cCollectionElement_dependanceList) ;
      outOperand0 = p->mObject.mAttribute_mDependency ;
    }
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_dependanceList::modifier_popFirst (GALGAS_abstractTransientDependency & outOperand0,
                                               C_Compiler * inCompiler
                                               COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_dependanceList * p = (cCollectionElement_dependanceList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_dependanceList) ;
    outOperand0 = p->mObject.mAttribute_mDependency ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_dependanceList::modifier_popLast (GALGAS_abstractTransientDependency & outOperand0,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_dependanceList * p = (cCollectionElement_dependanceList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_dependanceList) ;
    outOperand0 = p->mObject.mAttribute_mDependency ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_dependanceList::method_first (GALGAS_abstractTransientDependency & outOperand0,
                                          C_Compiler * inCompiler
                                          COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_dependanceList * p = (cCollectionElement_dependanceList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_dependanceList) ;
    outOperand0 = p->mObject.mAttribute_mDependency ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_dependanceList::method_last (GALGAS_abstractTransientDependency & outOperand0,
                                         C_Compiler * inCompiler
                                         COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_dependanceList * p = (cCollectionElement_dependanceList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_dependanceList) ;
    outOperand0 = p->mObject.mAttribute_mDependency ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_dependanceList GALGAS_dependanceList::operator_concat (const GALGAS_dependanceList & inOperand
                                                              COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_dependanceList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_dependanceList GALGAS_dependanceList::add_operation (const GALGAS_dependanceList & inOperand,
                                                            C_Compiler * /* inCompiler */
                                                            COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_dependanceList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_dependanceList GALGAS_dependanceList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) const {
  GALGAS_dependanceList result = GALGAS_dependanceList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_dependanceList GALGAS_dependanceList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) const {
  GALGAS_dependanceList result = GALGAS_dependanceList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_dependanceList::dotAssign_operation (const GALGAS_dependanceList inOperand
                                                 COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//-----------------------------------------------------------------------------*

GALGAS_abstractTransientDependency GALGAS_dependanceList::reader_mDependencyAtIndex (const GALGAS_uint & inIndex,
                                                                                     C_Compiler * inCompiler
                                                                                     COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_dependanceList * p = (cCollectionElement_dependanceList *) attributes.ptr () ;
  GALGAS_abstractTransientDependency result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_dependanceList) ;
    result = p->mObject.mAttribute_mDependency ;
  }
  return result ;
}



//-----------------------------------------------------------------------------*

cEnumerator_dependanceList::cEnumerator_dependanceList (const GALGAS_dependanceList & inEnumeratedObject,
                                                        const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_dependanceList_2D_element cEnumerator_dependanceList::current (LOCATION_ARGS) const {
  const cCollectionElement_dependanceList * p = (const cCollectionElement_dependanceList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_dependanceList) ;
  return p->mObject ;
}


//-----------------------------------------------------------------------------*

GALGAS_abstractTransientDependency cEnumerator_dependanceList::current_mDependency (LOCATION_ARGS) const {
  const cCollectionElement_dependanceList * p = (const cCollectionElement_dependanceList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_dependanceList) ;
  return p->mObject.mAttribute_mDependency ;
}




//-----------------------------------------------------------------------------*
//                                                                             *
//                            @dependanceList type                             *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_dependanceList ("dependanceList",
                                       NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_dependanceList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_dependanceList ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_dependanceList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_dependanceList (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_dependanceList GALGAS_dependanceList::extractObject (const GALGAS_object & inObject,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) {
  GALGAS_dependanceList result ;
  const GALGAS_dependanceList * p = (const GALGAS_dependanceList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_dependanceList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("dependanceList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//                 Class for element of '@transientList' list                  *
//                                                                             *
//-----------------------------------------------------------------------------*

class cCollectionElement_transientList : public cCollectionElement {
  public : GALGAS_transientList_2D_element mObject ;

//--- Constructor
  public : cCollectionElement_transientList (const GALGAS_lstring & in_mTransientTypeName,
                                             const GALGAS_lstring & in_mTransientName,
                                             const GALGAS_dependanceList & in_mDependencyList
                                             COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const int32_t inIndentation) const ;
} ;

//-----------------------------------------------------------------------------*

cCollectionElement_transientList::cCollectionElement_transientList (const GALGAS_lstring & in_mTransientTypeName,
                                                                    const GALGAS_lstring & in_mTransientName,
                                                                    const GALGAS_dependanceList & in_mDependencyList
                                                                    COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mTransientTypeName, in_mTransientName, in_mDependencyList) {
}

//-----------------------------------------------------------------------------*

bool cCollectionElement_transientList::isValid (void) const {
  return mObject.isValid () ;
}

//-----------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_transientList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_transientList (mObject.mAttribute_mTransientTypeName, mObject.mAttribute_mTransientName, mObject.mAttribute_mDependencyList COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cCollectionElement_transientList::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mTransientTypeName" ":" ;
  mObject.mAttribute_mTransientTypeName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mTransientName" ":" ;
  mObject.mAttribute_mTransientName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mDependencyList" ":" ;
  mObject.mAttribute_mDependencyList.description (ioString, inIndentation) ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_transientList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_transientList * operand = (cCollectionElement_transientList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_transientList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//-----------------------------------------------------------------------------*

GALGAS_transientList::GALGAS_transientList (void) :
AC_GALGAS_list () {
}

//-----------------------------------------------------------------------------*

GALGAS_transientList::GALGAS_transientList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_transientList GALGAS_transientList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_transientList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_transientList GALGAS_transientList::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                                      const GALGAS_lstring & inOperand1,
                                                                      const GALGAS_dependanceList & inOperand2
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_transientList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_transientList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_transientList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                      const GALGAS_lstring & in_mTransientTypeName,
                                                      const GALGAS_lstring & in_mTransientName,
                                                      const GALGAS_dependanceList & in_mDependencyList
                                                      COMMA_LOCATION_ARGS) {
  cCollectionElement_transientList * p = NULL ;
  macroMyNew (p, cCollectionElement_transientList (in_mTransientTypeName,
                                                   in_mTransientName,
                                                   in_mDependencyList COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//-----------------------------------------------------------------------------*

void GALGAS_transientList::addAssign_operation (const GALGAS_lstring & inOperand0,
                                                const GALGAS_lstring & inOperand1,
                                                const GALGAS_dependanceList & inOperand2
                                                COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_transientList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_transientList::modifier_insertAtIndex (const GALGAS_lstring inOperand0,
                                                   const GALGAS_lstring inOperand1,
                                                   const GALGAS_dependanceList inOperand2,
                                                   const GALGAS_uint inInsertionIndex,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) {
  if (isValid () && inInsertionIndex.isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_transientList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObjectAtIndex (attributes, inInsertionIndex.uintValue (), inCompiler COMMA_THERE) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_transientList::modifier_removeAtIndex (GALGAS_lstring & outOperand0,
                                                   GALGAS_lstring & outOperand1,
                                                   GALGAS_dependanceList & outOperand2,
                                                   const GALGAS_uint inRemoveIndex,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) {
  if (isValid () && inRemoveIndex.isValid ()) {
    capCollectionElement attributes ;
    removeObjectAtIndex (attributes, inRemoveIndex.uintValue (), inCompiler COMMA_THERE) ;
    cCollectionElement_transientList * p = (cCollectionElement_transientList *) attributes.ptr () ;
    if (NULL == p) {
      outOperand0.drop () ;
      outOperand1.drop () ;
      outOperand2.drop () ;
    }else{
      macroValidSharedObject (p, cCollectionElement_transientList) ;
      outOperand0 = p->mObject.mAttribute_mTransientTypeName ;
      outOperand1 = p->mObject.mAttribute_mTransientName ;
      outOperand2 = p->mObject.mAttribute_mDependencyList ;
    }
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_transientList::modifier_popFirst (GALGAS_lstring & outOperand0,
                                              GALGAS_lstring & outOperand1,
                                              GALGAS_dependanceList & outOperand2,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_transientList * p = (cCollectionElement_transientList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_transientList) ;
    outOperand0 = p->mObject.mAttribute_mTransientTypeName ;
    outOperand1 = p->mObject.mAttribute_mTransientName ;
    outOperand2 = p->mObject.mAttribute_mDependencyList ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_transientList::modifier_popLast (GALGAS_lstring & outOperand0,
                                             GALGAS_lstring & outOperand1,
                                             GALGAS_dependanceList & outOperand2,
                                             C_Compiler * inCompiler
                                             COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_transientList * p = (cCollectionElement_transientList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_transientList) ;
    outOperand0 = p->mObject.mAttribute_mTransientTypeName ;
    outOperand1 = p->mObject.mAttribute_mTransientName ;
    outOperand2 = p->mObject.mAttribute_mDependencyList ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_transientList::method_first (GALGAS_lstring & outOperand0,
                                         GALGAS_lstring & outOperand1,
                                         GALGAS_dependanceList & outOperand2,
                                         C_Compiler * inCompiler
                                         COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_transientList * p = (cCollectionElement_transientList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_transientList) ;
    outOperand0 = p->mObject.mAttribute_mTransientTypeName ;
    outOperand1 = p->mObject.mAttribute_mTransientName ;
    outOperand2 = p->mObject.mAttribute_mDependencyList ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_transientList::method_last (GALGAS_lstring & outOperand0,
                                        GALGAS_lstring & outOperand1,
                                        GALGAS_dependanceList & outOperand2,
                                        C_Compiler * inCompiler
                                        COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_transientList * p = (cCollectionElement_transientList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_transientList) ;
    outOperand0 = p->mObject.mAttribute_mTransientTypeName ;
    outOperand1 = p->mObject.mAttribute_mTransientName ;
    outOperand2 = p->mObject.mAttribute_mDependencyList ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_transientList GALGAS_transientList::operator_concat (const GALGAS_transientList & inOperand
                                                            COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_transientList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_transientList GALGAS_transientList::add_operation (const GALGAS_transientList & inOperand,
                                                          C_Compiler * /* inCompiler */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_transientList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_transientList GALGAS_transientList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) const {
  GALGAS_transientList result = GALGAS_transientList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_transientList GALGAS_transientList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) const {
  GALGAS_transientList result = GALGAS_transientList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_transientList::dotAssign_operation (const GALGAS_transientList inOperand
                                                COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_transientList::reader_mTransientTypeNameAtIndex (const GALGAS_uint & inIndex,
                                                                       C_Compiler * inCompiler
                                                                       COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_transientList * p = (cCollectionElement_transientList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_transientList) ;
    result = p->mObject.mAttribute_mTransientTypeName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_transientList::reader_mTransientNameAtIndex (const GALGAS_uint & inIndex,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_transientList * p = (cCollectionElement_transientList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_transientList) ;
    result = p->mObject.mAttribute_mTransientName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_dependanceList GALGAS_transientList::reader_mDependencyListAtIndex (const GALGAS_uint & inIndex,
                                                                           C_Compiler * inCompiler
                                                                           COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_transientList * p = (cCollectionElement_transientList *) attributes.ptr () ;
  GALGAS_dependanceList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_transientList) ;
    result = p->mObject.mAttribute_mDependencyList ;
  }
  return result ;
}



//-----------------------------------------------------------------------------*

cEnumerator_transientList::cEnumerator_transientList (const GALGAS_transientList & inEnumeratedObject,
                                                      const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_transientList_2D_element cEnumerator_transientList::current (LOCATION_ARGS) const {
  const cCollectionElement_transientList * p = (const cCollectionElement_transientList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_transientList) ;
  return p->mObject ;
}


//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_transientList::current_mTransientTypeName (LOCATION_ARGS) const {
  const cCollectionElement_transientList * p = (const cCollectionElement_transientList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_transientList) ;
  return p->mObject.mAttribute_mTransientTypeName ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_transientList::current_mTransientName (LOCATION_ARGS) const {
  const cCollectionElement_transientList * p = (const cCollectionElement_transientList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_transientList) ;
  return p->mObject.mAttribute_mTransientName ;
}

//-----------------------------------------------------------------------------*

GALGAS_dependanceList cEnumerator_transientList::current_mDependencyList (LOCATION_ARGS) const {
  const cCollectionElement_transientList * p = (const cCollectionElement_transientList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_transientList) ;
  return p->mObject.mAttribute_mDependencyList ;
}




//-----------------------------------------------------------------------------*
//                                                                             *
//                             @transientList type                             *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_transientList ("transientList",
                                      NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_transientList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_transientList ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_transientList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_transientList (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_transientList GALGAS_transientList::extractObject (const GALGAS_object & inObject,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) {
  GALGAS_transientList result ;
  const GALGAS_transientList * p = (const GALGAS_transientList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_transientList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("transientList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//                 Class for element of '@classArrayList' list                 *
//                                                                             *
//-----------------------------------------------------------------------------*

class cCollectionElement_classArrayList : public cCollectionElement {
  public : GALGAS_classArrayList_2D_element mObject ;

//--- Constructor
  public : cCollectionElement_classArrayList (const GALGAS_lstring & in_mElementClassName,
                                              const GALGAS_lstring & in_mArrayName
                                              COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const int32_t inIndentation) const ;
} ;

//-----------------------------------------------------------------------------*

cCollectionElement_classArrayList::cCollectionElement_classArrayList (const GALGAS_lstring & in_mElementClassName,
                                                                      const GALGAS_lstring & in_mArrayName
                                                                      COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mElementClassName, in_mArrayName) {
}

//-----------------------------------------------------------------------------*

bool cCollectionElement_classArrayList::isValid (void) const {
  return mObject.isValid () ;
}

//-----------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_classArrayList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_classArrayList (mObject.mAttribute_mElementClassName, mObject.mAttribute_mArrayName COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cCollectionElement_classArrayList::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mElementClassName" ":" ;
  mObject.mAttribute_mElementClassName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mArrayName" ":" ;
  mObject.mAttribute_mArrayName.description (ioString, inIndentation) ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_classArrayList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_classArrayList * operand = (cCollectionElement_classArrayList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_classArrayList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//-----------------------------------------------------------------------------*

GALGAS_classArrayList::GALGAS_classArrayList (void) :
AC_GALGAS_list () {
}

//-----------------------------------------------------------------------------*

GALGAS_classArrayList::GALGAS_classArrayList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_classArrayList GALGAS_classArrayList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_classArrayList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_classArrayList GALGAS_classArrayList::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                                        const GALGAS_lstring & inOperand1
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_classArrayList result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_classArrayList::makeAttributesFromObjects (attributes, inOperand0, inOperand1 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_classArrayList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                       const GALGAS_lstring & in_mElementClassName,
                                                       const GALGAS_lstring & in_mArrayName
                                                       COMMA_LOCATION_ARGS) {
  cCollectionElement_classArrayList * p = NULL ;
  macroMyNew (p, cCollectionElement_classArrayList (in_mElementClassName,
                                                    in_mArrayName COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//-----------------------------------------------------------------------------*

void GALGAS_classArrayList::addAssign_operation (const GALGAS_lstring & inOperand0,
                                                 const GALGAS_lstring & inOperand1
                                                 COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_classArrayList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_classArrayList::modifier_insertAtIndex (const GALGAS_lstring inOperand0,
                                                    const GALGAS_lstring inOperand1,
                                                    const GALGAS_uint inInsertionIndex,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) {
  if (isValid () && inInsertionIndex.isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_classArrayList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObjectAtIndex (attributes, inInsertionIndex.uintValue (), inCompiler COMMA_THERE) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_classArrayList::modifier_removeAtIndex (GALGAS_lstring & outOperand0,
                                                    GALGAS_lstring & outOperand1,
                                                    const GALGAS_uint inRemoveIndex,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) {
  if (isValid () && inRemoveIndex.isValid ()) {
    capCollectionElement attributes ;
    removeObjectAtIndex (attributes, inRemoveIndex.uintValue (), inCompiler COMMA_THERE) ;
    cCollectionElement_classArrayList * p = (cCollectionElement_classArrayList *) attributes.ptr () ;
    if (NULL == p) {
      outOperand0.drop () ;
      outOperand1.drop () ;
    }else{
      macroValidSharedObject (p, cCollectionElement_classArrayList) ;
      outOperand0 = p->mObject.mAttribute_mElementClassName ;
      outOperand1 = p->mObject.mAttribute_mArrayName ;
    }
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_classArrayList::modifier_popFirst (GALGAS_lstring & outOperand0,
                                               GALGAS_lstring & outOperand1,
                                               C_Compiler * inCompiler
                                               COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_classArrayList * p = (cCollectionElement_classArrayList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_classArrayList) ;
    outOperand0 = p->mObject.mAttribute_mElementClassName ;
    outOperand1 = p->mObject.mAttribute_mArrayName ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_classArrayList::modifier_popLast (GALGAS_lstring & outOperand0,
                                              GALGAS_lstring & outOperand1,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_classArrayList * p = (cCollectionElement_classArrayList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_classArrayList) ;
    outOperand0 = p->mObject.mAttribute_mElementClassName ;
    outOperand1 = p->mObject.mAttribute_mArrayName ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_classArrayList::method_first (GALGAS_lstring & outOperand0,
                                          GALGAS_lstring & outOperand1,
                                          C_Compiler * inCompiler
                                          COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_classArrayList * p = (cCollectionElement_classArrayList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_classArrayList) ;
    outOperand0 = p->mObject.mAttribute_mElementClassName ;
    outOperand1 = p->mObject.mAttribute_mArrayName ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_classArrayList::method_last (GALGAS_lstring & outOperand0,
                                         GALGAS_lstring & outOperand1,
                                         C_Compiler * inCompiler
                                         COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_classArrayList * p = (cCollectionElement_classArrayList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_classArrayList) ;
    outOperand0 = p->mObject.mAttribute_mElementClassName ;
    outOperand1 = p->mObject.mAttribute_mArrayName ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_classArrayList GALGAS_classArrayList::operator_concat (const GALGAS_classArrayList & inOperand
                                                              COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_classArrayList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_classArrayList GALGAS_classArrayList::add_operation (const GALGAS_classArrayList & inOperand,
                                                            C_Compiler * /* inCompiler */
                                                            COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_classArrayList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_classArrayList GALGAS_classArrayList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) const {
  GALGAS_classArrayList result = GALGAS_classArrayList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_classArrayList GALGAS_classArrayList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) const {
  GALGAS_classArrayList result = GALGAS_classArrayList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_classArrayList::dotAssign_operation (const GALGAS_classArrayList inOperand
                                                 COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_classArrayList::reader_mElementClassNameAtIndex (const GALGAS_uint & inIndex,
                                                                       C_Compiler * inCompiler
                                                                       COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_classArrayList * p = (cCollectionElement_classArrayList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_classArrayList) ;
    result = p->mObject.mAttribute_mElementClassName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_classArrayList::reader_mArrayNameAtIndex (const GALGAS_uint & inIndex,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_classArrayList * p = (cCollectionElement_classArrayList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_classArrayList) ;
    result = p->mObject.mAttribute_mArrayName ;
  }
  return result ;
}



//-----------------------------------------------------------------------------*

cEnumerator_classArrayList::cEnumerator_classArrayList (const GALGAS_classArrayList & inEnumeratedObject,
                                                        const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_classArrayList_2D_element cEnumerator_classArrayList::current (LOCATION_ARGS) const {
  const cCollectionElement_classArrayList * p = (const cCollectionElement_classArrayList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_classArrayList) ;
  return p->mObject ;
}


//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_classArrayList::current_mElementClassName (LOCATION_ARGS) const {
  const cCollectionElement_classArrayList * p = (const cCollectionElement_classArrayList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_classArrayList) ;
  return p->mObject.mAttribute_mElementClassName ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_classArrayList::current_mArrayName (LOCATION_ARGS) const {
  const cCollectionElement_classArrayList * p = (const cCollectionElement_classArrayList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_classArrayList) ;
  return p->mObject.mAttribute_mArrayName ;
}




//-----------------------------------------------------------------------------*
//                                                                             *
//                            @classArrayList type                             *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_classArrayList ("classArrayList",
                                       NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_classArrayList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_classArrayList ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_classArrayList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_classArrayList (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_classArrayList GALGAS_classArrayList::extractObject (const GALGAS_object & inObject,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) {
  GALGAS_classArrayList result ;
  const GALGAS_classArrayList * p = (const GALGAS_classArrayList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_classArrayList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("classArrayList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//            Class for element of '@outletBindingOptionList' list             *
//                                                                             *
//-----------------------------------------------------------------------------*

class cCollectionElement_outletBindingOptionList : public cCollectionElement {
  public : GALGAS_outletBindingOptionList_2D_element mObject ;

//--- Constructor
  public : cCollectionElement_outletBindingOptionList (const GALGAS_lstring & in_mOptionName,
                                                       const GALGAS_abstractDefaultValue & in_mDefaultValue
                                                       COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const int32_t inIndentation) const ;
} ;

//-----------------------------------------------------------------------------*

cCollectionElement_outletBindingOptionList::cCollectionElement_outletBindingOptionList (const GALGAS_lstring & in_mOptionName,
                                                                                        const GALGAS_abstractDefaultValue & in_mDefaultValue
                                                                                        COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mOptionName, in_mDefaultValue) {
}

//-----------------------------------------------------------------------------*

bool cCollectionElement_outletBindingOptionList::isValid (void) const {
  return mObject.isValid () ;
}

//-----------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_outletBindingOptionList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_outletBindingOptionList (mObject.mAttribute_mOptionName, mObject.mAttribute_mDefaultValue COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cCollectionElement_outletBindingOptionList::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mOptionName" ":" ;
  mObject.mAttribute_mOptionName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mDefaultValue" ":" ;
  mObject.mAttribute_mDefaultValue.description (ioString, inIndentation) ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_outletBindingOptionList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_outletBindingOptionList * operand = (cCollectionElement_outletBindingOptionList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_outletBindingOptionList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletBindingOptionList::GALGAS_outletBindingOptionList (void) :
AC_GALGAS_list () {
}

//-----------------------------------------------------------------------------*

GALGAS_outletBindingOptionList::GALGAS_outletBindingOptionList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_outletBindingOptionList GALGAS_outletBindingOptionList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_outletBindingOptionList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletBindingOptionList GALGAS_outletBindingOptionList::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                                                          const GALGAS_abstractDefaultValue & inOperand1
                                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_outletBindingOptionList result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_outletBindingOptionList::makeAttributesFromObjects (attributes, inOperand0, inOperand1 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_outletBindingOptionList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                                const GALGAS_lstring & in_mOptionName,
                                                                const GALGAS_abstractDefaultValue & in_mDefaultValue
                                                                COMMA_LOCATION_ARGS) {
  cCollectionElement_outletBindingOptionList * p = NULL ;
  macroMyNew (p, cCollectionElement_outletBindingOptionList (in_mOptionName,
                                                             in_mDefaultValue COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//-----------------------------------------------------------------------------*

void GALGAS_outletBindingOptionList::addAssign_operation (const GALGAS_lstring & inOperand0,
                                                          const GALGAS_abstractDefaultValue & inOperand1
                                                          COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_outletBindingOptionList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_outletBindingOptionList::modifier_insertAtIndex (const GALGAS_lstring inOperand0,
                                                             const GALGAS_abstractDefaultValue inOperand1,
                                                             const GALGAS_uint inInsertionIndex,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) {
  if (isValid () && inInsertionIndex.isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_outletBindingOptionList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObjectAtIndex (attributes, inInsertionIndex.uintValue (), inCompiler COMMA_THERE) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_outletBindingOptionList::modifier_removeAtIndex (GALGAS_lstring & outOperand0,
                                                             GALGAS_abstractDefaultValue & outOperand1,
                                                             const GALGAS_uint inRemoveIndex,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) {
  if (isValid () && inRemoveIndex.isValid ()) {
    capCollectionElement attributes ;
    removeObjectAtIndex (attributes, inRemoveIndex.uintValue (), inCompiler COMMA_THERE) ;
    cCollectionElement_outletBindingOptionList * p = (cCollectionElement_outletBindingOptionList *) attributes.ptr () ;
    if (NULL == p) {
      outOperand0.drop () ;
      outOperand1.drop () ;
    }else{
      macroValidSharedObject (p, cCollectionElement_outletBindingOptionList) ;
      outOperand0 = p->mObject.mAttribute_mOptionName ;
      outOperand1 = p->mObject.mAttribute_mDefaultValue ;
    }
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_outletBindingOptionList::modifier_popFirst (GALGAS_lstring & outOperand0,
                                                        GALGAS_abstractDefaultValue & outOperand1,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletBindingOptionList * p = (cCollectionElement_outletBindingOptionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletBindingOptionList) ;
    outOperand0 = p->mObject.mAttribute_mOptionName ;
    outOperand1 = p->mObject.mAttribute_mDefaultValue ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_outletBindingOptionList::modifier_popLast (GALGAS_lstring & outOperand0,
                                                       GALGAS_abstractDefaultValue & outOperand1,
                                                       C_Compiler * inCompiler
                                                       COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletBindingOptionList * p = (cCollectionElement_outletBindingOptionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletBindingOptionList) ;
    outOperand0 = p->mObject.mAttribute_mOptionName ;
    outOperand1 = p->mObject.mAttribute_mDefaultValue ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_outletBindingOptionList::method_first (GALGAS_lstring & outOperand0,
                                                   GALGAS_abstractDefaultValue & outOperand1,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletBindingOptionList * p = (cCollectionElement_outletBindingOptionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletBindingOptionList) ;
    outOperand0 = p->mObject.mAttribute_mOptionName ;
    outOperand1 = p->mObject.mAttribute_mDefaultValue ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_outletBindingOptionList::method_last (GALGAS_lstring & outOperand0,
                                                  GALGAS_abstractDefaultValue & outOperand1,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletBindingOptionList * p = (cCollectionElement_outletBindingOptionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletBindingOptionList) ;
    outOperand0 = p->mObject.mAttribute_mOptionName ;
    outOperand1 = p->mObject.mAttribute_mDefaultValue ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_outletBindingOptionList GALGAS_outletBindingOptionList::operator_concat (const GALGAS_outletBindingOptionList & inOperand
                                                                                COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_outletBindingOptionList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletBindingOptionList GALGAS_outletBindingOptionList::add_operation (const GALGAS_outletBindingOptionList & inOperand,
                                                                              C_Compiler * /* inCompiler */
                                                                              COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_outletBindingOptionList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletBindingOptionList GALGAS_outletBindingOptionList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                                        C_Compiler * inCompiler
                                                                                        COMMA_LOCATION_ARGS) const {
  GALGAS_outletBindingOptionList result = GALGAS_outletBindingOptionList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletBindingOptionList GALGAS_outletBindingOptionList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                        C_Compiler * inCompiler
                                                                                        COMMA_LOCATION_ARGS) const {
  GALGAS_outletBindingOptionList result = GALGAS_outletBindingOptionList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_outletBindingOptionList::dotAssign_operation (const GALGAS_outletBindingOptionList inOperand
                                                          COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_outletBindingOptionList::reader_mOptionNameAtIndex (const GALGAS_uint & inIndex,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_outletBindingOptionList * p = (cCollectionElement_outletBindingOptionList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_outletBindingOptionList) ;
    result = p->mObject.mAttribute_mOptionName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_abstractDefaultValue GALGAS_outletBindingOptionList::reader_mDefaultValueAtIndex (const GALGAS_uint & inIndex,
                                                                                         C_Compiler * inCompiler
                                                                                         COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_outletBindingOptionList * p = (cCollectionElement_outletBindingOptionList *) attributes.ptr () ;
  GALGAS_abstractDefaultValue result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_outletBindingOptionList) ;
    result = p->mObject.mAttribute_mDefaultValue ;
  }
  return result ;
}



//-----------------------------------------------------------------------------*

cEnumerator_outletBindingOptionList::cEnumerator_outletBindingOptionList (const GALGAS_outletBindingOptionList & inEnumeratedObject,
                                                                          const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletBindingOptionList_2D_element cEnumerator_outletBindingOptionList::current (LOCATION_ARGS) const {
  const cCollectionElement_outletBindingOptionList * p = (const cCollectionElement_outletBindingOptionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_outletBindingOptionList) ;
  return p->mObject ;
}


//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_outletBindingOptionList::current_mOptionName (LOCATION_ARGS) const {
  const cCollectionElement_outletBindingOptionList * p = (const cCollectionElement_outletBindingOptionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_outletBindingOptionList) ;
  return p->mObject.mAttribute_mOptionName ;
}

//-----------------------------------------------------------------------------*

GALGAS_abstractDefaultValue cEnumerator_outletBindingOptionList::current_mDefaultValue (LOCATION_ARGS) const {
  const cCollectionElement_outletBindingOptionList * p = (const cCollectionElement_outletBindingOptionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_outletBindingOptionList) ;
  return p->mObject.mAttribute_mDefaultValue ;
}




//-----------------------------------------------------------------------------*
//                                                                             *
//                        @outletBindingOptionList type                        *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_outletBindingOptionList ("outletBindingOptionList",
                                                NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_outletBindingOptionList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_outletBindingOptionList ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_outletBindingOptionList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_outletBindingOptionList (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletBindingOptionList GALGAS_outletBindingOptionList::extractObject (const GALGAS_object & inObject,
                                                                              C_Compiler * inCompiler
                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_outletBindingOptionList result ;
  const GALGAS_outletBindingOptionList * p = (const GALGAS_outletBindingOptionList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_outletBindingOptionList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("outletBindingOptionList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//             Class for element of '@multiValuedBindingList' list             *
//                                                                             *
//-----------------------------------------------------------------------------*

class cCollectionElement_multiValuedBindingList : public cCollectionElement {
  public : GALGAS_multiValuedBindingList_2D_element mObject ;

//--- Constructor
  public : cCollectionElement_multiValuedBindingList (const GALGAS_bool & in_mNegate,
                                                      const GALGAS_multiValuedBindingBoundModel & in_mBoundModel,
                                                      const GALGAS_outletBindingOptionList & in_mOutletBindingOptionList
                                                      COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const int32_t inIndentation) const ;
} ;

//-----------------------------------------------------------------------------*

cCollectionElement_multiValuedBindingList::cCollectionElement_multiValuedBindingList (const GALGAS_bool & in_mNegate,
                                                                                      const GALGAS_multiValuedBindingBoundModel & in_mBoundModel,
                                                                                      const GALGAS_outletBindingOptionList & in_mOutletBindingOptionList
                                                                                      COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mNegate, in_mBoundModel, in_mOutletBindingOptionList) {
}

//-----------------------------------------------------------------------------*

bool cCollectionElement_multiValuedBindingList::isValid (void) const {
  return mObject.isValid () ;
}

//-----------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_multiValuedBindingList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_multiValuedBindingList (mObject.mAttribute_mNegate, mObject.mAttribute_mBoundModel, mObject.mAttribute_mOutletBindingOptionList COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cCollectionElement_multiValuedBindingList::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mNegate" ":" ;
  mObject.mAttribute_mNegate.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mBoundModel" ":" ;
  mObject.mAttribute_mBoundModel.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mOutletBindingOptionList" ":" ;
  mObject.mAttribute_mOutletBindingOptionList.description (ioString, inIndentation) ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_multiValuedBindingList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_multiValuedBindingList * operand = (cCollectionElement_multiValuedBindingList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_multiValuedBindingList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingList::GALGAS_multiValuedBindingList (void) :
AC_GALGAS_list () {
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingList::GALGAS_multiValuedBindingList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingList GALGAS_multiValuedBindingList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_multiValuedBindingList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingList GALGAS_multiValuedBindingList::constructor_listWithValue (const GALGAS_bool & inOperand0,
                                                                                        const GALGAS_multiValuedBindingBoundModel & inOperand1,
                                                                                        const GALGAS_outletBindingOptionList & inOperand2
                                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_multiValuedBindingList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_multiValuedBindingList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_multiValuedBindingList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                               const GALGAS_bool & in_mNegate,
                                                               const GALGAS_multiValuedBindingBoundModel & in_mBoundModel,
                                                               const GALGAS_outletBindingOptionList & in_mOutletBindingOptionList
                                                               COMMA_LOCATION_ARGS) {
  cCollectionElement_multiValuedBindingList * p = NULL ;
  macroMyNew (p, cCollectionElement_multiValuedBindingList (in_mNegate,
                                                            in_mBoundModel,
                                                            in_mOutletBindingOptionList COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//-----------------------------------------------------------------------------*

void GALGAS_multiValuedBindingList::addAssign_operation (const GALGAS_bool & inOperand0,
                                                         const GALGAS_multiValuedBindingBoundModel & inOperand1,
                                                         const GALGAS_outletBindingOptionList & inOperand2
                                                         COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_multiValuedBindingList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_multiValuedBindingList::modifier_insertAtIndex (const GALGAS_bool inOperand0,
                                                            const GALGAS_multiValuedBindingBoundModel inOperand1,
                                                            const GALGAS_outletBindingOptionList inOperand2,
                                                            const GALGAS_uint inInsertionIndex,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) {
  if (isValid () && inInsertionIndex.isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_multiValuedBindingList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObjectAtIndex (attributes, inInsertionIndex.uintValue (), inCompiler COMMA_THERE) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_multiValuedBindingList::modifier_removeAtIndex (GALGAS_bool & outOperand0,
                                                            GALGAS_multiValuedBindingBoundModel & outOperand1,
                                                            GALGAS_outletBindingOptionList & outOperand2,
                                                            const GALGAS_uint inRemoveIndex,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) {
  if (isValid () && inRemoveIndex.isValid ()) {
    capCollectionElement attributes ;
    removeObjectAtIndex (attributes, inRemoveIndex.uintValue (), inCompiler COMMA_THERE) ;
    cCollectionElement_multiValuedBindingList * p = (cCollectionElement_multiValuedBindingList *) attributes.ptr () ;
    if (NULL == p) {
      outOperand0.drop () ;
      outOperand1.drop () ;
      outOperand2.drop () ;
    }else{
      macroValidSharedObject (p, cCollectionElement_multiValuedBindingList) ;
      outOperand0 = p->mObject.mAttribute_mNegate ;
      outOperand1 = p->mObject.mAttribute_mBoundModel ;
      outOperand2 = p->mObject.mAttribute_mOutletBindingOptionList ;
    }
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_multiValuedBindingList::modifier_popFirst (GALGAS_bool & outOperand0,
                                                       GALGAS_multiValuedBindingBoundModel & outOperand1,
                                                       GALGAS_outletBindingOptionList & outOperand2,
                                                       C_Compiler * inCompiler
                                                       COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_multiValuedBindingList * p = (cCollectionElement_multiValuedBindingList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_multiValuedBindingList) ;
    outOperand0 = p->mObject.mAttribute_mNegate ;
    outOperand1 = p->mObject.mAttribute_mBoundModel ;
    outOperand2 = p->mObject.mAttribute_mOutletBindingOptionList ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_multiValuedBindingList::modifier_popLast (GALGAS_bool & outOperand0,
                                                      GALGAS_multiValuedBindingBoundModel & outOperand1,
                                                      GALGAS_outletBindingOptionList & outOperand2,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_multiValuedBindingList * p = (cCollectionElement_multiValuedBindingList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_multiValuedBindingList) ;
    outOperand0 = p->mObject.mAttribute_mNegate ;
    outOperand1 = p->mObject.mAttribute_mBoundModel ;
    outOperand2 = p->mObject.mAttribute_mOutletBindingOptionList ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_multiValuedBindingList::method_first (GALGAS_bool & outOperand0,
                                                  GALGAS_multiValuedBindingBoundModel & outOperand1,
                                                  GALGAS_outletBindingOptionList & outOperand2,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_multiValuedBindingList * p = (cCollectionElement_multiValuedBindingList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_multiValuedBindingList) ;
    outOperand0 = p->mObject.mAttribute_mNegate ;
    outOperand1 = p->mObject.mAttribute_mBoundModel ;
    outOperand2 = p->mObject.mAttribute_mOutletBindingOptionList ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_multiValuedBindingList::method_last (GALGAS_bool & outOperand0,
                                                 GALGAS_multiValuedBindingBoundModel & outOperand1,
                                                 GALGAS_outletBindingOptionList & outOperand2,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_multiValuedBindingList * p = (cCollectionElement_multiValuedBindingList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_multiValuedBindingList) ;
    outOperand0 = p->mObject.mAttribute_mNegate ;
    outOperand1 = p->mObject.mAttribute_mBoundModel ;
    outOperand2 = p->mObject.mAttribute_mOutletBindingOptionList ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingList GALGAS_multiValuedBindingList::operator_concat (const GALGAS_multiValuedBindingList & inOperand
                                                                              COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_multiValuedBindingList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingList GALGAS_multiValuedBindingList::add_operation (const GALGAS_multiValuedBindingList & inOperand,
                                                                            C_Compiler * /* inCompiler */
                                                                            COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_multiValuedBindingList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingList GALGAS_multiValuedBindingList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) const {
  GALGAS_multiValuedBindingList result = GALGAS_multiValuedBindingList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingList GALGAS_multiValuedBindingList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) const {
  GALGAS_multiValuedBindingList result = GALGAS_multiValuedBindingList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_multiValuedBindingList::dotAssign_operation (const GALGAS_multiValuedBindingList inOperand
                                                         COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//-----------------------------------------------------------------------------*

GALGAS_bool GALGAS_multiValuedBindingList::reader_mNegateAtIndex (const GALGAS_uint & inIndex,
                                                                  C_Compiler * inCompiler
                                                                  COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_multiValuedBindingList * p = (cCollectionElement_multiValuedBindingList *) attributes.ptr () ;
  GALGAS_bool result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_multiValuedBindingList) ;
    result = p->mObject.mAttribute_mNegate ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundModel GALGAS_multiValuedBindingList::reader_mBoundModelAtIndex (const GALGAS_uint & inIndex,
                                                                                              C_Compiler * inCompiler
                                                                                              COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_multiValuedBindingList * p = (cCollectionElement_multiValuedBindingList *) attributes.ptr () ;
  GALGAS_multiValuedBindingBoundModel result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_multiValuedBindingList) ;
    result = p->mObject.mAttribute_mBoundModel ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletBindingOptionList GALGAS_multiValuedBindingList::reader_mOutletBindingOptionListAtIndex (const GALGAS_uint & inIndex,
                                                                                                      C_Compiler * inCompiler
                                                                                                      COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_multiValuedBindingList * p = (cCollectionElement_multiValuedBindingList *) attributes.ptr () ;
  GALGAS_outletBindingOptionList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_multiValuedBindingList) ;
    result = p->mObject.mAttribute_mOutletBindingOptionList ;
  }
  return result ;
}



//-----------------------------------------------------------------------------*

cEnumerator_multiValuedBindingList::cEnumerator_multiValuedBindingList (const GALGAS_multiValuedBindingList & inEnumeratedObject,
                                                                        const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingList_2D_element cEnumerator_multiValuedBindingList::current (LOCATION_ARGS) const {
  const cCollectionElement_multiValuedBindingList * p = (const cCollectionElement_multiValuedBindingList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_multiValuedBindingList) ;
  return p->mObject ;
}


//-----------------------------------------------------------------------------*

GALGAS_bool cEnumerator_multiValuedBindingList::current_mNegate (LOCATION_ARGS) const {
  const cCollectionElement_multiValuedBindingList * p = (const cCollectionElement_multiValuedBindingList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_multiValuedBindingList) ;
  return p->mObject.mAttribute_mNegate ;
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundModel cEnumerator_multiValuedBindingList::current_mBoundModel (LOCATION_ARGS) const {
  const cCollectionElement_multiValuedBindingList * p = (const cCollectionElement_multiValuedBindingList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_multiValuedBindingList) ;
  return p->mObject.mAttribute_mBoundModel ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletBindingOptionList cEnumerator_multiValuedBindingList::current_mOutletBindingOptionList (LOCATION_ARGS) const {
  const cCollectionElement_multiValuedBindingList * p = (const cCollectionElement_multiValuedBindingList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_multiValuedBindingList) ;
  return p->mObject.mAttribute_mOutletBindingOptionList ;
}




//-----------------------------------------------------------------------------*
//                                                                             *
//                        @multiValuedBindingList type                         *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_multiValuedBindingList ("multiValuedBindingList",
                                               NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_multiValuedBindingList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_multiValuedBindingList ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_multiValuedBindingList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_multiValuedBindingList (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingList GALGAS_multiValuedBindingList::extractObject (const GALGAS_object & inObject,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_multiValuedBindingList result ;
  const GALGAS_multiValuedBindingList * p = (const GALGAS_multiValuedBindingList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_multiValuedBindingList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("multiValuedBindingList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//            Class for element of '@tableValueColumnBinding' list             *
//                                                                             *
//-----------------------------------------------------------------------------*

class cCollectionElement_tableValueColumnBinding : public cCollectionElement {
  public : GALGAS_tableValueColumnBinding_2D_element mObject ;

//--- Constructor
  public : cCollectionElement_tableValueColumnBinding (const GALGAS_lstring & in_mColumnName,
                                                       const GALGAS_lstring & in_mCellTypeName,
                                                       const GALGAS_lstring & in_mBoundPropertyName
                                                       COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const int32_t inIndentation) const ;
} ;

//-----------------------------------------------------------------------------*

cCollectionElement_tableValueColumnBinding::cCollectionElement_tableValueColumnBinding (const GALGAS_lstring & in_mColumnName,
                                                                                        const GALGAS_lstring & in_mCellTypeName,
                                                                                        const GALGAS_lstring & in_mBoundPropertyName
                                                                                        COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mColumnName, in_mCellTypeName, in_mBoundPropertyName) {
}

//-----------------------------------------------------------------------------*

bool cCollectionElement_tableValueColumnBinding::isValid (void) const {
  return mObject.isValid () ;
}

//-----------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_tableValueColumnBinding::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_tableValueColumnBinding (mObject.mAttribute_mColumnName, mObject.mAttribute_mCellTypeName, mObject.mAttribute_mBoundPropertyName COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cCollectionElement_tableValueColumnBinding::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mColumnName" ":" ;
  mObject.mAttribute_mColumnName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mCellTypeName" ":" ;
  mObject.mAttribute_mCellTypeName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mBoundPropertyName" ":" ;
  mObject.mAttribute_mBoundPropertyName.description (ioString, inIndentation) ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_tableValueColumnBinding::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_tableValueColumnBinding * operand = (cCollectionElement_tableValueColumnBinding *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_tableValueColumnBinding) ;
  return mObject.objectCompare (operand->mObject) ;
}

//-----------------------------------------------------------------------------*

GALGAS_tableValueColumnBinding::GALGAS_tableValueColumnBinding (void) :
AC_GALGAS_list () {
}

//-----------------------------------------------------------------------------*

GALGAS_tableValueColumnBinding::GALGAS_tableValueColumnBinding (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_tableValueColumnBinding GALGAS_tableValueColumnBinding::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_tableValueColumnBinding result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_tableValueColumnBinding GALGAS_tableValueColumnBinding::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                                                          const GALGAS_lstring & inOperand1,
                                                                                          const GALGAS_lstring & inOperand2
                                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_tableValueColumnBinding result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_tableValueColumnBinding::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_tableValueColumnBinding::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                                const GALGAS_lstring & in_mColumnName,
                                                                const GALGAS_lstring & in_mCellTypeName,
                                                                const GALGAS_lstring & in_mBoundPropertyName
                                                                COMMA_LOCATION_ARGS) {
  cCollectionElement_tableValueColumnBinding * p = NULL ;
  macroMyNew (p, cCollectionElement_tableValueColumnBinding (in_mColumnName,
                                                             in_mCellTypeName,
                                                             in_mBoundPropertyName COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//-----------------------------------------------------------------------------*

void GALGAS_tableValueColumnBinding::addAssign_operation (const GALGAS_lstring & inOperand0,
                                                          const GALGAS_lstring & inOperand1,
                                                          const GALGAS_lstring & inOperand2
                                                          COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_tableValueColumnBinding (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_tableValueColumnBinding::modifier_insertAtIndex (const GALGAS_lstring inOperand0,
                                                             const GALGAS_lstring inOperand1,
                                                             const GALGAS_lstring inOperand2,
                                                             const GALGAS_uint inInsertionIndex,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) {
  if (isValid () && inInsertionIndex.isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_tableValueColumnBinding (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObjectAtIndex (attributes, inInsertionIndex.uintValue (), inCompiler COMMA_THERE) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_tableValueColumnBinding::modifier_removeAtIndex (GALGAS_lstring & outOperand0,
                                                             GALGAS_lstring & outOperand1,
                                                             GALGAS_lstring & outOperand2,
                                                             const GALGAS_uint inRemoveIndex,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) {
  if (isValid () && inRemoveIndex.isValid ()) {
    capCollectionElement attributes ;
    removeObjectAtIndex (attributes, inRemoveIndex.uintValue (), inCompiler COMMA_THERE) ;
    cCollectionElement_tableValueColumnBinding * p = (cCollectionElement_tableValueColumnBinding *) attributes.ptr () ;
    if (NULL == p) {
      outOperand0.drop () ;
      outOperand1.drop () ;
      outOperand2.drop () ;
    }else{
      macroValidSharedObject (p, cCollectionElement_tableValueColumnBinding) ;
      outOperand0 = p->mObject.mAttribute_mColumnName ;
      outOperand1 = p->mObject.mAttribute_mCellTypeName ;
      outOperand2 = p->mObject.mAttribute_mBoundPropertyName ;
    }
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_tableValueColumnBinding::modifier_popFirst (GALGAS_lstring & outOperand0,
                                                        GALGAS_lstring & outOperand1,
                                                        GALGAS_lstring & outOperand2,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_tableValueColumnBinding * p = (cCollectionElement_tableValueColumnBinding *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_tableValueColumnBinding) ;
    outOperand0 = p->mObject.mAttribute_mColumnName ;
    outOperand1 = p->mObject.mAttribute_mCellTypeName ;
    outOperand2 = p->mObject.mAttribute_mBoundPropertyName ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_tableValueColumnBinding::modifier_popLast (GALGAS_lstring & outOperand0,
                                                       GALGAS_lstring & outOperand1,
                                                       GALGAS_lstring & outOperand2,
                                                       C_Compiler * inCompiler
                                                       COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_tableValueColumnBinding * p = (cCollectionElement_tableValueColumnBinding *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_tableValueColumnBinding) ;
    outOperand0 = p->mObject.mAttribute_mColumnName ;
    outOperand1 = p->mObject.mAttribute_mCellTypeName ;
    outOperand2 = p->mObject.mAttribute_mBoundPropertyName ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_tableValueColumnBinding::method_first (GALGAS_lstring & outOperand0,
                                                   GALGAS_lstring & outOperand1,
                                                   GALGAS_lstring & outOperand2,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_tableValueColumnBinding * p = (cCollectionElement_tableValueColumnBinding *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_tableValueColumnBinding) ;
    outOperand0 = p->mObject.mAttribute_mColumnName ;
    outOperand1 = p->mObject.mAttribute_mCellTypeName ;
    outOperand2 = p->mObject.mAttribute_mBoundPropertyName ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_tableValueColumnBinding::method_last (GALGAS_lstring & outOperand0,
                                                  GALGAS_lstring & outOperand1,
                                                  GALGAS_lstring & outOperand2,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_tableValueColumnBinding * p = (cCollectionElement_tableValueColumnBinding *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_tableValueColumnBinding) ;
    outOperand0 = p->mObject.mAttribute_mColumnName ;
    outOperand1 = p->mObject.mAttribute_mCellTypeName ;
    outOperand2 = p->mObject.mAttribute_mBoundPropertyName ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_tableValueColumnBinding GALGAS_tableValueColumnBinding::operator_concat (const GALGAS_tableValueColumnBinding & inOperand
                                                                                COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_tableValueColumnBinding result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_tableValueColumnBinding GALGAS_tableValueColumnBinding::add_operation (const GALGAS_tableValueColumnBinding & inOperand,
                                                                              C_Compiler * /* inCompiler */
                                                                              COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_tableValueColumnBinding result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_tableValueColumnBinding GALGAS_tableValueColumnBinding::reader_subListWithRange (const GALGAS_range & inRange,
                                                                                        C_Compiler * inCompiler
                                                                                        COMMA_LOCATION_ARGS) const {
  GALGAS_tableValueColumnBinding result = GALGAS_tableValueColumnBinding::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_tableValueColumnBinding GALGAS_tableValueColumnBinding::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                        C_Compiler * inCompiler
                                                                                        COMMA_LOCATION_ARGS) const {
  GALGAS_tableValueColumnBinding result = GALGAS_tableValueColumnBinding::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_tableValueColumnBinding::dotAssign_operation (const GALGAS_tableValueColumnBinding inOperand
                                                          COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_tableValueColumnBinding::reader_mColumnNameAtIndex (const GALGAS_uint & inIndex,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_tableValueColumnBinding * p = (cCollectionElement_tableValueColumnBinding *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_tableValueColumnBinding) ;
    result = p->mObject.mAttribute_mColumnName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_tableValueColumnBinding::reader_mCellTypeNameAtIndex (const GALGAS_uint & inIndex,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_tableValueColumnBinding * p = (cCollectionElement_tableValueColumnBinding *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_tableValueColumnBinding) ;
    result = p->mObject.mAttribute_mCellTypeName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_tableValueColumnBinding::reader_mBoundPropertyNameAtIndex (const GALGAS_uint & inIndex,
                                                                                 C_Compiler * inCompiler
                                                                                 COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_tableValueColumnBinding * p = (cCollectionElement_tableValueColumnBinding *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_tableValueColumnBinding) ;
    result = p->mObject.mAttribute_mBoundPropertyName ;
  }
  return result ;
}



//-----------------------------------------------------------------------------*

cEnumerator_tableValueColumnBinding::cEnumerator_tableValueColumnBinding (const GALGAS_tableValueColumnBinding & inEnumeratedObject,
                                                                          const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_tableValueColumnBinding_2D_element cEnumerator_tableValueColumnBinding::current (LOCATION_ARGS) const {
  const cCollectionElement_tableValueColumnBinding * p = (const cCollectionElement_tableValueColumnBinding *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_tableValueColumnBinding) ;
  return p->mObject ;
}


//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_tableValueColumnBinding::current_mColumnName (LOCATION_ARGS) const {
  const cCollectionElement_tableValueColumnBinding * p = (const cCollectionElement_tableValueColumnBinding *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_tableValueColumnBinding) ;
  return p->mObject.mAttribute_mColumnName ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_tableValueColumnBinding::current_mCellTypeName (LOCATION_ARGS) const {
  const cCollectionElement_tableValueColumnBinding * p = (const cCollectionElement_tableValueColumnBinding *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_tableValueColumnBinding) ;
  return p->mObject.mAttribute_mCellTypeName ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_tableValueColumnBinding::current_mBoundPropertyName (LOCATION_ARGS) const {
  const cCollectionElement_tableValueColumnBinding * p = (const cCollectionElement_tableValueColumnBinding *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_tableValueColumnBinding) ;
  return p->mObject.mAttribute_mBoundPropertyName ;
}




//-----------------------------------------------------------------------------*
//                                                                             *
//                        @tableValueColumnBinding type                        *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_tableValueColumnBinding ("tableValueColumnBinding",
                                                NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_tableValueColumnBinding::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_tableValueColumnBinding ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_tableValueColumnBinding::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_tableValueColumnBinding (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_tableValueColumnBinding GALGAS_tableValueColumnBinding::extractObject (const GALGAS_object & inObject,
                                                                              C_Compiler * inCompiler
                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_tableValueColumnBinding result ;
  const GALGAS_tableValueColumnBinding * p = (const GALGAS_tableValueColumnBinding *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_tableValueColumnBinding *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("tableValueColumnBinding", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//                  Class for element of '@bindingList' list                   *
//                                                                             *
//-----------------------------------------------------------------------------*

class cCollectionElement_bindingList : public cCollectionElement {
  public : GALGAS_bindingList_2D_element mObject ;

//--- Constructor
  public : cCollectionElement_bindingList (const GALGAS_abstractBinding & in_mBinding
                                           COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const int32_t inIndentation) const ;
} ;

//-----------------------------------------------------------------------------*

cCollectionElement_bindingList::cCollectionElement_bindingList (const GALGAS_abstractBinding & in_mBinding
                                                                COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mBinding) {
}

//-----------------------------------------------------------------------------*

bool cCollectionElement_bindingList::isValid (void) const {
  return mObject.isValid () ;
}

//-----------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_bindingList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_bindingList (mObject.mAttribute_mBinding COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cCollectionElement_bindingList::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mBinding" ":" ;
  mObject.mAttribute_mBinding.description (ioString, inIndentation) ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_bindingList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_bindingList * operand = (cCollectionElement_bindingList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_bindingList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//-----------------------------------------------------------------------------*

GALGAS_bindingList::GALGAS_bindingList (void) :
AC_GALGAS_list () {
}

//-----------------------------------------------------------------------------*

GALGAS_bindingList::GALGAS_bindingList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_bindingList GALGAS_bindingList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_bindingList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_bindingList GALGAS_bindingList::constructor_listWithValue (const GALGAS_abstractBinding & inOperand0
                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_bindingList result ;
  if (inOperand0.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_bindingList::makeAttributesFromObjects (attributes, inOperand0 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_bindingList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                    const GALGAS_abstractBinding & in_mBinding
                                                    COMMA_LOCATION_ARGS) {
  cCollectionElement_bindingList * p = NULL ;
  macroMyNew (p, cCollectionElement_bindingList (in_mBinding COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//-----------------------------------------------------------------------------*

void GALGAS_bindingList::addAssign_operation (const GALGAS_abstractBinding & inOperand0
                                              COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_bindingList (inOperand0 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_bindingList::modifier_insertAtIndex (const GALGAS_abstractBinding inOperand0,
                                                 const GALGAS_uint inInsertionIndex,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) {
  if (isValid () && inInsertionIndex.isValid () && inOperand0.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_bindingList (inOperand0 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObjectAtIndex (attributes, inInsertionIndex.uintValue (), inCompiler COMMA_THERE) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_bindingList::modifier_removeAtIndex (GALGAS_abstractBinding & outOperand0,
                                                 const GALGAS_uint inRemoveIndex,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) {
  if (isValid () && inRemoveIndex.isValid ()) {
    capCollectionElement attributes ;
    removeObjectAtIndex (attributes, inRemoveIndex.uintValue (), inCompiler COMMA_THERE) ;
    cCollectionElement_bindingList * p = (cCollectionElement_bindingList *) attributes.ptr () ;
    if (NULL == p) {
      outOperand0.drop () ;
    }else{
      macroValidSharedObject (p, cCollectionElement_bindingList) ;
      outOperand0 = p->mObject.mAttribute_mBinding ;
    }
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_bindingList::modifier_popFirst (GALGAS_abstractBinding & outOperand0,
                                            C_Compiler * inCompiler
                                            COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_bindingList * p = (cCollectionElement_bindingList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_bindingList) ;
    outOperand0 = p->mObject.mAttribute_mBinding ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_bindingList::modifier_popLast (GALGAS_abstractBinding & outOperand0,
                                           C_Compiler * inCompiler
                                           COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_bindingList * p = (cCollectionElement_bindingList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_bindingList) ;
    outOperand0 = p->mObject.mAttribute_mBinding ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_bindingList::method_first (GALGAS_abstractBinding & outOperand0,
                                       C_Compiler * inCompiler
                                       COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_bindingList * p = (cCollectionElement_bindingList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_bindingList) ;
    outOperand0 = p->mObject.mAttribute_mBinding ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_bindingList::method_last (GALGAS_abstractBinding & outOperand0,
                                      C_Compiler * inCompiler
                                      COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_bindingList * p = (cCollectionElement_bindingList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_bindingList) ;
    outOperand0 = p->mObject.mAttribute_mBinding ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_bindingList GALGAS_bindingList::operator_concat (const GALGAS_bindingList & inOperand
                                                        COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_bindingList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_bindingList GALGAS_bindingList::add_operation (const GALGAS_bindingList & inOperand,
                                                      C_Compiler * /* inCompiler */
                                                      COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_bindingList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_bindingList GALGAS_bindingList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) const {
  GALGAS_bindingList result = GALGAS_bindingList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_bindingList GALGAS_bindingList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) const {
  GALGAS_bindingList result = GALGAS_bindingList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_bindingList::dotAssign_operation (const GALGAS_bindingList inOperand
                                              COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//-----------------------------------------------------------------------------*

GALGAS_abstractBinding GALGAS_bindingList::reader_mBindingAtIndex (const GALGAS_uint & inIndex,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_bindingList * p = (cCollectionElement_bindingList *) attributes.ptr () ;
  GALGAS_abstractBinding result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_bindingList) ;
    result = p->mObject.mAttribute_mBinding ;
  }
  return result ;
}



//-----------------------------------------------------------------------------*

cEnumerator_bindingList::cEnumerator_bindingList (const GALGAS_bindingList & inEnumeratedObject,
                                                  const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_bindingList_2D_element cEnumerator_bindingList::current (LOCATION_ARGS) const {
  const cCollectionElement_bindingList * p = (const cCollectionElement_bindingList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_bindingList) ;
  return p->mObject ;
}


//-----------------------------------------------------------------------------*

GALGAS_abstractBinding cEnumerator_bindingList::current_mBinding (LOCATION_ARGS) const {
  const cCollectionElement_bindingList * p = (const cCollectionElement_bindingList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_bindingList) ;
  return p->mObject.mAttribute_mBinding ;
}




//-----------------------------------------------------------------------------*
//                                                                             *
//                              @bindingList type                              *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_bindingList ("bindingList",
                                    NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_bindingList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_bindingList ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_bindingList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_bindingList (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_bindingList GALGAS_bindingList::extractObject (const GALGAS_object & inObject,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) {
  GALGAS_bindingList result ;
  const GALGAS_bindingList * p = (const GALGAS_bindingList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_bindingList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("bindingList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//             Class for element of '@outletDeclarationList' list              *
//                                                                             *
//-----------------------------------------------------------------------------*

class cCollectionElement_outletDeclarationList : public cCollectionElement {
  public : GALGAS_outletDeclarationList_2D_element mObject ;

//--- Constructor
  public : cCollectionElement_outletDeclarationList (const GALGAS_lstring & in_mOutletType,
                                                     const GALGAS_lstring & in_mOutletName,
                                                     const GALGAS_bindingList & in_mOutletBindingList
                                                     COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const int32_t inIndentation) const ;
} ;

//-----------------------------------------------------------------------------*

cCollectionElement_outletDeclarationList::cCollectionElement_outletDeclarationList (const GALGAS_lstring & in_mOutletType,
                                                                                    const GALGAS_lstring & in_mOutletName,
                                                                                    const GALGAS_bindingList & in_mOutletBindingList
                                                                                    COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mOutletType, in_mOutletName, in_mOutletBindingList) {
}

//-----------------------------------------------------------------------------*

bool cCollectionElement_outletDeclarationList::isValid (void) const {
  return mObject.isValid () ;
}

//-----------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_outletDeclarationList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_outletDeclarationList (mObject.mAttribute_mOutletType, mObject.mAttribute_mOutletName, mObject.mAttribute_mOutletBindingList COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cCollectionElement_outletDeclarationList::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mOutletType" ":" ;
  mObject.mAttribute_mOutletType.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mOutletName" ":" ;
  mObject.mAttribute_mOutletName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mOutletBindingList" ":" ;
  mObject.mAttribute_mOutletBindingList.description (ioString, inIndentation) ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_outletDeclarationList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_outletDeclarationList * operand = (cCollectionElement_outletDeclarationList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_outletDeclarationList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletDeclarationList::GALGAS_outletDeclarationList (void) :
AC_GALGAS_list () {
}

//-----------------------------------------------------------------------------*

GALGAS_outletDeclarationList::GALGAS_outletDeclarationList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_outletDeclarationList GALGAS_outletDeclarationList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_outletDeclarationList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletDeclarationList GALGAS_outletDeclarationList::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                                                      const GALGAS_lstring & inOperand1,
                                                                                      const GALGAS_bindingList & inOperand2
                                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_outletDeclarationList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_outletDeclarationList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_outletDeclarationList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                              const GALGAS_lstring & in_mOutletType,
                                                              const GALGAS_lstring & in_mOutletName,
                                                              const GALGAS_bindingList & in_mOutletBindingList
                                                              COMMA_LOCATION_ARGS) {
  cCollectionElement_outletDeclarationList * p = NULL ;
  macroMyNew (p, cCollectionElement_outletDeclarationList (in_mOutletType,
                                                           in_mOutletName,
                                                           in_mOutletBindingList COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//-----------------------------------------------------------------------------*

void GALGAS_outletDeclarationList::addAssign_operation (const GALGAS_lstring & inOperand0,
                                                        const GALGAS_lstring & inOperand1,
                                                        const GALGAS_bindingList & inOperand2
                                                        COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_outletDeclarationList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_outletDeclarationList::modifier_insertAtIndex (const GALGAS_lstring inOperand0,
                                                           const GALGAS_lstring inOperand1,
                                                           const GALGAS_bindingList inOperand2,
                                                           const GALGAS_uint inInsertionIndex,
                                                           C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) {
  if (isValid () && inInsertionIndex.isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_outletDeclarationList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObjectAtIndex (attributes, inInsertionIndex.uintValue (), inCompiler COMMA_THERE) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_outletDeclarationList::modifier_removeAtIndex (GALGAS_lstring & outOperand0,
                                                           GALGAS_lstring & outOperand1,
                                                           GALGAS_bindingList & outOperand2,
                                                           const GALGAS_uint inRemoveIndex,
                                                           C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) {
  if (isValid () && inRemoveIndex.isValid ()) {
    capCollectionElement attributes ;
    removeObjectAtIndex (attributes, inRemoveIndex.uintValue (), inCompiler COMMA_THERE) ;
    cCollectionElement_outletDeclarationList * p = (cCollectionElement_outletDeclarationList *) attributes.ptr () ;
    if (NULL == p) {
      outOperand0.drop () ;
      outOperand1.drop () ;
      outOperand2.drop () ;
    }else{
      macroValidSharedObject (p, cCollectionElement_outletDeclarationList) ;
      outOperand0 = p->mObject.mAttribute_mOutletType ;
      outOperand1 = p->mObject.mAttribute_mOutletName ;
      outOperand2 = p->mObject.mAttribute_mOutletBindingList ;
    }
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_outletDeclarationList::modifier_popFirst (GALGAS_lstring & outOperand0,
                                                      GALGAS_lstring & outOperand1,
                                                      GALGAS_bindingList & outOperand2,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletDeclarationList * p = (cCollectionElement_outletDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletDeclarationList) ;
    outOperand0 = p->mObject.mAttribute_mOutletType ;
    outOperand1 = p->mObject.mAttribute_mOutletName ;
    outOperand2 = p->mObject.mAttribute_mOutletBindingList ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_outletDeclarationList::modifier_popLast (GALGAS_lstring & outOperand0,
                                                     GALGAS_lstring & outOperand1,
                                                     GALGAS_bindingList & outOperand2,
                                                     C_Compiler * inCompiler
                                                     COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletDeclarationList * p = (cCollectionElement_outletDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletDeclarationList) ;
    outOperand0 = p->mObject.mAttribute_mOutletType ;
    outOperand1 = p->mObject.mAttribute_mOutletName ;
    outOperand2 = p->mObject.mAttribute_mOutletBindingList ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_outletDeclarationList::method_first (GALGAS_lstring & outOperand0,
                                                 GALGAS_lstring & outOperand1,
                                                 GALGAS_bindingList & outOperand2,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletDeclarationList * p = (cCollectionElement_outletDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletDeclarationList) ;
    outOperand0 = p->mObject.mAttribute_mOutletType ;
    outOperand1 = p->mObject.mAttribute_mOutletName ;
    outOperand2 = p->mObject.mAttribute_mOutletBindingList ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_outletDeclarationList::method_last (GALGAS_lstring & outOperand0,
                                                GALGAS_lstring & outOperand1,
                                                GALGAS_bindingList & outOperand2,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletDeclarationList * p = (cCollectionElement_outletDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletDeclarationList) ;
    outOperand0 = p->mObject.mAttribute_mOutletType ;
    outOperand1 = p->mObject.mAttribute_mOutletName ;
    outOperand2 = p->mObject.mAttribute_mOutletBindingList ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_outletDeclarationList GALGAS_outletDeclarationList::operator_concat (const GALGAS_outletDeclarationList & inOperand
                                                                            COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_outletDeclarationList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletDeclarationList GALGAS_outletDeclarationList::add_operation (const GALGAS_outletDeclarationList & inOperand,
                                                                          C_Compiler * /* inCompiler */
                                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_outletDeclarationList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletDeclarationList GALGAS_outletDeclarationList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                                    C_Compiler * inCompiler
                                                                                    COMMA_LOCATION_ARGS) const {
  GALGAS_outletDeclarationList result = GALGAS_outletDeclarationList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletDeclarationList GALGAS_outletDeclarationList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                    C_Compiler * inCompiler
                                                                                    COMMA_LOCATION_ARGS) const {
  GALGAS_outletDeclarationList result = GALGAS_outletDeclarationList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_outletDeclarationList::dotAssign_operation (const GALGAS_outletDeclarationList inOperand
                                                        COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_outletDeclarationList::reader_mOutletTypeAtIndex (const GALGAS_uint & inIndex,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_outletDeclarationList * p = (cCollectionElement_outletDeclarationList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_outletDeclarationList) ;
    result = p->mObject.mAttribute_mOutletType ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_outletDeclarationList::reader_mOutletNameAtIndex (const GALGAS_uint & inIndex,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_outletDeclarationList * p = (cCollectionElement_outletDeclarationList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_outletDeclarationList) ;
    result = p->mObject.mAttribute_mOutletName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_bindingList GALGAS_outletDeclarationList::reader_mOutletBindingListAtIndex (const GALGAS_uint & inIndex,
                                                                                   C_Compiler * inCompiler
                                                                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_outletDeclarationList * p = (cCollectionElement_outletDeclarationList *) attributes.ptr () ;
  GALGAS_bindingList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_outletDeclarationList) ;
    result = p->mObject.mAttribute_mOutletBindingList ;
  }
  return result ;
}



//-----------------------------------------------------------------------------*

cEnumerator_outletDeclarationList::cEnumerator_outletDeclarationList (const GALGAS_outletDeclarationList & inEnumeratedObject,
                                                                      const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletDeclarationList_2D_element cEnumerator_outletDeclarationList::current (LOCATION_ARGS) const {
  const cCollectionElement_outletDeclarationList * p = (const cCollectionElement_outletDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_outletDeclarationList) ;
  return p->mObject ;
}


//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_outletDeclarationList::current_mOutletType (LOCATION_ARGS) const {
  const cCollectionElement_outletDeclarationList * p = (const cCollectionElement_outletDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_outletDeclarationList) ;
  return p->mObject.mAttribute_mOutletType ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_outletDeclarationList::current_mOutletName (LOCATION_ARGS) const {
  const cCollectionElement_outletDeclarationList * p = (const cCollectionElement_outletDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_outletDeclarationList) ;
  return p->mObject.mAttribute_mOutletName ;
}

//-----------------------------------------------------------------------------*

GALGAS_bindingList cEnumerator_outletDeclarationList::current_mOutletBindingList (LOCATION_ARGS) const {
  const cCollectionElement_outletDeclarationList * p = (const cCollectionElement_outletDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_outletDeclarationList) ;
  return p->mObject.mAttribute_mOutletBindingList ;
}




//-----------------------------------------------------------------------------*
//                                                                             *
//                         @outletDeclarationList type                         *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_outletDeclarationList ("outletDeclarationList",
                                              NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_outletDeclarationList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_outletDeclarationList ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_outletDeclarationList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_outletDeclarationList (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletDeclarationList GALGAS_outletDeclarationList::extractObject (const GALGAS_object & inObject,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_outletDeclarationList result ;
  const GALGAS_outletDeclarationList * p = (const GALGAS_outletDeclarationList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_outletDeclarationList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("outletDeclarationList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//                 Class for element of '@controllerList' list                 *
//                                                                             *
//-----------------------------------------------------------------------------*

class cCollectionElement_controllerList : public cCollectionElement {
  public : GALGAS_controllerList_2D_element mObject ;

//--- Constructor
  public : cCollectionElement_controllerList (const GALGAS_controllerKind & in_mControllerKind,
                                              const GALGAS_lstring & in_mControllerClassName,
                                              const GALGAS_lstring & in_mControllerName,
                                              const GALGAS_lbool & in_mIsRootObject,
                                              const GALGAS_lstring & in_mControlledObjectName,
                                              const GALGAS_outletBindingOptionList & in_mControlledObjectBindingOptionList,
                                              const GALGAS_bindingList & in_mControllerBindingList,
                                              const GALGAS_lstring & in_mChildRelationshipName
                                              COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const int32_t inIndentation) const ;
} ;

//-----------------------------------------------------------------------------*

cCollectionElement_controllerList::cCollectionElement_controllerList (const GALGAS_controllerKind & in_mControllerKind,
                                                                      const GALGAS_lstring & in_mControllerClassName,
                                                                      const GALGAS_lstring & in_mControllerName,
                                                                      const GALGAS_lbool & in_mIsRootObject,
                                                                      const GALGAS_lstring & in_mControlledObjectName,
                                                                      const GALGAS_outletBindingOptionList & in_mControlledObjectBindingOptionList,
                                                                      const GALGAS_bindingList & in_mControllerBindingList,
                                                                      const GALGAS_lstring & in_mChildRelationshipName
                                                                      COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mControllerKind, in_mControllerClassName, in_mControllerName, in_mIsRootObject, in_mControlledObjectName, in_mControlledObjectBindingOptionList, in_mControllerBindingList, in_mChildRelationshipName) {
}

//-----------------------------------------------------------------------------*

bool cCollectionElement_controllerList::isValid (void) const {
  return mObject.isValid () ;
}

//-----------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_controllerList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_controllerList (mObject.mAttribute_mControllerKind, mObject.mAttribute_mControllerClassName, mObject.mAttribute_mControllerName, mObject.mAttribute_mIsRootObject, mObject.mAttribute_mControlledObjectName, mObject.mAttribute_mControlledObjectBindingOptionList, mObject.mAttribute_mControllerBindingList, mObject.mAttribute_mChildRelationshipName COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cCollectionElement_controllerList::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mControllerKind" ":" ;
  mObject.mAttribute_mControllerKind.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mControllerClassName" ":" ;
  mObject.mAttribute_mControllerClassName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mControllerName" ":" ;
  mObject.mAttribute_mControllerName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mIsRootObject" ":" ;
  mObject.mAttribute_mIsRootObject.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mControlledObjectName" ":" ;
  mObject.mAttribute_mControlledObjectName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mControlledObjectBindingOptionList" ":" ;
  mObject.mAttribute_mControlledObjectBindingOptionList.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mControllerBindingList" ":" ;
  mObject.mAttribute_mControllerBindingList.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mChildRelationshipName" ":" ;
  mObject.mAttribute_mChildRelationshipName.description (ioString, inIndentation) ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_controllerList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_controllerList * operand = (cCollectionElement_controllerList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_controllerList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//-----------------------------------------------------------------------------*

GALGAS_controllerList::GALGAS_controllerList (void) :
AC_GALGAS_list () {
}

//-----------------------------------------------------------------------------*

GALGAS_controllerList::GALGAS_controllerList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_controllerList GALGAS_controllerList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_controllerList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_controllerList GALGAS_controllerList::constructor_listWithValue (const GALGAS_controllerKind & inOperand0,
                                                                        const GALGAS_lstring & inOperand1,
                                                                        const GALGAS_lstring & inOperand2,
                                                                        const GALGAS_lbool & inOperand3,
                                                                        const GALGAS_lstring & inOperand4,
                                                                        const GALGAS_outletBindingOptionList & inOperand5,
                                                                        const GALGAS_bindingList & inOperand6,
                                                                        const GALGAS_lstring & inOperand7
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_controllerList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid () && inOperand6.isValid () && inOperand7.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_controllerList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5, inOperand6, inOperand7 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_controllerList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                       const GALGAS_controllerKind & in_mControllerKind,
                                                       const GALGAS_lstring & in_mControllerClassName,
                                                       const GALGAS_lstring & in_mControllerName,
                                                       const GALGAS_lbool & in_mIsRootObject,
                                                       const GALGAS_lstring & in_mControlledObjectName,
                                                       const GALGAS_outletBindingOptionList & in_mControlledObjectBindingOptionList,
                                                       const GALGAS_bindingList & in_mControllerBindingList,
                                                       const GALGAS_lstring & in_mChildRelationshipName
                                                       COMMA_LOCATION_ARGS) {
  cCollectionElement_controllerList * p = NULL ;
  macroMyNew (p, cCollectionElement_controllerList (in_mControllerKind,
                                                    in_mControllerClassName,
                                                    in_mControllerName,
                                                    in_mIsRootObject,
                                                    in_mControlledObjectName,
                                                    in_mControlledObjectBindingOptionList,
                                                    in_mControllerBindingList,
                                                    in_mChildRelationshipName COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//-----------------------------------------------------------------------------*

void GALGAS_controllerList::addAssign_operation (const GALGAS_controllerKind & inOperand0,
                                                 const GALGAS_lstring & inOperand1,
                                                 const GALGAS_lstring & inOperand2,
                                                 const GALGAS_lbool & inOperand3,
                                                 const GALGAS_lstring & inOperand4,
                                                 const GALGAS_outletBindingOptionList & inOperand5,
                                                 const GALGAS_bindingList & inOperand6,
                                                 const GALGAS_lstring & inOperand7
                                                 COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid () && inOperand6.isValid () && inOperand7.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_controllerList (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5, inOperand6, inOperand7 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_controllerList::modifier_insertAtIndex (const GALGAS_controllerKind inOperand0,
                                                    const GALGAS_lstring inOperand1,
                                                    const GALGAS_lstring inOperand2,
                                                    const GALGAS_lbool inOperand3,
                                                    const GALGAS_lstring inOperand4,
                                                    const GALGAS_outletBindingOptionList inOperand5,
                                                    const GALGAS_bindingList inOperand6,
                                                    const GALGAS_lstring inOperand7,
                                                    const GALGAS_uint inInsertionIndex,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) {
  if (isValid () && inInsertionIndex.isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid () && inOperand6.isValid () && inOperand7.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_controllerList (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5, inOperand6, inOperand7 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObjectAtIndex (attributes, inInsertionIndex.uintValue (), inCompiler COMMA_THERE) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_controllerList::modifier_removeAtIndex (GALGAS_controllerKind & outOperand0,
                                                    GALGAS_lstring & outOperand1,
                                                    GALGAS_lstring & outOperand2,
                                                    GALGAS_lbool & outOperand3,
                                                    GALGAS_lstring & outOperand4,
                                                    GALGAS_outletBindingOptionList & outOperand5,
                                                    GALGAS_bindingList & outOperand6,
                                                    GALGAS_lstring & outOperand7,
                                                    const GALGAS_uint inRemoveIndex,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) {
  if (isValid () && inRemoveIndex.isValid ()) {
    capCollectionElement attributes ;
    removeObjectAtIndex (attributes, inRemoveIndex.uintValue (), inCompiler COMMA_THERE) ;
    cCollectionElement_controllerList * p = (cCollectionElement_controllerList *) attributes.ptr () ;
    if (NULL == p) {
      outOperand0.drop () ;
      outOperand1.drop () ;
      outOperand2.drop () ;
      outOperand3.drop () ;
      outOperand4.drop () ;
      outOperand5.drop () ;
      outOperand6.drop () ;
      outOperand7.drop () ;
    }else{
      macroValidSharedObject (p, cCollectionElement_controllerList) ;
      outOperand0 = p->mObject.mAttribute_mControllerKind ;
      outOperand1 = p->mObject.mAttribute_mControllerClassName ;
      outOperand2 = p->mObject.mAttribute_mControllerName ;
      outOperand3 = p->mObject.mAttribute_mIsRootObject ;
      outOperand4 = p->mObject.mAttribute_mControlledObjectName ;
      outOperand5 = p->mObject.mAttribute_mControlledObjectBindingOptionList ;
      outOperand6 = p->mObject.mAttribute_mControllerBindingList ;
      outOperand7 = p->mObject.mAttribute_mChildRelationshipName ;
    }
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_controllerList::modifier_popFirst (GALGAS_controllerKind & outOperand0,
                                               GALGAS_lstring & outOperand1,
                                               GALGAS_lstring & outOperand2,
                                               GALGAS_lbool & outOperand3,
                                               GALGAS_lstring & outOperand4,
                                               GALGAS_outletBindingOptionList & outOperand5,
                                               GALGAS_bindingList & outOperand6,
                                               GALGAS_lstring & outOperand7,
                                               C_Compiler * inCompiler
                                               COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerList * p = (cCollectionElement_controllerList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
    outOperand6.drop () ;
    outOperand7.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_controllerList) ;
    outOperand0 = p->mObject.mAttribute_mControllerKind ;
    outOperand1 = p->mObject.mAttribute_mControllerClassName ;
    outOperand2 = p->mObject.mAttribute_mControllerName ;
    outOperand3 = p->mObject.mAttribute_mIsRootObject ;
    outOperand4 = p->mObject.mAttribute_mControlledObjectName ;
    outOperand5 = p->mObject.mAttribute_mControlledObjectBindingOptionList ;
    outOperand6 = p->mObject.mAttribute_mControllerBindingList ;
    outOperand7 = p->mObject.mAttribute_mChildRelationshipName ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_controllerList::modifier_popLast (GALGAS_controllerKind & outOperand0,
                                              GALGAS_lstring & outOperand1,
                                              GALGAS_lstring & outOperand2,
                                              GALGAS_lbool & outOperand3,
                                              GALGAS_lstring & outOperand4,
                                              GALGAS_outletBindingOptionList & outOperand5,
                                              GALGAS_bindingList & outOperand6,
                                              GALGAS_lstring & outOperand7,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerList * p = (cCollectionElement_controllerList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
    outOperand6.drop () ;
    outOperand7.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_controllerList) ;
    outOperand0 = p->mObject.mAttribute_mControllerKind ;
    outOperand1 = p->mObject.mAttribute_mControllerClassName ;
    outOperand2 = p->mObject.mAttribute_mControllerName ;
    outOperand3 = p->mObject.mAttribute_mIsRootObject ;
    outOperand4 = p->mObject.mAttribute_mControlledObjectName ;
    outOperand5 = p->mObject.mAttribute_mControlledObjectBindingOptionList ;
    outOperand6 = p->mObject.mAttribute_mControllerBindingList ;
    outOperand7 = p->mObject.mAttribute_mChildRelationshipName ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_controllerList::method_first (GALGAS_controllerKind & outOperand0,
                                          GALGAS_lstring & outOperand1,
                                          GALGAS_lstring & outOperand2,
                                          GALGAS_lbool & outOperand3,
                                          GALGAS_lstring & outOperand4,
                                          GALGAS_outletBindingOptionList & outOperand5,
                                          GALGAS_bindingList & outOperand6,
                                          GALGAS_lstring & outOperand7,
                                          C_Compiler * inCompiler
                                          COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerList * p = (cCollectionElement_controllerList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
    outOperand6.drop () ;
    outOperand7.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_controllerList) ;
    outOperand0 = p->mObject.mAttribute_mControllerKind ;
    outOperand1 = p->mObject.mAttribute_mControllerClassName ;
    outOperand2 = p->mObject.mAttribute_mControllerName ;
    outOperand3 = p->mObject.mAttribute_mIsRootObject ;
    outOperand4 = p->mObject.mAttribute_mControlledObjectName ;
    outOperand5 = p->mObject.mAttribute_mControlledObjectBindingOptionList ;
    outOperand6 = p->mObject.mAttribute_mControllerBindingList ;
    outOperand7 = p->mObject.mAttribute_mChildRelationshipName ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_controllerList::method_last (GALGAS_controllerKind & outOperand0,
                                         GALGAS_lstring & outOperand1,
                                         GALGAS_lstring & outOperand2,
                                         GALGAS_lbool & outOperand3,
                                         GALGAS_lstring & outOperand4,
                                         GALGAS_outletBindingOptionList & outOperand5,
                                         GALGAS_bindingList & outOperand6,
                                         GALGAS_lstring & outOperand7,
                                         C_Compiler * inCompiler
                                         COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerList * p = (cCollectionElement_controllerList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
    outOperand6.drop () ;
    outOperand7.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_controllerList) ;
    outOperand0 = p->mObject.mAttribute_mControllerKind ;
    outOperand1 = p->mObject.mAttribute_mControllerClassName ;
    outOperand2 = p->mObject.mAttribute_mControllerName ;
    outOperand3 = p->mObject.mAttribute_mIsRootObject ;
    outOperand4 = p->mObject.mAttribute_mControlledObjectName ;
    outOperand5 = p->mObject.mAttribute_mControlledObjectBindingOptionList ;
    outOperand6 = p->mObject.mAttribute_mControllerBindingList ;
    outOperand7 = p->mObject.mAttribute_mChildRelationshipName ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_controllerList GALGAS_controllerList::operator_concat (const GALGAS_controllerList & inOperand
                                                              COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_controllerList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_controllerList GALGAS_controllerList::add_operation (const GALGAS_controllerList & inOperand,
                                                            C_Compiler * /* inCompiler */
                                                            COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_controllerList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_controllerList GALGAS_controllerList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) const {
  GALGAS_controllerList result = GALGAS_controllerList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_controllerList GALGAS_controllerList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) const {
  GALGAS_controllerList result = GALGAS_controllerList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_controllerList::dotAssign_operation (const GALGAS_controllerList inOperand
                                                 COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//-----------------------------------------------------------------------------*

GALGAS_controllerKind GALGAS_controllerList::reader_mControllerKindAtIndex (const GALGAS_uint & inIndex,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerList * p = (cCollectionElement_controllerList *) attributes.ptr () ;
  GALGAS_controllerKind result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_controllerList) ;
    result = p->mObject.mAttribute_mControllerKind ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_controllerList::reader_mControllerClassNameAtIndex (const GALGAS_uint & inIndex,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerList * p = (cCollectionElement_controllerList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_controllerList) ;
    result = p->mObject.mAttribute_mControllerClassName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_controllerList::reader_mControllerNameAtIndex (const GALGAS_uint & inIndex,
                                                                     C_Compiler * inCompiler
                                                                     COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerList * p = (cCollectionElement_controllerList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_controllerList) ;
    result = p->mObject.mAttribute_mControllerName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lbool GALGAS_controllerList::reader_mIsRootObjectAtIndex (const GALGAS_uint & inIndex,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerList * p = (cCollectionElement_controllerList *) attributes.ptr () ;
  GALGAS_lbool result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_controllerList) ;
    result = p->mObject.mAttribute_mIsRootObject ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_controllerList::reader_mControlledObjectNameAtIndex (const GALGAS_uint & inIndex,
                                                                           C_Compiler * inCompiler
                                                                           COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerList * p = (cCollectionElement_controllerList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_controllerList) ;
    result = p->mObject.mAttribute_mControlledObjectName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletBindingOptionList GALGAS_controllerList::reader_mControlledObjectBindingOptionListAtIndex (const GALGAS_uint & inIndex,
                                                                                                        C_Compiler * inCompiler
                                                                                                        COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerList * p = (cCollectionElement_controllerList *) attributes.ptr () ;
  GALGAS_outletBindingOptionList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_controllerList) ;
    result = p->mObject.mAttribute_mControlledObjectBindingOptionList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_bindingList GALGAS_controllerList::reader_mControllerBindingListAtIndex (const GALGAS_uint & inIndex,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerList * p = (cCollectionElement_controllerList *) attributes.ptr () ;
  GALGAS_bindingList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_controllerList) ;
    result = p->mObject.mAttribute_mControllerBindingList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_controllerList::reader_mChildRelationshipNameAtIndex (const GALGAS_uint & inIndex,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerList * p = (cCollectionElement_controllerList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_controllerList) ;
    result = p->mObject.mAttribute_mChildRelationshipName ;
  }
  return result ;
}



//-----------------------------------------------------------------------------*

cEnumerator_controllerList::cEnumerator_controllerList (const GALGAS_controllerList & inEnumeratedObject,
                                                        const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_controllerList_2D_element cEnumerator_controllerList::current (LOCATION_ARGS) const {
  const cCollectionElement_controllerList * p = (const cCollectionElement_controllerList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_controllerList) ;
  return p->mObject ;
}


//-----------------------------------------------------------------------------*

GALGAS_controllerKind cEnumerator_controllerList::current_mControllerKind (LOCATION_ARGS) const {
  const cCollectionElement_controllerList * p = (const cCollectionElement_controllerList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_controllerList) ;
  return p->mObject.mAttribute_mControllerKind ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_controllerList::current_mControllerClassName (LOCATION_ARGS) const {
  const cCollectionElement_controllerList * p = (const cCollectionElement_controllerList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_controllerList) ;
  return p->mObject.mAttribute_mControllerClassName ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_controllerList::current_mControllerName (LOCATION_ARGS) const {
  const cCollectionElement_controllerList * p = (const cCollectionElement_controllerList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_controllerList) ;
  return p->mObject.mAttribute_mControllerName ;
}

//-----------------------------------------------------------------------------*

GALGAS_lbool cEnumerator_controllerList::current_mIsRootObject (LOCATION_ARGS) const {
  const cCollectionElement_controllerList * p = (const cCollectionElement_controllerList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_controllerList) ;
  return p->mObject.mAttribute_mIsRootObject ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_controllerList::current_mControlledObjectName (LOCATION_ARGS) const {
  const cCollectionElement_controllerList * p = (const cCollectionElement_controllerList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_controllerList) ;
  return p->mObject.mAttribute_mControlledObjectName ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletBindingOptionList cEnumerator_controllerList::current_mControlledObjectBindingOptionList (LOCATION_ARGS) const {
  const cCollectionElement_controllerList * p = (const cCollectionElement_controllerList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_controllerList) ;
  return p->mObject.mAttribute_mControlledObjectBindingOptionList ;
}

//-----------------------------------------------------------------------------*

GALGAS_bindingList cEnumerator_controllerList::current_mControllerBindingList (LOCATION_ARGS) const {
  const cCollectionElement_controllerList * p = (const cCollectionElement_controllerList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_controllerList) ;
  return p->mObject.mAttribute_mControllerBindingList ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_controllerList::current_mChildRelationshipName (LOCATION_ARGS) const {
  const cCollectionElement_controllerList * p = (const cCollectionElement_controllerList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_controllerList) ;
  return p->mObject.mAttribute_mChildRelationshipName ;
}




//-----------------------------------------------------------------------------*
//                                                                             *
//                            @controllerList type                             *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_controllerList ("controllerList",
                                       NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_controllerList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_controllerList ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_controllerList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_controllerList (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_controllerList GALGAS_controllerList::extractObject (const GALGAS_object & inObject,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) {
  GALGAS_controllerList result ;
  const GALGAS_controllerList * p = (const GALGAS_controllerList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_controllerList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("controllerList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_formatterEnum::GALGAS_formatterEnum (void) :
mEnum (kNotBuilt) {
}

//-----------------------------------------------------------------------------*

GALGAS_formatterEnum GALGAS_formatterEnum::constructor_noFormatter (UNUSED_LOCATION_ARGS) {
  GALGAS_formatterEnum result ;
  result.mEnum = kEnum_noFormatter ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_formatterEnum GALGAS_formatterEnum::constructor_numberFormatter (UNUSED_LOCATION_ARGS) {
  GALGAS_formatterEnum result ;
  result.mEnum = kEnum_numberFormatter ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_formatterEnum GALGAS_formatterEnum::constructor_dateFormatter (UNUSED_LOCATION_ARGS) {
  GALGAS_formatterEnum result ;
  result.mEnum = kEnum_dateFormatter ;
  return result ;
}

//-----------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_formatterEnum [4] = {
  "(not built)",
  "noFormatter",
  "numberFormatter",
  "dateFormatter"
} ;

//-----------------------------------------------------------------------------*

void GALGAS_formatterEnum::description (C_String & ioString,
                                        const int32_t /* inIndentation */) const {
  ioString << "<enum @formatterEnum: " << gEnumNameArrayFor_formatterEnum [mEnum] << ">" ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_formatterEnum::objectCompare (const GALGAS_formatterEnum & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = kOperandEqual ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//                             @formatterEnum type                             *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_formatterEnum ("formatterEnum",
                                      NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_formatterEnum::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_formatterEnum ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_formatterEnum::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_formatterEnum (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_formatterEnum GALGAS_formatterEnum::extractObject (const GALGAS_object & inObject,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) {
  GALGAS_formatterEnum result ;
  const GALGAS_formatterEnum * p = (const GALGAS_formatterEnum *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_formatterEnum *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("formatterEnum", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//        Class for element of '@attributeASTTypeAndFormatterList' list        *
//                                                                             *
//-----------------------------------------------------------------------------*

class cCollectionElement_attributeASTTypeAndFormatterList : public cCollectionElement {
  public : GALGAS_attributeASTTypeAndFormatterList_2D_element mObject ;

//--- Constructor
  public : cCollectionElement_attributeASTTypeAndFormatterList (const GALGAS_lstring & in_mTypeName,
                                                                const GALGAS_formatterEnum & in_mRequiredFormatter
                                                                COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const int32_t inIndentation) const ;
} ;

//-----------------------------------------------------------------------------*

cCollectionElement_attributeASTTypeAndFormatterList::cCollectionElement_attributeASTTypeAndFormatterList (const GALGAS_lstring & in_mTypeName,
                                                                                                          const GALGAS_formatterEnum & in_mRequiredFormatter
                                                                                                          COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mTypeName, in_mRequiredFormatter) {
}

//-----------------------------------------------------------------------------*

bool cCollectionElement_attributeASTTypeAndFormatterList::isValid (void) const {
  return mObject.isValid () ;
}

//-----------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_attributeASTTypeAndFormatterList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_attributeASTTypeAndFormatterList (mObject.mAttribute_mTypeName, mObject.mAttribute_mRequiredFormatter COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cCollectionElement_attributeASTTypeAndFormatterList::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mTypeName" ":" ;
  mObject.mAttribute_mTypeName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mRequiredFormatter" ":" ;
  mObject.mAttribute_mRequiredFormatter.description (ioString, inIndentation) ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_attributeASTTypeAndFormatterList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_attributeASTTypeAndFormatterList * operand = (cCollectionElement_attributeASTTypeAndFormatterList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_attributeASTTypeAndFormatterList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeASTTypeAndFormatterList::GALGAS_attributeASTTypeAndFormatterList (void) :
AC_GALGAS_list () {
}

//-----------------------------------------------------------------------------*

GALGAS_attributeASTTypeAndFormatterList::GALGAS_attributeASTTypeAndFormatterList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_attributeASTTypeAndFormatterList GALGAS_attributeASTTypeAndFormatterList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_attributeASTTypeAndFormatterList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeASTTypeAndFormatterList GALGAS_attributeASTTypeAndFormatterList::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                                                                            const GALGAS_formatterEnum & inOperand1
                                                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_attributeASTTypeAndFormatterList result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_attributeASTTypeAndFormatterList::makeAttributesFromObjects (attributes, inOperand0, inOperand1 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_attributeASTTypeAndFormatterList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                                         const GALGAS_lstring & in_mTypeName,
                                                                         const GALGAS_formatterEnum & in_mRequiredFormatter
                                                                         COMMA_LOCATION_ARGS) {
  cCollectionElement_attributeASTTypeAndFormatterList * p = NULL ;
  macroMyNew (p, cCollectionElement_attributeASTTypeAndFormatterList (in_mTypeName,
                                                                      in_mRequiredFormatter COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//-----------------------------------------------------------------------------*

void GALGAS_attributeASTTypeAndFormatterList::addAssign_operation (const GALGAS_lstring & inOperand0,
                                                                   const GALGAS_formatterEnum & inOperand1
                                                                   COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_attributeASTTypeAndFormatterList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_attributeASTTypeAndFormatterList::modifier_insertAtIndex (const GALGAS_lstring inOperand0,
                                                                      const GALGAS_formatterEnum inOperand1,
                                                                      const GALGAS_uint inInsertionIndex,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) {
  if (isValid () && inInsertionIndex.isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_attributeASTTypeAndFormatterList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObjectAtIndex (attributes, inInsertionIndex.uintValue (), inCompiler COMMA_THERE) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_attributeASTTypeAndFormatterList::modifier_removeAtIndex (GALGAS_lstring & outOperand0,
                                                                      GALGAS_formatterEnum & outOperand1,
                                                                      const GALGAS_uint inRemoveIndex,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) {
  if (isValid () && inRemoveIndex.isValid ()) {
    capCollectionElement attributes ;
    removeObjectAtIndex (attributes, inRemoveIndex.uintValue (), inCompiler COMMA_THERE) ;
    cCollectionElement_attributeASTTypeAndFormatterList * p = (cCollectionElement_attributeASTTypeAndFormatterList *) attributes.ptr () ;
    if (NULL == p) {
      outOperand0.drop () ;
      outOperand1.drop () ;
    }else{
      macroValidSharedObject (p, cCollectionElement_attributeASTTypeAndFormatterList) ;
      outOperand0 = p->mObject.mAttribute_mTypeName ;
      outOperand1 = p->mObject.mAttribute_mRequiredFormatter ;
    }
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_attributeASTTypeAndFormatterList::modifier_popFirst (GALGAS_lstring & outOperand0,
                                                                 GALGAS_formatterEnum & outOperand1,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_attributeASTTypeAndFormatterList * p = (cCollectionElement_attributeASTTypeAndFormatterList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_attributeASTTypeAndFormatterList) ;
    outOperand0 = p->mObject.mAttribute_mTypeName ;
    outOperand1 = p->mObject.mAttribute_mRequiredFormatter ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_attributeASTTypeAndFormatterList::modifier_popLast (GALGAS_lstring & outOperand0,
                                                                GALGAS_formatterEnum & outOperand1,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_attributeASTTypeAndFormatterList * p = (cCollectionElement_attributeASTTypeAndFormatterList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_attributeASTTypeAndFormatterList) ;
    outOperand0 = p->mObject.mAttribute_mTypeName ;
    outOperand1 = p->mObject.mAttribute_mRequiredFormatter ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_attributeASTTypeAndFormatterList::method_first (GALGAS_lstring & outOperand0,
                                                            GALGAS_formatterEnum & outOperand1,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_attributeASTTypeAndFormatterList * p = (cCollectionElement_attributeASTTypeAndFormatterList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_attributeASTTypeAndFormatterList) ;
    outOperand0 = p->mObject.mAttribute_mTypeName ;
    outOperand1 = p->mObject.mAttribute_mRequiredFormatter ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_attributeASTTypeAndFormatterList::method_last (GALGAS_lstring & outOperand0,
                                                           GALGAS_formatterEnum & outOperand1,
                                                           C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_attributeASTTypeAndFormatterList * p = (cCollectionElement_attributeASTTypeAndFormatterList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_attributeASTTypeAndFormatterList) ;
    outOperand0 = p->mObject.mAttribute_mTypeName ;
    outOperand1 = p->mObject.mAttribute_mRequiredFormatter ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_attributeASTTypeAndFormatterList GALGAS_attributeASTTypeAndFormatterList::operator_concat (const GALGAS_attributeASTTypeAndFormatterList & inOperand
                                                                                                  COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_attributeASTTypeAndFormatterList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeASTTypeAndFormatterList GALGAS_attributeASTTypeAndFormatterList::add_operation (const GALGAS_attributeASTTypeAndFormatterList & inOperand,
                                                                                                C_Compiler * /* inCompiler */
                                                                                                COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_attributeASTTypeAndFormatterList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeASTTypeAndFormatterList GALGAS_attributeASTTypeAndFormatterList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                                                          C_Compiler * inCompiler
                                                                                                          COMMA_LOCATION_ARGS) const {
  GALGAS_attributeASTTypeAndFormatterList result = GALGAS_attributeASTTypeAndFormatterList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeASTTypeAndFormatterList GALGAS_attributeASTTypeAndFormatterList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                                          C_Compiler * inCompiler
                                                                                                          COMMA_LOCATION_ARGS) const {
  GALGAS_attributeASTTypeAndFormatterList result = GALGAS_attributeASTTypeAndFormatterList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_attributeASTTypeAndFormatterList::dotAssign_operation (const GALGAS_attributeASTTypeAndFormatterList inOperand
                                                                   COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_attributeASTTypeAndFormatterList::reader_mTypeNameAtIndex (const GALGAS_uint & inIndex,
                                                                                 C_Compiler * inCompiler
                                                                                 COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_attributeASTTypeAndFormatterList * p = (cCollectionElement_attributeASTTypeAndFormatterList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_attributeASTTypeAndFormatterList) ;
    result = p->mObject.mAttribute_mTypeName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_formatterEnum GALGAS_attributeASTTypeAndFormatterList::reader_mRequiredFormatterAtIndex (const GALGAS_uint & inIndex,
                                                                                                C_Compiler * inCompiler
                                                                                                COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_attributeASTTypeAndFormatterList * p = (cCollectionElement_attributeASTTypeAndFormatterList *) attributes.ptr () ;
  GALGAS_formatterEnum result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_attributeASTTypeAndFormatterList) ;
    result = p->mObject.mAttribute_mRequiredFormatter ;
  }
  return result ;
}



//-----------------------------------------------------------------------------*

cEnumerator_attributeASTTypeAndFormatterList::cEnumerator_attributeASTTypeAndFormatterList (const GALGAS_attributeASTTypeAndFormatterList & inEnumeratedObject,
                                                                                            const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeASTTypeAndFormatterList_2D_element cEnumerator_attributeASTTypeAndFormatterList::current (LOCATION_ARGS) const {
  const cCollectionElement_attributeASTTypeAndFormatterList * p = (const cCollectionElement_attributeASTTypeAndFormatterList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_attributeASTTypeAndFormatterList) ;
  return p->mObject ;
}


//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_attributeASTTypeAndFormatterList::current_mTypeName (LOCATION_ARGS) const {
  const cCollectionElement_attributeASTTypeAndFormatterList * p = (const cCollectionElement_attributeASTTypeAndFormatterList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_attributeASTTypeAndFormatterList) ;
  return p->mObject.mAttribute_mTypeName ;
}

//-----------------------------------------------------------------------------*

GALGAS_formatterEnum cEnumerator_attributeASTTypeAndFormatterList::current_mRequiredFormatter (LOCATION_ARGS) const {
  const cCollectionElement_attributeASTTypeAndFormatterList * p = (const cCollectionElement_attributeASTTypeAndFormatterList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_attributeASTTypeAndFormatterList) ;
  return p->mObject.mAttribute_mRequiredFormatter ;
}




//-----------------------------------------------------------------------------*
//                                                                             *
//                   @attributeASTTypeAndFormatterList type                    *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_attributeASTTypeAndFormatterList ("attributeASTTypeAndFormatterList",
                                                         NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_attributeASTTypeAndFormatterList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_attributeASTTypeAndFormatterList ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_attributeASTTypeAndFormatterList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_attributeASTTypeAndFormatterList (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeASTTypeAndFormatterList GALGAS_attributeASTTypeAndFormatterList::extractObject (const GALGAS_object & inObject,
                                                                                                C_Compiler * inCompiler
                                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_attributeASTTypeAndFormatterList result ;
  const GALGAS_attributeASTTypeAndFormatterList * p = (const GALGAS_attributeASTTypeAndFormatterList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_attributeASTTypeAndFormatterList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("attributeASTTypeAndFormatterList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//             Class for element of '@outletClassBindingList' list             *
//                                                                             *
//-----------------------------------------------------------------------------*

class cCollectionElement_outletClassBindingList : public cCollectionElement {
  public : GALGAS_outletClassBindingList_2D_element mObject ;

//--- Constructor
  public : cCollectionElement_outletClassBindingList (const GALGAS_lstring & in_mBindingName,
                                                      const GALGAS_attributeASTTypeAndFormatterList & in_mAcceptableTypeFormatterList,
                                                      const GALGAS_bindingOptionList & in_mBindingOptionList
                                                      COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const int32_t inIndentation) const ;
} ;

//-----------------------------------------------------------------------------*

cCollectionElement_outletClassBindingList::cCollectionElement_outletClassBindingList (const GALGAS_lstring & in_mBindingName,
                                                                                      const GALGAS_attributeASTTypeAndFormatterList & in_mAcceptableTypeFormatterList,
                                                                                      const GALGAS_bindingOptionList & in_mBindingOptionList
                                                                                      COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mBindingName, in_mAcceptableTypeFormatterList, in_mBindingOptionList) {
}

//-----------------------------------------------------------------------------*

bool cCollectionElement_outletClassBindingList::isValid (void) const {
  return mObject.isValid () ;
}

//-----------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_outletClassBindingList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_outletClassBindingList (mObject.mAttribute_mBindingName, mObject.mAttribute_mAcceptableTypeFormatterList, mObject.mAttribute_mBindingOptionList COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cCollectionElement_outletClassBindingList::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mBindingName" ":" ;
  mObject.mAttribute_mBindingName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mAcceptableTypeFormatterList" ":" ;
  mObject.mAttribute_mAcceptableTypeFormatterList.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mBindingOptionList" ":" ;
  mObject.mAttribute_mBindingOptionList.description (ioString, inIndentation) ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_outletClassBindingList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_outletClassBindingList * operand = (cCollectionElement_outletClassBindingList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_outletClassBindingList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletClassBindingList::GALGAS_outletClassBindingList (void) :
AC_GALGAS_list () {
}

//-----------------------------------------------------------------------------*

GALGAS_outletClassBindingList::GALGAS_outletClassBindingList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_outletClassBindingList GALGAS_outletClassBindingList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_outletClassBindingList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletClassBindingList GALGAS_outletClassBindingList::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                                                        const GALGAS_attributeASTTypeAndFormatterList & inOperand1,
                                                                                        const GALGAS_bindingOptionList & inOperand2
                                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_outletClassBindingList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_outletClassBindingList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_outletClassBindingList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                               const GALGAS_lstring & in_mBindingName,
                                                               const GALGAS_attributeASTTypeAndFormatterList & in_mAcceptableTypeFormatterList,
                                                               const GALGAS_bindingOptionList & in_mBindingOptionList
                                                               COMMA_LOCATION_ARGS) {
  cCollectionElement_outletClassBindingList * p = NULL ;
  macroMyNew (p, cCollectionElement_outletClassBindingList (in_mBindingName,
                                                            in_mAcceptableTypeFormatterList,
                                                            in_mBindingOptionList COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//-----------------------------------------------------------------------------*

void GALGAS_outletClassBindingList::addAssign_operation (const GALGAS_lstring & inOperand0,
                                                         const GALGAS_attributeASTTypeAndFormatterList & inOperand1,
                                                         const GALGAS_bindingOptionList & inOperand2
                                                         COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_outletClassBindingList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_outletClassBindingList::modifier_insertAtIndex (const GALGAS_lstring inOperand0,
                                                            const GALGAS_attributeASTTypeAndFormatterList inOperand1,
                                                            const GALGAS_bindingOptionList inOperand2,
                                                            const GALGAS_uint inInsertionIndex,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) {
  if (isValid () && inInsertionIndex.isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_outletClassBindingList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObjectAtIndex (attributes, inInsertionIndex.uintValue (), inCompiler COMMA_THERE) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_outletClassBindingList::modifier_removeAtIndex (GALGAS_lstring & outOperand0,
                                                            GALGAS_attributeASTTypeAndFormatterList & outOperand1,
                                                            GALGAS_bindingOptionList & outOperand2,
                                                            const GALGAS_uint inRemoveIndex,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) {
  if (isValid () && inRemoveIndex.isValid ()) {
    capCollectionElement attributes ;
    removeObjectAtIndex (attributes, inRemoveIndex.uintValue (), inCompiler COMMA_THERE) ;
    cCollectionElement_outletClassBindingList * p = (cCollectionElement_outletClassBindingList *) attributes.ptr () ;
    if (NULL == p) {
      outOperand0.drop () ;
      outOperand1.drop () ;
      outOperand2.drop () ;
    }else{
      macroValidSharedObject (p, cCollectionElement_outletClassBindingList) ;
      outOperand0 = p->mObject.mAttribute_mBindingName ;
      outOperand1 = p->mObject.mAttribute_mAcceptableTypeFormatterList ;
      outOperand2 = p->mObject.mAttribute_mBindingOptionList ;
    }
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_outletClassBindingList::modifier_popFirst (GALGAS_lstring & outOperand0,
                                                       GALGAS_attributeASTTypeAndFormatterList & outOperand1,
                                                       GALGAS_bindingOptionList & outOperand2,
                                                       C_Compiler * inCompiler
                                                       COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletClassBindingList * p = (cCollectionElement_outletClassBindingList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletClassBindingList) ;
    outOperand0 = p->mObject.mAttribute_mBindingName ;
    outOperand1 = p->mObject.mAttribute_mAcceptableTypeFormatterList ;
    outOperand2 = p->mObject.mAttribute_mBindingOptionList ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_outletClassBindingList::modifier_popLast (GALGAS_lstring & outOperand0,
                                                      GALGAS_attributeASTTypeAndFormatterList & outOperand1,
                                                      GALGAS_bindingOptionList & outOperand2,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletClassBindingList * p = (cCollectionElement_outletClassBindingList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletClassBindingList) ;
    outOperand0 = p->mObject.mAttribute_mBindingName ;
    outOperand1 = p->mObject.mAttribute_mAcceptableTypeFormatterList ;
    outOperand2 = p->mObject.mAttribute_mBindingOptionList ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_outletClassBindingList::method_first (GALGAS_lstring & outOperand0,
                                                  GALGAS_attributeASTTypeAndFormatterList & outOperand1,
                                                  GALGAS_bindingOptionList & outOperand2,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletClassBindingList * p = (cCollectionElement_outletClassBindingList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletClassBindingList) ;
    outOperand0 = p->mObject.mAttribute_mBindingName ;
    outOperand1 = p->mObject.mAttribute_mAcceptableTypeFormatterList ;
    outOperand2 = p->mObject.mAttribute_mBindingOptionList ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_outletClassBindingList::method_last (GALGAS_lstring & outOperand0,
                                                 GALGAS_attributeASTTypeAndFormatterList & outOperand1,
                                                 GALGAS_bindingOptionList & outOperand2,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletClassBindingList * p = (cCollectionElement_outletClassBindingList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletClassBindingList) ;
    outOperand0 = p->mObject.mAttribute_mBindingName ;
    outOperand1 = p->mObject.mAttribute_mAcceptableTypeFormatterList ;
    outOperand2 = p->mObject.mAttribute_mBindingOptionList ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_outletClassBindingList GALGAS_outletClassBindingList::operator_concat (const GALGAS_outletClassBindingList & inOperand
                                                                              COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_outletClassBindingList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletClassBindingList GALGAS_outletClassBindingList::add_operation (const GALGAS_outletClassBindingList & inOperand,
                                                                            C_Compiler * /* inCompiler */
                                                                            COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_outletClassBindingList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletClassBindingList GALGAS_outletClassBindingList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) const {
  GALGAS_outletClassBindingList result = GALGAS_outletClassBindingList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletClassBindingList GALGAS_outletClassBindingList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) const {
  GALGAS_outletClassBindingList result = GALGAS_outletClassBindingList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_outletClassBindingList::dotAssign_operation (const GALGAS_outletClassBindingList inOperand
                                                         COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_outletClassBindingList::reader_mBindingNameAtIndex (const GALGAS_uint & inIndex,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_outletClassBindingList * p = (cCollectionElement_outletClassBindingList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_outletClassBindingList) ;
    result = p->mObject.mAttribute_mBindingName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeASTTypeAndFormatterList GALGAS_outletClassBindingList::reader_mAcceptableTypeFormatterListAtIndex (const GALGAS_uint & inIndex,
                                                                                                                   C_Compiler * inCompiler
                                                                                                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_outletClassBindingList * p = (cCollectionElement_outletClassBindingList *) attributes.ptr () ;
  GALGAS_attributeASTTypeAndFormatterList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_outletClassBindingList) ;
    result = p->mObject.mAttribute_mAcceptableTypeFormatterList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_bindingOptionList GALGAS_outletClassBindingList::reader_mBindingOptionListAtIndex (const GALGAS_uint & inIndex,
                                                                                          C_Compiler * inCompiler
                                                                                          COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_outletClassBindingList * p = (cCollectionElement_outletClassBindingList *) attributes.ptr () ;
  GALGAS_bindingOptionList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_outletClassBindingList) ;
    result = p->mObject.mAttribute_mBindingOptionList ;
  }
  return result ;
}



//-----------------------------------------------------------------------------*

cEnumerator_outletClassBindingList::cEnumerator_outletClassBindingList (const GALGAS_outletClassBindingList & inEnumeratedObject,
                                                                        const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletClassBindingList_2D_element cEnumerator_outletClassBindingList::current (LOCATION_ARGS) const {
  const cCollectionElement_outletClassBindingList * p = (const cCollectionElement_outletClassBindingList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_outletClassBindingList) ;
  return p->mObject ;
}


//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_outletClassBindingList::current_mBindingName (LOCATION_ARGS) const {
  const cCollectionElement_outletClassBindingList * p = (const cCollectionElement_outletClassBindingList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_outletClassBindingList) ;
  return p->mObject.mAttribute_mBindingName ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeASTTypeAndFormatterList cEnumerator_outletClassBindingList::current_mAcceptableTypeFormatterList (LOCATION_ARGS) const {
  const cCollectionElement_outletClassBindingList * p = (const cCollectionElement_outletClassBindingList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_outletClassBindingList) ;
  return p->mObject.mAttribute_mAcceptableTypeFormatterList ;
}

//-----------------------------------------------------------------------------*

GALGAS_bindingOptionList cEnumerator_outletClassBindingList::current_mBindingOptionList (LOCATION_ARGS) const {
  const cCollectionElement_outletClassBindingList * p = (const cCollectionElement_outletClassBindingList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_outletClassBindingList) ;
  return p->mObject.mAttribute_mBindingOptionList ;
}




//-----------------------------------------------------------------------------*
//                                                                             *
//                        @outletClassBindingList type                         *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_outletClassBindingList ("outletClassBindingList",
                                               NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_outletClassBindingList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_outletClassBindingList ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_outletClassBindingList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_outletClassBindingList (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletClassBindingList GALGAS_outletClassBindingList::extractObject (const GALGAS_object & inObject,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_outletClassBindingList result ;
  const GALGAS_outletClassBindingList * p = (const GALGAS_outletClassBindingList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_outletClassBindingList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("outletClassBindingList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//               Class for element of '@bindingOptionList' list                *
//                                                                             *
//-----------------------------------------------------------------------------*

class cCollectionElement_bindingOptionList : public cCollectionElement {
  public : GALGAS_bindingOptionList_2D_element mObject ;

//--- Constructor
  public : cCollectionElement_bindingOptionList (const GALGAS_lstring & in_mBindingOptionName,
                                                 const GALGAS_lstringlist & in_mAcceptableTypeList
                                                 COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const int32_t inIndentation) const ;
} ;

//-----------------------------------------------------------------------------*

cCollectionElement_bindingOptionList::cCollectionElement_bindingOptionList (const GALGAS_lstring & in_mBindingOptionName,
                                                                            const GALGAS_lstringlist & in_mAcceptableTypeList
                                                                            COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mBindingOptionName, in_mAcceptableTypeList) {
}

//-----------------------------------------------------------------------------*

bool cCollectionElement_bindingOptionList::isValid (void) const {
  return mObject.isValid () ;
}

//-----------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_bindingOptionList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_bindingOptionList (mObject.mAttribute_mBindingOptionName, mObject.mAttribute_mAcceptableTypeList COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cCollectionElement_bindingOptionList::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mBindingOptionName" ":" ;
  mObject.mAttribute_mBindingOptionName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mAcceptableTypeList" ":" ;
  mObject.mAttribute_mAcceptableTypeList.description (ioString, inIndentation) ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_bindingOptionList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_bindingOptionList * operand = (cCollectionElement_bindingOptionList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_bindingOptionList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//-----------------------------------------------------------------------------*

GALGAS_bindingOptionList::GALGAS_bindingOptionList (void) :
AC_GALGAS_list () {
}

//-----------------------------------------------------------------------------*

GALGAS_bindingOptionList::GALGAS_bindingOptionList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_bindingOptionList GALGAS_bindingOptionList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_bindingOptionList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_bindingOptionList GALGAS_bindingOptionList::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                                              const GALGAS_lstringlist & inOperand1
                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_bindingOptionList result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_bindingOptionList::makeAttributesFromObjects (attributes, inOperand0, inOperand1 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_bindingOptionList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                          const GALGAS_lstring & in_mBindingOptionName,
                                                          const GALGAS_lstringlist & in_mAcceptableTypeList
                                                          COMMA_LOCATION_ARGS) {
  cCollectionElement_bindingOptionList * p = NULL ;
  macroMyNew (p, cCollectionElement_bindingOptionList (in_mBindingOptionName,
                                                       in_mAcceptableTypeList COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//-----------------------------------------------------------------------------*

void GALGAS_bindingOptionList::addAssign_operation (const GALGAS_lstring & inOperand0,
                                                    const GALGAS_lstringlist & inOperand1
                                                    COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_bindingOptionList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_bindingOptionList::modifier_insertAtIndex (const GALGAS_lstring inOperand0,
                                                       const GALGAS_lstringlist inOperand1,
                                                       const GALGAS_uint inInsertionIndex,
                                                       C_Compiler * inCompiler
                                                       COMMA_LOCATION_ARGS) {
  if (isValid () && inInsertionIndex.isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_bindingOptionList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObjectAtIndex (attributes, inInsertionIndex.uintValue (), inCompiler COMMA_THERE) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_bindingOptionList::modifier_removeAtIndex (GALGAS_lstring & outOperand0,
                                                       GALGAS_lstringlist & outOperand1,
                                                       const GALGAS_uint inRemoveIndex,
                                                       C_Compiler * inCompiler
                                                       COMMA_LOCATION_ARGS) {
  if (isValid () && inRemoveIndex.isValid ()) {
    capCollectionElement attributes ;
    removeObjectAtIndex (attributes, inRemoveIndex.uintValue (), inCompiler COMMA_THERE) ;
    cCollectionElement_bindingOptionList * p = (cCollectionElement_bindingOptionList *) attributes.ptr () ;
    if (NULL == p) {
      outOperand0.drop () ;
      outOperand1.drop () ;
    }else{
      macroValidSharedObject (p, cCollectionElement_bindingOptionList) ;
      outOperand0 = p->mObject.mAttribute_mBindingOptionName ;
      outOperand1 = p->mObject.mAttribute_mAcceptableTypeList ;
    }
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_bindingOptionList::modifier_popFirst (GALGAS_lstring & outOperand0,
                                                  GALGAS_lstringlist & outOperand1,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_bindingOptionList * p = (cCollectionElement_bindingOptionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_bindingOptionList) ;
    outOperand0 = p->mObject.mAttribute_mBindingOptionName ;
    outOperand1 = p->mObject.mAttribute_mAcceptableTypeList ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_bindingOptionList::modifier_popLast (GALGAS_lstring & outOperand0,
                                                 GALGAS_lstringlist & outOperand1,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_bindingOptionList * p = (cCollectionElement_bindingOptionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_bindingOptionList) ;
    outOperand0 = p->mObject.mAttribute_mBindingOptionName ;
    outOperand1 = p->mObject.mAttribute_mAcceptableTypeList ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_bindingOptionList::method_first (GALGAS_lstring & outOperand0,
                                             GALGAS_lstringlist & outOperand1,
                                             C_Compiler * inCompiler
                                             COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_bindingOptionList * p = (cCollectionElement_bindingOptionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_bindingOptionList) ;
    outOperand0 = p->mObject.mAttribute_mBindingOptionName ;
    outOperand1 = p->mObject.mAttribute_mAcceptableTypeList ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_bindingOptionList::method_last (GALGAS_lstring & outOperand0,
                                            GALGAS_lstringlist & outOperand1,
                                            C_Compiler * inCompiler
                                            COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_bindingOptionList * p = (cCollectionElement_bindingOptionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_bindingOptionList) ;
    outOperand0 = p->mObject.mAttribute_mBindingOptionName ;
    outOperand1 = p->mObject.mAttribute_mAcceptableTypeList ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_bindingOptionList GALGAS_bindingOptionList::operator_concat (const GALGAS_bindingOptionList & inOperand
                                                                    COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_bindingOptionList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_bindingOptionList GALGAS_bindingOptionList::add_operation (const GALGAS_bindingOptionList & inOperand,
                                                                  C_Compiler * /* inCompiler */
                                                                  COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_bindingOptionList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_bindingOptionList GALGAS_bindingOptionList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_LOCATION_ARGS) const {
  GALGAS_bindingOptionList result = GALGAS_bindingOptionList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_bindingOptionList GALGAS_bindingOptionList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_LOCATION_ARGS) const {
  GALGAS_bindingOptionList result = GALGAS_bindingOptionList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_bindingOptionList::dotAssign_operation (const GALGAS_bindingOptionList inOperand
                                                    COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_bindingOptionList::reader_mBindingOptionNameAtIndex (const GALGAS_uint & inIndex,
                                                                           C_Compiler * inCompiler
                                                                           COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_bindingOptionList * p = (cCollectionElement_bindingOptionList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_bindingOptionList) ;
    result = p->mObject.mAttribute_mBindingOptionName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstringlist GALGAS_bindingOptionList::reader_mAcceptableTypeListAtIndex (const GALGAS_uint & inIndex,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_bindingOptionList * p = (cCollectionElement_bindingOptionList *) attributes.ptr () ;
  GALGAS_lstringlist result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_bindingOptionList) ;
    result = p->mObject.mAttribute_mAcceptableTypeList ;
  }
  return result ;
}



//-----------------------------------------------------------------------------*

cEnumerator_bindingOptionList::cEnumerator_bindingOptionList (const GALGAS_bindingOptionList & inEnumeratedObject,
                                                              const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_bindingOptionList_2D_element cEnumerator_bindingOptionList::current (LOCATION_ARGS) const {
  const cCollectionElement_bindingOptionList * p = (const cCollectionElement_bindingOptionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_bindingOptionList) ;
  return p->mObject ;
}


//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_bindingOptionList::current_mBindingOptionName (LOCATION_ARGS) const {
  const cCollectionElement_bindingOptionList * p = (const cCollectionElement_bindingOptionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_bindingOptionList) ;
  return p->mObject.mAttribute_mBindingOptionName ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstringlist cEnumerator_bindingOptionList::current_mAcceptableTypeList (LOCATION_ARGS) const {
  const cCollectionElement_bindingOptionList * p = (const cCollectionElement_bindingOptionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_bindingOptionList) ;
  return p->mObject.mAttribute_mAcceptableTypeList ;
}




//-----------------------------------------------------------------------------*
//                                                                             *
//                           @bindingOptionList type                           *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_bindingOptionList ("bindingOptionList",
                                          NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_bindingOptionList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_bindingOptionList ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_bindingOptionList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_bindingOptionList (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_bindingOptionList GALGAS_bindingOptionList::extractObject (const GALGAS_object & inObject,
                                                                  C_Compiler * inCompiler
                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_bindingOptionList result ;
  const GALGAS_bindingOptionList * p = (const GALGAS_bindingOptionList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_bindingOptionList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("bindingOptionList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_generationKind::GALGAS_generationKind (void) :
mEnum (kNotBuilt) {
}

//-----------------------------------------------------------------------------*

GALGAS_generationKind GALGAS_generationKind::constructor_fullGeneration (UNUSED_LOCATION_ARGS) {
  GALGAS_generationKind result ;
  result.mEnum = kEnum_fullGeneration ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_generationKind GALGAS_generationKind::constructor_generateImport (UNUSED_LOCATION_ARGS) {
  GALGAS_generationKind result ;
  result.mEnum = kEnum_generateImport ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_generationKind GALGAS_generationKind::constructor_noGeneration (UNUSED_LOCATION_ARGS) {
  GALGAS_generationKind result ;
  result.mEnum = kEnum_noGeneration ;
  return result ;
}

//-----------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_generationKind [4] = {
  "(not built)",
  "fullGeneration",
  "generateImport",
  "noGeneration"
} ;

//-----------------------------------------------------------------------------*

void GALGAS_generationKind::description (C_String & ioString,
                                         const int32_t /* inIndentation */) const {
  ioString << "<enum @generationKind: " << gEnumNameArrayFor_generationKind [mEnum] << ">" ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_generationKind::objectCompare (const GALGAS_generationKind & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = kOperandEqual ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//                            @generationKind type                             *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_generationKind ("generationKind",
                                       NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_generationKind::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_generationKind ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_generationKind::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_generationKind (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_generationKind GALGAS_generationKind::extractObject (const GALGAS_object & inObject,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) {
  GALGAS_generationKind result ;
  const GALGAS_generationKind * p = (const GALGAS_generationKind *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_generationKind *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("generationKind", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//                   Class for element of '@cursorList' list                   *
//                                                                             *
//-----------------------------------------------------------------------------*

class cCollectionElement_cursorList : public cCollectionElement {
  public : GALGAS_cursorList_2D_element mObject ;

//--- Constructor
  public : cCollectionElement_cursorList (const GALGAS_lstring & in_mCursorName,
                                          const GALGAS_ldouble & in_mHotSpotX,
                                          const GALGAS_ldouble & in_mHotSpotY
                                          COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const int32_t inIndentation) const ;
} ;

//-----------------------------------------------------------------------------*

cCollectionElement_cursorList::cCollectionElement_cursorList (const GALGAS_lstring & in_mCursorName,
                                                              const GALGAS_ldouble & in_mHotSpotX,
                                                              const GALGAS_ldouble & in_mHotSpotY
                                                              COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mCursorName, in_mHotSpotX, in_mHotSpotY) {
}

//-----------------------------------------------------------------------------*

bool cCollectionElement_cursorList::isValid (void) const {
  return mObject.isValid () ;
}

//-----------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_cursorList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_cursorList (mObject.mAttribute_mCursorName, mObject.mAttribute_mHotSpotX, mObject.mAttribute_mHotSpotY COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cCollectionElement_cursorList::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mCursorName" ":" ;
  mObject.mAttribute_mCursorName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mHotSpotX" ":" ;
  mObject.mAttribute_mHotSpotX.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mHotSpotY" ":" ;
  mObject.mAttribute_mHotSpotY.description (ioString, inIndentation) ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_cursorList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_cursorList * operand = (cCollectionElement_cursorList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_cursorList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//-----------------------------------------------------------------------------*

GALGAS_cursorList::GALGAS_cursorList (void) :
AC_GALGAS_list () {
}

//-----------------------------------------------------------------------------*

GALGAS_cursorList::GALGAS_cursorList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_cursorList GALGAS_cursorList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_cursorList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_cursorList GALGAS_cursorList::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                                const GALGAS_ldouble & inOperand1,
                                                                const GALGAS_ldouble & inOperand2
                                                                COMMA_LOCATION_ARGS) {
  GALGAS_cursorList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_cursorList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_cursorList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                   const GALGAS_lstring & in_mCursorName,
                                                   const GALGAS_ldouble & in_mHotSpotX,
                                                   const GALGAS_ldouble & in_mHotSpotY
                                                   COMMA_LOCATION_ARGS) {
  cCollectionElement_cursorList * p = NULL ;
  macroMyNew (p, cCollectionElement_cursorList (in_mCursorName,
                                                in_mHotSpotX,
                                                in_mHotSpotY COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//-----------------------------------------------------------------------------*

void GALGAS_cursorList::addAssign_operation (const GALGAS_lstring & inOperand0,
                                             const GALGAS_ldouble & inOperand1,
                                             const GALGAS_ldouble & inOperand2
                                             COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_cursorList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_cursorList::modifier_insertAtIndex (const GALGAS_lstring inOperand0,
                                                const GALGAS_ldouble inOperand1,
                                                const GALGAS_ldouble inOperand2,
                                                const GALGAS_uint inInsertionIndex,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) {
  if (isValid () && inInsertionIndex.isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_cursorList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObjectAtIndex (attributes, inInsertionIndex.uintValue (), inCompiler COMMA_THERE) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_cursorList::modifier_removeAtIndex (GALGAS_lstring & outOperand0,
                                                GALGAS_ldouble & outOperand1,
                                                GALGAS_ldouble & outOperand2,
                                                const GALGAS_uint inRemoveIndex,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) {
  if (isValid () && inRemoveIndex.isValid ()) {
    capCollectionElement attributes ;
    removeObjectAtIndex (attributes, inRemoveIndex.uintValue (), inCompiler COMMA_THERE) ;
    cCollectionElement_cursorList * p = (cCollectionElement_cursorList *) attributes.ptr () ;
    if (NULL == p) {
      outOperand0.drop () ;
      outOperand1.drop () ;
      outOperand2.drop () ;
    }else{
      macroValidSharedObject (p, cCollectionElement_cursorList) ;
      outOperand0 = p->mObject.mAttribute_mCursorName ;
      outOperand1 = p->mObject.mAttribute_mHotSpotX ;
      outOperand2 = p->mObject.mAttribute_mHotSpotY ;
    }
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_cursorList::modifier_popFirst (GALGAS_lstring & outOperand0,
                                           GALGAS_ldouble & outOperand1,
                                           GALGAS_ldouble & outOperand2,
                                           C_Compiler * inCompiler
                                           COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_cursorList * p = (cCollectionElement_cursorList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_cursorList) ;
    outOperand0 = p->mObject.mAttribute_mCursorName ;
    outOperand1 = p->mObject.mAttribute_mHotSpotX ;
    outOperand2 = p->mObject.mAttribute_mHotSpotY ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_cursorList::modifier_popLast (GALGAS_lstring & outOperand0,
                                          GALGAS_ldouble & outOperand1,
                                          GALGAS_ldouble & outOperand2,
                                          C_Compiler * inCompiler
                                          COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_cursorList * p = (cCollectionElement_cursorList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_cursorList) ;
    outOperand0 = p->mObject.mAttribute_mCursorName ;
    outOperand1 = p->mObject.mAttribute_mHotSpotX ;
    outOperand2 = p->mObject.mAttribute_mHotSpotY ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_cursorList::method_first (GALGAS_lstring & outOperand0,
                                      GALGAS_ldouble & outOperand1,
                                      GALGAS_ldouble & outOperand2,
                                      C_Compiler * inCompiler
                                      COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_cursorList * p = (cCollectionElement_cursorList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_cursorList) ;
    outOperand0 = p->mObject.mAttribute_mCursorName ;
    outOperand1 = p->mObject.mAttribute_mHotSpotX ;
    outOperand2 = p->mObject.mAttribute_mHotSpotY ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_cursorList::method_last (GALGAS_lstring & outOperand0,
                                     GALGAS_ldouble & outOperand1,
                                     GALGAS_ldouble & outOperand2,
                                     C_Compiler * inCompiler
                                     COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_cursorList * p = (cCollectionElement_cursorList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_cursorList) ;
    outOperand0 = p->mObject.mAttribute_mCursorName ;
    outOperand1 = p->mObject.mAttribute_mHotSpotX ;
    outOperand2 = p->mObject.mAttribute_mHotSpotY ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_cursorList GALGAS_cursorList::operator_concat (const GALGAS_cursorList & inOperand
                                                      COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_cursorList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_cursorList GALGAS_cursorList::add_operation (const GALGAS_cursorList & inOperand,
                                                    C_Compiler * /* inCompiler */
                                                    COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_cursorList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_cursorList GALGAS_cursorList::reader_subListWithRange (const GALGAS_range & inRange,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) const {
  GALGAS_cursorList result = GALGAS_cursorList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_cursorList GALGAS_cursorList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) const {
  GALGAS_cursorList result = GALGAS_cursorList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_cursorList::dotAssign_operation (const GALGAS_cursorList inOperand
                                             COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_cursorList::reader_mCursorNameAtIndex (const GALGAS_uint & inIndex,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_cursorList * p = (cCollectionElement_cursorList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_cursorList) ;
    result = p->mObject.mAttribute_mCursorName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_ldouble GALGAS_cursorList::reader_mHotSpotXAtIndex (const GALGAS_uint & inIndex,
                                                           C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_cursorList * p = (cCollectionElement_cursorList *) attributes.ptr () ;
  GALGAS_ldouble result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_cursorList) ;
    result = p->mObject.mAttribute_mHotSpotX ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_ldouble GALGAS_cursorList::reader_mHotSpotYAtIndex (const GALGAS_uint & inIndex,
                                                           C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_cursorList * p = (cCollectionElement_cursorList *) attributes.ptr () ;
  GALGAS_ldouble result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_cursorList) ;
    result = p->mObject.mAttribute_mHotSpotY ;
  }
  return result ;
}



//-----------------------------------------------------------------------------*

cEnumerator_cursorList::cEnumerator_cursorList (const GALGAS_cursorList & inEnumeratedObject,
                                                const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_cursorList_2D_element cEnumerator_cursorList::current (LOCATION_ARGS) const {
  const cCollectionElement_cursorList * p = (const cCollectionElement_cursorList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_cursorList) ;
  return p->mObject ;
}


//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_cursorList::current_mCursorName (LOCATION_ARGS) const {
  const cCollectionElement_cursorList * p = (const cCollectionElement_cursorList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_cursorList) ;
  return p->mObject.mAttribute_mCursorName ;
}

//-----------------------------------------------------------------------------*

GALGAS_ldouble cEnumerator_cursorList::current_mHotSpotX (LOCATION_ARGS) const {
  const cCollectionElement_cursorList * p = (const cCollectionElement_cursorList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_cursorList) ;
  return p->mObject.mAttribute_mHotSpotX ;
}

//-----------------------------------------------------------------------------*

GALGAS_ldouble cEnumerator_cursorList::current_mHotSpotY (LOCATION_ARGS) const {
  const cCollectionElement_cursorList * p = (const cCollectionElement_cursorList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_cursorList) ;
  return p->mObject.mAttribute_mHotSpotY ;
}




//-----------------------------------------------------------------------------*
//                                                                             *
//                              @cursorList type                               *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_cursorList ("cursorList",
                                   NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_cursorList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_cursorList ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_cursorList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_cursorList (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_cursorList GALGAS_cursorList::extractObject (const GALGAS_object & inObject,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) {
  GALGAS_cursorList result ;
  const GALGAS_cursorList * p = (const GALGAS_cursorList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_cursorList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("cursorList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//        Class for element of '@controllerObservablePropertyList' list        *
//                                                                             *
//-----------------------------------------------------------------------------*

class cCollectionElement_controllerObservablePropertyList : public cCollectionElement {
  public : GALGAS_controllerObservablePropertyList_2D_element mObject ;

//--- Constructor
  public : cCollectionElement_controllerObservablePropertyList (const GALGAS_lstring & in_mTypeName,
                                                                const GALGAS_lstring & in_mPropertyName
                                                                COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const int32_t inIndentation) const ;
} ;

//-----------------------------------------------------------------------------*

cCollectionElement_controllerObservablePropertyList::cCollectionElement_controllerObservablePropertyList (const GALGAS_lstring & in_mTypeName,
                                                                                                          const GALGAS_lstring & in_mPropertyName
                                                                                                          COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mTypeName, in_mPropertyName) {
}

//-----------------------------------------------------------------------------*

bool cCollectionElement_controllerObservablePropertyList::isValid (void) const {
  return mObject.isValid () ;
}

//-----------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_controllerObservablePropertyList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_controllerObservablePropertyList (mObject.mAttribute_mTypeName, mObject.mAttribute_mPropertyName COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cCollectionElement_controllerObservablePropertyList::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mTypeName" ":" ;
  mObject.mAttribute_mTypeName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mPropertyName" ":" ;
  mObject.mAttribute_mPropertyName.description (ioString, inIndentation) ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_controllerObservablePropertyList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_controllerObservablePropertyList * operand = (cCollectionElement_controllerObservablePropertyList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_controllerObservablePropertyList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//-----------------------------------------------------------------------------*

GALGAS_controllerObservablePropertyList::GALGAS_controllerObservablePropertyList (void) :
AC_GALGAS_list () {
}

//-----------------------------------------------------------------------------*

GALGAS_controllerObservablePropertyList::GALGAS_controllerObservablePropertyList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_controllerObservablePropertyList GALGAS_controllerObservablePropertyList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_controllerObservablePropertyList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_controllerObservablePropertyList GALGAS_controllerObservablePropertyList::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                                                                            const GALGAS_lstring & inOperand1
                                                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_controllerObservablePropertyList result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_controllerObservablePropertyList::makeAttributesFromObjects (attributes, inOperand0, inOperand1 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_controllerObservablePropertyList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                                         const GALGAS_lstring & in_mTypeName,
                                                                         const GALGAS_lstring & in_mPropertyName
                                                                         COMMA_LOCATION_ARGS) {
  cCollectionElement_controllerObservablePropertyList * p = NULL ;
  macroMyNew (p, cCollectionElement_controllerObservablePropertyList (in_mTypeName,
                                                                      in_mPropertyName COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//-----------------------------------------------------------------------------*

void GALGAS_controllerObservablePropertyList::addAssign_operation (const GALGAS_lstring & inOperand0,
                                                                   const GALGAS_lstring & inOperand1
                                                                   COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_controllerObservablePropertyList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_controllerObservablePropertyList::modifier_insertAtIndex (const GALGAS_lstring inOperand0,
                                                                      const GALGAS_lstring inOperand1,
                                                                      const GALGAS_uint inInsertionIndex,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) {
  if (isValid () && inInsertionIndex.isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_controllerObservablePropertyList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObjectAtIndex (attributes, inInsertionIndex.uintValue (), inCompiler COMMA_THERE) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_controllerObservablePropertyList::modifier_removeAtIndex (GALGAS_lstring & outOperand0,
                                                                      GALGAS_lstring & outOperand1,
                                                                      const GALGAS_uint inRemoveIndex,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) {
  if (isValid () && inRemoveIndex.isValid ()) {
    capCollectionElement attributes ;
    removeObjectAtIndex (attributes, inRemoveIndex.uintValue (), inCompiler COMMA_THERE) ;
    cCollectionElement_controllerObservablePropertyList * p = (cCollectionElement_controllerObservablePropertyList *) attributes.ptr () ;
    if (NULL == p) {
      outOperand0.drop () ;
      outOperand1.drop () ;
    }else{
      macroValidSharedObject (p, cCollectionElement_controllerObservablePropertyList) ;
      outOperand0 = p->mObject.mAttribute_mTypeName ;
      outOperand1 = p->mObject.mAttribute_mPropertyName ;
    }
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_controllerObservablePropertyList::modifier_popFirst (GALGAS_lstring & outOperand0,
                                                                 GALGAS_lstring & outOperand1,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerObservablePropertyList * p = (cCollectionElement_controllerObservablePropertyList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_controllerObservablePropertyList) ;
    outOperand0 = p->mObject.mAttribute_mTypeName ;
    outOperand1 = p->mObject.mAttribute_mPropertyName ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_controllerObservablePropertyList::modifier_popLast (GALGAS_lstring & outOperand0,
                                                                GALGAS_lstring & outOperand1,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerObservablePropertyList * p = (cCollectionElement_controllerObservablePropertyList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_controllerObservablePropertyList) ;
    outOperand0 = p->mObject.mAttribute_mTypeName ;
    outOperand1 = p->mObject.mAttribute_mPropertyName ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_controllerObservablePropertyList::method_first (GALGAS_lstring & outOperand0,
                                                            GALGAS_lstring & outOperand1,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerObservablePropertyList * p = (cCollectionElement_controllerObservablePropertyList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_controllerObservablePropertyList) ;
    outOperand0 = p->mObject.mAttribute_mTypeName ;
    outOperand1 = p->mObject.mAttribute_mPropertyName ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_controllerObservablePropertyList::method_last (GALGAS_lstring & outOperand0,
                                                           GALGAS_lstring & outOperand1,
                                                           C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerObservablePropertyList * p = (cCollectionElement_controllerObservablePropertyList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_controllerObservablePropertyList) ;
    outOperand0 = p->mObject.mAttribute_mTypeName ;
    outOperand1 = p->mObject.mAttribute_mPropertyName ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_controllerObservablePropertyList GALGAS_controllerObservablePropertyList::operator_concat (const GALGAS_controllerObservablePropertyList & inOperand
                                                                                                  COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_controllerObservablePropertyList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_controllerObservablePropertyList GALGAS_controllerObservablePropertyList::add_operation (const GALGAS_controllerObservablePropertyList & inOperand,
                                                                                                C_Compiler * /* inCompiler */
                                                                                                COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_controllerObservablePropertyList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_controllerObservablePropertyList GALGAS_controllerObservablePropertyList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                                                          C_Compiler * inCompiler
                                                                                                          COMMA_LOCATION_ARGS) const {
  GALGAS_controllerObservablePropertyList result = GALGAS_controllerObservablePropertyList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_controllerObservablePropertyList GALGAS_controllerObservablePropertyList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                                          C_Compiler * inCompiler
                                                                                                          COMMA_LOCATION_ARGS) const {
  GALGAS_controllerObservablePropertyList result = GALGAS_controllerObservablePropertyList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_controllerObservablePropertyList::dotAssign_operation (const GALGAS_controllerObservablePropertyList inOperand
                                                                   COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_controllerObservablePropertyList::reader_mTypeNameAtIndex (const GALGAS_uint & inIndex,
                                                                                 C_Compiler * inCompiler
                                                                                 COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerObservablePropertyList * p = (cCollectionElement_controllerObservablePropertyList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_controllerObservablePropertyList) ;
    result = p->mObject.mAttribute_mTypeName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_controllerObservablePropertyList::reader_mPropertyNameAtIndex (const GALGAS_uint & inIndex,
                                                                                     C_Compiler * inCompiler
                                                                                     COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_controllerObservablePropertyList * p = (cCollectionElement_controllerObservablePropertyList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_controllerObservablePropertyList) ;
    result = p->mObject.mAttribute_mPropertyName ;
  }
  return result ;
}



//-----------------------------------------------------------------------------*

cEnumerator_controllerObservablePropertyList::cEnumerator_controllerObservablePropertyList (const GALGAS_controllerObservablePropertyList & inEnumeratedObject,
                                                                                            const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_controllerObservablePropertyList_2D_element cEnumerator_controllerObservablePropertyList::current (LOCATION_ARGS) const {
  const cCollectionElement_controllerObservablePropertyList * p = (const cCollectionElement_controllerObservablePropertyList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_controllerObservablePropertyList) ;
  return p->mObject ;
}


//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_controllerObservablePropertyList::current_mTypeName (LOCATION_ARGS) const {
  const cCollectionElement_controllerObservablePropertyList * p = (const cCollectionElement_controllerObservablePropertyList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_controllerObservablePropertyList) ;
  return p->mObject.mAttribute_mTypeName ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_controllerObservablePropertyList::current_mPropertyName (LOCATION_ARGS) const {
  const cCollectionElement_controllerObservablePropertyList * p = (const cCollectionElement_controllerObservablePropertyList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_controllerObservablePropertyList) ;
  return p->mObject.mAttribute_mPropertyName ;
}




//-----------------------------------------------------------------------------*
//                                                                             *
//                   @controllerObservablePropertyList type                    *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_controllerObservablePropertyList ("controllerObservablePropertyList",
                                                         NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_controllerObservablePropertyList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_controllerObservablePropertyList ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_controllerObservablePropertyList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_controllerObservablePropertyList (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_controllerObservablePropertyList GALGAS_controllerObservablePropertyList::extractObject (const GALGAS_object & inObject,
                                                                                                C_Compiler * inCompiler
                                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_controllerObservablePropertyList result ;
  const GALGAS_controllerObservablePropertyList * p = (const GALGAS_controllerObservablePropertyList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_controllerObservablePropertyList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("controllerObservablePropertyList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_controllerKind::GALGAS_controllerKind (void) :
mEnum (kNotBuilt) {
}

//-----------------------------------------------------------------------------*

GALGAS_controllerKind GALGAS_controllerKind::constructor_simpleController (UNUSED_LOCATION_ARGS) {
  GALGAS_controllerKind result ;
  result.mEnum = kEnum_simpleController ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_controllerKind GALGAS_controllerKind::constructor_objectController (UNUSED_LOCATION_ARGS) {
  GALGAS_controllerKind result ;
  result.mEnum = kEnum_objectController ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_controllerKind GALGAS_controllerKind::constructor_arrayController (UNUSED_LOCATION_ARGS) {
  GALGAS_controllerKind result ;
  result.mEnum = kEnum_arrayController ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_controllerKind GALGAS_controllerKind::constructor_entityController (UNUSED_LOCATION_ARGS) {
  GALGAS_controllerKind result ;
  result.mEnum = kEnum_entityController ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_controllerKind GALGAS_controllerKind::constructor_entityArrayController (UNUSED_LOCATION_ARGS) {
  GALGAS_controllerKind result ;
  result.mEnum = kEnum_entityArrayController ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_controllerKind GALGAS_controllerKind::constructor_treeController (UNUSED_LOCATION_ARGS) {
  GALGAS_controllerKind result ;
  result.mEnum = kEnum_treeController ;
  return result ;
}

//-----------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_controllerKind [7] = {
  "(not built)",
  "simpleController",
  "objectController",
  "arrayController",
  "entityController",
  "entityArrayController",
  "treeController"
} ;

//-----------------------------------------------------------------------------*

void GALGAS_controllerKind::description (C_String & ioString,
                                         const int32_t /* inIndentation */) const {
  ioString << "<enum @controllerKind: " << gEnumNameArrayFor_controllerKind [mEnum] << ">" ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_controllerKind::objectCompare (const GALGAS_controllerKind & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = kOperandEqual ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//                            @controllerKind type                             *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_controllerKind ("controllerKind",
                                       NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_controllerKind::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_controllerKind ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_controllerKind::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_controllerKind (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_controllerKind GALGAS_controllerKind::extractObject (const GALGAS_object & inObject,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) {
  GALGAS_controllerKind result ;
  const GALGAS_controllerKind * p = (const GALGAS_controllerKind *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_controllerKind *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("controllerKind", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//                Class for element of '@defaultValueList' list                *
//                                                                             *
//-----------------------------------------------------------------------------*

class cCollectionElement_defaultValueList : public cCollectionElement {
  public : GALGAS_defaultValueList_2D_element mObject ;

//--- Constructor
  public : cCollectionElement_defaultValueList (const GALGAS_abstractDefaultValue & in_mDefaultValue
                                                COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const int32_t inIndentation) const ;
} ;

//-----------------------------------------------------------------------------*

cCollectionElement_defaultValueList::cCollectionElement_defaultValueList (const GALGAS_abstractDefaultValue & in_mDefaultValue
                                                                          COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mDefaultValue) {
}

//-----------------------------------------------------------------------------*

bool cCollectionElement_defaultValueList::isValid (void) const {
  return mObject.isValid () ;
}

//-----------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_defaultValueList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_defaultValueList (mObject.mAttribute_mDefaultValue COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cCollectionElement_defaultValueList::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mDefaultValue" ":" ;
  mObject.mAttribute_mDefaultValue.description (ioString, inIndentation) ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_defaultValueList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_defaultValueList * operand = (cCollectionElement_defaultValueList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_defaultValueList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//-----------------------------------------------------------------------------*

GALGAS_defaultValueList::GALGAS_defaultValueList (void) :
AC_GALGAS_list () {
}

//-----------------------------------------------------------------------------*

GALGAS_defaultValueList::GALGAS_defaultValueList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_defaultValueList GALGAS_defaultValueList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_defaultValueList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_defaultValueList GALGAS_defaultValueList::constructor_listWithValue (const GALGAS_abstractDefaultValue & inOperand0
                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_defaultValueList result ;
  if (inOperand0.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_defaultValueList::makeAttributesFromObjects (attributes, inOperand0 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_defaultValueList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                         const GALGAS_abstractDefaultValue & in_mDefaultValue
                                                         COMMA_LOCATION_ARGS) {
  cCollectionElement_defaultValueList * p = NULL ;
  macroMyNew (p, cCollectionElement_defaultValueList (in_mDefaultValue COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//-----------------------------------------------------------------------------*

void GALGAS_defaultValueList::addAssign_operation (const GALGAS_abstractDefaultValue & inOperand0
                                                   COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_defaultValueList (inOperand0 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_defaultValueList::modifier_insertAtIndex (const GALGAS_abstractDefaultValue inOperand0,
                                                      const GALGAS_uint inInsertionIndex,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) {
  if (isValid () && inInsertionIndex.isValid () && inOperand0.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_defaultValueList (inOperand0 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObjectAtIndex (attributes, inInsertionIndex.uintValue (), inCompiler COMMA_THERE) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_defaultValueList::modifier_removeAtIndex (GALGAS_abstractDefaultValue & outOperand0,
                                                      const GALGAS_uint inRemoveIndex,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) {
  if (isValid () && inRemoveIndex.isValid ()) {
    capCollectionElement attributes ;
    removeObjectAtIndex (attributes, inRemoveIndex.uintValue (), inCompiler COMMA_THERE) ;
    cCollectionElement_defaultValueList * p = (cCollectionElement_defaultValueList *) attributes.ptr () ;
    if (NULL == p) {
      outOperand0.drop () ;
    }else{
      macroValidSharedObject (p, cCollectionElement_defaultValueList) ;
      outOperand0 = p->mObject.mAttribute_mDefaultValue ;
    }
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_defaultValueList::modifier_popFirst (GALGAS_abstractDefaultValue & outOperand0,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_defaultValueList * p = (cCollectionElement_defaultValueList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_defaultValueList) ;
    outOperand0 = p->mObject.mAttribute_mDefaultValue ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_defaultValueList::modifier_popLast (GALGAS_abstractDefaultValue & outOperand0,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_defaultValueList * p = (cCollectionElement_defaultValueList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_defaultValueList) ;
    outOperand0 = p->mObject.mAttribute_mDefaultValue ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_defaultValueList::method_first (GALGAS_abstractDefaultValue & outOperand0,
                                            C_Compiler * inCompiler
                                            COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_defaultValueList * p = (cCollectionElement_defaultValueList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_defaultValueList) ;
    outOperand0 = p->mObject.mAttribute_mDefaultValue ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_defaultValueList::method_last (GALGAS_abstractDefaultValue & outOperand0,
                                           C_Compiler * inCompiler
                                           COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_defaultValueList * p = (cCollectionElement_defaultValueList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_defaultValueList) ;
    outOperand0 = p->mObject.mAttribute_mDefaultValue ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_defaultValueList GALGAS_defaultValueList::operator_concat (const GALGAS_defaultValueList & inOperand
                                                                  COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_defaultValueList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_defaultValueList GALGAS_defaultValueList::add_operation (const GALGAS_defaultValueList & inOperand,
                                                                C_Compiler * /* inCompiler */
                                                                COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_defaultValueList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_defaultValueList GALGAS_defaultValueList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) const {
  GALGAS_defaultValueList result = GALGAS_defaultValueList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_defaultValueList GALGAS_defaultValueList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) const {
  GALGAS_defaultValueList result = GALGAS_defaultValueList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_defaultValueList::dotAssign_operation (const GALGAS_defaultValueList inOperand
                                                   COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//-----------------------------------------------------------------------------*

GALGAS_abstractDefaultValue GALGAS_defaultValueList::reader_mDefaultValueAtIndex (const GALGAS_uint & inIndex,
                                                                                  C_Compiler * inCompiler
                                                                                  COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_defaultValueList * p = (cCollectionElement_defaultValueList *) attributes.ptr () ;
  GALGAS_abstractDefaultValue result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_defaultValueList) ;
    result = p->mObject.mAttribute_mDefaultValue ;
  }
  return result ;
}



//-----------------------------------------------------------------------------*

cEnumerator_defaultValueList::cEnumerator_defaultValueList (const GALGAS_defaultValueList & inEnumeratedObject,
                                                            const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_defaultValueList_2D_element cEnumerator_defaultValueList::current (LOCATION_ARGS) const {
  const cCollectionElement_defaultValueList * p = (const cCollectionElement_defaultValueList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_defaultValueList) ;
  return p->mObject ;
}


//-----------------------------------------------------------------------------*

GALGAS_abstractDefaultValue cEnumerator_defaultValueList::current_mDefaultValue (LOCATION_ARGS) const {
  const cCollectionElement_defaultValueList * p = (const cCollectionElement_defaultValueList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_defaultValueList) ;
  return p->mObject.mAttribute_mDefaultValue ;
}




//-----------------------------------------------------------------------------*
//                                                                             *
//                           @defaultValueList type                            *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_defaultValueList ("defaultValueList",
                                         NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_defaultValueList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_defaultValueList ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_defaultValueList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_defaultValueList (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_defaultValueList GALGAS_defaultValueList::extractObject (const GALGAS_object & inObject,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) {
  GALGAS_defaultValueList result ;
  const GALGAS_defaultValueList * p = (const GALGAS_defaultValueList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_defaultValueList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("defaultValueList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//               Class for element of '@structFieldASTList' list               *
//                                                                             *
//-----------------------------------------------------------------------------*

class cCollectionElement_structFieldASTList : public cCollectionElement {
  public : GALGAS_structFieldASTList_2D_element mObject ;

//--- Constructor
  public : cCollectionElement_structFieldASTList (const GALGAS_lstring & in_mFieldTypeName,
                                                  const GALGAS_lstring & in_mFieldName
                                                  COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const int32_t inIndentation) const ;
} ;

//-----------------------------------------------------------------------------*

cCollectionElement_structFieldASTList::cCollectionElement_structFieldASTList (const GALGAS_lstring & in_mFieldTypeName,
                                                                              const GALGAS_lstring & in_mFieldName
                                                                              COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mFieldTypeName, in_mFieldName) {
}

//-----------------------------------------------------------------------------*

bool cCollectionElement_structFieldASTList::isValid (void) const {
  return mObject.isValid () ;
}

//-----------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_structFieldASTList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_structFieldASTList (mObject.mAttribute_mFieldTypeName, mObject.mAttribute_mFieldName COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cCollectionElement_structFieldASTList::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mFieldTypeName" ":" ;
  mObject.mAttribute_mFieldTypeName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mFieldName" ":" ;
  mObject.mAttribute_mFieldName.description (ioString, inIndentation) ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_structFieldASTList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_structFieldASTList * operand = (cCollectionElement_structFieldASTList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_structFieldASTList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//-----------------------------------------------------------------------------*

GALGAS_structFieldASTList::GALGAS_structFieldASTList (void) :
AC_GALGAS_list () {
}

//-----------------------------------------------------------------------------*

GALGAS_structFieldASTList::GALGAS_structFieldASTList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_structFieldASTList GALGAS_structFieldASTList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_structFieldASTList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_structFieldASTList GALGAS_structFieldASTList::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                                                const GALGAS_lstring & inOperand1
                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_structFieldASTList result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_structFieldASTList::makeAttributesFromObjects (attributes, inOperand0, inOperand1 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_structFieldASTList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                           const GALGAS_lstring & in_mFieldTypeName,
                                                           const GALGAS_lstring & in_mFieldName
                                                           COMMA_LOCATION_ARGS) {
  cCollectionElement_structFieldASTList * p = NULL ;
  macroMyNew (p, cCollectionElement_structFieldASTList (in_mFieldTypeName,
                                                        in_mFieldName COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//-----------------------------------------------------------------------------*

void GALGAS_structFieldASTList::addAssign_operation (const GALGAS_lstring & inOperand0,
                                                     const GALGAS_lstring & inOperand1
                                                     COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_structFieldASTList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_structFieldASTList::modifier_insertAtIndex (const GALGAS_lstring inOperand0,
                                                        const GALGAS_lstring inOperand1,
                                                        const GALGAS_uint inInsertionIndex,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) {
  if (isValid () && inInsertionIndex.isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_structFieldASTList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObjectAtIndex (attributes, inInsertionIndex.uintValue (), inCompiler COMMA_THERE) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_structFieldASTList::modifier_removeAtIndex (GALGAS_lstring & outOperand0,
                                                        GALGAS_lstring & outOperand1,
                                                        const GALGAS_uint inRemoveIndex,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) {
  if (isValid () && inRemoveIndex.isValid ()) {
    capCollectionElement attributes ;
    removeObjectAtIndex (attributes, inRemoveIndex.uintValue (), inCompiler COMMA_THERE) ;
    cCollectionElement_structFieldASTList * p = (cCollectionElement_structFieldASTList *) attributes.ptr () ;
    if (NULL == p) {
      outOperand0.drop () ;
      outOperand1.drop () ;
    }else{
      macroValidSharedObject (p, cCollectionElement_structFieldASTList) ;
      outOperand0 = p->mObject.mAttribute_mFieldTypeName ;
      outOperand1 = p->mObject.mAttribute_mFieldName ;
    }
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_structFieldASTList::modifier_popFirst (GALGAS_lstring & outOperand0,
                                                   GALGAS_lstring & outOperand1,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_structFieldASTList * p = (cCollectionElement_structFieldASTList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_structFieldASTList) ;
    outOperand0 = p->mObject.mAttribute_mFieldTypeName ;
    outOperand1 = p->mObject.mAttribute_mFieldName ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_structFieldASTList::modifier_popLast (GALGAS_lstring & outOperand0,
                                                  GALGAS_lstring & outOperand1,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_structFieldASTList * p = (cCollectionElement_structFieldASTList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_structFieldASTList) ;
    outOperand0 = p->mObject.mAttribute_mFieldTypeName ;
    outOperand1 = p->mObject.mAttribute_mFieldName ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_structFieldASTList::method_first (GALGAS_lstring & outOperand0,
                                              GALGAS_lstring & outOperand1,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_structFieldASTList * p = (cCollectionElement_structFieldASTList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_structFieldASTList) ;
    outOperand0 = p->mObject.mAttribute_mFieldTypeName ;
    outOperand1 = p->mObject.mAttribute_mFieldName ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_structFieldASTList::method_last (GALGAS_lstring & outOperand0,
                                             GALGAS_lstring & outOperand1,
                                             C_Compiler * inCompiler
                                             COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_structFieldASTList * p = (cCollectionElement_structFieldASTList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_structFieldASTList) ;
    outOperand0 = p->mObject.mAttribute_mFieldTypeName ;
    outOperand1 = p->mObject.mAttribute_mFieldName ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_structFieldASTList GALGAS_structFieldASTList::operator_concat (const GALGAS_structFieldASTList & inOperand
                                                                      COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_structFieldASTList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_structFieldASTList GALGAS_structFieldASTList::add_operation (const GALGAS_structFieldASTList & inOperand,
                                                                    C_Compiler * /* inCompiler */
                                                                    COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_structFieldASTList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_structFieldASTList GALGAS_structFieldASTList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                              C_Compiler * inCompiler
                                                                              COMMA_LOCATION_ARGS) const {
  GALGAS_structFieldASTList result = GALGAS_structFieldASTList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_structFieldASTList GALGAS_structFieldASTList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                              C_Compiler * inCompiler
                                                                              COMMA_LOCATION_ARGS) const {
  GALGAS_structFieldASTList result = GALGAS_structFieldASTList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_structFieldASTList::dotAssign_operation (const GALGAS_structFieldASTList inOperand
                                                     COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_structFieldASTList::reader_mFieldTypeNameAtIndex (const GALGAS_uint & inIndex,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_structFieldASTList * p = (cCollectionElement_structFieldASTList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_structFieldASTList) ;
    result = p->mObject.mAttribute_mFieldTypeName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_structFieldASTList::reader_mFieldNameAtIndex (const GALGAS_uint & inIndex,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_structFieldASTList * p = (cCollectionElement_structFieldASTList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_structFieldASTList) ;
    result = p->mObject.mAttribute_mFieldName ;
  }
  return result ;
}



//-----------------------------------------------------------------------------*

cEnumerator_structFieldASTList::cEnumerator_structFieldASTList (const GALGAS_structFieldASTList & inEnumeratedObject,
                                                                const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_structFieldASTList_2D_element cEnumerator_structFieldASTList::current (LOCATION_ARGS) const {
  const cCollectionElement_structFieldASTList * p = (const cCollectionElement_structFieldASTList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_structFieldASTList) ;
  return p->mObject ;
}


//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_structFieldASTList::current_mFieldTypeName (LOCATION_ARGS) const {
  const cCollectionElement_structFieldASTList * p = (const cCollectionElement_structFieldASTList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_structFieldASTList) ;
  return p->mObject.mAttribute_mFieldTypeName ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_structFieldASTList::current_mFieldName (LOCATION_ARGS) const {
  const cCollectionElement_structFieldASTList * p = (const cCollectionElement_structFieldASTList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_structFieldASTList) ;
  return p->mObject.mAttribute_mFieldName ;
}




//-----------------------------------------------------------------------------*
//                                                                             *
//                          @structFieldASTList type                           *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_structFieldASTList ("structFieldASTList",
                                           NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_structFieldASTList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_structFieldASTList ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_structFieldASTList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_structFieldASTList (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_structFieldASTList GALGAS_structFieldASTList::extractObject (const GALGAS_object & inObject,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_structFieldASTList result ;
  const GALGAS_structFieldASTList * p = (const GALGAS_structFieldASTList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_structFieldASTList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("structFieldASTList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_typeKind::GALGAS_typeKind (void) :
mEnum (kNotBuilt) {
}

//-----------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::constructor_classType (UNUSED_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  result.mEnum = kEnum_classType ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::constructor_controllerClassType (UNUSED_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  result.mEnum = kEnum_controllerClassType ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::constructor_documentType (UNUSED_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  result.mEnum = kEnum_documentType ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::constructor_entityType (UNUSED_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  result.mEnum = kEnum_entityType ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::constructor_enumType (UNUSED_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  result.mEnum = kEnum_enumType ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::constructor_nibClassType (UNUSED_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  result.mEnum = kEnum_nibClassType ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::constructor_outletClassType (UNUSED_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  result.mEnum = kEnum_outletClassType ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::constructor_preferencesType (UNUSED_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  result.mEnum = kEnum_preferencesType ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::constructor_protocolType (UNUSED_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  result.mEnum = kEnum_protocolType ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::constructor_structType (UNUSED_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  result.mEnum = kEnum_structType ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::constructor_boolType (UNUSED_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  result.mEnum = kEnum_boolType ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::constructor_integerType (UNUSED_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  result.mEnum = kEnum_integerType ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::constructor_uintegerType (UNUSED_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  result.mEnum = kEnum_uintegerType ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::constructor_doubleType (UNUSED_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  result.mEnum = kEnum_doubleType ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::constructor_stringType (UNUSED_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  result.mEnum = kEnum_stringType ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::constructor_colorType (UNUSED_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  result.mEnum = kEnum_colorType ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::constructor_dataType (UNUSED_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  result.mEnum = kEnum_dataType ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::constructor_dateType (UNUSED_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  result.mEnum = kEnum_dateType ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::constructor_fontType (UNUSED_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  result.mEnum = kEnum_fontType ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::constructor_imageType (UNUSED_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  result.mEnum = kEnum_imageType ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::constructor_menuType (UNUSED_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  result.mEnum = kEnum_menuType ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::constructor_bezierPathType (UNUSED_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  result.mEnum = kEnum_bezierPathType ;
  return result ;
}

//-----------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_typeKind [23] = {
  "(not built)",
  "classType",
  "controllerClassType",
  "documentType",
  "entityType",
  "enumType",
  "nibClassType",
  "outletClassType",
  "preferencesType",
  "protocolType",
  "structType",
  "boolType",
  "integerType",
  "uintegerType",
  "doubleType",
  "stringType",
  "colorType",
  "dataType",
  "dateType",
  "fontType",
  "imageType",
  "menuType",
  "bezierPathType"
} ;

//-----------------------------------------------------------------------------*

void GALGAS_typeKind::description (C_String & ioString,
                                   const int32_t /* inIndentation */) const {
  ioString << "<enum @typeKind: " << gEnumNameArrayFor_typeKind [mEnum] << ">" ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_typeKind::objectCompare (const GALGAS_typeKind & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = kOperandEqual ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//                               @typeKind type                                *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_typeKind ("typeKind",
                                 NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_typeKind::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_typeKind ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_typeKind::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_typeKind (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_typeKind::extractObject (const GALGAS_object & inObject,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) {
  GALGAS_typeKind result ;
  const GALGAS_typeKind * p = (const GALGAS_typeKind *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_typeKind *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("typeKind", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*



typeComparisonResult GALGAS_abstractBinding::objectCompare (const GALGAS_abstractBinding & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_abstractBinding::GALGAS_abstractBinding (void) :
AC_GALGAS_class () {
}

//-----------------------------------------------------------------------------*

GALGAS_abstractBinding::GALGAS_abstractBinding (const cPtr_abstractBinding * inSourcePtr) :
AC_GALGAS_class (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_abstractBinding) ;
}

//-----------------------------------------------------------------------------*
//                  Pointer class for @abstractBinding class                   *
//-----------------------------------------------------------------------------*

cPtr_abstractBinding::cPtr_abstractBinding (LOCATION_ARGS) :
acPtr_class (THERE) {
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                            @abstractBinding type                            *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_abstractBinding ("abstractBinding",
                                        NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_abstractBinding::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_abstractBinding ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_abstractBinding::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_abstractBinding (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_abstractBinding GALGAS_abstractBinding::extractObject (const GALGAS_object & inObject,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) {
  GALGAS_abstractBinding result ;
  const GALGAS_abstractBinding * p = (const GALGAS_abstractBinding *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_abstractBinding *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("abstractBinding", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*

typeComparisonResult cPtr_multiValuedBinding::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_multiValuedBinding * p = (const cPtr_multiValuedBinding *) inOperandPtr ;
  macroValidSharedObject (p, cPtr_multiValuedBinding) ;
  if (kOperandEqual == result) {
    result = mAttribute_mBindingName.objectCompare (p->mAttribute_mBindingName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mMultiValuedBindingList.objectCompare (p->mAttribute_mMultiValuedBindingList) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*


typeComparisonResult GALGAS_multiValuedBinding::objectCompare (const GALGAS_multiValuedBinding & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBinding::GALGAS_multiValuedBinding (void) :
GALGAS_abstractBinding () {
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBinding GALGAS_multiValuedBinding::constructor_default (LOCATION_ARGS) {
  return GALGAS_multiValuedBinding::constructor_new (GALGAS_lstring::constructor_default (HERE),
                                                     GALGAS_multiValuedBindingList::constructor_emptyList (HERE)
                                                     COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBinding::GALGAS_multiValuedBinding (const cPtr_multiValuedBinding * inSourcePtr) :
GALGAS_abstractBinding (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_multiValuedBinding) ;
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBinding GALGAS_multiValuedBinding::constructor_new (const GALGAS_lstring & inAttribute_mBindingName,
                                                                      const GALGAS_multiValuedBindingList & inAttribute_mMultiValuedBindingList
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_multiValuedBinding result ;
  if (inAttribute_mBindingName.isValid () && inAttribute_mMultiValuedBindingList.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_multiValuedBinding (inAttribute_mBindingName, inAttribute_mMultiValuedBindingList COMMA_THERE)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_multiValuedBinding::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_multiValuedBinding * p = (cPtr_multiValuedBinding *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_multiValuedBinding) ;
    cPtr_multiValuedBinding * r = NULL ;
    macroMyNew (r, cPtr_multiValuedBinding (p->mAttribute_mBindingName, p->mAttribute_mMultiValuedBindingList COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_multiValuedBinding::reader_mBindingName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_multiValuedBinding * p = (const cPtr_multiValuedBinding *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_multiValuedBinding) ;
    result = p->mAttribute_mBindingName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cPtr_multiValuedBinding::reader_mBindingName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mBindingName ;
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingList GALGAS_multiValuedBinding::reader_mMultiValuedBindingList (UNUSED_LOCATION_ARGS) const {
  GALGAS_multiValuedBindingList result ;
  if (NULL != mObjectPtr) {
    const cPtr_multiValuedBinding * p = (const cPtr_multiValuedBinding *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_multiValuedBinding) ;
    result = p->mAttribute_mMultiValuedBindingList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingList cPtr_multiValuedBinding::reader_mMultiValuedBindingList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mMultiValuedBindingList ;
}

//-----------------------------------------------------------------------------*
//                 Pointer class for @multiValuedBinding class                 *
//-----------------------------------------------------------------------------*

cPtr_multiValuedBinding::cPtr_multiValuedBinding (const GALGAS_lstring & in_mBindingName,
                                                  const GALGAS_multiValuedBindingList & in_mMultiValuedBindingList
                                                  COMMA_LOCATION_ARGS) :
cPtr_abstractBinding (THERE),
mAttribute_mBindingName (in_mBindingName),
mAttribute_mMultiValuedBindingList (in_mMultiValuedBindingList) {
}

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_multiValuedBinding::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_multiValuedBinding ;
}

void cPtr_multiValuedBinding::description (C_String & ioString,
                                           const int32_t inIndentation) const {
  ioString << "[@multiValuedBinding:" ;
  mAttribute_mBindingName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mMultiValuedBindingList.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                          @multiValuedBinding type                           *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_multiValuedBinding ("multiValuedBinding",
                                           & kTypeDescriptor_GALGAS_abstractBinding) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_multiValuedBinding::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_multiValuedBinding ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_multiValuedBinding::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_multiValuedBinding (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBinding GALGAS_multiValuedBinding::extractObject (const GALGAS_object & inObject,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_multiValuedBinding result ;
  const GALGAS_multiValuedBinding * p = (const GALGAS_multiValuedBinding *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_multiValuedBinding *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("multiValuedBinding", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*

typeComparisonResult cPtr_regularControllerBinding::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_regularControllerBinding * p = (const cPtr_regularControllerBinding *) inOperandPtr ;
  macroValidSharedObject (p, cPtr_regularControllerBinding) ;
  if (kOperandEqual == result) {
    result = mAttribute_mBindingName.objectCompare (p->mAttribute_mBindingName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mControllerName.objectCompare (p->mAttribute_mControllerName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mControllerAttributeName.objectCompare (p->mAttribute_mControllerAttributeName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mOutletBindingOptionList.objectCompare (p->mAttribute_mOutletBindingOptionList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mNamesCountOption.objectCompare (p->mAttribute_mNamesCountOption) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*


typeComparisonResult GALGAS_regularControllerBinding::objectCompare (const GALGAS_regularControllerBinding & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_regularControllerBinding::GALGAS_regularControllerBinding (void) :
GALGAS_abstractBinding () {
}

//-----------------------------------------------------------------------------*

GALGAS_regularControllerBinding GALGAS_regularControllerBinding::constructor_default (LOCATION_ARGS) {
  return GALGAS_regularControllerBinding::constructor_new (GALGAS_lstring::constructor_default (HERE),
                                                           GALGAS_lstring::constructor_default (HERE),
                                                           GALGAS_lstring::constructor_default (HERE),
                                                           GALGAS_outletBindingOptionList::constructor_emptyList (HERE),
                                                           GALGAS_bool::constructor_default (HERE)
                                                           COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

GALGAS_regularControllerBinding::GALGAS_regularControllerBinding (const cPtr_regularControllerBinding * inSourcePtr) :
GALGAS_abstractBinding (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_regularControllerBinding) ;
}

//-----------------------------------------------------------------------------*

GALGAS_regularControllerBinding GALGAS_regularControllerBinding::constructor_new (const GALGAS_lstring & inAttribute_mBindingName,
                                                                                  const GALGAS_lstring & inAttribute_mControllerName,
                                                                                  const GALGAS_lstring & inAttribute_mControllerAttributeName,
                                                                                  const GALGAS_outletBindingOptionList & inAttribute_mOutletBindingOptionList,
                                                                                  const GALGAS_bool & inAttribute_mNamesCountOption
                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_regularControllerBinding result ;
  if (inAttribute_mBindingName.isValid () && inAttribute_mControllerName.isValid () && inAttribute_mControllerAttributeName.isValid () && inAttribute_mOutletBindingOptionList.isValid () && inAttribute_mNamesCountOption.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_regularControllerBinding (inAttribute_mBindingName, inAttribute_mControllerName, inAttribute_mControllerAttributeName, inAttribute_mOutletBindingOptionList, inAttribute_mNamesCountOption COMMA_THERE)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_regularControllerBinding::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_regularControllerBinding * p = (cPtr_regularControllerBinding *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_regularControllerBinding) ;
    cPtr_regularControllerBinding * r = NULL ;
    macroMyNew (r, cPtr_regularControllerBinding (p->mAttribute_mBindingName, p->mAttribute_mControllerName, p->mAttribute_mControllerAttributeName, p->mAttribute_mOutletBindingOptionList, p->mAttribute_mNamesCountOption COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_regularControllerBinding::reader_mBindingName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_regularControllerBinding * p = (const cPtr_regularControllerBinding *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_regularControllerBinding) ;
    result = p->mAttribute_mBindingName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cPtr_regularControllerBinding::reader_mBindingName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mBindingName ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_regularControllerBinding::reader_mControllerName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_regularControllerBinding * p = (const cPtr_regularControllerBinding *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_regularControllerBinding) ;
    result = p->mAttribute_mControllerName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cPtr_regularControllerBinding::reader_mControllerName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mControllerName ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_regularControllerBinding::reader_mControllerAttributeName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_regularControllerBinding * p = (const cPtr_regularControllerBinding *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_regularControllerBinding) ;
    result = p->mAttribute_mControllerAttributeName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cPtr_regularControllerBinding::reader_mControllerAttributeName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mControllerAttributeName ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletBindingOptionList GALGAS_regularControllerBinding::reader_mOutletBindingOptionList (UNUSED_LOCATION_ARGS) const {
  GALGAS_outletBindingOptionList result ;
  if (NULL != mObjectPtr) {
    const cPtr_regularControllerBinding * p = (const cPtr_regularControllerBinding *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_regularControllerBinding) ;
    result = p->mAttribute_mOutletBindingOptionList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletBindingOptionList cPtr_regularControllerBinding::reader_mOutletBindingOptionList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mOutletBindingOptionList ;
}

//-----------------------------------------------------------------------------*

GALGAS_bool GALGAS_regularControllerBinding::reader_mNamesCountOption (UNUSED_LOCATION_ARGS) const {
  GALGAS_bool result ;
  if (NULL != mObjectPtr) {
    const cPtr_regularControllerBinding * p = (const cPtr_regularControllerBinding *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_regularControllerBinding) ;
    result = p->mAttribute_mNamesCountOption ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_bool cPtr_regularControllerBinding::reader_mNamesCountOption (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mNamesCountOption ;
}

//-----------------------------------------------------------------------------*
//              Pointer class for @regularControllerBinding class              *
//-----------------------------------------------------------------------------*

cPtr_regularControllerBinding::cPtr_regularControllerBinding (const GALGAS_lstring & in_mBindingName,
                                                              const GALGAS_lstring & in_mControllerName,
                                                              const GALGAS_lstring & in_mControllerAttributeName,
                                                              const GALGAS_outletBindingOptionList & in_mOutletBindingOptionList,
                                                              const GALGAS_bool & in_mNamesCountOption
                                                              COMMA_LOCATION_ARGS) :
cPtr_abstractBinding (THERE),
mAttribute_mBindingName (in_mBindingName),
mAttribute_mControllerName (in_mControllerName),
mAttribute_mControllerAttributeName (in_mControllerAttributeName),
mAttribute_mOutletBindingOptionList (in_mOutletBindingOptionList),
mAttribute_mNamesCountOption (in_mNamesCountOption) {
}

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_regularControllerBinding::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_regularControllerBinding ;
}

void cPtr_regularControllerBinding::description (C_String & ioString,
                                                 const int32_t inIndentation) const {
  ioString << "[@regularControllerBinding:" ;
  mAttribute_mBindingName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mControllerName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mControllerAttributeName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mOutletBindingOptionList.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mNamesCountOption.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                       @regularControllerBinding type                        *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_regularControllerBinding ("regularControllerBinding",
                                                 & kTypeDescriptor_GALGAS_abstractBinding) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_regularControllerBinding::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_regularControllerBinding ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_regularControllerBinding::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_regularControllerBinding (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_regularControllerBinding GALGAS_regularControllerBinding::extractObject (const GALGAS_object & inObject,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_regularControllerBinding result ;
  const GALGAS_regularControllerBinding * p = (const GALGAS_regularControllerBinding *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_regularControllerBinding *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("regularControllerBinding", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*

typeComparisonResult cPtr_regularControllerSelectionBinding::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_regularControllerSelectionBinding * p = (const cPtr_regularControllerSelectionBinding *) inOperandPtr ;
  macroValidSharedObject (p, cPtr_regularControllerSelectionBinding) ;
  if (kOperandEqual == result) {
    result = mAttribute_mBindingName.objectCompare (p->mAttribute_mBindingName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mControllerName.objectCompare (p->mAttribute_mControllerName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mControllerAttributeName.objectCompare (p->mAttribute_mControllerAttributeName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mOutletBindingOptionList.objectCompare (p->mAttribute_mOutletBindingOptionList) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*


typeComparisonResult GALGAS_regularControllerSelectionBinding::objectCompare (const GALGAS_regularControllerSelectionBinding & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_regularControllerSelectionBinding::GALGAS_regularControllerSelectionBinding (void) :
GALGAS_abstractBinding () {
}

//-----------------------------------------------------------------------------*

GALGAS_regularControllerSelectionBinding GALGAS_regularControllerSelectionBinding::constructor_default (LOCATION_ARGS) {
  return GALGAS_regularControllerSelectionBinding::constructor_new (GALGAS_lstring::constructor_default (HERE),
                                                                    GALGAS_lstring::constructor_default (HERE),
                                                                    GALGAS_lstring::constructor_default (HERE),
                                                                    GALGAS_outletBindingOptionList::constructor_emptyList (HERE)
                                                                    COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

GALGAS_regularControllerSelectionBinding::GALGAS_regularControllerSelectionBinding (const cPtr_regularControllerSelectionBinding * inSourcePtr) :
GALGAS_abstractBinding (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_regularControllerSelectionBinding) ;
}

//-----------------------------------------------------------------------------*

GALGAS_regularControllerSelectionBinding GALGAS_regularControllerSelectionBinding::constructor_new (const GALGAS_lstring & inAttribute_mBindingName,
                                                                                                    const GALGAS_lstring & inAttribute_mControllerName,
                                                                                                    const GALGAS_lstring & inAttribute_mControllerAttributeName,
                                                                                                    const GALGAS_outletBindingOptionList & inAttribute_mOutletBindingOptionList
                                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_regularControllerSelectionBinding result ;
  if (inAttribute_mBindingName.isValid () && inAttribute_mControllerName.isValid () && inAttribute_mControllerAttributeName.isValid () && inAttribute_mOutletBindingOptionList.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_regularControllerSelectionBinding (inAttribute_mBindingName, inAttribute_mControllerName, inAttribute_mControllerAttributeName, inAttribute_mOutletBindingOptionList COMMA_THERE)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_regularControllerSelectionBinding::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_regularControllerSelectionBinding * p = (cPtr_regularControllerSelectionBinding *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_regularControllerSelectionBinding) ;
    cPtr_regularControllerSelectionBinding * r = NULL ;
    macroMyNew (r, cPtr_regularControllerSelectionBinding (p->mAttribute_mBindingName, p->mAttribute_mControllerName, p->mAttribute_mControllerAttributeName, p->mAttribute_mOutletBindingOptionList COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_regularControllerSelectionBinding::reader_mBindingName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_regularControllerSelectionBinding * p = (const cPtr_regularControllerSelectionBinding *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_regularControllerSelectionBinding) ;
    result = p->mAttribute_mBindingName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cPtr_regularControllerSelectionBinding::reader_mBindingName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mBindingName ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_regularControllerSelectionBinding::reader_mControllerName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_regularControllerSelectionBinding * p = (const cPtr_regularControllerSelectionBinding *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_regularControllerSelectionBinding) ;
    result = p->mAttribute_mControllerName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cPtr_regularControllerSelectionBinding::reader_mControllerName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mControllerName ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_regularControllerSelectionBinding::reader_mControllerAttributeName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_regularControllerSelectionBinding * p = (const cPtr_regularControllerSelectionBinding *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_regularControllerSelectionBinding) ;
    result = p->mAttribute_mControllerAttributeName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cPtr_regularControllerSelectionBinding::reader_mControllerAttributeName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mControllerAttributeName ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletBindingOptionList GALGAS_regularControllerSelectionBinding::reader_mOutletBindingOptionList (UNUSED_LOCATION_ARGS) const {
  GALGAS_outletBindingOptionList result ;
  if (NULL != mObjectPtr) {
    const cPtr_regularControllerSelectionBinding * p = (const cPtr_regularControllerSelectionBinding *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_regularControllerSelectionBinding) ;
    result = p->mAttribute_mOutletBindingOptionList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletBindingOptionList cPtr_regularControllerSelectionBinding::reader_mOutletBindingOptionList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mOutletBindingOptionList ;
}

//-----------------------------------------------------------------------------*
//         Pointer class for @regularControllerSelectionBinding class          *
//-----------------------------------------------------------------------------*

cPtr_regularControllerSelectionBinding::cPtr_regularControllerSelectionBinding (const GALGAS_lstring & in_mBindingName,
                                                                                const GALGAS_lstring & in_mControllerName,
                                                                                const GALGAS_lstring & in_mControllerAttributeName,
                                                                                const GALGAS_outletBindingOptionList & in_mOutletBindingOptionList
                                                                                COMMA_LOCATION_ARGS) :
cPtr_abstractBinding (THERE),
mAttribute_mBindingName (in_mBindingName),
mAttribute_mControllerName (in_mControllerName),
mAttribute_mControllerAttributeName (in_mControllerAttributeName),
mAttribute_mOutletBindingOptionList (in_mOutletBindingOptionList) {
}

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_regularControllerSelectionBinding::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_regularControllerSelectionBinding ;
}

void cPtr_regularControllerSelectionBinding::description (C_String & ioString,
                                                          const int32_t inIndentation) const {
  ioString << "[@regularControllerSelectionBinding:" ;
  mAttribute_mBindingName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mControllerName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mControllerAttributeName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mOutletBindingOptionList.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                   @regularControllerSelectionBinding type                   *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_regularControllerSelectionBinding ("regularControllerSelectionBinding",
                                                          & kTypeDescriptor_GALGAS_abstractBinding) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_regularControllerSelectionBinding::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_regularControllerSelectionBinding ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_regularControllerSelectionBinding::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_regularControllerSelectionBinding (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_regularControllerSelectionBinding GALGAS_regularControllerSelectionBinding::extractObject (const GALGAS_object & inObject,
                                                                                                  C_Compiler * inCompiler
                                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_regularControllerSelectionBinding result ;
  const GALGAS_regularControllerSelectionBinding * p = (const GALGAS_regularControllerSelectionBinding *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_regularControllerSelectionBinding *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("regularControllerSelectionBinding", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*

typeComparisonResult cPtr_regularPreferenceBinding::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_regularPreferenceBinding * p = (const cPtr_regularPreferenceBinding *) inOperandPtr ;
  macroValidSharedObject (p, cPtr_regularPreferenceBinding) ;
  if (kOperandEqual == result) {
    result = mAttribute_mBindingName.objectCompare (p->mAttribute_mBindingName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mPreferenceName.objectCompare (p->mAttribute_mPreferenceName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mPreferenceAttributeName.objectCompare (p->mAttribute_mPreferenceAttributeName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mOutletBindingOptionList.objectCompare (p->mAttribute_mOutletBindingOptionList) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*


typeComparisonResult GALGAS_regularPreferenceBinding::objectCompare (const GALGAS_regularPreferenceBinding & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_regularPreferenceBinding::GALGAS_regularPreferenceBinding (void) :
GALGAS_abstractBinding () {
}

//-----------------------------------------------------------------------------*

GALGAS_regularPreferenceBinding GALGAS_regularPreferenceBinding::constructor_default (LOCATION_ARGS) {
  return GALGAS_regularPreferenceBinding::constructor_new (GALGAS_lstring::constructor_default (HERE),
                                                           GALGAS_lstring::constructor_default (HERE),
                                                           GALGAS_lstring::constructor_default (HERE),
                                                           GALGAS_outletBindingOptionList::constructor_emptyList (HERE)
                                                           COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

GALGAS_regularPreferenceBinding::GALGAS_regularPreferenceBinding (const cPtr_regularPreferenceBinding * inSourcePtr) :
GALGAS_abstractBinding (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_regularPreferenceBinding) ;
}

//-----------------------------------------------------------------------------*

GALGAS_regularPreferenceBinding GALGAS_regularPreferenceBinding::constructor_new (const GALGAS_lstring & inAttribute_mBindingName,
                                                                                  const GALGAS_lstring & inAttribute_mPreferenceName,
                                                                                  const GALGAS_lstring & inAttribute_mPreferenceAttributeName,
                                                                                  const GALGAS_outletBindingOptionList & inAttribute_mOutletBindingOptionList
                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_regularPreferenceBinding result ;
  if (inAttribute_mBindingName.isValid () && inAttribute_mPreferenceName.isValid () && inAttribute_mPreferenceAttributeName.isValid () && inAttribute_mOutletBindingOptionList.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_regularPreferenceBinding (inAttribute_mBindingName, inAttribute_mPreferenceName, inAttribute_mPreferenceAttributeName, inAttribute_mOutletBindingOptionList COMMA_THERE)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_regularPreferenceBinding::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_regularPreferenceBinding * p = (cPtr_regularPreferenceBinding *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_regularPreferenceBinding) ;
    cPtr_regularPreferenceBinding * r = NULL ;
    macroMyNew (r, cPtr_regularPreferenceBinding (p->mAttribute_mBindingName, p->mAttribute_mPreferenceName, p->mAttribute_mPreferenceAttributeName, p->mAttribute_mOutletBindingOptionList COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_regularPreferenceBinding::reader_mBindingName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_regularPreferenceBinding * p = (const cPtr_regularPreferenceBinding *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_regularPreferenceBinding) ;
    result = p->mAttribute_mBindingName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cPtr_regularPreferenceBinding::reader_mBindingName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mBindingName ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_regularPreferenceBinding::reader_mPreferenceName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_regularPreferenceBinding * p = (const cPtr_regularPreferenceBinding *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_regularPreferenceBinding) ;
    result = p->mAttribute_mPreferenceName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cPtr_regularPreferenceBinding::reader_mPreferenceName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mPreferenceName ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_regularPreferenceBinding::reader_mPreferenceAttributeName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_regularPreferenceBinding * p = (const cPtr_regularPreferenceBinding *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_regularPreferenceBinding) ;
    result = p->mAttribute_mPreferenceAttributeName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cPtr_regularPreferenceBinding::reader_mPreferenceAttributeName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mPreferenceAttributeName ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletBindingOptionList GALGAS_regularPreferenceBinding::reader_mOutletBindingOptionList (UNUSED_LOCATION_ARGS) const {
  GALGAS_outletBindingOptionList result ;
  if (NULL != mObjectPtr) {
    const cPtr_regularPreferenceBinding * p = (const cPtr_regularPreferenceBinding *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_regularPreferenceBinding) ;
    result = p->mAttribute_mOutletBindingOptionList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletBindingOptionList cPtr_regularPreferenceBinding::reader_mOutletBindingOptionList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mOutletBindingOptionList ;
}

//-----------------------------------------------------------------------------*
//              Pointer class for @regularPreferenceBinding class              *
//-----------------------------------------------------------------------------*

cPtr_regularPreferenceBinding::cPtr_regularPreferenceBinding (const GALGAS_lstring & in_mBindingName,
                                                              const GALGAS_lstring & in_mPreferenceName,
                                                              const GALGAS_lstring & in_mPreferenceAttributeName,
                                                              const GALGAS_outletBindingOptionList & in_mOutletBindingOptionList
                                                              COMMA_LOCATION_ARGS) :
cPtr_abstractBinding (THERE),
mAttribute_mBindingName (in_mBindingName),
mAttribute_mPreferenceName (in_mPreferenceName),
mAttribute_mPreferenceAttributeName (in_mPreferenceAttributeName),
mAttribute_mOutletBindingOptionList (in_mOutletBindingOptionList) {
}

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_regularPreferenceBinding::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_regularPreferenceBinding ;
}

void cPtr_regularPreferenceBinding::description (C_String & ioString,
                                                 const int32_t inIndentation) const {
  ioString << "[@regularPreferenceBinding:" ;
  mAttribute_mBindingName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mPreferenceName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mPreferenceAttributeName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mOutletBindingOptionList.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                       @regularPreferenceBinding type                        *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_regularPreferenceBinding ("regularPreferenceBinding",
                                                 & kTypeDescriptor_GALGAS_abstractBinding) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_regularPreferenceBinding::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_regularPreferenceBinding ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_regularPreferenceBinding::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_regularPreferenceBinding (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_regularPreferenceBinding GALGAS_regularPreferenceBinding::extractObject (const GALGAS_object & inObject,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_regularPreferenceBinding result ;
  const GALGAS_regularPreferenceBinding * p = (const GALGAS_regularPreferenceBinding *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_regularPreferenceBinding *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("regularPreferenceBinding", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*

typeComparisonResult cPtr_regularRootBinding::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_regularRootBinding * p = (const cPtr_regularRootBinding *) inOperandPtr ;
  macroValidSharedObject (p, cPtr_regularRootBinding) ;
  if (kOperandEqual == result) {
    result = mAttribute_mBindingName.objectCompare (p->mAttribute_mBindingName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mObservableAttributeName.objectCompare (p->mAttribute_mObservableAttributeName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mOutletBindingOptionList.objectCompare (p->mAttribute_mOutletBindingOptionList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mNamesCountOption.objectCompare (p->mAttribute_mNamesCountOption) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*


typeComparisonResult GALGAS_regularRootBinding::objectCompare (const GALGAS_regularRootBinding & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_regularRootBinding::GALGAS_regularRootBinding (void) :
GALGAS_abstractBinding () {
}

//-----------------------------------------------------------------------------*

GALGAS_regularRootBinding GALGAS_regularRootBinding::constructor_default (LOCATION_ARGS) {
  return GALGAS_regularRootBinding::constructor_new (GALGAS_lstring::constructor_default (HERE),
                                                     GALGAS_lstring::constructor_default (HERE),
                                                     GALGAS_outletBindingOptionList::constructor_emptyList (HERE),
                                                     GALGAS_bool::constructor_default (HERE)
                                                     COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

GALGAS_regularRootBinding::GALGAS_regularRootBinding (const cPtr_regularRootBinding * inSourcePtr) :
GALGAS_abstractBinding (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_regularRootBinding) ;
}

//-----------------------------------------------------------------------------*

GALGAS_regularRootBinding GALGAS_regularRootBinding::constructor_new (const GALGAS_lstring & inAttribute_mBindingName,
                                                                      const GALGAS_lstring & inAttribute_mObservableAttributeName,
                                                                      const GALGAS_outletBindingOptionList & inAttribute_mOutletBindingOptionList,
                                                                      const GALGAS_bool & inAttribute_mNamesCountOption
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_regularRootBinding result ;
  if (inAttribute_mBindingName.isValid () && inAttribute_mObservableAttributeName.isValid () && inAttribute_mOutletBindingOptionList.isValid () && inAttribute_mNamesCountOption.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_regularRootBinding (inAttribute_mBindingName, inAttribute_mObservableAttributeName, inAttribute_mOutletBindingOptionList, inAttribute_mNamesCountOption COMMA_THERE)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_regularRootBinding::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_regularRootBinding * p = (cPtr_regularRootBinding *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_regularRootBinding) ;
    cPtr_regularRootBinding * r = NULL ;
    macroMyNew (r, cPtr_regularRootBinding (p->mAttribute_mBindingName, p->mAttribute_mObservableAttributeName, p->mAttribute_mOutletBindingOptionList, p->mAttribute_mNamesCountOption COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_regularRootBinding::reader_mBindingName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_regularRootBinding * p = (const cPtr_regularRootBinding *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_regularRootBinding) ;
    result = p->mAttribute_mBindingName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cPtr_regularRootBinding::reader_mBindingName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mBindingName ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_regularRootBinding::reader_mObservableAttributeName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_regularRootBinding * p = (const cPtr_regularRootBinding *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_regularRootBinding) ;
    result = p->mAttribute_mObservableAttributeName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cPtr_regularRootBinding::reader_mObservableAttributeName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mObservableAttributeName ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletBindingOptionList GALGAS_regularRootBinding::reader_mOutletBindingOptionList (UNUSED_LOCATION_ARGS) const {
  GALGAS_outletBindingOptionList result ;
  if (NULL != mObjectPtr) {
    const cPtr_regularRootBinding * p = (const cPtr_regularRootBinding *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_regularRootBinding) ;
    result = p->mAttribute_mOutletBindingOptionList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletBindingOptionList cPtr_regularRootBinding::reader_mOutletBindingOptionList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mOutletBindingOptionList ;
}

//-----------------------------------------------------------------------------*

GALGAS_bool GALGAS_regularRootBinding::reader_mNamesCountOption (UNUSED_LOCATION_ARGS) const {
  GALGAS_bool result ;
  if (NULL != mObjectPtr) {
    const cPtr_regularRootBinding * p = (const cPtr_regularRootBinding *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_regularRootBinding) ;
    result = p->mAttribute_mNamesCountOption ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_bool cPtr_regularRootBinding::reader_mNamesCountOption (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mNamesCountOption ;
}

//-----------------------------------------------------------------------------*
//                 Pointer class for @regularRootBinding class                 *
//-----------------------------------------------------------------------------*

cPtr_regularRootBinding::cPtr_regularRootBinding (const GALGAS_lstring & in_mBindingName,
                                                  const GALGAS_lstring & in_mObservableAttributeName,
                                                  const GALGAS_outletBindingOptionList & in_mOutletBindingOptionList,
                                                  const GALGAS_bool & in_mNamesCountOption
                                                  COMMA_LOCATION_ARGS) :
cPtr_abstractBinding (THERE),
mAttribute_mBindingName (in_mBindingName),
mAttribute_mObservableAttributeName (in_mObservableAttributeName),
mAttribute_mOutletBindingOptionList (in_mOutletBindingOptionList),
mAttribute_mNamesCountOption (in_mNamesCountOption) {
}

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_regularRootBinding::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_regularRootBinding ;
}

void cPtr_regularRootBinding::description (C_String & ioString,
                                           const int32_t inIndentation) const {
  ioString << "[@regularRootBinding:" ;
  mAttribute_mBindingName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mObservableAttributeName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mOutletBindingOptionList.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mNamesCountOption.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                          @regularRootBinding type                           *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_regularRootBinding ("regularRootBinding",
                                           & kTypeDescriptor_GALGAS_abstractBinding) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_regularRootBinding::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_regularRootBinding ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_regularRootBinding::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_regularRootBinding (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_regularRootBinding GALGAS_regularRootBinding::extractObject (const GALGAS_object & inObject,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_regularRootBinding result ;
  const GALGAS_regularRootBinding * p = (const GALGAS_regularRootBinding *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_regularRootBinding *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("regularRootBinding", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*

typeComparisonResult cPtr_regularSelfBinding::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_regularSelfBinding * p = (const cPtr_regularSelfBinding *) inOperandPtr ;
  macroValidSharedObject (p, cPtr_regularSelfBinding) ;
  if (kOperandEqual == result) {
    result = mAttribute_mBindingName.objectCompare (p->mAttribute_mBindingName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mObservableAttributeName.objectCompare (p->mAttribute_mObservableAttributeName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mOutletBindingOptionList.objectCompare (p->mAttribute_mOutletBindingOptionList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mNamesCountOption.objectCompare (p->mAttribute_mNamesCountOption) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*


typeComparisonResult GALGAS_regularSelfBinding::objectCompare (const GALGAS_regularSelfBinding & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_regularSelfBinding::GALGAS_regularSelfBinding (void) :
GALGAS_abstractBinding () {
}

//-----------------------------------------------------------------------------*

GALGAS_regularSelfBinding GALGAS_regularSelfBinding::constructor_default (LOCATION_ARGS) {
  return GALGAS_regularSelfBinding::constructor_new (GALGAS_lstring::constructor_default (HERE),
                                                     GALGAS_lstring::constructor_default (HERE),
                                                     GALGAS_outletBindingOptionList::constructor_emptyList (HERE),
                                                     GALGAS_bool::constructor_default (HERE)
                                                     COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

GALGAS_regularSelfBinding::GALGAS_regularSelfBinding (const cPtr_regularSelfBinding * inSourcePtr) :
GALGAS_abstractBinding (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_regularSelfBinding) ;
}

//-----------------------------------------------------------------------------*

GALGAS_regularSelfBinding GALGAS_regularSelfBinding::constructor_new (const GALGAS_lstring & inAttribute_mBindingName,
                                                                      const GALGAS_lstring & inAttribute_mObservableAttributeName,
                                                                      const GALGAS_outletBindingOptionList & inAttribute_mOutletBindingOptionList,
                                                                      const GALGAS_bool & inAttribute_mNamesCountOption
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_regularSelfBinding result ;
  if (inAttribute_mBindingName.isValid () && inAttribute_mObservableAttributeName.isValid () && inAttribute_mOutletBindingOptionList.isValid () && inAttribute_mNamesCountOption.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_regularSelfBinding (inAttribute_mBindingName, inAttribute_mObservableAttributeName, inAttribute_mOutletBindingOptionList, inAttribute_mNamesCountOption COMMA_THERE)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_regularSelfBinding::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_regularSelfBinding * p = (cPtr_regularSelfBinding *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_regularSelfBinding) ;
    cPtr_regularSelfBinding * r = NULL ;
    macroMyNew (r, cPtr_regularSelfBinding (p->mAttribute_mBindingName, p->mAttribute_mObservableAttributeName, p->mAttribute_mOutletBindingOptionList, p->mAttribute_mNamesCountOption COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_regularSelfBinding::reader_mBindingName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_regularSelfBinding * p = (const cPtr_regularSelfBinding *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_regularSelfBinding) ;
    result = p->mAttribute_mBindingName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cPtr_regularSelfBinding::reader_mBindingName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mBindingName ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_regularSelfBinding::reader_mObservableAttributeName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_regularSelfBinding * p = (const cPtr_regularSelfBinding *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_regularSelfBinding) ;
    result = p->mAttribute_mObservableAttributeName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cPtr_regularSelfBinding::reader_mObservableAttributeName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mObservableAttributeName ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletBindingOptionList GALGAS_regularSelfBinding::reader_mOutletBindingOptionList (UNUSED_LOCATION_ARGS) const {
  GALGAS_outletBindingOptionList result ;
  if (NULL != mObjectPtr) {
    const cPtr_regularSelfBinding * p = (const cPtr_regularSelfBinding *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_regularSelfBinding) ;
    result = p->mAttribute_mOutletBindingOptionList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletBindingOptionList cPtr_regularSelfBinding::reader_mOutletBindingOptionList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mOutletBindingOptionList ;
}

//-----------------------------------------------------------------------------*

GALGAS_bool GALGAS_regularSelfBinding::reader_mNamesCountOption (UNUSED_LOCATION_ARGS) const {
  GALGAS_bool result ;
  if (NULL != mObjectPtr) {
    const cPtr_regularSelfBinding * p = (const cPtr_regularSelfBinding *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_regularSelfBinding) ;
    result = p->mAttribute_mNamesCountOption ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_bool cPtr_regularSelfBinding::reader_mNamesCountOption (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mNamesCountOption ;
}

//-----------------------------------------------------------------------------*
//                 Pointer class for @regularSelfBinding class                 *
//-----------------------------------------------------------------------------*

cPtr_regularSelfBinding::cPtr_regularSelfBinding (const GALGAS_lstring & in_mBindingName,
                                                  const GALGAS_lstring & in_mObservableAttributeName,
                                                  const GALGAS_outletBindingOptionList & in_mOutletBindingOptionList,
                                                  const GALGAS_bool & in_mNamesCountOption
                                                  COMMA_LOCATION_ARGS) :
cPtr_abstractBinding (THERE),
mAttribute_mBindingName (in_mBindingName),
mAttribute_mObservableAttributeName (in_mObservableAttributeName),
mAttribute_mOutletBindingOptionList (in_mOutletBindingOptionList),
mAttribute_mNamesCountOption (in_mNamesCountOption) {
}

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_regularSelfBinding::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_regularSelfBinding ;
}

void cPtr_regularSelfBinding::description (C_String & ioString,
                                           const int32_t inIndentation) const {
  ioString << "[@regularSelfBinding:" ;
  mAttribute_mBindingName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mObservableAttributeName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mOutletBindingOptionList.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mNamesCountOption.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                          @regularSelfBinding type                           *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_regularSelfBinding ("regularSelfBinding",
                                           & kTypeDescriptor_GALGAS_abstractBinding) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_regularSelfBinding::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_regularSelfBinding ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_regularSelfBinding::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_regularSelfBinding (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_regularSelfBinding GALGAS_regularSelfBinding::extractObject (const GALGAS_object & inObject,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_regularSelfBinding result ;
  const GALGAS_regularSelfBinding * p = (const GALGAS_regularSelfBinding *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_regularSelfBinding *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("regularSelfBinding", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*

typeComparisonResult cPtr_runBinding::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_runBinding * p = (const cPtr_runBinding *) inOperandPtr ;
  macroValidSharedObject (p, cPtr_runBinding) ;
  if (kOperandEqual == result) {
    result = mAttribute_mTargetName.objectCompare (p->mAttribute_mTargetName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mActionName.objectCompare (p->mAttribute_mActionName) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*


typeComparisonResult GALGAS_runBinding::objectCompare (const GALGAS_runBinding & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_runBinding::GALGAS_runBinding (void) :
GALGAS_abstractBinding () {
}

//-----------------------------------------------------------------------------*

GALGAS_runBinding GALGAS_runBinding::constructor_default (LOCATION_ARGS) {
  return GALGAS_runBinding::constructor_new (GALGAS_lstring::constructor_default (HERE),
                                             GALGAS_lstring::constructor_default (HERE)
                                             COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

GALGAS_runBinding::GALGAS_runBinding (const cPtr_runBinding * inSourcePtr) :
GALGAS_abstractBinding (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_runBinding) ;
}

//-----------------------------------------------------------------------------*

GALGAS_runBinding GALGAS_runBinding::constructor_new (const GALGAS_lstring & inAttribute_mTargetName,
                                                      const GALGAS_lstring & inAttribute_mActionName
                                                      COMMA_LOCATION_ARGS) {
  GALGAS_runBinding result ;
  if (inAttribute_mTargetName.isValid () && inAttribute_mActionName.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_runBinding (inAttribute_mTargetName, inAttribute_mActionName COMMA_THERE)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_runBinding::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_runBinding * p = (cPtr_runBinding *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_runBinding) ;
    cPtr_runBinding * r = NULL ;
    macroMyNew (r, cPtr_runBinding (p->mAttribute_mTargetName, p->mAttribute_mActionName COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_runBinding::reader_mTargetName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_runBinding * p = (const cPtr_runBinding *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_runBinding) ;
    result = p->mAttribute_mTargetName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cPtr_runBinding::reader_mTargetName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mTargetName ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_runBinding::reader_mActionName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_runBinding * p = (const cPtr_runBinding *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_runBinding) ;
    result = p->mAttribute_mActionName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cPtr_runBinding::reader_mActionName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mActionName ;
}

//-----------------------------------------------------------------------------*
//                     Pointer class for @runBinding class                     *
//-----------------------------------------------------------------------------*

cPtr_runBinding::cPtr_runBinding (const GALGAS_lstring & in_mTargetName,
                                  const GALGAS_lstring & in_mActionName
                                  COMMA_LOCATION_ARGS) :
cPtr_abstractBinding (THERE),
mAttribute_mTargetName (in_mTargetName),
mAttribute_mActionName (in_mActionName) {
}

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_runBinding::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_runBinding ;
}

void cPtr_runBinding::description (C_String & ioString,
                                   const int32_t inIndentation) const {
  ioString << "[@runBinding:" ;
  mAttribute_mTargetName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mActionName.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                              @runBinding type                               *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_runBinding ("runBinding",
                                   & kTypeDescriptor_GALGAS_abstractBinding) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_runBinding::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_runBinding ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_runBinding::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_runBinding (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_runBinding GALGAS_runBinding::extractObject (const GALGAS_object & inObject,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) {
  GALGAS_runBinding result ;
  const GALGAS_runBinding * p = (const GALGAS_runBinding *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_runBinding *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("runBinding", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*

typeComparisonResult cPtr_tableValueBinding::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_tableValueBinding * p = (const cPtr_tableValueBinding *) inOperandPtr ;
  macroValidSharedObject (p, cPtr_tableValueBinding) ;
  if (kOperandEqual == result) {
    result = mAttribute_mControllerName.objectCompare (p->mAttribute_mControllerName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mTableValueColumnBinding.objectCompare (p->mAttribute_mTableValueColumnBinding) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*


typeComparisonResult GALGAS_tableValueBinding::objectCompare (const GALGAS_tableValueBinding & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_tableValueBinding::GALGAS_tableValueBinding (void) :
GALGAS_abstractBinding () {
}

//-----------------------------------------------------------------------------*

GALGAS_tableValueBinding GALGAS_tableValueBinding::constructor_default (LOCATION_ARGS) {
  return GALGAS_tableValueBinding::constructor_new (GALGAS_lstring::constructor_default (HERE),
                                                    GALGAS_tableValueColumnBinding::constructor_emptyList (HERE)
                                                    COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

GALGAS_tableValueBinding::GALGAS_tableValueBinding (const cPtr_tableValueBinding * inSourcePtr) :
GALGAS_abstractBinding (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_tableValueBinding) ;
}

//-----------------------------------------------------------------------------*

GALGAS_tableValueBinding GALGAS_tableValueBinding::constructor_new (const GALGAS_lstring & inAttribute_mControllerName,
                                                                    const GALGAS_tableValueColumnBinding & inAttribute_mTableValueColumnBinding
                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_tableValueBinding result ;
  if (inAttribute_mControllerName.isValid () && inAttribute_mTableValueColumnBinding.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_tableValueBinding (inAttribute_mControllerName, inAttribute_mTableValueColumnBinding COMMA_THERE)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_tableValueBinding::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_tableValueBinding * p = (cPtr_tableValueBinding *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_tableValueBinding) ;
    cPtr_tableValueBinding * r = NULL ;
    macroMyNew (r, cPtr_tableValueBinding (p->mAttribute_mControllerName, p->mAttribute_mTableValueColumnBinding COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_tableValueBinding::reader_mControllerName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_tableValueBinding * p = (const cPtr_tableValueBinding *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_tableValueBinding) ;
    result = p->mAttribute_mControllerName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cPtr_tableValueBinding::reader_mControllerName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mControllerName ;
}

//-----------------------------------------------------------------------------*

GALGAS_tableValueColumnBinding GALGAS_tableValueBinding::reader_mTableValueColumnBinding (UNUSED_LOCATION_ARGS) const {
  GALGAS_tableValueColumnBinding result ;
  if (NULL != mObjectPtr) {
    const cPtr_tableValueBinding * p = (const cPtr_tableValueBinding *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_tableValueBinding) ;
    result = p->mAttribute_mTableValueColumnBinding ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_tableValueColumnBinding cPtr_tableValueBinding::reader_mTableValueColumnBinding (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mTableValueColumnBinding ;
}

//-----------------------------------------------------------------------------*
//                 Pointer class for @tableValueBinding class                  *
//-----------------------------------------------------------------------------*

cPtr_tableValueBinding::cPtr_tableValueBinding (const GALGAS_lstring & in_mControllerName,
                                                const GALGAS_tableValueColumnBinding & in_mTableValueColumnBinding
                                                COMMA_LOCATION_ARGS) :
cPtr_abstractBinding (THERE),
mAttribute_mControllerName (in_mControllerName),
mAttribute_mTableValueColumnBinding (in_mTableValueColumnBinding) {
}

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_tableValueBinding::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_tableValueBinding ;
}

void cPtr_tableValueBinding::description (C_String & ioString,
                                          const int32_t inIndentation) const {
  ioString << "[@tableValueBinding:" ;
  mAttribute_mControllerName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mTableValueColumnBinding.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                           @tableValueBinding type                           *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_tableValueBinding ("tableValueBinding",
                                          & kTypeDescriptor_GALGAS_abstractBinding) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_tableValueBinding::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_tableValueBinding ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_tableValueBinding::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_tableValueBinding (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_tableValueBinding GALGAS_tableValueBinding::extractObject (const GALGAS_object & inObject,
                                                                  C_Compiler * inCompiler
                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_tableValueBinding result ;
  const GALGAS_tableValueBinding * p = (const GALGAS_tableValueBinding *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_tableValueBinding *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("tableValueBinding", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*



typeComparisonResult GALGAS_abstractDefaultValue::objectCompare (const GALGAS_abstractDefaultValue & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_abstractDefaultValue::GALGAS_abstractDefaultValue (void) :
AC_GALGAS_class () {
}

//-----------------------------------------------------------------------------*

GALGAS_abstractDefaultValue::GALGAS_abstractDefaultValue (const cPtr_abstractDefaultValue * inSourcePtr) :
AC_GALGAS_class (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_abstractDefaultValue) ;
}

//-----------------------------------------------------------------------------*
//                Pointer class for @abstractDefaultValue class                *
//-----------------------------------------------------------------------------*

cPtr_abstractDefaultValue::cPtr_abstractDefaultValue (LOCATION_ARGS) :
acPtr_class (THERE) {
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                         @abstractDefaultValue type                          *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_abstractDefaultValue ("abstractDefaultValue",
                                             NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_abstractDefaultValue::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_abstractDefaultValue ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_abstractDefaultValue::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_abstractDefaultValue (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_abstractDefaultValue GALGAS_abstractDefaultValue::extractObject (const GALGAS_object & inObject,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_abstractDefaultValue result ;
  const GALGAS_abstractDefaultValue * p = (const GALGAS_abstractDefaultValue *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_abstractDefaultValue *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("abstractDefaultValue", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*

typeComparisonResult cPtr_boolAsDefaultValue::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_boolAsDefaultValue * p = (const cPtr_boolAsDefaultValue *) inOperandPtr ;
  macroValidSharedObject (p, cPtr_boolAsDefaultValue) ;
  if (kOperandEqual == result) {
    result = mAttribute_mValue.objectCompare (p->mAttribute_mValue) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*


typeComparisonResult GALGAS_boolAsDefaultValue::objectCompare (const GALGAS_boolAsDefaultValue & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_boolAsDefaultValue::GALGAS_boolAsDefaultValue (void) :
GALGAS_abstractDefaultValue () {
}

//-----------------------------------------------------------------------------*

GALGAS_boolAsDefaultValue GALGAS_boolAsDefaultValue::constructor_default (LOCATION_ARGS) {
  return GALGAS_boolAsDefaultValue::constructor_new (GALGAS_lbool::constructor_default (HERE)
                                                     COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

GALGAS_boolAsDefaultValue::GALGAS_boolAsDefaultValue (const cPtr_boolAsDefaultValue * inSourcePtr) :
GALGAS_abstractDefaultValue (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_boolAsDefaultValue) ;
}

//-----------------------------------------------------------------------------*

GALGAS_boolAsDefaultValue GALGAS_boolAsDefaultValue::constructor_new (const GALGAS_lbool & inAttribute_mValue
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_boolAsDefaultValue result ;
  if (inAttribute_mValue.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_boolAsDefaultValue (inAttribute_mValue COMMA_THERE)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_boolAsDefaultValue::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_boolAsDefaultValue * p = (cPtr_boolAsDefaultValue *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_boolAsDefaultValue) ;
    cPtr_boolAsDefaultValue * r = NULL ;
    macroMyNew (r, cPtr_boolAsDefaultValue (p->mAttribute_mValue COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lbool GALGAS_boolAsDefaultValue::reader_mValue (UNUSED_LOCATION_ARGS) const {
  GALGAS_lbool result ;
  if (NULL != mObjectPtr) {
    const cPtr_boolAsDefaultValue * p = (const cPtr_boolAsDefaultValue *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_boolAsDefaultValue) ;
    result = p->mAttribute_mValue ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lbool cPtr_boolAsDefaultValue::reader_mValue (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mValue ;
}

//-----------------------------------------------------------------------------*
//                 Pointer class for @boolAsDefaultValue class                 *
//-----------------------------------------------------------------------------*

cPtr_boolAsDefaultValue::cPtr_boolAsDefaultValue (const GALGAS_lbool & in_mValue
                                                  COMMA_LOCATION_ARGS) :
cPtr_abstractDefaultValue (THERE),
mAttribute_mValue (in_mValue) {
}

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_boolAsDefaultValue::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_boolAsDefaultValue ;
}

void cPtr_boolAsDefaultValue::description (C_String & ioString,
                                           const int32_t inIndentation) const {
  ioString << "[@boolAsDefaultValue:" ;
  mAttribute_mValue.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                          @boolAsDefaultValue type                           *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_boolAsDefaultValue ("boolAsDefaultValue",
                                           & kTypeDescriptor_GALGAS_abstractDefaultValue) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_boolAsDefaultValue::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_boolAsDefaultValue ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_boolAsDefaultValue::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_boolAsDefaultValue (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_boolAsDefaultValue GALGAS_boolAsDefaultValue::extractObject (const GALGAS_object & inObject,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_boolAsDefaultValue result ;
  const GALGAS_boolAsDefaultValue * p = (const GALGAS_boolAsDefaultValue *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_boolAsDefaultValue *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("boolAsDefaultValue", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*

typeComparisonResult cPtr_doubleAsDefaultValue::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_doubleAsDefaultValue * p = (const cPtr_doubleAsDefaultValue *) inOperandPtr ;
  macroValidSharedObject (p, cPtr_doubleAsDefaultValue) ;
  if (kOperandEqual == result) {
    result = mAttribute_mValue.objectCompare (p->mAttribute_mValue) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*


typeComparisonResult GALGAS_doubleAsDefaultValue::objectCompare (const GALGAS_doubleAsDefaultValue & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_doubleAsDefaultValue::GALGAS_doubleAsDefaultValue (void) :
GALGAS_abstractDefaultValue () {
}

//-----------------------------------------------------------------------------*

GALGAS_doubleAsDefaultValue GALGAS_doubleAsDefaultValue::constructor_default (LOCATION_ARGS) {
  return GALGAS_doubleAsDefaultValue::constructor_new (GALGAS_ldouble::constructor_default (HERE)
                                                       COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

GALGAS_doubleAsDefaultValue::GALGAS_doubleAsDefaultValue (const cPtr_doubleAsDefaultValue * inSourcePtr) :
GALGAS_abstractDefaultValue (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_doubleAsDefaultValue) ;
}

//-----------------------------------------------------------------------------*

GALGAS_doubleAsDefaultValue GALGAS_doubleAsDefaultValue::constructor_new (const GALGAS_ldouble & inAttribute_mValue
                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_doubleAsDefaultValue result ;
  if (inAttribute_mValue.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_doubleAsDefaultValue (inAttribute_mValue COMMA_THERE)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_doubleAsDefaultValue::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_doubleAsDefaultValue * p = (cPtr_doubleAsDefaultValue *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_doubleAsDefaultValue) ;
    cPtr_doubleAsDefaultValue * r = NULL ;
    macroMyNew (r, cPtr_doubleAsDefaultValue (p->mAttribute_mValue COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//-----------------------------------------------------------------------------*

GALGAS_ldouble GALGAS_doubleAsDefaultValue::reader_mValue (UNUSED_LOCATION_ARGS) const {
  GALGAS_ldouble result ;
  if (NULL != mObjectPtr) {
    const cPtr_doubleAsDefaultValue * p = (const cPtr_doubleAsDefaultValue *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_doubleAsDefaultValue) ;
    result = p->mAttribute_mValue ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_ldouble cPtr_doubleAsDefaultValue::reader_mValue (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mValue ;
}

//-----------------------------------------------------------------------------*
//                Pointer class for @doubleAsDefaultValue class                *
//-----------------------------------------------------------------------------*

cPtr_doubleAsDefaultValue::cPtr_doubleAsDefaultValue (const GALGAS_ldouble & in_mValue
                                                      COMMA_LOCATION_ARGS) :
cPtr_abstractDefaultValue (THERE),
mAttribute_mValue (in_mValue) {
}

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_doubleAsDefaultValue::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_doubleAsDefaultValue ;
}

void cPtr_doubleAsDefaultValue::description (C_String & ioString,
                                             const int32_t inIndentation) const {
  ioString << "[@doubleAsDefaultValue:" ;
  mAttribute_mValue.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                         @doubleAsDefaultValue type                          *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_doubleAsDefaultValue ("doubleAsDefaultValue",
                                             & kTypeDescriptor_GALGAS_abstractDefaultValue) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_doubleAsDefaultValue::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_doubleAsDefaultValue ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_doubleAsDefaultValue::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_doubleAsDefaultValue (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_doubleAsDefaultValue GALGAS_doubleAsDefaultValue::extractObject (const GALGAS_object & inObject,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_doubleAsDefaultValue result ;
  const GALGAS_doubleAsDefaultValue * p = (const GALGAS_doubleAsDefaultValue *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_doubleAsDefaultValue *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("doubleAsDefaultValue", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*

typeComparisonResult cPtr_identifierAsDefaultValue::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_identifierAsDefaultValue * p = (const cPtr_identifierAsDefaultValue *) inOperandPtr ;
  macroValidSharedObject (p, cPtr_identifierAsDefaultValue) ;
  if (kOperandEqual == result) {
    result = mAttribute_mValue.objectCompare (p->mAttribute_mValue) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*


typeComparisonResult GALGAS_identifierAsDefaultValue::objectCompare (const GALGAS_identifierAsDefaultValue & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_identifierAsDefaultValue::GALGAS_identifierAsDefaultValue (void) :
GALGAS_abstractDefaultValue () {
}

//-----------------------------------------------------------------------------*

GALGAS_identifierAsDefaultValue GALGAS_identifierAsDefaultValue::constructor_default (LOCATION_ARGS) {
  return GALGAS_identifierAsDefaultValue::constructor_new (GALGAS_lstring::constructor_default (HERE)
                                                           COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

GALGAS_identifierAsDefaultValue::GALGAS_identifierAsDefaultValue (const cPtr_identifierAsDefaultValue * inSourcePtr) :
GALGAS_abstractDefaultValue (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_identifierAsDefaultValue) ;
}

//-----------------------------------------------------------------------------*

GALGAS_identifierAsDefaultValue GALGAS_identifierAsDefaultValue::constructor_new (const GALGAS_lstring & inAttribute_mValue
                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_identifierAsDefaultValue result ;
  if (inAttribute_mValue.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_identifierAsDefaultValue (inAttribute_mValue COMMA_THERE)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_identifierAsDefaultValue::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_identifierAsDefaultValue * p = (cPtr_identifierAsDefaultValue *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_identifierAsDefaultValue) ;
    cPtr_identifierAsDefaultValue * r = NULL ;
    macroMyNew (r, cPtr_identifierAsDefaultValue (p->mAttribute_mValue COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_identifierAsDefaultValue::reader_mValue (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_identifierAsDefaultValue * p = (const cPtr_identifierAsDefaultValue *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_identifierAsDefaultValue) ;
    result = p->mAttribute_mValue ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cPtr_identifierAsDefaultValue::reader_mValue (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mValue ;
}

//-----------------------------------------------------------------------------*
//              Pointer class for @identifierAsDefaultValue class              *
//-----------------------------------------------------------------------------*

cPtr_identifierAsDefaultValue::cPtr_identifierAsDefaultValue (const GALGAS_lstring & in_mValue
                                                              COMMA_LOCATION_ARGS) :
cPtr_abstractDefaultValue (THERE),
mAttribute_mValue (in_mValue) {
}

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_identifierAsDefaultValue::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_identifierAsDefaultValue ;
}

void cPtr_identifierAsDefaultValue::description (C_String & ioString,
                                                 const int32_t inIndentation) const {
  ioString << "[@identifierAsDefaultValue:" ;
  mAttribute_mValue.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                       @identifierAsDefaultValue type                        *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_identifierAsDefaultValue ("identifierAsDefaultValue",
                                                 & kTypeDescriptor_GALGAS_abstractDefaultValue) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_identifierAsDefaultValue::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_identifierAsDefaultValue ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_identifierAsDefaultValue::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_identifierAsDefaultValue (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_identifierAsDefaultValue GALGAS_identifierAsDefaultValue::extractObject (const GALGAS_object & inObject,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_identifierAsDefaultValue result ;
  const GALGAS_identifierAsDefaultValue * p = (const GALGAS_identifierAsDefaultValue *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_identifierAsDefaultValue *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("identifierAsDefaultValue", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*

typeComparisonResult cPtr_integerAsDefaultValue::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_integerAsDefaultValue * p = (const cPtr_integerAsDefaultValue *) inOperandPtr ;
  macroValidSharedObject (p, cPtr_integerAsDefaultValue) ;
  if (kOperandEqual == result) {
    result = mAttribute_mValue.objectCompare (p->mAttribute_mValue) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*


typeComparisonResult GALGAS_integerAsDefaultValue::objectCompare (const GALGAS_integerAsDefaultValue & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_integerAsDefaultValue::GALGAS_integerAsDefaultValue (void) :
GALGAS_abstractDefaultValue () {
}

//-----------------------------------------------------------------------------*

GALGAS_integerAsDefaultValue GALGAS_integerAsDefaultValue::constructor_default (LOCATION_ARGS) {
  return GALGAS_integerAsDefaultValue::constructor_new (GALGAS_luint::constructor_default (HERE)
                                                        COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

GALGAS_integerAsDefaultValue::GALGAS_integerAsDefaultValue (const cPtr_integerAsDefaultValue * inSourcePtr) :
GALGAS_abstractDefaultValue (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_integerAsDefaultValue) ;
}

//-----------------------------------------------------------------------------*

GALGAS_integerAsDefaultValue GALGAS_integerAsDefaultValue::constructor_new (const GALGAS_luint & inAttribute_mValue
                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_integerAsDefaultValue result ;
  if (inAttribute_mValue.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_integerAsDefaultValue (inAttribute_mValue COMMA_THERE)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_integerAsDefaultValue::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_integerAsDefaultValue * p = (cPtr_integerAsDefaultValue *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_integerAsDefaultValue) ;
    cPtr_integerAsDefaultValue * r = NULL ;
    macroMyNew (r, cPtr_integerAsDefaultValue (p->mAttribute_mValue COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//-----------------------------------------------------------------------------*

GALGAS_luint GALGAS_integerAsDefaultValue::reader_mValue (UNUSED_LOCATION_ARGS) const {
  GALGAS_luint result ;
  if (NULL != mObjectPtr) {
    const cPtr_integerAsDefaultValue * p = (const cPtr_integerAsDefaultValue *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_integerAsDefaultValue) ;
    result = p->mAttribute_mValue ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_luint cPtr_integerAsDefaultValue::reader_mValue (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mValue ;
}

//-----------------------------------------------------------------------------*
//               Pointer class for @integerAsDefaultValue class                *
//-----------------------------------------------------------------------------*

cPtr_integerAsDefaultValue::cPtr_integerAsDefaultValue (const GALGAS_luint & in_mValue
                                                        COMMA_LOCATION_ARGS) :
cPtr_abstractDefaultValue (THERE),
mAttribute_mValue (in_mValue) {
}

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_integerAsDefaultValue::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_integerAsDefaultValue ;
}

void cPtr_integerAsDefaultValue::description (C_String & ioString,
                                              const int32_t inIndentation) const {
  ioString << "[@integerAsDefaultValue:" ;
  mAttribute_mValue.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                         @integerAsDefaultValue type                         *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_integerAsDefaultValue ("integerAsDefaultValue",
                                              & kTypeDescriptor_GALGAS_abstractDefaultValue) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_integerAsDefaultValue::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_integerAsDefaultValue ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_integerAsDefaultValue::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_integerAsDefaultValue (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_integerAsDefaultValue GALGAS_integerAsDefaultValue::extractObject (const GALGAS_object & inObject,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_integerAsDefaultValue result ;
  const GALGAS_integerAsDefaultValue * p = (const GALGAS_integerAsDefaultValue *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_integerAsDefaultValue *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("integerAsDefaultValue", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*

typeComparisonResult cPtr_listAsDefaultValue::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_listAsDefaultValue * p = (const cPtr_listAsDefaultValue *) inOperandPtr ;
  macroValidSharedObject (p, cPtr_listAsDefaultValue) ;
  if (kOperandEqual == result) {
    result = mAttribute_mStartLocation.objectCompare (p->mAttribute_mStartLocation) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mDefaultValueList.objectCompare (p->mAttribute_mDefaultValueList) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*


typeComparisonResult GALGAS_listAsDefaultValue::objectCompare (const GALGAS_listAsDefaultValue & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_listAsDefaultValue::GALGAS_listAsDefaultValue (void) :
GALGAS_abstractDefaultValue () {
}

//-----------------------------------------------------------------------------*

GALGAS_listAsDefaultValue GALGAS_listAsDefaultValue::constructor_default (LOCATION_ARGS) {
  return GALGAS_listAsDefaultValue::constructor_new (GALGAS_location::constructor_nowhere (HERE),
                                                     GALGAS_defaultValueList::constructor_emptyList (HERE)
                                                     COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

GALGAS_listAsDefaultValue::GALGAS_listAsDefaultValue (const cPtr_listAsDefaultValue * inSourcePtr) :
GALGAS_abstractDefaultValue (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_listAsDefaultValue) ;
}

//-----------------------------------------------------------------------------*

GALGAS_listAsDefaultValue GALGAS_listAsDefaultValue::constructor_new (const GALGAS_location & inAttribute_mStartLocation,
                                                                      const GALGAS_defaultValueList & inAttribute_mDefaultValueList
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_listAsDefaultValue result ;
  if (inAttribute_mStartLocation.isValid () && inAttribute_mDefaultValueList.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_listAsDefaultValue (inAttribute_mStartLocation, inAttribute_mDefaultValueList COMMA_THERE)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_listAsDefaultValue::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_listAsDefaultValue * p = (cPtr_listAsDefaultValue *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_listAsDefaultValue) ;
    cPtr_listAsDefaultValue * r = NULL ;
    macroMyNew (r, cPtr_listAsDefaultValue (p->mAttribute_mStartLocation, p->mAttribute_mDefaultValueList COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//-----------------------------------------------------------------------------*

GALGAS_location GALGAS_listAsDefaultValue::reader_mStartLocation (UNUSED_LOCATION_ARGS) const {
  GALGAS_location result ;
  if (NULL != mObjectPtr) {
    const cPtr_listAsDefaultValue * p = (const cPtr_listAsDefaultValue *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_listAsDefaultValue) ;
    result = p->mAttribute_mStartLocation ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_location cPtr_listAsDefaultValue::reader_mStartLocation (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mStartLocation ;
}

//-----------------------------------------------------------------------------*

GALGAS_defaultValueList GALGAS_listAsDefaultValue::reader_mDefaultValueList (UNUSED_LOCATION_ARGS) const {
  GALGAS_defaultValueList result ;
  if (NULL != mObjectPtr) {
    const cPtr_listAsDefaultValue * p = (const cPtr_listAsDefaultValue *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_listAsDefaultValue) ;
    result = p->mAttribute_mDefaultValueList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_defaultValueList cPtr_listAsDefaultValue::reader_mDefaultValueList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mDefaultValueList ;
}

//-----------------------------------------------------------------------------*
//                 Pointer class for @listAsDefaultValue class                 *
//-----------------------------------------------------------------------------*

cPtr_listAsDefaultValue::cPtr_listAsDefaultValue (const GALGAS_location & in_mStartLocation,
                                                  const GALGAS_defaultValueList & in_mDefaultValueList
                                                  COMMA_LOCATION_ARGS) :
cPtr_abstractDefaultValue (THERE),
mAttribute_mStartLocation (in_mStartLocation),
mAttribute_mDefaultValueList (in_mDefaultValueList) {
}

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_listAsDefaultValue::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_listAsDefaultValue ;
}

void cPtr_listAsDefaultValue::description (C_String & ioString,
                                           const int32_t inIndentation) const {
  ioString << "[@listAsDefaultValue:" ;
  mAttribute_mStartLocation.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mDefaultValueList.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                          @listAsDefaultValue type                           *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_listAsDefaultValue ("listAsDefaultValue",
                                           & kTypeDescriptor_GALGAS_abstractDefaultValue) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_listAsDefaultValue::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_listAsDefaultValue ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_listAsDefaultValue::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_listAsDefaultValue (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_listAsDefaultValue GALGAS_listAsDefaultValue::extractObject (const GALGAS_object & inObject,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_listAsDefaultValue result ;
  const GALGAS_listAsDefaultValue * p = (const GALGAS_listAsDefaultValue *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_listAsDefaultValue *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("listAsDefaultValue", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*

typeComparisonResult cPtr_stringAsDefaultValue::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_stringAsDefaultValue * p = (const cPtr_stringAsDefaultValue *) inOperandPtr ;
  macroValidSharedObject (p, cPtr_stringAsDefaultValue) ;
  if (kOperandEqual == result) {
    result = mAttribute_mValue.objectCompare (p->mAttribute_mValue) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*


typeComparisonResult GALGAS_stringAsDefaultValue::objectCompare (const GALGAS_stringAsDefaultValue & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_stringAsDefaultValue::GALGAS_stringAsDefaultValue (void) :
GALGAS_abstractDefaultValue () {
}

//-----------------------------------------------------------------------------*

GALGAS_stringAsDefaultValue GALGAS_stringAsDefaultValue::constructor_default (LOCATION_ARGS) {
  return GALGAS_stringAsDefaultValue::constructor_new (GALGAS_lstring::constructor_default (HERE)
                                                       COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

GALGAS_stringAsDefaultValue::GALGAS_stringAsDefaultValue (const cPtr_stringAsDefaultValue * inSourcePtr) :
GALGAS_abstractDefaultValue (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_stringAsDefaultValue) ;
}

//-----------------------------------------------------------------------------*

GALGAS_stringAsDefaultValue GALGAS_stringAsDefaultValue::constructor_new (const GALGAS_lstring & inAttribute_mValue
                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_stringAsDefaultValue result ;
  if (inAttribute_mValue.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_stringAsDefaultValue (inAttribute_mValue COMMA_THERE)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_stringAsDefaultValue::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_stringAsDefaultValue * p = (cPtr_stringAsDefaultValue *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_stringAsDefaultValue) ;
    cPtr_stringAsDefaultValue * r = NULL ;
    macroMyNew (r, cPtr_stringAsDefaultValue (p->mAttribute_mValue COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_stringAsDefaultValue::reader_mValue (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_stringAsDefaultValue * p = (const cPtr_stringAsDefaultValue *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_stringAsDefaultValue) ;
    result = p->mAttribute_mValue ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cPtr_stringAsDefaultValue::reader_mValue (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mValue ;
}

//-----------------------------------------------------------------------------*
//                Pointer class for @stringAsDefaultValue class                *
//-----------------------------------------------------------------------------*

cPtr_stringAsDefaultValue::cPtr_stringAsDefaultValue (const GALGAS_lstring & in_mValue
                                                      COMMA_LOCATION_ARGS) :
cPtr_abstractDefaultValue (THERE),
mAttribute_mValue (in_mValue) {
}

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_stringAsDefaultValue::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_stringAsDefaultValue ;
}

void cPtr_stringAsDefaultValue::description (C_String & ioString,
                                             const int32_t inIndentation) const {
  ioString << "[@stringAsDefaultValue:" ;
  mAttribute_mValue.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                         @stringAsDefaultValue type                          *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_stringAsDefaultValue ("stringAsDefaultValue",
                                             & kTypeDescriptor_GALGAS_abstractDefaultValue) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_stringAsDefaultValue::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_stringAsDefaultValue ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_stringAsDefaultValue::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_stringAsDefaultValue (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_stringAsDefaultValue GALGAS_stringAsDefaultValue::extractObject (const GALGAS_object & inObject,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_stringAsDefaultValue result ;
  const GALGAS_stringAsDefaultValue * p = (const GALGAS_stringAsDefaultValue *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_stringAsDefaultValue *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("stringAsDefaultValue", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*



typeComparisonResult GALGAS_abstractTransientDependency::objectCompare (const GALGAS_abstractTransientDependency & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_abstractTransientDependency::GALGAS_abstractTransientDependency (void) :
AC_GALGAS_class () {
}

//-----------------------------------------------------------------------------*

GALGAS_abstractTransientDependency::GALGAS_abstractTransientDependency (const cPtr_abstractTransientDependency * inSourcePtr) :
AC_GALGAS_class (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_abstractTransientDependency) ;
}

//-----------------------------------------------------------------------------*
//            Pointer class for @abstractTransientDependency class             *
//-----------------------------------------------------------------------------*

cPtr_abstractTransientDependency::cPtr_abstractTransientDependency (LOCATION_ARGS) :
acPtr_class (THERE) {
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                      @abstractTransientDependency type                      *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_abstractTransientDependency ("abstractTransientDependency",
                                                    NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_abstractTransientDependency::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_abstractTransientDependency ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_abstractTransientDependency::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_abstractTransientDependency (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_abstractTransientDependency GALGAS_abstractTransientDependency::extractObject (const GALGAS_object & inObject,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_abstractTransientDependency result ;
  const GALGAS_abstractTransientDependency * p = (const GALGAS_abstractTransientDependency *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_abstractTransientDependency *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("abstractTransientDependency", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*

typeComparisonResult cPtr_transientControllerDependency::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_transientControllerDependency * p = (const cPtr_transientControllerDependency *) inOperandPtr ;
  macroValidSharedObject (p, cPtr_transientControllerDependency) ;
  if (kOperandEqual == result) {
    result = mAttribute_mControllerName.objectCompare (p->mAttribute_mControllerName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mMasterName.objectCompare (p->mAttribute_mMasterName) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*


typeComparisonResult GALGAS_transientControllerDependency::objectCompare (const GALGAS_transientControllerDependency & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_transientControllerDependency::GALGAS_transientControllerDependency (void) :
GALGAS_abstractTransientDependency () {
}

//-----------------------------------------------------------------------------*

GALGAS_transientControllerDependency GALGAS_transientControllerDependency::constructor_default (LOCATION_ARGS) {
  return GALGAS_transientControllerDependency::constructor_new (GALGAS_lstring::constructor_default (HERE),
                                                                GALGAS_lstring::constructor_default (HERE)
                                                                COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

GALGAS_transientControllerDependency::GALGAS_transientControllerDependency (const cPtr_transientControllerDependency * inSourcePtr) :
GALGAS_abstractTransientDependency (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_transientControllerDependency) ;
}

//-----------------------------------------------------------------------------*

GALGAS_transientControllerDependency GALGAS_transientControllerDependency::constructor_new (const GALGAS_lstring & inAttribute_mControllerName,
                                                                                            const GALGAS_lstring & inAttribute_mMasterName
                                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_transientControllerDependency result ;
  if (inAttribute_mControllerName.isValid () && inAttribute_mMasterName.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_transientControllerDependency (inAttribute_mControllerName, inAttribute_mMasterName COMMA_THERE)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_transientControllerDependency::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_transientControllerDependency * p = (cPtr_transientControllerDependency *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_transientControllerDependency) ;
    cPtr_transientControllerDependency * r = NULL ;
    macroMyNew (r, cPtr_transientControllerDependency (p->mAttribute_mControllerName, p->mAttribute_mMasterName COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_transientControllerDependency::reader_mControllerName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_transientControllerDependency * p = (const cPtr_transientControllerDependency *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_transientControllerDependency) ;
    result = p->mAttribute_mControllerName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cPtr_transientControllerDependency::reader_mControllerName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mControllerName ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_transientControllerDependency::reader_mMasterName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_transientControllerDependency * p = (const cPtr_transientControllerDependency *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_transientControllerDependency) ;
    result = p->mAttribute_mMasterName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cPtr_transientControllerDependency::reader_mMasterName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mMasterName ;
}

//-----------------------------------------------------------------------------*
//           Pointer class for @transientControllerDependency class            *
//-----------------------------------------------------------------------------*

cPtr_transientControllerDependency::cPtr_transientControllerDependency (const GALGAS_lstring & in_mControllerName,
                                                                        const GALGAS_lstring & in_mMasterName
                                                                        COMMA_LOCATION_ARGS) :
cPtr_abstractTransientDependency (THERE),
mAttribute_mControllerName (in_mControllerName),
mAttribute_mMasterName (in_mMasterName) {
}

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_transientControllerDependency::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_transientControllerDependency ;
}

void cPtr_transientControllerDependency::description (C_String & ioString,
                                                      const int32_t inIndentation) const {
  ioString << "[@transientControllerDependency:" ;
  mAttribute_mControllerName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mMasterName.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                     @transientControllerDependency type                     *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_transientControllerDependency ("transientControllerDependency",
                                                      & kTypeDescriptor_GALGAS_abstractTransientDependency) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_transientControllerDependency::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_transientControllerDependency ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_transientControllerDependency::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_transientControllerDependency (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_transientControllerDependency GALGAS_transientControllerDependency::extractObject (const GALGAS_object & inObject,
                                                                                          C_Compiler * inCompiler
                                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_transientControllerDependency result ;
  const GALGAS_transientControllerDependency * p = (const GALGAS_transientControllerDependency *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_transientControllerDependency *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("transientControllerDependency", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*

typeComparisonResult cPtr_transientLocalDependency::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_transientLocalDependency * p = (const cPtr_transientLocalDependency *) inOperandPtr ;
  macroValidSharedObject (p, cPtr_transientLocalDependency) ;
  if (kOperandEqual == result) {
    result = mAttribute_mMasterName.objectCompare (p->mAttribute_mMasterName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mNamesCountOption.objectCompare (p->mAttribute_mNamesCountOption) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*


typeComparisonResult GALGAS_transientLocalDependency::objectCompare (const GALGAS_transientLocalDependency & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_transientLocalDependency::GALGAS_transientLocalDependency (void) :
GALGAS_abstractTransientDependency () {
}

//-----------------------------------------------------------------------------*

GALGAS_transientLocalDependency GALGAS_transientLocalDependency::constructor_default (LOCATION_ARGS) {
  return GALGAS_transientLocalDependency::constructor_new (GALGAS_lstring::constructor_default (HERE),
                                                           GALGAS_bool::constructor_default (HERE)
                                                           COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

GALGAS_transientLocalDependency::GALGAS_transientLocalDependency (const cPtr_transientLocalDependency * inSourcePtr) :
GALGAS_abstractTransientDependency (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_transientLocalDependency) ;
}

//-----------------------------------------------------------------------------*

GALGAS_transientLocalDependency GALGAS_transientLocalDependency::constructor_new (const GALGAS_lstring & inAttribute_mMasterName,
                                                                                  const GALGAS_bool & inAttribute_mNamesCountOption
                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_transientLocalDependency result ;
  if (inAttribute_mMasterName.isValid () && inAttribute_mNamesCountOption.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_transientLocalDependency (inAttribute_mMasterName, inAttribute_mNamesCountOption COMMA_THERE)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_transientLocalDependency::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_transientLocalDependency * p = (cPtr_transientLocalDependency *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_transientLocalDependency) ;
    cPtr_transientLocalDependency * r = NULL ;
    macroMyNew (r, cPtr_transientLocalDependency (p->mAttribute_mMasterName, p->mAttribute_mNamesCountOption COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_transientLocalDependency::reader_mMasterName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_transientLocalDependency * p = (const cPtr_transientLocalDependency *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_transientLocalDependency) ;
    result = p->mAttribute_mMasterName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cPtr_transientLocalDependency::reader_mMasterName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mMasterName ;
}

//-----------------------------------------------------------------------------*

GALGAS_bool GALGAS_transientLocalDependency::reader_mNamesCountOption (UNUSED_LOCATION_ARGS) const {
  GALGAS_bool result ;
  if (NULL != mObjectPtr) {
    const cPtr_transientLocalDependency * p = (const cPtr_transientLocalDependency *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_transientLocalDependency) ;
    result = p->mAttribute_mNamesCountOption ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_bool cPtr_transientLocalDependency::reader_mNamesCountOption (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mNamesCountOption ;
}

//-----------------------------------------------------------------------------*
//              Pointer class for @transientLocalDependency class              *
//-----------------------------------------------------------------------------*

cPtr_transientLocalDependency::cPtr_transientLocalDependency (const GALGAS_lstring & in_mMasterName,
                                                              const GALGAS_bool & in_mNamesCountOption
                                                              COMMA_LOCATION_ARGS) :
cPtr_abstractTransientDependency (THERE),
mAttribute_mMasterName (in_mMasterName),
mAttribute_mNamesCountOption (in_mNamesCountOption) {
}

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_transientLocalDependency::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_transientLocalDependency ;
}

void cPtr_transientLocalDependency::description (C_String & ioString,
                                                 const int32_t inIndentation) const {
  ioString << "[@transientLocalDependency:" ;
  mAttribute_mMasterName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mNamesCountOption.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                       @transientLocalDependency type                        *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_transientLocalDependency ("transientLocalDependency",
                                                 & kTypeDescriptor_GALGAS_abstractTransientDependency) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_transientLocalDependency::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_transientLocalDependency ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_transientLocalDependency::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_transientLocalDependency (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_transientLocalDependency GALGAS_transientLocalDependency::extractObject (const GALGAS_object & inObject,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_transientLocalDependency result ;
  const GALGAS_transientLocalDependency * p = (const GALGAS_transientLocalDependency *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_transientLocalDependency *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("transientLocalDependency", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*

typeComparisonResult cPtr_transientPreferenceDependency::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_transientPreferenceDependency * p = (const cPtr_transientPreferenceDependency *) inOperandPtr ;
  macroValidSharedObject (p, cPtr_transientPreferenceDependency) ;
  if (kOperandEqual == result) {
    result = mAttribute_mPreferencesName.objectCompare (p->mAttribute_mPreferencesName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mMasterName.objectCompare (p->mAttribute_mMasterName) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*


typeComparisonResult GALGAS_transientPreferenceDependency::objectCompare (const GALGAS_transientPreferenceDependency & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_transientPreferenceDependency::GALGAS_transientPreferenceDependency (void) :
GALGAS_abstractTransientDependency () {
}

//-----------------------------------------------------------------------------*

GALGAS_transientPreferenceDependency GALGAS_transientPreferenceDependency::constructor_default (LOCATION_ARGS) {
  return GALGAS_transientPreferenceDependency::constructor_new (GALGAS_lstring::constructor_default (HERE),
                                                                GALGAS_lstring::constructor_default (HERE)
                                                                COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

GALGAS_transientPreferenceDependency::GALGAS_transientPreferenceDependency (const cPtr_transientPreferenceDependency * inSourcePtr) :
GALGAS_abstractTransientDependency (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_transientPreferenceDependency) ;
}

//-----------------------------------------------------------------------------*

GALGAS_transientPreferenceDependency GALGAS_transientPreferenceDependency::constructor_new (const GALGAS_lstring & inAttribute_mPreferencesName,
                                                                                            const GALGAS_lstring & inAttribute_mMasterName
                                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_transientPreferenceDependency result ;
  if (inAttribute_mPreferencesName.isValid () && inAttribute_mMasterName.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_transientPreferenceDependency (inAttribute_mPreferencesName, inAttribute_mMasterName COMMA_THERE)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_transientPreferenceDependency::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_transientPreferenceDependency * p = (cPtr_transientPreferenceDependency *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_transientPreferenceDependency) ;
    cPtr_transientPreferenceDependency * r = NULL ;
    macroMyNew (r, cPtr_transientPreferenceDependency (p->mAttribute_mPreferencesName, p->mAttribute_mMasterName COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_transientPreferenceDependency::reader_mPreferencesName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_transientPreferenceDependency * p = (const cPtr_transientPreferenceDependency *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_transientPreferenceDependency) ;
    result = p->mAttribute_mPreferencesName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cPtr_transientPreferenceDependency::reader_mPreferencesName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mPreferencesName ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_transientPreferenceDependency::reader_mMasterName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_transientPreferenceDependency * p = (const cPtr_transientPreferenceDependency *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_transientPreferenceDependency) ;
    result = p->mAttribute_mMasterName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cPtr_transientPreferenceDependency::reader_mMasterName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mMasterName ;
}

//-----------------------------------------------------------------------------*
//           Pointer class for @transientPreferenceDependency class            *
//-----------------------------------------------------------------------------*

cPtr_transientPreferenceDependency::cPtr_transientPreferenceDependency (const GALGAS_lstring & in_mPreferencesName,
                                                                        const GALGAS_lstring & in_mMasterName
                                                                        COMMA_LOCATION_ARGS) :
cPtr_abstractTransientDependency (THERE),
mAttribute_mPreferencesName (in_mPreferencesName),
mAttribute_mMasterName (in_mMasterName) {
}

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_transientPreferenceDependency::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_transientPreferenceDependency ;
}

void cPtr_transientPreferenceDependency::description (C_String & ioString,
                                                      const int32_t inIndentation) const {
  ioString << "[@transientPreferenceDependency:" ;
  mAttribute_mPreferencesName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mMasterName.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                     @transientPreferenceDependency type                     *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_transientPreferenceDependency ("transientPreferenceDependency",
                                                      & kTypeDescriptor_GALGAS_abstractTransientDependency) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_transientPreferenceDependency::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_transientPreferenceDependency ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_transientPreferenceDependency::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_transientPreferenceDependency (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_transientPreferenceDependency GALGAS_transientPreferenceDependency::extractObject (const GALGAS_object & inObject,
                                                                                          C_Compiler * inCompiler
                                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_transientPreferenceDependency result ;
  const GALGAS_transientPreferenceDependency * p = (const GALGAS_transientPreferenceDependency *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_transientPreferenceDependency *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("transientPreferenceDependency", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*

typeComparisonResult cPtr_transientRootDependency::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_transientRootDependency * p = (const cPtr_transientRootDependency *) inOperandPtr ;
  macroValidSharedObject (p, cPtr_transientRootDependency) ;
  if (kOperandEqual == result) {
    result = mAttribute_mMasterName.objectCompare (p->mAttribute_mMasterName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mNamesCountOption.objectCompare (p->mAttribute_mNamesCountOption) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*


typeComparisonResult GALGAS_transientRootDependency::objectCompare (const GALGAS_transientRootDependency & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_transientRootDependency::GALGAS_transientRootDependency (void) :
GALGAS_abstractTransientDependency () {
}

//-----------------------------------------------------------------------------*

GALGAS_transientRootDependency GALGAS_transientRootDependency::constructor_default (LOCATION_ARGS) {
  return GALGAS_transientRootDependency::constructor_new (GALGAS_lstring::constructor_default (HERE),
                                                          GALGAS_bool::constructor_default (HERE)
                                                          COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

GALGAS_transientRootDependency::GALGAS_transientRootDependency (const cPtr_transientRootDependency * inSourcePtr) :
GALGAS_abstractTransientDependency (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_transientRootDependency) ;
}

//-----------------------------------------------------------------------------*

GALGAS_transientRootDependency GALGAS_transientRootDependency::constructor_new (const GALGAS_lstring & inAttribute_mMasterName,
                                                                                const GALGAS_bool & inAttribute_mNamesCountOption
                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_transientRootDependency result ;
  if (inAttribute_mMasterName.isValid () && inAttribute_mNamesCountOption.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_transientRootDependency (inAttribute_mMasterName, inAttribute_mNamesCountOption COMMA_THERE)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_transientRootDependency::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_transientRootDependency * p = (cPtr_transientRootDependency *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_transientRootDependency) ;
    cPtr_transientRootDependency * r = NULL ;
    macroMyNew (r, cPtr_transientRootDependency (p->mAttribute_mMasterName, p->mAttribute_mNamesCountOption COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_transientRootDependency::reader_mMasterName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_transientRootDependency * p = (const cPtr_transientRootDependency *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_transientRootDependency) ;
    result = p->mAttribute_mMasterName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cPtr_transientRootDependency::reader_mMasterName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mMasterName ;
}

//-----------------------------------------------------------------------------*

GALGAS_bool GALGAS_transientRootDependency::reader_mNamesCountOption (UNUSED_LOCATION_ARGS) const {
  GALGAS_bool result ;
  if (NULL != mObjectPtr) {
    const cPtr_transientRootDependency * p = (const cPtr_transientRootDependency *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_transientRootDependency) ;
    result = p->mAttribute_mNamesCountOption ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_bool cPtr_transientRootDependency::reader_mNamesCountOption (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mNamesCountOption ;
}

//-----------------------------------------------------------------------------*
//              Pointer class for @transientRootDependency class               *
//-----------------------------------------------------------------------------*

cPtr_transientRootDependency::cPtr_transientRootDependency (const GALGAS_lstring & in_mMasterName,
                                                            const GALGAS_bool & in_mNamesCountOption
                                                            COMMA_LOCATION_ARGS) :
cPtr_abstractTransientDependency (THERE),
mAttribute_mMasterName (in_mMasterName),
mAttribute_mNamesCountOption (in_mNamesCountOption) {
}

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_transientRootDependency::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_transientRootDependency ;
}

void cPtr_transientRootDependency::description (C_String & ioString,
                                                const int32_t inIndentation) const {
  ioString << "[@transientRootDependency:" ;
  mAttribute_mMasterName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mNamesCountOption.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                        @transientRootDependency type                        *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_transientRootDependency ("transientRootDependency",
                                                & kTypeDescriptor_GALGAS_abstractTransientDependency) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_transientRootDependency::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_transientRootDependency ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_transientRootDependency::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_transientRootDependency (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_transientRootDependency GALGAS_transientRootDependency::extractObject (const GALGAS_object & inObject,
                                                                              C_Compiler * inCompiler
                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_transientRootDependency result ;
  const GALGAS_transientRootDependency * p = (const GALGAS_transientRootDependency *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_transientRootDependency *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("transientRootDependency", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*

typeComparisonResult cPtr_transientRootSignDependency::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_transientRootSignDependency * p = (const cPtr_transientRootSignDependency *) inOperandPtr ;
  macroValidSharedObject (p, cPtr_transientRootSignDependency) ;
  if (kOperandEqual == result) {
    result = mAttribute_mDeclarationLocation.objectCompare (p->mAttribute_mDeclarationLocation) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*


typeComparisonResult GALGAS_transientRootSignDependency::objectCompare (const GALGAS_transientRootSignDependency & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_transientRootSignDependency::GALGAS_transientRootSignDependency (void) :
GALGAS_abstractTransientDependency () {
}

//-----------------------------------------------------------------------------*

GALGAS_transientRootSignDependency GALGAS_transientRootSignDependency::constructor_default (LOCATION_ARGS) {
  return GALGAS_transientRootSignDependency::constructor_new (GALGAS_location::constructor_nowhere (HERE)
                                                              COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

GALGAS_transientRootSignDependency::GALGAS_transientRootSignDependency (const cPtr_transientRootSignDependency * inSourcePtr) :
GALGAS_abstractTransientDependency (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_transientRootSignDependency) ;
}

//-----------------------------------------------------------------------------*

GALGAS_transientRootSignDependency GALGAS_transientRootSignDependency::constructor_new (const GALGAS_location & inAttribute_mDeclarationLocation
                                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_transientRootSignDependency result ;
  if (inAttribute_mDeclarationLocation.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_transientRootSignDependency (inAttribute_mDeclarationLocation COMMA_THERE)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_transientRootSignDependency::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_transientRootSignDependency * p = (cPtr_transientRootSignDependency *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_transientRootSignDependency) ;
    cPtr_transientRootSignDependency * r = NULL ;
    macroMyNew (r, cPtr_transientRootSignDependency (p->mAttribute_mDeclarationLocation COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//-----------------------------------------------------------------------------*

GALGAS_location GALGAS_transientRootSignDependency::reader_mDeclarationLocation (UNUSED_LOCATION_ARGS) const {
  GALGAS_location result ;
  if (NULL != mObjectPtr) {
    const cPtr_transientRootSignDependency * p = (const cPtr_transientRootSignDependency *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_transientRootSignDependency) ;
    result = p->mAttribute_mDeclarationLocation ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_location cPtr_transientRootSignDependency::reader_mDeclarationLocation (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mDeclarationLocation ;
}

//-----------------------------------------------------------------------------*
//            Pointer class for @transientRootSignDependency class             *
//-----------------------------------------------------------------------------*

cPtr_transientRootSignDependency::cPtr_transientRootSignDependency (const GALGAS_location & in_mDeclarationLocation
                                                                    COMMA_LOCATION_ARGS) :
cPtr_abstractTransientDependency (THERE),
mAttribute_mDeclarationLocation (in_mDeclarationLocation) {
}

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_transientRootSignDependency::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_transientRootSignDependency ;
}

void cPtr_transientRootSignDependency::description (C_String & ioString,
                                                    const int32_t inIndentation) const {
  ioString << "[@transientRootSignDependency:" ;
  mAttribute_mDeclarationLocation.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                      @transientRootSignDependency type                      *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_transientRootSignDependency ("transientRootSignDependency",
                                                    & kTypeDescriptor_GALGAS_abstractTransientDependency) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_transientRootSignDependency::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_transientRootSignDependency ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_transientRootSignDependency::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_transientRootSignDependency (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_transientRootSignDependency GALGAS_transientRootSignDependency::extractObject (const GALGAS_object & inObject,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_transientRootSignDependency result ;
  const GALGAS_transientRootSignDependency * p = (const GALGAS_transientRootSignDependency *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_transientRootSignDependency *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("transientRootSignDependency", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*



typeComparisonResult GALGAS_astDeclaration::objectCompare (const GALGAS_astDeclaration & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_astDeclaration::GALGAS_astDeclaration (void) :
AC_GALGAS_class () {
}

//-----------------------------------------------------------------------------*

GALGAS_astDeclaration::GALGAS_astDeclaration (const cPtr_astDeclaration * inSourcePtr) :
AC_GALGAS_class (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_astDeclaration) ;
}

//-----------------------------------------------------------------------------*

GALGAS_bool GALGAS_astDeclaration::reader_mUserDefined (UNUSED_LOCATION_ARGS) const {
  GALGAS_bool result ;
  if (NULL != mObjectPtr) {
    const cPtr_astDeclaration * p = (const cPtr_astDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_astDeclaration) ;
    result = p->mAttribute_mUserDefined ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_bool cPtr_astDeclaration::reader_mUserDefined (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mUserDefined ;
}

//-----------------------------------------------------------------------------*
//                   Pointer class for @astDeclaration class                   *
//-----------------------------------------------------------------------------*

cPtr_astDeclaration::cPtr_astDeclaration (const GALGAS_bool & in_mUserDefined
                                          COMMA_LOCATION_ARGS) :
acPtr_class (THERE),
mAttribute_mUserDefined (in_mUserDefined) {
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                            @astDeclaration type                             *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_astDeclaration ("astDeclaration",
                                       NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_astDeclaration::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_astDeclaration ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_astDeclaration::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_astDeclaration (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_astDeclaration GALGAS_astDeclaration::extractObject (const GALGAS_object & inObject,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) {
  GALGAS_astDeclaration result ;
  const GALGAS_astDeclaration * p = (const GALGAS_astDeclaration *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_astDeclaration *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("astDeclaration", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*

typeComparisonResult cPtr_classDeclaration::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_classDeclaration * p = (const cPtr_classDeclaration *) inOperandPtr ;
  macroValidSharedObject (p, cPtr_classDeclaration) ;
  if (kOperandEqual == result) {
    result = mAttribute_mUserDefined.objectCompare (p->mAttribute_mUserDefined) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mClassName.objectCompare (p->mAttribute_mClassName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mSuperClassName.objectCompare (p->mAttribute_mSuperClassName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mAttributeList.objectCompare (p->mAttribute_mAttributeList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mArrayList.objectCompare (p->mAttribute_mArrayList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mTransientList.objectCompare (p->mAttribute_mTransientList) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*


typeComparisonResult GALGAS_classDeclaration::objectCompare (const GALGAS_classDeclaration & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_classDeclaration::GALGAS_classDeclaration (void) :
GALGAS_astDeclaration () {
}

//-----------------------------------------------------------------------------*

GALGAS_classDeclaration GALGAS_classDeclaration::constructor_default (LOCATION_ARGS) {
  return GALGAS_classDeclaration::constructor_new (GALGAS_bool::constructor_default (HERE),
                                                   GALGAS_lstring::constructor_default (HERE),
                                                   GALGAS_lstring::constructor_default (HERE),
                                                   GALGAS_attributeList::constructor_emptyList (HERE),
                                                   GALGAS_classArrayList::constructor_emptyList (HERE),
                                                   GALGAS_transientList::constructor_emptyList (HERE)
                                                   COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

GALGAS_classDeclaration::GALGAS_classDeclaration (const cPtr_classDeclaration * inSourcePtr) :
GALGAS_astDeclaration (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_classDeclaration) ;
}

//-----------------------------------------------------------------------------*

GALGAS_classDeclaration GALGAS_classDeclaration::constructor_new (const GALGAS_bool & inAttribute_mUserDefined,
                                                                  const GALGAS_lstring & inAttribute_mClassName,
                                                                  const GALGAS_lstring & inAttribute_mSuperClassName,
                                                                  const GALGAS_attributeList & inAttribute_mAttributeList,
                                                                  const GALGAS_classArrayList & inAttribute_mArrayList,
                                                                  const GALGAS_transientList & inAttribute_mTransientList
                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_classDeclaration result ;
  if (inAttribute_mUserDefined.isValid () && inAttribute_mClassName.isValid () && inAttribute_mSuperClassName.isValid () && inAttribute_mAttributeList.isValid () && inAttribute_mArrayList.isValid () && inAttribute_mTransientList.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_classDeclaration (inAttribute_mUserDefined, inAttribute_mClassName, inAttribute_mSuperClassName, inAttribute_mAttributeList, inAttribute_mArrayList, inAttribute_mTransientList COMMA_THERE)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_classDeclaration::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_classDeclaration * p = (cPtr_classDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_classDeclaration) ;
    cPtr_classDeclaration * r = NULL ;
    macroMyNew (r, cPtr_classDeclaration (p->mAttribute_mUserDefined, p->mAttribute_mClassName, p->mAttribute_mSuperClassName, p->mAttribute_mAttributeList, p->mAttribute_mArrayList, p->mAttribute_mTransientList COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_classDeclaration::reader_mClassName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_classDeclaration * p = (const cPtr_classDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_classDeclaration) ;
    result = p->mAttribute_mClassName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cPtr_classDeclaration::reader_mClassName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mClassName ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_classDeclaration::reader_mSuperClassName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_classDeclaration * p = (const cPtr_classDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_classDeclaration) ;
    result = p->mAttribute_mSuperClassName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cPtr_classDeclaration::reader_mSuperClassName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mSuperClassName ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeList GALGAS_classDeclaration::reader_mAttributeList (UNUSED_LOCATION_ARGS) const {
  GALGAS_attributeList result ;
  if (NULL != mObjectPtr) {
    const cPtr_classDeclaration * p = (const cPtr_classDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_classDeclaration) ;
    result = p->mAttribute_mAttributeList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeList cPtr_classDeclaration::reader_mAttributeList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mAttributeList ;
}

//-----------------------------------------------------------------------------*

GALGAS_classArrayList GALGAS_classDeclaration::reader_mArrayList (UNUSED_LOCATION_ARGS) const {
  GALGAS_classArrayList result ;
  if (NULL != mObjectPtr) {
    const cPtr_classDeclaration * p = (const cPtr_classDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_classDeclaration) ;
    result = p->mAttribute_mArrayList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_classArrayList cPtr_classDeclaration::reader_mArrayList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mArrayList ;
}

//-----------------------------------------------------------------------------*

GALGAS_transientList GALGAS_classDeclaration::reader_mTransientList (UNUSED_LOCATION_ARGS) const {
  GALGAS_transientList result ;
  if (NULL != mObjectPtr) {
    const cPtr_classDeclaration * p = (const cPtr_classDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_classDeclaration) ;
    result = p->mAttribute_mTransientList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_transientList cPtr_classDeclaration::reader_mTransientList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mTransientList ;
}

//-----------------------------------------------------------------------------*
//                  Pointer class for @classDeclaration class                  *
//-----------------------------------------------------------------------------*

cPtr_classDeclaration::cPtr_classDeclaration (const GALGAS_bool & in_mUserDefined,
                                              const GALGAS_lstring & in_mClassName,
                                              const GALGAS_lstring & in_mSuperClassName,
                                              const GALGAS_attributeList & in_mAttributeList,
                                              const GALGAS_classArrayList & in_mArrayList,
                                              const GALGAS_transientList & in_mTransientList
                                              COMMA_LOCATION_ARGS) :
cPtr_astDeclaration (in_mUserDefined COMMA_THERE),
mAttribute_mClassName (in_mClassName),
mAttribute_mSuperClassName (in_mSuperClassName),
mAttribute_mAttributeList (in_mAttributeList),
mAttribute_mArrayList (in_mArrayList),
mAttribute_mTransientList (in_mTransientList) {
}

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_classDeclaration::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_classDeclaration ;
}

void cPtr_classDeclaration::description (C_String & ioString,
                                         const int32_t inIndentation) const {
  ioString << "[@classDeclaration:" ;
  mAttribute_mUserDefined.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mClassName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mSuperClassName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mAttributeList.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mArrayList.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mTransientList.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                           @classDeclaration type                            *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_classDeclaration ("classDeclaration",
                                         & kTypeDescriptor_GALGAS_astDeclaration) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_classDeclaration::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_classDeclaration ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_classDeclaration::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_classDeclaration (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_classDeclaration GALGAS_classDeclaration::extractObject (const GALGAS_object & inObject,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) {
  GALGAS_classDeclaration result ;
  const GALGAS_classDeclaration * p = (const GALGAS_classDeclaration *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_classDeclaration *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("classDeclaration", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*

typeComparisonResult cPtr_controllerClassDeclaration::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_controllerClassDeclaration * p = (const cPtr_controllerClassDeclaration *) inOperandPtr ;
  macroValidSharedObject (p, cPtr_controllerClassDeclaration) ;
  if (kOperandEqual == result) {
    result = mAttribute_mUserDefined.objectCompare (p->mAttribute_mUserDefined) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mControllerKind.objectCompare (p->mAttribute_mControllerKind) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mControllerClassName.objectCompare (p->mAttribute_mControllerClassName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mControlledObjectBindingOptionList.objectCompare (p->mAttribute_mControlledObjectBindingOptionList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mGenerationKind.objectCompare (p->mAttribute_mGenerationKind) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mBindingList.objectCompare (p->mAttribute_mBindingList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mActionDeclarationList.objectCompare (p->mAttribute_mActionDeclarationList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mControllerObservablePropertyList.objectCompare (p->mAttribute_mControllerObservablePropertyList) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*


typeComparisonResult GALGAS_controllerClassDeclaration::objectCompare (const GALGAS_controllerClassDeclaration & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_controllerClassDeclaration::GALGAS_controllerClassDeclaration (void) :
GALGAS_astDeclaration () {
}

//-----------------------------------------------------------------------------*

GALGAS_controllerClassDeclaration GALGAS_controllerClassDeclaration::constructor_default (LOCATION_ARGS) {
  return GALGAS_controllerClassDeclaration::constructor_new (GALGAS_bool::constructor_default (HERE),
                                                             GALGAS_controllerKind::constructor_simpleController (HERE),
                                                             GALGAS_lstring::constructor_default (HERE),
                                                             GALGAS_bindingOptionList::constructor_emptyList (HERE),
                                                             GALGAS_generationKind::constructor_fullGeneration (HERE),
                                                             GALGAS_outletClassBindingList::constructor_emptyList (HERE),
                                                             GALGAS_lstringlist::constructor_emptyList (HERE),
                                                             GALGAS_controllerObservablePropertyList::constructor_emptyList (HERE)
                                                             COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

GALGAS_controllerClassDeclaration::GALGAS_controllerClassDeclaration (const cPtr_controllerClassDeclaration * inSourcePtr) :
GALGAS_astDeclaration (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_controllerClassDeclaration) ;
}

//-----------------------------------------------------------------------------*

GALGAS_controllerClassDeclaration GALGAS_controllerClassDeclaration::constructor_new (const GALGAS_bool & inAttribute_mUserDefined,
                                                                                      const GALGAS_controllerKind & inAttribute_mControllerKind,
                                                                                      const GALGAS_lstring & inAttribute_mControllerClassName,
                                                                                      const GALGAS_bindingOptionList & inAttribute_mControlledObjectBindingOptionList,
                                                                                      const GALGAS_generationKind & inAttribute_mGenerationKind,
                                                                                      const GALGAS_outletClassBindingList & inAttribute_mBindingList,
                                                                                      const GALGAS_lstringlist & inAttribute_mActionDeclarationList,
                                                                                      const GALGAS_controllerObservablePropertyList & inAttribute_mControllerObservablePropertyList
                                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_controllerClassDeclaration result ;
  if (inAttribute_mUserDefined.isValid () && inAttribute_mControllerKind.isValid () && inAttribute_mControllerClassName.isValid () && inAttribute_mControlledObjectBindingOptionList.isValid () && inAttribute_mGenerationKind.isValid () && inAttribute_mBindingList.isValid () && inAttribute_mActionDeclarationList.isValid () && inAttribute_mControllerObservablePropertyList.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_controllerClassDeclaration (inAttribute_mUserDefined, inAttribute_mControllerKind, inAttribute_mControllerClassName, inAttribute_mControlledObjectBindingOptionList, inAttribute_mGenerationKind, inAttribute_mBindingList, inAttribute_mActionDeclarationList, inAttribute_mControllerObservablePropertyList COMMA_THERE)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_controllerClassDeclaration::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_controllerClassDeclaration * p = (cPtr_controllerClassDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_controllerClassDeclaration) ;
    cPtr_controllerClassDeclaration * r = NULL ;
    macroMyNew (r, cPtr_controllerClassDeclaration (p->mAttribute_mUserDefined, p->mAttribute_mControllerKind, p->mAttribute_mControllerClassName, p->mAttribute_mControlledObjectBindingOptionList, p->mAttribute_mGenerationKind, p->mAttribute_mBindingList, p->mAttribute_mActionDeclarationList, p->mAttribute_mControllerObservablePropertyList COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//-----------------------------------------------------------------------------*

GALGAS_controllerKind GALGAS_controllerClassDeclaration::reader_mControllerKind (UNUSED_LOCATION_ARGS) const {
  GALGAS_controllerKind result ;
  if (NULL != mObjectPtr) {
    const cPtr_controllerClassDeclaration * p = (const cPtr_controllerClassDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_controllerClassDeclaration) ;
    result = p->mAttribute_mControllerKind ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_controllerKind cPtr_controllerClassDeclaration::reader_mControllerKind (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mControllerKind ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_controllerClassDeclaration::reader_mControllerClassName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_controllerClassDeclaration * p = (const cPtr_controllerClassDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_controllerClassDeclaration) ;
    result = p->mAttribute_mControllerClassName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cPtr_controllerClassDeclaration::reader_mControllerClassName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mControllerClassName ;
}

//-----------------------------------------------------------------------------*

GALGAS_bindingOptionList GALGAS_controllerClassDeclaration::reader_mControlledObjectBindingOptionList (UNUSED_LOCATION_ARGS) const {
  GALGAS_bindingOptionList result ;
  if (NULL != mObjectPtr) {
    const cPtr_controllerClassDeclaration * p = (const cPtr_controllerClassDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_controllerClassDeclaration) ;
    result = p->mAttribute_mControlledObjectBindingOptionList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_bindingOptionList cPtr_controllerClassDeclaration::reader_mControlledObjectBindingOptionList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mControlledObjectBindingOptionList ;
}

//-----------------------------------------------------------------------------*

GALGAS_generationKind GALGAS_controllerClassDeclaration::reader_mGenerationKind (UNUSED_LOCATION_ARGS) const {
  GALGAS_generationKind result ;
  if (NULL != mObjectPtr) {
    const cPtr_controllerClassDeclaration * p = (const cPtr_controllerClassDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_controllerClassDeclaration) ;
    result = p->mAttribute_mGenerationKind ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_generationKind cPtr_controllerClassDeclaration::reader_mGenerationKind (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mGenerationKind ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletClassBindingList GALGAS_controllerClassDeclaration::reader_mBindingList (UNUSED_LOCATION_ARGS) const {
  GALGAS_outletClassBindingList result ;
  if (NULL != mObjectPtr) {
    const cPtr_controllerClassDeclaration * p = (const cPtr_controllerClassDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_controllerClassDeclaration) ;
    result = p->mAttribute_mBindingList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletClassBindingList cPtr_controllerClassDeclaration::reader_mBindingList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mBindingList ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstringlist GALGAS_controllerClassDeclaration::reader_mActionDeclarationList (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstringlist result ;
  if (NULL != mObjectPtr) {
    const cPtr_controllerClassDeclaration * p = (const cPtr_controllerClassDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_controllerClassDeclaration) ;
    result = p->mAttribute_mActionDeclarationList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstringlist cPtr_controllerClassDeclaration::reader_mActionDeclarationList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mActionDeclarationList ;
}

//-----------------------------------------------------------------------------*

GALGAS_controllerObservablePropertyList GALGAS_controllerClassDeclaration::reader_mControllerObservablePropertyList (UNUSED_LOCATION_ARGS) const {
  GALGAS_controllerObservablePropertyList result ;
  if (NULL != mObjectPtr) {
    const cPtr_controllerClassDeclaration * p = (const cPtr_controllerClassDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_controllerClassDeclaration) ;
    result = p->mAttribute_mControllerObservablePropertyList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_controllerObservablePropertyList cPtr_controllerClassDeclaration::reader_mControllerObservablePropertyList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mControllerObservablePropertyList ;
}

//-----------------------------------------------------------------------------*
//             Pointer class for @controllerClassDeclaration class             *
//-----------------------------------------------------------------------------*

cPtr_controllerClassDeclaration::cPtr_controllerClassDeclaration (const GALGAS_bool & in_mUserDefined,
                                                                  const GALGAS_controllerKind & in_mControllerKind,
                                                                  const GALGAS_lstring & in_mControllerClassName,
                                                                  const GALGAS_bindingOptionList & in_mControlledObjectBindingOptionList,
                                                                  const GALGAS_generationKind & in_mGenerationKind,
                                                                  const GALGAS_outletClassBindingList & in_mBindingList,
                                                                  const GALGAS_lstringlist & in_mActionDeclarationList,
                                                                  const GALGAS_controllerObservablePropertyList & in_mControllerObservablePropertyList
                                                                  COMMA_LOCATION_ARGS) :
cPtr_astDeclaration (in_mUserDefined COMMA_THERE),
mAttribute_mControllerKind (in_mControllerKind),
mAttribute_mControllerClassName (in_mControllerClassName),
mAttribute_mControlledObjectBindingOptionList (in_mControlledObjectBindingOptionList),
mAttribute_mGenerationKind (in_mGenerationKind),
mAttribute_mBindingList (in_mBindingList),
mAttribute_mActionDeclarationList (in_mActionDeclarationList),
mAttribute_mControllerObservablePropertyList (in_mControllerObservablePropertyList) {
}

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_controllerClassDeclaration::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_controllerClassDeclaration ;
}

void cPtr_controllerClassDeclaration::description (C_String & ioString,
                                                   const int32_t inIndentation) const {
  ioString << "[@controllerClassDeclaration:" ;
  mAttribute_mUserDefined.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mControllerKind.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mControllerClassName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mControlledObjectBindingOptionList.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mGenerationKind.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mBindingList.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mActionDeclarationList.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mControllerObservablePropertyList.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                      @controllerClassDeclaration type                       *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_controllerClassDeclaration ("controllerClassDeclaration",
                                                   & kTypeDescriptor_GALGAS_astDeclaration) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_controllerClassDeclaration::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_controllerClassDeclaration ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_controllerClassDeclaration::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_controllerClassDeclaration (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_controllerClassDeclaration GALGAS_controllerClassDeclaration::extractObject (const GALGAS_object & inObject,
                                                                                    C_Compiler * inCompiler
                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_controllerClassDeclaration result ;
  const GALGAS_controllerClassDeclaration * p = (const GALGAS_controllerClassDeclaration *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_controllerClassDeclaration *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("controllerClassDeclaration", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*

typeComparisonResult cPtr_documentDeclaration::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_documentDeclaration * p = (const cPtr_documentDeclaration *) inOperandPtr ;
  macroValidSharedObject (p, cPtr_documentDeclaration) ;
  if (kOperandEqual == result) {
    result = mAttribute_mUserDefined.objectCompare (p->mAttribute_mUserDefined) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mDocumentName.objectCompare (p->mAttribute_mDocumentName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mRootEntityName.objectCompare (p->mAttribute_mRootEntityName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mOutletDeclarationList.objectCompare (p->mAttribute_mOutletDeclarationList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mControllerList.objectCompare (p->mAttribute_mControllerList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mActionDeclarationList.objectCompare (p->mAttribute_mActionDeclarationList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mTransientList.objectCompare (p->mAttribute_mTransientList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mAttributeList.objectCompare (p->mAttribute_mAttributeList) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*


typeComparisonResult GALGAS_documentDeclaration::objectCompare (const GALGAS_documentDeclaration & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_documentDeclaration::GALGAS_documentDeclaration (void) :
GALGAS_astDeclaration () {
}

//-----------------------------------------------------------------------------*

GALGAS_documentDeclaration GALGAS_documentDeclaration::constructor_default (LOCATION_ARGS) {
  return GALGAS_documentDeclaration::constructor_new (GALGAS_bool::constructor_default (HERE),
                                                      GALGAS_lstring::constructor_default (HERE),
                                                      GALGAS_lstring::constructor_default (HERE),
                                                      GALGAS_outletDeclarationList::constructor_emptyList (HERE),
                                                      GALGAS_controllerList::constructor_emptyList (HERE),
                                                      GALGAS_lstringlist::constructor_emptyList (HERE),
                                                      GALGAS_transientList::constructor_emptyList (HERE),
                                                      GALGAS_attributeList::constructor_emptyList (HERE)
                                                      COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

GALGAS_documentDeclaration::GALGAS_documentDeclaration (const cPtr_documentDeclaration * inSourcePtr) :
GALGAS_astDeclaration (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_documentDeclaration) ;
}

//-----------------------------------------------------------------------------*

GALGAS_documentDeclaration GALGAS_documentDeclaration::constructor_new (const GALGAS_bool & inAttribute_mUserDefined,
                                                                        const GALGAS_lstring & inAttribute_mDocumentName,
                                                                        const GALGAS_lstring & inAttribute_mRootEntityName,
                                                                        const GALGAS_outletDeclarationList & inAttribute_mOutletDeclarationList,
                                                                        const GALGAS_controllerList & inAttribute_mControllerList,
                                                                        const GALGAS_lstringlist & inAttribute_mActionDeclarationList,
                                                                        const GALGAS_transientList & inAttribute_mTransientList,
                                                                        const GALGAS_attributeList & inAttribute_mAttributeList
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_documentDeclaration result ;
  if (inAttribute_mUserDefined.isValid () && inAttribute_mDocumentName.isValid () && inAttribute_mRootEntityName.isValid () && inAttribute_mOutletDeclarationList.isValid () && inAttribute_mControllerList.isValid () && inAttribute_mActionDeclarationList.isValid () && inAttribute_mTransientList.isValid () && inAttribute_mAttributeList.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_documentDeclaration (inAttribute_mUserDefined, inAttribute_mDocumentName, inAttribute_mRootEntityName, inAttribute_mOutletDeclarationList, inAttribute_mControllerList, inAttribute_mActionDeclarationList, inAttribute_mTransientList, inAttribute_mAttributeList COMMA_THERE)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_documentDeclaration::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_documentDeclaration * p = (cPtr_documentDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_documentDeclaration) ;
    cPtr_documentDeclaration * r = NULL ;
    macroMyNew (r, cPtr_documentDeclaration (p->mAttribute_mUserDefined, p->mAttribute_mDocumentName, p->mAttribute_mRootEntityName, p->mAttribute_mOutletDeclarationList, p->mAttribute_mControllerList, p->mAttribute_mActionDeclarationList, p->mAttribute_mTransientList, p->mAttribute_mAttributeList COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_documentDeclaration::reader_mDocumentName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_documentDeclaration * p = (const cPtr_documentDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_documentDeclaration) ;
    result = p->mAttribute_mDocumentName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cPtr_documentDeclaration::reader_mDocumentName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mDocumentName ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_documentDeclaration::reader_mRootEntityName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_documentDeclaration * p = (const cPtr_documentDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_documentDeclaration) ;
    result = p->mAttribute_mRootEntityName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cPtr_documentDeclaration::reader_mRootEntityName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mRootEntityName ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletDeclarationList GALGAS_documentDeclaration::reader_mOutletDeclarationList (UNUSED_LOCATION_ARGS) const {
  GALGAS_outletDeclarationList result ;
  if (NULL != mObjectPtr) {
    const cPtr_documentDeclaration * p = (const cPtr_documentDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_documentDeclaration) ;
    result = p->mAttribute_mOutletDeclarationList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletDeclarationList cPtr_documentDeclaration::reader_mOutletDeclarationList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mOutletDeclarationList ;
}

//-----------------------------------------------------------------------------*

GALGAS_controllerList GALGAS_documentDeclaration::reader_mControllerList (UNUSED_LOCATION_ARGS) const {
  GALGAS_controllerList result ;
  if (NULL != mObjectPtr) {
    const cPtr_documentDeclaration * p = (const cPtr_documentDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_documentDeclaration) ;
    result = p->mAttribute_mControllerList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_controllerList cPtr_documentDeclaration::reader_mControllerList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mControllerList ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstringlist GALGAS_documentDeclaration::reader_mActionDeclarationList (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstringlist result ;
  if (NULL != mObjectPtr) {
    const cPtr_documentDeclaration * p = (const cPtr_documentDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_documentDeclaration) ;
    result = p->mAttribute_mActionDeclarationList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstringlist cPtr_documentDeclaration::reader_mActionDeclarationList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mActionDeclarationList ;
}

//-----------------------------------------------------------------------------*

GALGAS_transientList GALGAS_documentDeclaration::reader_mTransientList (UNUSED_LOCATION_ARGS) const {
  GALGAS_transientList result ;
  if (NULL != mObjectPtr) {
    const cPtr_documentDeclaration * p = (const cPtr_documentDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_documentDeclaration) ;
    result = p->mAttribute_mTransientList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_transientList cPtr_documentDeclaration::reader_mTransientList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mTransientList ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeList GALGAS_documentDeclaration::reader_mAttributeList (UNUSED_LOCATION_ARGS) const {
  GALGAS_attributeList result ;
  if (NULL != mObjectPtr) {
    const cPtr_documentDeclaration * p = (const cPtr_documentDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_documentDeclaration) ;
    result = p->mAttribute_mAttributeList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeList cPtr_documentDeclaration::reader_mAttributeList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mAttributeList ;
}

//-----------------------------------------------------------------------------*
//                Pointer class for @documentDeclaration class                 *
//-----------------------------------------------------------------------------*

cPtr_documentDeclaration::cPtr_documentDeclaration (const GALGAS_bool & in_mUserDefined,
                                                    const GALGAS_lstring & in_mDocumentName,
                                                    const GALGAS_lstring & in_mRootEntityName,
                                                    const GALGAS_outletDeclarationList & in_mOutletDeclarationList,
                                                    const GALGAS_controllerList & in_mControllerList,
                                                    const GALGAS_lstringlist & in_mActionDeclarationList,
                                                    const GALGAS_transientList & in_mTransientList,
                                                    const GALGAS_attributeList & in_mAttributeList
                                                    COMMA_LOCATION_ARGS) :
cPtr_astDeclaration (in_mUserDefined COMMA_THERE),
mAttribute_mDocumentName (in_mDocumentName),
mAttribute_mRootEntityName (in_mRootEntityName),
mAttribute_mOutletDeclarationList (in_mOutletDeclarationList),
mAttribute_mControllerList (in_mControllerList),
mAttribute_mActionDeclarationList (in_mActionDeclarationList),
mAttribute_mTransientList (in_mTransientList),
mAttribute_mAttributeList (in_mAttributeList) {
}

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_documentDeclaration::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_documentDeclaration ;
}

void cPtr_documentDeclaration::description (C_String & ioString,
                                            const int32_t inIndentation) const {
  ioString << "[@documentDeclaration:" ;
  mAttribute_mUserDefined.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mDocumentName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mRootEntityName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mOutletDeclarationList.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mControllerList.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mActionDeclarationList.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mTransientList.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mAttributeList.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                          @documentDeclaration type                          *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_documentDeclaration ("documentDeclaration",
                                            & kTypeDescriptor_GALGAS_astDeclaration) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_documentDeclaration::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_documentDeclaration ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_documentDeclaration::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_documentDeclaration (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_documentDeclaration GALGAS_documentDeclaration::extractObject (const GALGAS_object & inObject,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_documentDeclaration result ;
  const GALGAS_documentDeclaration * p = (const GALGAS_documentDeclaration *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_documentDeclaration *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("documentDeclaration", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*

typeComparisonResult cPtr_entityDeclaration::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_entityDeclaration * p = (const cPtr_entityDeclaration *) inOperandPtr ;
  macroValidSharedObject (p, cPtr_entityDeclaration) ;
  if (kOperandEqual == result) {
    result = mAttribute_mUserDefined.objectCompare (p->mAttribute_mUserDefined) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mEntityName.objectCompare (p->mAttribute_mEntityName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mSuperEntityName.objectCompare (p->mAttribute_mSuperEntityName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mAttributeList.objectCompare (p->mAttribute_mAttributeList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mTransientList.objectCompare (p->mAttribute_mTransientList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mRelationshipList.objectCompare (p->mAttribute_mRelationshipList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mSignList.objectCompare (p->mAttribute_mSignList) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*


typeComparisonResult GALGAS_entityDeclaration::objectCompare (const GALGAS_entityDeclaration & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_entityDeclaration::GALGAS_entityDeclaration (void) :
GALGAS_astDeclaration () {
}

//-----------------------------------------------------------------------------*

GALGAS_entityDeclaration GALGAS_entityDeclaration::constructor_default (LOCATION_ARGS) {
  return GALGAS_entityDeclaration::constructor_new (GALGAS_bool::constructor_default (HERE),
                                                    GALGAS_lstring::constructor_default (HERE),
                                                    GALGAS_lstring::constructor_default (HERE),
                                                    GALGAS_attributeList::constructor_emptyList (HERE),
                                                    GALGAS_transientList::constructor_emptyList (HERE),
                                                    GALGAS_relationshipList::constructor_emptyList (HERE),
                                                    GALGAS_lstringlist::constructor_emptyList (HERE)
                                                    COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

GALGAS_entityDeclaration::GALGAS_entityDeclaration (const cPtr_entityDeclaration * inSourcePtr) :
GALGAS_astDeclaration (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_entityDeclaration) ;
}

//-----------------------------------------------------------------------------*

GALGAS_entityDeclaration GALGAS_entityDeclaration::constructor_new (const GALGAS_bool & inAttribute_mUserDefined,
                                                                    const GALGAS_lstring & inAttribute_mEntityName,
                                                                    const GALGAS_lstring & inAttribute_mSuperEntityName,
                                                                    const GALGAS_attributeList & inAttribute_mAttributeList,
                                                                    const GALGAS_transientList & inAttribute_mTransientList,
                                                                    const GALGAS_relationshipList & inAttribute_mRelationshipList,
                                                                    const GALGAS_lstringlist & inAttribute_mSignList
                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_entityDeclaration result ;
  if (inAttribute_mUserDefined.isValid () && inAttribute_mEntityName.isValid () && inAttribute_mSuperEntityName.isValid () && inAttribute_mAttributeList.isValid () && inAttribute_mTransientList.isValid () && inAttribute_mRelationshipList.isValid () && inAttribute_mSignList.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_entityDeclaration (inAttribute_mUserDefined, inAttribute_mEntityName, inAttribute_mSuperEntityName, inAttribute_mAttributeList, inAttribute_mTransientList, inAttribute_mRelationshipList, inAttribute_mSignList COMMA_THERE)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_entityDeclaration::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_entityDeclaration * p = (cPtr_entityDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_entityDeclaration) ;
    cPtr_entityDeclaration * r = NULL ;
    macroMyNew (r, cPtr_entityDeclaration (p->mAttribute_mUserDefined, p->mAttribute_mEntityName, p->mAttribute_mSuperEntityName, p->mAttribute_mAttributeList, p->mAttribute_mTransientList, p->mAttribute_mRelationshipList, p->mAttribute_mSignList COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_entityDeclaration::reader_mEntityName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_entityDeclaration * p = (const cPtr_entityDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_entityDeclaration) ;
    result = p->mAttribute_mEntityName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cPtr_entityDeclaration::reader_mEntityName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mEntityName ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_entityDeclaration::reader_mSuperEntityName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_entityDeclaration * p = (const cPtr_entityDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_entityDeclaration) ;
    result = p->mAttribute_mSuperEntityName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cPtr_entityDeclaration::reader_mSuperEntityName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mSuperEntityName ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeList GALGAS_entityDeclaration::reader_mAttributeList (UNUSED_LOCATION_ARGS) const {
  GALGAS_attributeList result ;
  if (NULL != mObjectPtr) {
    const cPtr_entityDeclaration * p = (const cPtr_entityDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_entityDeclaration) ;
    result = p->mAttribute_mAttributeList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeList cPtr_entityDeclaration::reader_mAttributeList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mAttributeList ;
}

//-----------------------------------------------------------------------------*

GALGAS_transientList GALGAS_entityDeclaration::reader_mTransientList (UNUSED_LOCATION_ARGS) const {
  GALGAS_transientList result ;
  if (NULL != mObjectPtr) {
    const cPtr_entityDeclaration * p = (const cPtr_entityDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_entityDeclaration) ;
    result = p->mAttribute_mTransientList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_transientList cPtr_entityDeclaration::reader_mTransientList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mTransientList ;
}

//-----------------------------------------------------------------------------*

GALGAS_relationshipList GALGAS_entityDeclaration::reader_mRelationshipList (UNUSED_LOCATION_ARGS) const {
  GALGAS_relationshipList result ;
  if (NULL != mObjectPtr) {
    const cPtr_entityDeclaration * p = (const cPtr_entityDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_entityDeclaration) ;
    result = p->mAttribute_mRelationshipList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_relationshipList cPtr_entityDeclaration::reader_mRelationshipList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mRelationshipList ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstringlist GALGAS_entityDeclaration::reader_mSignList (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstringlist result ;
  if (NULL != mObjectPtr) {
    const cPtr_entityDeclaration * p = (const cPtr_entityDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_entityDeclaration) ;
    result = p->mAttribute_mSignList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstringlist cPtr_entityDeclaration::reader_mSignList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mSignList ;
}

//-----------------------------------------------------------------------------*
//                 Pointer class for @entityDeclaration class                  *
//-----------------------------------------------------------------------------*

cPtr_entityDeclaration::cPtr_entityDeclaration (const GALGAS_bool & in_mUserDefined,
                                                const GALGAS_lstring & in_mEntityName,
                                                const GALGAS_lstring & in_mSuperEntityName,
                                                const GALGAS_attributeList & in_mAttributeList,
                                                const GALGAS_transientList & in_mTransientList,
                                                const GALGAS_relationshipList & in_mRelationshipList,
                                                const GALGAS_lstringlist & in_mSignList
                                                COMMA_LOCATION_ARGS) :
cPtr_astDeclaration (in_mUserDefined COMMA_THERE),
mAttribute_mEntityName (in_mEntityName),
mAttribute_mSuperEntityName (in_mSuperEntityName),
mAttribute_mAttributeList (in_mAttributeList),
mAttribute_mTransientList (in_mTransientList),
mAttribute_mRelationshipList (in_mRelationshipList),
mAttribute_mSignList (in_mSignList) {
}

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_entityDeclaration::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_entityDeclaration ;
}

void cPtr_entityDeclaration::description (C_String & ioString,
                                          const int32_t inIndentation) const {
  ioString << "[@entityDeclaration:" ;
  mAttribute_mUserDefined.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mEntityName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mSuperEntityName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mAttributeList.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mTransientList.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mRelationshipList.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mSignList.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                           @entityDeclaration type                           *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_entityDeclaration ("entityDeclaration",
                                          & kTypeDescriptor_GALGAS_astDeclaration) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_entityDeclaration::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_entityDeclaration ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_entityDeclaration::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_entityDeclaration (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_entityDeclaration GALGAS_entityDeclaration::extractObject (const GALGAS_object & inObject,
                                                                  C_Compiler * inCompiler
                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_entityDeclaration result ;
  const GALGAS_entityDeclaration * p = (const GALGAS_entityDeclaration *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_entityDeclaration *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("entityDeclaration", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*

typeComparisonResult cPtr_enumDeclaration::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_enumDeclaration * p = (const cPtr_enumDeclaration *) inOperandPtr ;
  macroValidSharedObject (p, cPtr_enumDeclaration) ;
  if (kOperandEqual == result) {
    result = mAttribute_mUserDefined.objectCompare (p->mAttribute_mUserDefined) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mEnumTypeName.objectCompare (p->mAttribute_mEnumTypeName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mEnumConstantNameList.objectCompare (p->mAttribute_mEnumConstantNameList) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*


typeComparisonResult GALGAS_enumDeclaration::objectCompare (const GALGAS_enumDeclaration & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_enumDeclaration::GALGAS_enumDeclaration (void) :
GALGAS_astDeclaration () {
}

//-----------------------------------------------------------------------------*

GALGAS_enumDeclaration GALGAS_enumDeclaration::constructor_default (LOCATION_ARGS) {
  return GALGAS_enumDeclaration::constructor_new (GALGAS_bool::constructor_default (HERE),
                                                  GALGAS_lstring::constructor_default (HERE),
                                                  GALGAS_lstringlist::constructor_emptyList (HERE)
                                                  COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

GALGAS_enumDeclaration::GALGAS_enumDeclaration (const cPtr_enumDeclaration * inSourcePtr) :
GALGAS_astDeclaration (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_enumDeclaration) ;
}

//-----------------------------------------------------------------------------*

GALGAS_enumDeclaration GALGAS_enumDeclaration::constructor_new (const GALGAS_bool & inAttribute_mUserDefined,
                                                                const GALGAS_lstring & inAttribute_mEnumTypeName,
                                                                const GALGAS_lstringlist & inAttribute_mEnumConstantNameList
                                                                COMMA_LOCATION_ARGS) {
  GALGAS_enumDeclaration result ;
  if (inAttribute_mUserDefined.isValid () && inAttribute_mEnumTypeName.isValid () && inAttribute_mEnumConstantNameList.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_enumDeclaration (inAttribute_mUserDefined, inAttribute_mEnumTypeName, inAttribute_mEnumConstantNameList COMMA_THERE)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_enumDeclaration::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_enumDeclaration * p = (cPtr_enumDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_enumDeclaration) ;
    cPtr_enumDeclaration * r = NULL ;
    macroMyNew (r, cPtr_enumDeclaration (p->mAttribute_mUserDefined, p->mAttribute_mEnumTypeName, p->mAttribute_mEnumConstantNameList COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_enumDeclaration::reader_mEnumTypeName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_enumDeclaration * p = (const cPtr_enumDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_enumDeclaration) ;
    result = p->mAttribute_mEnumTypeName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cPtr_enumDeclaration::reader_mEnumTypeName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mEnumTypeName ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstringlist GALGAS_enumDeclaration::reader_mEnumConstantNameList (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstringlist result ;
  if (NULL != mObjectPtr) {
    const cPtr_enumDeclaration * p = (const cPtr_enumDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_enumDeclaration) ;
    result = p->mAttribute_mEnumConstantNameList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstringlist cPtr_enumDeclaration::reader_mEnumConstantNameList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mEnumConstantNameList ;
}

//-----------------------------------------------------------------------------*
//                  Pointer class for @enumDeclaration class                   *
//-----------------------------------------------------------------------------*

cPtr_enumDeclaration::cPtr_enumDeclaration (const GALGAS_bool & in_mUserDefined,
                                            const GALGAS_lstring & in_mEnumTypeName,
                                            const GALGAS_lstringlist & in_mEnumConstantNameList
                                            COMMA_LOCATION_ARGS) :
cPtr_astDeclaration (in_mUserDefined COMMA_THERE),
mAttribute_mEnumTypeName (in_mEnumTypeName),
mAttribute_mEnumConstantNameList (in_mEnumConstantNameList) {
}

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_enumDeclaration::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_enumDeclaration ;
}

void cPtr_enumDeclaration::description (C_String & ioString,
                                        const int32_t inIndentation) const {
  ioString << "[@enumDeclaration:" ;
  mAttribute_mUserDefined.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mEnumTypeName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mEnumConstantNameList.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                            @enumDeclaration type                            *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_enumDeclaration ("enumDeclaration",
                                        & kTypeDescriptor_GALGAS_astDeclaration) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_enumDeclaration::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_enumDeclaration ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_enumDeclaration::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_enumDeclaration (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_enumDeclaration GALGAS_enumDeclaration::extractObject (const GALGAS_object & inObject,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) {
  GALGAS_enumDeclaration result ;
  const GALGAS_enumDeclaration * p = (const GALGAS_enumDeclaration *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_enumDeclaration *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("enumDeclaration", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*

typeComparisonResult cPtr_nibClassDeclaration::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_nibClassDeclaration * p = (const cPtr_nibClassDeclaration *) inOperandPtr ;
  macroValidSharedObject (p, cPtr_nibClassDeclaration) ;
  if (kOperandEqual == result) {
    result = mAttribute_mUserDefined.objectCompare (p->mAttribute_mUserDefined) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mClassName.objectCompare (p->mAttribute_mClassName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mOutletDeclarationList.objectCompare (p->mAttribute_mOutletDeclarationList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mAttributeList.objectCompare (p->mAttribute_mAttributeList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mTransientList.objectCompare (p->mAttribute_mTransientList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mActionDeclarationList.objectCompare (p->mAttribute_mActionDeclarationList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mControllerList.objectCompare (p->mAttribute_mControllerList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mArrayList.objectCompare (p->mAttribute_mArrayList) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*


typeComparisonResult GALGAS_nibClassDeclaration::objectCompare (const GALGAS_nibClassDeclaration & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_nibClassDeclaration::GALGAS_nibClassDeclaration (void) :
GALGAS_astDeclaration () {
}

//-----------------------------------------------------------------------------*

GALGAS_nibClassDeclaration GALGAS_nibClassDeclaration::constructor_default (LOCATION_ARGS) {
  return GALGAS_nibClassDeclaration::constructor_new (GALGAS_bool::constructor_default (HERE),
                                                      GALGAS_lstring::constructor_default (HERE),
                                                      GALGAS_outletDeclarationList::constructor_emptyList (HERE),
                                                      GALGAS_attributeList::constructor_emptyList (HERE),
                                                      GALGAS_transientList::constructor_emptyList (HERE),
                                                      GALGAS_lstringlist::constructor_emptyList (HERE),
                                                      GALGAS_controllerList::constructor_emptyList (HERE),
                                                      GALGAS_classArrayList::constructor_emptyList (HERE)
                                                      COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

GALGAS_nibClassDeclaration::GALGAS_nibClassDeclaration (const cPtr_nibClassDeclaration * inSourcePtr) :
GALGAS_astDeclaration (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_nibClassDeclaration) ;
}

//-----------------------------------------------------------------------------*

GALGAS_nibClassDeclaration GALGAS_nibClassDeclaration::constructor_new (const GALGAS_bool & inAttribute_mUserDefined,
                                                                        const GALGAS_lstring & inAttribute_mClassName,
                                                                        const GALGAS_outletDeclarationList & inAttribute_mOutletDeclarationList,
                                                                        const GALGAS_attributeList & inAttribute_mAttributeList,
                                                                        const GALGAS_transientList & inAttribute_mTransientList,
                                                                        const GALGAS_lstringlist & inAttribute_mActionDeclarationList,
                                                                        const GALGAS_controllerList & inAttribute_mControllerList,
                                                                        const GALGAS_classArrayList & inAttribute_mArrayList
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_nibClassDeclaration result ;
  if (inAttribute_mUserDefined.isValid () && inAttribute_mClassName.isValid () && inAttribute_mOutletDeclarationList.isValid () && inAttribute_mAttributeList.isValid () && inAttribute_mTransientList.isValid () && inAttribute_mActionDeclarationList.isValid () && inAttribute_mControllerList.isValid () && inAttribute_mArrayList.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_nibClassDeclaration (inAttribute_mUserDefined, inAttribute_mClassName, inAttribute_mOutletDeclarationList, inAttribute_mAttributeList, inAttribute_mTransientList, inAttribute_mActionDeclarationList, inAttribute_mControllerList, inAttribute_mArrayList COMMA_THERE)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_nibClassDeclaration::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_nibClassDeclaration * p = (cPtr_nibClassDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_nibClassDeclaration) ;
    cPtr_nibClassDeclaration * r = NULL ;
    macroMyNew (r, cPtr_nibClassDeclaration (p->mAttribute_mUserDefined, p->mAttribute_mClassName, p->mAttribute_mOutletDeclarationList, p->mAttribute_mAttributeList, p->mAttribute_mTransientList, p->mAttribute_mActionDeclarationList, p->mAttribute_mControllerList, p->mAttribute_mArrayList COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_nibClassDeclaration::reader_mClassName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_nibClassDeclaration * p = (const cPtr_nibClassDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_nibClassDeclaration) ;
    result = p->mAttribute_mClassName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cPtr_nibClassDeclaration::reader_mClassName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mClassName ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletDeclarationList GALGAS_nibClassDeclaration::reader_mOutletDeclarationList (UNUSED_LOCATION_ARGS) const {
  GALGAS_outletDeclarationList result ;
  if (NULL != mObjectPtr) {
    const cPtr_nibClassDeclaration * p = (const cPtr_nibClassDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_nibClassDeclaration) ;
    result = p->mAttribute_mOutletDeclarationList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletDeclarationList cPtr_nibClassDeclaration::reader_mOutletDeclarationList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mOutletDeclarationList ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeList GALGAS_nibClassDeclaration::reader_mAttributeList (UNUSED_LOCATION_ARGS) const {
  GALGAS_attributeList result ;
  if (NULL != mObjectPtr) {
    const cPtr_nibClassDeclaration * p = (const cPtr_nibClassDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_nibClassDeclaration) ;
    result = p->mAttribute_mAttributeList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeList cPtr_nibClassDeclaration::reader_mAttributeList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mAttributeList ;
}

//-----------------------------------------------------------------------------*

GALGAS_transientList GALGAS_nibClassDeclaration::reader_mTransientList (UNUSED_LOCATION_ARGS) const {
  GALGAS_transientList result ;
  if (NULL != mObjectPtr) {
    const cPtr_nibClassDeclaration * p = (const cPtr_nibClassDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_nibClassDeclaration) ;
    result = p->mAttribute_mTransientList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_transientList cPtr_nibClassDeclaration::reader_mTransientList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mTransientList ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstringlist GALGAS_nibClassDeclaration::reader_mActionDeclarationList (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstringlist result ;
  if (NULL != mObjectPtr) {
    const cPtr_nibClassDeclaration * p = (const cPtr_nibClassDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_nibClassDeclaration) ;
    result = p->mAttribute_mActionDeclarationList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstringlist cPtr_nibClassDeclaration::reader_mActionDeclarationList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mActionDeclarationList ;
}

//-----------------------------------------------------------------------------*

GALGAS_controllerList GALGAS_nibClassDeclaration::reader_mControllerList (UNUSED_LOCATION_ARGS) const {
  GALGAS_controllerList result ;
  if (NULL != mObjectPtr) {
    const cPtr_nibClassDeclaration * p = (const cPtr_nibClassDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_nibClassDeclaration) ;
    result = p->mAttribute_mControllerList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_controllerList cPtr_nibClassDeclaration::reader_mControllerList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mControllerList ;
}

//-----------------------------------------------------------------------------*

GALGAS_classArrayList GALGAS_nibClassDeclaration::reader_mArrayList (UNUSED_LOCATION_ARGS) const {
  GALGAS_classArrayList result ;
  if (NULL != mObjectPtr) {
    const cPtr_nibClassDeclaration * p = (const cPtr_nibClassDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_nibClassDeclaration) ;
    result = p->mAttribute_mArrayList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_classArrayList cPtr_nibClassDeclaration::reader_mArrayList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mArrayList ;
}

//-----------------------------------------------------------------------------*
//                Pointer class for @nibClassDeclaration class                 *
//-----------------------------------------------------------------------------*

cPtr_nibClassDeclaration::cPtr_nibClassDeclaration (const GALGAS_bool & in_mUserDefined,
                                                    const GALGAS_lstring & in_mClassName,
                                                    const GALGAS_outletDeclarationList & in_mOutletDeclarationList,
                                                    const GALGAS_attributeList & in_mAttributeList,
                                                    const GALGAS_transientList & in_mTransientList,
                                                    const GALGAS_lstringlist & in_mActionDeclarationList,
                                                    const GALGAS_controllerList & in_mControllerList,
                                                    const GALGAS_classArrayList & in_mArrayList
                                                    COMMA_LOCATION_ARGS) :
cPtr_astDeclaration (in_mUserDefined COMMA_THERE),
mAttribute_mClassName (in_mClassName),
mAttribute_mOutletDeclarationList (in_mOutletDeclarationList),
mAttribute_mAttributeList (in_mAttributeList),
mAttribute_mTransientList (in_mTransientList),
mAttribute_mActionDeclarationList (in_mActionDeclarationList),
mAttribute_mControllerList (in_mControllerList),
mAttribute_mArrayList (in_mArrayList) {
}

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_nibClassDeclaration::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_nibClassDeclaration ;
}

void cPtr_nibClassDeclaration::description (C_String & ioString,
                                            const int32_t inIndentation) const {
  ioString << "[@nibClassDeclaration:" ;
  mAttribute_mUserDefined.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mClassName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mOutletDeclarationList.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mAttributeList.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mTransientList.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mActionDeclarationList.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mControllerList.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mArrayList.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                          @nibClassDeclaration type                          *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_nibClassDeclaration ("nibClassDeclaration",
                                            & kTypeDescriptor_GALGAS_astDeclaration) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_nibClassDeclaration::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_nibClassDeclaration ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_nibClassDeclaration::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_nibClassDeclaration (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_nibClassDeclaration GALGAS_nibClassDeclaration::extractObject (const GALGAS_object & inObject,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_nibClassDeclaration result ;
  const GALGAS_nibClassDeclaration * p = (const GALGAS_nibClassDeclaration *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_nibClassDeclaration *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("nibClassDeclaration", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*

typeComparisonResult cPtr_outletClassDeclaration::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_outletClassDeclaration * p = (const cPtr_outletClassDeclaration *) inOperandPtr ;
  macroValidSharedObject (p, cPtr_outletClassDeclaration) ;
  if (kOperandEqual == result) {
    result = mAttribute_mUserDefined.objectCompare (p->mAttribute_mUserDefined) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mOutletClassName.objectCompare (p->mAttribute_mOutletClassName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mSuperClassName.objectCompare (p->mAttribute_mSuperClassName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mAdoptedProtocolList.objectCompare (p->mAttribute_mAdoptedProtocolList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mGenerationKind.objectCompare (p->mAttribute_mGenerationKind) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mOutletClassBindingList.objectCompare (p->mAttribute_mOutletClassBindingList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mHasTableValueBinding.objectCompare (p->mAttribute_mHasTableValueBinding) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mOptionList.objectCompare (p->mAttribute_mOptionList) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*


typeComparisonResult GALGAS_outletClassDeclaration::objectCompare (const GALGAS_outletClassDeclaration & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletClassDeclaration::GALGAS_outletClassDeclaration (void) :
GALGAS_astDeclaration () {
}

//-----------------------------------------------------------------------------*

GALGAS_outletClassDeclaration GALGAS_outletClassDeclaration::constructor_default (LOCATION_ARGS) {
  return GALGAS_outletClassDeclaration::constructor_new (GALGAS_bool::constructor_default (HERE),
                                                         GALGAS_lstring::constructor_default (HERE),
                                                         GALGAS_lstring::constructor_default (HERE),
                                                         GALGAS_lstringlist::constructor_emptyList (HERE),
                                                         GALGAS_generationKind::constructor_fullGeneration (HERE),
                                                         GALGAS_outletClassBindingList::constructor_emptyList (HERE),
                                                         GALGAS_bool::constructor_default (HERE),
                                                         GALGAS_lstringlist::constructor_emptyList (HERE)
                                                         COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletClassDeclaration::GALGAS_outletClassDeclaration (const cPtr_outletClassDeclaration * inSourcePtr) :
GALGAS_astDeclaration (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_outletClassDeclaration) ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletClassDeclaration GALGAS_outletClassDeclaration::constructor_new (const GALGAS_bool & inAttribute_mUserDefined,
                                                                              const GALGAS_lstring & inAttribute_mOutletClassName,
                                                                              const GALGAS_lstring & inAttribute_mSuperClassName,
                                                                              const GALGAS_lstringlist & inAttribute_mAdoptedProtocolList,
                                                                              const GALGAS_generationKind & inAttribute_mGenerationKind,
                                                                              const GALGAS_outletClassBindingList & inAttribute_mOutletClassBindingList,
                                                                              const GALGAS_bool & inAttribute_mHasTableValueBinding,
                                                                              const GALGAS_lstringlist & inAttribute_mOptionList
                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_outletClassDeclaration result ;
  if (inAttribute_mUserDefined.isValid () && inAttribute_mOutletClassName.isValid () && inAttribute_mSuperClassName.isValid () && inAttribute_mAdoptedProtocolList.isValid () && inAttribute_mGenerationKind.isValid () && inAttribute_mOutletClassBindingList.isValid () && inAttribute_mHasTableValueBinding.isValid () && inAttribute_mOptionList.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_outletClassDeclaration (inAttribute_mUserDefined, inAttribute_mOutletClassName, inAttribute_mSuperClassName, inAttribute_mAdoptedProtocolList, inAttribute_mGenerationKind, inAttribute_mOutletClassBindingList, inAttribute_mHasTableValueBinding, inAttribute_mOptionList COMMA_THERE)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_outletClassDeclaration::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_outletClassDeclaration * p = (cPtr_outletClassDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_outletClassDeclaration) ;
    cPtr_outletClassDeclaration * r = NULL ;
    macroMyNew (r, cPtr_outletClassDeclaration (p->mAttribute_mUserDefined, p->mAttribute_mOutletClassName, p->mAttribute_mSuperClassName, p->mAttribute_mAdoptedProtocolList, p->mAttribute_mGenerationKind, p->mAttribute_mOutletClassBindingList, p->mAttribute_mHasTableValueBinding, p->mAttribute_mOptionList COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_outletClassDeclaration::reader_mOutletClassName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_outletClassDeclaration * p = (const cPtr_outletClassDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_outletClassDeclaration) ;
    result = p->mAttribute_mOutletClassName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cPtr_outletClassDeclaration::reader_mOutletClassName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mOutletClassName ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_outletClassDeclaration::reader_mSuperClassName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_outletClassDeclaration * p = (const cPtr_outletClassDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_outletClassDeclaration) ;
    result = p->mAttribute_mSuperClassName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cPtr_outletClassDeclaration::reader_mSuperClassName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mSuperClassName ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstringlist GALGAS_outletClassDeclaration::reader_mAdoptedProtocolList (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstringlist result ;
  if (NULL != mObjectPtr) {
    const cPtr_outletClassDeclaration * p = (const cPtr_outletClassDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_outletClassDeclaration) ;
    result = p->mAttribute_mAdoptedProtocolList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstringlist cPtr_outletClassDeclaration::reader_mAdoptedProtocolList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mAdoptedProtocolList ;
}

//-----------------------------------------------------------------------------*

GALGAS_generationKind GALGAS_outletClassDeclaration::reader_mGenerationKind (UNUSED_LOCATION_ARGS) const {
  GALGAS_generationKind result ;
  if (NULL != mObjectPtr) {
    const cPtr_outletClassDeclaration * p = (const cPtr_outletClassDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_outletClassDeclaration) ;
    result = p->mAttribute_mGenerationKind ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_generationKind cPtr_outletClassDeclaration::reader_mGenerationKind (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mGenerationKind ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletClassBindingList GALGAS_outletClassDeclaration::reader_mOutletClassBindingList (UNUSED_LOCATION_ARGS) const {
  GALGAS_outletClassBindingList result ;
  if (NULL != mObjectPtr) {
    const cPtr_outletClassDeclaration * p = (const cPtr_outletClassDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_outletClassDeclaration) ;
    result = p->mAttribute_mOutletClassBindingList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletClassBindingList cPtr_outletClassDeclaration::reader_mOutletClassBindingList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mOutletClassBindingList ;
}

//-----------------------------------------------------------------------------*

GALGAS_bool GALGAS_outletClassDeclaration::reader_mHasTableValueBinding (UNUSED_LOCATION_ARGS) const {
  GALGAS_bool result ;
  if (NULL != mObjectPtr) {
    const cPtr_outletClassDeclaration * p = (const cPtr_outletClassDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_outletClassDeclaration) ;
    result = p->mAttribute_mHasTableValueBinding ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_bool cPtr_outletClassDeclaration::reader_mHasTableValueBinding (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mHasTableValueBinding ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstringlist GALGAS_outletClassDeclaration::reader_mOptionList (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstringlist result ;
  if (NULL != mObjectPtr) {
    const cPtr_outletClassDeclaration * p = (const cPtr_outletClassDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_outletClassDeclaration) ;
    result = p->mAttribute_mOptionList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstringlist cPtr_outletClassDeclaration::reader_mOptionList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mOptionList ;
}

//-----------------------------------------------------------------------------*
//               Pointer class for @outletClassDeclaration class               *
//-----------------------------------------------------------------------------*

cPtr_outletClassDeclaration::cPtr_outletClassDeclaration (const GALGAS_bool & in_mUserDefined,
                                                          const GALGAS_lstring & in_mOutletClassName,
                                                          const GALGAS_lstring & in_mSuperClassName,
                                                          const GALGAS_lstringlist & in_mAdoptedProtocolList,
                                                          const GALGAS_generationKind & in_mGenerationKind,
                                                          const GALGAS_outletClassBindingList & in_mOutletClassBindingList,
                                                          const GALGAS_bool & in_mHasTableValueBinding,
                                                          const GALGAS_lstringlist & in_mOptionList
                                                          COMMA_LOCATION_ARGS) :
cPtr_astDeclaration (in_mUserDefined COMMA_THERE),
mAttribute_mOutletClassName (in_mOutletClassName),
mAttribute_mSuperClassName (in_mSuperClassName),
mAttribute_mAdoptedProtocolList (in_mAdoptedProtocolList),
mAttribute_mGenerationKind (in_mGenerationKind),
mAttribute_mOutletClassBindingList (in_mOutletClassBindingList),
mAttribute_mHasTableValueBinding (in_mHasTableValueBinding),
mAttribute_mOptionList (in_mOptionList) {
}

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_outletClassDeclaration::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_outletClassDeclaration ;
}

void cPtr_outletClassDeclaration::description (C_String & ioString,
                                               const int32_t inIndentation) const {
  ioString << "[@outletClassDeclaration:" ;
  mAttribute_mUserDefined.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mOutletClassName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mSuperClassName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mAdoptedProtocolList.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mGenerationKind.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mOutletClassBindingList.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mHasTableValueBinding.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mOptionList.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                        @outletClassDeclaration type                         *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_outletClassDeclaration ("outletClassDeclaration",
                                               & kTypeDescriptor_GALGAS_astDeclaration) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_outletClassDeclaration::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_outletClassDeclaration ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_outletClassDeclaration::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_outletClassDeclaration (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletClassDeclaration GALGAS_outletClassDeclaration::extractObject (const GALGAS_object & inObject,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_outletClassDeclaration result ;
  const GALGAS_outletClassDeclaration * p = (const GALGAS_outletClassDeclaration *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_outletClassDeclaration *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("outletClassDeclaration", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*

typeComparisonResult cPtr_predefinedTypeDeclaration::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_predefinedTypeDeclaration * p = (const cPtr_predefinedTypeDeclaration *) inOperandPtr ;
  macroValidSharedObject (p, cPtr_predefinedTypeDeclaration) ;
  if (kOperandEqual == result) {
    result = mAttribute_mUserDefined.objectCompare (p->mAttribute_mUserDefined) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mTypeName.objectCompare (p->mAttribute_mTypeName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mKind.objectCompare (p->mAttribute_mKind) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*


typeComparisonResult GALGAS_predefinedTypeDeclaration::objectCompare (const GALGAS_predefinedTypeDeclaration & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_predefinedTypeDeclaration::GALGAS_predefinedTypeDeclaration (void) :
GALGAS_astDeclaration () {
}

//-----------------------------------------------------------------------------*

GALGAS_predefinedTypeDeclaration GALGAS_predefinedTypeDeclaration::constructor_default (LOCATION_ARGS) {
  return GALGAS_predefinedTypeDeclaration::constructor_new (GALGAS_bool::constructor_default (HERE),
                                                            GALGAS_string::constructor_default (HERE),
                                                            GALGAS_typeKind::constructor_classType (HERE)
                                                            COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

GALGAS_predefinedTypeDeclaration::GALGAS_predefinedTypeDeclaration (const cPtr_predefinedTypeDeclaration * inSourcePtr) :
GALGAS_astDeclaration (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_predefinedTypeDeclaration) ;
}

//-----------------------------------------------------------------------------*

GALGAS_predefinedTypeDeclaration GALGAS_predefinedTypeDeclaration::constructor_new (const GALGAS_bool & inAttribute_mUserDefined,
                                                                                    const GALGAS_string & inAttribute_mTypeName,
                                                                                    const GALGAS_typeKind & inAttribute_mKind
                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_predefinedTypeDeclaration result ;
  if (inAttribute_mUserDefined.isValid () && inAttribute_mTypeName.isValid () && inAttribute_mKind.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_predefinedTypeDeclaration (inAttribute_mUserDefined, inAttribute_mTypeName, inAttribute_mKind COMMA_THERE)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_predefinedTypeDeclaration::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_predefinedTypeDeclaration * p = (cPtr_predefinedTypeDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_predefinedTypeDeclaration) ;
    cPtr_predefinedTypeDeclaration * r = NULL ;
    macroMyNew (r, cPtr_predefinedTypeDeclaration (p->mAttribute_mUserDefined, p->mAttribute_mTypeName, p->mAttribute_mKind COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//-----------------------------------------------------------------------------*

GALGAS_string GALGAS_predefinedTypeDeclaration::reader_mTypeName (UNUSED_LOCATION_ARGS) const {
  GALGAS_string result ;
  if (NULL != mObjectPtr) {
    const cPtr_predefinedTypeDeclaration * p = (const cPtr_predefinedTypeDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_predefinedTypeDeclaration) ;
    result = p->mAttribute_mTypeName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_string cPtr_predefinedTypeDeclaration::reader_mTypeName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mTypeName ;
}

//-----------------------------------------------------------------------------*

GALGAS_typeKind GALGAS_predefinedTypeDeclaration::reader_mKind (UNUSED_LOCATION_ARGS) const {
  GALGAS_typeKind result ;
  if (NULL != mObjectPtr) {
    const cPtr_predefinedTypeDeclaration * p = (const cPtr_predefinedTypeDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_predefinedTypeDeclaration) ;
    result = p->mAttribute_mKind ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_typeKind cPtr_predefinedTypeDeclaration::reader_mKind (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mKind ;
}

//-----------------------------------------------------------------------------*
//             Pointer class for @predefinedTypeDeclaration class              *
//-----------------------------------------------------------------------------*

cPtr_predefinedTypeDeclaration::cPtr_predefinedTypeDeclaration (const GALGAS_bool & in_mUserDefined,
                                                                const GALGAS_string & in_mTypeName,
                                                                const GALGAS_typeKind & in_mKind
                                                                COMMA_LOCATION_ARGS) :
cPtr_astDeclaration (in_mUserDefined COMMA_THERE),
mAttribute_mTypeName (in_mTypeName),
mAttribute_mKind (in_mKind) {
}

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_predefinedTypeDeclaration::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_predefinedTypeDeclaration ;
}

void cPtr_predefinedTypeDeclaration::description (C_String & ioString,
                                                  const int32_t inIndentation) const {
  ioString << "[@predefinedTypeDeclaration:" ;
  mAttribute_mUserDefined.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mTypeName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mKind.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                       @predefinedTypeDeclaration type                       *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_predefinedTypeDeclaration ("predefinedTypeDeclaration",
                                                  & kTypeDescriptor_GALGAS_astDeclaration) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_predefinedTypeDeclaration::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_predefinedTypeDeclaration ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_predefinedTypeDeclaration::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_predefinedTypeDeclaration (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_predefinedTypeDeclaration GALGAS_predefinedTypeDeclaration::extractObject (const GALGAS_object & inObject,
                                                                                  C_Compiler * inCompiler
                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_predefinedTypeDeclaration result ;
  const GALGAS_predefinedTypeDeclaration * p = (const GALGAS_predefinedTypeDeclaration *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_predefinedTypeDeclaration *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("predefinedTypeDeclaration", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*

typeComparisonResult cPtr_preferencesDeclaration::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_preferencesDeclaration * p = (const cPtr_preferencesDeclaration *) inOperandPtr ;
  macroValidSharedObject (p, cPtr_preferencesDeclaration) ;
  if (kOperandEqual == result) {
    result = mAttribute_mUserDefined.objectCompare (p->mAttribute_mUserDefined) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mPreferencesName.objectCompare (p->mAttribute_mPreferencesName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mOutletDeclarationList.objectCompare (p->mAttribute_mOutletDeclarationList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mAttributeList.objectCompare (p->mAttribute_mAttributeList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mTransientList.objectCompare (p->mAttribute_mTransientList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mActionDeclarationList.objectCompare (p->mAttribute_mActionDeclarationList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mControllerList.objectCompare (p->mAttribute_mControllerList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mArrayList.objectCompare (p->mAttribute_mArrayList) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*


typeComparisonResult GALGAS_preferencesDeclaration::objectCompare (const GALGAS_preferencesDeclaration & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_preferencesDeclaration::GALGAS_preferencesDeclaration (void) :
GALGAS_astDeclaration () {
}

//-----------------------------------------------------------------------------*

GALGAS_preferencesDeclaration GALGAS_preferencesDeclaration::constructor_default (LOCATION_ARGS) {
  return GALGAS_preferencesDeclaration::constructor_new (GALGAS_bool::constructor_default (HERE),
                                                         GALGAS_lstring::constructor_default (HERE),
                                                         GALGAS_outletDeclarationList::constructor_emptyList (HERE),
                                                         GALGAS_attributeList::constructor_emptyList (HERE),
                                                         GALGAS_transientList::constructor_emptyList (HERE),
                                                         GALGAS_lstringlist::constructor_emptyList (HERE),
                                                         GALGAS_controllerList::constructor_emptyList (HERE),
                                                         GALGAS_classArrayList::constructor_emptyList (HERE)
                                                         COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

GALGAS_preferencesDeclaration::GALGAS_preferencesDeclaration (const cPtr_preferencesDeclaration * inSourcePtr) :
GALGAS_astDeclaration (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_preferencesDeclaration) ;
}

//-----------------------------------------------------------------------------*

GALGAS_preferencesDeclaration GALGAS_preferencesDeclaration::constructor_new (const GALGAS_bool & inAttribute_mUserDefined,
                                                                              const GALGAS_lstring & inAttribute_mPreferencesName,
                                                                              const GALGAS_outletDeclarationList & inAttribute_mOutletDeclarationList,
                                                                              const GALGAS_attributeList & inAttribute_mAttributeList,
                                                                              const GALGAS_transientList & inAttribute_mTransientList,
                                                                              const GALGAS_lstringlist & inAttribute_mActionDeclarationList,
                                                                              const GALGAS_controllerList & inAttribute_mControllerList,
                                                                              const GALGAS_classArrayList & inAttribute_mArrayList
                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_preferencesDeclaration result ;
  if (inAttribute_mUserDefined.isValid () && inAttribute_mPreferencesName.isValid () && inAttribute_mOutletDeclarationList.isValid () && inAttribute_mAttributeList.isValid () && inAttribute_mTransientList.isValid () && inAttribute_mActionDeclarationList.isValid () && inAttribute_mControllerList.isValid () && inAttribute_mArrayList.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_preferencesDeclaration (inAttribute_mUserDefined, inAttribute_mPreferencesName, inAttribute_mOutletDeclarationList, inAttribute_mAttributeList, inAttribute_mTransientList, inAttribute_mActionDeclarationList, inAttribute_mControllerList, inAttribute_mArrayList COMMA_THERE)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_preferencesDeclaration::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_preferencesDeclaration * p = (cPtr_preferencesDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_preferencesDeclaration) ;
    cPtr_preferencesDeclaration * r = NULL ;
    macroMyNew (r, cPtr_preferencesDeclaration (p->mAttribute_mUserDefined, p->mAttribute_mPreferencesName, p->mAttribute_mOutletDeclarationList, p->mAttribute_mAttributeList, p->mAttribute_mTransientList, p->mAttribute_mActionDeclarationList, p->mAttribute_mControllerList, p->mAttribute_mArrayList COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_preferencesDeclaration::reader_mPreferencesName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_preferencesDeclaration * p = (const cPtr_preferencesDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_preferencesDeclaration) ;
    result = p->mAttribute_mPreferencesName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cPtr_preferencesDeclaration::reader_mPreferencesName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mPreferencesName ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletDeclarationList GALGAS_preferencesDeclaration::reader_mOutletDeclarationList (UNUSED_LOCATION_ARGS) const {
  GALGAS_outletDeclarationList result ;
  if (NULL != mObjectPtr) {
    const cPtr_preferencesDeclaration * p = (const cPtr_preferencesDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_preferencesDeclaration) ;
    result = p->mAttribute_mOutletDeclarationList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletDeclarationList cPtr_preferencesDeclaration::reader_mOutletDeclarationList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mOutletDeclarationList ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeList GALGAS_preferencesDeclaration::reader_mAttributeList (UNUSED_LOCATION_ARGS) const {
  GALGAS_attributeList result ;
  if (NULL != mObjectPtr) {
    const cPtr_preferencesDeclaration * p = (const cPtr_preferencesDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_preferencesDeclaration) ;
    result = p->mAttribute_mAttributeList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeList cPtr_preferencesDeclaration::reader_mAttributeList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mAttributeList ;
}

//-----------------------------------------------------------------------------*

GALGAS_transientList GALGAS_preferencesDeclaration::reader_mTransientList (UNUSED_LOCATION_ARGS) const {
  GALGAS_transientList result ;
  if (NULL != mObjectPtr) {
    const cPtr_preferencesDeclaration * p = (const cPtr_preferencesDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_preferencesDeclaration) ;
    result = p->mAttribute_mTransientList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_transientList cPtr_preferencesDeclaration::reader_mTransientList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mTransientList ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstringlist GALGAS_preferencesDeclaration::reader_mActionDeclarationList (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstringlist result ;
  if (NULL != mObjectPtr) {
    const cPtr_preferencesDeclaration * p = (const cPtr_preferencesDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_preferencesDeclaration) ;
    result = p->mAttribute_mActionDeclarationList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstringlist cPtr_preferencesDeclaration::reader_mActionDeclarationList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mActionDeclarationList ;
}

//-----------------------------------------------------------------------------*

GALGAS_controllerList GALGAS_preferencesDeclaration::reader_mControllerList (UNUSED_LOCATION_ARGS) const {
  GALGAS_controllerList result ;
  if (NULL != mObjectPtr) {
    const cPtr_preferencesDeclaration * p = (const cPtr_preferencesDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_preferencesDeclaration) ;
    result = p->mAttribute_mControllerList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_controllerList cPtr_preferencesDeclaration::reader_mControllerList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mControllerList ;
}

//-----------------------------------------------------------------------------*

GALGAS_classArrayList GALGAS_preferencesDeclaration::reader_mArrayList (UNUSED_LOCATION_ARGS) const {
  GALGAS_classArrayList result ;
  if (NULL != mObjectPtr) {
    const cPtr_preferencesDeclaration * p = (const cPtr_preferencesDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_preferencesDeclaration) ;
    result = p->mAttribute_mArrayList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_classArrayList cPtr_preferencesDeclaration::reader_mArrayList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mArrayList ;
}

//-----------------------------------------------------------------------------*
//               Pointer class for @preferencesDeclaration class               *
//-----------------------------------------------------------------------------*

cPtr_preferencesDeclaration::cPtr_preferencesDeclaration (const GALGAS_bool & in_mUserDefined,
                                                          const GALGAS_lstring & in_mPreferencesName,
                                                          const GALGAS_outletDeclarationList & in_mOutletDeclarationList,
                                                          const GALGAS_attributeList & in_mAttributeList,
                                                          const GALGAS_transientList & in_mTransientList,
                                                          const GALGAS_lstringlist & in_mActionDeclarationList,
                                                          const GALGAS_controllerList & in_mControllerList,
                                                          const GALGAS_classArrayList & in_mArrayList
                                                          COMMA_LOCATION_ARGS) :
cPtr_astDeclaration (in_mUserDefined COMMA_THERE),
mAttribute_mPreferencesName (in_mPreferencesName),
mAttribute_mOutletDeclarationList (in_mOutletDeclarationList),
mAttribute_mAttributeList (in_mAttributeList),
mAttribute_mTransientList (in_mTransientList),
mAttribute_mActionDeclarationList (in_mActionDeclarationList),
mAttribute_mControllerList (in_mControllerList),
mAttribute_mArrayList (in_mArrayList) {
}

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_preferencesDeclaration::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_preferencesDeclaration ;
}

void cPtr_preferencesDeclaration::description (C_String & ioString,
                                               const int32_t inIndentation) const {
  ioString << "[@preferencesDeclaration:" ;
  mAttribute_mUserDefined.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mPreferencesName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mOutletDeclarationList.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mAttributeList.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mTransientList.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mActionDeclarationList.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mControllerList.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mArrayList.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                        @preferencesDeclaration type                         *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_preferencesDeclaration ("preferencesDeclaration",
                                               & kTypeDescriptor_GALGAS_astDeclaration) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_preferencesDeclaration::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_preferencesDeclaration ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_preferencesDeclaration::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_preferencesDeclaration (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_preferencesDeclaration GALGAS_preferencesDeclaration::extractObject (const GALGAS_object & inObject,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_preferencesDeclaration result ;
  const GALGAS_preferencesDeclaration * p = (const GALGAS_preferencesDeclaration *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_preferencesDeclaration *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("preferencesDeclaration", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*

typeComparisonResult cPtr_protocolDeclaration::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_protocolDeclaration * p = (const cPtr_protocolDeclaration *) inOperandPtr ;
  macroValidSharedObject (p, cPtr_protocolDeclaration) ;
  if (kOperandEqual == result) {
    result = mAttribute_mUserDefined.objectCompare (p->mAttribute_mUserDefined) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mIsPredefined.objectCompare (p->mAttribute_mIsPredefined) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mProtocolName.objectCompare (p->mAttribute_mProtocolName) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*


typeComparisonResult GALGAS_protocolDeclaration::objectCompare (const GALGAS_protocolDeclaration & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_protocolDeclaration::GALGAS_protocolDeclaration (void) :
GALGAS_astDeclaration () {
}

//-----------------------------------------------------------------------------*

GALGAS_protocolDeclaration GALGAS_protocolDeclaration::constructor_default (LOCATION_ARGS) {
  return GALGAS_protocolDeclaration::constructor_new (GALGAS_bool::constructor_default (HERE),
                                                      GALGAS_bool::constructor_default (HERE),
                                                      GALGAS_lstring::constructor_default (HERE)
                                                      COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

GALGAS_protocolDeclaration::GALGAS_protocolDeclaration (const cPtr_protocolDeclaration * inSourcePtr) :
GALGAS_astDeclaration (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_protocolDeclaration) ;
}

//-----------------------------------------------------------------------------*

GALGAS_protocolDeclaration GALGAS_protocolDeclaration::constructor_new (const GALGAS_bool & inAttribute_mUserDefined,
                                                                        const GALGAS_bool & inAttribute_mIsPredefined,
                                                                        const GALGAS_lstring & inAttribute_mProtocolName
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_protocolDeclaration result ;
  if (inAttribute_mUserDefined.isValid () && inAttribute_mIsPredefined.isValid () && inAttribute_mProtocolName.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_protocolDeclaration (inAttribute_mUserDefined, inAttribute_mIsPredefined, inAttribute_mProtocolName COMMA_THERE)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_protocolDeclaration::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_protocolDeclaration * p = (cPtr_protocolDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_protocolDeclaration) ;
    cPtr_protocolDeclaration * r = NULL ;
    macroMyNew (r, cPtr_protocolDeclaration (p->mAttribute_mUserDefined, p->mAttribute_mIsPredefined, p->mAttribute_mProtocolName COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//-----------------------------------------------------------------------------*

GALGAS_bool GALGAS_protocolDeclaration::reader_mIsPredefined (UNUSED_LOCATION_ARGS) const {
  GALGAS_bool result ;
  if (NULL != mObjectPtr) {
    const cPtr_protocolDeclaration * p = (const cPtr_protocolDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_protocolDeclaration) ;
    result = p->mAttribute_mIsPredefined ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_bool cPtr_protocolDeclaration::reader_mIsPredefined (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mIsPredefined ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_protocolDeclaration::reader_mProtocolName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_protocolDeclaration * p = (const cPtr_protocolDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_protocolDeclaration) ;
    result = p->mAttribute_mProtocolName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cPtr_protocolDeclaration::reader_mProtocolName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mProtocolName ;
}

//-----------------------------------------------------------------------------*
//                Pointer class for @protocolDeclaration class                 *
//-----------------------------------------------------------------------------*

cPtr_protocolDeclaration::cPtr_protocolDeclaration (const GALGAS_bool & in_mUserDefined,
                                                    const GALGAS_bool & in_mIsPredefined,
                                                    const GALGAS_lstring & in_mProtocolName
                                                    COMMA_LOCATION_ARGS) :
cPtr_astDeclaration (in_mUserDefined COMMA_THERE),
mAttribute_mIsPredefined (in_mIsPredefined),
mAttribute_mProtocolName (in_mProtocolName) {
}

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_protocolDeclaration::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_protocolDeclaration ;
}

void cPtr_protocolDeclaration::description (C_String & ioString,
                                            const int32_t inIndentation) const {
  ioString << "[@protocolDeclaration:" ;
  mAttribute_mUserDefined.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mIsPredefined.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mProtocolName.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                          @protocolDeclaration type                          *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_protocolDeclaration ("protocolDeclaration",
                                            & kTypeDescriptor_GALGAS_astDeclaration) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_protocolDeclaration::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_protocolDeclaration ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_protocolDeclaration::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_protocolDeclaration (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_protocolDeclaration GALGAS_protocolDeclaration::extractObject (const GALGAS_object & inObject,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_protocolDeclaration result ;
  const GALGAS_protocolDeclaration * p = (const GALGAS_protocolDeclaration *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_protocolDeclaration *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("protocolDeclaration", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*

typeComparisonResult cPtr_structDeclaration::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_structDeclaration * p = (const cPtr_structDeclaration *) inOperandPtr ;
  macroValidSharedObject (p, cPtr_structDeclaration) ;
  if (kOperandEqual == result) {
    result = mAttribute_mUserDefined.objectCompare (p->mAttribute_mUserDefined) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mStructTypeName.objectCompare (p->mAttribute_mStructTypeName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mFieldList.objectCompare (p->mAttribute_mFieldList) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*


typeComparisonResult GALGAS_structDeclaration::objectCompare (const GALGAS_structDeclaration & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_structDeclaration::GALGAS_structDeclaration (void) :
GALGAS_astDeclaration () {
}

//-----------------------------------------------------------------------------*

GALGAS_structDeclaration GALGAS_structDeclaration::constructor_default (LOCATION_ARGS) {
  return GALGAS_structDeclaration::constructor_new (GALGAS_bool::constructor_default (HERE),
                                                    GALGAS_lstring::constructor_default (HERE),
                                                    GALGAS_structFieldASTList::constructor_emptyList (HERE)
                                                    COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

GALGAS_structDeclaration::GALGAS_structDeclaration (const cPtr_structDeclaration * inSourcePtr) :
GALGAS_astDeclaration (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_structDeclaration) ;
}

//-----------------------------------------------------------------------------*

GALGAS_structDeclaration GALGAS_structDeclaration::constructor_new (const GALGAS_bool & inAttribute_mUserDefined,
                                                                    const GALGAS_lstring & inAttribute_mStructTypeName,
                                                                    const GALGAS_structFieldASTList & inAttribute_mFieldList
                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_structDeclaration result ;
  if (inAttribute_mUserDefined.isValid () && inAttribute_mStructTypeName.isValid () && inAttribute_mFieldList.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_structDeclaration (inAttribute_mUserDefined, inAttribute_mStructTypeName, inAttribute_mFieldList COMMA_THERE)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_structDeclaration::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_structDeclaration * p = (cPtr_structDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_structDeclaration) ;
    cPtr_structDeclaration * r = NULL ;
    macroMyNew (r, cPtr_structDeclaration (p->mAttribute_mUserDefined, p->mAttribute_mStructTypeName, p->mAttribute_mFieldList COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_structDeclaration::reader_mStructTypeName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_structDeclaration * p = (const cPtr_structDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_structDeclaration) ;
    result = p->mAttribute_mStructTypeName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cPtr_structDeclaration::reader_mStructTypeName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mStructTypeName ;
}

//-----------------------------------------------------------------------------*

GALGAS_structFieldASTList GALGAS_structDeclaration::reader_mFieldList (UNUSED_LOCATION_ARGS) const {
  GALGAS_structFieldASTList result ;
  if (NULL != mObjectPtr) {
    const cPtr_structDeclaration * p = (const cPtr_structDeclaration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_structDeclaration) ;
    result = p->mAttribute_mFieldList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_structFieldASTList cPtr_structDeclaration::reader_mFieldList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mFieldList ;
}

//-----------------------------------------------------------------------------*
//                 Pointer class for @structDeclaration class                  *
//-----------------------------------------------------------------------------*

cPtr_structDeclaration::cPtr_structDeclaration (const GALGAS_bool & in_mUserDefined,
                                                const GALGAS_lstring & in_mStructTypeName,
                                                const GALGAS_structFieldASTList & in_mFieldList
                                                COMMA_LOCATION_ARGS) :
cPtr_astDeclaration (in_mUserDefined COMMA_THERE),
mAttribute_mStructTypeName (in_mStructTypeName),
mAttribute_mFieldList (in_mFieldList) {
}

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_structDeclaration::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_structDeclaration ;
}

void cPtr_structDeclaration::description (C_String & ioString,
                                          const int32_t inIndentation) const {
  ioString << "[@structDeclaration:" ;
  mAttribute_mUserDefined.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mStructTypeName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mFieldList.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                           @structDeclaration type                           *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_structDeclaration ("structDeclaration",
                                          & kTypeDescriptor_GALGAS_astDeclaration) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_structDeclaration::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_structDeclaration ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_structDeclaration::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_structDeclaration (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_structDeclaration GALGAS_structDeclaration::extractObject (const GALGAS_object & inObject,
                                                                  C_Compiler * inCompiler
                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_structDeclaration result ;
  const GALGAS_structDeclaration * p = (const GALGAS_structDeclaration *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_structDeclaration *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("structDeclaration", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*



typeComparisonResult GALGAS_multiValuedBindingBoundModel::objectCompare (const GALGAS_multiValuedBindingBoundModel & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundModel::GALGAS_multiValuedBindingBoundModel (void) :
AC_GALGAS_class () {
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundModel::GALGAS_multiValuedBindingBoundModel (const cPtr_multiValuedBindingBoundModel * inSourcePtr) :
AC_GALGAS_class (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_multiValuedBindingBoundModel) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_multiValuedBindingBoundModel::reader_mPropertyName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_multiValuedBindingBoundModel * p = (const cPtr_multiValuedBindingBoundModel *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_multiValuedBindingBoundModel) ;
    result = p->mAttribute_mPropertyName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cPtr_multiValuedBindingBoundModel::reader_mPropertyName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mPropertyName ;
}

//-----------------------------------------------------------------------------*
//            Pointer class for @multiValuedBindingBoundModel class            *
//-----------------------------------------------------------------------------*

cPtr_multiValuedBindingBoundModel::cPtr_multiValuedBindingBoundModel (const GALGAS_lstring & in_mPropertyName
                                                                      COMMA_LOCATION_ARGS) :
acPtr_class (THERE),
mAttribute_mPropertyName (in_mPropertyName) {
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                     @multiValuedBindingBoundModel type                      *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_multiValuedBindingBoundModel ("multiValuedBindingBoundModel",
                                                     NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_multiValuedBindingBoundModel::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_multiValuedBindingBoundModel ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_multiValuedBindingBoundModel::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_multiValuedBindingBoundModel (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundModel GALGAS_multiValuedBindingBoundModel::extractObject (const GALGAS_object & inObject,
                                                                                        C_Compiler * inCompiler
                                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_multiValuedBindingBoundModel result ;
  const GALGAS_multiValuedBindingBoundModel * p = (const GALGAS_multiValuedBindingBoundModel *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_multiValuedBindingBoundModel *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("multiValuedBindingBoundModel", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*

typeComparisonResult cPtr_multiValuedBindingBoundToController::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_multiValuedBindingBoundToController * p = (const cPtr_multiValuedBindingBoundToController *) inOperandPtr ;
  macroValidSharedObject (p, cPtr_multiValuedBindingBoundToController) ;
  if (kOperandEqual == result) {
    result = mAttribute_mPropertyName.objectCompare (p->mAttribute_mPropertyName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mControllerName.objectCompare (p->mAttribute_mControllerName) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*


typeComparisonResult GALGAS_multiValuedBindingBoundToController::objectCompare (const GALGAS_multiValuedBindingBoundToController & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToController::GALGAS_multiValuedBindingBoundToController (void) :
GALGAS_multiValuedBindingBoundModel () {
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToController GALGAS_multiValuedBindingBoundToController::constructor_default (LOCATION_ARGS) {
  return GALGAS_multiValuedBindingBoundToController::constructor_new (GALGAS_lstring::constructor_default (HERE),
                                                                      GALGAS_lstring::constructor_default (HERE)
                                                                      COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToController::GALGAS_multiValuedBindingBoundToController (const cPtr_multiValuedBindingBoundToController * inSourcePtr) :
GALGAS_multiValuedBindingBoundModel (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_multiValuedBindingBoundToController) ;
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToController GALGAS_multiValuedBindingBoundToController::constructor_new (const GALGAS_lstring & inAttribute_mPropertyName,
                                                                                                        const GALGAS_lstring & inAttribute_mControllerName
                                                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_multiValuedBindingBoundToController result ;
  if (inAttribute_mPropertyName.isValid () && inAttribute_mControllerName.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_multiValuedBindingBoundToController (inAttribute_mPropertyName, inAttribute_mControllerName COMMA_THERE)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_multiValuedBindingBoundToController::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_multiValuedBindingBoundToController * p = (cPtr_multiValuedBindingBoundToController *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_multiValuedBindingBoundToController) ;
    cPtr_multiValuedBindingBoundToController * r = NULL ;
    macroMyNew (r, cPtr_multiValuedBindingBoundToController (p->mAttribute_mPropertyName, p->mAttribute_mControllerName COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_multiValuedBindingBoundToController::reader_mControllerName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_multiValuedBindingBoundToController * p = (const cPtr_multiValuedBindingBoundToController *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_multiValuedBindingBoundToController) ;
    result = p->mAttribute_mControllerName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cPtr_multiValuedBindingBoundToController::reader_mControllerName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mControllerName ;
}

//-----------------------------------------------------------------------------*
//        Pointer class for @multiValuedBindingBoundToController class         *
//-----------------------------------------------------------------------------*

cPtr_multiValuedBindingBoundToController::cPtr_multiValuedBindingBoundToController (const GALGAS_lstring & in_mPropertyName,
                                                                                    const GALGAS_lstring & in_mControllerName
                                                                                    COMMA_LOCATION_ARGS) :
cPtr_multiValuedBindingBoundModel (in_mPropertyName COMMA_THERE),
mAttribute_mControllerName (in_mControllerName) {
}

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_multiValuedBindingBoundToController::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_multiValuedBindingBoundToController ;
}

void cPtr_multiValuedBindingBoundToController::description (C_String & ioString,
                                                            const int32_t inIndentation) const {
  ioString << "[@multiValuedBindingBoundToController:" ;
  mAttribute_mPropertyName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mControllerName.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                  @multiValuedBindingBoundToController type                  *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_multiValuedBindingBoundToController ("multiValuedBindingBoundToController",
                                                            & kTypeDescriptor_GALGAS_multiValuedBindingBoundModel) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_multiValuedBindingBoundToController::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_multiValuedBindingBoundToController ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_multiValuedBindingBoundToController::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_multiValuedBindingBoundToController (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToController GALGAS_multiValuedBindingBoundToController::extractObject (const GALGAS_object & inObject,
                                                                                                      C_Compiler * inCompiler
                                                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_multiValuedBindingBoundToController result ;
  const GALGAS_multiValuedBindingBoundToController * p = (const GALGAS_multiValuedBindingBoundToController *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_multiValuedBindingBoundToController *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("multiValuedBindingBoundToController", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*

typeComparisonResult cPtr_multiValuedBindingBoundToControllerSelection::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_multiValuedBindingBoundToControllerSelection * p = (const cPtr_multiValuedBindingBoundToControllerSelection *) inOperandPtr ;
  macroValidSharedObject (p, cPtr_multiValuedBindingBoundToControllerSelection) ;
  if (kOperandEqual == result) {
    result = mAttribute_mPropertyName.objectCompare (p->mAttribute_mPropertyName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mControllerName.objectCompare (p->mAttribute_mControllerName) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*


typeComparisonResult GALGAS_multiValuedBindingBoundToControllerSelection::objectCompare (const GALGAS_multiValuedBindingBoundToControllerSelection & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToControllerSelection::GALGAS_multiValuedBindingBoundToControllerSelection (void) :
GALGAS_multiValuedBindingBoundModel () {
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToControllerSelection GALGAS_multiValuedBindingBoundToControllerSelection::constructor_default (LOCATION_ARGS) {
  return GALGAS_multiValuedBindingBoundToControllerSelection::constructor_new (GALGAS_lstring::constructor_default (HERE),
                                                                               GALGAS_lstring::constructor_default (HERE)
                                                                               COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToControllerSelection::GALGAS_multiValuedBindingBoundToControllerSelection (const cPtr_multiValuedBindingBoundToControllerSelection * inSourcePtr) :
GALGAS_multiValuedBindingBoundModel (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_multiValuedBindingBoundToControllerSelection) ;
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToControllerSelection GALGAS_multiValuedBindingBoundToControllerSelection::constructor_new (const GALGAS_lstring & inAttribute_mPropertyName,
                                                                                                                          const GALGAS_lstring & inAttribute_mControllerName
                                                                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_multiValuedBindingBoundToControllerSelection result ;
  if (inAttribute_mPropertyName.isValid () && inAttribute_mControllerName.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_multiValuedBindingBoundToControllerSelection (inAttribute_mPropertyName, inAttribute_mControllerName COMMA_THERE)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_multiValuedBindingBoundToControllerSelection::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_multiValuedBindingBoundToControllerSelection * p = (cPtr_multiValuedBindingBoundToControllerSelection *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_multiValuedBindingBoundToControllerSelection) ;
    cPtr_multiValuedBindingBoundToControllerSelection * r = NULL ;
    macroMyNew (r, cPtr_multiValuedBindingBoundToControllerSelection (p->mAttribute_mPropertyName, p->mAttribute_mControllerName COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_multiValuedBindingBoundToControllerSelection::reader_mControllerName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_multiValuedBindingBoundToControllerSelection * p = (const cPtr_multiValuedBindingBoundToControllerSelection *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_multiValuedBindingBoundToControllerSelection) ;
    result = p->mAttribute_mControllerName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cPtr_multiValuedBindingBoundToControllerSelection::reader_mControllerName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mControllerName ;
}

//-----------------------------------------------------------------------------*
//    Pointer class for @multiValuedBindingBoundToControllerSelection class    *
//-----------------------------------------------------------------------------*

cPtr_multiValuedBindingBoundToControllerSelection::cPtr_multiValuedBindingBoundToControllerSelection (const GALGAS_lstring & in_mPropertyName,
                                                                                                      const GALGAS_lstring & in_mControllerName
                                                                                                      COMMA_LOCATION_ARGS) :
cPtr_multiValuedBindingBoundModel (in_mPropertyName COMMA_THERE),
mAttribute_mControllerName (in_mControllerName) {
}

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_multiValuedBindingBoundToControllerSelection::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_multiValuedBindingBoundToControllerSelection ;
}

void cPtr_multiValuedBindingBoundToControllerSelection::description (C_String & ioString,
                                                                     const int32_t inIndentation) const {
  ioString << "[@multiValuedBindingBoundToControllerSelection:" ;
  mAttribute_mPropertyName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mControllerName.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//             @multiValuedBindingBoundToControllerSelection type              *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_multiValuedBindingBoundToControllerSelection ("multiValuedBindingBoundToControllerSelection",
                                                                     & kTypeDescriptor_GALGAS_multiValuedBindingBoundModel) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_multiValuedBindingBoundToControllerSelection::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_multiValuedBindingBoundToControllerSelection ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_multiValuedBindingBoundToControllerSelection::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_multiValuedBindingBoundToControllerSelection (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToControllerSelection GALGAS_multiValuedBindingBoundToControllerSelection::extractObject (const GALGAS_object & inObject,
                                                                                                                        C_Compiler * inCompiler
                                                                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_multiValuedBindingBoundToControllerSelection result ;
  const GALGAS_multiValuedBindingBoundToControllerSelection * p = (const GALGAS_multiValuedBindingBoundToControllerSelection *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_multiValuedBindingBoundToControllerSelection *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("multiValuedBindingBoundToControllerSelection", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*

typeComparisonResult cPtr_multiValuedBindingBoundToPref::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_multiValuedBindingBoundToPref * p = (const cPtr_multiValuedBindingBoundToPref *) inOperandPtr ;
  macroValidSharedObject (p, cPtr_multiValuedBindingBoundToPref) ;
  if (kOperandEqual == result) {
    result = mAttribute_mPropertyName.objectCompare (p->mAttribute_mPropertyName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mPreferenceName.objectCompare (p->mAttribute_mPreferenceName) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*


typeComparisonResult GALGAS_multiValuedBindingBoundToPref::objectCompare (const GALGAS_multiValuedBindingBoundToPref & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToPref::GALGAS_multiValuedBindingBoundToPref (void) :
GALGAS_multiValuedBindingBoundModel () {
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToPref GALGAS_multiValuedBindingBoundToPref::constructor_default (LOCATION_ARGS) {
  return GALGAS_multiValuedBindingBoundToPref::constructor_new (GALGAS_lstring::constructor_default (HERE),
                                                                GALGAS_lstring::constructor_default (HERE)
                                                                COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToPref::GALGAS_multiValuedBindingBoundToPref (const cPtr_multiValuedBindingBoundToPref * inSourcePtr) :
GALGAS_multiValuedBindingBoundModel (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_multiValuedBindingBoundToPref) ;
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToPref GALGAS_multiValuedBindingBoundToPref::constructor_new (const GALGAS_lstring & inAttribute_mPropertyName,
                                                                                            const GALGAS_lstring & inAttribute_mPreferenceName
                                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_multiValuedBindingBoundToPref result ;
  if (inAttribute_mPropertyName.isValid () && inAttribute_mPreferenceName.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_multiValuedBindingBoundToPref (inAttribute_mPropertyName, inAttribute_mPreferenceName COMMA_THERE)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_multiValuedBindingBoundToPref::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_multiValuedBindingBoundToPref * p = (cPtr_multiValuedBindingBoundToPref *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_multiValuedBindingBoundToPref) ;
    cPtr_multiValuedBindingBoundToPref * r = NULL ;
    macroMyNew (r, cPtr_multiValuedBindingBoundToPref (p->mAttribute_mPropertyName, p->mAttribute_mPreferenceName COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_multiValuedBindingBoundToPref::reader_mPreferenceName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_multiValuedBindingBoundToPref * p = (const cPtr_multiValuedBindingBoundToPref *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_multiValuedBindingBoundToPref) ;
    result = p->mAttribute_mPreferenceName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cPtr_multiValuedBindingBoundToPref::reader_mPreferenceName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mPreferenceName ;
}

//-----------------------------------------------------------------------------*
//           Pointer class for @multiValuedBindingBoundToPref class            *
//-----------------------------------------------------------------------------*

cPtr_multiValuedBindingBoundToPref::cPtr_multiValuedBindingBoundToPref (const GALGAS_lstring & in_mPropertyName,
                                                                        const GALGAS_lstring & in_mPreferenceName
                                                                        COMMA_LOCATION_ARGS) :
cPtr_multiValuedBindingBoundModel (in_mPropertyName COMMA_THERE),
mAttribute_mPreferenceName (in_mPreferenceName) {
}

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_multiValuedBindingBoundToPref::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_multiValuedBindingBoundToPref ;
}

void cPtr_multiValuedBindingBoundToPref::description (C_String & ioString,
                                                      const int32_t inIndentation) const {
  ioString << "[@multiValuedBindingBoundToPref:" ;
  mAttribute_mPropertyName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mPreferenceName.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                     @multiValuedBindingBoundToPref type                     *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_multiValuedBindingBoundToPref ("multiValuedBindingBoundToPref",
                                                      & kTypeDescriptor_GALGAS_multiValuedBindingBoundModel) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_multiValuedBindingBoundToPref::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_multiValuedBindingBoundToPref ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_multiValuedBindingBoundToPref::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_multiValuedBindingBoundToPref (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToPref GALGAS_multiValuedBindingBoundToPref::extractObject (const GALGAS_object & inObject,
                                                                                          C_Compiler * inCompiler
                                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_multiValuedBindingBoundToPref result ;
  const GALGAS_multiValuedBindingBoundToPref * p = (const GALGAS_multiValuedBindingBoundToPref *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_multiValuedBindingBoundToPref *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("multiValuedBindingBoundToPref", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*

typeComparisonResult cPtr_multiValuedBindingBoundToRoot::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_multiValuedBindingBoundToRoot * p = (const cPtr_multiValuedBindingBoundToRoot *) inOperandPtr ;
  macroValidSharedObject (p, cPtr_multiValuedBindingBoundToRoot) ;
  if (kOperandEqual == result) {
    result = mAttribute_mPropertyName.objectCompare (p->mAttribute_mPropertyName) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*


typeComparisonResult GALGAS_multiValuedBindingBoundToRoot::objectCompare (const GALGAS_multiValuedBindingBoundToRoot & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToRoot::GALGAS_multiValuedBindingBoundToRoot (void) :
GALGAS_multiValuedBindingBoundModel () {
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToRoot GALGAS_multiValuedBindingBoundToRoot::constructor_default (LOCATION_ARGS) {
  return GALGAS_multiValuedBindingBoundToRoot::constructor_new (GALGAS_lstring::constructor_default (HERE)
                                                                COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToRoot::GALGAS_multiValuedBindingBoundToRoot (const cPtr_multiValuedBindingBoundToRoot * inSourcePtr) :
GALGAS_multiValuedBindingBoundModel (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_multiValuedBindingBoundToRoot) ;
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToRoot GALGAS_multiValuedBindingBoundToRoot::constructor_new (const GALGAS_lstring & inAttribute_mPropertyName
                                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_multiValuedBindingBoundToRoot result ;
  if (inAttribute_mPropertyName.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_multiValuedBindingBoundToRoot (inAttribute_mPropertyName COMMA_THERE)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_multiValuedBindingBoundToRoot::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_multiValuedBindingBoundToRoot * p = (cPtr_multiValuedBindingBoundToRoot *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_multiValuedBindingBoundToRoot) ;
    cPtr_multiValuedBindingBoundToRoot * r = NULL ;
    macroMyNew (r, cPtr_multiValuedBindingBoundToRoot (p->mAttribute_mPropertyName COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//-----------------------------------------------------------------------------*
//           Pointer class for @multiValuedBindingBoundToRoot class            *
//-----------------------------------------------------------------------------*

cPtr_multiValuedBindingBoundToRoot::cPtr_multiValuedBindingBoundToRoot (const GALGAS_lstring & in_mPropertyName
                                                                        COMMA_LOCATION_ARGS) :
cPtr_multiValuedBindingBoundModel (in_mPropertyName COMMA_THERE) {
}

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_multiValuedBindingBoundToRoot::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_multiValuedBindingBoundToRoot ;
}

void cPtr_multiValuedBindingBoundToRoot::description (C_String & ioString,
                                                      const int32_t inIndentation) const {
  ioString << "[@multiValuedBindingBoundToRoot:" ;
  mAttribute_mPropertyName.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                     @multiValuedBindingBoundToRoot type                     *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_multiValuedBindingBoundToRoot ("multiValuedBindingBoundToRoot",
                                                      & kTypeDescriptor_GALGAS_multiValuedBindingBoundModel) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_multiValuedBindingBoundToRoot::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_multiValuedBindingBoundToRoot ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_multiValuedBindingBoundToRoot::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_multiValuedBindingBoundToRoot (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToRoot GALGAS_multiValuedBindingBoundToRoot::extractObject (const GALGAS_object & inObject,
                                                                                          C_Compiler * inCompiler
                                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_multiValuedBindingBoundToRoot result ;
  const GALGAS_multiValuedBindingBoundToRoot * p = (const GALGAS_multiValuedBindingBoundToRoot *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_multiValuedBindingBoundToRoot *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("multiValuedBindingBoundToRoot", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*

typeComparisonResult cPtr_multiValuedBindingBoundToSelf::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_multiValuedBindingBoundToSelf * p = (const cPtr_multiValuedBindingBoundToSelf *) inOperandPtr ;
  macroValidSharedObject (p, cPtr_multiValuedBindingBoundToSelf) ;
  if (kOperandEqual == result) {
    result = mAttribute_mPropertyName.objectCompare (p->mAttribute_mPropertyName) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*


typeComparisonResult GALGAS_multiValuedBindingBoundToSelf::objectCompare (const GALGAS_multiValuedBindingBoundToSelf & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToSelf::GALGAS_multiValuedBindingBoundToSelf (void) :
GALGAS_multiValuedBindingBoundModel () {
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToSelf GALGAS_multiValuedBindingBoundToSelf::constructor_default (LOCATION_ARGS) {
  return GALGAS_multiValuedBindingBoundToSelf::constructor_new (GALGAS_lstring::constructor_default (HERE)
                                                                COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToSelf::GALGAS_multiValuedBindingBoundToSelf (const cPtr_multiValuedBindingBoundToSelf * inSourcePtr) :
GALGAS_multiValuedBindingBoundModel (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_multiValuedBindingBoundToSelf) ;
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToSelf GALGAS_multiValuedBindingBoundToSelf::constructor_new (const GALGAS_lstring & inAttribute_mPropertyName
                                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_multiValuedBindingBoundToSelf result ;
  if (inAttribute_mPropertyName.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_multiValuedBindingBoundToSelf (inAttribute_mPropertyName COMMA_THERE)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_multiValuedBindingBoundToSelf::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_multiValuedBindingBoundToSelf * p = (cPtr_multiValuedBindingBoundToSelf *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_multiValuedBindingBoundToSelf) ;
    cPtr_multiValuedBindingBoundToSelf * r = NULL ;
    macroMyNew (r, cPtr_multiValuedBindingBoundToSelf (p->mAttribute_mPropertyName COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//-----------------------------------------------------------------------------*
//           Pointer class for @multiValuedBindingBoundToSelf class            *
//-----------------------------------------------------------------------------*

cPtr_multiValuedBindingBoundToSelf::cPtr_multiValuedBindingBoundToSelf (const GALGAS_lstring & in_mPropertyName
                                                                        COMMA_LOCATION_ARGS) :
cPtr_multiValuedBindingBoundModel (in_mPropertyName COMMA_THERE) {
}

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_multiValuedBindingBoundToSelf::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_multiValuedBindingBoundToSelf ;
}

void cPtr_multiValuedBindingBoundToSelf::description (C_String & ioString,
                                                      const int32_t inIndentation) const {
  ioString << "[@multiValuedBindingBoundToSelf:" ;
  mAttribute_mPropertyName.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                     @multiValuedBindingBoundToSelf type                     *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_multiValuedBindingBoundToSelf ("multiValuedBindingBoundToSelf",
                                                      & kTypeDescriptor_GALGAS_multiValuedBindingBoundModel) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_multiValuedBindingBoundToSelf::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_multiValuedBindingBoundToSelf ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_multiValuedBindingBoundToSelf::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_multiValuedBindingBoundToSelf (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundToSelf GALGAS_multiValuedBindingBoundToSelf::extractObject (const GALGAS_object & inObject,
                                                                                          C_Compiler * inCompiler
                                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_multiValuedBindingBoundToSelf result ;
  const GALGAS_multiValuedBindingBoundToSelf * p = (const GALGAS_multiValuedBindingBoundToSelf *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_multiValuedBindingBoundToSelf *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("multiValuedBindingBoundToSelf", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//                      Category Reader '@typeKind name'                       *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_string categoryReader_name (const GALGAS_typeKind & inObject,
                                   C_Compiler * /* inCompiler */
                                   COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  const GALGAS_typeKind temp_0 = inObject ;
  if (temp_0.isValid ()) {
    switch (temp_0.enumValue ()) {
    case GALGAS_typeKind::kNotBuilt:
      break ;
    case GALGAS_typeKind::kEnum_classType: {
      result_outResult = GALGAS_string ("classType") ;
      } break ;
    case GALGAS_typeKind::kEnum_controllerClassType: {
      result_outResult = GALGAS_string ("controllerClassType") ;
      } break ;
    case GALGAS_typeKind::kEnum_documentType: {
      result_outResult = GALGAS_string ("documentType") ;
      } break ;
    case GALGAS_typeKind::kEnum_entityType: {
      result_outResult = GALGAS_string ("entityType") ;
      } break ;
    case GALGAS_typeKind::kEnum_enumType: {
      result_outResult = GALGAS_string ("enumType") ;
      } break ;
    case GALGAS_typeKind::kEnum_nibClassType: {
      result_outResult = GALGAS_string ("nibClassType") ;
      } break ;
    case GALGAS_typeKind::kEnum_outletClassType: {
      result_outResult = GALGAS_string ("outletClassType") ;
      } break ;
    case GALGAS_typeKind::kEnum_preferencesType: {
      result_outResult = GALGAS_string ("preferencesType") ;
      } break ;
    case GALGAS_typeKind::kEnum_protocolType: {
      result_outResult = GALGAS_string ("protocolType") ;
      } break ;
    case GALGAS_typeKind::kEnum_structType: {
      result_outResult = GALGAS_string ("structType") ;
      } break ;
    case GALGAS_typeKind::kEnum_boolType: {
      result_outResult = GALGAS_string ("boolType") ;
      } break ;
    case GALGAS_typeKind::kEnum_integerType: {
      result_outResult = GALGAS_string ("integerType") ;
      } break ;
    case GALGAS_typeKind::kEnum_uintegerType: {
      result_outResult = GALGAS_string ("uintegerType") ;
      } break ;
    case GALGAS_typeKind::kEnum_doubleType: {
      result_outResult = GALGAS_string ("doubleType") ;
      } break ;
    case GALGAS_typeKind::kEnum_stringType: {
      result_outResult = GALGAS_string ("stringType") ;
      } break ;
    case GALGAS_typeKind::kEnum_colorType: {
      result_outResult = GALGAS_string ("colorType") ;
      } break ;
    case GALGAS_typeKind::kEnum_dataType: {
      result_outResult = GALGAS_string ("dataType") ;
      } break ;
    case GALGAS_typeKind::kEnum_dateType: {
      result_outResult = GALGAS_string ("dateType") ;
      } break ;
    case GALGAS_typeKind::kEnum_fontType: {
      result_outResult = GALGAS_string ("fontType") ;
      } break ;
    case GALGAS_typeKind::kEnum_imageType: {
      result_outResult = GALGAS_string ("imageType") ;
      } break ;
    case GALGAS_typeKind::kEnum_menuType: {
      result_outResult = GALGAS_string ("menuType") ;
      } break ;
    case GALGAS_typeKind::kEnum_bezierPathType: {
      result_outResult = GALGAS_string ("bezierPathType") ;
      } break ;
    }
  }
//---
  return result_outResult ;
}




//-----------------------------------------------------------------------------*

GALGAS_astDeclarationList_2D_element::GALGAS_astDeclarationList_2D_element (void) :
mAttribute_mDeclaration () {
}

//-----------------------------------------------------------------------------*

GALGAS_astDeclarationList_2D_element::~ GALGAS_astDeclarationList_2D_element (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_astDeclarationList_2D_element::GALGAS_astDeclarationList_2D_element (const GALGAS_astDeclaration & inOperand0) :
mAttribute_mDeclaration (inOperand0) {
}

//-----------------------------------------------------------------------------*

GALGAS_astDeclarationList_2D_element GALGAS_astDeclarationList_2D_element::constructor_new (const GALGAS_astDeclaration & inOperand0 
                                                                                            COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_astDeclarationList_2D_element result ;
  if (inOperand0.isValid ()) {
    result = GALGAS_astDeclarationList_2D_element (inOperand0) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_astDeclarationList_2D_element::objectCompare (const GALGAS_astDeclarationList_2D_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mDeclaration.objectCompare (inOperand.mAttribute_mDeclaration) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_astDeclarationList_2D_element::isValid (void) const {
  return mAttribute_mDeclaration.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_astDeclarationList_2D_element::drop (void) {
  mAttribute_mDeclaration.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_astDeclarationList_2D_element::description (C_String & ioString,
                                                        const int32_t inIndentation) const {
  ioString << "<struct @astDeclarationList-element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mDeclaration.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_astDeclaration GALGAS_astDeclarationList_2D_element::reader_mDeclaration (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mDeclaration ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                      @astDeclarationList-element type                       *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_astDeclarationList_2D_element ("astDeclarationList-element",
                                                      NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_astDeclarationList_2D_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_astDeclarationList_2D_element ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_astDeclarationList_2D_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_astDeclarationList_2D_element (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_astDeclarationList_2D_element GALGAS_astDeclarationList_2D_element::extractObject (const GALGAS_object & inObject,
                                                                                          C_Compiler * inCompiler
                                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_astDeclarationList_2D_element result ;
  const GALGAS_astDeclarationList_2D_element * p = (const GALGAS_astDeclarationList_2D_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_astDeclarationList_2D_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("astDeclarationList-element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeList_2D_element::GALGAS_attributeList_2D_element (void) :
mAttribute_mAttributeTypeName (),
mAttribute_mAttributeName (),
mAttribute_mDefaultValue () {
}

//-----------------------------------------------------------------------------*

GALGAS_attributeList_2D_element::~ GALGAS_attributeList_2D_element (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_attributeList_2D_element::GALGAS_attributeList_2D_element (const GALGAS_lstring & inOperand0,
                                                                  const GALGAS_lstring & inOperand1,
                                                                  const GALGAS_abstractDefaultValue & inOperand2) :
mAttribute_mAttributeTypeName (inOperand0),
mAttribute_mAttributeName (inOperand1),
mAttribute_mDefaultValue (inOperand2) {
}

//-----------------------------------------------------------------------------*

GALGAS_attributeList_2D_element GALGAS_attributeList_2D_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                                  const GALGAS_lstring & inOperand1,
                                                                                  const GALGAS_abstractDefaultValue & inOperand2 
                                                                                  COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_attributeList_2D_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result = GALGAS_attributeList_2D_element (inOperand0, inOperand1, inOperand2) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_attributeList_2D_element::objectCompare (const GALGAS_attributeList_2D_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mAttributeTypeName.objectCompare (inOperand.mAttribute_mAttributeTypeName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mAttributeName.objectCompare (inOperand.mAttribute_mAttributeName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mDefaultValue.objectCompare (inOperand.mAttribute_mDefaultValue) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_attributeList_2D_element::isValid (void) const {
  return mAttribute_mAttributeTypeName.isValid () && mAttribute_mAttributeName.isValid () && mAttribute_mDefaultValue.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_attributeList_2D_element::drop (void) {
  mAttribute_mAttributeTypeName.drop () ;
  mAttribute_mAttributeName.drop () ;
  mAttribute_mDefaultValue.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_attributeList_2D_element::description (C_String & ioString,
                                                   const int32_t inIndentation) const {
  ioString << "<struct @attributeList-element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mAttributeTypeName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mAttributeName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mDefaultValue.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_attributeList_2D_element::reader_mAttributeTypeName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mAttributeTypeName ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_attributeList_2D_element::reader_mAttributeName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mAttributeName ;
}

//-----------------------------------------------------------------------------*

GALGAS_abstractDefaultValue GALGAS_attributeList_2D_element::reader_mDefaultValue (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mDefaultValue ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                         @attributeList-element type                         *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_attributeList_2D_element ("attributeList-element",
                                                 NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_attributeList_2D_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_attributeList_2D_element ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_attributeList_2D_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_attributeList_2D_element (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeList_2D_element GALGAS_attributeList_2D_element::extractObject (const GALGAS_object & inObject,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_attributeList_2D_element result ;
  const GALGAS_attributeList_2D_element * p = (const GALGAS_attributeList_2D_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_attributeList_2D_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("attributeList-element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_relationshipList_2D_element::GALGAS_relationshipList_2D_element (void) :
mAttribute_mIsToMany (),
mAttribute_mDestinationEntityName (),
mAttribute_mRelationshipName (),
mAttribute_mInverseRelationshipName (),
mAttribute_mInverseRelationIsToMany (),
mAttribute_mDeleteRule () {
}

//-----------------------------------------------------------------------------*

GALGAS_relationshipList_2D_element::~ GALGAS_relationshipList_2D_element (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_relationshipList_2D_element::GALGAS_relationshipList_2D_element (const GALGAS_bool & inOperand0,
                                                                        const GALGAS_lstring & inOperand1,
                                                                        const GALGAS_lstring & inOperand2,
                                                                        const GALGAS_lstring & inOperand3,
                                                                        const GALGAS_bool & inOperand4,
                                                                        const GALGAS_deleteRuleEnum & inOperand5) :
mAttribute_mIsToMany (inOperand0),
mAttribute_mDestinationEntityName (inOperand1),
mAttribute_mRelationshipName (inOperand2),
mAttribute_mInverseRelationshipName (inOperand3),
mAttribute_mInverseRelationIsToMany (inOperand4),
mAttribute_mDeleteRule (inOperand5) {
}

//-----------------------------------------------------------------------------*

GALGAS_relationshipList_2D_element GALGAS_relationshipList_2D_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_relationshipList_2D_element (GALGAS_bool::constructor_default (HERE),
                                             GALGAS_lstring::constructor_default (HERE),
                                             GALGAS_lstring::constructor_default (HERE),
                                             GALGAS_lstring::constructor_default (HERE),
                                             GALGAS_bool::constructor_default (HERE),
                                             GALGAS_deleteRuleEnum::constructor_nullifyDeleteRule (HERE)) ;
}

//-----------------------------------------------------------------------------*

GALGAS_relationshipList_2D_element GALGAS_relationshipList_2D_element::constructor_new (const GALGAS_bool & inOperand0,
                                                                                        const GALGAS_lstring & inOperand1,
                                                                                        const GALGAS_lstring & inOperand2,
                                                                                        const GALGAS_lstring & inOperand3,
                                                                                        const GALGAS_bool & inOperand4,
                                                                                        const GALGAS_deleteRuleEnum & inOperand5 
                                                                                        COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_relationshipList_2D_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid ()) {
    result = GALGAS_relationshipList_2D_element (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_relationshipList_2D_element::objectCompare (const GALGAS_relationshipList_2D_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mIsToMany.objectCompare (inOperand.mAttribute_mIsToMany) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mDestinationEntityName.objectCompare (inOperand.mAttribute_mDestinationEntityName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mRelationshipName.objectCompare (inOperand.mAttribute_mRelationshipName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mInverseRelationshipName.objectCompare (inOperand.mAttribute_mInverseRelationshipName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mInverseRelationIsToMany.objectCompare (inOperand.mAttribute_mInverseRelationIsToMany) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mDeleteRule.objectCompare (inOperand.mAttribute_mDeleteRule) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_relationshipList_2D_element::isValid (void) const {
  return mAttribute_mIsToMany.isValid () && mAttribute_mDestinationEntityName.isValid () && mAttribute_mRelationshipName.isValid () && mAttribute_mInverseRelationshipName.isValid () && mAttribute_mInverseRelationIsToMany.isValid () && mAttribute_mDeleteRule.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_relationshipList_2D_element::drop (void) {
  mAttribute_mIsToMany.drop () ;
  mAttribute_mDestinationEntityName.drop () ;
  mAttribute_mRelationshipName.drop () ;
  mAttribute_mInverseRelationshipName.drop () ;
  mAttribute_mInverseRelationIsToMany.drop () ;
  mAttribute_mDeleteRule.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_relationshipList_2D_element::description (C_String & ioString,
                                                      const int32_t inIndentation) const {
  ioString << "<struct @relationshipList-element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mIsToMany.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mDestinationEntityName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mRelationshipName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mInverseRelationshipName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mInverseRelationIsToMany.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mDeleteRule.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_bool GALGAS_relationshipList_2D_element::reader_mIsToMany (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mIsToMany ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_relationshipList_2D_element::reader_mDestinationEntityName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mDestinationEntityName ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_relationshipList_2D_element::reader_mRelationshipName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mRelationshipName ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_relationshipList_2D_element::reader_mInverseRelationshipName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mInverseRelationshipName ;
}

//-----------------------------------------------------------------------------*

GALGAS_bool GALGAS_relationshipList_2D_element::reader_mInverseRelationIsToMany (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mInverseRelationIsToMany ;
}

//-----------------------------------------------------------------------------*

GALGAS_deleteRuleEnum GALGAS_relationshipList_2D_element::reader_mDeleteRule (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mDeleteRule ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                       @relationshipList-element type                        *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_relationshipList_2D_element ("relationshipList-element",
                                                    NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_relationshipList_2D_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_relationshipList_2D_element ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_relationshipList_2D_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_relationshipList_2D_element (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_relationshipList_2D_element GALGAS_relationshipList_2D_element::extractObject (const GALGAS_object & inObject,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_relationshipList_2D_element result ;
  const GALGAS_relationshipList_2D_element * p = (const GALGAS_relationshipList_2D_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_relationshipList_2D_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("relationshipList-element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_dependanceList_2D_element::GALGAS_dependanceList_2D_element (void) :
mAttribute_mDependency () {
}

//-----------------------------------------------------------------------------*

GALGAS_dependanceList_2D_element::~ GALGAS_dependanceList_2D_element (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_dependanceList_2D_element::GALGAS_dependanceList_2D_element (const GALGAS_abstractTransientDependency & inOperand0) :
mAttribute_mDependency (inOperand0) {
}

//-----------------------------------------------------------------------------*

GALGAS_dependanceList_2D_element GALGAS_dependanceList_2D_element::constructor_new (const GALGAS_abstractTransientDependency & inOperand0 
                                                                                    COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_dependanceList_2D_element result ;
  if (inOperand0.isValid ()) {
    result = GALGAS_dependanceList_2D_element (inOperand0) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_dependanceList_2D_element::objectCompare (const GALGAS_dependanceList_2D_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mDependency.objectCompare (inOperand.mAttribute_mDependency) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_dependanceList_2D_element::isValid (void) const {
  return mAttribute_mDependency.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_dependanceList_2D_element::drop (void) {
  mAttribute_mDependency.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_dependanceList_2D_element::description (C_String & ioString,
                                                    const int32_t inIndentation) const {
  ioString << "<struct @dependanceList-element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mDependency.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_abstractTransientDependency GALGAS_dependanceList_2D_element::reader_mDependency (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mDependency ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                        @dependanceList-element type                         *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_dependanceList_2D_element ("dependanceList-element",
                                                  NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_dependanceList_2D_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_dependanceList_2D_element ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_dependanceList_2D_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_dependanceList_2D_element (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_dependanceList_2D_element GALGAS_dependanceList_2D_element::extractObject (const GALGAS_object & inObject,
                                                                                  C_Compiler * inCompiler
                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_dependanceList_2D_element result ;
  const GALGAS_dependanceList_2D_element * p = (const GALGAS_dependanceList_2D_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_dependanceList_2D_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("dependanceList-element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_transientList_2D_element::GALGAS_transientList_2D_element (void) :
mAttribute_mTransientTypeName (),
mAttribute_mTransientName (),
mAttribute_mDependencyList () {
}

//-----------------------------------------------------------------------------*

GALGAS_transientList_2D_element::~ GALGAS_transientList_2D_element (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_transientList_2D_element::GALGAS_transientList_2D_element (const GALGAS_lstring & inOperand0,
                                                                  const GALGAS_lstring & inOperand1,
                                                                  const GALGAS_dependanceList & inOperand2) :
mAttribute_mTransientTypeName (inOperand0),
mAttribute_mTransientName (inOperand1),
mAttribute_mDependencyList (inOperand2) {
}

//-----------------------------------------------------------------------------*

GALGAS_transientList_2D_element GALGAS_transientList_2D_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_transientList_2D_element (GALGAS_lstring::constructor_default (HERE),
                                          GALGAS_lstring::constructor_default (HERE),
                                          GALGAS_dependanceList::constructor_emptyList (HERE)) ;
}

//-----------------------------------------------------------------------------*

GALGAS_transientList_2D_element GALGAS_transientList_2D_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                                  const GALGAS_lstring & inOperand1,
                                                                                  const GALGAS_dependanceList & inOperand2 
                                                                                  COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_transientList_2D_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result = GALGAS_transientList_2D_element (inOperand0, inOperand1, inOperand2) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_transientList_2D_element::objectCompare (const GALGAS_transientList_2D_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mTransientTypeName.objectCompare (inOperand.mAttribute_mTransientTypeName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mTransientName.objectCompare (inOperand.mAttribute_mTransientName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mDependencyList.objectCompare (inOperand.mAttribute_mDependencyList) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_transientList_2D_element::isValid (void) const {
  return mAttribute_mTransientTypeName.isValid () && mAttribute_mTransientName.isValid () && mAttribute_mDependencyList.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_transientList_2D_element::drop (void) {
  mAttribute_mTransientTypeName.drop () ;
  mAttribute_mTransientName.drop () ;
  mAttribute_mDependencyList.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_transientList_2D_element::description (C_String & ioString,
                                                   const int32_t inIndentation) const {
  ioString << "<struct @transientList-element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mTransientTypeName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mTransientName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mDependencyList.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_transientList_2D_element::reader_mTransientTypeName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mTransientTypeName ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_transientList_2D_element::reader_mTransientName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mTransientName ;
}

//-----------------------------------------------------------------------------*

GALGAS_dependanceList GALGAS_transientList_2D_element::reader_mDependencyList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mDependencyList ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                         @transientList-element type                         *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_transientList_2D_element ("transientList-element",
                                                 NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_transientList_2D_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_transientList_2D_element ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_transientList_2D_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_transientList_2D_element (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_transientList_2D_element GALGAS_transientList_2D_element::extractObject (const GALGAS_object & inObject,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_transientList_2D_element result ;
  const GALGAS_transientList_2D_element * p = (const GALGAS_transientList_2D_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_transientList_2D_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("transientList-element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_classArrayList_2D_element::GALGAS_classArrayList_2D_element (void) :
mAttribute_mElementClassName (),
mAttribute_mArrayName () {
}

//-----------------------------------------------------------------------------*

GALGAS_classArrayList_2D_element::~ GALGAS_classArrayList_2D_element (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_classArrayList_2D_element::GALGAS_classArrayList_2D_element (const GALGAS_lstring & inOperand0,
                                                                    const GALGAS_lstring & inOperand1) :
mAttribute_mElementClassName (inOperand0),
mAttribute_mArrayName (inOperand1) {
}

//-----------------------------------------------------------------------------*

GALGAS_classArrayList_2D_element GALGAS_classArrayList_2D_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_classArrayList_2D_element (GALGAS_lstring::constructor_default (HERE),
                                           GALGAS_lstring::constructor_default (HERE)) ;
}

//-----------------------------------------------------------------------------*

GALGAS_classArrayList_2D_element GALGAS_classArrayList_2D_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                                    const GALGAS_lstring & inOperand1 
                                                                                    COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_classArrayList_2D_element result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result = GALGAS_classArrayList_2D_element (inOperand0, inOperand1) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_classArrayList_2D_element::objectCompare (const GALGAS_classArrayList_2D_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mElementClassName.objectCompare (inOperand.mAttribute_mElementClassName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mArrayName.objectCompare (inOperand.mAttribute_mArrayName) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_classArrayList_2D_element::isValid (void) const {
  return mAttribute_mElementClassName.isValid () && mAttribute_mArrayName.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_classArrayList_2D_element::drop (void) {
  mAttribute_mElementClassName.drop () ;
  mAttribute_mArrayName.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_classArrayList_2D_element::description (C_String & ioString,
                                                    const int32_t inIndentation) const {
  ioString << "<struct @classArrayList-element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mElementClassName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mArrayName.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_classArrayList_2D_element::reader_mElementClassName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mElementClassName ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_classArrayList_2D_element::reader_mArrayName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mArrayName ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                        @classArrayList-element type                         *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_classArrayList_2D_element ("classArrayList-element",
                                                  NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_classArrayList_2D_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_classArrayList_2D_element ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_classArrayList_2D_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_classArrayList_2D_element (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_classArrayList_2D_element GALGAS_classArrayList_2D_element::extractObject (const GALGAS_object & inObject,
                                                                                  C_Compiler * inCompiler
                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_classArrayList_2D_element result ;
  const GALGAS_classArrayList_2D_element * p = (const GALGAS_classArrayList_2D_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_classArrayList_2D_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("classArrayList-element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletBindingOptionList_2D_element::GALGAS_outletBindingOptionList_2D_element (void) :
mAttribute_mOptionName (),
mAttribute_mDefaultValue () {
}

//-----------------------------------------------------------------------------*

GALGAS_outletBindingOptionList_2D_element::~ GALGAS_outletBindingOptionList_2D_element (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_outletBindingOptionList_2D_element::GALGAS_outletBindingOptionList_2D_element (const GALGAS_lstring & inOperand0,
                                                                                      const GALGAS_abstractDefaultValue & inOperand1) :
mAttribute_mOptionName (inOperand0),
mAttribute_mDefaultValue (inOperand1) {
}

//-----------------------------------------------------------------------------*

GALGAS_outletBindingOptionList_2D_element GALGAS_outletBindingOptionList_2D_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                                                      const GALGAS_abstractDefaultValue & inOperand1 
                                                                                                      COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_outletBindingOptionList_2D_element result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result = GALGAS_outletBindingOptionList_2D_element (inOperand0, inOperand1) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_outletBindingOptionList_2D_element::objectCompare (const GALGAS_outletBindingOptionList_2D_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mOptionName.objectCompare (inOperand.mAttribute_mOptionName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mDefaultValue.objectCompare (inOperand.mAttribute_mDefaultValue) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_outletBindingOptionList_2D_element::isValid (void) const {
  return mAttribute_mOptionName.isValid () && mAttribute_mDefaultValue.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_outletBindingOptionList_2D_element::drop (void) {
  mAttribute_mOptionName.drop () ;
  mAttribute_mDefaultValue.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_outletBindingOptionList_2D_element::description (C_String & ioString,
                                                             const int32_t inIndentation) const {
  ioString << "<struct @outletBindingOptionList-element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mOptionName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mDefaultValue.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_outletBindingOptionList_2D_element::reader_mOptionName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mOptionName ;
}

//-----------------------------------------------------------------------------*

GALGAS_abstractDefaultValue GALGAS_outletBindingOptionList_2D_element::reader_mDefaultValue (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mDefaultValue ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                    @outletBindingOptionList-element type                    *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_outletBindingOptionList_2D_element ("outletBindingOptionList-element",
                                                           NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_outletBindingOptionList_2D_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_outletBindingOptionList_2D_element ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_outletBindingOptionList_2D_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_outletBindingOptionList_2D_element (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletBindingOptionList_2D_element GALGAS_outletBindingOptionList_2D_element::extractObject (const GALGAS_object & inObject,
                                                                                                    C_Compiler * inCompiler
                                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_outletBindingOptionList_2D_element result ;
  const GALGAS_outletBindingOptionList_2D_element * p = (const GALGAS_outletBindingOptionList_2D_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_outletBindingOptionList_2D_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("outletBindingOptionList-element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingList_2D_element::GALGAS_multiValuedBindingList_2D_element (void) :
mAttribute_mNegate (),
mAttribute_mBoundModel (),
mAttribute_mOutletBindingOptionList () {
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingList_2D_element::~ GALGAS_multiValuedBindingList_2D_element (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingList_2D_element::GALGAS_multiValuedBindingList_2D_element (const GALGAS_bool & inOperand0,
                                                                                    const GALGAS_multiValuedBindingBoundModel & inOperand1,
                                                                                    const GALGAS_outletBindingOptionList & inOperand2) :
mAttribute_mNegate (inOperand0),
mAttribute_mBoundModel (inOperand1),
mAttribute_mOutletBindingOptionList (inOperand2) {
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingList_2D_element GALGAS_multiValuedBindingList_2D_element::constructor_new (const GALGAS_bool & inOperand0,
                                                                                                    const GALGAS_multiValuedBindingBoundModel & inOperand1,
                                                                                                    const GALGAS_outletBindingOptionList & inOperand2 
                                                                                                    COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_multiValuedBindingList_2D_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result = GALGAS_multiValuedBindingList_2D_element (inOperand0, inOperand1, inOperand2) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_multiValuedBindingList_2D_element::objectCompare (const GALGAS_multiValuedBindingList_2D_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mNegate.objectCompare (inOperand.mAttribute_mNegate) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mBoundModel.objectCompare (inOperand.mAttribute_mBoundModel) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mOutletBindingOptionList.objectCompare (inOperand.mAttribute_mOutletBindingOptionList) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_multiValuedBindingList_2D_element::isValid (void) const {
  return mAttribute_mNegate.isValid () && mAttribute_mBoundModel.isValid () && mAttribute_mOutletBindingOptionList.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_multiValuedBindingList_2D_element::drop (void) {
  mAttribute_mNegate.drop () ;
  mAttribute_mBoundModel.drop () ;
  mAttribute_mOutletBindingOptionList.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_multiValuedBindingList_2D_element::description (C_String & ioString,
                                                            const int32_t inIndentation) const {
  ioString << "<struct @multiValuedBindingList-element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mNegate.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mBoundModel.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mOutletBindingOptionList.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_bool GALGAS_multiValuedBindingList_2D_element::reader_mNegate (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mNegate ;
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingBoundModel GALGAS_multiValuedBindingList_2D_element::reader_mBoundModel (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mBoundModel ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletBindingOptionList GALGAS_multiValuedBindingList_2D_element::reader_mOutletBindingOptionList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mOutletBindingOptionList ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                    @multiValuedBindingList-element type                     *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_multiValuedBindingList_2D_element ("multiValuedBindingList-element",
                                                          NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_multiValuedBindingList_2D_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_multiValuedBindingList_2D_element ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_multiValuedBindingList_2D_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_multiValuedBindingList_2D_element (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_multiValuedBindingList_2D_element GALGAS_multiValuedBindingList_2D_element::extractObject (const GALGAS_object & inObject,
                                                                                                  C_Compiler * inCompiler
                                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_multiValuedBindingList_2D_element result ;
  const GALGAS_multiValuedBindingList_2D_element * p = (const GALGAS_multiValuedBindingList_2D_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_multiValuedBindingList_2D_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("multiValuedBindingList-element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_tableValueColumnBinding_2D_element::GALGAS_tableValueColumnBinding_2D_element (void) :
mAttribute_mColumnName (),
mAttribute_mCellTypeName (),
mAttribute_mBoundPropertyName () {
}

//-----------------------------------------------------------------------------*

GALGAS_tableValueColumnBinding_2D_element::~ GALGAS_tableValueColumnBinding_2D_element (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_tableValueColumnBinding_2D_element::GALGAS_tableValueColumnBinding_2D_element (const GALGAS_lstring & inOperand0,
                                                                                      const GALGAS_lstring & inOperand1,
                                                                                      const GALGAS_lstring & inOperand2) :
mAttribute_mColumnName (inOperand0),
mAttribute_mCellTypeName (inOperand1),
mAttribute_mBoundPropertyName (inOperand2) {
}

//-----------------------------------------------------------------------------*

GALGAS_tableValueColumnBinding_2D_element GALGAS_tableValueColumnBinding_2D_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_tableValueColumnBinding_2D_element (GALGAS_lstring::constructor_default (HERE),
                                                    GALGAS_lstring::constructor_default (HERE),
                                                    GALGAS_lstring::constructor_default (HERE)) ;
}

//-----------------------------------------------------------------------------*

GALGAS_tableValueColumnBinding_2D_element GALGAS_tableValueColumnBinding_2D_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                                                      const GALGAS_lstring & inOperand1,
                                                                                                      const GALGAS_lstring & inOperand2 
                                                                                                      COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_tableValueColumnBinding_2D_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result = GALGAS_tableValueColumnBinding_2D_element (inOperand0, inOperand1, inOperand2) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_tableValueColumnBinding_2D_element::objectCompare (const GALGAS_tableValueColumnBinding_2D_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mColumnName.objectCompare (inOperand.mAttribute_mColumnName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mCellTypeName.objectCompare (inOperand.mAttribute_mCellTypeName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mBoundPropertyName.objectCompare (inOperand.mAttribute_mBoundPropertyName) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_tableValueColumnBinding_2D_element::isValid (void) const {
  return mAttribute_mColumnName.isValid () && mAttribute_mCellTypeName.isValid () && mAttribute_mBoundPropertyName.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_tableValueColumnBinding_2D_element::drop (void) {
  mAttribute_mColumnName.drop () ;
  mAttribute_mCellTypeName.drop () ;
  mAttribute_mBoundPropertyName.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_tableValueColumnBinding_2D_element::description (C_String & ioString,
                                                             const int32_t inIndentation) const {
  ioString << "<struct @tableValueColumnBinding-element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mColumnName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mCellTypeName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mBoundPropertyName.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_tableValueColumnBinding_2D_element::reader_mColumnName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mColumnName ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_tableValueColumnBinding_2D_element::reader_mCellTypeName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mCellTypeName ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_tableValueColumnBinding_2D_element::reader_mBoundPropertyName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mBoundPropertyName ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                    @tableValueColumnBinding-element type                    *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_tableValueColumnBinding_2D_element ("tableValueColumnBinding-element",
                                                           NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_tableValueColumnBinding_2D_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_tableValueColumnBinding_2D_element ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_tableValueColumnBinding_2D_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_tableValueColumnBinding_2D_element (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_tableValueColumnBinding_2D_element GALGAS_tableValueColumnBinding_2D_element::extractObject (const GALGAS_object & inObject,
                                                                                                    C_Compiler * inCompiler
                                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_tableValueColumnBinding_2D_element result ;
  const GALGAS_tableValueColumnBinding_2D_element * p = (const GALGAS_tableValueColumnBinding_2D_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_tableValueColumnBinding_2D_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("tableValueColumnBinding-element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_bindingList_2D_element::GALGAS_bindingList_2D_element (void) :
mAttribute_mBinding () {
}

//-----------------------------------------------------------------------------*

GALGAS_bindingList_2D_element::~ GALGAS_bindingList_2D_element (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_bindingList_2D_element::GALGAS_bindingList_2D_element (const GALGAS_abstractBinding & inOperand0) :
mAttribute_mBinding (inOperand0) {
}

//-----------------------------------------------------------------------------*

GALGAS_bindingList_2D_element GALGAS_bindingList_2D_element::constructor_new (const GALGAS_abstractBinding & inOperand0 
                                                                              COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_bindingList_2D_element result ;
  if (inOperand0.isValid ()) {
    result = GALGAS_bindingList_2D_element (inOperand0) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_bindingList_2D_element::objectCompare (const GALGAS_bindingList_2D_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mBinding.objectCompare (inOperand.mAttribute_mBinding) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_bindingList_2D_element::isValid (void) const {
  return mAttribute_mBinding.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_bindingList_2D_element::drop (void) {
  mAttribute_mBinding.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_bindingList_2D_element::description (C_String & ioString,
                                                 const int32_t inIndentation) const {
  ioString << "<struct @bindingList-element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mBinding.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_abstractBinding GALGAS_bindingList_2D_element::reader_mBinding (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mBinding ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                          @bindingList-element type                          *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_bindingList_2D_element ("bindingList-element",
                                               NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_bindingList_2D_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_bindingList_2D_element ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_bindingList_2D_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_bindingList_2D_element (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_bindingList_2D_element GALGAS_bindingList_2D_element::extractObject (const GALGAS_object & inObject,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_bindingList_2D_element result ;
  const GALGAS_bindingList_2D_element * p = (const GALGAS_bindingList_2D_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_bindingList_2D_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("bindingList-element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletDeclarationList_2D_element::GALGAS_outletDeclarationList_2D_element (void) :
mAttribute_mOutletType (),
mAttribute_mOutletName (),
mAttribute_mOutletBindingList () {
}

//-----------------------------------------------------------------------------*

GALGAS_outletDeclarationList_2D_element::~ GALGAS_outletDeclarationList_2D_element (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_outletDeclarationList_2D_element::GALGAS_outletDeclarationList_2D_element (const GALGAS_lstring & inOperand0,
                                                                                  const GALGAS_lstring & inOperand1,
                                                                                  const GALGAS_bindingList & inOperand2) :
mAttribute_mOutletType (inOperand0),
mAttribute_mOutletName (inOperand1),
mAttribute_mOutletBindingList (inOperand2) {
}

//-----------------------------------------------------------------------------*

GALGAS_outletDeclarationList_2D_element GALGAS_outletDeclarationList_2D_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_outletDeclarationList_2D_element (GALGAS_lstring::constructor_default (HERE),
                                                  GALGAS_lstring::constructor_default (HERE),
                                                  GALGAS_bindingList::constructor_emptyList (HERE)) ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletDeclarationList_2D_element GALGAS_outletDeclarationList_2D_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                                                  const GALGAS_lstring & inOperand1,
                                                                                                  const GALGAS_bindingList & inOperand2 
                                                                                                  COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_outletDeclarationList_2D_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result = GALGAS_outletDeclarationList_2D_element (inOperand0, inOperand1, inOperand2) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_outletDeclarationList_2D_element::objectCompare (const GALGAS_outletDeclarationList_2D_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mOutletType.objectCompare (inOperand.mAttribute_mOutletType) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mOutletName.objectCompare (inOperand.mAttribute_mOutletName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mOutletBindingList.objectCompare (inOperand.mAttribute_mOutletBindingList) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_outletDeclarationList_2D_element::isValid (void) const {
  return mAttribute_mOutletType.isValid () && mAttribute_mOutletName.isValid () && mAttribute_mOutletBindingList.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_outletDeclarationList_2D_element::drop (void) {
  mAttribute_mOutletType.drop () ;
  mAttribute_mOutletName.drop () ;
  mAttribute_mOutletBindingList.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_outletDeclarationList_2D_element::description (C_String & ioString,
                                                           const int32_t inIndentation) const {
  ioString << "<struct @outletDeclarationList-element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mOutletType.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mOutletName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mOutletBindingList.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_outletDeclarationList_2D_element::reader_mOutletType (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mOutletType ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_outletDeclarationList_2D_element::reader_mOutletName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mOutletName ;
}

//-----------------------------------------------------------------------------*

GALGAS_bindingList GALGAS_outletDeclarationList_2D_element::reader_mOutletBindingList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mOutletBindingList ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                     @outletDeclarationList-element type                     *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_outletDeclarationList_2D_element ("outletDeclarationList-element",
                                                         NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_outletDeclarationList_2D_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_outletDeclarationList_2D_element ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_outletDeclarationList_2D_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_outletDeclarationList_2D_element (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletDeclarationList_2D_element GALGAS_outletDeclarationList_2D_element::extractObject (const GALGAS_object & inObject,
                                                                                                C_Compiler * inCompiler
                                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_outletDeclarationList_2D_element result ;
  const GALGAS_outletDeclarationList_2D_element * p = (const GALGAS_outletDeclarationList_2D_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_outletDeclarationList_2D_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("outletDeclarationList-element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_controllerList_2D_element::GALGAS_controllerList_2D_element (void) :
mAttribute_mControllerKind (),
mAttribute_mControllerClassName (),
mAttribute_mControllerName (),
mAttribute_mIsRootObject (),
mAttribute_mControlledObjectName (),
mAttribute_mControlledObjectBindingOptionList (),
mAttribute_mControllerBindingList (),
mAttribute_mChildRelationshipName () {
}

//-----------------------------------------------------------------------------*

GALGAS_controllerList_2D_element::~ GALGAS_controllerList_2D_element (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_controllerList_2D_element::GALGAS_controllerList_2D_element (const GALGAS_controllerKind & inOperand0,
                                                                    const GALGAS_lstring & inOperand1,
                                                                    const GALGAS_lstring & inOperand2,
                                                                    const GALGAS_lbool & inOperand3,
                                                                    const GALGAS_lstring & inOperand4,
                                                                    const GALGAS_outletBindingOptionList & inOperand5,
                                                                    const GALGAS_bindingList & inOperand6,
                                                                    const GALGAS_lstring & inOperand7) :
mAttribute_mControllerKind (inOperand0),
mAttribute_mControllerClassName (inOperand1),
mAttribute_mControllerName (inOperand2),
mAttribute_mIsRootObject (inOperand3),
mAttribute_mControlledObjectName (inOperand4),
mAttribute_mControlledObjectBindingOptionList (inOperand5),
mAttribute_mControllerBindingList (inOperand6),
mAttribute_mChildRelationshipName (inOperand7) {
}

//-----------------------------------------------------------------------------*

GALGAS_controllerList_2D_element GALGAS_controllerList_2D_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_controllerList_2D_element (GALGAS_controllerKind::constructor_simpleController (HERE),
                                           GALGAS_lstring::constructor_default (HERE),
                                           GALGAS_lstring::constructor_default (HERE),
                                           GALGAS_lbool::constructor_default (HERE),
                                           GALGAS_lstring::constructor_default (HERE),
                                           GALGAS_outletBindingOptionList::constructor_emptyList (HERE),
                                           GALGAS_bindingList::constructor_emptyList (HERE),
                                           GALGAS_lstring::constructor_default (HERE)) ;
}

//-----------------------------------------------------------------------------*

GALGAS_controllerList_2D_element GALGAS_controllerList_2D_element::constructor_new (const GALGAS_controllerKind & inOperand0,
                                                                                    const GALGAS_lstring & inOperand1,
                                                                                    const GALGAS_lstring & inOperand2,
                                                                                    const GALGAS_lbool & inOperand3,
                                                                                    const GALGAS_lstring & inOperand4,
                                                                                    const GALGAS_outletBindingOptionList & inOperand5,
                                                                                    const GALGAS_bindingList & inOperand6,
                                                                                    const GALGAS_lstring & inOperand7 
                                                                                    COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_controllerList_2D_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid () && inOperand6.isValid () && inOperand7.isValid ()) {
    result = GALGAS_controllerList_2D_element (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5, inOperand6, inOperand7) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_controllerList_2D_element::objectCompare (const GALGAS_controllerList_2D_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mControllerKind.objectCompare (inOperand.mAttribute_mControllerKind) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mControllerClassName.objectCompare (inOperand.mAttribute_mControllerClassName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mControllerName.objectCompare (inOperand.mAttribute_mControllerName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mIsRootObject.objectCompare (inOperand.mAttribute_mIsRootObject) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mControlledObjectName.objectCompare (inOperand.mAttribute_mControlledObjectName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mControlledObjectBindingOptionList.objectCompare (inOperand.mAttribute_mControlledObjectBindingOptionList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mControllerBindingList.objectCompare (inOperand.mAttribute_mControllerBindingList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mChildRelationshipName.objectCompare (inOperand.mAttribute_mChildRelationshipName) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_controllerList_2D_element::isValid (void) const {
  return mAttribute_mControllerKind.isValid () && mAttribute_mControllerClassName.isValid () && mAttribute_mControllerName.isValid () && mAttribute_mIsRootObject.isValid () && mAttribute_mControlledObjectName.isValid () && mAttribute_mControlledObjectBindingOptionList.isValid () && mAttribute_mControllerBindingList.isValid () && mAttribute_mChildRelationshipName.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_controllerList_2D_element::drop (void) {
  mAttribute_mControllerKind.drop () ;
  mAttribute_mControllerClassName.drop () ;
  mAttribute_mControllerName.drop () ;
  mAttribute_mIsRootObject.drop () ;
  mAttribute_mControlledObjectName.drop () ;
  mAttribute_mControlledObjectBindingOptionList.drop () ;
  mAttribute_mControllerBindingList.drop () ;
  mAttribute_mChildRelationshipName.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_controllerList_2D_element::description (C_String & ioString,
                                                    const int32_t inIndentation) const {
  ioString << "<struct @controllerList-element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mControllerKind.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mControllerClassName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mControllerName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mIsRootObject.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mControlledObjectName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mControlledObjectBindingOptionList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mControllerBindingList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mChildRelationshipName.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_controllerKind GALGAS_controllerList_2D_element::reader_mControllerKind (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mControllerKind ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_controllerList_2D_element::reader_mControllerClassName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mControllerClassName ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_controllerList_2D_element::reader_mControllerName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mControllerName ;
}

//-----------------------------------------------------------------------------*

GALGAS_lbool GALGAS_controllerList_2D_element::reader_mIsRootObject (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mIsRootObject ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_controllerList_2D_element::reader_mControlledObjectName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mControlledObjectName ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletBindingOptionList GALGAS_controllerList_2D_element::reader_mControlledObjectBindingOptionList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mControlledObjectBindingOptionList ;
}

//-----------------------------------------------------------------------------*

GALGAS_bindingList GALGAS_controllerList_2D_element::reader_mControllerBindingList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mControllerBindingList ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_controllerList_2D_element::reader_mChildRelationshipName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mChildRelationshipName ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                        @controllerList-element type                         *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_controllerList_2D_element ("controllerList-element",
                                                  NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_controllerList_2D_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_controllerList_2D_element ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_controllerList_2D_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_controllerList_2D_element (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_controllerList_2D_element GALGAS_controllerList_2D_element::extractObject (const GALGAS_object & inObject,
                                                                                  C_Compiler * inCompiler
                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_controllerList_2D_element result ;
  const GALGAS_controllerList_2D_element * p = (const GALGAS_controllerList_2D_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_controllerList_2D_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("controllerList-element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeASTTypeAndFormatterList_2D_element::GALGAS_attributeASTTypeAndFormatterList_2D_element (void) :
mAttribute_mTypeName (),
mAttribute_mRequiredFormatter () {
}

//-----------------------------------------------------------------------------*

GALGAS_attributeASTTypeAndFormatterList_2D_element::~ GALGAS_attributeASTTypeAndFormatterList_2D_element (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_attributeASTTypeAndFormatterList_2D_element::GALGAS_attributeASTTypeAndFormatterList_2D_element (const GALGAS_lstring & inOperand0,
                                                                                                        const GALGAS_formatterEnum & inOperand1) :
mAttribute_mTypeName (inOperand0),
mAttribute_mRequiredFormatter (inOperand1) {
}

//-----------------------------------------------------------------------------*

GALGAS_attributeASTTypeAndFormatterList_2D_element GALGAS_attributeASTTypeAndFormatterList_2D_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_attributeASTTypeAndFormatterList_2D_element (GALGAS_lstring::constructor_default (HERE),
                                                             GALGAS_formatterEnum::constructor_noFormatter (HERE)) ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeASTTypeAndFormatterList_2D_element GALGAS_attributeASTTypeAndFormatterList_2D_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                                                                        const GALGAS_formatterEnum & inOperand1 
                                                                                                                        COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_attributeASTTypeAndFormatterList_2D_element result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result = GALGAS_attributeASTTypeAndFormatterList_2D_element (inOperand0, inOperand1) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_attributeASTTypeAndFormatterList_2D_element::objectCompare (const GALGAS_attributeASTTypeAndFormatterList_2D_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mTypeName.objectCompare (inOperand.mAttribute_mTypeName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mRequiredFormatter.objectCompare (inOperand.mAttribute_mRequiredFormatter) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_attributeASTTypeAndFormatterList_2D_element::isValid (void) const {
  return mAttribute_mTypeName.isValid () && mAttribute_mRequiredFormatter.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_attributeASTTypeAndFormatterList_2D_element::drop (void) {
  mAttribute_mTypeName.drop () ;
  mAttribute_mRequiredFormatter.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_attributeASTTypeAndFormatterList_2D_element::description (C_String & ioString,
                                                                      const int32_t inIndentation) const {
  ioString << "<struct @attributeASTTypeAndFormatterList-element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mTypeName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mRequiredFormatter.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_attributeASTTypeAndFormatterList_2D_element::reader_mTypeName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mTypeName ;
}

//-----------------------------------------------------------------------------*

GALGAS_formatterEnum GALGAS_attributeASTTypeAndFormatterList_2D_element::reader_mRequiredFormatter (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mRequiredFormatter ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//               @attributeASTTypeAndFormatterList-element type                *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_attributeASTTypeAndFormatterList_2D_element ("attributeASTTypeAndFormatterList-element",
                                                                    NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_attributeASTTypeAndFormatterList_2D_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_attributeASTTypeAndFormatterList_2D_element ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_attributeASTTypeAndFormatterList_2D_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_attributeASTTypeAndFormatterList_2D_element (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeASTTypeAndFormatterList_2D_element GALGAS_attributeASTTypeAndFormatterList_2D_element::extractObject (const GALGAS_object & inObject,
                                                                                                                      C_Compiler * inCompiler
                                                                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_attributeASTTypeAndFormatterList_2D_element result ;
  const GALGAS_attributeASTTypeAndFormatterList_2D_element * p = (const GALGAS_attributeASTTypeAndFormatterList_2D_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_attributeASTTypeAndFormatterList_2D_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("attributeASTTypeAndFormatterList-element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletClassBindingList_2D_element::GALGAS_outletClassBindingList_2D_element (void) :
mAttribute_mBindingName (),
mAttribute_mAcceptableTypeFormatterList (),
mAttribute_mBindingOptionList () {
}

//-----------------------------------------------------------------------------*

GALGAS_outletClassBindingList_2D_element::~ GALGAS_outletClassBindingList_2D_element (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_outletClassBindingList_2D_element::GALGAS_outletClassBindingList_2D_element (const GALGAS_lstring & inOperand0,
                                                                                    const GALGAS_attributeASTTypeAndFormatterList & inOperand1,
                                                                                    const GALGAS_bindingOptionList & inOperand2) :
mAttribute_mBindingName (inOperand0),
mAttribute_mAcceptableTypeFormatterList (inOperand1),
mAttribute_mBindingOptionList (inOperand2) {
}

//-----------------------------------------------------------------------------*

GALGAS_outletClassBindingList_2D_element GALGAS_outletClassBindingList_2D_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_outletClassBindingList_2D_element (GALGAS_lstring::constructor_default (HERE),
                                                   GALGAS_attributeASTTypeAndFormatterList::constructor_emptyList (HERE),
                                                   GALGAS_bindingOptionList::constructor_emptyList (HERE)) ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletClassBindingList_2D_element GALGAS_outletClassBindingList_2D_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                                                    const GALGAS_attributeASTTypeAndFormatterList & inOperand1,
                                                                                                    const GALGAS_bindingOptionList & inOperand2 
                                                                                                    COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_outletClassBindingList_2D_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result = GALGAS_outletClassBindingList_2D_element (inOperand0, inOperand1, inOperand2) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_outletClassBindingList_2D_element::objectCompare (const GALGAS_outletClassBindingList_2D_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mBindingName.objectCompare (inOperand.mAttribute_mBindingName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mAcceptableTypeFormatterList.objectCompare (inOperand.mAttribute_mAcceptableTypeFormatterList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mBindingOptionList.objectCompare (inOperand.mAttribute_mBindingOptionList) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_outletClassBindingList_2D_element::isValid (void) const {
  return mAttribute_mBindingName.isValid () && mAttribute_mAcceptableTypeFormatterList.isValid () && mAttribute_mBindingOptionList.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_outletClassBindingList_2D_element::drop (void) {
  mAttribute_mBindingName.drop () ;
  mAttribute_mAcceptableTypeFormatterList.drop () ;
  mAttribute_mBindingOptionList.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_outletClassBindingList_2D_element::description (C_String & ioString,
                                                            const int32_t inIndentation) const {
  ioString << "<struct @outletClassBindingList-element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mBindingName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mAcceptableTypeFormatterList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mBindingOptionList.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_outletClassBindingList_2D_element::reader_mBindingName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mBindingName ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeASTTypeAndFormatterList GALGAS_outletClassBindingList_2D_element::reader_mAcceptableTypeFormatterList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mAcceptableTypeFormatterList ;
}

//-----------------------------------------------------------------------------*

GALGAS_bindingOptionList GALGAS_outletClassBindingList_2D_element::reader_mBindingOptionList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mBindingOptionList ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                    @outletClassBindingList-element type                     *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_outletClassBindingList_2D_element ("outletClassBindingList-element",
                                                          NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_outletClassBindingList_2D_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_outletClassBindingList_2D_element ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_outletClassBindingList_2D_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_outletClassBindingList_2D_element (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_outletClassBindingList_2D_element GALGAS_outletClassBindingList_2D_element::extractObject (const GALGAS_object & inObject,
                                                                                                  C_Compiler * inCompiler
                                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_outletClassBindingList_2D_element result ;
  const GALGAS_outletClassBindingList_2D_element * p = (const GALGAS_outletClassBindingList_2D_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_outletClassBindingList_2D_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("outletClassBindingList-element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_bindingOptionList_2D_element::GALGAS_bindingOptionList_2D_element (void) :
mAttribute_mBindingOptionName (),
mAttribute_mAcceptableTypeList () {
}

//-----------------------------------------------------------------------------*

GALGAS_bindingOptionList_2D_element::~ GALGAS_bindingOptionList_2D_element (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_bindingOptionList_2D_element::GALGAS_bindingOptionList_2D_element (const GALGAS_lstring & inOperand0,
                                                                          const GALGAS_lstringlist & inOperand1) :
mAttribute_mBindingOptionName (inOperand0),
mAttribute_mAcceptableTypeList (inOperand1) {
}

//-----------------------------------------------------------------------------*

GALGAS_bindingOptionList_2D_element GALGAS_bindingOptionList_2D_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_bindingOptionList_2D_element (GALGAS_lstring::constructor_default (HERE),
                                              GALGAS_lstringlist::constructor_emptyList (HERE)) ;
}

//-----------------------------------------------------------------------------*

GALGAS_bindingOptionList_2D_element GALGAS_bindingOptionList_2D_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                                          const GALGAS_lstringlist & inOperand1 
                                                                                          COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_bindingOptionList_2D_element result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result = GALGAS_bindingOptionList_2D_element (inOperand0, inOperand1) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_bindingOptionList_2D_element::objectCompare (const GALGAS_bindingOptionList_2D_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mBindingOptionName.objectCompare (inOperand.mAttribute_mBindingOptionName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mAcceptableTypeList.objectCompare (inOperand.mAttribute_mAcceptableTypeList) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_bindingOptionList_2D_element::isValid (void) const {
  return mAttribute_mBindingOptionName.isValid () && mAttribute_mAcceptableTypeList.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_bindingOptionList_2D_element::drop (void) {
  mAttribute_mBindingOptionName.drop () ;
  mAttribute_mAcceptableTypeList.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_bindingOptionList_2D_element::description (C_String & ioString,
                                                       const int32_t inIndentation) const {
  ioString << "<struct @bindingOptionList-element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mBindingOptionName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mAcceptableTypeList.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_bindingOptionList_2D_element::reader_mBindingOptionName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mBindingOptionName ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstringlist GALGAS_bindingOptionList_2D_element::reader_mAcceptableTypeList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mAcceptableTypeList ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                       @bindingOptionList-element type                       *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_bindingOptionList_2D_element ("bindingOptionList-element",
                                                     NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_bindingOptionList_2D_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_bindingOptionList_2D_element ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_bindingOptionList_2D_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_bindingOptionList_2D_element (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_bindingOptionList_2D_element GALGAS_bindingOptionList_2D_element::extractObject (const GALGAS_object & inObject,
                                                                                        C_Compiler * inCompiler
                                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_bindingOptionList_2D_element result ;
  const GALGAS_bindingOptionList_2D_element * p = (const GALGAS_bindingOptionList_2D_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_bindingOptionList_2D_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("bindingOptionList-element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_cursorList_2D_element::GALGAS_cursorList_2D_element (void) :
mAttribute_mCursorName (),
mAttribute_mHotSpotX (),
mAttribute_mHotSpotY () {
}

//-----------------------------------------------------------------------------*

GALGAS_cursorList_2D_element::~ GALGAS_cursorList_2D_element (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_cursorList_2D_element::GALGAS_cursorList_2D_element (const GALGAS_lstring & inOperand0,
                                                            const GALGAS_ldouble & inOperand1,
                                                            const GALGAS_ldouble & inOperand2) :
mAttribute_mCursorName (inOperand0),
mAttribute_mHotSpotX (inOperand1),
mAttribute_mHotSpotY (inOperand2) {
}

//-----------------------------------------------------------------------------*

GALGAS_cursorList_2D_element GALGAS_cursorList_2D_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_cursorList_2D_element (GALGAS_lstring::constructor_default (HERE),
                                       GALGAS_ldouble::constructor_default (HERE),
                                       GALGAS_ldouble::constructor_default (HERE)) ;
}

//-----------------------------------------------------------------------------*

GALGAS_cursorList_2D_element GALGAS_cursorList_2D_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                            const GALGAS_ldouble & inOperand1,
                                                                            const GALGAS_ldouble & inOperand2 
                                                                            COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_cursorList_2D_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result = GALGAS_cursorList_2D_element (inOperand0, inOperand1, inOperand2) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_cursorList_2D_element::objectCompare (const GALGAS_cursorList_2D_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mCursorName.objectCompare (inOperand.mAttribute_mCursorName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mHotSpotX.objectCompare (inOperand.mAttribute_mHotSpotX) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mHotSpotY.objectCompare (inOperand.mAttribute_mHotSpotY) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_cursorList_2D_element::isValid (void) const {
  return mAttribute_mCursorName.isValid () && mAttribute_mHotSpotX.isValid () && mAttribute_mHotSpotY.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_cursorList_2D_element::drop (void) {
  mAttribute_mCursorName.drop () ;
  mAttribute_mHotSpotX.drop () ;
  mAttribute_mHotSpotY.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_cursorList_2D_element::description (C_String & ioString,
                                                const int32_t inIndentation) const {
  ioString << "<struct @cursorList-element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mCursorName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mHotSpotX.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mHotSpotY.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_cursorList_2D_element::reader_mCursorName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mCursorName ;
}

//-----------------------------------------------------------------------------*

GALGAS_ldouble GALGAS_cursorList_2D_element::reader_mHotSpotX (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mHotSpotX ;
}

//-----------------------------------------------------------------------------*

GALGAS_ldouble GALGAS_cursorList_2D_element::reader_mHotSpotY (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mHotSpotY ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                          @cursorList-element type                           *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_cursorList_2D_element ("cursorList-element",
                                              NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_cursorList_2D_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_cursorList_2D_element ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_cursorList_2D_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_cursorList_2D_element (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_cursorList_2D_element GALGAS_cursorList_2D_element::extractObject (const GALGAS_object & inObject,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_cursorList_2D_element result ;
  const GALGAS_cursorList_2D_element * p = (const GALGAS_cursorList_2D_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_cursorList_2D_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("cursorList-element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_controllerObservablePropertyList_2D_element::GALGAS_controllerObservablePropertyList_2D_element (void) :
mAttribute_mTypeName (),
mAttribute_mPropertyName () {
}

//-----------------------------------------------------------------------------*

GALGAS_controllerObservablePropertyList_2D_element::~ GALGAS_controllerObservablePropertyList_2D_element (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_controllerObservablePropertyList_2D_element::GALGAS_controllerObservablePropertyList_2D_element (const GALGAS_lstring & inOperand0,
                                                                                                        const GALGAS_lstring & inOperand1) :
mAttribute_mTypeName (inOperand0),
mAttribute_mPropertyName (inOperand1) {
}

//-----------------------------------------------------------------------------*

GALGAS_controllerObservablePropertyList_2D_element GALGAS_controllerObservablePropertyList_2D_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_controllerObservablePropertyList_2D_element (GALGAS_lstring::constructor_default (HERE),
                                                             GALGAS_lstring::constructor_default (HERE)) ;
}

//-----------------------------------------------------------------------------*

GALGAS_controllerObservablePropertyList_2D_element GALGAS_controllerObservablePropertyList_2D_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                                                                        const GALGAS_lstring & inOperand1 
                                                                                                                        COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_controllerObservablePropertyList_2D_element result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result = GALGAS_controllerObservablePropertyList_2D_element (inOperand0, inOperand1) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_controllerObservablePropertyList_2D_element::objectCompare (const GALGAS_controllerObservablePropertyList_2D_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mTypeName.objectCompare (inOperand.mAttribute_mTypeName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mPropertyName.objectCompare (inOperand.mAttribute_mPropertyName) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_controllerObservablePropertyList_2D_element::isValid (void) const {
  return mAttribute_mTypeName.isValid () && mAttribute_mPropertyName.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_controllerObservablePropertyList_2D_element::drop (void) {
  mAttribute_mTypeName.drop () ;
  mAttribute_mPropertyName.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_controllerObservablePropertyList_2D_element::description (C_String & ioString,
                                                                      const int32_t inIndentation) const {
  ioString << "<struct @controllerObservablePropertyList-element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mTypeName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mPropertyName.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_controllerObservablePropertyList_2D_element::reader_mTypeName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mTypeName ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_controllerObservablePropertyList_2D_element::reader_mPropertyName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mPropertyName ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//               @controllerObservablePropertyList-element type                *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_controllerObservablePropertyList_2D_element ("controllerObservablePropertyList-element",
                                                                    NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_controllerObservablePropertyList_2D_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_controllerObservablePropertyList_2D_element ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_controllerObservablePropertyList_2D_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_controllerObservablePropertyList_2D_element (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_controllerObservablePropertyList_2D_element GALGAS_controllerObservablePropertyList_2D_element::extractObject (const GALGAS_object & inObject,
                                                                                                                      C_Compiler * inCompiler
                                                                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_controllerObservablePropertyList_2D_element result ;
  const GALGAS_controllerObservablePropertyList_2D_element * p = (const GALGAS_controllerObservablePropertyList_2D_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_controllerObservablePropertyList_2D_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("controllerObservablePropertyList-element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_defaultValueList_2D_element::GALGAS_defaultValueList_2D_element (void) :
mAttribute_mDefaultValue () {
}

//-----------------------------------------------------------------------------*

GALGAS_defaultValueList_2D_element::~ GALGAS_defaultValueList_2D_element (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_defaultValueList_2D_element::GALGAS_defaultValueList_2D_element (const GALGAS_abstractDefaultValue & inOperand0) :
mAttribute_mDefaultValue (inOperand0) {
}

//-----------------------------------------------------------------------------*

GALGAS_defaultValueList_2D_element GALGAS_defaultValueList_2D_element::constructor_new (const GALGAS_abstractDefaultValue & inOperand0 
                                                                                        COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_defaultValueList_2D_element result ;
  if (inOperand0.isValid ()) {
    result = GALGAS_defaultValueList_2D_element (inOperand0) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_defaultValueList_2D_element::objectCompare (const GALGAS_defaultValueList_2D_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mDefaultValue.objectCompare (inOperand.mAttribute_mDefaultValue) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_defaultValueList_2D_element::isValid (void) const {
  return mAttribute_mDefaultValue.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_defaultValueList_2D_element::drop (void) {
  mAttribute_mDefaultValue.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_defaultValueList_2D_element::description (C_String & ioString,
                                                      const int32_t inIndentation) const {
  ioString << "<struct @defaultValueList-element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mDefaultValue.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_abstractDefaultValue GALGAS_defaultValueList_2D_element::reader_mDefaultValue (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mDefaultValue ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                       @defaultValueList-element type                        *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_defaultValueList_2D_element ("defaultValueList-element",
                                                    NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_defaultValueList_2D_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_defaultValueList_2D_element ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_defaultValueList_2D_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_defaultValueList_2D_element (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_defaultValueList_2D_element GALGAS_defaultValueList_2D_element::extractObject (const GALGAS_object & inObject,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_defaultValueList_2D_element result ;
  const GALGAS_defaultValueList_2D_element * p = (const GALGAS_defaultValueList_2D_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_defaultValueList_2D_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("defaultValueList-element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_structFieldASTList_2D_element::GALGAS_structFieldASTList_2D_element (void) :
mAttribute_mFieldTypeName (),
mAttribute_mFieldName () {
}

//-----------------------------------------------------------------------------*

GALGAS_structFieldASTList_2D_element::~ GALGAS_structFieldASTList_2D_element (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_structFieldASTList_2D_element::GALGAS_structFieldASTList_2D_element (const GALGAS_lstring & inOperand0,
                                                                            const GALGAS_lstring & inOperand1) :
mAttribute_mFieldTypeName (inOperand0),
mAttribute_mFieldName (inOperand1) {
}

//-----------------------------------------------------------------------------*

GALGAS_structFieldASTList_2D_element GALGAS_structFieldASTList_2D_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_structFieldASTList_2D_element (GALGAS_lstring::constructor_default (HERE),
                                               GALGAS_lstring::constructor_default (HERE)) ;
}

//-----------------------------------------------------------------------------*

GALGAS_structFieldASTList_2D_element GALGAS_structFieldASTList_2D_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                                            const GALGAS_lstring & inOperand1 
                                                                                            COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_structFieldASTList_2D_element result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result = GALGAS_structFieldASTList_2D_element (inOperand0, inOperand1) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_structFieldASTList_2D_element::objectCompare (const GALGAS_structFieldASTList_2D_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mFieldTypeName.objectCompare (inOperand.mAttribute_mFieldTypeName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mFieldName.objectCompare (inOperand.mAttribute_mFieldName) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_structFieldASTList_2D_element::isValid (void) const {
  return mAttribute_mFieldTypeName.isValid () && mAttribute_mFieldName.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_structFieldASTList_2D_element::drop (void) {
  mAttribute_mFieldTypeName.drop () ;
  mAttribute_mFieldName.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_structFieldASTList_2D_element::description (C_String & ioString,
                                                        const int32_t inIndentation) const {
  ioString << "<struct @structFieldASTList-element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mFieldTypeName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mFieldName.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_structFieldASTList_2D_element::reader_mFieldTypeName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mFieldTypeName ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_structFieldASTList_2D_element::reader_mFieldName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mFieldName ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                      @structFieldASTList-element type                       *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_structFieldASTList_2D_element ("structFieldASTList-element",
                                                      NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_structFieldASTList_2D_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_structFieldASTList_2D_element ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_structFieldASTList_2D_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_structFieldASTList_2D_element (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_structFieldASTList_2D_element GALGAS_structFieldASTList_2D_element::extractObject (const GALGAS_object & inObject,
                                                                                          C_Compiler * inCompiler
                                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_structFieldASTList_2D_element result ;
  const GALGAS_structFieldASTList_2D_element * p = (const GALGAS_structFieldASTList_2D_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_structFieldASTList_2D_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("structFieldASTList-element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


