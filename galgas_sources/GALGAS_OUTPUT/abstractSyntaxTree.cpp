//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'abstractSyntaxTree.cpp'                        *
//             Generated by version version GALGAS_BETA_VERSION              *
//                      july 15th, 2011, at 17h40'21"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "abstractSyntaxTree.h"
#include "galgas2/C_Compiler.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "utilities/C_PrologueEpilogue.h"

//---------------------------------------------------------------------------*

#include "easyBindings_options.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "abstractSyntaxTree.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                Class for element of '@attributeList' list                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_attributeList : public cCollectionElement {
//--- List attributes
  public : GALGAS_easyBindingType mAttribute_mType ;
  public : GALGAS_lstring mAttribute_mPropertyName ;
  public : GALGAS_easyBindingTypeList mAttribute_mDefaultValueCorrespondingAcceptableTypes ;
  public : GALGAS_string mAttribute_mDefaultValueObjectiveCObject ;

//--- Constructor
  public : cCollectionElement_attributeList (const GALGAS_easyBindingType & in_mType,
                                             const GALGAS_lstring & in_mPropertyName,
                                             const GALGAS_easyBindingTypeList & in_mDefaultValueCorrespondingAcceptableTypes,
                                             const GALGAS_string & in_mDefaultValueObjectiveCObject
                                             COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_attributeList::cCollectionElement_attributeList (const GALGAS_easyBindingType & in_mType,
                                                                    const GALGAS_lstring & in_mPropertyName,
                                                                    const GALGAS_easyBindingTypeList & in_mDefaultValueCorrespondingAcceptableTypes,
                                                                    const GALGAS_string & in_mDefaultValueObjectiveCObject
                                                                    COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mAttribute_mType (in_mType),
mAttribute_mPropertyName (in_mPropertyName),
mAttribute_mDefaultValueCorrespondingAcceptableTypes (in_mDefaultValueCorrespondingAcceptableTypes),
mAttribute_mDefaultValueObjectiveCObject (in_mDefaultValueObjectiveCObject) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_attributeList::isValid (void) const {
  return mAttribute_mType.isValid () && mAttribute_mPropertyName.isValid () && mAttribute_mDefaultValueCorrespondingAcceptableTypes.isValid () && mAttribute_mDefaultValueObjectiveCObject.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_attributeList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_attributeList (mAttribute_mType, mAttribute_mPropertyName, mAttribute_mDefaultValueCorrespondingAcceptableTypes, mAttribute_mDefaultValueObjectiveCObject COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_attributeList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mType" ":" ;
  mAttribute_mType.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mPropertyName" ":" ;
  mAttribute_mPropertyName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mDefaultValueCorrespondingAcceptableTypes" ":" ;
  mAttribute_mDefaultValueCorrespondingAcceptableTypes.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mDefaultValueObjectiveCObject" ":" ;
  mAttribute_mDefaultValueObjectiveCObject.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_attributeList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_attributeList * operand = (cCollectionElement_attributeList *) inOperand ;
  typeComparisonResult result = kOperandEqual ;
  if (kOperandEqual == result) {
    result = mAttribute_mType.objectCompare (operand->mAttribute_mType) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mPropertyName.objectCompare (operand->mAttribute_mPropertyName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mDefaultValueCorrespondingAcceptableTypes.objectCompare (operand->mAttribute_mDefaultValueCorrespondingAcceptableTypes) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mDefaultValueObjectiveCObject.objectCompare (operand->mAttribute_mDefaultValueObjectiveCObject) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeList::GALGAS_attributeList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_attributeList::GALGAS_attributeList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_attributeList GALGAS_attributeList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_attributeList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeList GALGAS_attributeList::constructor_listWithValue (const GALGAS_easyBindingType & inOperand0,
                                                                      const GALGAS_lstring & inOperand1,
                                                                      const GALGAS_easyBindingTypeList & inOperand2,
                                                                      const GALGAS_string & inOperand3
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_attributeList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_attributeList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2, inOperand3 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_attributeList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                      const GALGAS_easyBindingType & in_mType,
                                                      const GALGAS_lstring & in_mPropertyName,
                                                      const GALGAS_easyBindingTypeList & in_mDefaultValueCorrespondingAcceptableTypes,
                                                      const GALGAS_string & in_mDefaultValueObjectiveCObject
                                                      COMMA_LOCATION_ARGS) {
  cCollectionElement_attributeList * p = NULL ;
  macroMyNew (p, cCollectionElement_attributeList (in_mType,
                                                      in_mPropertyName,
                                                      in_mDefaultValueCorrespondingAcceptableTypes,
                                                      in_mDefaultValueObjectiveCObject COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_attributeList::addAssign_operation (const GALGAS_easyBindingType & inOperand0,
                                                const GALGAS_lstring & inOperand1,
                                                const GALGAS_easyBindingTypeList & inOperand2,
                                                const GALGAS_string & inOperand3
                                                COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_attributeList (inOperand0, inOperand1, inOperand2, inOperand3 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_attributeList::modifier_prependValue (GALGAS_easyBindingType inOperand0,
                                                  GALGAS_lstring inOperand1,
                                                  GALGAS_easyBindingTypeList inOperand2,
                                                  GALGAS_string inOperand3
                                                  COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_attributeList (inOperand0, inOperand1, inOperand2, inOperand3 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_attributeList::modifier_popFirst (GALGAS_easyBindingType & outOperand0,
                                              GALGAS_lstring & outOperand1,
                                              GALGAS_easyBindingTypeList & outOperand2,
                                              GALGAS_string & outOperand3,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_attributeList * p = (cCollectionElement_attributeList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_attributeList) ;
    outOperand0 = p->mAttribute_mType ;
    outOperand1 = p->mAttribute_mPropertyName ;
    outOperand2 = p->mAttribute_mDefaultValueCorrespondingAcceptableTypes ;
    outOperand3 = p->mAttribute_mDefaultValueObjectiveCObject ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_attributeList::modifier_popLast (GALGAS_easyBindingType & outOperand0,
                                             GALGAS_lstring & outOperand1,
                                             GALGAS_easyBindingTypeList & outOperand2,
                                             GALGAS_string & outOperand3,
                                             C_Compiler * inCompiler
                                             COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_attributeList * p = (cCollectionElement_attributeList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_attributeList) ;
    outOperand0 = p->mAttribute_mType ;
    outOperand1 = p->mAttribute_mPropertyName ;
    outOperand2 = p->mAttribute_mDefaultValueCorrespondingAcceptableTypes ;
    outOperand3 = p->mAttribute_mDefaultValueObjectiveCObject ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_attributeList::method_first (GALGAS_easyBindingType & outOperand0,
                                         GALGAS_lstring & outOperand1,
                                         GALGAS_easyBindingTypeList & outOperand2,
                                         GALGAS_string & outOperand3,
                                         C_Compiler * inCompiler
                                         COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_attributeList * p = (cCollectionElement_attributeList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_attributeList) ;
    outOperand0 = p->mAttribute_mType ;
    outOperand1 = p->mAttribute_mPropertyName ;
    outOperand2 = p->mAttribute_mDefaultValueCorrespondingAcceptableTypes ;
    outOperand3 = p->mAttribute_mDefaultValueObjectiveCObject ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_attributeList::method_last (GALGAS_easyBindingType & outOperand0,
                                        GALGAS_lstring & outOperand1,
                                        GALGAS_easyBindingTypeList & outOperand2,
                                        GALGAS_string & outOperand3,
                                        C_Compiler * inCompiler
                                        COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_attributeList * p = (cCollectionElement_attributeList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_attributeList) ;
    outOperand0 = p->mAttribute_mType ;
    outOperand1 = p->mAttribute_mPropertyName ;
    outOperand2 = p->mAttribute_mDefaultValueCorrespondingAcceptableTypes ;
    outOperand3 = p->mAttribute_mDefaultValueObjectiveCObject ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_attributeList GALGAS_attributeList::operator_concat (const GALGAS_attributeList & inOperand
                                                            COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_attributeList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeList GALGAS_attributeList::reader_subListWithRange (const GALGAS_uint & inIndex,
                                                                    const GALGAS_uint & inLength,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) const {
  GALGAS_attributeList result = GALGAS_attributeList::constructor_emptyList (THERE) ;
  subListWithRange (result, inIndex, inLength, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeList GALGAS_attributeList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) const {
  GALGAS_attributeList result = GALGAS_attributeList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_attributeList::dotAssign_operation (const GALGAS_attributeList inOperand
                                                COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingType GALGAS_attributeList::reader_mTypeAtIndex (const GALGAS_uint & inIndex,
                                                                  C_Compiler * inCompiler
                                                                  COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_attributeList * p = (cCollectionElement_attributeList *) attributes.ptr () ;
  GALGAS_easyBindingType result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_attributeList) ;
    result = p->mAttribute_mType ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_attributeList::reader_mPropertyNameAtIndex (const GALGAS_uint & inIndex,
                                                                  C_Compiler * inCompiler
                                                                  COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_attributeList * p = (cCollectionElement_attributeList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_attributeList) ;
    result = p->mAttribute_mPropertyName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeList GALGAS_attributeList::reader_mDefaultValueCorrespondingAcceptableTypesAtIndex (const GALGAS_uint & inIndex,
                                                                                                          C_Compiler * inCompiler
                                                                                                          COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_attributeList * p = (cCollectionElement_attributeList *) attributes.ptr () ;
  GALGAS_easyBindingTypeList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_attributeList) ;
    result = p->mAttribute_mDefaultValueCorrespondingAcceptableTypes ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_string GALGAS_attributeList::reader_mDefaultValueObjectiveCObjectAtIndex (const GALGAS_uint & inIndex,
                                                                                 C_Compiler * inCompiler
                                                                                 COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_attributeList * p = (cCollectionElement_attributeList *) attributes.ptr () ;
  GALGAS_string result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_attributeList) ;
    result = p->mAttribute_mDefaultValueObjectiveCObject ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_attributeList::cEnumerator_attributeList (const GALGAS_attributeList & inEnumeratedObject,
                                                      const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingType cEnumerator_attributeList::current_mType (LOCATION_ARGS) const {
  const cCollectionElement_attributeList * p = (const cCollectionElement_attributeList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_attributeList) ;
  return p->mAttribute_mType ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_attributeList::current_mPropertyName (LOCATION_ARGS) const {
  const cCollectionElement_attributeList * p = (const cCollectionElement_attributeList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_attributeList) ;
  return p->mAttribute_mPropertyName ;
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeList cEnumerator_attributeList::current_mDefaultValueCorrespondingAcceptableTypes (LOCATION_ARGS) const {
  const cCollectionElement_attributeList * p = (const cCollectionElement_attributeList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_attributeList) ;
  return p->mAttribute_mDefaultValueCorrespondingAcceptableTypes ;
}

//---------------------------------------------------------------------------*

GALGAS_string cEnumerator_attributeList::current_mDefaultValueObjectiveCObject (LOCATION_ARGS) const {
  const cCollectionElement_attributeList * p = (const cCollectionElement_attributeList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_attributeList) ;
  return p->mAttribute_mDefaultValueObjectiveCObject ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                            @attributeList type                            *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_attributeList ("attributeList",
                                      NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_attributeList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_attributeList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_attributeList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_attributeList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeList GALGAS_attributeList::extractObject (const GALGAS_object & inObject,
                                                          C_Compiler * inCompiler,
                                                          const GALGAS_location & inErrorLocation
                                                          COMMA_LOCATION_ARGS) {
  GALGAS_attributeList result ;
  const GALGAS_attributeList * p = (const GALGAS_attributeList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_attributeList *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "attributeList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Class for element of '@transientList' list                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_transientList : public cCollectionElement {
//--- List attributes
  public : GALGAS_easyBindingType mAttribute_mType ;
  public : GALGAS_lstring mAttribute_mTransientName ;
  public : GALGAS_lstringlist mAttribute_mDependencyList ;

//--- Constructor
  public : cCollectionElement_transientList (const GALGAS_easyBindingType & in_mType,
                                             const GALGAS_lstring & in_mTransientName,
                                             const GALGAS_lstringlist & in_mDependencyList
                                             COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_transientList::cCollectionElement_transientList (const GALGAS_easyBindingType & in_mType,
                                                                    const GALGAS_lstring & in_mTransientName,
                                                                    const GALGAS_lstringlist & in_mDependencyList
                                                                    COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mAttribute_mType (in_mType),
mAttribute_mTransientName (in_mTransientName),
mAttribute_mDependencyList (in_mDependencyList) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_transientList::isValid (void) const {
  return mAttribute_mType.isValid () && mAttribute_mTransientName.isValid () && mAttribute_mDependencyList.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_transientList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_transientList (mAttribute_mType, mAttribute_mTransientName, mAttribute_mDependencyList COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_transientList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mType" ":" ;
  mAttribute_mType.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mTransientName" ":" ;
  mAttribute_mTransientName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mDependencyList" ":" ;
  mAttribute_mDependencyList.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_transientList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_transientList * operand = (cCollectionElement_transientList *) inOperand ;
  typeComparisonResult result = kOperandEqual ;
  if (kOperandEqual == result) {
    result = mAttribute_mType.objectCompare (operand->mAttribute_mType) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mTransientName.objectCompare (operand->mAttribute_mTransientName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mDependencyList.objectCompare (operand->mAttribute_mDependencyList) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_transientList::GALGAS_transientList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_transientList::GALGAS_transientList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_transientList GALGAS_transientList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_transientList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_transientList GALGAS_transientList::constructor_listWithValue (const GALGAS_easyBindingType & inOperand0,
                                                                      const GALGAS_lstring & inOperand1,
                                                                      const GALGAS_lstringlist & inOperand2
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_transientList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_transientList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_transientList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                      const GALGAS_easyBindingType & in_mType,
                                                      const GALGAS_lstring & in_mTransientName,
                                                      const GALGAS_lstringlist & in_mDependencyList
                                                      COMMA_LOCATION_ARGS) {
  cCollectionElement_transientList * p = NULL ;
  macroMyNew (p, cCollectionElement_transientList (in_mType,
                                                      in_mTransientName,
                                                      in_mDependencyList COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_transientList::addAssign_operation (const GALGAS_easyBindingType & inOperand0,
                                                const GALGAS_lstring & inOperand1,
                                                const GALGAS_lstringlist & inOperand2
                                                COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_transientList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_transientList::modifier_prependValue (GALGAS_easyBindingType inOperand0,
                                                  GALGAS_lstring inOperand1,
                                                  GALGAS_lstringlist inOperand2
                                                  COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_transientList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_transientList::modifier_popFirst (GALGAS_easyBindingType & outOperand0,
                                              GALGAS_lstring & outOperand1,
                                              GALGAS_lstringlist & outOperand2,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_transientList * p = (cCollectionElement_transientList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_transientList) ;
    outOperand0 = p->mAttribute_mType ;
    outOperand1 = p->mAttribute_mTransientName ;
    outOperand2 = p->mAttribute_mDependencyList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_transientList::modifier_popLast (GALGAS_easyBindingType & outOperand0,
                                             GALGAS_lstring & outOperand1,
                                             GALGAS_lstringlist & outOperand2,
                                             C_Compiler * inCompiler
                                             COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_transientList * p = (cCollectionElement_transientList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_transientList) ;
    outOperand0 = p->mAttribute_mType ;
    outOperand1 = p->mAttribute_mTransientName ;
    outOperand2 = p->mAttribute_mDependencyList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_transientList::method_first (GALGAS_easyBindingType & outOperand0,
                                         GALGAS_lstring & outOperand1,
                                         GALGAS_lstringlist & outOperand2,
                                         C_Compiler * inCompiler
                                         COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_transientList * p = (cCollectionElement_transientList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_transientList) ;
    outOperand0 = p->mAttribute_mType ;
    outOperand1 = p->mAttribute_mTransientName ;
    outOperand2 = p->mAttribute_mDependencyList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_transientList::method_last (GALGAS_easyBindingType & outOperand0,
                                        GALGAS_lstring & outOperand1,
                                        GALGAS_lstringlist & outOperand2,
                                        C_Compiler * inCompiler
                                        COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_transientList * p = (cCollectionElement_transientList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_transientList) ;
    outOperand0 = p->mAttribute_mType ;
    outOperand1 = p->mAttribute_mTransientName ;
    outOperand2 = p->mAttribute_mDependencyList ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_transientList GALGAS_transientList::operator_concat (const GALGAS_transientList & inOperand
                                                            COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_transientList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_transientList GALGAS_transientList::reader_subListWithRange (const GALGAS_uint & inIndex,
                                                                    const GALGAS_uint & inLength,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) const {
  GALGAS_transientList result = GALGAS_transientList::constructor_emptyList (THERE) ;
  subListWithRange (result, inIndex, inLength, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_transientList GALGAS_transientList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) const {
  GALGAS_transientList result = GALGAS_transientList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_transientList::dotAssign_operation (const GALGAS_transientList inOperand
                                                COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingType GALGAS_transientList::reader_mTypeAtIndex (const GALGAS_uint & inIndex,
                                                                  C_Compiler * inCompiler
                                                                  COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_transientList * p = (cCollectionElement_transientList *) attributes.ptr () ;
  GALGAS_easyBindingType result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_transientList) ;
    result = p->mAttribute_mType ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_transientList::reader_mTransientNameAtIndex (const GALGAS_uint & inIndex,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_transientList * p = (cCollectionElement_transientList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_transientList) ;
    result = p->mAttribute_mTransientName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstringlist GALGAS_transientList::reader_mDependencyListAtIndex (const GALGAS_uint & inIndex,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_transientList * p = (cCollectionElement_transientList *) attributes.ptr () ;
  GALGAS_lstringlist result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_transientList) ;
    result = p->mAttribute_mDependencyList ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_transientList::cEnumerator_transientList (const GALGAS_transientList & inEnumeratedObject,
                                                      const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingType cEnumerator_transientList::current_mType (LOCATION_ARGS) const {
  const cCollectionElement_transientList * p = (const cCollectionElement_transientList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_transientList) ;
  return p->mAttribute_mType ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_transientList::current_mTransientName (LOCATION_ARGS) const {
  const cCollectionElement_transientList * p = (const cCollectionElement_transientList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_transientList) ;
  return p->mAttribute_mTransientName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstringlist cEnumerator_transientList::current_mDependencyList (LOCATION_ARGS) const {
  const cCollectionElement_transientList * p = (const cCollectionElement_transientList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_transientList) ;
  return p->mAttribute_mDependencyList ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                            @transientList type                            *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_transientList ("transientList",
                                      NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_transientList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_transientList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_transientList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_transientList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_transientList GALGAS_transientList::extractObject (const GALGAS_object & inObject,
                                                          C_Compiler * inCompiler,
                                                          const GALGAS_location & inErrorLocation
                                                          COMMA_LOCATION_ARGS) {
  GALGAS_transientList result ;
  const GALGAS_transientList * p = (const GALGAS_transientList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_transientList *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "transientList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Class for element of '@classList' list                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_classList : public cCollectionElement {
//--- List attributes
  public : GALGAS_lstring mAttribute_mClassName ;
  public : GALGAS_lstring mAttribute_mSuperClassName ;
  public : GALGAS_attributeList mAttribute_mPropertyList ;
  public : GALGAS_transientList mAttribute_mClassTransientList ;

//--- Constructor
  public : cCollectionElement_classList (const GALGAS_lstring & in_mClassName,
                                         const GALGAS_lstring & in_mSuperClassName,
                                         const GALGAS_attributeList & in_mPropertyList,
                                         const GALGAS_transientList & in_mClassTransientList
                                         COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_classList::cCollectionElement_classList (const GALGAS_lstring & in_mClassName,
                                                            const GALGAS_lstring & in_mSuperClassName,
                                                            const GALGAS_attributeList & in_mPropertyList,
                                                            const GALGAS_transientList & in_mClassTransientList
                                                            COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mAttribute_mClassName (in_mClassName),
mAttribute_mSuperClassName (in_mSuperClassName),
mAttribute_mPropertyList (in_mPropertyList),
mAttribute_mClassTransientList (in_mClassTransientList) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_classList::isValid (void) const {
  return mAttribute_mClassName.isValid () && mAttribute_mSuperClassName.isValid () && mAttribute_mPropertyList.isValid () && mAttribute_mClassTransientList.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_classList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_classList (mAttribute_mClassName, mAttribute_mSuperClassName, mAttribute_mPropertyList, mAttribute_mClassTransientList COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_classList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mClassName" ":" ;
  mAttribute_mClassName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mSuperClassName" ":" ;
  mAttribute_mSuperClassName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mPropertyList" ":" ;
  mAttribute_mPropertyList.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mClassTransientList" ":" ;
  mAttribute_mClassTransientList.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_classList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_classList * operand = (cCollectionElement_classList *) inOperand ;
  typeComparisonResult result = kOperandEqual ;
  if (kOperandEqual == result) {
    result = mAttribute_mClassName.objectCompare (operand->mAttribute_mClassName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mSuperClassName.objectCompare (operand->mAttribute_mSuperClassName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mPropertyList.objectCompare (operand->mAttribute_mPropertyList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mClassTransientList.objectCompare (operand->mAttribute_mClassTransientList) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_classList::GALGAS_classList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_classList::GALGAS_classList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_classList GALGAS_classList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_classList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_classList GALGAS_classList::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                              const GALGAS_lstring & inOperand1,
                                                              const GALGAS_attributeList & inOperand2,
                                                              const GALGAS_transientList & inOperand3
                                                              COMMA_LOCATION_ARGS) {
  GALGAS_classList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_classList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2, inOperand3 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_classList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                  const GALGAS_lstring & in_mClassName,
                                                  const GALGAS_lstring & in_mSuperClassName,
                                                  const GALGAS_attributeList & in_mPropertyList,
                                                  const GALGAS_transientList & in_mClassTransientList
                                                  COMMA_LOCATION_ARGS) {
  cCollectionElement_classList * p = NULL ;
  macroMyNew (p, cCollectionElement_classList (in_mClassName,
                                                  in_mSuperClassName,
                                                  in_mPropertyList,
                                                  in_mClassTransientList COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_classList::addAssign_operation (const GALGAS_lstring & inOperand0,
                                            const GALGAS_lstring & inOperand1,
                                            const GALGAS_attributeList & inOperand2,
                                            const GALGAS_transientList & inOperand3
                                            COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_classList (inOperand0, inOperand1, inOperand2, inOperand3 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_classList::modifier_prependValue (GALGAS_lstring inOperand0,
                                              GALGAS_lstring inOperand1,
                                              GALGAS_attributeList inOperand2,
                                              GALGAS_transientList inOperand3
                                              COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_classList (inOperand0, inOperand1, inOperand2, inOperand3 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_classList::modifier_popFirst (GALGAS_lstring & outOperand0,
                                          GALGAS_lstring & outOperand1,
                                          GALGAS_attributeList & outOperand2,
                                          GALGAS_transientList & outOperand3,
                                          C_Compiler * inCompiler
                                          COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_classList * p = (cCollectionElement_classList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_classList) ;
    outOperand0 = p->mAttribute_mClassName ;
    outOperand1 = p->mAttribute_mSuperClassName ;
    outOperand2 = p->mAttribute_mPropertyList ;
    outOperand3 = p->mAttribute_mClassTransientList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_classList::modifier_popLast (GALGAS_lstring & outOperand0,
                                         GALGAS_lstring & outOperand1,
                                         GALGAS_attributeList & outOperand2,
                                         GALGAS_transientList & outOperand3,
                                         C_Compiler * inCompiler
                                         COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_classList * p = (cCollectionElement_classList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_classList) ;
    outOperand0 = p->mAttribute_mClassName ;
    outOperand1 = p->mAttribute_mSuperClassName ;
    outOperand2 = p->mAttribute_mPropertyList ;
    outOperand3 = p->mAttribute_mClassTransientList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_classList::method_first (GALGAS_lstring & outOperand0,
                                     GALGAS_lstring & outOperand1,
                                     GALGAS_attributeList & outOperand2,
                                     GALGAS_transientList & outOperand3,
                                     C_Compiler * inCompiler
                                     COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_classList * p = (cCollectionElement_classList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_classList) ;
    outOperand0 = p->mAttribute_mClassName ;
    outOperand1 = p->mAttribute_mSuperClassName ;
    outOperand2 = p->mAttribute_mPropertyList ;
    outOperand3 = p->mAttribute_mClassTransientList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_classList::method_last (GALGAS_lstring & outOperand0,
                                    GALGAS_lstring & outOperand1,
                                    GALGAS_attributeList & outOperand2,
                                    GALGAS_transientList & outOperand3,
                                    C_Compiler * inCompiler
                                    COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_classList * p = (cCollectionElement_classList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_classList) ;
    outOperand0 = p->mAttribute_mClassName ;
    outOperand1 = p->mAttribute_mSuperClassName ;
    outOperand2 = p->mAttribute_mPropertyList ;
    outOperand3 = p->mAttribute_mClassTransientList ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_classList GALGAS_classList::operator_concat (const GALGAS_classList & inOperand
                                                    COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_classList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_classList GALGAS_classList::reader_subListWithRange (const GALGAS_uint & inIndex,
                                                            const GALGAS_uint & inLength,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) const {
  GALGAS_classList result = GALGAS_classList::constructor_emptyList (THERE) ;
  subListWithRange (result, inIndex, inLength, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_classList GALGAS_classList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) const {
  GALGAS_classList result = GALGAS_classList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_classList::dotAssign_operation (const GALGAS_classList inOperand
                                            COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_classList::reader_mClassNameAtIndex (const GALGAS_uint & inIndex,
                                                           C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_classList * p = (cCollectionElement_classList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_classList) ;
    result = p->mAttribute_mClassName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_classList::reader_mSuperClassNameAtIndex (const GALGAS_uint & inIndex,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_classList * p = (cCollectionElement_classList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_classList) ;
    result = p->mAttribute_mSuperClassName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeList GALGAS_classList::reader_mPropertyListAtIndex (const GALGAS_uint & inIndex,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_classList * p = (cCollectionElement_classList *) attributes.ptr () ;
  GALGAS_attributeList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_classList) ;
    result = p->mAttribute_mPropertyList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_transientList GALGAS_classList::reader_mClassTransientListAtIndex (const GALGAS_uint & inIndex,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_classList * p = (cCollectionElement_classList *) attributes.ptr () ;
  GALGAS_transientList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_classList) ;
    result = p->mAttribute_mClassTransientList ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_classList::cEnumerator_classList (const GALGAS_classList & inEnumeratedObject,
                                              const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_classList::current_mClassName (LOCATION_ARGS) const {
  const cCollectionElement_classList * p = (const cCollectionElement_classList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_classList) ;
  return p->mAttribute_mClassName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_classList::current_mSuperClassName (LOCATION_ARGS) const {
  const cCollectionElement_classList * p = (const cCollectionElement_classList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_classList) ;
  return p->mAttribute_mSuperClassName ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeList cEnumerator_classList::current_mPropertyList (LOCATION_ARGS) const {
  const cCollectionElement_classList * p = (const cCollectionElement_classList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_classList) ;
  return p->mAttribute_mPropertyList ;
}

//---------------------------------------------------------------------------*

GALGAS_transientList cEnumerator_classList::current_mClassTransientList (LOCATION_ARGS) const {
  const cCollectionElement_classList * p = (const cCollectionElement_classList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_classList) ;
  return p->mAttribute_mClassTransientList ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                              @classList type                              *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_classList ("classList",
                                  NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_classList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_classList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_classList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_classList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_classList GALGAS_classList::extractObject (const GALGAS_object & inObject,
                                                  C_Compiler * inCompiler,
                                                  const GALGAS_location & inErrorLocation
                                                  COMMA_LOCATION_ARGS) {
  GALGAS_classList result ;
  const GALGAS_classList * p = (const GALGAS_classList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_classList *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "classList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Class for element of '@entityList' list                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_entityList : public cCollectionElement {
//--- List attributes
  public : GALGAS_lstring mAttribute_mEntityName ;
  public : GALGAS_lstring mAttribute_mSuperEntityName ;
  public : GALGAS_lstring mAttribute_mImplementationClassName ;
  public : GALGAS_attributeList mAttribute_mPropertyList ;
  public : GALGAS_transientList mAttribute_mClassTransientList ;

//--- Constructor
  public : cCollectionElement_entityList (const GALGAS_lstring & in_mEntityName,
                                          const GALGAS_lstring & in_mSuperEntityName,
                                          const GALGAS_lstring & in_mImplementationClassName,
                                          const GALGAS_attributeList & in_mPropertyList,
                                          const GALGAS_transientList & in_mClassTransientList
                                          COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_entityList::cCollectionElement_entityList (const GALGAS_lstring & in_mEntityName,
                                                              const GALGAS_lstring & in_mSuperEntityName,
                                                              const GALGAS_lstring & in_mImplementationClassName,
                                                              const GALGAS_attributeList & in_mPropertyList,
                                                              const GALGAS_transientList & in_mClassTransientList
                                                              COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mAttribute_mEntityName (in_mEntityName),
mAttribute_mSuperEntityName (in_mSuperEntityName),
mAttribute_mImplementationClassName (in_mImplementationClassName),
mAttribute_mPropertyList (in_mPropertyList),
mAttribute_mClassTransientList (in_mClassTransientList) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_entityList::isValid (void) const {
  return mAttribute_mEntityName.isValid () && mAttribute_mSuperEntityName.isValid () && mAttribute_mImplementationClassName.isValid () && mAttribute_mPropertyList.isValid () && mAttribute_mClassTransientList.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_entityList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_entityList (mAttribute_mEntityName, mAttribute_mSuperEntityName, mAttribute_mImplementationClassName, mAttribute_mPropertyList, mAttribute_mClassTransientList COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_entityList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mEntityName" ":" ;
  mAttribute_mEntityName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mSuperEntityName" ":" ;
  mAttribute_mSuperEntityName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mImplementationClassName" ":" ;
  mAttribute_mImplementationClassName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mPropertyList" ":" ;
  mAttribute_mPropertyList.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mClassTransientList" ":" ;
  mAttribute_mClassTransientList.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_entityList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_entityList * operand = (cCollectionElement_entityList *) inOperand ;
  typeComparisonResult result = kOperandEqual ;
  if (kOperandEqual == result) {
    result = mAttribute_mEntityName.objectCompare (operand->mAttribute_mEntityName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mSuperEntityName.objectCompare (operand->mAttribute_mSuperEntityName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mImplementationClassName.objectCompare (operand->mAttribute_mImplementationClassName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mPropertyList.objectCompare (operand->mAttribute_mPropertyList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mClassTransientList.objectCompare (operand->mAttribute_mClassTransientList) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_entityList::GALGAS_entityList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_entityList::GALGAS_entityList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_entityList GALGAS_entityList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_entityList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_entityList GALGAS_entityList::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                                const GALGAS_lstring & inOperand1,
                                                                const GALGAS_lstring & inOperand2,
                                                                const GALGAS_attributeList & inOperand3,
                                                                const GALGAS_transientList & inOperand4
                                                                COMMA_LOCATION_ARGS) {
  GALGAS_entityList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_entityList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2, inOperand3, inOperand4 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_entityList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                   const GALGAS_lstring & in_mEntityName,
                                                   const GALGAS_lstring & in_mSuperEntityName,
                                                   const GALGAS_lstring & in_mImplementationClassName,
                                                   const GALGAS_attributeList & in_mPropertyList,
                                                   const GALGAS_transientList & in_mClassTransientList
                                                   COMMA_LOCATION_ARGS) {
  cCollectionElement_entityList * p = NULL ;
  macroMyNew (p, cCollectionElement_entityList (in_mEntityName,
                                                   in_mSuperEntityName,
                                                   in_mImplementationClassName,
                                                   in_mPropertyList,
                                                   in_mClassTransientList COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_entityList::addAssign_operation (const GALGAS_lstring & inOperand0,
                                             const GALGAS_lstring & inOperand1,
                                             const GALGAS_lstring & inOperand2,
                                             const GALGAS_attributeList & inOperand3,
                                             const GALGAS_transientList & inOperand4
                                             COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_entityList (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_entityList::modifier_prependValue (GALGAS_lstring inOperand0,
                                               GALGAS_lstring inOperand1,
                                               GALGAS_lstring inOperand2,
                                               GALGAS_attributeList inOperand3,
                                               GALGAS_transientList inOperand4
                                               COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_entityList (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_entityList::modifier_popFirst (GALGAS_lstring & outOperand0,
                                           GALGAS_lstring & outOperand1,
                                           GALGAS_lstring & outOperand2,
                                           GALGAS_attributeList & outOperand3,
                                           GALGAS_transientList & outOperand4,
                                           C_Compiler * inCompiler
                                           COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_entityList * p = (cCollectionElement_entityList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_entityList) ;
    outOperand0 = p->mAttribute_mEntityName ;
    outOperand1 = p->mAttribute_mSuperEntityName ;
    outOperand2 = p->mAttribute_mImplementationClassName ;
    outOperand3 = p->mAttribute_mPropertyList ;
    outOperand4 = p->mAttribute_mClassTransientList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_entityList::modifier_popLast (GALGAS_lstring & outOperand0,
                                          GALGAS_lstring & outOperand1,
                                          GALGAS_lstring & outOperand2,
                                          GALGAS_attributeList & outOperand3,
                                          GALGAS_transientList & outOperand4,
                                          C_Compiler * inCompiler
                                          COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_entityList * p = (cCollectionElement_entityList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_entityList) ;
    outOperand0 = p->mAttribute_mEntityName ;
    outOperand1 = p->mAttribute_mSuperEntityName ;
    outOperand2 = p->mAttribute_mImplementationClassName ;
    outOperand3 = p->mAttribute_mPropertyList ;
    outOperand4 = p->mAttribute_mClassTransientList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_entityList::method_first (GALGAS_lstring & outOperand0,
                                      GALGAS_lstring & outOperand1,
                                      GALGAS_lstring & outOperand2,
                                      GALGAS_attributeList & outOperand3,
                                      GALGAS_transientList & outOperand4,
                                      C_Compiler * inCompiler
                                      COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_entityList * p = (cCollectionElement_entityList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_entityList) ;
    outOperand0 = p->mAttribute_mEntityName ;
    outOperand1 = p->mAttribute_mSuperEntityName ;
    outOperand2 = p->mAttribute_mImplementationClassName ;
    outOperand3 = p->mAttribute_mPropertyList ;
    outOperand4 = p->mAttribute_mClassTransientList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_entityList::method_last (GALGAS_lstring & outOperand0,
                                     GALGAS_lstring & outOperand1,
                                     GALGAS_lstring & outOperand2,
                                     GALGAS_attributeList & outOperand3,
                                     GALGAS_transientList & outOperand4,
                                     C_Compiler * inCompiler
                                     COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_entityList * p = (cCollectionElement_entityList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_entityList) ;
    outOperand0 = p->mAttribute_mEntityName ;
    outOperand1 = p->mAttribute_mSuperEntityName ;
    outOperand2 = p->mAttribute_mImplementationClassName ;
    outOperand3 = p->mAttribute_mPropertyList ;
    outOperand4 = p->mAttribute_mClassTransientList ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_entityList GALGAS_entityList::operator_concat (const GALGAS_entityList & inOperand
                                                      COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_entityList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_entityList GALGAS_entityList::reader_subListWithRange (const GALGAS_uint & inIndex,
                                                              const GALGAS_uint & inLength,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) const {
  GALGAS_entityList result = GALGAS_entityList::constructor_emptyList (THERE) ;
  subListWithRange (result, inIndex, inLength, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_entityList GALGAS_entityList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) const {
  GALGAS_entityList result = GALGAS_entityList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_entityList::dotAssign_operation (const GALGAS_entityList inOperand
                                             COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_entityList::reader_mEntityNameAtIndex (const GALGAS_uint & inIndex,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_entityList * p = (cCollectionElement_entityList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_entityList) ;
    result = p->mAttribute_mEntityName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_entityList::reader_mSuperEntityNameAtIndex (const GALGAS_uint & inIndex,
                                                                  C_Compiler * inCompiler
                                                                  COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_entityList * p = (cCollectionElement_entityList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_entityList) ;
    result = p->mAttribute_mSuperEntityName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_entityList::reader_mImplementationClassNameAtIndex (const GALGAS_uint & inIndex,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_entityList * p = (cCollectionElement_entityList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_entityList) ;
    result = p->mAttribute_mImplementationClassName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeList GALGAS_entityList::reader_mPropertyListAtIndex (const GALGAS_uint & inIndex,
                                                                     C_Compiler * inCompiler
                                                                     COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_entityList * p = (cCollectionElement_entityList *) attributes.ptr () ;
  GALGAS_attributeList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_entityList) ;
    result = p->mAttribute_mPropertyList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_transientList GALGAS_entityList::reader_mClassTransientListAtIndex (const GALGAS_uint & inIndex,
                                                                           C_Compiler * inCompiler
                                                                           COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_entityList * p = (cCollectionElement_entityList *) attributes.ptr () ;
  GALGAS_transientList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_entityList) ;
    result = p->mAttribute_mClassTransientList ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_entityList::cEnumerator_entityList (const GALGAS_entityList & inEnumeratedObject,
                                                const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_entityList::current_mEntityName (LOCATION_ARGS) const {
  const cCollectionElement_entityList * p = (const cCollectionElement_entityList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_entityList) ;
  return p->mAttribute_mEntityName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_entityList::current_mSuperEntityName (LOCATION_ARGS) const {
  const cCollectionElement_entityList * p = (const cCollectionElement_entityList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_entityList) ;
  return p->mAttribute_mSuperEntityName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_entityList::current_mImplementationClassName (LOCATION_ARGS) const {
  const cCollectionElement_entityList * p = (const cCollectionElement_entityList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_entityList) ;
  return p->mAttribute_mImplementationClassName ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeList cEnumerator_entityList::current_mPropertyList (LOCATION_ARGS) const {
  const cCollectionElement_entityList * p = (const cCollectionElement_entityList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_entityList) ;
  return p->mAttribute_mPropertyList ;
}

//---------------------------------------------------------------------------*

GALGAS_transientList cEnumerator_entityList::current_mClassTransientList (LOCATION_ARGS) const {
  const cCollectionElement_entityList * p = (const cCollectionElement_entityList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_entityList) ;
  return p->mAttribute_mClassTransientList ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                             @entityList type                              *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_entityList ("entityList",
                                   NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_entityList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_entityList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_entityList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_entityList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_entityList GALGAS_entityList::extractObject (const GALGAS_object & inObject,
                                                    C_Compiler * inCompiler,
                                                    const GALGAS_location & inErrorLocation
                                                    COMMA_LOCATION_ARGS) {
  GALGAS_entityList result ;
  const GALGAS_entityList * p = (const GALGAS_entityList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_entityList *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "entityList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Class for element of '@outletBindingOptionList' list            *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_outletBindingOptionList : public cCollectionElement {
//--- List attributes
  public : GALGAS_lstring mAttribute_mOptionName ;
  public : GALGAS_easyBindingTypeList mAttribute_mOptionValuePossibleTypes ;
  public : GALGAS_string mAttribute_mOptionValueObjectiveCObject ;

//--- Constructor
  public : cCollectionElement_outletBindingOptionList (const GALGAS_lstring & in_mOptionName,
                                                       const GALGAS_easyBindingTypeList & in_mOptionValuePossibleTypes,
                                                       const GALGAS_string & in_mOptionValueObjectiveCObject
                                                       COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_outletBindingOptionList::cCollectionElement_outletBindingOptionList (const GALGAS_lstring & in_mOptionName,
                                                                                        const GALGAS_easyBindingTypeList & in_mOptionValuePossibleTypes,
                                                                                        const GALGAS_string & in_mOptionValueObjectiveCObject
                                                                                        COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mAttribute_mOptionName (in_mOptionName),
mAttribute_mOptionValuePossibleTypes (in_mOptionValuePossibleTypes),
mAttribute_mOptionValueObjectiveCObject (in_mOptionValueObjectiveCObject) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_outletBindingOptionList::isValid (void) const {
  return mAttribute_mOptionName.isValid () && mAttribute_mOptionValuePossibleTypes.isValid () && mAttribute_mOptionValueObjectiveCObject.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_outletBindingOptionList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_outletBindingOptionList (mAttribute_mOptionName, mAttribute_mOptionValuePossibleTypes, mAttribute_mOptionValueObjectiveCObject COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_outletBindingOptionList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mOptionName" ":" ;
  mAttribute_mOptionName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mOptionValuePossibleTypes" ":" ;
  mAttribute_mOptionValuePossibleTypes.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mOptionValueObjectiveCObject" ":" ;
  mAttribute_mOptionValueObjectiveCObject.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_outletBindingOptionList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_outletBindingOptionList * operand = (cCollectionElement_outletBindingOptionList *) inOperand ;
  typeComparisonResult result = kOperandEqual ;
  if (kOperandEqual == result) {
    result = mAttribute_mOptionName.objectCompare (operand->mAttribute_mOptionName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mOptionValuePossibleTypes.objectCompare (operand->mAttribute_mOptionValuePossibleTypes) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mOptionValueObjectiveCObject.objectCompare (operand->mAttribute_mOptionValueObjectiveCObject) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingOptionList::GALGAS_outletBindingOptionList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingOptionList::GALGAS_outletBindingOptionList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingOptionList GALGAS_outletBindingOptionList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_outletBindingOptionList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingOptionList GALGAS_outletBindingOptionList::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                                                          const GALGAS_easyBindingTypeList & inOperand1,
                                                                                          const GALGAS_string & inOperand2
                                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_outletBindingOptionList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_outletBindingOptionList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_outletBindingOptionList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                                const GALGAS_lstring & in_mOptionName,
                                                                const GALGAS_easyBindingTypeList & in_mOptionValuePossibleTypes,
                                                                const GALGAS_string & in_mOptionValueObjectiveCObject
                                                                COMMA_LOCATION_ARGS) {
  cCollectionElement_outletBindingOptionList * p = NULL ;
  macroMyNew (p, cCollectionElement_outletBindingOptionList (in_mOptionName,
                                                                in_mOptionValuePossibleTypes,
                                                                in_mOptionValueObjectiveCObject COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_outletBindingOptionList::addAssign_operation (const GALGAS_lstring & inOperand0,
                                                          const GALGAS_easyBindingTypeList & inOperand1,
                                                          const GALGAS_string & inOperand2
                                                          COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_outletBindingOptionList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletBindingOptionList::modifier_prependValue (GALGAS_lstring inOperand0,
                                                            GALGAS_easyBindingTypeList inOperand1,
                                                            GALGAS_string inOperand2
                                                            COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_outletBindingOptionList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletBindingOptionList::modifier_popFirst (GALGAS_lstring & outOperand0,
                                                        GALGAS_easyBindingTypeList & outOperand1,
                                                        GALGAS_string & outOperand2,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletBindingOptionList * p = (cCollectionElement_outletBindingOptionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletBindingOptionList) ;
    outOperand0 = p->mAttribute_mOptionName ;
    outOperand1 = p->mAttribute_mOptionValuePossibleTypes ;
    outOperand2 = p->mAttribute_mOptionValueObjectiveCObject ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletBindingOptionList::modifier_popLast (GALGAS_lstring & outOperand0,
                                                       GALGAS_easyBindingTypeList & outOperand1,
                                                       GALGAS_string & outOperand2,
                                                       C_Compiler * inCompiler
                                                       COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletBindingOptionList * p = (cCollectionElement_outletBindingOptionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletBindingOptionList) ;
    outOperand0 = p->mAttribute_mOptionName ;
    outOperand1 = p->mAttribute_mOptionValuePossibleTypes ;
    outOperand2 = p->mAttribute_mOptionValueObjectiveCObject ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletBindingOptionList::method_first (GALGAS_lstring & outOperand0,
                                                   GALGAS_easyBindingTypeList & outOperand1,
                                                   GALGAS_string & outOperand2,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletBindingOptionList * p = (cCollectionElement_outletBindingOptionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletBindingOptionList) ;
    outOperand0 = p->mAttribute_mOptionName ;
    outOperand1 = p->mAttribute_mOptionValuePossibleTypes ;
    outOperand2 = p->mAttribute_mOptionValueObjectiveCObject ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletBindingOptionList::method_last (GALGAS_lstring & outOperand0,
                                                  GALGAS_easyBindingTypeList & outOperand1,
                                                  GALGAS_string & outOperand2,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletBindingOptionList * p = (cCollectionElement_outletBindingOptionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletBindingOptionList) ;
    outOperand0 = p->mAttribute_mOptionName ;
    outOperand1 = p->mAttribute_mOptionValuePossibleTypes ;
    outOperand2 = p->mAttribute_mOptionValueObjectiveCObject ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingOptionList GALGAS_outletBindingOptionList::operator_concat (const GALGAS_outletBindingOptionList & inOperand
                                                                                COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_outletBindingOptionList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingOptionList GALGAS_outletBindingOptionList::reader_subListWithRange (const GALGAS_uint & inIndex,
                                                                                        const GALGAS_uint & inLength,
                                                                                        C_Compiler * inCompiler
                                                                                        COMMA_LOCATION_ARGS) const {
  GALGAS_outletBindingOptionList result = GALGAS_outletBindingOptionList::constructor_emptyList (THERE) ;
  subListWithRange (result, inIndex, inLength, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingOptionList GALGAS_outletBindingOptionList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                        C_Compiler * inCompiler
                                                                                        COMMA_LOCATION_ARGS) const {
  GALGAS_outletBindingOptionList result = GALGAS_outletBindingOptionList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_outletBindingOptionList::dotAssign_operation (const GALGAS_outletBindingOptionList inOperand
                                                          COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_outletBindingOptionList::reader_mOptionNameAtIndex (const GALGAS_uint & inIndex,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_outletBindingOptionList * p = (cCollectionElement_outletBindingOptionList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_outletBindingOptionList) ;
    result = p->mAttribute_mOptionName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeList GALGAS_outletBindingOptionList::reader_mOptionValuePossibleTypesAtIndex (const GALGAS_uint & inIndex,
                                                                                                    C_Compiler * inCompiler
                                                                                                    COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_outletBindingOptionList * p = (cCollectionElement_outletBindingOptionList *) attributes.ptr () ;
  GALGAS_easyBindingTypeList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_outletBindingOptionList) ;
    result = p->mAttribute_mOptionValuePossibleTypes ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_string GALGAS_outletBindingOptionList::reader_mOptionValueObjectiveCObjectAtIndex (const GALGAS_uint & inIndex,
                                                                                          C_Compiler * inCompiler
                                                                                          COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_outletBindingOptionList * p = (cCollectionElement_outletBindingOptionList *) attributes.ptr () ;
  GALGAS_string result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_outletBindingOptionList) ;
    result = p->mAttribute_mOptionValueObjectiveCObject ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_outletBindingOptionList::cEnumerator_outletBindingOptionList (const GALGAS_outletBindingOptionList & inEnumeratedObject,
                                                                          const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_outletBindingOptionList::current_mOptionName (LOCATION_ARGS) const {
  const cCollectionElement_outletBindingOptionList * p = (const cCollectionElement_outletBindingOptionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_outletBindingOptionList) ;
  return p->mAttribute_mOptionName ;
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeList cEnumerator_outletBindingOptionList::current_mOptionValuePossibleTypes (LOCATION_ARGS) const {
  const cCollectionElement_outletBindingOptionList * p = (const cCollectionElement_outletBindingOptionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_outletBindingOptionList) ;
  return p->mAttribute_mOptionValuePossibleTypes ;
}

//---------------------------------------------------------------------------*

GALGAS_string cEnumerator_outletBindingOptionList::current_mOptionValueObjectiveCObject (LOCATION_ARGS) const {
  const cCollectionElement_outletBindingOptionList * p = (const cCollectionElement_outletBindingOptionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_outletBindingOptionList) ;
  return p->mAttribute_mOptionValueObjectiveCObject ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                       @outletBindingOptionList type                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_outletBindingOptionList ("outletBindingOptionList",
                                                NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_outletBindingOptionList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_outletBindingOptionList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_outletBindingOptionList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_outletBindingOptionList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingOptionList GALGAS_outletBindingOptionList::extractObject (const GALGAS_object & inObject,
                                                                              C_Compiler * inCompiler,
                                                                              const GALGAS_location & inErrorLocation
                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_outletBindingOptionList result ;
  const GALGAS_outletBindingOptionList * p = (const GALGAS_outletBindingOptionList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_outletBindingOptionList *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "outletBindingOptionList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Class for element of '@outletBindingList' list               *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_outletBindingList : public cCollectionElement {
//--- List attributes
  public : GALGAS_lstring mAttribute_mBindingName ;
  public : GALGAS_lstring mAttribute_mObservedObjectName ;
  public : GALGAS_lstring mAttribute_mObservableAttributeName ;
  public : GALGAS_outletBindingOptionList mAttribute_mOutletBindingOptionList ;

//--- Constructor
  public : cCollectionElement_outletBindingList (const GALGAS_lstring & in_mBindingName,
                                                 const GALGAS_lstring & in_mObservedObjectName,
                                                 const GALGAS_lstring & in_mObservableAttributeName,
                                                 const GALGAS_outletBindingOptionList & in_mOutletBindingOptionList
                                                 COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_outletBindingList::cCollectionElement_outletBindingList (const GALGAS_lstring & in_mBindingName,
                                                                            const GALGAS_lstring & in_mObservedObjectName,
                                                                            const GALGAS_lstring & in_mObservableAttributeName,
                                                                            const GALGAS_outletBindingOptionList & in_mOutletBindingOptionList
                                                                            COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mAttribute_mBindingName (in_mBindingName),
mAttribute_mObservedObjectName (in_mObservedObjectName),
mAttribute_mObservableAttributeName (in_mObservableAttributeName),
mAttribute_mOutletBindingOptionList (in_mOutletBindingOptionList) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_outletBindingList::isValid (void) const {
  return mAttribute_mBindingName.isValid () && mAttribute_mObservedObjectName.isValid () && mAttribute_mObservableAttributeName.isValid () && mAttribute_mOutletBindingOptionList.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_outletBindingList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_outletBindingList (mAttribute_mBindingName, mAttribute_mObservedObjectName, mAttribute_mObservableAttributeName, mAttribute_mOutletBindingOptionList COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_outletBindingList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mBindingName" ":" ;
  mAttribute_mBindingName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mObservedObjectName" ":" ;
  mAttribute_mObservedObjectName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mObservableAttributeName" ":" ;
  mAttribute_mObservableAttributeName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mOutletBindingOptionList" ":" ;
  mAttribute_mOutletBindingOptionList.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_outletBindingList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_outletBindingList * operand = (cCollectionElement_outletBindingList *) inOperand ;
  typeComparisonResult result = kOperandEqual ;
  if (kOperandEqual == result) {
    result = mAttribute_mBindingName.objectCompare (operand->mAttribute_mBindingName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mObservedObjectName.objectCompare (operand->mAttribute_mObservedObjectName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mObservableAttributeName.objectCompare (operand->mAttribute_mObservableAttributeName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mOutletBindingOptionList.objectCompare (operand->mAttribute_mOutletBindingOptionList) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingList::GALGAS_outletBindingList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingList::GALGAS_outletBindingList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingList GALGAS_outletBindingList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_outletBindingList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingList GALGAS_outletBindingList::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                                              const GALGAS_lstring & inOperand1,
                                                                              const GALGAS_lstring & inOperand2,
                                                                              const GALGAS_outletBindingOptionList & inOperand3
                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_outletBindingList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_outletBindingList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2, inOperand3 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_outletBindingList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                          const GALGAS_lstring & in_mBindingName,
                                                          const GALGAS_lstring & in_mObservedObjectName,
                                                          const GALGAS_lstring & in_mObservableAttributeName,
                                                          const GALGAS_outletBindingOptionList & in_mOutletBindingOptionList
                                                          COMMA_LOCATION_ARGS) {
  cCollectionElement_outletBindingList * p = NULL ;
  macroMyNew (p, cCollectionElement_outletBindingList (in_mBindingName,
                                                          in_mObservedObjectName,
                                                          in_mObservableAttributeName,
                                                          in_mOutletBindingOptionList COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_outletBindingList::addAssign_operation (const GALGAS_lstring & inOperand0,
                                                    const GALGAS_lstring & inOperand1,
                                                    const GALGAS_lstring & inOperand2,
                                                    const GALGAS_outletBindingOptionList & inOperand3
                                                    COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_outletBindingList (inOperand0, inOperand1, inOperand2, inOperand3 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletBindingList::modifier_prependValue (GALGAS_lstring inOperand0,
                                                      GALGAS_lstring inOperand1,
                                                      GALGAS_lstring inOperand2,
                                                      GALGAS_outletBindingOptionList inOperand3
                                                      COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_outletBindingList (inOperand0, inOperand1, inOperand2, inOperand3 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletBindingList::modifier_popFirst (GALGAS_lstring & outOperand0,
                                                  GALGAS_lstring & outOperand1,
                                                  GALGAS_lstring & outOperand2,
                                                  GALGAS_outletBindingOptionList & outOperand3,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletBindingList * p = (cCollectionElement_outletBindingList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletBindingList) ;
    outOperand0 = p->mAttribute_mBindingName ;
    outOperand1 = p->mAttribute_mObservedObjectName ;
    outOperand2 = p->mAttribute_mObservableAttributeName ;
    outOperand3 = p->mAttribute_mOutletBindingOptionList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletBindingList::modifier_popLast (GALGAS_lstring & outOperand0,
                                                 GALGAS_lstring & outOperand1,
                                                 GALGAS_lstring & outOperand2,
                                                 GALGAS_outletBindingOptionList & outOperand3,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletBindingList * p = (cCollectionElement_outletBindingList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletBindingList) ;
    outOperand0 = p->mAttribute_mBindingName ;
    outOperand1 = p->mAttribute_mObservedObjectName ;
    outOperand2 = p->mAttribute_mObservableAttributeName ;
    outOperand3 = p->mAttribute_mOutletBindingOptionList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletBindingList::method_first (GALGAS_lstring & outOperand0,
                                             GALGAS_lstring & outOperand1,
                                             GALGAS_lstring & outOperand2,
                                             GALGAS_outletBindingOptionList & outOperand3,
                                             C_Compiler * inCompiler
                                             COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletBindingList * p = (cCollectionElement_outletBindingList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletBindingList) ;
    outOperand0 = p->mAttribute_mBindingName ;
    outOperand1 = p->mAttribute_mObservedObjectName ;
    outOperand2 = p->mAttribute_mObservableAttributeName ;
    outOperand3 = p->mAttribute_mOutletBindingOptionList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletBindingList::method_last (GALGAS_lstring & outOperand0,
                                            GALGAS_lstring & outOperand1,
                                            GALGAS_lstring & outOperand2,
                                            GALGAS_outletBindingOptionList & outOperand3,
                                            C_Compiler * inCompiler
                                            COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletBindingList * p = (cCollectionElement_outletBindingList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletBindingList) ;
    outOperand0 = p->mAttribute_mBindingName ;
    outOperand1 = p->mAttribute_mObservedObjectName ;
    outOperand2 = p->mAttribute_mObservableAttributeName ;
    outOperand3 = p->mAttribute_mOutletBindingOptionList ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingList GALGAS_outletBindingList::operator_concat (const GALGAS_outletBindingList & inOperand
                                                                    COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_outletBindingList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingList GALGAS_outletBindingList::reader_subListWithRange (const GALGAS_uint & inIndex,
                                                                            const GALGAS_uint & inLength,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_LOCATION_ARGS) const {
  GALGAS_outletBindingList result = GALGAS_outletBindingList::constructor_emptyList (THERE) ;
  subListWithRange (result, inIndex, inLength, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingList GALGAS_outletBindingList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_LOCATION_ARGS) const {
  GALGAS_outletBindingList result = GALGAS_outletBindingList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_outletBindingList::dotAssign_operation (const GALGAS_outletBindingList inOperand
                                                    COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_outletBindingList::reader_mBindingNameAtIndex (const GALGAS_uint & inIndex,
                                                                     C_Compiler * inCompiler
                                                                     COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_outletBindingList * p = (cCollectionElement_outletBindingList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_outletBindingList) ;
    result = p->mAttribute_mBindingName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_outletBindingList::reader_mObservedObjectNameAtIndex (const GALGAS_uint & inIndex,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_outletBindingList * p = (cCollectionElement_outletBindingList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_outletBindingList) ;
    result = p->mAttribute_mObservedObjectName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_outletBindingList::reader_mObservableAttributeNameAtIndex (const GALGAS_uint & inIndex,
                                                                                 C_Compiler * inCompiler
                                                                                 COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_outletBindingList * p = (cCollectionElement_outletBindingList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_outletBindingList) ;
    result = p->mAttribute_mObservableAttributeName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingOptionList GALGAS_outletBindingList::reader_mOutletBindingOptionListAtIndex (const GALGAS_uint & inIndex,
                                                                                                 C_Compiler * inCompiler
                                                                                                 COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_outletBindingList * p = (cCollectionElement_outletBindingList *) attributes.ptr () ;
  GALGAS_outletBindingOptionList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_outletBindingList) ;
    result = p->mAttribute_mOutletBindingOptionList ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_outletBindingList::cEnumerator_outletBindingList (const GALGAS_outletBindingList & inEnumeratedObject,
                                                              const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_outletBindingList::current_mBindingName (LOCATION_ARGS) const {
  const cCollectionElement_outletBindingList * p = (const cCollectionElement_outletBindingList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_outletBindingList) ;
  return p->mAttribute_mBindingName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_outletBindingList::current_mObservedObjectName (LOCATION_ARGS) const {
  const cCollectionElement_outletBindingList * p = (const cCollectionElement_outletBindingList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_outletBindingList) ;
  return p->mAttribute_mObservedObjectName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_outletBindingList::current_mObservableAttributeName (LOCATION_ARGS) const {
  const cCollectionElement_outletBindingList * p = (const cCollectionElement_outletBindingList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_outletBindingList) ;
  return p->mAttribute_mObservableAttributeName ;
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingOptionList cEnumerator_outletBindingList::current_mOutletBindingOptionList (LOCATION_ARGS) const {
  const cCollectionElement_outletBindingList * p = (const cCollectionElement_outletBindingList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_outletBindingList) ;
  return p->mAttribute_mOutletBindingOptionList ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                          @outletBindingList type                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_outletBindingList ("outletBindingList",
                                          NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_outletBindingList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_outletBindingList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_outletBindingList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_outletBindingList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingList GALGAS_outletBindingList::extractObject (const GALGAS_object & inObject,
                                                                  C_Compiler * inCompiler,
                                                                  const GALGAS_location & inErrorLocation
                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_outletBindingList result ;
  const GALGAS_outletBindingList * p = (const GALGAS_outletBindingList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_outletBindingList *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "outletBindingList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Class for element of '@outletDeclarationList' list             *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_outletDeclarationList : public cCollectionElement {
//--- List attributes
  public : GALGAS_lstring mAttribute_mOutletType ;
  public : GALGAS_lstring mAttribute_mOutletName ;
  public : GALGAS_outletBindingList mAttribute_mOutletBindingList ;

//--- Constructor
  public : cCollectionElement_outletDeclarationList (const GALGAS_lstring & in_mOutletType,
                                                     const GALGAS_lstring & in_mOutletName,
                                                     const GALGAS_outletBindingList & in_mOutletBindingList
                                                     COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_outletDeclarationList::cCollectionElement_outletDeclarationList (const GALGAS_lstring & in_mOutletType,
                                                                                    const GALGAS_lstring & in_mOutletName,
                                                                                    const GALGAS_outletBindingList & in_mOutletBindingList
                                                                                    COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mAttribute_mOutletType (in_mOutletType),
mAttribute_mOutletName (in_mOutletName),
mAttribute_mOutletBindingList (in_mOutletBindingList) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_outletDeclarationList::isValid (void) const {
  return mAttribute_mOutletType.isValid () && mAttribute_mOutletName.isValid () && mAttribute_mOutletBindingList.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_outletDeclarationList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_outletDeclarationList (mAttribute_mOutletType, mAttribute_mOutletName, mAttribute_mOutletBindingList COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_outletDeclarationList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mOutletType" ":" ;
  mAttribute_mOutletType.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mOutletName" ":" ;
  mAttribute_mOutletName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mOutletBindingList" ":" ;
  mAttribute_mOutletBindingList.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_outletDeclarationList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_outletDeclarationList * operand = (cCollectionElement_outletDeclarationList *) inOperand ;
  typeComparisonResult result = kOperandEqual ;
  if (kOperandEqual == result) {
    result = mAttribute_mOutletType.objectCompare (operand->mAttribute_mOutletType) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mOutletName.objectCompare (operand->mAttribute_mOutletName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mOutletBindingList.objectCompare (operand->mAttribute_mOutletBindingList) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletDeclarationList::GALGAS_outletDeclarationList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_outletDeclarationList::GALGAS_outletDeclarationList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_outletDeclarationList GALGAS_outletDeclarationList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_outletDeclarationList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletDeclarationList GALGAS_outletDeclarationList::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                                                      const GALGAS_lstring & inOperand1,
                                                                                      const GALGAS_outletBindingList & inOperand2
                                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_outletDeclarationList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_outletDeclarationList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_outletDeclarationList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                              const GALGAS_lstring & in_mOutletType,
                                                              const GALGAS_lstring & in_mOutletName,
                                                              const GALGAS_outletBindingList & in_mOutletBindingList
                                                              COMMA_LOCATION_ARGS) {
  cCollectionElement_outletDeclarationList * p = NULL ;
  macroMyNew (p, cCollectionElement_outletDeclarationList (in_mOutletType,
                                                              in_mOutletName,
                                                              in_mOutletBindingList COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_outletDeclarationList::addAssign_operation (const GALGAS_lstring & inOperand0,
                                                        const GALGAS_lstring & inOperand1,
                                                        const GALGAS_outletBindingList & inOperand2
                                                        COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_outletDeclarationList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletDeclarationList::modifier_prependValue (GALGAS_lstring inOperand0,
                                                          GALGAS_lstring inOperand1,
                                                          GALGAS_outletBindingList inOperand2
                                                          COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_outletDeclarationList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletDeclarationList::modifier_popFirst (GALGAS_lstring & outOperand0,
                                                      GALGAS_lstring & outOperand1,
                                                      GALGAS_outletBindingList & outOperand2,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletDeclarationList * p = (cCollectionElement_outletDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletDeclarationList) ;
    outOperand0 = p->mAttribute_mOutletType ;
    outOperand1 = p->mAttribute_mOutletName ;
    outOperand2 = p->mAttribute_mOutletBindingList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletDeclarationList::modifier_popLast (GALGAS_lstring & outOperand0,
                                                     GALGAS_lstring & outOperand1,
                                                     GALGAS_outletBindingList & outOperand2,
                                                     C_Compiler * inCompiler
                                                     COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletDeclarationList * p = (cCollectionElement_outletDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletDeclarationList) ;
    outOperand0 = p->mAttribute_mOutletType ;
    outOperand1 = p->mAttribute_mOutletName ;
    outOperand2 = p->mAttribute_mOutletBindingList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletDeclarationList::method_first (GALGAS_lstring & outOperand0,
                                                 GALGAS_lstring & outOperand1,
                                                 GALGAS_outletBindingList & outOperand2,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletDeclarationList * p = (cCollectionElement_outletDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletDeclarationList) ;
    outOperand0 = p->mAttribute_mOutletType ;
    outOperand1 = p->mAttribute_mOutletName ;
    outOperand2 = p->mAttribute_mOutletBindingList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletDeclarationList::method_last (GALGAS_lstring & outOperand0,
                                                GALGAS_lstring & outOperand1,
                                                GALGAS_outletBindingList & outOperand2,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletDeclarationList * p = (cCollectionElement_outletDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletDeclarationList) ;
    outOperand0 = p->mAttribute_mOutletType ;
    outOperand1 = p->mAttribute_mOutletName ;
    outOperand2 = p->mAttribute_mOutletBindingList ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_outletDeclarationList GALGAS_outletDeclarationList::operator_concat (const GALGAS_outletDeclarationList & inOperand
                                                                            COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_outletDeclarationList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletDeclarationList GALGAS_outletDeclarationList::reader_subListWithRange (const GALGAS_uint & inIndex,
                                                                                    const GALGAS_uint & inLength,
                                                                                    C_Compiler * inCompiler
                                                                                    COMMA_LOCATION_ARGS) const {
  GALGAS_outletDeclarationList result = GALGAS_outletDeclarationList::constructor_emptyList (THERE) ;
  subListWithRange (result, inIndex, inLength, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletDeclarationList GALGAS_outletDeclarationList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                    C_Compiler * inCompiler
                                                                                    COMMA_LOCATION_ARGS) const {
  GALGAS_outletDeclarationList result = GALGAS_outletDeclarationList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_outletDeclarationList::dotAssign_operation (const GALGAS_outletDeclarationList inOperand
                                                        COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_outletDeclarationList::reader_mOutletTypeAtIndex (const GALGAS_uint & inIndex,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_outletDeclarationList * p = (cCollectionElement_outletDeclarationList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_outletDeclarationList) ;
    result = p->mAttribute_mOutletType ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_outletDeclarationList::reader_mOutletNameAtIndex (const GALGAS_uint & inIndex,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_outletDeclarationList * p = (cCollectionElement_outletDeclarationList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_outletDeclarationList) ;
    result = p->mAttribute_mOutletName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingList GALGAS_outletDeclarationList::reader_mOutletBindingListAtIndex (const GALGAS_uint & inIndex,
                                                                                         C_Compiler * inCompiler
                                                                                         COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_outletDeclarationList * p = (cCollectionElement_outletDeclarationList *) attributes.ptr () ;
  GALGAS_outletBindingList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_outletDeclarationList) ;
    result = p->mAttribute_mOutletBindingList ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_outletDeclarationList::cEnumerator_outletDeclarationList (const GALGAS_outletDeclarationList & inEnumeratedObject,
                                                                      const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_outletDeclarationList::current_mOutletType (LOCATION_ARGS) const {
  const cCollectionElement_outletDeclarationList * p = (const cCollectionElement_outletDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_outletDeclarationList) ;
  return p->mAttribute_mOutletType ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_outletDeclarationList::current_mOutletName (LOCATION_ARGS) const {
  const cCollectionElement_outletDeclarationList * p = (const cCollectionElement_outletDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_outletDeclarationList) ;
  return p->mAttribute_mOutletName ;
}

//---------------------------------------------------------------------------*

GALGAS_outletBindingList cEnumerator_outletDeclarationList::current_mOutletBindingList (LOCATION_ARGS) const {
  const cCollectionElement_outletDeclarationList * p = (const cCollectionElement_outletDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_outletDeclarationList) ;
  return p->mAttribute_mOutletBindingList ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                        @outletDeclarationList type                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_outletDeclarationList ("outletDeclarationList",
                                              NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_outletDeclarationList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_outletDeclarationList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_outletDeclarationList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_outletDeclarationList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletDeclarationList GALGAS_outletDeclarationList::extractObject (const GALGAS_object & inObject,
                                                                          C_Compiler * inCompiler,
                                                                          const GALGAS_location & inErrorLocation
                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_outletDeclarationList result ;
  const GALGAS_outletDeclarationList * p = (const GALGAS_outletDeclarationList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_outletDeclarationList *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "outletDeclarationList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Class for element of '@preferencesDeclarationList' list          *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_preferencesDeclarationList : public cCollectionElement {
//--- List attributes
  public : GALGAS_lstring mAttribute_mPreferencesName ;
  public : GALGAS_outletDeclarationList mAttribute_mOutletDeclarationList ;
  public : GALGAS_attributeList mAttribute_mAttributeList ;
  public : GALGAS_transientList mAttribute_mTransientList ;

//--- Constructor
  public : cCollectionElement_preferencesDeclarationList (const GALGAS_lstring & in_mPreferencesName,
                                                          const GALGAS_outletDeclarationList & in_mOutletDeclarationList,
                                                          const GALGAS_attributeList & in_mAttributeList,
                                                          const GALGAS_transientList & in_mTransientList
                                                          COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_preferencesDeclarationList::cCollectionElement_preferencesDeclarationList (const GALGAS_lstring & in_mPreferencesName,
                                                                                              const GALGAS_outletDeclarationList & in_mOutletDeclarationList,
                                                                                              const GALGAS_attributeList & in_mAttributeList,
                                                                                              const GALGAS_transientList & in_mTransientList
                                                                                              COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mAttribute_mPreferencesName (in_mPreferencesName),
mAttribute_mOutletDeclarationList (in_mOutletDeclarationList),
mAttribute_mAttributeList (in_mAttributeList),
mAttribute_mTransientList (in_mTransientList) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_preferencesDeclarationList::isValid (void) const {
  return mAttribute_mPreferencesName.isValid () && mAttribute_mOutletDeclarationList.isValid () && mAttribute_mAttributeList.isValid () && mAttribute_mTransientList.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_preferencesDeclarationList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_preferencesDeclarationList (mAttribute_mPreferencesName, mAttribute_mOutletDeclarationList, mAttribute_mAttributeList, mAttribute_mTransientList COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_preferencesDeclarationList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mPreferencesName" ":" ;
  mAttribute_mPreferencesName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mOutletDeclarationList" ":" ;
  mAttribute_mOutletDeclarationList.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mAttributeList" ":" ;
  mAttribute_mAttributeList.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mTransientList" ":" ;
  mAttribute_mTransientList.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_preferencesDeclarationList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_preferencesDeclarationList * operand = (cCollectionElement_preferencesDeclarationList *) inOperand ;
  typeComparisonResult result = kOperandEqual ;
  if (kOperandEqual == result) {
    result = mAttribute_mPreferencesName.objectCompare (operand->mAttribute_mPreferencesName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mOutletDeclarationList.objectCompare (operand->mAttribute_mOutletDeclarationList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mAttributeList.objectCompare (operand->mAttribute_mAttributeList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mTransientList.objectCompare (operand->mAttribute_mTransientList) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_preferencesDeclarationList::GALGAS_preferencesDeclarationList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_preferencesDeclarationList::GALGAS_preferencesDeclarationList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_preferencesDeclarationList GALGAS_preferencesDeclarationList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_preferencesDeclarationList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_preferencesDeclarationList GALGAS_preferencesDeclarationList::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                                                                const GALGAS_outletDeclarationList & inOperand1,
                                                                                                const GALGAS_attributeList & inOperand2,
                                                                                                const GALGAS_transientList & inOperand3
                                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_preferencesDeclarationList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_preferencesDeclarationList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2, inOperand3 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_preferencesDeclarationList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                                   const GALGAS_lstring & in_mPreferencesName,
                                                                   const GALGAS_outletDeclarationList & in_mOutletDeclarationList,
                                                                   const GALGAS_attributeList & in_mAttributeList,
                                                                   const GALGAS_transientList & in_mTransientList
                                                                   COMMA_LOCATION_ARGS) {
  cCollectionElement_preferencesDeclarationList * p = NULL ;
  macroMyNew (p, cCollectionElement_preferencesDeclarationList (in_mPreferencesName,
                                                                   in_mOutletDeclarationList,
                                                                   in_mAttributeList,
                                                                   in_mTransientList COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_preferencesDeclarationList::addAssign_operation (const GALGAS_lstring & inOperand0,
                                                             const GALGAS_outletDeclarationList & inOperand1,
                                                             const GALGAS_attributeList & inOperand2,
                                                             const GALGAS_transientList & inOperand3
                                                             COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_preferencesDeclarationList (inOperand0, inOperand1, inOperand2, inOperand3 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_preferencesDeclarationList::modifier_prependValue (GALGAS_lstring inOperand0,
                                                               GALGAS_outletDeclarationList inOperand1,
                                                               GALGAS_attributeList inOperand2,
                                                               GALGAS_transientList inOperand3
                                                               COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_preferencesDeclarationList (inOperand0, inOperand1, inOperand2, inOperand3 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_preferencesDeclarationList::modifier_popFirst (GALGAS_lstring & outOperand0,
                                                           GALGAS_outletDeclarationList & outOperand1,
                                                           GALGAS_attributeList & outOperand2,
                                                           GALGAS_transientList & outOperand3,
                                                           C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_preferencesDeclarationList * p = (cCollectionElement_preferencesDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_preferencesDeclarationList) ;
    outOperand0 = p->mAttribute_mPreferencesName ;
    outOperand1 = p->mAttribute_mOutletDeclarationList ;
    outOperand2 = p->mAttribute_mAttributeList ;
    outOperand3 = p->mAttribute_mTransientList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_preferencesDeclarationList::modifier_popLast (GALGAS_lstring & outOperand0,
                                                          GALGAS_outletDeclarationList & outOperand1,
                                                          GALGAS_attributeList & outOperand2,
                                                          GALGAS_transientList & outOperand3,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_preferencesDeclarationList * p = (cCollectionElement_preferencesDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_preferencesDeclarationList) ;
    outOperand0 = p->mAttribute_mPreferencesName ;
    outOperand1 = p->mAttribute_mOutletDeclarationList ;
    outOperand2 = p->mAttribute_mAttributeList ;
    outOperand3 = p->mAttribute_mTransientList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_preferencesDeclarationList::method_first (GALGAS_lstring & outOperand0,
                                                      GALGAS_outletDeclarationList & outOperand1,
                                                      GALGAS_attributeList & outOperand2,
                                                      GALGAS_transientList & outOperand3,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_preferencesDeclarationList * p = (cCollectionElement_preferencesDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_preferencesDeclarationList) ;
    outOperand0 = p->mAttribute_mPreferencesName ;
    outOperand1 = p->mAttribute_mOutletDeclarationList ;
    outOperand2 = p->mAttribute_mAttributeList ;
    outOperand3 = p->mAttribute_mTransientList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_preferencesDeclarationList::method_last (GALGAS_lstring & outOperand0,
                                                     GALGAS_outletDeclarationList & outOperand1,
                                                     GALGAS_attributeList & outOperand2,
                                                     GALGAS_transientList & outOperand3,
                                                     C_Compiler * inCompiler
                                                     COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_preferencesDeclarationList * p = (cCollectionElement_preferencesDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_preferencesDeclarationList) ;
    outOperand0 = p->mAttribute_mPreferencesName ;
    outOperand1 = p->mAttribute_mOutletDeclarationList ;
    outOperand2 = p->mAttribute_mAttributeList ;
    outOperand3 = p->mAttribute_mTransientList ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_preferencesDeclarationList GALGAS_preferencesDeclarationList::operator_concat (const GALGAS_preferencesDeclarationList & inOperand
                                                                                      COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_preferencesDeclarationList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_preferencesDeclarationList GALGAS_preferencesDeclarationList::reader_subListWithRange (const GALGAS_uint & inIndex,
                                                                                              const GALGAS_uint & inLength,
                                                                                              C_Compiler * inCompiler
                                                                                              COMMA_LOCATION_ARGS) const {
  GALGAS_preferencesDeclarationList result = GALGAS_preferencesDeclarationList::constructor_emptyList (THERE) ;
  subListWithRange (result, inIndex, inLength, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_preferencesDeclarationList GALGAS_preferencesDeclarationList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                              C_Compiler * inCompiler
                                                                                              COMMA_LOCATION_ARGS) const {
  GALGAS_preferencesDeclarationList result = GALGAS_preferencesDeclarationList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_preferencesDeclarationList::dotAssign_operation (const GALGAS_preferencesDeclarationList inOperand
                                                             COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_preferencesDeclarationList::reader_mPreferencesNameAtIndex (const GALGAS_uint & inIndex,
                                                                                  C_Compiler * inCompiler
                                                                                  COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_preferencesDeclarationList * p = (cCollectionElement_preferencesDeclarationList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_preferencesDeclarationList) ;
    result = p->mAttribute_mPreferencesName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletDeclarationList GALGAS_preferencesDeclarationList::reader_mOutletDeclarationListAtIndex (const GALGAS_uint & inIndex,
                                                                                                      C_Compiler * inCompiler
                                                                                                      COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_preferencesDeclarationList * p = (cCollectionElement_preferencesDeclarationList *) attributes.ptr () ;
  GALGAS_outletDeclarationList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_preferencesDeclarationList) ;
    result = p->mAttribute_mOutletDeclarationList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeList GALGAS_preferencesDeclarationList::reader_mAttributeListAtIndex (const GALGAS_uint & inIndex,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_preferencesDeclarationList * p = (cCollectionElement_preferencesDeclarationList *) attributes.ptr () ;
  GALGAS_attributeList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_preferencesDeclarationList) ;
    result = p->mAttribute_mAttributeList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_transientList GALGAS_preferencesDeclarationList::reader_mTransientListAtIndex (const GALGAS_uint & inIndex,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_preferencesDeclarationList * p = (cCollectionElement_preferencesDeclarationList *) attributes.ptr () ;
  GALGAS_transientList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_preferencesDeclarationList) ;
    result = p->mAttribute_mTransientList ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_preferencesDeclarationList::cEnumerator_preferencesDeclarationList (const GALGAS_preferencesDeclarationList & inEnumeratedObject,
                                                                                const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_preferencesDeclarationList::current_mPreferencesName (LOCATION_ARGS) const {
  const cCollectionElement_preferencesDeclarationList * p = (const cCollectionElement_preferencesDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_preferencesDeclarationList) ;
  return p->mAttribute_mPreferencesName ;
}

//---------------------------------------------------------------------------*

GALGAS_outletDeclarationList cEnumerator_preferencesDeclarationList::current_mOutletDeclarationList (LOCATION_ARGS) const {
  const cCollectionElement_preferencesDeclarationList * p = (const cCollectionElement_preferencesDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_preferencesDeclarationList) ;
  return p->mAttribute_mOutletDeclarationList ;
}

//---------------------------------------------------------------------------*

GALGAS_attributeList cEnumerator_preferencesDeclarationList::current_mAttributeList (LOCATION_ARGS) const {
  const cCollectionElement_preferencesDeclarationList * p = (const cCollectionElement_preferencesDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_preferencesDeclarationList) ;
  return p->mAttribute_mAttributeList ;
}

//---------------------------------------------------------------------------*

GALGAS_transientList cEnumerator_preferencesDeclarationList::current_mTransientList (LOCATION_ARGS) const {
  const cCollectionElement_preferencesDeclarationList * p = (const cCollectionElement_preferencesDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_preferencesDeclarationList) ;
  return p->mAttribute_mTransientList ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                     @preferencesDeclarationList type                      *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_preferencesDeclarationList ("preferencesDeclarationList",
                                                   NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_preferencesDeclarationList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_preferencesDeclarationList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_preferencesDeclarationList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_preferencesDeclarationList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_preferencesDeclarationList GALGAS_preferencesDeclarationList::extractObject (const GALGAS_object & inObject,
                                                                                    C_Compiler * inCompiler,
                                                                                    const GALGAS_location & inErrorLocation
                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_preferencesDeclarationList result ;
  const GALGAS_preferencesDeclarationList * p = (const GALGAS_preferencesDeclarationList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_preferencesDeclarationList *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "preferencesDeclarationList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Class for element of '@documentDeclarationList' list            *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_documentDeclarationList : public cCollectionElement {
//--- List attributes
  public : GALGAS_lstring mAttribute_mDocumentName ;
  public : GALGAS_lstring mAttribute_mRootEntityName ;
  public : GALGAS_outletDeclarationList mAttribute_mOutletDeclarationList ;

//--- Constructor
  public : cCollectionElement_documentDeclarationList (const GALGAS_lstring & in_mDocumentName,
                                                       const GALGAS_lstring & in_mRootEntityName,
                                                       const GALGAS_outletDeclarationList & in_mOutletDeclarationList
                                                       COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_documentDeclarationList::cCollectionElement_documentDeclarationList (const GALGAS_lstring & in_mDocumentName,
                                                                                        const GALGAS_lstring & in_mRootEntityName,
                                                                                        const GALGAS_outletDeclarationList & in_mOutletDeclarationList
                                                                                        COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mAttribute_mDocumentName (in_mDocumentName),
mAttribute_mRootEntityName (in_mRootEntityName),
mAttribute_mOutletDeclarationList (in_mOutletDeclarationList) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_documentDeclarationList::isValid (void) const {
  return mAttribute_mDocumentName.isValid () && mAttribute_mRootEntityName.isValid () && mAttribute_mOutletDeclarationList.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_documentDeclarationList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_documentDeclarationList (mAttribute_mDocumentName, mAttribute_mRootEntityName, mAttribute_mOutletDeclarationList COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_documentDeclarationList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mDocumentName" ":" ;
  mAttribute_mDocumentName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mRootEntityName" ":" ;
  mAttribute_mRootEntityName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mOutletDeclarationList" ":" ;
  mAttribute_mOutletDeclarationList.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_documentDeclarationList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_documentDeclarationList * operand = (cCollectionElement_documentDeclarationList *) inOperand ;
  typeComparisonResult result = kOperandEqual ;
  if (kOperandEqual == result) {
    result = mAttribute_mDocumentName.objectCompare (operand->mAttribute_mDocumentName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mRootEntityName.objectCompare (operand->mAttribute_mRootEntityName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mOutletDeclarationList.objectCompare (operand->mAttribute_mOutletDeclarationList) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_documentDeclarationList::GALGAS_documentDeclarationList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_documentDeclarationList::GALGAS_documentDeclarationList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_documentDeclarationList GALGAS_documentDeclarationList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_documentDeclarationList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_documentDeclarationList GALGAS_documentDeclarationList::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                                                          const GALGAS_lstring & inOperand1,
                                                                                          const GALGAS_outletDeclarationList & inOperand2
                                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_documentDeclarationList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_documentDeclarationList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_documentDeclarationList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                                const GALGAS_lstring & in_mDocumentName,
                                                                const GALGAS_lstring & in_mRootEntityName,
                                                                const GALGAS_outletDeclarationList & in_mOutletDeclarationList
                                                                COMMA_LOCATION_ARGS) {
  cCollectionElement_documentDeclarationList * p = NULL ;
  macroMyNew (p, cCollectionElement_documentDeclarationList (in_mDocumentName,
                                                                in_mRootEntityName,
                                                                in_mOutletDeclarationList COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_documentDeclarationList::addAssign_operation (const GALGAS_lstring & inOperand0,
                                                          const GALGAS_lstring & inOperand1,
                                                          const GALGAS_outletDeclarationList & inOperand2
                                                          COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_documentDeclarationList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_documentDeclarationList::modifier_prependValue (GALGAS_lstring inOperand0,
                                                            GALGAS_lstring inOperand1,
                                                            GALGAS_outletDeclarationList inOperand2
                                                            COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_documentDeclarationList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_documentDeclarationList::modifier_popFirst (GALGAS_lstring & outOperand0,
                                                        GALGAS_lstring & outOperand1,
                                                        GALGAS_outletDeclarationList & outOperand2,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_documentDeclarationList * p = (cCollectionElement_documentDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_documentDeclarationList) ;
    outOperand0 = p->mAttribute_mDocumentName ;
    outOperand1 = p->mAttribute_mRootEntityName ;
    outOperand2 = p->mAttribute_mOutletDeclarationList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_documentDeclarationList::modifier_popLast (GALGAS_lstring & outOperand0,
                                                       GALGAS_lstring & outOperand1,
                                                       GALGAS_outletDeclarationList & outOperand2,
                                                       C_Compiler * inCompiler
                                                       COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_documentDeclarationList * p = (cCollectionElement_documentDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_documentDeclarationList) ;
    outOperand0 = p->mAttribute_mDocumentName ;
    outOperand1 = p->mAttribute_mRootEntityName ;
    outOperand2 = p->mAttribute_mOutletDeclarationList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_documentDeclarationList::method_first (GALGAS_lstring & outOperand0,
                                                   GALGAS_lstring & outOperand1,
                                                   GALGAS_outletDeclarationList & outOperand2,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_documentDeclarationList * p = (cCollectionElement_documentDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_documentDeclarationList) ;
    outOperand0 = p->mAttribute_mDocumentName ;
    outOperand1 = p->mAttribute_mRootEntityName ;
    outOperand2 = p->mAttribute_mOutletDeclarationList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_documentDeclarationList::method_last (GALGAS_lstring & outOperand0,
                                                  GALGAS_lstring & outOperand1,
                                                  GALGAS_outletDeclarationList & outOperand2,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_documentDeclarationList * p = (cCollectionElement_documentDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_documentDeclarationList) ;
    outOperand0 = p->mAttribute_mDocumentName ;
    outOperand1 = p->mAttribute_mRootEntityName ;
    outOperand2 = p->mAttribute_mOutletDeclarationList ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_documentDeclarationList GALGAS_documentDeclarationList::operator_concat (const GALGAS_documentDeclarationList & inOperand
                                                                                COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_documentDeclarationList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_documentDeclarationList GALGAS_documentDeclarationList::reader_subListWithRange (const GALGAS_uint & inIndex,
                                                                                        const GALGAS_uint & inLength,
                                                                                        C_Compiler * inCompiler
                                                                                        COMMA_LOCATION_ARGS) const {
  GALGAS_documentDeclarationList result = GALGAS_documentDeclarationList::constructor_emptyList (THERE) ;
  subListWithRange (result, inIndex, inLength, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_documentDeclarationList GALGAS_documentDeclarationList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                        C_Compiler * inCompiler
                                                                                        COMMA_LOCATION_ARGS) const {
  GALGAS_documentDeclarationList result = GALGAS_documentDeclarationList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_documentDeclarationList::dotAssign_operation (const GALGAS_documentDeclarationList inOperand
                                                          COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_documentDeclarationList::reader_mDocumentNameAtIndex (const GALGAS_uint & inIndex,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_documentDeclarationList * p = (cCollectionElement_documentDeclarationList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_documentDeclarationList) ;
    result = p->mAttribute_mDocumentName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_documentDeclarationList::reader_mRootEntityNameAtIndex (const GALGAS_uint & inIndex,
                                                                              C_Compiler * inCompiler
                                                                              COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_documentDeclarationList * p = (cCollectionElement_documentDeclarationList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_documentDeclarationList) ;
    result = p->mAttribute_mRootEntityName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletDeclarationList GALGAS_documentDeclarationList::reader_mOutletDeclarationListAtIndex (const GALGAS_uint & inIndex,
                                                                                                   C_Compiler * inCompiler
                                                                                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_documentDeclarationList * p = (cCollectionElement_documentDeclarationList *) attributes.ptr () ;
  GALGAS_outletDeclarationList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_documentDeclarationList) ;
    result = p->mAttribute_mOutletDeclarationList ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_documentDeclarationList::cEnumerator_documentDeclarationList (const GALGAS_documentDeclarationList & inEnumeratedObject,
                                                                          const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_documentDeclarationList::current_mDocumentName (LOCATION_ARGS) const {
  const cCollectionElement_documentDeclarationList * p = (const cCollectionElement_documentDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_documentDeclarationList) ;
  return p->mAttribute_mDocumentName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_documentDeclarationList::current_mRootEntityName (LOCATION_ARGS) const {
  const cCollectionElement_documentDeclarationList * p = (const cCollectionElement_documentDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_documentDeclarationList) ;
  return p->mAttribute_mRootEntityName ;
}

//---------------------------------------------------------------------------*

GALGAS_outletDeclarationList cEnumerator_documentDeclarationList::current_mOutletDeclarationList (LOCATION_ARGS) const {
  const cCollectionElement_documentDeclarationList * p = (const cCollectionElement_documentDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_documentDeclarationList) ;
  return p->mAttribute_mOutletDeclarationList ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                       @documentDeclarationList type                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_documentDeclarationList ("documentDeclarationList",
                                                NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_documentDeclarationList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_documentDeclarationList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_documentDeclarationList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_documentDeclarationList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_documentDeclarationList GALGAS_documentDeclarationList::extractObject (const GALGAS_object & inObject,
                                                                              C_Compiler * inCompiler,
                                                                              const GALGAS_location & inErrorLocation
                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_documentDeclarationList result ;
  const GALGAS_documentDeclarationList * p = (const GALGAS_documentDeclarationList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_documentDeclarationList *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "documentDeclarationList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Class for element of '@easyBindingTypeList' list              *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_easyBindingTypeList : public cCollectionElement {
//--- List attributes
  public : GALGAS_easyBindingType mAttribute_mType ;

//--- Constructor
  public : cCollectionElement_easyBindingTypeList (const GALGAS_easyBindingType & in_mType
                                                   COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_easyBindingTypeList::cCollectionElement_easyBindingTypeList (const GALGAS_easyBindingType & in_mType
                                                                                COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mAttribute_mType (in_mType) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_easyBindingTypeList::isValid (void) const {
  return mAttribute_mType.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_easyBindingTypeList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_easyBindingTypeList (mAttribute_mType COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_easyBindingTypeList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mType" ":" ;
  mAttribute_mType.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_easyBindingTypeList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_easyBindingTypeList * operand = (cCollectionElement_easyBindingTypeList *) inOperand ;
  typeComparisonResult result = kOperandEqual ;
  if (kOperandEqual == result) {
    result = mAttribute_mType.objectCompare (operand->mAttribute_mType) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeList::GALGAS_easyBindingTypeList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeList::GALGAS_easyBindingTypeList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeList GALGAS_easyBindingTypeList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_easyBindingTypeList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeList GALGAS_easyBindingTypeList::constructor_listWithValue (const GALGAS_easyBindingType & inOperand0
                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_easyBindingTypeList result ;
  if (inOperand0.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_easyBindingTypeList::makeAttributesFromObjects (attributes, inOperand0 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_easyBindingTypeList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                            const GALGAS_easyBindingType & in_mType
                                                            COMMA_LOCATION_ARGS) {
  cCollectionElement_easyBindingTypeList * p = NULL ;
  macroMyNew (p, cCollectionElement_easyBindingTypeList (in_mType COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_easyBindingTypeList::addAssign_operation (const GALGAS_easyBindingType & inOperand0
                                                      COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_easyBindingTypeList (inOperand0 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_easyBindingTypeList::modifier_prependValue (GALGAS_easyBindingType inOperand0
                                                        COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_easyBindingTypeList (inOperand0 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_easyBindingTypeList::modifier_popFirst (GALGAS_easyBindingType & outOperand0,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_easyBindingTypeList * p = (cCollectionElement_easyBindingTypeList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_easyBindingTypeList) ;
    outOperand0 = p->mAttribute_mType ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_easyBindingTypeList::modifier_popLast (GALGAS_easyBindingType & outOperand0,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_easyBindingTypeList * p = (cCollectionElement_easyBindingTypeList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_easyBindingTypeList) ;
    outOperand0 = p->mAttribute_mType ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_easyBindingTypeList::method_first (GALGAS_easyBindingType & outOperand0,
                                               C_Compiler * inCompiler
                                               COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_easyBindingTypeList * p = (cCollectionElement_easyBindingTypeList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_easyBindingTypeList) ;
    outOperand0 = p->mAttribute_mType ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_easyBindingTypeList::method_last (GALGAS_easyBindingType & outOperand0,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_easyBindingTypeList * p = (cCollectionElement_easyBindingTypeList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_easyBindingTypeList) ;
    outOperand0 = p->mAttribute_mType ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeList GALGAS_easyBindingTypeList::operator_concat (const GALGAS_easyBindingTypeList & inOperand
                                                                        COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_easyBindingTypeList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeList GALGAS_easyBindingTypeList::reader_subListWithRange (const GALGAS_uint & inIndex,
                                                                                const GALGAS_uint & inLength,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_LOCATION_ARGS) const {
  GALGAS_easyBindingTypeList result = GALGAS_easyBindingTypeList::constructor_emptyList (THERE) ;
  subListWithRange (result, inIndex, inLength, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeList GALGAS_easyBindingTypeList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_LOCATION_ARGS) const {
  GALGAS_easyBindingTypeList result = GALGAS_easyBindingTypeList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_easyBindingTypeList::dotAssign_operation (const GALGAS_easyBindingTypeList inOperand
                                                      COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingType GALGAS_easyBindingTypeList::reader_mTypeAtIndex (const GALGAS_uint & inIndex,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_easyBindingTypeList * p = (cCollectionElement_easyBindingTypeList *) attributes.ptr () ;
  GALGAS_easyBindingType result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_easyBindingTypeList) ;
    result = p->mAttribute_mType ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_easyBindingTypeList::cEnumerator_easyBindingTypeList (const GALGAS_easyBindingTypeList & inEnumeratedObject,
                                                                  const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingType cEnumerator_easyBindingTypeList::current_mType (LOCATION_ARGS) const {
  const cCollectionElement_easyBindingTypeList * p = (const cCollectionElement_easyBindingTypeList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_easyBindingTypeList) ;
  return p->mAttribute_mType ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                         @easyBindingTypeList type                         *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_easyBindingTypeList ("easyBindingTypeList",
                                            NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_easyBindingTypeList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_easyBindingTypeList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_easyBindingTypeList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_easyBindingTypeList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeList GALGAS_easyBindingTypeList::extractObject (const GALGAS_object & inObject,
                                                                      C_Compiler * inCompiler,
                                                                      const GALGAS_location & inErrorLocation
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_easyBindingTypeList result ;
  const GALGAS_easyBindingTypeList * p = (const GALGAS_easyBindingTypeList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_easyBindingTypeList *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "easyBindingTypeList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Class for element of '@outletClassBindingList' list            *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_outletClassBindingList : public cCollectionElement {
//--- List attributes
  public : GALGAS_lstring mAttribute_mBindingName ;
  public : GALGAS_easyBindingTypeList mAttribute_mAcceptableTypeList ;
  public : GALGAS_bindingOptionList mAttribute_mBindingOptionList ;

//--- Constructor
  public : cCollectionElement_outletClassBindingList (const GALGAS_lstring & in_mBindingName,
                                                      const GALGAS_easyBindingTypeList & in_mAcceptableTypeList,
                                                      const GALGAS_bindingOptionList & in_mBindingOptionList
                                                      COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_outletClassBindingList::cCollectionElement_outletClassBindingList (const GALGAS_lstring & in_mBindingName,
                                                                                      const GALGAS_easyBindingTypeList & in_mAcceptableTypeList,
                                                                                      const GALGAS_bindingOptionList & in_mBindingOptionList
                                                                                      COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mAttribute_mBindingName (in_mBindingName),
mAttribute_mAcceptableTypeList (in_mAcceptableTypeList),
mAttribute_mBindingOptionList (in_mBindingOptionList) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_outletClassBindingList::isValid (void) const {
  return mAttribute_mBindingName.isValid () && mAttribute_mAcceptableTypeList.isValid () && mAttribute_mBindingOptionList.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_outletClassBindingList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_outletClassBindingList (mAttribute_mBindingName, mAttribute_mAcceptableTypeList, mAttribute_mBindingOptionList COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_outletClassBindingList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mBindingName" ":" ;
  mAttribute_mBindingName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mAcceptableTypeList" ":" ;
  mAttribute_mAcceptableTypeList.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mBindingOptionList" ":" ;
  mAttribute_mBindingOptionList.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_outletClassBindingList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_outletClassBindingList * operand = (cCollectionElement_outletClassBindingList *) inOperand ;
  typeComparisonResult result = kOperandEqual ;
  if (kOperandEqual == result) {
    result = mAttribute_mBindingName.objectCompare (operand->mAttribute_mBindingName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mAcceptableTypeList.objectCompare (operand->mAttribute_mAcceptableTypeList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mBindingOptionList.objectCompare (operand->mAttribute_mBindingOptionList) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletClassBindingList::GALGAS_outletClassBindingList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_outletClassBindingList::GALGAS_outletClassBindingList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_outletClassBindingList GALGAS_outletClassBindingList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_outletClassBindingList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletClassBindingList GALGAS_outletClassBindingList::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                                                        const GALGAS_easyBindingTypeList & inOperand1,
                                                                                        const GALGAS_bindingOptionList & inOperand2
                                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_outletClassBindingList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_outletClassBindingList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_outletClassBindingList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                               const GALGAS_lstring & in_mBindingName,
                                                               const GALGAS_easyBindingTypeList & in_mAcceptableTypeList,
                                                               const GALGAS_bindingOptionList & in_mBindingOptionList
                                                               COMMA_LOCATION_ARGS) {
  cCollectionElement_outletClassBindingList * p = NULL ;
  macroMyNew (p, cCollectionElement_outletClassBindingList (in_mBindingName,
                                                               in_mAcceptableTypeList,
                                                               in_mBindingOptionList COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_outletClassBindingList::addAssign_operation (const GALGAS_lstring & inOperand0,
                                                         const GALGAS_easyBindingTypeList & inOperand1,
                                                         const GALGAS_bindingOptionList & inOperand2
                                                         COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_outletClassBindingList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletClassBindingList::modifier_prependValue (GALGAS_lstring inOperand0,
                                                           GALGAS_easyBindingTypeList inOperand1,
                                                           GALGAS_bindingOptionList inOperand2
                                                           COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_outletClassBindingList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletClassBindingList::modifier_popFirst (GALGAS_lstring & outOperand0,
                                                       GALGAS_easyBindingTypeList & outOperand1,
                                                       GALGAS_bindingOptionList & outOperand2,
                                                       C_Compiler * inCompiler
                                                       COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletClassBindingList * p = (cCollectionElement_outletClassBindingList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletClassBindingList) ;
    outOperand0 = p->mAttribute_mBindingName ;
    outOperand1 = p->mAttribute_mAcceptableTypeList ;
    outOperand2 = p->mAttribute_mBindingOptionList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletClassBindingList::modifier_popLast (GALGAS_lstring & outOperand0,
                                                      GALGAS_easyBindingTypeList & outOperand1,
                                                      GALGAS_bindingOptionList & outOperand2,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletClassBindingList * p = (cCollectionElement_outletClassBindingList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletClassBindingList) ;
    outOperand0 = p->mAttribute_mBindingName ;
    outOperand1 = p->mAttribute_mAcceptableTypeList ;
    outOperand2 = p->mAttribute_mBindingOptionList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletClassBindingList::method_first (GALGAS_lstring & outOperand0,
                                                  GALGAS_easyBindingTypeList & outOperand1,
                                                  GALGAS_bindingOptionList & outOperand2,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletClassBindingList * p = (cCollectionElement_outletClassBindingList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletClassBindingList) ;
    outOperand0 = p->mAttribute_mBindingName ;
    outOperand1 = p->mAttribute_mAcceptableTypeList ;
    outOperand2 = p->mAttribute_mBindingOptionList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletClassBindingList::method_last (GALGAS_lstring & outOperand0,
                                                 GALGAS_easyBindingTypeList & outOperand1,
                                                 GALGAS_bindingOptionList & outOperand2,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletClassBindingList * p = (cCollectionElement_outletClassBindingList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletClassBindingList) ;
    outOperand0 = p->mAttribute_mBindingName ;
    outOperand1 = p->mAttribute_mAcceptableTypeList ;
    outOperand2 = p->mAttribute_mBindingOptionList ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_outletClassBindingList GALGAS_outletClassBindingList::operator_concat (const GALGAS_outletClassBindingList & inOperand
                                                                              COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_outletClassBindingList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletClassBindingList GALGAS_outletClassBindingList::reader_subListWithRange (const GALGAS_uint & inIndex,
                                                                                      const GALGAS_uint & inLength,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) const {
  GALGAS_outletClassBindingList result = GALGAS_outletClassBindingList::constructor_emptyList (THERE) ;
  subListWithRange (result, inIndex, inLength, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletClassBindingList GALGAS_outletClassBindingList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) const {
  GALGAS_outletClassBindingList result = GALGAS_outletClassBindingList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_outletClassBindingList::dotAssign_operation (const GALGAS_outletClassBindingList inOperand
                                                         COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_outletClassBindingList::reader_mBindingNameAtIndex (const GALGAS_uint & inIndex,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_outletClassBindingList * p = (cCollectionElement_outletClassBindingList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_outletClassBindingList) ;
    result = p->mAttribute_mBindingName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeList GALGAS_outletClassBindingList::reader_mAcceptableTypeListAtIndex (const GALGAS_uint & inIndex,
                                                                                             C_Compiler * inCompiler
                                                                                             COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_outletClassBindingList * p = (cCollectionElement_outletClassBindingList *) attributes.ptr () ;
  GALGAS_easyBindingTypeList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_outletClassBindingList) ;
    result = p->mAttribute_mAcceptableTypeList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bindingOptionList GALGAS_outletClassBindingList::reader_mBindingOptionListAtIndex (const GALGAS_uint & inIndex,
                                                                                          C_Compiler * inCompiler
                                                                                          COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_outletClassBindingList * p = (cCollectionElement_outletClassBindingList *) attributes.ptr () ;
  GALGAS_bindingOptionList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_outletClassBindingList) ;
    result = p->mAttribute_mBindingOptionList ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_outletClassBindingList::cEnumerator_outletClassBindingList (const GALGAS_outletClassBindingList & inEnumeratedObject,
                                                                        const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_outletClassBindingList::current_mBindingName (LOCATION_ARGS) const {
  const cCollectionElement_outletClassBindingList * p = (const cCollectionElement_outletClassBindingList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_outletClassBindingList) ;
  return p->mAttribute_mBindingName ;
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeList cEnumerator_outletClassBindingList::current_mAcceptableTypeList (LOCATION_ARGS) const {
  const cCollectionElement_outletClassBindingList * p = (const cCollectionElement_outletClassBindingList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_outletClassBindingList) ;
  return p->mAttribute_mAcceptableTypeList ;
}

//---------------------------------------------------------------------------*

GALGAS_bindingOptionList cEnumerator_outletClassBindingList::current_mBindingOptionList (LOCATION_ARGS) const {
  const cCollectionElement_outletClassBindingList * p = (const cCollectionElement_outletClassBindingList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_outletClassBindingList) ;
  return p->mAttribute_mBindingOptionList ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                       @outletClassBindingList type                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_outletClassBindingList ("outletClassBindingList",
                                               NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_outletClassBindingList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_outletClassBindingList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_outletClassBindingList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_outletClassBindingList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletClassBindingList GALGAS_outletClassBindingList::extractObject (const GALGAS_object & inObject,
                                                                            C_Compiler * inCompiler,
                                                                            const GALGAS_location & inErrorLocation
                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_outletClassBindingList result ;
  const GALGAS_outletClassBindingList * p = (const GALGAS_outletClassBindingList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_outletClassBindingList *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "outletClassBindingList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Class for element of '@bindingOptionList' list               *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_bindingOptionList : public cCollectionElement {
//--- List attributes
  public : GALGAS_lstring mAttribute_mBindingOptionName ;
  public : GALGAS_easyBindingTypeList mAttribute_mAcceptableTypeList ;

//--- Constructor
  public : cCollectionElement_bindingOptionList (const GALGAS_lstring & in_mBindingOptionName,
                                                 const GALGAS_easyBindingTypeList & in_mAcceptableTypeList
                                                 COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_bindingOptionList::cCollectionElement_bindingOptionList (const GALGAS_lstring & in_mBindingOptionName,
                                                                            const GALGAS_easyBindingTypeList & in_mAcceptableTypeList
                                                                            COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mAttribute_mBindingOptionName (in_mBindingOptionName),
mAttribute_mAcceptableTypeList (in_mAcceptableTypeList) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_bindingOptionList::isValid (void) const {
  return mAttribute_mBindingOptionName.isValid () && mAttribute_mAcceptableTypeList.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_bindingOptionList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_bindingOptionList (mAttribute_mBindingOptionName, mAttribute_mAcceptableTypeList COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_bindingOptionList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mBindingOptionName" ":" ;
  mAttribute_mBindingOptionName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mAcceptableTypeList" ":" ;
  mAttribute_mAcceptableTypeList.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_bindingOptionList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_bindingOptionList * operand = (cCollectionElement_bindingOptionList *) inOperand ;
  typeComparisonResult result = kOperandEqual ;
  if (kOperandEqual == result) {
    result = mAttribute_mBindingOptionName.objectCompare (operand->mAttribute_mBindingOptionName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mAcceptableTypeList.objectCompare (operand->mAttribute_mAcceptableTypeList) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bindingOptionList::GALGAS_bindingOptionList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_bindingOptionList::GALGAS_bindingOptionList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_bindingOptionList GALGAS_bindingOptionList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_bindingOptionList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bindingOptionList GALGAS_bindingOptionList::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                                              const GALGAS_easyBindingTypeList & inOperand1
                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_bindingOptionList result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_bindingOptionList::makeAttributesFromObjects (attributes, inOperand0, inOperand1 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_bindingOptionList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                          const GALGAS_lstring & in_mBindingOptionName,
                                                          const GALGAS_easyBindingTypeList & in_mAcceptableTypeList
                                                          COMMA_LOCATION_ARGS) {
  cCollectionElement_bindingOptionList * p = NULL ;
  macroMyNew (p, cCollectionElement_bindingOptionList (in_mBindingOptionName,
                                                          in_mAcceptableTypeList COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_bindingOptionList::addAssign_operation (const GALGAS_lstring & inOperand0,
                                                    const GALGAS_easyBindingTypeList & inOperand1
                                                    COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_bindingOptionList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_bindingOptionList::modifier_prependValue (GALGAS_lstring inOperand0,
                                                      GALGAS_easyBindingTypeList inOperand1
                                                      COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_bindingOptionList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_bindingOptionList::modifier_popFirst (GALGAS_lstring & outOperand0,
                                                  GALGAS_easyBindingTypeList & outOperand1,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_bindingOptionList * p = (cCollectionElement_bindingOptionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_bindingOptionList) ;
    outOperand0 = p->mAttribute_mBindingOptionName ;
    outOperand1 = p->mAttribute_mAcceptableTypeList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_bindingOptionList::modifier_popLast (GALGAS_lstring & outOperand0,
                                                 GALGAS_easyBindingTypeList & outOperand1,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_bindingOptionList * p = (cCollectionElement_bindingOptionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_bindingOptionList) ;
    outOperand0 = p->mAttribute_mBindingOptionName ;
    outOperand1 = p->mAttribute_mAcceptableTypeList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_bindingOptionList::method_first (GALGAS_lstring & outOperand0,
                                             GALGAS_easyBindingTypeList & outOperand1,
                                             C_Compiler * inCompiler
                                             COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_bindingOptionList * p = (cCollectionElement_bindingOptionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_bindingOptionList) ;
    outOperand0 = p->mAttribute_mBindingOptionName ;
    outOperand1 = p->mAttribute_mAcceptableTypeList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_bindingOptionList::method_last (GALGAS_lstring & outOperand0,
                                            GALGAS_easyBindingTypeList & outOperand1,
                                            C_Compiler * inCompiler
                                            COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_bindingOptionList * p = (cCollectionElement_bindingOptionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_bindingOptionList) ;
    outOperand0 = p->mAttribute_mBindingOptionName ;
    outOperand1 = p->mAttribute_mAcceptableTypeList ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_bindingOptionList GALGAS_bindingOptionList::operator_concat (const GALGAS_bindingOptionList & inOperand
                                                                    COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_bindingOptionList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bindingOptionList GALGAS_bindingOptionList::reader_subListWithRange (const GALGAS_uint & inIndex,
                                                                            const GALGAS_uint & inLength,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_LOCATION_ARGS) const {
  GALGAS_bindingOptionList result = GALGAS_bindingOptionList::constructor_emptyList (THERE) ;
  subListWithRange (result, inIndex, inLength, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bindingOptionList GALGAS_bindingOptionList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_LOCATION_ARGS) const {
  GALGAS_bindingOptionList result = GALGAS_bindingOptionList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_bindingOptionList::dotAssign_operation (const GALGAS_bindingOptionList inOperand
                                                    COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_bindingOptionList::reader_mBindingOptionNameAtIndex (const GALGAS_uint & inIndex,
                                                                           C_Compiler * inCompiler
                                                                           COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_bindingOptionList * p = (cCollectionElement_bindingOptionList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_bindingOptionList) ;
    result = p->mAttribute_mBindingOptionName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeList GALGAS_bindingOptionList::reader_mAcceptableTypeListAtIndex (const GALGAS_uint & inIndex,
                                                                                        C_Compiler * inCompiler
                                                                                        COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_bindingOptionList * p = (cCollectionElement_bindingOptionList *) attributes.ptr () ;
  GALGAS_easyBindingTypeList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_bindingOptionList) ;
    result = p->mAttribute_mAcceptableTypeList ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_bindingOptionList::cEnumerator_bindingOptionList (const GALGAS_bindingOptionList & inEnumeratedObject,
                                                              const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_bindingOptionList::current_mBindingOptionName (LOCATION_ARGS) const {
  const cCollectionElement_bindingOptionList * p = (const cCollectionElement_bindingOptionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_bindingOptionList) ;
  return p->mAttribute_mBindingOptionName ;
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingTypeList cEnumerator_bindingOptionList::current_mAcceptableTypeList (LOCATION_ARGS) const {
  const cCollectionElement_bindingOptionList * p = (const cCollectionElement_bindingOptionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_bindingOptionList) ;
  return p->mAttribute_mAcceptableTypeList ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                          @bindingOptionList type                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_bindingOptionList ("bindingOptionList",
                                          NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_bindingOptionList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_bindingOptionList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_bindingOptionList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_bindingOptionList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bindingOptionList GALGAS_bindingOptionList::extractObject (const GALGAS_object & inObject,
                                                                  C_Compiler * inCompiler,
                                                                  const GALGAS_location & inErrorLocation
                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_bindingOptionList result ;
  const GALGAS_bindingOptionList * p = (const GALGAS_bindingOptionList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_bindingOptionList *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "bindingOptionList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Class for element of '@outletClassList' list                *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_outletClassList : public cCollectionElement {
//--- List attributes
  public : GALGAS_lstring mAttribute_mOutletClassName ;
  public : GALGAS_bool mAttribute_mGenerateCode ;
  public : GALGAS_outletClassBindingList mAttribute_mOutletClassBindingList ;

//--- Constructor
  public : cCollectionElement_outletClassList (const GALGAS_lstring & in_mOutletClassName,
                                               const GALGAS_bool & in_mGenerateCode,
                                               const GALGAS_outletClassBindingList & in_mOutletClassBindingList
                                               COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_outletClassList::cCollectionElement_outletClassList (const GALGAS_lstring & in_mOutletClassName,
                                                                        const GALGAS_bool & in_mGenerateCode,
                                                                        const GALGAS_outletClassBindingList & in_mOutletClassBindingList
                                                                        COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mAttribute_mOutletClassName (in_mOutletClassName),
mAttribute_mGenerateCode (in_mGenerateCode),
mAttribute_mOutletClassBindingList (in_mOutletClassBindingList) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_outletClassList::isValid (void) const {
  return mAttribute_mOutletClassName.isValid () && mAttribute_mGenerateCode.isValid () && mAttribute_mOutletClassBindingList.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_outletClassList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_outletClassList (mAttribute_mOutletClassName, mAttribute_mGenerateCode, mAttribute_mOutletClassBindingList COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_outletClassList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mOutletClassName" ":" ;
  mAttribute_mOutletClassName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mGenerateCode" ":" ;
  mAttribute_mGenerateCode.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mOutletClassBindingList" ":" ;
  mAttribute_mOutletClassBindingList.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_outletClassList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_outletClassList * operand = (cCollectionElement_outletClassList *) inOperand ;
  typeComparisonResult result = kOperandEqual ;
  if (kOperandEqual == result) {
    result = mAttribute_mOutletClassName.objectCompare (operand->mAttribute_mOutletClassName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mGenerateCode.objectCompare (operand->mAttribute_mGenerateCode) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mOutletClassBindingList.objectCompare (operand->mAttribute_mOutletClassBindingList) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletClassList::GALGAS_outletClassList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_outletClassList::GALGAS_outletClassList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_outletClassList GALGAS_outletClassList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_outletClassList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletClassList GALGAS_outletClassList::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                                          const GALGAS_bool & inOperand1,
                                                                          const GALGAS_outletClassBindingList & inOperand2
                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_outletClassList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_outletClassList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_outletClassList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                        const GALGAS_lstring & in_mOutletClassName,
                                                        const GALGAS_bool & in_mGenerateCode,
                                                        const GALGAS_outletClassBindingList & in_mOutletClassBindingList
                                                        COMMA_LOCATION_ARGS) {
  cCollectionElement_outletClassList * p = NULL ;
  macroMyNew (p, cCollectionElement_outletClassList (in_mOutletClassName,
                                                        in_mGenerateCode,
                                                        in_mOutletClassBindingList COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_outletClassList::addAssign_operation (const GALGAS_lstring & inOperand0,
                                                  const GALGAS_bool & inOperand1,
                                                  const GALGAS_outletClassBindingList & inOperand2
                                                  COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_outletClassList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletClassList::modifier_prependValue (GALGAS_lstring inOperand0,
                                                    GALGAS_bool inOperand1,
                                                    GALGAS_outletClassBindingList inOperand2
                                                    COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_outletClassList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletClassList::modifier_popFirst (GALGAS_lstring & outOperand0,
                                                GALGAS_bool & outOperand1,
                                                GALGAS_outletClassBindingList & outOperand2,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletClassList * p = (cCollectionElement_outletClassList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletClassList) ;
    outOperand0 = p->mAttribute_mOutletClassName ;
    outOperand1 = p->mAttribute_mGenerateCode ;
    outOperand2 = p->mAttribute_mOutletClassBindingList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletClassList::modifier_popLast (GALGAS_lstring & outOperand0,
                                               GALGAS_bool & outOperand1,
                                               GALGAS_outletClassBindingList & outOperand2,
                                               C_Compiler * inCompiler
                                               COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletClassList * p = (cCollectionElement_outletClassList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletClassList) ;
    outOperand0 = p->mAttribute_mOutletClassName ;
    outOperand1 = p->mAttribute_mGenerateCode ;
    outOperand2 = p->mAttribute_mOutletClassBindingList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletClassList::method_first (GALGAS_lstring & outOperand0,
                                           GALGAS_bool & outOperand1,
                                           GALGAS_outletClassBindingList & outOperand2,
                                           C_Compiler * inCompiler
                                           COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletClassList * p = (cCollectionElement_outletClassList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletClassList) ;
    outOperand0 = p->mAttribute_mOutletClassName ;
    outOperand1 = p->mAttribute_mGenerateCode ;
    outOperand2 = p->mAttribute_mOutletClassBindingList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_outletClassList::method_last (GALGAS_lstring & outOperand0,
                                          GALGAS_bool & outOperand1,
                                          GALGAS_outletClassBindingList & outOperand2,
                                          C_Compiler * inCompiler
                                          COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_outletClassList * p = (cCollectionElement_outletClassList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_outletClassList) ;
    outOperand0 = p->mAttribute_mOutletClassName ;
    outOperand1 = p->mAttribute_mGenerateCode ;
    outOperand2 = p->mAttribute_mOutletClassBindingList ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_outletClassList GALGAS_outletClassList::operator_concat (const GALGAS_outletClassList & inOperand
                                                                COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_outletClassList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletClassList GALGAS_outletClassList::reader_subListWithRange (const GALGAS_uint & inIndex,
                                                                        const GALGAS_uint & inLength,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) const {
  GALGAS_outletClassList result = GALGAS_outletClassList::constructor_emptyList (THERE) ;
  subListWithRange (result, inIndex, inLength, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletClassList GALGAS_outletClassList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) const {
  GALGAS_outletClassList result = GALGAS_outletClassList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_outletClassList::dotAssign_operation (const GALGAS_outletClassList inOperand
                                                  COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_outletClassList::reader_mOutletClassNameAtIndex (const GALGAS_uint & inIndex,
                                                                       C_Compiler * inCompiler
                                                                       COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_outletClassList * p = (cCollectionElement_outletClassList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_outletClassList) ;
    result = p->mAttribute_mOutletClassName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_outletClassList::reader_mGenerateCodeAtIndex (const GALGAS_uint & inIndex,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_outletClassList * p = (cCollectionElement_outletClassList *) attributes.ptr () ;
  GALGAS_bool result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_outletClassList) ;
    result = p->mAttribute_mGenerateCode ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletClassBindingList GALGAS_outletClassList::reader_mOutletClassBindingListAtIndex (const GALGAS_uint & inIndex,
                                                                                             C_Compiler * inCompiler
                                                                                             COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_outletClassList * p = (cCollectionElement_outletClassList *) attributes.ptr () ;
  GALGAS_outletClassBindingList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_outletClassList) ;
    result = p->mAttribute_mOutletClassBindingList ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_outletClassList::cEnumerator_outletClassList (const GALGAS_outletClassList & inEnumeratedObject,
                                                          const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_outletClassList::current_mOutletClassName (LOCATION_ARGS) const {
  const cCollectionElement_outletClassList * p = (const cCollectionElement_outletClassList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_outletClassList) ;
  return p->mAttribute_mOutletClassName ;
}

//---------------------------------------------------------------------------*

GALGAS_bool cEnumerator_outletClassList::current_mGenerateCode (LOCATION_ARGS) const {
  const cCollectionElement_outletClassList * p = (const cCollectionElement_outletClassList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_outletClassList) ;
  return p->mAttribute_mGenerateCode ;
}

//---------------------------------------------------------------------------*

GALGAS_outletClassBindingList cEnumerator_outletClassList::current_mOutletClassBindingList (LOCATION_ARGS) const {
  const cCollectionElement_outletClassList * p = (const cCollectionElement_outletClassList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_outletClassList) ;
  return p->mAttribute_mOutletClassBindingList ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                           @outletClassList type                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_outletClassList ("outletClassList",
                                        NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_outletClassList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_outletClassList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_outletClassList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_outletClassList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_outletClassList GALGAS_outletClassList::extractObject (const GALGAS_object & inObject,
                                                              C_Compiler * inCompiler,
                                                              const GALGAS_location & inErrorLocation
                                                              COMMA_LOCATION_ARGS) {
  GALGAS_outletClassList result ;
  const GALGAS_outletClassList * p = (const GALGAS_outletClassList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_outletClassList *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "outletClassList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_ASTstruct::GALGAS_ASTstruct (void) :
mAttribute_mClassList (),
mAttribute_mEntityList (),
mAttribute_mPreferencesList (),
mAttribute_mOutletClassList (),
mAttribute_mDocumentDeclarationList () {
}

//---------------------------------------------------------------------------*

GALGAS_ASTstruct::~ GALGAS_ASTstruct (void) {
}

//---------------------------------------------------------------------------*

/* GALGAS_ASTstruct::GALGAS_ASTstruct (const GALGAS_ASTstruct & inSource) :
//mAttribute_mClassList (inSource.mAttribute_mClassList),
//mAttribute_mEntityList (inSource.mAttribute_mEntityList),
//mAttribute_mPreferencesList (inSource.mAttribute_mPreferencesList),
//mAttribute_mOutletClassList (inSource.mAttribute_mOutletClassList),
//mAttribute_mDocumentDeclarationList (inSource.mAttribute_mDocumentDeclarationList) {
} */

//---------------------------------------------------------------------------*

GALGAS_ASTstruct::GALGAS_ASTstruct (const GALGAS_classList & inOperand0,
                                    const GALGAS_entityList & inOperand1,
                                    const GALGAS_preferencesDeclarationList & inOperand2,
                                    const GALGAS_outletClassList & inOperand3,
                                    const GALGAS_documentDeclarationList & inOperand4) :
mAttribute_mClassList (inOperand0),
mAttribute_mEntityList (inOperand1),
mAttribute_mPreferencesList (inOperand2),
mAttribute_mOutletClassList (inOperand3),
mAttribute_mDocumentDeclarationList (inOperand4) {
}

//---------------------------------------------------------------------------*

/* GALGAS_ASTstruct & GALGAS_ASTstruct::operator = (const GALGAS_ASTstruct & inOperand) {
  mAttribute_mClassList = inOperand.mAttribute_mClassList ;
  mAttribute_mEntityList = inOperand.mAttribute_mEntityList ;
  mAttribute_mPreferencesList = inOperand.mAttribute_mPreferencesList ;
  mAttribute_mOutletClassList = inOperand.mAttribute_mOutletClassList ;
  mAttribute_mDocumentDeclarationList = inOperand.mAttribute_mDocumentDeclarationList ;
  return *this ;
} */

//---------------------------------------------------------------------------*

GALGAS_ASTstruct GALGAS_ASTstruct::constructor_new (const GALGAS_classList & inOperand0,
                                                    const GALGAS_entityList & inOperand1,
                                                    const GALGAS_preferencesDeclarationList & inOperand2,
                                                    const GALGAS_outletClassList & inOperand3,
                                                    const GALGAS_documentDeclarationList & inOperand4 
                                                    COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_ASTstruct result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid ()) {
    result = GALGAS_ASTstruct (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_ASTstruct::objectCompare (const GALGAS_ASTstruct & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mClassList.objectCompare (inOperand.mAttribute_mClassList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mEntityList.objectCompare (inOperand.mAttribute_mEntityList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mPreferencesList.objectCompare (inOperand.mAttribute_mPreferencesList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mOutletClassList.objectCompare (inOperand.mAttribute_mOutletClassList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mDocumentDeclarationList.objectCompare (inOperand.mAttribute_mDocumentDeclarationList) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_ASTstruct::isValid (void) const {
  return mAttribute_mClassList.isValid () && mAttribute_mEntityList.isValid () && mAttribute_mPreferencesList.isValid () && mAttribute_mOutletClassList.isValid () && mAttribute_mDocumentDeclarationList.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_ASTstruct::drop (void) {
  mAttribute_mClassList.drop () ;
  mAttribute_mEntityList.drop () ;
  mAttribute_mPreferencesList.drop () ;
  mAttribute_mOutletClassList.drop () ;
  mAttribute_mDocumentDeclarationList.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_ASTstruct::description (C_String & ioString,
                                    const PMSInt32 inIndentation) const {
  ioString << "<struct @ASTstruct:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mClassList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mEntityList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mPreferencesList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mOutletClassList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mDocumentDeclarationList.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_classList GALGAS_ASTstruct::reader_mClassList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mClassList ;
}

//---------------------------------------------------------------------------*

GALGAS_entityList GALGAS_ASTstruct::reader_mEntityList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mEntityList ;
}

//---------------------------------------------------------------------------*

GALGAS_preferencesDeclarationList GALGAS_ASTstruct::reader_mPreferencesList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mPreferencesList ;
}

//---------------------------------------------------------------------------*

GALGAS_outletClassList GALGAS_ASTstruct::reader_mOutletClassList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mOutletClassList ;
}

//---------------------------------------------------------------------------*

GALGAS_documentDeclarationList GALGAS_ASTstruct::reader_mDocumentDeclarationList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mDocumentDeclarationList ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                              @ASTstruct type                              *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_ASTstruct ("ASTstruct",
                                  NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_ASTstruct::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_ASTstruct ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_ASTstruct::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_ASTstruct (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_ASTstruct GALGAS_ASTstruct::extractObject (const GALGAS_object & inObject,
                                                  C_Compiler * inCompiler,
                                                  const GALGAS_location & inErrorLocation
                                                  COMMA_LOCATION_ARGS) {
  GALGAS_ASTstruct result ;
  const GALGAS_ASTstruct * p = (const GALGAS_ASTstruct *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_ASTstruct *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "ASTstruct", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_easyBindingType::objectCompare (const GALGAS_easyBindingType & inOperand) const {
  return (isValid () && inOperand.isValid ()) ? kOperandEqual : kOperandNotValid ;
}


//---------------------------------------------------------------------------*

GALGAS_easyBindingType::GALGAS_easyBindingType (void) :
AC_GALGAS_class () {
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingType::GALGAS_easyBindingType (const cPtr_easyBindingType * inSourcePtr) :
AC_GALGAS_class (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_easyBindingType) ;
}

//---------------------------------------------------------------------------*
//                 Pointer class for @easyBindingType class                  *
//---------------------------------------------------------------------------*

cPtr_easyBindingType::cPtr_easyBindingType (LOCATION_ARGS) :
acPtr_class (THERE) {
}



//---------------------------------------------------------------------------*
//                                                                           *
//                           @easyBindingType type                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_easyBindingType ("easyBindingType",
                                        NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_easyBindingType::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_easyBindingType ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_easyBindingType::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_easyBindingType (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_easyBindingType GALGAS_easyBindingType::extractObject (const GALGAS_object & inObject,
                                                              C_Compiler * inCompiler,
                                                              const GALGAS_location & inErrorLocation
                                                              COMMA_LOCATION_ARGS) {
  GALGAS_easyBindingType result ;
  const GALGAS_easyBindingType * p = (const GALGAS_easyBindingType *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_easyBindingType *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "easyBindingType", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_boolType::objectCompare (const GALGAS_boolType & inOperand) const {
  return (isValid () && inOperand.isValid ()) ? kOperandEqual : kOperandNotValid ;
}


//---------------------------------------------------------------------------*

GALGAS_boolType::GALGAS_boolType (void) :
GALGAS_easyBindingType () {
}

//---------------------------------------------------------------------------*

GALGAS_boolType::GALGAS_boolType (const cPtr_boolType * inSourcePtr) :
GALGAS_easyBindingType (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_boolType) ;
}

//---------------------------------------------------------------------------*

GALGAS_boolType GALGAS_boolType::constructor_new (LOCATION_ARGS) {
  GALGAS_boolType result ;
  macroMyNew (result.mObjectPtr, cPtr_boolType (THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                     Pointer class for @boolType class                     *
//---------------------------------------------------------------------------*

cPtr_boolType::cPtr_boolType (LOCATION_ARGS) :
cPtr_easyBindingType (THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_boolType::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_boolType ;
}

void cPtr_boolType::description (C_String & ioString,
                                 const PMSInt32 /* inIndentation */) const {
  ioString << "[@boolType]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                              @boolType type                               *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_boolType ("boolType",
                                 & kTypeDescriptor_GALGAS_easyBindingType) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_boolType::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_boolType ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_boolType::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_boolType (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_boolType GALGAS_boolType::extractObject (const GALGAS_object & inObject,
                                                C_Compiler * inCompiler,
                                                const GALGAS_location & inErrorLocation
                                                COMMA_LOCATION_ARGS) {
  GALGAS_boolType result ;
  const GALGAS_boolType * p = (const GALGAS_boolType *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_boolType *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "boolType", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_colorType::objectCompare (const GALGAS_colorType & inOperand) const {
  return (isValid () && inOperand.isValid ()) ? kOperandEqual : kOperandNotValid ;
}


//---------------------------------------------------------------------------*

GALGAS_colorType::GALGAS_colorType (void) :
GALGAS_easyBindingType () {
}

//---------------------------------------------------------------------------*

GALGAS_colorType::GALGAS_colorType (const cPtr_colorType * inSourcePtr) :
GALGAS_easyBindingType (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_colorType) ;
}

//---------------------------------------------------------------------------*

GALGAS_colorType GALGAS_colorType::constructor_new (LOCATION_ARGS) {
  GALGAS_colorType result ;
  macroMyNew (result.mObjectPtr, cPtr_colorType (THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                    Pointer class for @colorType class                     *
//---------------------------------------------------------------------------*

cPtr_colorType::cPtr_colorType (LOCATION_ARGS) :
cPtr_easyBindingType (THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_colorType::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_colorType ;
}

void cPtr_colorType::description (C_String & ioString,
                                  const PMSInt32 /* inIndentation */) const {
  ioString << "[@colorType]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                              @colorType type                              *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_colorType ("colorType",
                                  & kTypeDescriptor_GALGAS_easyBindingType) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_colorType::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_colorType ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_colorType::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_colorType (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_colorType GALGAS_colorType::extractObject (const GALGAS_object & inObject,
                                                  C_Compiler * inCompiler,
                                                  const GALGAS_location & inErrorLocation
                                                  COMMA_LOCATION_ARGS) {
  GALGAS_colorType result ;
  const GALGAS_colorType * p = (const GALGAS_colorType *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_colorType *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "colorType", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_dataType::objectCompare (const GALGAS_dataType & inOperand) const {
  return (isValid () && inOperand.isValid ()) ? kOperandEqual : kOperandNotValid ;
}


//---------------------------------------------------------------------------*

GALGAS_dataType::GALGAS_dataType (void) :
GALGAS_easyBindingType () {
}

//---------------------------------------------------------------------------*

GALGAS_dataType::GALGAS_dataType (const cPtr_dataType * inSourcePtr) :
GALGAS_easyBindingType (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_dataType) ;
}

//---------------------------------------------------------------------------*

GALGAS_dataType GALGAS_dataType::constructor_new (LOCATION_ARGS) {
  GALGAS_dataType result ;
  macroMyNew (result.mObjectPtr, cPtr_dataType (THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                     Pointer class for @dataType class                     *
//---------------------------------------------------------------------------*

cPtr_dataType::cPtr_dataType (LOCATION_ARGS) :
cPtr_easyBindingType (THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_dataType::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_dataType ;
}

void cPtr_dataType::description (C_String & ioString,
                                 const PMSInt32 /* inIndentation */) const {
  ioString << "[@dataType]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                              @dataType type                               *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_dataType ("dataType",
                                 & kTypeDescriptor_GALGAS_easyBindingType) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_dataType::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_dataType ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_dataType::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_dataType (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_dataType GALGAS_dataType::extractObject (const GALGAS_object & inObject,
                                                C_Compiler * inCompiler,
                                                const GALGAS_location & inErrorLocation
                                                COMMA_LOCATION_ARGS) {
  GALGAS_dataType result ;
  const GALGAS_dataType * p = (const GALGAS_dataType *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_dataType *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "dataType", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_dateType::objectCompare (const GALGAS_dateType & inOperand) const {
  return (isValid () && inOperand.isValid ()) ? kOperandEqual : kOperandNotValid ;
}


//---------------------------------------------------------------------------*

GALGAS_dateType::GALGAS_dateType (void) :
GALGAS_easyBindingType () {
}

//---------------------------------------------------------------------------*

GALGAS_dateType::GALGAS_dateType (const cPtr_dateType * inSourcePtr) :
GALGAS_easyBindingType (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_dateType) ;
}

//---------------------------------------------------------------------------*

GALGAS_dateType GALGAS_dateType::constructor_new (LOCATION_ARGS) {
  GALGAS_dateType result ;
  macroMyNew (result.mObjectPtr, cPtr_dateType (THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                     Pointer class for @dateType class                     *
//---------------------------------------------------------------------------*

cPtr_dateType::cPtr_dateType (LOCATION_ARGS) :
cPtr_easyBindingType (THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_dateType::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_dateType ;
}

void cPtr_dateType::description (C_String & ioString,
                                 const PMSInt32 /* inIndentation */) const {
  ioString << "[@dateType]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                              @dateType type                               *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_dateType ("dateType",
                                 & kTypeDescriptor_GALGAS_easyBindingType) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_dateType::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_dateType ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_dateType::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_dateType (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_dateType GALGAS_dateType::extractObject (const GALGAS_object & inObject,
                                                C_Compiler * inCompiler,
                                                const GALGAS_location & inErrorLocation
                                                COMMA_LOCATION_ARGS) {
  GALGAS_dateType result ;
  const GALGAS_dateType * p = (const GALGAS_dateType *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_dateType *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "dateType", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_decimalType::objectCompare (const GALGAS_decimalType & inOperand) const {
  return (isValid () && inOperand.isValid ()) ? kOperandEqual : kOperandNotValid ;
}


//---------------------------------------------------------------------------*

GALGAS_decimalType::GALGAS_decimalType (void) :
GALGAS_easyBindingType () {
}

//---------------------------------------------------------------------------*

GALGAS_decimalType::GALGAS_decimalType (const cPtr_decimalType * inSourcePtr) :
GALGAS_easyBindingType (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_decimalType) ;
}

//---------------------------------------------------------------------------*

GALGAS_decimalType GALGAS_decimalType::constructor_new (LOCATION_ARGS) {
  GALGAS_decimalType result ;
  macroMyNew (result.mObjectPtr, cPtr_decimalType (THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                   Pointer class for @decimalType class                    *
//---------------------------------------------------------------------------*

cPtr_decimalType::cPtr_decimalType (LOCATION_ARGS) :
cPtr_easyBindingType (THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_decimalType::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_decimalType ;
}

void cPtr_decimalType::description (C_String & ioString,
                                    const PMSInt32 /* inIndentation */) const {
  ioString << "[@decimalType]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                             @decimalType type                             *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_decimalType ("decimalType",
                                    & kTypeDescriptor_GALGAS_easyBindingType) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_decimalType::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_decimalType ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_decimalType::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_decimalType (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_decimalType GALGAS_decimalType::extractObject (const GALGAS_object & inObject,
                                                      C_Compiler * inCompiler,
                                                      const GALGAS_location & inErrorLocation
                                                      COMMA_LOCATION_ARGS) {
  GALGAS_decimalType result ;
  const GALGAS_decimalType * p = (const GALGAS_decimalType *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_decimalType *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "decimalType", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_doubleType::objectCompare (const GALGAS_doubleType & inOperand) const {
  return (isValid () && inOperand.isValid ()) ? kOperandEqual : kOperandNotValid ;
}


//---------------------------------------------------------------------------*

GALGAS_doubleType::GALGAS_doubleType (void) :
GALGAS_easyBindingType () {
}

//---------------------------------------------------------------------------*

GALGAS_doubleType::GALGAS_doubleType (const cPtr_doubleType * inSourcePtr) :
GALGAS_easyBindingType (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_doubleType) ;
}

//---------------------------------------------------------------------------*

GALGAS_doubleType GALGAS_doubleType::constructor_new (LOCATION_ARGS) {
  GALGAS_doubleType result ;
  macroMyNew (result.mObjectPtr, cPtr_doubleType (THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                    Pointer class for @doubleType class                    *
//---------------------------------------------------------------------------*

cPtr_doubleType::cPtr_doubleType (LOCATION_ARGS) :
cPtr_easyBindingType (THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_doubleType::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_doubleType ;
}

void cPtr_doubleType::description (C_String & ioString,
                                   const PMSInt32 /* inIndentation */) const {
  ioString << "[@doubleType]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                             @doubleType type                              *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_doubleType ("doubleType",
                                   & kTypeDescriptor_GALGAS_easyBindingType) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_doubleType::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_doubleType ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_doubleType::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_doubleType (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_doubleType GALGAS_doubleType::extractObject (const GALGAS_object & inObject,
                                                    C_Compiler * inCompiler,
                                                    const GALGAS_location & inErrorLocation
                                                    COMMA_LOCATION_ARGS) {
  GALGAS_doubleType result ;
  const GALGAS_doubleType * p = (const GALGAS_doubleType *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_doubleType *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "doubleType", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_floatType::objectCompare (const GALGAS_floatType & inOperand) const {
  return (isValid () && inOperand.isValid ()) ? kOperandEqual : kOperandNotValid ;
}


//---------------------------------------------------------------------------*

GALGAS_floatType::GALGAS_floatType (void) :
GALGAS_easyBindingType () {
}

//---------------------------------------------------------------------------*

GALGAS_floatType::GALGAS_floatType (const cPtr_floatType * inSourcePtr) :
GALGAS_easyBindingType (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_floatType) ;
}

//---------------------------------------------------------------------------*

GALGAS_floatType GALGAS_floatType::constructor_new (LOCATION_ARGS) {
  GALGAS_floatType result ;
  macroMyNew (result.mObjectPtr, cPtr_floatType (THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                    Pointer class for @floatType class                     *
//---------------------------------------------------------------------------*

cPtr_floatType::cPtr_floatType (LOCATION_ARGS) :
cPtr_easyBindingType (THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_floatType::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_floatType ;
}

void cPtr_floatType::description (C_String & ioString,
                                  const PMSInt32 /* inIndentation */) const {
  ioString << "[@floatType]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                              @floatType type                              *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_floatType ("floatType",
                                  & kTypeDescriptor_GALGAS_easyBindingType) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_floatType::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_floatType ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_floatType::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_floatType (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_floatType GALGAS_floatType::extractObject (const GALGAS_object & inObject,
                                                  C_Compiler * inCompiler,
                                                  const GALGAS_location & inErrorLocation
                                                  COMMA_LOCATION_ARGS) {
  GALGAS_floatType result ;
  const GALGAS_floatType * p = (const GALGAS_floatType *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_floatType *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "floatType", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_fontType::objectCompare (const GALGAS_fontType & inOperand) const {
  return (isValid () && inOperand.isValid ()) ? kOperandEqual : kOperandNotValid ;
}


//---------------------------------------------------------------------------*

GALGAS_fontType::GALGAS_fontType (void) :
GALGAS_easyBindingType () {
}

//---------------------------------------------------------------------------*

GALGAS_fontType::GALGAS_fontType (const cPtr_fontType * inSourcePtr) :
GALGAS_easyBindingType (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_fontType) ;
}

//---------------------------------------------------------------------------*

GALGAS_fontType GALGAS_fontType::constructor_new (LOCATION_ARGS) {
  GALGAS_fontType result ;
  macroMyNew (result.mObjectPtr, cPtr_fontType (THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                     Pointer class for @fontType class                     *
//---------------------------------------------------------------------------*

cPtr_fontType::cPtr_fontType (LOCATION_ARGS) :
cPtr_easyBindingType (THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_fontType::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_fontType ;
}

void cPtr_fontType::description (C_String & ioString,
                                 const PMSInt32 /* inIndentation */) const {
  ioString << "[@fontType]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                              @fontType type                               *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_fontType ("fontType",
                                 & kTypeDescriptor_GALGAS_easyBindingType) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_fontType::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_fontType ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_fontType::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_fontType (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_fontType GALGAS_fontType::extractObject (const GALGAS_object & inObject,
                                                C_Compiler * inCompiler,
                                                const GALGAS_location & inErrorLocation
                                                COMMA_LOCATION_ARGS) {
  GALGAS_fontType result ;
  const GALGAS_fontType * p = (const GALGAS_fontType *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_fontType *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "fontType", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_imageType::objectCompare (const GALGAS_imageType & inOperand) const {
  return (isValid () && inOperand.isValid ()) ? kOperandEqual : kOperandNotValid ;
}


//---------------------------------------------------------------------------*

GALGAS_imageType::GALGAS_imageType (void) :
GALGAS_easyBindingType () {
}

//---------------------------------------------------------------------------*

GALGAS_imageType::GALGAS_imageType (const cPtr_imageType * inSourcePtr) :
GALGAS_easyBindingType (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_imageType) ;
}

//---------------------------------------------------------------------------*

GALGAS_imageType GALGAS_imageType::constructor_new (LOCATION_ARGS) {
  GALGAS_imageType result ;
  macroMyNew (result.mObjectPtr, cPtr_imageType (THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                    Pointer class for @imageType class                     *
//---------------------------------------------------------------------------*

cPtr_imageType::cPtr_imageType (LOCATION_ARGS) :
cPtr_easyBindingType (THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_imageType::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_imageType ;
}

void cPtr_imageType::description (C_String & ioString,
                                  const PMSInt32 /* inIndentation */) const {
  ioString << "[@imageType]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                              @imageType type                              *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_imageType ("imageType",
                                  & kTypeDescriptor_GALGAS_easyBindingType) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_imageType::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_imageType ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_imageType::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_imageType (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_imageType GALGAS_imageType::extractObject (const GALGAS_object & inObject,
                                                  C_Compiler * inCompiler,
                                                  const GALGAS_location & inErrorLocation
                                                  COMMA_LOCATION_ARGS) {
  GALGAS_imageType result ;
  const GALGAS_imageType * p = (const GALGAS_imageType *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_imageType *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "imageType", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_integer_31__36_Type::objectCompare (const GALGAS_integer_31__36_Type & inOperand) const {
  return (isValid () && inOperand.isValid ()) ? kOperandEqual : kOperandNotValid ;
}


//---------------------------------------------------------------------------*

GALGAS_integer_31__36_Type::GALGAS_integer_31__36_Type (void) :
GALGAS_easyBindingType () {
}

//---------------------------------------------------------------------------*

GALGAS_integer_31__36_Type::GALGAS_integer_31__36_Type (const cPtr_integer_31__36_Type * inSourcePtr) :
GALGAS_easyBindingType (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_integer_31__36_Type) ;
}

//---------------------------------------------------------------------------*

GALGAS_integer_31__36_Type GALGAS_integer_31__36_Type::constructor_new (LOCATION_ARGS) {
  GALGAS_integer_31__36_Type result ;
  macroMyNew (result.mObjectPtr, cPtr_integer_31__36_Type (THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                  Pointer class for @integer16Type class                   *
//---------------------------------------------------------------------------*

cPtr_integer_31__36_Type::cPtr_integer_31__36_Type (LOCATION_ARGS) :
cPtr_easyBindingType (THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_integer_31__36_Type::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_integer_31__36_Type ;
}

void cPtr_integer_31__36_Type::description (C_String & ioString,
                                            const PMSInt32 /* inIndentation */) const {
  ioString << "[@integer16Type]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                            @integer16Type type                            *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_integer_31__36_Type ("integer16Type",
                                            & kTypeDescriptor_GALGAS_easyBindingType) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_integer_31__36_Type::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_integer_31__36_Type ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_integer_31__36_Type::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_integer_31__36_Type (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_integer_31__36_Type GALGAS_integer_31__36_Type::extractObject (const GALGAS_object & inObject,
                                                                      C_Compiler * inCompiler,
                                                                      const GALGAS_location & inErrorLocation
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_integer_31__36_Type result ;
  const GALGAS_integer_31__36_Type * p = (const GALGAS_integer_31__36_Type *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_integer_31__36_Type *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "integer16Type", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_integer_33__32_Type::objectCompare (const GALGAS_integer_33__32_Type & inOperand) const {
  return (isValid () && inOperand.isValid ()) ? kOperandEqual : kOperandNotValid ;
}


//---------------------------------------------------------------------------*

GALGAS_integer_33__32_Type::GALGAS_integer_33__32_Type (void) :
GALGAS_easyBindingType () {
}

//---------------------------------------------------------------------------*

GALGAS_integer_33__32_Type::GALGAS_integer_33__32_Type (const cPtr_integer_33__32_Type * inSourcePtr) :
GALGAS_easyBindingType (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_integer_33__32_Type) ;
}

//---------------------------------------------------------------------------*

GALGAS_integer_33__32_Type GALGAS_integer_33__32_Type::constructor_new (LOCATION_ARGS) {
  GALGAS_integer_33__32_Type result ;
  macroMyNew (result.mObjectPtr, cPtr_integer_33__32_Type (THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                  Pointer class for @integer32Type class                   *
//---------------------------------------------------------------------------*

cPtr_integer_33__32_Type::cPtr_integer_33__32_Type (LOCATION_ARGS) :
cPtr_easyBindingType (THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_integer_33__32_Type::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_integer_33__32_Type ;
}

void cPtr_integer_33__32_Type::description (C_String & ioString,
                                            const PMSInt32 /* inIndentation */) const {
  ioString << "[@integer32Type]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                            @integer32Type type                            *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_integer_33__32_Type ("integer32Type",
                                            & kTypeDescriptor_GALGAS_easyBindingType) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_integer_33__32_Type::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_integer_33__32_Type ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_integer_33__32_Type::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_integer_33__32_Type (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_integer_33__32_Type GALGAS_integer_33__32_Type::extractObject (const GALGAS_object & inObject,
                                                                      C_Compiler * inCompiler,
                                                                      const GALGAS_location & inErrorLocation
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_integer_33__32_Type result ;
  const GALGAS_integer_33__32_Type * p = (const GALGAS_integer_33__32_Type *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_integer_33__32_Type *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "integer32Type", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_integer_36__34_Type::objectCompare (const GALGAS_integer_36__34_Type & inOperand) const {
  return (isValid () && inOperand.isValid ()) ? kOperandEqual : kOperandNotValid ;
}


//---------------------------------------------------------------------------*

GALGAS_integer_36__34_Type::GALGAS_integer_36__34_Type (void) :
GALGAS_easyBindingType () {
}

//---------------------------------------------------------------------------*

GALGAS_integer_36__34_Type::GALGAS_integer_36__34_Type (const cPtr_integer_36__34_Type * inSourcePtr) :
GALGAS_easyBindingType (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_integer_36__34_Type) ;
}

//---------------------------------------------------------------------------*

GALGAS_integer_36__34_Type GALGAS_integer_36__34_Type::constructor_new (LOCATION_ARGS) {
  GALGAS_integer_36__34_Type result ;
  macroMyNew (result.mObjectPtr, cPtr_integer_36__34_Type (THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                  Pointer class for @integer64Type class                   *
//---------------------------------------------------------------------------*

cPtr_integer_36__34_Type::cPtr_integer_36__34_Type (LOCATION_ARGS) :
cPtr_easyBindingType (THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_integer_36__34_Type::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_integer_36__34_Type ;
}

void cPtr_integer_36__34_Type::description (C_String & ioString,
                                            const PMSInt32 /* inIndentation */) const {
  ioString << "[@integer64Type]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                            @integer64Type type                            *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_integer_36__34_Type ("integer64Type",
                                            & kTypeDescriptor_GALGAS_easyBindingType) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_integer_36__34_Type::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_integer_36__34_Type ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_integer_36__34_Type::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_integer_36__34_Type (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_integer_36__34_Type GALGAS_integer_36__34_Type::extractObject (const GALGAS_object & inObject,
                                                                      C_Compiler * inCompiler,
                                                                      const GALGAS_location & inErrorLocation
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_integer_36__34_Type result ;
  const GALGAS_integer_36__34_Type * p = (const GALGAS_integer_36__34_Type *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_integer_36__34_Type *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "integer64Type", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_stringType::objectCompare (const GALGAS_stringType & inOperand) const {
  return (isValid () && inOperand.isValid ()) ? kOperandEqual : kOperandNotValid ;
}


//---------------------------------------------------------------------------*

GALGAS_stringType::GALGAS_stringType (void) :
GALGAS_easyBindingType () {
}

//---------------------------------------------------------------------------*

GALGAS_stringType::GALGAS_stringType (const cPtr_stringType * inSourcePtr) :
GALGAS_easyBindingType (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_stringType) ;
}

//---------------------------------------------------------------------------*

GALGAS_stringType GALGAS_stringType::constructor_new (LOCATION_ARGS) {
  GALGAS_stringType result ;
  macroMyNew (result.mObjectPtr, cPtr_stringType (THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                    Pointer class for @stringType class                    *
//---------------------------------------------------------------------------*

cPtr_stringType::cPtr_stringType (LOCATION_ARGS) :
cPtr_easyBindingType (THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_stringType::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_stringType ;
}

void cPtr_stringType::description (C_String & ioString,
                                   const PMSInt32 /* inIndentation */) const {
  ioString << "[@stringType]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                             @stringType type                              *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_stringType ("stringType",
                                   & kTypeDescriptor_GALGAS_easyBindingType) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_stringType::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_stringType ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_stringType::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_stringType (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_stringType GALGAS_stringType::extractObject (const GALGAS_object & inObject,
                                                    C_Compiler * inCompiler,
                                                    const GALGAS_location & inErrorLocation
                                                    COMMA_LOCATION_ARGS) {
  GALGAS_stringType result ;
  const GALGAS_stringType * p = (const GALGAS_stringType *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_stringType *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "stringType", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Abstract category reader '@easyBindingType ebTypeName'           *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <categoryReaderSignature_easyBindingType_ebTypeName> gCategoryReaderTable_easyBindingType_ebTypeName ;

//---------------------------------------------------------------------------*

void enterCategoryReader_ebTypeName (const PMSInt32 inClassIndex,
                                     categoryReaderSignature_easyBindingType_ebTypeName inReader) {
  gCategoryReaderTable_easyBindingType_ebTypeName.forceObjectAtIndex (inClassIndex, inReader, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

static void freeCategoryReader_easyBindingType_ebTypeName (void) {
  gCategoryReaderTable_easyBindingType_ebTypeName.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gReader_easyBindingType_ebTypeName (NULL,
                                                       freeCategoryReader_easyBindingType_ebTypeName) ;

//---------------------------------------------------------------------------*

GALGAS_string callCategoryReader_ebTypeName (const cPtr_easyBindingType * inObject,
                                             C_Compiler * inCompiler
                                             COMMA_LOCATION_ARGS) {
  GALGAS_string result ;
//--- Find Reader
  if (NULL != inObject) {
    macroValidSharedObject (inObject, const cPtr_easyBindingType) ;
    const C_galgas_type_descriptor * info = inObject->classDescriptor () ;
    const PMSInt32 classIndex = info->mSlotID ;
    categoryReaderSignature_easyBindingType_ebTypeName f = NULL ;
    if (classIndex < gCategoryReaderTable_easyBindingType_ebTypeName.count ()) {
      f = gCategoryReaderTable_easyBindingType_ebTypeName (classIndex COMMA_HERE) ;
    }
    if (NULL == f) {
       const C_galgas_type_descriptor * p = info->mSuperclassDescriptor ;
       while ((NULL == f) && (NULL != p)) {
         if (p->mSlotID < gCategoryReaderTable_easyBindingType_ebTypeName.count ()) {
           f = gCategoryReaderTable_easyBindingType_ebTypeName (p->mSlotID COMMA_HERE) ;
         }
         p = p->mSuperclassDescriptor ;
       }
       gCategoryReaderTable_easyBindingType_ebTypeName.forceObjectAtIndex (classIndex, f, NULL COMMA_HERE) ;
    }
    result = f (inObject, inCompiler COMMA_THERE) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Overriding category reader '@boolType ebTypeName'             *
//                                                                           *
//---------------------------------------------------------------------------*

static GALGAS_string categoryReader_boolType_ebTypeName (const cPtr_easyBindingType * /* inObject */,
                                                         C_Compiler * /* inCompiler */
                                                         COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  //-------- @assignmentInstructionForGeneration
  result_outResult = GALGAS_string ("bool") ;
//---
  return result_outResult ;
}


//---------------------------------------------------------------------------*

static void defineCategoryReader_boolType_ebTypeName (void) {
  enterCategoryReader_ebTypeName (kTypeDescriptor_GALGAS_boolType.mSlotID,
                                  categoryReader_boolType_ebTypeName) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gReader_boolType_ebTypeName (defineCategoryReader_boolType_ebTypeName, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//          Overriding category reader '@integer16Type ebTypeName'           *
//                                                                           *
//---------------------------------------------------------------------------*

static GALGAS_string categoryReader_integer_31__36_Type_ebTypeName (const cPtr_easyBindingType * /* inObject */,
                                                                    C_Compiler * /* inCompiler */
                                                                    COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  //-------- @assignmentInstructionForGeneration
  result_outResult = GALGAS_string ("integer16") ;
//---
  return result_outResult ;
}


//---------------------------------------------------------------------------*

static void defineCategoryReader_integer_31__36_Type_ebTypeName (void) {
  enterCategoryReader_ebTypeName (kTypeDescriptor_GALGAS_integer_31__36_Type.mSlotID,
                                  categoryReader_integer_31__36_Type_ebTypeName) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gReader_integer_31__36_Type_ebTypeName (defineCategoryReader_integer_31__36_Type_ebTypeName, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//          Overriding category reader '@integer32Type ebTypeName'           *
//                                                                           *
//---------------------------------------------------------------------------*

static GALGAS_string categoryReader_integer_33__32_Type_ebTypeName (const cPtr_easyBindingType * /* inObject */,
                                                                    C_Compiler * /* inCompiler */
                                                                    COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  //-------- @assignmentInstructionForGeneration
  result_outResult = GALGAS_string ("integer32") ;
//---
  return result_outResult ;
}


//---------------------------------------------------------------------------*

static void defineCategoryReader_integer_33__32_Type_ebTypeName (void) {
  enterCategoryReader_ebTypeName (kTypeDescriptor_GALGAS_integer_33__32_Type.mSlotID,
                                  categoryReader_integer_33__32_Type_ebTypeName) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gReader_integer_33__32_Type_ebTypeName (defineCategoryReader_integer_33__32_Type_ebTypeName, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//          Overriding category reader '@integer64Type ebTypeName'           *
//                                                                           *
//---------------------------------------------------------------------------*

static GALGAS_string categoryReader_integer_36__34_Type_ebTypeName (const cPtr_easyBindingType * /* inObject */,
                                                                    C_Compiler * /* inCompiler */
                                                                    COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  //-------- @assignmentInstructionForGeneration
  result_outResult = GALGAS_string ("integer64") ;
//---
  return result_outResult ;
}


//---------------------------------------------------------------------------*

static void defineCategoryReader_integer_36__34_Type_ebTypeName (void) {
  enterCategoryReader_ebTypeName (kTypeDescriptor_GALGAS_integer_36__34_Type.mSlotID,
                                  categoryReader_integer_36__34_Type_ebTypeName) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gReader_integer_36__34_Type_ebTypeName (defineCategoryReader_integer_36__34_Type_ebTypeName, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//           Overriding category reader '@decimalType ebTypeName'            *
//                                                                           *
//---------------------------------------------------------------------------*

static GALGAS_string categoryReader_decimalType_ebTypeName (const cPtr_easyBindingType * /* inObject */,
                                                            C_Compiler * /* inCompiler */
                                                            COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  //-------- @assignmentInstructionForGeneration
  result_outResult = GALGAS_string ("decimal") ;
//---
  return result_outResult ;
}


//---------------------------------------------------------------------------*

static void defineCategoryReader_decimalType_ebTypeName (void) {
  enterCategoryReader_ebTypeName (kTypeDescriptor_GALGAS_decimalType.mSlotID,
                                  categoryReader_decimalType_ebTypeName) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gReader_decimalType_ebTypeName (defineCategoryReader_decimalType_ebTypeName, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//            Overriding category reader '@floatType ebTypeName'             *
//                                                                           *
//---------------------------------------------------------------------------*

static GALGAS_string categoryReader_floatType_ebTypeName (const cPtr_easyBindingType * /* inObject */,
                                                          C_Compiler * /* inCompiler */
                                                          COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  //-------- @assignmentInstructionForGeneration
  result_outResult = GALGAS_string ("float") ;
//---
  return result_outResult ;
}


//---------------------------------------------------------------------------*

static void defineCategoryReader_floatType_ebTypeName (void) {
  enterCategoryReader_ebTypeName (kTypeDescriptor_GALGAS_floatType.mSlotID,
                                  categoryReader_floatType_ebTypeName) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gReader_floatType_ebTypeName (defineCategoryReader_floatType_ebTypeName, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//            Overriding category reader '@doubleType ebTypeName'            *
//                                                                           *
//---------------------------------------------------------------------------*

static GALGAS_string categoryReader_doubleType_ebTypeName (const cPtr_easyBindingType * /* inObject */,
                                                           C_Compiler * /* inCompiler */
                                                           COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  //-------- @assignmentInstructionForGeneration
  result_outResult = GALGAS_string ("double") ;
//---
  return result_outResult ;
}


//---------------------------------------------------------------------------*

static void defineCategoryReader_doubleType_ebTypeName (void) {
  enterCategoryReader_ebTypeName (kTypeDescriptor_GALGAS_doubleType.mSlotID,
                                  categoryReader_doubleType_ebTypeName) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gReader_doubleType_ebTypeName (defineCategoryReader_doubleType_ebTypeName, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//            Overriding category reader '@stringType ebTypeName'            *
//                                                                           *
//---------------------------------------------------------------------------*

static GALGAS_string categoryReader_stringType_ebTypeName (const cPtr_easyBindingType * /* inObject */,
                                                           C_Compiler * /* inCompiler */
                                                           COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  //-------- @assignmentInstructionForGeneration
  result_outResult = GALGAS_string ("NSString") ;
//---
  return result_outResult ;
}


//---------------------------------------------------------------------------*

static void defineCategoryReader_stringType_ebTypeName (void) {
  enterCategoryReader_ebTypeName (kTypeDescriptor_GALGAS_stringType.mSlotID,
                                  categoryReader_stringType_ebTypeName) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gReader_stringType_ebTypeName (defineCategoryReader_stringType_ebTypeName, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//             Overriding category reader '@dataType ebTypeName'             *
//                                                                           *
//---------------------------------------------------------------------------*

static GALGAS_string categoryReader_dataType_ebTypeName (const cPtr_easyBindingType * /* inObject */,
                                                         C_Compiler * /* inCompiler */
                                                         COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  //-------- @assignmentInstructionForGeneration
  result_outResult = GALGAS_string ("NSData") ;
//---
  return result_outResult ;
}


//---------------------------------------------------------------------------*

static void defineCategoryReader_dataType_ebTypeName (void) {
  enterCategoryReader_ebTypeName (kTypeDescriptor_GALGAS_dataType.mSlotID,
                                  categoryReader_dataType_ebTypeName) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gReader_dataType_ebTypeName (defineCategoryReader_dataType_ebTypeName, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//             Overriding category reader '@dateType ebTypeName'             *
//                                                                           *
//---------------------------------------------------------------------------*

static GALGAS_string categoryReader_dateType_ebTypeName (const cPtr_easyBindingType * /* inObject */,
                                                         C_Compiler * /* inCompiler */
                                                         COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  //-------- @assignmentInstructionForGeneration
  result_outResult = GALGAS_string ("NSDate") ;
//---
  return result_outResult ;
}


//---------------------------------------------------------------------------*

static void defineCategoryReader_dateType_ebTypeName (void) {
  enterCategoryReader_ebTypeName (kTypeDescriptor_GALGAS_dateType.mSlotID,
                                  categoryReader_dateType_ebTypeName) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gReader_dateType_ebTypeName (defineCategoryReader_dateType_ebTypeName, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//             Overriding category reader '@fontType ebTypeName'             *
//                                                                           *
//---------------------------------------------------------------------------*

static GALGAS_string categoryReader_fontType_ebTypeName (const cPtr_easyBindingType * /* inObject */,
                                                         C_Compiler * /* inCompiler */
                                                         COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  //-------- @assignmentInstructionForGeneration
  result_outResult = GALGAS_string ("NSFont") ;
//---
  return result_outResult ;
}


//---------------------------------------------------------------------------*

static void defineCategoryReader_fontType_ebTypeName (void) {
  enterCategoryReader_ebTypeName (kTypeDescriptor_GALGAS_fontType.mSlotID,
                                  categoryReader_fontType_ebTypeName) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gReader_fontType_ebTypeName (defineCategoryReader_fontType_ebTypeName, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//            Overriding category reader '@imageType ebTypeName'             *
//                                                                           *
//---------------------------------------------------------------------------*

static GALGAS_string categoryReader_imageType_ebTypeName (const cPtr_easyBindingType * /* inObject */,
                                                          C_Compiler * /* inCompiler */
                                                          COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  //-------- @assignmentInstructionForGeneration
  result_outResult = GALGAS_string ("NSImage") ;
//---
  return result_outResult ;
}


//---------------------------------------------------------------------------*

static void defineCategoryReader_imageType_ebTypeName (void) {
  enterCategoryReader_ebTypeName (kTypeDescriptor_GALGAS_imageType.mSlotID,
                                  categoryReader_imageType_ebTypeName) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gReader_imageType_ebTypeName (defineCategoryReader_imageType_ebTypeName, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//            Overriding category reader '@colorType ebTypeName'             *
//                                                                           *
//---------------------------------------------------------------------------*

static GALGAS_string categoryReader_colorType_ebTypeName (const cPtr_easyBindingType * /* inObject */,
                                                          C_Compiler * /* inCompiler */
                                                          COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  //-------- @assignmentInstructionForGeneration
  result_outResult = GALGAS_string ("NSColor") ;
//---
  return result_outResult ;
}


//---------------------------------------------------------------------------*

static void defineCategoryReader_colorType_ebTypeName (void) {
  enterCategoryReader_ebTypeName (kTypeDescriptor_GALGAS_colorType.mSlotID,
                                  categoryReader_colorType_ebTypeName) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gReader_colorType_ebTypeName (defineCategoryReader_colorType_ebTypeName, NULL) ;

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


