//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'structAnalysis.cpp'                          *
//                        Generated by version 2.5.0                         *
//                       july 13th, 2013, at 15h0'6"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "structAnalysis.h"
#include "galgas2/C_Compiler.h"
#include "galgas2/C_galgas_io.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "utilities/C_PrologueEpilogue.h"

//---------------------------------------------------------------------------*


//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "structAnalysis.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                         Routine 'structAnalysis'                          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_structAnalysis (const GALGAS_structTypeList constinArgument_inStructTypeList,
                             GALGAS_contextAnalysisStruct & ioArgument_ioContextAnalysisStruct,
                             C_Compiler * inCompiler
                             COMMA_UNUSED_LOCATION_ARGS) {
  cEnumerator_structTypeList enumerator_327 (constinArgument_inStructTypeList, kEnumeration_up) ;
  while (enumerator_327.hasCurrentObject ()) {
    GALGAS_structFieldList var_structFieldList = GALGAS_structFieldList::constructor_emptyList (SOURCE_FILE_AT_LINE (12)) ;
    GALGAS_stringset var_headerFileInclusionSet = GALGAS_stringset::constructor_emptySet (SOURCE_FILE_AT_LINE (13)) ;
    GALGAS_stringset var_fieldNameSet = GALGAS_stringset::constructor_emptySet (SOURCE_FILE_AT_LINE (14)) ;
    cEnumerator_structFieldASTList enumerator_494 (enumerator_327.current_mFieldList (HERE), kEnumeration_up) ;
    while (enumerator_494.hasCurrentObject ()) {
      GALGAS_easyBindingType var_type = callCategoryReader_analyze ((const cPtr_attributeASTType *) enumerator_494.current_mFieldType (HERE).ptr (), ioArgument_ioContextAnalysisStruct, inCompiler COMMA_SOURCE_FILE_AT_LINE (16)) ;
      const enumGalgasBool test_0 = callCategoryReader_isClass ((const cPtr_easyBindingType *) var_type.ptr (), inCompiler COMMA_SOURCE_FILE_AT_LINE (17)).boolEnum () ;
      if (kBoolTrue == test_0) {
        GALGAS_location location_1 (enumerator_494.current_mFieldName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_1, GALGAS_string ("only a POD type is allowed in a structure") COMMA_SOURCE_FILE_AT_LINE (18)) ;
      }
      const enumGalgasBool test_2 = GALGAS_bool (NULL != dynamic_cast <const cPtr_enumType *> (var_type.ptr ())).boolEnum () ;
      if (kBoolTrue == test_2) {
        GALGAS_enumType temp_3 ;
        if (var_type.isValid ()) {
          if (NULL != dynamic_cast <const cPtr_enumType *> (var_type.ptr ())) {
            temp_3 = (cPtr_enumType *) var_type.ptr () ;
          }else{
            inCompiler->castError ("enumType", var_type.ptr ()->classDescriptor () COMMA_SOURCE_FILE_AT_LINE (21)) ;
          }
        }
        GALGAS_enumType var_t = temp_3 ;
        var_headerFileInclusionSet.addAssign_operation (var_t.reader_mEnumTypeName (SOURCE_FILE_AT_LINE (22)).mAttribute_string COMMA_SOURCE_FILE_AT_LINE (22)) ;
      }else if (kBoolFalse == test_2) {
        const enumGalgasBool test_4 = GALGAS_bool (NULL != dynamic_cast <const cPtr_structType *> (var_type.ptr ())).boolEnum () ;
        if (kBoolTrue == test_4) {
          GALGAS_structType temp_5 ;
          if (var_type.isValid ()) {
            if (NULL != dynamic_cast <const cPtr_structType *> (var_type.ptr ())) {
              temp_5 = (cPtr_structType *) var_type.ptr () ;
            }else{
              inCompiler->castError ("structType", var_type.ptr ()->classDescriptor () COMMA_SOURCE_FILE_AT_LINE (24)) ;
            }
          }
          GALGAS_structType var_t = temp_5 ;
          var_headerFileInclusionSet.addAssign_operation (var_t.reader_mStructTypeName (SOURCE_FILE_AT_LINE (25)).mAttribute_string COMMA_SOURCE_FILE_AT_LINE (25)) ;
        }
      }
      const enumGalgasBool test_6 = var_fieldNameSet.reader_hasKey (enumerator_494.current_mFieldName (HERE).mAttribute_string COMMA_SOURCE_FILE_AT_LINE (27)).boolEnum () ;
      if (kBoolTrue == test_6) {
        GALGAS_location location_7 (enumerator_494.current_mFieldName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_7, GALGAS_string ("there is already a field named '").operator_concat (enumerator_494.current_mFieldName (HERE).reader_string (SOURCE_FILE_AT_LINE (28)) COMMA_SOURCE_FILE_AT_LINE (28)).operator_concat (GALGAS_string ("'") COMMA_SOURCE_FILE_AT_LINE (28)) COMMA_SOURCE_FILE_AT_LINE (28)) ;
      }
      var_fieldNameSet.addAssign_operation (enumerator_494.current_mFieldName (HERE).mAttribute_string COMMA_SOURCE_FILE_AT_LINE (30)) ;
      var_structFieldList.addAssign_operation (var_type, enumerator_494.current_mFieldName (HERE).mAttribute_string COMMA_SOURCE_FILE_AT_LINE (31)) ;
      enumerator_494.gotoNextObject () ;
    }
    {
    ioArgument_ioContextAnalysisStruct.mAttribute_mStructTypeMap.modifier_insertKey (enumerator_327.current_mStructTypeName (HERE), var_structFieldList, var_headerFileInclusionSet, inCompiler COMMA_SOURCE_FILE_AT_LINE (33)) ;
    }
    const enumGalgasBool test_8 = ioArgument_ioContextAnalysisStruct.mAttribute_mEnumMap.reader_hasKey (enumerator_327.current_mStructTypeName (HERE).mAttribute_string COMMA_SOURCE_FILE_AT_LINE (34)).boolEnum () ;
    if (kBoolTrue == test_8) {
      GALGAS_location location_9 (enumerator_327.current_mStructTypeName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_9, GALGAS_string ("There is an enumeration with the same name") COMMA_SOURCE_FILE_AT_LINE (35)) ;
    }
    enumerator_327.gotoNextObject () ;
  }
}


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


