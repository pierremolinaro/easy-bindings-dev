//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'easyBindings_program.cpp'                       *
//                        Generated by version 2.4.3                         *
//                    december 29th, 2012, at 12h28'54"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "easyBindings_program.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "utilities/F_DisplayException.h"
#include "utilities/basic-allocation.h"
#include "utilities/cpp-allocation.h"
#include "utilities/C_PrologueEpilogue.h"
#include "command_line_interface/F_mainForLIBPM.h"
#include "command_line_interface/C_builtin_CLI_Options.h"
#include "command_line_interface/F_Analyze_CLI_Options.h"
#include "project_header.h"

//---------------------------------------------------------------------------*

#include "easyBindings_options.h"
#include "easyBindings_grammar.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "easyBindings_program.gProgram", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                      print_tool_help_message                              *
//                                                                           *
//---------------------------------------------------------------------------*

static void print_tool_help_message (void) {
  co << "Compiled with GALGAS revision NUMERO_REVISION_GALGAS\n" ;
}

//---------------------------------------------------------------------------*

static const char * kSourceFileExtensions [] = {
  "easyBindings",
  NULL
} ;    

//---------------------------------------------------------------------------*

static const char * kSourceFileHelpMessages [] = {
  "a source text file with the .easyBindings extension",
  NULL
} ;    

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  static const char * kVersionString = "version " PROJECT_VERSION_STRING " [debug]" ;
#else
  static const char * kVersionString = "version " PROJECT_VERSION_STRING ;
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                      M A I N    F O R    L I B P M                        *
//                                                                           *
//---------------------------------------------------------------------------*

int mainForLIBPM (int inArgc, const char * inArgv []) {
//--- Analyze Command Line Options
  TC_UniqueArray <C_String> sourceFilesArray ;
  F_Analyze_CLI_Options (inArgc, inArgv,
                         kVersionString,
                         sourceFilesArray,
                         kSourceFileExtensions,
                         kSourceFileHelpMessages,
                         print_tool_help_message) ;
//---
  bool verboseOptionOn = true ;
  PMSInt16 returnCode = 0 ; // No error
//--- Set Execution mode
  C_String executionModeOptionErrorMessage ;
  setExecutionMode (executionModeOptionErrorMessage) ;
  if (executionModeOptionErrorMessage.length () > 0) {
    co << executionModeOptionErrorMessage ;
    returnCode = 1 ;
  }else{
  //--- Common lexique object
    C_Compiler * commonLexique = NULL ;
    macroMyNew (commonLexique, C_Compiler (NULL, "", "" COMMA_HERE)) ;
    try{
      routine_before (commonLexique COMMA_HERE) ;
      verboseOptionOn = gOption_galgas_5F_builtin_5F_options_verbose_5F_output.mValue ;
      for (PMSInt32 i=0 ; i<sourceFilesArray.count () ; i++) {
        setCurrentCompiledFilePath (sourceFilesArray (i COMMA_HERE)) ;
        if (gOption_galgas_5F_builtin_5F_options_trace.mValue) {
          enableTraceWithPath (sourceFilesArray (i COMMA_HERE)) ;
        }
        const C_String fileExtension = sourceFilesArray (i COMMA_HERE).pathExtension () ;
        const GALGAS_string sfp = GALGAS_string (sourceFilesArray (i COMMA_HERE)) ;
        const GALGAS_location location = commonLexique->here () ;
        const GALGAS_lstring sourceFilePath (sfp, location) ;
        PMSInt16 r = 0 ;
        if (fileExtension == "easyBindings") {
          routine_programRule_5F__30_ (sourceFilePath, commonLexique COMMA_HERE) ;
        }else{
          printf ("*** Error: unhandled extension for file '%s' ***\n", sourceFilesArray (i COMMA_HERE).cString (HERE)) ;
          r = 1 ;
        }
        if (r != 0) {
          returnCode = r ;
        }
        closeTrace () ;
      }
    //--- Error or warnings ?
      if (totalErrorCount () > 0) {
        returnCode = 1 ; // Error code
      }else if (totalWarningCount () > 0) {
        if (gOption_galgas_5F_builtin_5F_options_treat_5F_warnings_5F_as_5F_error.mValue) {
          returnCode = 1 ; // Error code
          if (verboseOptionOn) {
            printf ("** Note: warnings are treated as errors. **\n") ;
          }
        }
      }
    //--- Epilogue
      routine_after (commonLexique COMMA_HERE) ;
    //--- Display error and warnings count
      if (gOption_galgas_5F_builtin_5F_options_verbose_5F_output.mValue || (totalWarningCount () > 0) || (totalErrorCount () > 0)) {
        C_String message ;
        if (totalWarningCount () == 0) {
          message << "No warning" ;
        }else if (totalWarningCount () == 1) {
          message << "1 warning" ;
        }else{
          message << cStringWithUnsigned (totalWarningCount ()) << " warnings" ;
        }
        message << ", " ;
        if (totalErrorCount () == 0) {
          message << "no error" ;
        }else if (totalErrorCount () == 1) {
          message << "1 error" ;
        }else{
          message << cStringWithUnsigned (totalErrorCount ()) << " errors" ;
        }
        message << ".\n" ;
        ggs_printMessage (message COMMA_HERE) ;
      }
    }catch (const M_STD_NAMESPACE exception & e) {
      F_default_display_exception (e) ;
      returnCode = 1 ; // Error code
    }catch (...) {
      printf ("**** Unknow exception ****\n") ;
      throw ;
    }
    macroDetachSharedObject (commonLexique) ;
  }
  return returnCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Filewrapper 'predefinedOutletClasses'                   *
//                                                                           *
//---------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_predefinedOutletClasses_0 [1] = {
  NULL
} ;

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_predefinedOutletClasses_0 [1] = {
  NULL
} ;

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_predefinedOutletClasses (
  "",
  0,
  gWrapperAllFiles_predefinedOutletClasses_0,
  0,
  gWrapperAllDirectories_predefinedOutletClasses_0
) ;


//---------------------------------------------------------------------------*
//                                                                           *
//         Filewrapper template 'predefinedOutletClasses sourceFile'         *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_predefinedOutletClasses_sourceFile (C_Compiler * /* inCompiler */
                                                                      COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "predefined objectController NSObjectController {\n"
    "  NSDeletesObjectsOnRemove : bool ;\n"
    "  NSValidatesImmediately : bool ;\n"
    "  NSConditionallySetsEditable : bool ;\n"
    "  NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "  NSHandlesContentAsCompoundValue : bool ;\n"
    "  NSRaisesForNotApplicableKeys : bool ;\n"
    "}{\n"
    "  action add ;\n"
    "  action remove ;\n"
    "  attribute bool canAdd ;\n"
    "  attribute bool canRemove ;\n"
    "  $editable : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "#  $contentObject : toOne {\n"
    "#    NSDeletesObjectsOnRemove : bool ;\n"
    "#    NSValidatesImmediately : bool ;\n"
    "#    NSConditionallySetsEditable : bool ;\n"
    "#    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "#    NSHandlesContentAsCompoundValue : bool ;\n"
    "#    NSRaisesForNotApplicableKeys : bool ;\n"
    "#  }\n"
    "  # Warning: skipped $managedObjectContext binding\n"
    "}\n"
    "\n"
    "\n"
    "predefined arrayController NSArrayController {\n"
    "  NSAlwaysPresentsApplicationModalAlertsBindingOption : bool ;\n"
    "  NSConditionallySetsEditableBindingOption : bool ;\n"
    "  NSDeletesObjectsOnRemoveBindingsOption : bool ;\n"
    "  NSHandlesContentAsCompoundValueBindingOption : bool ;\n"
    "  NSRaisesForNotApplicableKeysBindingOption : bool ;\n"
    "  NSSelectsAllWhenSettingContentBindingOption : bool ;\n"
    "  NSValidatesImmediatelyBindingOption : bool ;\n"
    "}{\n"
    "  action add ;\n"
    "  action remove ;\n"
    "  attribute bool canAdd ;\n"
    "  attribute bool canRemove ;\n"
    "  $editable : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "#  $contentSet : toMany {\n"
    "#    NSAlwaysPresentsApplicationModalAlertsBindingOption : bool ;\n"
    "#    NSConditionallySetsEditableBindingOption : bool ;\n"
    "#    NSDeletesObjectsOnRemoveBindingsOption : bool ;\n"
    "#    NSHandlesContentAsCompoundValueBindingOption : bool ;\n"
    "#    NSRaisesForNotApplicableKeysBindingOption : bool ;\n"
    "#    NSSelectsAllWhenSettingContentBindingOption : bool ;\n"
    "#    NSValidatesImmediatelyBindingOption : bool ;\n"
    "#  }\n"
    "#  $contentArray : array {\n"
    "#    NSAlwaysPresentsApplicationModalAlertsBindingOption : bool ;\n"
    "#    NSConditionallySetsEditableBindingOption : bool ;\n"
    "#    NSDeletesObjectsOnRemoveBindingsOption : bool ;\n"
    "#    NSHandlesContentAsCompoundValueBindingOption : bool ;\n"
    "#    NSRaisesForNotApplicableKeysBindingOption : bool ;\n"
    "#    NSSelectsAllWhenSettingContentBindingOption : bool ;\n"
    "#    NSValidatesImmediatelyBindingOption : bool ;\n"
    "#  }\n"
    "  # Warning: skipped $contentArray binding\n"
    "#  $selectionIndexes : NSIndexSet {\n"
    "#    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "#    NSValidatesImmediately : bool ;\n"
    "#    NSRaisesForNotApplicableKeys : bool ;\n"
    "#  }\n"
    "#  $contentArrayForMultipleSelection : NSObject {\n"
    "#    NSConditionallySetsEditable : bool ;\n"
    "#    NSSelectsAllWhenSettingContent : bool ;\n"
    "#    NSRaisesForNotApplicableKeys : bool ;\n"
    "#  }\n"
    "  # Warning: skipped $contentSet binding\n"
    "  # Warning: skipped $managedObjectContext binding\n"
    "#  $sortDescriptors : NSArray {\n"
    "#    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "#    NSValidatesImmediately : bool ;\n"
    "#    NSRaisesForNotApplicableKeys : bool ;\n"
    "#  }\n"
    "#  $contentObject : NSObject {\n"
    "#    NSDeletesObjectsOnRemove : bool ;\n"
    "#    NSValidatesImmediately : bool ;\n"
    "#    NSConditionallySetsEditable : bool ;\n"
    "#    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "#    NSSelectsAllWhenSettingContent : bool ;\n"
    "#    NSHandlesContentAsCompoundValue : bool ;\n"
    "#    NSRaisesForNotApplicableKeys : bool ;\n"
    "#  }\n"
    "  # Warning: skipped $filterPredicate binding\n"
    "}\n"
    "\n"
    "predefined outletClass NSBox {\n"
    "  $hidden : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $transparent : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $title : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  # Warning: skipped $displayPatternTitle1 binding\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSBrowser {\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontBold : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontItalic : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  # Warning: skipped $value binding\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $enabled : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "#  $contentValues : NSObject {\n"
    "#    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "#    NSValidatesImmediately : bool ;\n"
    "#    NSRaisesForNotApplicableKeys : bool ;\n"
    "#  }\n"
    "  $hidden : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontSize : int {\n"
    "    NSMultipleValuesPlaceholder : int ;\n"
    "    NSNullPlaceholder : int ;\n"
    "    NSNotApplicablePlaceholder : int ;\n"
    "    NSNoSelectionPlaceholder : int ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  # Warning: skipped $selectionIndexPaths binding\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  # Warning: skipped $content binding\n"
    "}\n"
    "\n"
    "predefined outletClass NSButton {\n"
    "  $alternateImage : NSImage {\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "#  $argument : NSObject {\n"
    "#    NSConditionallySetsEnabled : bool ;\n"
    "#    NSConditionallySetsHidden : bool ;\n"
    "#    NSSelectorName : NSString ;\n"
    "#    NSAllowsNullArgument : bool ;\n"
    "#    NSInvokesSeparatelyWithArrayObjects : bool ;\n"
    "#    NSRaisesForNotApplicableKeys : bool ;\n"
    "#  }\n"
    "  # Warning: skipped $fontBold binding\n"
    "  # Warning: skipped $fontItalic binding\n"
    "  $title : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $alternateTitle : NSString {\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $image : NSImage {\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  # Warning: skipped $fontFamilyName binding\n"
    "#  $target : NSObject {\n"
    "#    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "#    NSConditionallySetsEnabled : bool ;\n"
    "#    NSSelectorName : NSString ;\n"
    "#    NSConditionallySetsHidden : bool ;\n"
    "#    NSRaisesForNotApplicableKeys : bool ;\n"
    "#  }\n"
    "  $enabled : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $hidden : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  # Warning: skipped $fontSize binding\n"
    "  # Warning: skipped $fontName binding\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $value : int, bool {\n"
    "    NSAllowsEditingMultipleValuesSelectionBindingOption : bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlertsBindingOption : bool ;\n"
    "    NSConditionallySetsEnabledBindingOption : bool ;\n"
    "    NSConditionallySetsHiddenBindingOption : bool ;\n"
    "    NSRaisesForNotApplicableKeysBindingOption : bool ;\n"
    "    NSValidatesImmediatelyBindingOption : bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSButtonCell {\n"
    "  $alternateImage : NSImage {\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "#  $argument : NSObject {\n"
    "#    NSConditionallySetsEnabled : bool ;\n"
    "#    NSSelectorName : NSString ;\n"
    "#    NSConditionallySetsEditable : bool ;\n"
    "#    NSAllowsNullArgument : bool ;\n"
    "#    NSInvokesSeparatelyWithArrayObjects : bool ;\n"
    "#    NSRaisesForNotApplicableKeys : bool ;\n"
    "#  }\n"
    "  # Warning: skipped $fontBold binding\n"
    "  $editable : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  # Warning: skipped $fontItalic binding\n"
    "  $title : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $alternateTitle : NSString {\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $image : NSImage {\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  # Warning: skipped $fontFamilyName binding\n"
    "#  $target : NSObject {\n"
    "#    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "#    NSConditionallySetsEditable : bool ;\n"
    "#    NSConditionallySetsEnabled : bool ;\n"
    "#    NSSelectorName : NSString ;\n"
    "#    NSRaisesForNotApplicableKeys : bool ;\n"
    "#  }\n"
    "  $enabled : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  # Warning: skipped $fontSize binding\n"
    "  # Warning: skipped $fontName binding\n"
    "}\n"
    "\n"
    "predefined outletClass NSCollectionView {\n"
    "  # Warning: skipped $selectionIndexes binding\n"
    "  # Warning: skipped $content binding\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $hidden : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSColorWell {\n"
    "  $value : NSColor {\n"
    "    NSConditionallySetsEnabled : bool ;\n"
    "    NSConditionallySetsHidden : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $enabled : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $hidden : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSComboBox {\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontBold : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $editable : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontItalic : bool {\n"
    "    NSMultipleValuesPlaceholder : int ;\n"
    "    NSNullPlaceholder : int ;\n"
    "    NSNotApplicablePlaceholder : int ;\n"
    "    NSNoSelectionPlaceholder : int ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  # Warning: skipped $value binding\n"
    "  $alignment : int {\n"
    "    NSMultipleValuesPlaceholder : int ;\n"
    "    NSNullPlaceholder : int ;\n"
    "    NSNotApplicablePlaceholder : int ;\n"
    "    NSNoSelectionPlaceholder : int ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $textColor : NSColor {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $enabled : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $hidden : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontSize : int {\n"
    "    NSMultipleValuesPlaceholder : int ;\n"
    "    NSNullPlaceholder : int ;\n"
    "    NSNotApplicablePlaceholder : int ;\n"
    "    NSNoSelectionPlaceholder : int ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  # Warning: skipped $contentValues binding\n"
    "  # Warning: skipped $content binding\n"
    "}\n"
    "\n"
    "predefined outletClass NSDatePicker {\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $maxValue : NSDate {\n"
    "    NSMultipleValuesPlaceholder : int ;\n"
    "    NSNullPlaceholder : int ;\n"
    "    NSNotApplicablePlaceholder : int ;\n"
    "    NSNoSelectionPlaceholder : int ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontBold : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $textColor : NSColor {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontItalic : bool {\n"
    "    NSMultipleValuesPlaceholder : int ;\n"
    "    NSNullPlaceholder : int ;\n"
    "    NSNotApplicablePlaceholder : int ;\n"
    "    NSNoSelectionPlaceholder : int ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $value : NSDate {\n"
    "    NSConditionallySetsEnabled : bool ;\n"
    "    NSConditionallySetsHidden : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $minValue : NSDate {\n"
    "    NSMultipleValuesPlaceholder : int ;\n"
    "    NSNullPlaceholder : int ;\n"
    "    NSNotApplicablePlaceholder : int ;\n"
    "    NSNoSelectionPlaceholder : int ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $enabled : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $hidden : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontSize : int {\n"
    "    NSMultipleValuesPlaceholder : int ;\n"
    "    NSNullPlaceholder : int ;\n"
    "    NSNotApplicablePlaceholder : int ;\n"
    "    NSNoSelectionPlaceholder : int ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSDatePickerCell {\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $maxValue : NSDate {\n"
    "    NSMultipleValuesPlaceholder : int ;\n"
    "    NSNullPlaceholder : int ;\n"
    "    NSNotApplicablePlaceholder : int ;\n"
    "    NSNoSelectionPlaceholder : int ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontBold : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $editable : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $textColor : NSColor {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $minValue : NSDate {\n"
    "    NSMultipleValuesPlaceholder : int ;\n"
    "    NSNullPlaceholder : int ;\n"
    "    NSNotApplicablePlaceholder : int ;\n"
    "    NSNoSelectionPlaceholder : int ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $value : NSDate {\n"
    "    NSConditionallySetsEnabled : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSConditionallySetsEditable : bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontItalic : bool {\n"
    "    NSMultipleValuesPlaceholder : int ;\n"
    "    NSNullPlaceholder : int ;\n"
    "    NSNotApplicablePlaceholder : int ;\n"
    "    NSNoSelectionPlaceholder : int ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $enabled : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontSize : int {\n"
    "    NSMultipleValuesPlaceholder : int ;\n"
    "    NSNullPlaceholder : int ;\n"
    "    NSNotApplicablePlaceholder : int ;\n"
    "    NSNoSelectionPlaceholder : int ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSDrawer {\n"
    "  $visible : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSForm {\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontSize : int {\n"
    "    NSMultipleValuesPlaceholder : int ;\n"
    "    NSNullPlaceholder : int ;\n"
    "    NSNotApplicablePlaceholder : int ;\n"
    "    NSNoSelectionPlaceholder : int ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontBold : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $enabled : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $hidden : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontItalic : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSFormCell {\n"
    "  $fontSize : number {\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontBold : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $editable : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $enabled : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $value : NSString {\n"
    "    NSConditionallySetsEnabled : bool ;\n"
    "    NSContinuouslyUpdatesValue : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSConditionallySetsEditable : bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontItalic : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSImageCell {\n"
    "  $editable : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $value : NSImage {\n"
    "    NSConditionallySetsEnabled : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSConditionallySetsEditable : bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $enabled : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $valuePath : NSString {\n"
    "    NSConditionallySetsEnabled : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSConditionallySetsEditable : bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  # Warning: skipped $data binding\n"
    "  $valueURL : NSString {\n"
    "    NSConditionallySetsEnabled : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSConditionallySetsEditable : bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSImageView {\n"
    "  $valuePath : NSString {\n"
    "    NSConditionallySetsEnabled : bool ;\n"
    "    NSConditionallySetsHidden : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSConditionallySetsEditable : bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $hidden : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $editable : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $enabled : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  # Warning: skipped $data binding\n"
    "  $value : NSImage {\n"
    "    NSConditionallySetsEnabled : bool ;\n"
    "    NSConditionallySetsHidden : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSConditionallySetsEditable : bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $valueURL : NSString {\n"
    "    NSConditionallySetsEnabled : bool ;\n"
    "    NSConditionallySetsHidden : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSConditionallySetsEditable : bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSLevelIndicator {\n"
    "  $hidden : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $enabled : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $maxValue : number {\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $criticalValue : number {\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $minValue : number {\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $value : number {\n"
    "    NSConditionallySetsEnabled : bool ;\n"
    "    NSConditionallySetsHidden : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $warningValue : number {\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSLevelIndicatorCell {\n"
    "  $editable : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $enabled : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $maxValue : number {\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $criticalValue : number {\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $minValue : number {\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $value : number {\n"
    "    NSConditionallySetsEnabled : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSConditionallySetsEditable : bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $warningValue : number {\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSMatrix {\n"
    "  $selectedIndex : int {\n"
    "    NSConditionallySetsEnabled : bool ;\n"
    "    NSConditionallySetsHidden : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $selectedValue : NSString {\n"
    "    NSConditionallySetsEnabled : bool ;\n"
    "    NSConditionallySetsHidden : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  # Warning: skipped $selectedObject binding\n"
    "  $fontBold : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontItalic : bool {\n"
    "    NSMultipleValuesPlaceholder : int ;\n"
    "    NSNullPlaceholder : int ;\n"
    "    NSNotApplicablePlaceholder : int ;\n"
    "    NSNoSelectionPlaceholder : int ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $selectedTag : int {\n"
    "    NSConditionallySetsEnabled : bool ;\n"
    "    NSConditionallySetsHidden : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $enabled : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  # Warning: skipped $contentObjects binding\n"
    "  $hidden : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontSize : number {\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  # Warning: skipped $contentValues binding\n"
    "  # Warning: skipped $content binding\n"
    "}\n"
    "\n"
    "predefined outletClass NSMenuItem {\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "#  $argument : NSObject {\n"
    "#    NSConditionallySetsEnabled : bool ;\n"
    "#    NSConditionallySetsHidden : bool ;\n"
    "#    NSSelectorName : NSString ;\n"
    "#    NSAllowsNullArgument : bool ;\n"
    "#    NSInvokesSeparatelyWithArrayObjects : bool ;\n"
    "#    NSRaisesForNotApplicableKeys : bool ;\n"
    "#  }\n"
    "  $fontBold : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontItalic : bool {\n"
    "    NSMultipleValuesPlaceholder : int ;\n"
    "    NSNullPlaceholder : int ;\n"
    "    NSNotApplicablePlaceholder : int ;\n"
    "    NSNoSelectionPlaceholder : int ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $offStateImage : NSImage {\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $title : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $onStateImage : NSImage {\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $image : NSImage {\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "#  $target : NSObject {\n"
    "#    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "#    NSConditionallySetsEnabled : bool ;\n"
    "#    NSSelectorName : NSString ;\n"
    "#    NSConditionallySetsHidden : bool ;\n"
    "#    NSRaisesForNotApplicableKeys : bool ;\n"
    "#  }\n"
    "  $enabled : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $hidden : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontSize : number {\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $mixedStateImage : NSImage {\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  # Warning: skipped $value binding\n"
    "}\n"
    "\n"
    "predefined outletClass NSOutlineView {\n"
    "  # Warning: skipped $selectionIndexPaths binding\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "#  $doubleClickTarget : NSObject {\n"
    "#    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "#    NSConditionallySetsEnabled : bool ;\n"
    "#    NSSelectorName : NSString ;\n"
    "#    NSConditionallySetsHidden : bool ;\n"
    "#    NSRaisesForNotApplicableKeys : bool ;\n"
    "#  }\n"
    "  $fontBold : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontItalic : bool {\n"
    "    NSMultipleValuesPlaceholder : int ;\n"
    "    NSNullPlaceholder : int ;\n"
    "    NSNotApplicablePlaceholder : int ;\n"
    "    NSNoSelectionPlaceholder : int ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  # Warning: skipped $sortDescriptors binding\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "#  $doubleClickArgument : NSObject {\n"
    "#    NSConditionallySetsEnabled : bool ;\n"
    "#    NSConditionallySetsHidden : bool ;\n"
    "#    NSSelectorName : NSString ;\n"
    "#    NSAllowsNullArgument : bool ;\n"
    "#    NSInvokesSeparatelyWithArrayObjects : bool ;\n"
    "#    NSRaisesForNotApplicableKeys : bool ;\n"
    "#  }\n"
    "  $enabled : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $hidden : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontSize : number {\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $rowHeight : number {\n"
    "    NSMultipleValuesPlaceholder : int ;\n"
    "    NSNullPlaceholder : int ;\n"
    "    NSNotApplicablePlaceholder : int ;\n"
    "    NSNoSelectionPlaceholder : int ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  # Warning: skipped $content binding\n"
    "}\n"
    "\n"
    "predefined outletClass NSPanel {\n"
    "  $visible : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $documentEdited : bool {\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $title : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $representedFilename : NSString {\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $contentWidth : number {\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $contentHeight : number {\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  # Warning: skipped $displayPatternTitle1 binding\n"
    "}\n"
    "\n"
    "predefined outletClass NSPathCell {\n"
    "  $fontSize : number {\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontBold : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $editable : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $enabled : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "#  $value : NSURL {\n"
    "#    NSConditionallySetsEnabled : bool ;\n"
    "#    NSValidatesImmediately : bool ;\n"
    "#    NSConditionallySetsEditable : bool ;\n"
    "#    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "#    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "#    NSRaisesForNotApplicableKeys : bool ;\n"
    "#  }\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontItalic : bool {\n"
    "    NSMultipleValuesPlaceholder : int ;\n"
    "    NSNullPlaceholder : int ;\n"
    "    NSNotApplicablePlaceholder : int ;\n"
    "    NSNoSelectionPlaceholder : int ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSPathControl {\n"
    "  $fontSize : number {\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontBold : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $enabled : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $hidden : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "#  $value : NSURL {\n"
    "#    NSConditionallySetsEnabled : bool ;\n"
    "#    NSConditionallySetsHidden : bool ;\n"
    "#    NSValidatesImmediately : bool ;\n"
    "#    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "#    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "#    NSRaisesForNotApplicableKeys : bool ;\n"
    "#  }\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontItalic : bool {\n"
    "    NSMultipleValuesPlaceholder : int ;\n"
    "    NSNullPlaceholder : int ;\n"
    "    NSNotApplicablePlaceholder : int ;\n"
    "    NSNoSelectionPlaceholder : int ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSPopUpButton {\n"
    "  $selectedIndex : int {\n"
    "    NSConditionallySetsEnabled : bool ;\n"
    "    NSConditionallySetsHidden : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $selectedValue : NSString {\n"
    "    NSConditionallySetsEnabled : bool ;\n"
    "    NSConditionallySetsHidden : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  # Warning: skipped $selectedObject binding\n"
    "  $fontBold : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontItalic : bool {\n"
    "    NSMultipleValuesPlaceholder : int ;\n"
    "    NSNullPlaceholder : int ;\n"
    "    NSNotApplicablePlaceholder : int ;\n"
    "    NSNoSelectionPlaceholder : int ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $selectedTag : int {\n"
    "    NSConditionallySetsEnabled : bool ;\n"
    "    NSConditionallySetsHidden : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $enabled : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  # Warning: skipped $contentObjects binding\n"
    "  $hidden : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontSize : number {\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  # Warning: skipped $contentValues binding\n"
    "  # Warning: skipped $content binding\n"
    "}\n"
    "\n"
    "predefined outletClass NSPopUpButtonCell {\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $selectedValue : NSString {\n"
    "    NSConditionallySetsEnabled : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSConditionallySetsEditable : bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  # Warning: skipped $selectedObject binding\n"
    "  # Warning: skipped $onStateImage binding\n"
    "  $fontBold : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $editable : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  # Warning: skipped $offStateImage binding\n"
    "  # Warning: skipped $mixedStateImage binding\n"
    "  $fontItalic : bool {\n"
    "    NSMultipleValuesPlaceholder : int ;\n"
    "    NSNullPlaceholder : int ;\n"
    "    NSNotApplicablePlaceholder : int ;\n"
    "    NSNoSelectionPlaceholder : int ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $selectedTag : int {\n"
    "    NSConditionallySetsEnabled : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSConditionallySetsEditable : bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $enabled : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  # Warning: skipped $contentObjects binding\n"
    "  # Warning: skipped $contentValues binding\n"
    "  $fontSize : number {\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $selectedIndex : int {\n"
    "    NSConditionallySetsEnabled : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSConditionallySetsEditable : bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  # Warning: skipped $content binding\n"
    "}\n"
    "\n"
    "predefined outletClass NSPredicateEditor {\n"
    "  $fontSize : number {\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontBold : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $editable : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $enabled : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $hidden : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  # Warning: skipped $value binding\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontItalic : bool {\n"
    "    NSMultipleValuesPlaceholder : int ;\n"
    "    NSNullPlaceholder : int ;\n"
    "    NSNotApplicablePlaceholder : int ;\n"
    "    NSNoSelectionPlaceholder : int ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSProgressIndicator {\n"
    "  $hidden : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $maxValue : number {\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $animate : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $minValue : number {\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $value : number {\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "    NSConditionallySetsHidden : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $animationDelay : number {\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $isIndeterminate : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSScrollView {\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $hidden : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSSearchField {\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "#  $recentSearches : NSArray {\n"
    "#    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "#    NSValidatesImmediately : bool ;\n"
    "#    NSRaisesForNotApplicableKeys : bool ;\n"
    "#  }\n"
    "  $fontItalic : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontBold : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $editable : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "#  $predicate : NSPredicate {\n"
    "#    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "#    NSDisplayName : NSString ;\n"
    "#    NSPredicateFormat : NSString ;\n"
    "#    NSValidatesImmediately : bool ;\n"
    "#    NSRaisesForNotApplicableKeys : bool ;\n"
    "#  }\n"
    "  $alignment : int {\n"
    "    NSMultipleValuesPlaceholder : int ;\n"
    "    NSNullPlaceholder : int ;\n"
    "    NSNotApplicablePlaceholder : int ;\n"
    "    NSNoSelectionPlaceholder : int ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $textColor : NSColor {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $enabled : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $hidden : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontSize : number {\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $value : NSString {\n"
    "    NSConditionallySetsEnabled : bool ;\n"
    "    NSConditionallySetsHidden : bool ;\n"
    "    NSContinuouslyUpdatesValue : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSConditionallySetsEditable : bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSSecureTextField {\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontItalic : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontBold : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $editable : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $textColor : NSColor {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $alignment : int {\n"
    "    NSMultipleValuesPlaceholder : int ;\n"
    "    NSNullPlaceholder : int ;\n"
    "    NSNotApplicablePlaceholder : int ;\n"
    "    NSNoSelectionPlaceholder : int ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $value : NSString {\n"
    "    NSConditionallySetsEnabled : bool ;\n"
    "    NSConditionallySetsHidden : bool ;\n"
    "    NSContinuouslyUpdatesValue : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSConditionallySetsEditable : bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $enabled : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  # Warning: skipped $displayPatternValue1 binding\n"
    "  $fontSize : number {\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $hidden : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSSecureTextFieldCell {\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontItalic : bool {\n"
    "    NSMultipleValuesPlaceholder : int ;\n"
    "    NSNullPlaceholder : int ;\n"
    "    NSNotApplicablePlaceholder : int ;\n"
    "    NSNoSelectionPlaceholder : int ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontBold : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $editable : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $textColor : NSColor {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $value : NSString {\n"
    "    NSConditionallySetsEnabled : bool ;\n"
    "    NSContinuouslyUpdatesValue : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSConditionallySetsEditable : bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $enabled : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  # Warning: skipped $displayPatternValue1 binding\n"
    "  $fontSize : number {\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSSegmentedCell {\n"
    "  $fontSize : number {\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontBold : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $editable : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $enabled : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $selectedLabel : NSString {\n"
    "    NSConditionallySetsEnabled : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSConditionallySetsEditable : bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $selectedTag : int {\n"
    "    NSConditionallySetsEnabled : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSConditionallySetsEditable : bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $selectedIndex : int {\n"
    "    NSConditionallySetsEnabled : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSConditionallySetsEditable : bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontItalic : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSSegmentedControl {\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontBold : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $selectedLabel : NSString {\n"
    "    NSConditionallySetsEnabled : bool ;\n"
    "    NSConditionallySetsHidden : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontItalic : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $selectedTag : int {\n"
    "    NSConditionallySetsEnabled : bool ;\n"
    "    NSConditionallySetsHidden : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $enabled : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $hidden : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontSize : number {\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $selectedIndex : int {\n"
    "    NSConditionallySetsEnabled : bool ;\n"
    "    NSConditionallySetsHidden : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSSlider {\n"
    "  $maxValue : number {\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $value : number {\n"
    "    NSConditionallySetsEnabled : bool ;\n"
    "    NSConditionallySetsHidden : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $enabled : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $minValue : number {\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $hidden : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSSliderCell {\n"
    "  $editable : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $value : number {\n"
    "    NSConditionallySetsEnabled : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSConditionallySetsEditable : bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $enabled : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $maxValue : number {\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $minValue : number {\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSSplitView {\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $hidden : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSStepper {\n"
    "  $maxValue : number {\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $value : number {\n"
    "    NSConditionallySetsEnabled : bool ;\n"
    "    NSConditionallySetsHidden : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $enabled : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $minValue : number {\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $hidden : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSStepperCell {\n"
    "  $editable : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $value : number {\n"
    "    NSConditionallySetsEnabled : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSConditionallySetsEditable : bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $enabled : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $maxValue : number {\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $minValue : number {\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSTabView {\n"
    "  $fontSize : number {\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontBold : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $hidden : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $selectedLabel : NSString {\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $selectedIndex : number {\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  # Warning: skipped $selectedIdentifier binding\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontItalic : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSTabViewItem {\n"
    "  $label : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSTableColumn {\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $maxWidth : number {\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $width : number {\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontItalic : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontBold : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $editable : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $headerTitle : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $minWidth : number {\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $textColor : NSColor {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $enabled : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "#  $value : NSString {\n"
    "#    NSConditionallySetsEnabled : bool ;\n"
    "#    NSContinuouslyUpdatesValue : bool ;\n"
    "#    NSValidatesImmediately : bool ;\n"
    "#    NSConditionallySetsEditable : bool ;\n"
    "#    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "#    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "#    NSCreatesSortDescriptor : bool ;\n"
    "#    NSRaisesForNotApplicableKeys : bool ;\n"
    "#  }\n"
    "  # Warning: skipped $displayPatternValue1 binding\n"
    "  $fontSize : number {\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSTableView {\n"
    "  # Warning: skipped $selectionIndexes binding\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $tableValue ;\n"
    "#  $doubleClickTarget : NSObject {\n"
    "#    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "#    NSConditionallySetsEnabled : bool ;\n"
    "#    NSSelectorName : NSString ;\n"
    "#    NSConditionallySetsHidden : bool ;\n"
    "#    NSRaisesForNotApplicableKeys : bool ;\n"
    "#  }\n"
    "  $fontBold : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontItalic : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  # Warning: skipped $sortDescriptors binding\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "#  $doubleClickArgument : NSObject {\n"
    "#    NSConditionallySetsEnabled : bool ;\n"
    "#    NSConditionallySetsHidden : bool ;\n"
    "#    NSSelectorName : NSString ;\n"
    "#    NSAllowsNullArgument : bool ;\n"
    "#    NSInvokesSeparatelyWithArrayObjects : bool ;\n"
    "#    NSRaisesForNotApplicableKeys : bool ;\n"
    "#  }\n"
    "  $enabled : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $hidden : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontSize : number {\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $rowHeight : number {\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  # Warning: skipped $content binding\n"
    "}\n"
    "\n"
    "predefined outletClass NSTextField {\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontItalic : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontBold : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $editable : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $textColor : NSColor {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $alignment : int {\n"
    "    NSMultipleValuesPlaceholder : int ;\n"
    "    NSNullPlaceholder : int ;\n"
    "    NSNotApplicablePlaceholder : int ;\n"
    "    NSNoSelectionPlaceholder : int ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $value : NSString, number NSNumberFormatter {\n"
    "    NSConditionallySetsEnabled : bool ;\n"
    "    NSConditionallySetsHidden : bool ;\n"
    "    NSContinuouslyUpdatesValue : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSConditionallySetsEditable : bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $enabled : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  # Warning: skipped $displayPatternValue1 binding\n"
    "  $fontSize : number {\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $hidden : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSTextFieldCell {\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontItalic : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontBold : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $editable : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $textColor : NSColor {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $value : NSString {\n"
    "    NSConditionallySetsEnabled : bool ;\n"
    "    NSContinuouslyUpdatesValue : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSConditionallySetsEditable : bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $enabled : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  # Warning: skipped $displayPatternValue1 binding\n"
    "  $fontSize : number {\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSTextView {\n"
    "  $value : NSString {\n"
    "    NSContinuouslyUpdatesValue : bool ;\n"
    "    NSConditionallySetsHidden : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSConditionallySetsEditable : bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $valuePath : NSData {\n"
    "    NSContinuouslyUpdatesValue : bool ;\n"
    "    NSConditionallySetsHidden : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSConditionallySetsEditable : bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $hidden : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $editable : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $data : NSData {\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSContinuouslyUpdatesValue : bool ;\n"
    "    NSConditionallySetsHidden : bool ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSConditionallySetsEditable : bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  # Warning: skipped $attributedString binding\n"
    "  # Warning: skipped $valueURL binding\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSTokenField {\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontItalic : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontBold : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $editable : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $textColor : NSColor {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $alignment : int {\n"
    "    NSMultipleValuesPlaceholder : int ;\n"
    "    NSNullPlaceholder : int ;\n"
    "    NSNotApplicablePlaceholder : int ;\n"
    "    NSNoSelectionPlaceholder : int ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "#  $value : NSArray {\n"
    "#    NSConditionallySetsEnabled : bool ;\n"
    "#    NSConditionallySetsHidden : bool ;\n"
    "#    NSContinuouslyUpdatesValue : bool ;\n"
    "#    NSValidatesImmediately : bool ;\n"
    "#    NSConditionallySetsEditable : bool ;\n"
    "#    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "#    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "#    NSRaisesForNotApplicableKeys : bool ;\n"
    "#  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $enabled : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  # Warning: skipped $displayPatternValue1 binding\n"
    "  $fontSize : number {\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $hidden : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSTokenFieldCell {\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontItalic : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontBold : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $editable : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $textColor : NSColor {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "#  $value : NSArray {\n"
    "#    NSConditionallySetsEnabled : bool ;\n"
    "#    NSContinuouslyUpdatesValue : bool ;\n"
    "#    NSValidatesImmediately : bool ;\n"
    "#    NSConditionallySetsEditable : bool ;\n"
    "#    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "#    NSAllowsEditingMultipleValuesSelection : bool ;\n"
    "#    NSRaisesForNotApplicableKeys : bool ;\n"
    "#  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $enabled : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  # Warning: skipped $displayPatternValue1 binding\n"
    "  $fontSize : number {\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSToolbarItem {\n"
    "  $enabled : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSView {\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "  $hidden : bool {\n"
    "    NSMultipleValuesPlaceholder : bool ;\n"
    "    NSNullPlaceholder : bool ;\n"
    "    NSNotApplicablePlaceholder : bool ;\n"
    "    NSNoSelectionPlaceholder : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSWindow {\n"
    "  $contentHeight : double {\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "  }\n"
    "  $contentWidth : double {\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "  }\n"
    "  $documentEdited : bool {\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "  }\n"
    "  $visible : double {\n"
    "    NSAlwaysPresentsApplicationModalAlerts : bool ;\n"
    "    NSValidatesImmediately : bool ;\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "    NSMultipleValuesPlaceholder : number ;\n"
    "    NSNoSelectionPlaceholder : number ;\n"
    "    NSNullPlaceholder : number ;\n"
    "    NSNotApplicablePlaceholder : number ;\n"
    "  }\n"
    "  $representedFileName : NSString {\n"
    "    NSRaisesForNotApplicableKeys : bool ;\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "  }\n"
    "}\n"
    "\n"
    "extern protocol NSTableViewDataSource ;\n"
    "\n"
    "end\n"
    "\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     Filewrapper 'objective_c_sources'                     *
//                                                                           *
//---------------------------------------------------------------------------*

//--- File '/PMAbstractPersistentDocument.h'

static const char * gWrapperFileContent_0_objective_5F_c_5F_sources = "//---------------------------------------------------------------------------*\n"
  "//                                                                           *\n"
  "//  File 'PMAbstractPersistentDocument.h'                                    *\n"
  "//  Created by Pierre Molinaro on january 23, 2008.                          *\n"
  "//                                                                           *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#import <Cocoa/Cocoa.h>\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@class PMManagedObject ;\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@interface PMAbstractPersistentDocument : NSDocument {\n"
  "  @private BOOL mFetchingAllObjectsDone ;\n"
  "  @private NSMutableArray * mUnreachableObjectsForCheckObjectGraph ;\n"
  "  @private NSManagedObjectContext * mManagedObjectContext ;\n"
  "}\n"
  "\n"
  "- (NSManagedObjectContext *) managedObjectContext ;\n"
  "\n"
  "- (IBAction) checkRelationships: (id) inSender ;\n"
  "\n"
  "- (IBAction) checkObjectGraph: (id) inUnusedSender ;\n"
  "\n"
  "- (PMManagedObject *) rootObject ;\n"
  "\n"
  "- (void) hookOfRootObjectDidCreate ;\n"
  "\n"
  "@end\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n" ;

static const cRegularFileWrapper gWrapperFile_0_objective_5F_c_5F_sources (
  "PMAbstractPersistentDocument.h",
  "h",
  true, // Text file
  1232, // Text length
  gWrapperFileContent_0_objective_5F_c_5F_sources
) ;

//--- File '/PMAbstractPersistentDocument.m'

static const char * gWrapperFileContent_1_objective_5F_c_5F_sources = "//---------------------------------------------------------------------------*\n"
  "//                                                                           *\n"
  "//  File 'PMAbstractPersistentDocument.m'                                    *\n"
  "//  Created by Pierre Molinaro on january 23, 2008.                          *\n"
  "//                                                                           *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#import \"PMAllocationDebug.h\"\n"
  "#import \"PMAbstractPersistentDocument.h\"\n"
  "#import \"easy-bindings-utilities.h\"\n"
  "#import \"PMManagedObject.h\"\n"
  "#import \"managed-object-model.h\"\n"
  "#import \"PMAllocationDebug.h\"\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "//#define EASY_BINDINGS_DEBUG\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  static BOOL gDebugMenuItemsAdded ;\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@implementation PMAbstractPersistentDocument\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#pragma mark Init\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//                                                                           *\n"
  "//                           initWithType:error:                             *\n"
  "//                                                                           *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (id) initWithType: (NSString *) typeName error: (NSError **) outError {\n"
  "  #ifdef EASY_BINDINGS_DEBUG\n"
  "    NSLog (@\"%s\", __PRETTY_FUNCTION__) ;\n"
  "  #endif\n"
  "  self = [super initWithType:typeName error:outError ] ;\n"
  "  if (self) {\n"
  "  //---\n"
  "    macroNoteObjectAllocation (self) ;\n"
  "  //--- Make Managed Object Context\n"
  "    NSManagedObjectContext * moc = self.managedObjectContext ;\n"
  "  //---\n"
  "    [moc processPendingChanges] ;\n"
  "    [[moc undoManager] disableUndoRegistration] ;\n"
  "  //--- Fetch root object\n"
  "    [self fetchRootObject] ;\n"
  "  //--- User initialization\n"
  "    [self hookOfInitWithType:typeName] ;\n"
  "  //---\n"
  "    [moc processPendingChanges] ;\n"
  "    [[moc undoManager] enableUndoRegistration] ;\n"
  "  }\n"
  "  return self ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//                                                                           *\n"
  "//                   initWithContentsOfURL:ofType:error:                     *\n"
  "//                                                                           *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (id) initForURL:(NSURL *) inAbsoluteDocumentURL\n"
  "       withContentsOfURL:(NSURL *) inAbsoluteDocumentContentsURL\n"
  "       ofType:(NSString *) inTypeName\n"
  "       error:(NSError **) outError {\n"
  "  #ifdef EASY_BINDINGS_DEBUG\n"
  "    NSLog (@\"%s\", __PRETTY_FUNCTION__) ;\n"
  "  #endif\n"
  "  self = [super\n"
  "    initForURL:inAbsoluteDocumentURL\n"
  "    withContentsOfURL:inAbsoluteDocumentContentsURL\n"
  "    ofType:inTypeName\n"
  "    error:outError\n"
  "  ] ;\n"
  "  if (self) {\n"
  "    macroNoteObjectAllocation (self) ;\n"
  "  //--- User initialization\n"
  "    [self hookOfInitWithContentsOfURL:inAbsoluteDocumentURL ofType:inTypeName] ;\n"
  "  //--- Make Managed Object Context\n"
  "    NSManagedObjectContext * moc = self.managedObjectContext ;\n"
  "  //---\n"
  "    [[moc undoManager] disableUndoRegistration] ;\n"
  "  //--- Fetch root object\n"
  "    [self fetchRootObject] ;\n"
  "  //--- User initialization\n"
  "    [self hookOfDidReadDocumentOfType:inTypeName] ;\n"
  "  //---\n"
  "    [moc processPendingChanges] ;\n"
  "    [[moc undoManager] enableUndoRegistration] ;\n"
  "  }\n"
  "  return self ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//                                                                           *\n"
  "//                   initWithContentsOfURL:ofType:error:                     *\n"
  "//                                                                           *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (id) initWithContentsOfURL:(NSURL *) inAbsoluteURL\n"
  "       ofType: (NSString *) inTypeName\n"
  "       error: (NSError **) outError {\n"
  "  #ifdef EASY_BINDINGS_DEBUG\n"
  "    NSLog (@\"%s\", __PRETTY_FUNCTION__) ;\n"
  "  #endif\n"
  "  self = [super initWithContentsOfURL:inAbsoluteURL ofType:inTypeName error:outError] ;\n"
  "  if (self) {\n"
  "    macroNoteObjectAllocation (self) ;\n"
  "  //--- User initialization\n"
  "    [self hookOfInitWithContentsOfURL:inAbsoluteURL ofType:inTypeName] ;\n"
  "  //--- Make Managed Object Context\n"
  "    NSManagedObjectContext * moc = self.managedObjectContext ;\n"
  "  //---\n"
  "    [[moc undoManager] disableUndoRegistration] ;\n"
  "  //--- Fetch root object\n"
  "    [self fetchRootObject] ;\n"
  "  //--- User initialization\n"
  "    [self hookOfDidReadDocumentOfType:inTypeName] ;\n"
  "  //---\n"
  "    [moc processPendingChanges] ;\n"
  "    [[moc undoManager] enableUndoRegistration] ;\n"
  "  }\n"
  "  return self ;\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    hookOfInitWithType                                                      *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) hookOfInitWithType: (NSString *) inTypeName {\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    hookOfInitWithContentsOfURL:ofType:                                     *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) hookOfInitWithContentsOfURL: (NSURL *) inAbsoluteDocumentURL\n"
  "         ofType: (NSString *) inTypeName {\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    hookOfDidReadDocumentOfType:                                            *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) hookOfDidReadDocumentOfType: (NSString *) inTypeName {\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    fetchRootObject                                                         *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) fetchRootObject {\n"
  "  NSLog (@\"%s is an abstract method; it must be overriden\", __PRETTY_FUNCTION__) ;\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    hookOfRootObjectDidCreate                                               *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) hookOfRootObjectDidCreate {\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    Dealloc                                                                 *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) dealloc {\n"
  "  macroNoteObjectDeallocation (self) ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#pragma mark Undo Manager\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//                                                                           *\n"
  "//  undoManager                                                              *\n"
  "//                                                                           *\n"
  "//  Returns the undo managher of the document managed object context.        *\n"
  "//                                                                           *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (NSUndoManager *) undoManager {\n"
  "  return self.managedObjectContext.undoManager ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//                                                                           *\n"
  "//  hasUndoManager                                                           *\n"
  "//                                                                           *\n"
  "//  Returns always YES: a persistent document has always an undo manager     *\n"
  "//  (the managed object context undo manager).                               *\n"
  "//                                                                           *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (BOOL) hasUndoManager {\n"
  "  return YES ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#pragma mark Managed Object Model, Context\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    managedObjectModel                                                      *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (NSManagedObjectModel *) managedObjectModel {\n"
  "  return managedObjectModel () ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//                                                                           *\n"
  "//  managedObjectContext                                                     *\n"
  "//                                                                           *\n"
  "//  Returns the document managed object context; if it does not exist,       *\n"
  "//  create it.                                                               *\n"
  "//                                                                           *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (NSManagedObjectContext *) managedObjectContext {\n"
  "  if (mManagedObjectContext == nil) {\n"
  "    NSManagedObjectModel * model = self.managedObjectModel ;\n"
  "    NSPersistentStoreCoordinator * psc = [[NSPersistentStoreCoordinator alloc] initWithManagedObjectModel:model];\n"
  "    mManagedObjectContext = [NSManagedObjectContext new] ;\n"
  "    [mManagedObjectContext setPersistentStoreCoordinator:psc] ;\n"
  "\n"
  "    NSNotificationCenter * nc = [NSNotificationCenter defaultCenter] ;\n"
  "    [nc\n"
  "      addObserver:self\n"
  "      selector:@selector (updateDocumentEdition:)\n"
  "      name:NSManagedObjectContextObjectsDidChangeNotification\n"
  "      object:mManagedObjectContext\n"
  "    ] ;\n"
  "    [nc\n"
  "      addObserver:self\n"
  "      selector:@selector (updateDocumentEdition:)\n"
  "      name:NSManagedObjectContextDidSaveNotification\n"
  "      object:mManagedObjectContext\n"
  "    ] ;\n"
  "  }\n"
  "  return mManagedObjectContext ;\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "#pragma mark Open, Close User Interface\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    windowControllerDidLoadNib:                                             *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) windowControllerDidLoadNib: (NSWindowController *) inWindowController {\n"
  "  [super windowControllerDidLoadNib:inWindowController] ;\n"
  "//--- Add Debug menu items \?\n"
  "  #ifdef PM_COCOA_DEBUG\n"
  "    if (! gDebugMenuItemsAdded) {\n"
  "      gDebugMenuItemsAdded = YES ;\n"
  "      NSMenuItem * menuItem = [[NSMenuItem alloc]\n"
  "        initWithTitle:@\"Explore document\"\n"
  "        action:@selector (showObjectExplorerWindow:)\n"
  "        keyEquivalent:@\"\"\n"
  "      ] ;\n"
  "      macroAddItemToDebugMenu (menuItem) ;\n"
  "    }\n"
  "  #endif\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    removeWindowController:                                                 *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) removeWindowController: (NSWindowController *) inWindowController {\n"
  "  #ifdef EASY_BINDINGS_DEBUG\n"
  "    NSLog (@\"%s\", __PRETTY_FUNCTION__) ;\n"
  "  #endif\n"
  "//---\n"
  "  NSNotificationCenter * nc = [NSNotificationCenter defaultCenter] ;\n"
  "  [nc\n"
  "    removeObserver:self\n"
  "    name:NSManagedObjectContextObjectsDidChangeNotification\n"
  "    object:mManagedObjectContext\n"
  "  ] ;\n"
  "  [nc\n"
  "    removeObserver:self\n"
  "    name:NSManagedObjectContextDidSaveNotification\n"
  "    object:mManagedObjectContext\n"
  "  ] ;\n"
  "//---\n"
  "  mFetchingAllObjectsDone = NO ;\n"
  "//--- Invoke super method\n"
  "  [super removeWindowController:inWindowController] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#pragma mark Document edition\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//                                                                           *\n"
  "//  isDocumentEdited                                                         *\n"
  "//                                                                           *\n"
  "//  Returns YES if managed object context has changes, and NO otherwise.     *\n"
  "//                                                                           *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (BOOL) isDocumentEdited {\n"
  "  #ifdef EASY_BINDINGS_DEBUG\n"
  "    NSLog (@\" <isDocumentEdited> returns %@\",\n"
  "           [[self undoManager] canUndo] \? @\"YES\" : @\"NO\") ;\n"
  "  #endif\n"
  "  return self.undoManager.canUndo ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//                                                                           *\n"
  "//  updateDocumentEdition:                                                   *\n"
  "//                                                                           *\n"
  "//  This method is invoked by the notification center when the managed object*\n"
  "//  context notifies NSManagedObjectContextObjectsDidChangeNotification or   *\n"
  "//  NSManagedObjectContextDidSaveNotification notification. It updates the   *\n"
  "//  \"edited\" state of document window.                                       *\n"
  "//                                                                           *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) updateDocumentEdition: (id) inUnusedArgument {\n"
  "  const BOOL isEdited = self.isDocumentEdited ;\n"
  "  #ifdef EASY_BINDINGS_DEBUG\n"
  "    NSManagedObjectContext * moc = self.managedObjectContext ;\n"
  "    NSLog (@\" <updateDocumentEdition> %@, %u updated, %u deleted, %u inserted\",\n"
  "           isEdited \? @\"YES\" : @\"NO\",\n"
  "           [[moc updatedObjects] count],\n"
  "           [[moc deletedObjects] count],\n"
  "           [[moc insertedObjects] count]) ;\n"
  "  #endif\n"
  "  [self.windowForSheet setDocumentEdited:isEdited] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#pragma mark Object Graph Checking\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//                                                                           *\n"
  "//                          Object Graph Checking                            *\n"
  "//                                                                           *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) recursiveSearch:(NSMutableSet *) inReachableObjects\n"
  "         withObject:(NSManagedObject *) inObject {\n"
  "  if (! [inReachableObjects containsObject:inObject]) {\n"
  "    [inReachableObjects addObject:inObject] ;\n"
  "    NSEntityDescription * entity = [inObject entity] ;\n"
  "    NSArray * allRelationshipsNames = [[entity relationshipsByName] allKeys] ;\n"
  "    for (NSUInteger i=0 ; i<[allRelationshipsNames count] ; i++) {\n"
  "      NSString * relationshipName = [allRelationshipsNames objectAtIndex:i] ;\n"
  "      id v = [inObject valueForKey:relationshipName] ;\n"
  "      if ([v isKindOfClass:[NSManagedObject class]]) { // To-one relationship\n"
  "        [self recursiveSearch:inReachableObjects withObject:v] ;\n"
  "      }else if ([v isKindOfClass:[NSSet class]]) { // To-many relationship\n"
  "        NSArray * objects = [v allObjects] ;\n"
  "        for (NSUInteger j=0 ; j<[objects count] ; j++) {\n"
  "          [self recursiveSearch:inReachableObjects withObject:[objects objectAtIndex:j]] ;\n"
  "        }\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) unreachableObjectCount: (NSUInteger *) outUnreachableObjectCount\n"
  "         registeredObjectCount: (NSUInteger *) outRegisteredObjectCount\n"
  "         deletedObjectsCount: (NSUInteger *) outDeletedObjectCount {\n"
  "  NSManagedObjectContext * moc = self.managedObjectContext ;\n"
  "//--- Fetch all objects\n"
  "  if (! mFetchingAllObjectsDone) {\n"
  "    mFetchingAllObjectsDone = YES ;\n"
  "    NSFetchRequest * fr = [[NSFetchRequest alloc] init] ;\n"
  "    NSManagedObjectModel * mom = self.managedObjectModel ;\n"
  "    NSArray * entityNameArray = [[mom entitiesByName] allKeys] ;\n"
  "    for (NSUInteger i=0 ; i<[entityNameArray count] ; i++) {\n"
  "      NSString * entityName = [entityNameArray objectAtIndex:i] ;\n"
  "      [fr setEntity:[NSEntityDescription entityForName:entityName inManagedObjectContext:moc]] ;\n"
  "      [moc executeFetchRequest:fr error:nil] ;\n"
  "    }\n"
  "  }\n"
  "//--- Find reachable objects from root entity\n"
  "  NSMutableSet * reachableObjects = [NSMutableSet setWithCapacity:1000] ;\n"
  "  [self recursiveSearch:reachableObjects withObject:self.rootObject] ;\n"
  "//--- Get Registered Objects\n"
  "  NSSet * registeredObjects = [moc registeredObjects] ;\n"
  "  * outRegisteredObjectCount = [registeredObjects count] ;\n"
  "//--- Compute the set of unreachable objects to delete\n"
  "  NSMutableSet * s = [NSMutableSet setWithCapacity:* outRegisteredObjectCount] ;\n"
  "  [s unionSet:registeredObjects] ;\n"
  "  [s minusSet:reachableObjects] ;\n"
  "  NSSet * deletedObjects = [moc deletedObjects] ;\n"
  "  * outDeletedObjectCount = [deletedObjects count] ;\n"
  "  [s minusSet:deletedObjects] ;\n"
  "  * outUnreachableObjectCount = [s count] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (IBAction) checkObjectGraph: (id) inUnusedSender {\n"
  "//--- Fetch all instances of root entity (normally only one !)\n"
  "  NSManagedObjectContext * moc = self.managedObjectContext ;\n"
  "  NSEntityDescription * rootEntity = [self.rootObject entity] ;\n"
  "  NSFetchRequest * fr = [[NSFetchRequest alloc] init] ;\n"
  "  [fr setEntity:rootEntity] ;\n"
  "  NSError * error = nil ;\n"
  "  NSArray * allInstancesOfRootEntity = [moc executeFetchRequest:fr error:& error] ;\n"
  "  const NSUInteger n = [allInstancesOfRootEntity count] ;\n"
  "  BOOL ok = error == nil ;\n"
  "  if (! ok) {\n"
  "    NSAlert * alert = [NSAlert alertWithError:error] ;\n"
  "    [alert\n"
  "      beginSheetModalForWindow:self.windowForSheet\n"
  "      modalDelegate:nil\n"
  "      didEndSelector:NULL\n"
  "      contextInfo:NULL\n"
  "    ] ;\n"
  "  }else if (n != 1) {\n"
  "    ok = NO ;\n"
  "    NSAlert * alert = [NSAlert\n"
  "      alertWithMessageText:@\"Object Graph Error\"\n"
  "      defaultButton:@\"Ok\"\n"
  "      alternateButton:nil\n"
  "      otherButton:nil\n"
  "      informativeTextWithFormat:@\"There %s %lu instance%s of root entity. Normally, there is exactly one instance of root entity.\",\n"
  "        (n > 1) \? \"are\" : \"is\", n, (n > 1) \? \"s\" : \"\"\n"
  "    ] ;\n"
  "    [alert\n"
  "      beginSheetModalForWindow:self.windowForSheet\n"
  "      modalDelegate:nil\n"
  "      didEndSelector:NULL\n"
  "      contextInfo:NULL\n"
  "    ] ;\n"
  "  }else{\n"
  "  //--- Fetch all objects\n"
  "    NSManagedObjectModel * mom = [NSManagedObjectModel mergedModelFromBundles:nil] ;\n"
  "    NSArray * entityNameArray = [[mom entitiesByName] allKeys] ;\n"
  "    for (NSUInteger i=0 ; (i<[entityNameArray count]) && (error == nil) ; i++) {\n"
  "      NSString * entityName = [entityNameArray objectAtIndex:i] ;\n"
  "      [fr setEntity:[NSEntityDescription entityForName:entityName inManagedObjectContext:moc]] ;\n"
  "      [moc executeFetchRequest:fr error:& error] ;\n"
  "      if (error != nil) {\n"
  "        [NSApp presentError:error] ;\n"
  "      }\n"
  "    }\n"
  "    ok = error == nil ;\n"
  "  }\n"
  "  if (ok) {\n"
  "  //--- Find reachable objects from root entity\n"
  "    NSMutableSet * reachableObjects = [NSMutableSet setWithCapacity:1000] ;\n"
  "    [self recursiveSearch:reachableObjects withObject:self.rootObject] ;\n"
  "  //--- Get Registered Objects\n"
  "    NSSet * registeredObjects = [moc registeredObjects] ;\n"
  "  //--- Compute the set of unreachable objects to delete\n"
  "    NSMutableSet * s = [NSMutableSet setWithCapacity:0] ;\n"
  "    [s unionSet:registeredObjects] ;\n"
  "    [s minusSet:reachableObjects] ;\n"
  "    [s minusSet:[moc deletedObjects]] ;\n"
  "    NSEnumerator * e = [s objectEnumerator] ;\n"
  "    NSManagedObject * object ;\n"
  "    mUnreachableObjectsForCheckObjectGraph = [NSMutableArray arrayWithCapacity:[s count]] ;\n"
  "    while ((object = [e nextObject])) {\n"
  "      if (! [object isDeleted]) {\n"
  "        [mUnreachableObjectsForCheckObjectGraph addObject:object] ;\n"
  "      }\n"
  "    }\n"
  "    const NSUInteger rn = [registeredObjects count] ;\n"
  "    const NSUInteger reachableCount = [reachableObjects count] ;\n"
  "    const NSUInteger deletedCount = [[moc deletedObjects] count] ;\n"
  "    const NSUInteger unreachableObjectCount = [mUnreachableObjectsForCheckObjectGraph count] ;\n"
  "    if (unreachableObjectCount == 0) {\n"
  "      NSAlert * alert = [NSAlert\n"
  "        alertWithMessageText:@\"Object graph presents no error\"\n"
  "        defaultButton:@\"Ok\"\n"
  "        alternateButton:nil\n"
  "        otherButton:nil\n"
  "        informativeTextWithFormat:@\"There %s %lu registered object%s, \"\n"
  "          \" %lu reachable object%s from root object, \"\n"
  "          \" %lu marked to be deleted.\",\n"
  "          (rn > 1) \? \"are\" : \"is\", rn, (rn > 1) \? \"s\" : \"\",\n"
  "          reachableCount, (reachableCount > 1) \? \"s\" : \"\",\n"
  "          deletedCount\n"
  "      ] ;\n"
  "      [alert\n"
  "        beginSheetModalForWindow:self.windowForSheet\n"
  "        modalDelegate:nil\n"
  "        didEndSelector:NULL\n"
  "        contextInfo:NULL\n"
  "      ] ;\n"
  "    }else{\n"
  "      NSAlert * alert = [NSAlert\n"
  "        alertWithMessageText:@\"Object Graph Warning\"\n"
  "        defaultButton:@\"Do not Delete\"\n"
  "        alternateButton:[NSString stringWithFormat:@\"Delete %lu unreachable Object%s\", unreachableObjectCount, (unreachableObjectCount > 1) \? \"s\" : \"\""
  "]\n"
  "        #ifdef PM_COCOA_DEBUG\n"
  "        otherButton:@\"Show unreachable Objects\"\n"
  "        #else\n"
  "        otherButton:nil\n"
  "        #endif\n"
  "        informativeTextWithFormat:@\"There %s %lu registered object%s, \"\n"
  "          \" %lu reachable object%s from root object, \"\n"
  "          \" %lu marked to be deleted.\",\n"
  "          (rn > 1) \? \"are\" : \"is\", rn, (rn > 1) \? \"s\" : \"\",\n"
  "          reachableCount, (reachableCount > 1) \? \"s\" : \"\",\n"
  "          deletedCount\n"
  "      ] ;\n"
  "      [alert\n"
  "        beginSheetModalForWindow:self.windowForSheet\n"
  "        modalDelegate:self\n"
  "        didEndSelector:@selector (deleteUnreachableObjects:returnCode:contextInfo:)\n"
  "        contextInfo:NULL\n"
  "      ] ;\n"
  "    }\n"
  "  }\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) deleteUnreachableObjects:(NSAlert *) inAlert\n"
  "         returnCode:(NSInteger) inReturnCode\n"
  "         contextInfo:(void *) inUnusedContextInfo {\n"
  "  if (NSAlertAlternateReturn == inReturnCode) {\n"
  "    NSManagedObjectContext * moc = self.managedObjectContext ;\n"
  "    for (NSUInteger i=0 ; i<[mUnreachableObjectsForCheckObjectGraph count] ; i++) {\n"
  "      [moc deleteObject:[mUnreachableObjectsForCheckObjectGraph objectAtIndex:i]] ;\n"
  "    }\n"
  "  #ifdef PM_COCOA_DEBUG\n"
  "  }else if (NSAlertOtherReturn == inReturnCode) {\n"
  "    for (PMManagedObject * object in mUnreachableObjectsForCheckObjectGraph) {\n"
  "      [object showExplorerWindow] ;\n"
  "    }\n"
  "  #endif\n"
  "  }\n"
  "  mUnreachableObjectsForCheckObjectGraph = nil ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#pragma mark Object Graph Relationship Correction\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//                                                                           *\n"
  "//                   Object Graph Relationship Correction                    *\n"
  "//                                                                           *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) correctTarget: (NSManagedObject *) inTargetObject\n"
  "         ofManagedObject:(NSManagedObject *) inManagedObject\n"
  "         withInverseRelationship: (NSRelationshipDescription *) inInverseRelationship\n"
  "         correctedError: (NSUInteger *) ioCorrectedErrorsPtr\n"
  "         fatalErrors: (NSUInteger *) ioFatalErrorsPtr {\n"
  "  #ifdef EASY_BINDINGS_DEBUG\n"
  "    NSLog (@\"%s, object %p, target object %p, inverse relationship %@\", __PRETTY_FUNCTION__, inManagedObject, inTargetObject, [inInverseRelationship n"
  "ame]) ;\n"
  "  #endif\n"
  "  NSString * inverseRelationShipName = [inInverseRelationship name] ;\n"
  "  const BOOL inverseIsToMany = [inInverseRelationship isToMany] ;\n"
  "  if (inverseIsToMany) {\n"
  "    NSSet * setOfTargetOfTargetObjects = [inTargetObject valueForKey:inverseRelationShipName] ;\n"
  "    if (! [setOfTargetOfTargetObjects containsObject:inManagedObject]) {\n"
  "      NSMutableSet * newSet = [NSMutableSet setWithCapacity:[setOfTargetOfTargetObjects count] + 1] ;\n"
  "      [newSet setSet:setOfTargetOfTargetObjects] ;\n"
  "      [newSet addObject:inManagedObject] ;\n"
  "      [inTargetObject setValue:newSet forKey:inverseRelationShipName] ;\n"
  "      ( * ioCorrectedErrorsPtr) ++ ;\n"
  "    }\n"
  "  }else{\n"
  "    NSManagedObject * targetOfTargetObject = [inTargetObject valueForKey:inverseRelationShipName] ;\n"
  "    if (targetOfTargetObject == NULL) {\n"
  "      [inTargetObject setValue:inManagedObject forKey:inverseRelationShipName] ;\n"
  "      ( * ioCorrectedErrorsPtr) ++ ;\n"
  "    }else if (targetOfTargetObject != inManagedObject) {\n"
  "      (* ioFatalErrorsPtr) ++ ;\n"
  "    }\n"
  "  }\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) checkToManyRelationship: (NSRelationshipDescription *) inRelationshipDescription\n"
  "         forObject:(NSManagedObject *) inManagedObject\n"
  "         correctedError: (NSUInteger *) ioCorrectedErrorsPtr\n"
  "         fatalErrors: (NSUInteger *) ioFatalErrorsPtr {\n"
  "  #ifdef EASY_BINDINGS_DEBUG\n"
  "    NSLog (@\"%s, object %p, to-many relationship %@\", __PRETTY_FUNCTION__, inManagedObject, [inRelationshipDescription name]) ;\n"
  "  #endif\n"
  "  NSString * name = [inRelationshipDescription name] ;\n"
  "  NSSet * targetSet = [inManagedObject valueForKey:name] ;\n"
  "  NSRelationshipDescription * inverseRelationship = [inRelationshipDescription inverseRelationship] ;\n"
  "  if (([targetSet count] != 0) && (inverseRelationship != nil)) {\n"
  "    NSEnumerator * enumerator = [[targetSet copy] objectEnumerator] ;\n"
  "    NSManagedObject * targetObject ;\n"
  "    while ((targetObject = enumerator.nextObject)) {\n"
  "      [self\n"
  "        correctTarget:targetObject\n"
  "        ofManagedObject:inManagedObject\n"
  "        withInverseRelationship:inverseRelationship\n"
  "        correctedError:ioCorrectedErrorsPtr\n"
  "        fatalErrors:ioFatalErrorsPtr\n"
  "      ] ;\n"
  "    }\n"
  "  }\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) checkToOneRelationship: (NSRelationshipDescription *) inRelationshipDescription\n"
  "         forObject:(NSManagedObject *) inManagedObject\n"
  "         correctedError: (NSUInteger *) ioCorrectedErrorsPtr\n"
  "         fatalErrors: (NSUInteger *) ioFatalErrorsPtr {\n"
  "  #ifdef EASY_BINDINGS_DEBUG\n"
  "    NSLog (@\"%s, object %p, to-one relationship %@\", __PRETTY_FUNCTION__, inManagedObject, [inRelationshipDescription name]) ;\n"
  "  #endif\n"
  "  NSString * name = [inRelationshipDescription name] ;\n"
  "  NSManagedObject * targetObject = [inManagedObject valueForKey:name] ;\n"
  "  NSRelationshipDescription * inverseRelationship = [inRelationshipDescription inverseRelationship] ;\n"
  "  if ((targetObject != nil) && (inverseRelationship != nil)) {\n"
  "    [self\n"
  "      correctTarget:targetObject\n"
  "      ofManagedObject:inManagedObject\n"
  "      withInverseRelationship:inverseRelationship\n"
  "      correctedError:ioCorrectedErrorsPtr\n"
  "      fatalErrors:ioFatalErrorsPtr\n"
  "    ] ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) checkObjectRelationShips:(NSManagedObject *) inManagedObject\n"
  "         correctedError: (NSUInteger *) ioCorrectedErrorsPtr\n"
  "         fatalErrors: (NSUInteger *) ioFatalErrorsPtr {\n"
  "  NSEntityDescription * entity = [inManagedObject entity] ;\n"
  "  #ifdef EASY_BINDINGS_DEBUG\n"
  "    NSLog (@\"%s, object %p (%@)\", __PRETTY_FUNCTION__, inManagedObject, [entity name]) ;\n"
  "  #endif\n"
  "  NSDictionary * relationshipsByName = [entity relationshipsByName] ;\n"
  "  NSEnumerator * enumerator = [relationshipsByName objectEnumerator] ;\n"
  "  NSRelationshipDescription * rsd ;\n"
  "  while ((rsd = enumerator.nextObject)) {\n"
  "    const BOOL isToMany = [rsd isToMany] ;\n"
  "    if (isToMany) {\n"
  "     [self\n"
  "        checkToManyRelationship:rsd\n"
  "        forObject:inManagedObject\n"
  "        correctedError:ioCorrectedErrorsPtr\n"
  "        fatalErrors:ioFatalErrorsPtr\n"
  "      ] ;\n"
  "    }else{\n"
  "      [self\n"
  "        checkToOneRelationship:rsd\n"
  "        forObject:inManagedObject\n"
  "        correctedError:ioCorrectedErrorsPtr\n"
  "        fatalErrors:ioFatalErrorsPtr\n"
  "      ] ;\n"
  "    }\n"
  "  }\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (IBAction) checkRelationships: (id) inSender {\n"
  "  #ifdef EASY_BINDINGS_DEBUG\n"
  "    NSLog (@\"%s\", __PRETTY_FUNCTION__) ;\n"
  "  #endif\n"
  "//--- Build and show Panel\n"
  "  const NSRect panelRect = {{0.0, 0.0}, {295.0, 107.0}} ;\n"
  "  NSPanel * panel = [[NSPanel alloc] initWithContentRect:panelRect styleMask:NSTitledWindowMask backing:NSBackingStoreBuffered defer:NO] ;\n"
  "  const NSRect textRect = {{17.0, 45.0}, {261.0, 17.0}} ;\n"
  "  NSTextField * tf = [[NSTextField alloc] initWithFrame:textRect] ;\n"
  "  [tf setStringValue:@\"Checking Document Relationships...\"] ;\n"
  "  [tf setBezeled:NO] ;\n"
  "  [tf setBordered:NO] ;\n"
  "  [tf setDrawsBackground:NO] ;\n"
  "  [tf setEditable:NO] ;\n"
  "  [tf setFont:[NSFont boldSystemFontOfSize:0.0F]] ;\n"
  "  [[panel contentView] addSubview:tf] ;\n"
  "  [NSApp\n"
  "    beginSheet:panel\n"
  "    modalForWindow:self.windowForSheet\n"
  "    modalDelegate:nil\n"
  "    didEndSelector:NULL\n"
  "    contextInfo:NULL\n"
  "  ] ;\n"
  "  [panel display] ;\n"
  "//--- Fetch all instances of root entity (normally only one !)\n"
  "  NSManagedObjectContext * moc = self.managedObjectContext ;\n"
  "  NSEntityDescription * rootEntity = [self.rootObject entity] ;\n"
  "  NSFetchRequest * fr = [[NSFetchRequest alloc] init] ;\n"
  "  [fr setEntity:rootEntity] ;\n"
  "  NSError * error = nil ;\n"
  "  NSArray * allInstancesOfRootEntity = [moc executeFetchRequest:fr error:& error] ;\n"
  "  const NSUInteger n = [allInstancesOfRootEntity count] ;\n"
  "  BOOL ok = YES ;\n"
  "  if (error != nil) {\n"
  "    ok = NO ;\n"
  "    [panel orderOut:nil] ; [NSApp endSheet:panel] ; panel = nil ;\n"
  "    [self.managedObjectContext processPendingChanges] ;\n"
  "    NSAlert * alert = [NSAlert alertWithError:error] ;\n"
  "    [alert runModal] ;\n"
  "  }else if (n != 1) {\n"
  "    ok = NO ;\n"
  "    [panel orderOut:nil] ; [NSApp endSheet:panel] ; panel = nil ;\n"
  "    [self.managedObjectContext processPendingChanges] ;\n"
  "    NSAlert * alert = [NSAlert\n"
  "      alertWithMessageText:@\"Object Graph Error\"\n"
  "      defaultButton:@\"Ok\"\n"
  "      alternateButton:nil\n"
  "      otherButton:nil\n"
  "      informativeTextWithFormat:@\"There %s %lu instance%s of root entity. Normally, there is exactly one instance of root entity.\",\n"
  "        (n > 1) \? \"are\" : \"is\", n, (n > 1) \? \"s\" : \"\"\n"
  "    ] ;\n"
  "    [alert beginSheetModalForWindow:self.windowForSheet modalDelegate:nil didEndSelector:NULL contextInfo:NULL] ;\n"
  "  }\n"
  "  if (ok) {\n"
  "  //--- Get Registered Objects\n"
  "    NSSet * registeredObjects = [moc registeredObjects] ;\n"
  "  //--- Find reachable objects from root entity\n"
  "    NSMutableSet * reachableObjects = [NSMutableSet setWithCapacity:[registeredObjects count]] ;\n"
  "    [self recursiveSearch:reachableObjects withObject:[allInstancesOfRootEntity objectAtIndex:0]] ;\n"
  "    NSEnumerator * enumerator = [reachableObjects objectEnumerator] ;\n"
  "    NSManagedObject * object ;\n"
  "    NSUInteger correctedErrors = 0 ;\n"
  "    NSUInteger fatalErrors = 0 ;\n"
  "    while ((object = enumerator.nextObject)) {\n"
  "      [self checkObjectRelationShips:object correctedError: & correctedErrors fatalErrors: & fatalErrors] ;\n"
  "    }\n"
  "    if ((correctedErrors != 0) || (fatalErrors != 0)) {\n"
  "      [panel orderOut:nil] ; [NSApp endSheet:panel] ; panel = nil ;\n"
  "      [self.managedObjectContext processPendingChanges] ;\n"
  "      NSAlert * alert = [NSAlert\n"
  "        alertWithMessageText:@\"Object Graph Relationship Error\"\n"
  "        defaultButton:@\"Ok\"\n"
  "        alternateButton:nil\n"
  "        otherButton:nil\n"
  "        informativeTextWithFormat:@\"%lu object relationship%s been corrected, \"\n"
  "          \"%lu object relationship%s cannot be corrected.\",\n"
  "          correctedErrors,\n"
  "          (correctedErrors > 1) \? \"s have\" : \" has\",\n"
  "          fatalErrors,\n"
  "          (fatalErrors > 1) \? \"s\" : \"\"\n"
  "      ] ;\n"
  "      [alert\n"
  "        beginSheetModalForWindow:self.windowForSheet\n"
  "        modalDelegate:nil\n"
  "        didEndSelector:NULL\n"
  "        contextInfo:NULL\n"
  "      ] ;\n"
  "    }\n"
  "  }\n"
  "  if (ok) {\n"
  "    if (panel != nil) {\n"
  "      [panel orderOut:nil] ; [NSApp endSheet:panel] ;\n"
  "    }\n"
  "    [self.managedObjectContext processPendingChanges] ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#pragma mark Object Explorer Window\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//                                                                           *\n"
  "//                        showObjectExplorerWindow:                          *\n"
  "//                                                                           *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) showObjectExplorerWindow: (id) inUnusedSender {\n"
  "  #ifdef PM_COCOA_DEBUG\n"
  "    [self.rootObject showExplorerWindow] ;\n"
  "  #endif\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#pragma mark Toolbar\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (IBAction) setToolbarDisplaySizeAction: (id) inSender {\n"
  "  NSToolbar * toolbar = [self.windowForSheet toolbar] ;\n"
  "  NSToolbarSizeMode sizeMode = [toolbar sizeMode] ;\n"
  "  [toolbar setSizeMode: (sizeMode == NSToolbarSizeModeRegular)\n"
  "    \? NSToolbarSizeModeSmall\n"
  "    : NSToolbarSizeModeRegular\n"
  "  ] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (IBAction) setToolbarDisplayModeAction: (id) inSender {\n"
  "  NSToolbar * toolbar = [self.windowForSheet toolbar] ;\n"
  "  NSToolbarDisplayMode displayMode = [toolbar displayMode] ;\n"
  "  [toolbar setDisplayMode: (displayMode == NSToolbarDisplayModeIconOnly)\n"
  "    \? NSToolbarDisplayModeIconAndLabel\n"
  "    : NSToolbarDisplayModeIconOnly\n"
  "  ] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (BOOL) validateMenuItem: (NSMenuItem *) inMenuItem {\n"
  "  NSToolbar * toolbar = [self.windowForSheet toolbar] ;\n"
  "  BOOL validates = NO ;\n"
  "  SEL sel = [inMenuItem action] ;\n"
  "  if (sel == @selector (setToolbarDisplaySizeAction:)) {\n"
  "    validates = toolbar != nil ;\n"
  "    if (toolbar == nil) {\n"
  "      [inMenuItem setState:NSOffState] ;\n"
  "    }else if ([toolbar sizeMode] == NSToolbarSizeModeSmall) {\n"
  "      [inMenuItem setState:NSOnState] ;\n"
  "    }else{\n"
  "      [inMenuItem setState:NSOffState] ;\n"
  "    }\n"
  "  }else if (sel == @selector (setToolbarDisplayModeAction:)) {\n"
  "    validates = toolbar != nil ;\n"
  "    if (toolbar == nil) {\n"
  "      [inMenuItem setState:NSOffState] ;\n"
  "    }else if ([toolbar displayMode] == NSToolbarDisplayModeIconAndLabel) {\n"
  "      [inMenuItem setState:NSOnState] ;\n"
  "    }else{\n"
  "      [inMenuItem setState:NSOffState] ;\n"
  "    }\n"
  "  }else{\n"
  "    validates = [super validateMenuItem:inMenuItem] ;\n"
  "  }\n"
  "  return validates ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#pragma mark Get Root Object (abstract method)\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (NSManagedObject *) rootObject {\n"
  "  NSLog (@\"%s is an abstract method; it must be overriden\", __PRETTY_FUNCTION__) ;\n"
  "  return nil ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@end\n" ;

static const cRegularFileWrapper gWrapperFile_1_objective_5F_c_5F_sources (
  "PMAbstractPersistentDocument.m",
  "m",
  true, // Text file
  34951, // Text length
  gWrapperFileContent_1_objective_5F_c_5F_sources
) ;

//--- File '/PMAllocationDebug.h'

static const char * gWrapperFileContent_2_objective_5F_c_5F_sources = "//----------------------------------------------------------------------------*\n"
  "\n"
  "#import <Foundation/Foundation.h>\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  #define macroNoteObjectAllocation(object) routineNoteObjectAllocation (object)\n"
  "  void routineNoteObjectAllocation (NSObject * inObject) ;\n"
  "#else\n"
  "  #define macroNoteObjectAllocation(object)\n"
  "#endif\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  #define macroNoteObjectDeallocation(object) routineNoteObjectDeallocation (object)\n"
  "  void routineNoteObjectDeallocation (NSObject * inObject) ;\n"
  "#else\n"
  "  #define macroNoteObjectDeallocation(object)\n"
  "#endif\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  #define macroShowAllocationStatsWindow routineShowAllocationStatsWindow ()\n"
  "  void routineShowAllocationStatsWindow (void) ;\n"
  "#else\n"
  "  #define macroShowAllocationStatsWindow\n"
  "#endif\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  #define macroAddItemToDebugMenu(ITEM) addItemToDebugMenu (ITEM)\n"
  "  void addItemToDebugMenu (NSMenuItem * inMenuItem) ;\n"
  "#else\n"
  "  #define macroAddItemToDebugMenu(ITEM)\n"
  "#endif\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  @interface PMAllocationDebug : NSObject <NSTableViewDataSource> {\n"
  "    @private IBOutlet NSButton * mAllocationStatsWindowVisibleAtLaunchCheckbox ;\n"
  "    @private IBOutlet NSPopUpButton * mDisplayFilterPopUpButton ;\n"
  "    @private IBOutlet NSMenu * mDebugMenu ;\n"
  "    @private IBOutlet NSWindow * mAllocationStatsWindow ;\n"
  "    @private IBOutlet NSTextField * mCurrentlyAllocatedObjectCountTextField ;\n"
  "    @private IBOutlet NSTextField * mTotalAllocatedObjectCountTextField ;\n"
  "    @private IBOutlet NSTableView * mStatsTableView ;\n"
  "    \n"
  "    @private NSCountedSet * mAllocatedObjectCountByClass ;\n"
  "    @private NSCountedSet * mTotalAllocatedObjectCountByClass ;\n"
  "    @private BOOL mRefreshStatsHasTriggered ;\n"
  "    @private NSArray * mAllocationStatsDataSource ;\n"
  "  }\n"
  "\n"
  "  @property BOOL mAllocationStatsWindowVisibleAtLaunch ;\n"
  "  @property NSUInteger mAllocatedObjectCount ;\n"
  "  @property NSUInteger mTotalAllocatedObjectCount ;\n"
  "  @property NSInteger mDisplayFilter ;\n"
  "  \n"
  "  @end\n"
  "#endif\n"
  "\n"
  "//----------------------------------------------------------------------------*\n" ;

static const cRegularFileWrapper gWrapperFile_2_objective_5F_c_5F_sources (
  "PMAllocationDebug.h",
  "h",
  true, // Text file
  2437, // Text length
  gWrapperFileContent_2_objective_5F_c_5F_sources
) ;

//--- File '/PMAllocationDebug.m'

static const char * gWrapperFileContent_3_objective_5F_c_5F_sources = "#ifdef PM_COCOA_DEBUG\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "#import \"PMAllocationDebug.h\"\n"
  "#import \"easy-bindings-utilities.h\"\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "static PMAllocationDebug * gDebugObject ;\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "@implementation PMAllocationDebug\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "@synthesize mAllocationStatsWindowVisibleAtLaunch ;\n"
  "@synthesize mAllocatedObjectCount ;\n"
  "@synthesize mTotalAllocatedObjectCount ;\n"
  "@synthesize mDisplayFilter ;\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    init                                                                    *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (id) init {\n"
  "  //  NSLog (@\"%s %p\", __PRETTY_FUNCTION__, self) ;\n"
  "  self = [super init] ;\n"
  "  if (self) {\n"
  "    mAllocatedObjectCountByClass = [NSCountedSet new] ;\n"
  "    mTotalAllocatedObjectCountByClass = [NSCountedSet new] ;\n"
  "  //---\n"
  "    [[NSNotificationCenter defaultCenter]\n"
  "      addObserver:self\n"
  "      selector:@selector(applicationWillTerminateAction:)\n"
  "      name:NSApplicationWillTerminateNotification\n"
  "      object:nil\n"
  "    ] ;\n"
  "  //---\n"
  "    [[NSRunLoop mainRunLoop]\n"
  "      performSelector:@selector (pmInstallDebugMenu)\n"
  "      target:self\n"
  "      argument:nil\n"
  "      order:NSUIntegerMax\n"
  "      modes:[NSArray arrayWithObject:NSDefaultRunLoopMode]\n"
  "    ] ;\n"
  "  }\n"
  "  return self ;\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    pmInstallDebugMenu                                                      *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) pmInstallDebugMenu {\n"
  "  NSMenuItem * item = [[NSMenuItem alloc]\n"
  "    initWithTitle:@\"\"\n"
  "    action:NULL\n"
  "    keyEquivalent:@\"\"\n"
  "  ] ;\n"
  "  [item setSubmenu:mDebugMenu] ;\n"
  "  [[NSApp mainMenu] addItem:item] ;\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    addDebugMenuItem:                                                       *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) addDebugMenuItem: (NSMenuItem *) inMenuItem {\n"
  "  [mDebugMenu addItem:inMenuItem] ;\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    awakeFromNib                                                            *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) awakeFromNib {\n"
  "  // NSLog (@\"%s %p %p\", __PRETTY_FUNCTION__, self, mDebugMenu) ;\n"
  "//--- Allocation Window visibility\n"
  "  self.mAllocationStatsWindowVisibleAtLaunch = [[NSUserDefaults standardUserDefaults]\n"
  "    boolForKey:@\"PMAllocationDebug:allocationStatsWindowVisible\"\n"
  "  ] ;\n"
  "  self.mDisplayFilter = [[NSUserDefaults standardUserDefaults]\n"
  "    integerForKey:@\"PMAllocationDebug:allocationStatsDisplayFilter\"\n"
  "  ] ;\n"
  "//--- Allocation stats window visibility at Launch\n"
  "  if (self.mAllocationStatsWindowVisibleAtLaunch) {\n"
  "    [mAllocationStatsWindow makeKeyAndOrderFront:nil] ;\n"
  "  }\n"
  "//--- Bindings\n"
  "  [mAllocationStatsWindowVisibleAtLaunchCheckbox\n"
  "    bind:@\"value\"\n"
  "    toObject:self\n"
  "    withKeyPath:@\"mAllocationStatsWindowVisibleAtLaunch\"\n"
  "    options:nil\n"
  "  ] ;\n"
  "  [mCurrentlyAllocatedObjectCountTextField\n"
  "    bind:@\"value\"\n"
  "    toObject:self\n"
  "    withKeyPath:@\"mAllocatedObjectCount\"\n"
  "    options:nil\n"
  "  ] ;\n"
  "  [mTotalAllocatedObjectCountTextField\n"
  "    bind:@\"value\"\n"
  "    toObject:self\n"
  "    withKeyPath:@\"mTotalAllocatedObjectCount\"\n"
  "    options:nil\n"
  "  ] ;\n"
  "  [mDisplayFilterPopUpButton\n"
  "    bind:@\"selectedIndex\"\n"
  "    toObject:self\n"
  "    withKeyPath:@\"mDisplayFilter\"\n"
  "    options:nil\n"
  "  ] ;\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    applicationWillTerminateAction:                                         *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) applicationWillTerminateAction: (NSNotification *) inNotification {\n"
  "  // NSLog (@\"%s\", __PRETTY_FUNCTION__) ;\n"
  "  // NSLog (@\"%d\", self.mAllocationStatsWindowVisibleAtLaunch) ;\n"
  "  NSUserDefaults * ud = [NSUserDefaults standardUserDefaults] ;\n"
  "  [ud\n"
  "    setBool:self.mAllocationStatsWindowVisibleAtLaunch\n"
  "    forKey:@\"PMAllocationDebug:allocationStatsWindowVisible\"\n"
  "  ] ;\n"
  "  [ud\n"
  "    setInteger:self.mDisplayFilter\n"
  "    forKey:@\"PMAllocationDebug:allocationStatsDisplayFilter\"\n"
  "  ] ;\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    triggerRefreshAllocationStatsDisplay                                    *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) triggerRefreshAllocationStatsDisplay {\n"
  "  if (! mRefreshStatsHasTriggered) {\n"
  "    mRefreshStatsHasTriggered = YES ;\n"
  "    [[NSRunLoop currentRunLoop]\n"
  "      performSelector:@selector (refreshAllocationStats)\n"
  "      target:self\n"
  "      argument:nil\n"
  "      order:NSUIntegerMax\n"
  "      modes:[NSArray arrayWithObject:NSDefaultRunLoopMode]\n"
  "    ] ;\n"
  "  }\n"
  "}\n"
  "\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    didChangeValueForKey:                                                   *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) didChangeValueForKey: (NSString *) inKey {\n"
  "  [super didChangeValueForKey:inKey] ;\n"
  "  if ([inKey isEqualToString:@\"mDisplayFilter\"]) {\n"
  "    [self triggerRefreshAllocationStatsDisplay] ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    pmNoteObjectAllocation:                                                 *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) pmNoteObjectAllocation: (NSString *) inObjectClassName {\n"
  "  //NSLog (@\"objectClassName %@\", inObjectClassName) ;\n"
  "  [mAllocatedObjectCountByClass addObject:inObjectClassName] ;\n"
  "  [mTotalAllocatedObjectCountByClass addObject:inObjectClassName] ;\n"
  "  [self triggerRefreshAllocationStatsDisplay] ;\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    pmNoteObjectDeallocation:                                               *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) pmNoteObjectDeallocation: (NSString *) inObjectClassName {\n"
  "  // NSLog (@\"DEALLOC objectClassName %@\", inObjectClassName) ;\n"
  "  [mAllocatedObjectCountByClass removeObject:inObjectClassName] ;\n"
  "  [self triggerRefreshAllocationStatsDisplay] ;\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    refreshAllocationStats                                                  *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) refreshAllocationStats {\n"
  "  mRefreshStatsHasTriggered = NO ;\n"
  "//---\n"
  "  NSUInteger liveObjectCount = 0 ;\n"
  "  NSUInteger totalObjectCount = 0 ;\n"
  "//---\n"
  "  NSMutableArray * array = [NSMutableArray new] ;\n"
  "  for (NSString * className in [mTotalAllocatedObjectCountByClass.allObjects sortedArrayUsingSelector:@selector(compare:)]) {\n"
  "    const NSUInteger liveByClass = [mAllocatedObjectCountByClass countForObject:className] ;\n"
  "    const NSUInteger totalByClass = [mTotalAllocatedObjectCountByClass countForObject:className] ;\n"
  "    liveObjectCount += liveByClass ;\n"
  "    totalObjectCount += totalByClass ;\n"
  "    if ((totalByClass != 0) || (self.mDisplayFilter == 0)) {\n"
  "      [array addObject: [NSDictionary\n"
  "        dictionaryWithObjectsAndKeys:\n"
  "          className, @\"classname\",\n"
  "          [NSNumber numberWithUnsignedInteger:totalByClass], @\"allCount\",\n"
  "          [NSNumber numberWithUnsignedInteger:liveByClass], @\"live\",\n"
  "          nil\n"
  "        ]\n"
  "      ] ;\n"
  "    }\n"
  "  }\n"
  "//---\n"
  "  self.mAllocatedObjectCount = liveObjectCount ;\n"
  "  self.mTotalAllocatedObjectCount = totalObjectCount ;\n"
  "//---\n"
  "  mAllocationStatsDataSource = array ;\n"
  "  [mStatsTableView setDataSource:self] ;\n"
  "  [mStatsTableView reloadData] ;\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    T A B L E   V I E W    D A T A    S O U R C E                           *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (id) tableView: (NSTableView *) aTableView\n"
  "       objectValueForTableColumn: (NSTableColumn *) aTableColumn\n"
  "       row: (NSInteger) rowIndex {\n"
  "  NSDictionary * theRecord = [mAllocationStatsDataSource objectAtIndex:(NSUInteger) rowIndex];\n"
  "  return [theRecord valueForKey:aTableColumn.identifier] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (NSInteger) numberOfRowsInTableView: (NSTableView *) aTableView {\n"
  "  return (NSInteger) [mAllocationStatsDataSource count] ;\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    S H O W     A L L O C A T I O N    S T A T S    W I N D O W             *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) pmShowAllocationStatsWindow {\n"
  "  [mStatsTableView.window makeKeyAndOrderFront:nil] ;\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "@end\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    R O U T I N E S                                                         *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "void routineNoteObjectAllocation (NSObject * inObject) {\n"
  "  if (nil == gDebugObject) {\n"
  "    gDebugObject = [PMAllocationDebug new] ;\n"
  "    const BOOL ok = [NSBundle loadNibNamed:@\"PMAllocationDebug\" owner:gDebugObject] ;\n"
  "    if (! ok) {\n"
  "      presentErrorWindow (__FILE__, __LINE__, @\"Cannot load 'PMAllocationDebug' nib file\") ;\n"
  "    }\n"
  "  }\n"
  "  [[NSRunLoop mainRunLoop]\n"
  "    performSelector:@selector (pmNoteObjectAllocation:)\n"
  "    target:gDebugObject\n"
  "    argument:inObject.className\n"
  "    order:NSUIntegerMax\n"
  "    modes:[NSArray arrayWithObject:NSRunLoopCommonModes]\n"
  "  ] ;\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "void routineNoteObjectDeallocation (NSObject * inObject) {\n"
  "  [[NSRunLoop mainRunLoop]\n"
  "    performSelector:@selector (pmNoteObjectDeallocation:)\n"
  "    target:gDebugObject\n"
  "    argument:inObject.className\n"
  "    order:NSUIntegerMax\n"
  "    modes:[NSArray arrayWithObject:NSRunLoopCommonModes]\n"
  "  ] ;\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "void routineShowAllocationStatsWindow (void) {\n"
  "  [gDebugObject pmShowAllocationStatsWindow] ;\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  void addItemToDebugMenu (NSMenuItem * inMenuItem) {\n"
  "    if (nil == gDebugObject) {\n"
  "      gDebugObject = [PMAllocationDebug new] ;\n"
  "      const BOOL ok = [NSBundle loadNibNamed:@\"PMAllocationDebug\" owner:gDebugObject] ;\n"
  "      if (! ok) {\n"
  "        presentErrorWindow (__FILE__, __LINE__, @\"Cannot load 'PMAllocationDebug' nib file\") ;\n"
  "      }\n"
  "    }\n"
  "    [[NSRunLoop mainRunLoop]\n"
  "      performSelector:@selector (addDebugMenuItem:)\n"
  "      target:gDebugObject\n"
  "      argument:inMenuItem\n"
  "      order:NSUIntegerMax\n"
  "      modes:[NSArray arrayWithObject:NSDefaultRunLoopMode]\n"
  "    ] ;\n"
  "\n"
  "  }\n"
  "#endif\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "#endif\n"
  "\n" ;

static const cRegularFileWrapper gWrapperFile_3_objective_5F_c_5F_sources (
  "PMAllocationDebug.m",
  "m",
  true, // Text file
  11297, // Text length
  gWrapperFileContent_3_objective_5F_c_5F_sources
) ;

//--- File '/PMAllocationDebug.xib'

static const char * gWrapperFileContent_4_objective_5F_c_5F_sources = "<\?xml version=\"1.0\" encoding=\"UTF-8\"\?>\n"
  "<archive type=\"com.apple.InterfaceBuilder3.Cocoa.XIB\" version=\"8.00\">\n"
  "\t<data>\n"
  "\t\t<int key=\"IBDocument.SystemTarget\">1070</int>\n"
  "\t\t<string key=\"IBDocument.SystemVersion\">11G63</string>\n"
  "\t\t<string key=\"IBDocument.InterfaceBuilderVersion\">2182</string>\n"
  "\t\t<string key=\"IBDocument.AppKitVersion\">1138.51</string>\n"
  "\t\t<string key=\"IBDocument.HIToolboxVersion\">569.00</string>\n"
  "\t\t<object class=\"NSMutableDictionary\" key=\"IBDocument.PluginVersions\">\n"
  "\t\t\t<string key=\"NS.key.0\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t<string key=\"NS.object.0\">2182</string>\n"
  "\t\t</object>\n"
  "\t\t<array key=\"IBDocument.IntegratedClassDependencies\">\n"
  "\t\t\t<string>NSTableColumn</string>\n"
  "\t\t\t<string>NSPopUpButton</string>\n"
  "\t\t\t<string>NSTableHeaderView</string>\n"
  "\t\t\t<string>NSMenuItem</string>\n"
  "\t\t\t<string>NSMenu</string>\n"
  "\t\t\t<string>NSScrollView</string>\n"
  "\t\t\t<string>NSTextFieldCell</string>\n"
  "\t\t\t<string>NSScroller</string>\n"
  "\t\t\t<string>NSNumberFormatter</string>\n"
  "\t\t\t<string>NSButton</string>\n"
  "\t\t\t<string>NSTableView</string>\n"
  "\t\t\t<string>IBNSLayoutConstraint</string>\n"
  "\t\t\t<string>NSButtonCell</string>\n"
  "\t\t\t<string>NSCustomObject</string>\n"
  "\t\t\t<string>NSView</string>\n"
  "\t\t\t<string>NSWindowTemplate</string>\n"
  "\t\t\t<string>NSTextField</string>\n"
  "\t\t\t<string>NSPopUpButtonCell</string>\n"
  "\t\t</array>\n"
  "\t\t<array key=\"IBDocument.PluginDependencies\">\n"
  "\t\t\t<string>com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t</array>\n"
  "\t\t<object class=\"NSMutableDictionary\" key=\"IBDocument.Metadata\">\n"
  "\t\t\t<string key=\"NS.key.0\">PluginDependencyRecalculationVersion</string>\n"
  "\t\t\t<integer value=\"1\" key=\"NS.object.0\"/>\n"
  "\t\t</object>\n"
  "\t\t<array class=\"NSMutableArray\" key=\"IBDocument.RootObjects\" id=\"1000\">\n"
  "\t\t\t<object class=\"NSCustomObject\" id=\"1001\">\n"
  "\t\t\t\t<string key=\"NSClassName\">PMAllocationDebug</string>\n"
  "\t\t\t</object>\n"
  "\t\t\t<object class=\"NSCustomObject\" id=\"1003\">\n"
  "\t\t\t\t<string key=\"NSClassName\">FirstResponder</string>\n"
  "\t\t\t</object>\n"
  "\t\t\t<object class=\"NSCustomObject\" id=\"1004\">\n"
  "\t\t\t\t<string key=\"NSClassName\">NSApplication</string>\n"
  "\t\t\t</object>\n"
  "\t\t\t<object class=\"NSMenu\" id=\"832895925\">\n"
  "\t\t\t\t<string key=\"NSTitle\">Debug</string>\n"
  "\t\t\t\t<array class=\"NSMutableArray\" key=\"NSMenuItems\">\n"
  "\t\t\t\t\t<object class=\"NSMenuItem\" id=\"391542348\">\n"
  "\t\t\t\t\t\t<reference key=\"NSMenu\" ref=\"832895925\"/>\n"
  "\t\t\t\t\t\t<string key=\"NSTitle\">Show Allocation Stats</string>\n"
  "\t\t\t\t\t\t<string key=\"NSKeyEquiv\">,</string>\n"
  "\t\t\t\t\t\t<int key=\"NSKeyEquivModMask\">1310720</int>\n"
  "\t\t\t\t\t\t<int key=\"NSMnemonicLoc\">2147483647</int>\n"
  "\t\t\t\t\t\t<object class=\"NSCustomResource\" key=\"NSOnImage\" id=\"538130668\">\n"
  "\t\t\t\t\t\t\t<string key=\"NSClassName\">NSImage</string>\n"
  "\t\t\t\t\t\t\t<string key=\"NSResourceName\">NSMenuCheckmark</string>\n"
  "\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t<object class=\"NSCustomResource\" key=\"NSMixedImage\" id=\"339904000\">\n"
  "\t\t\t\t\t\t\t<string key=\"NSClassName\">NSImage</string>\n"
  "\t\t\t\t\t\t\t<string key=\"NSResourceName\">NSMenuMixedState</string>\n"
  "\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t</array>\n"
  "\t\t\t</object>\n"
  "\t\t\t<object class=\"NSWindowTemplate\" id=\"488945732\">\n"
  "\t\t\t\t<int key=\"NSWindowStyleMask\">15</int>\n"
  "\t\t\t\t<int key=\"NSWindowBacking\">2</int>\n"
  "\t\t\t\t<string key=\"NSWindowRect\">{{18, 448}, {532, 360}}</string>\n"
  "\t\t\t\t<int key=\"NSWTFlags\">1886913536</int>\n"
  "\t\t\t\t<string key=\"NSWindowTitle\">Allocation Stats</string>\n"
  "\t\t\t\t<string key=\"NSWindowClass\">NSWindow</string>\n"
  "\t\t\t\t<object class=\"NSMutableString\" key=\"NSViewClass\">\n"
  "\t\t\t\t\t<characters key=\"NS.bytes\">View</characters>\n"
  "\t\t\t\t</object>\n"
  "\t\t\t\t<nil key=\"NSUserInterfaceItemIdentifier\"/>\n"
  "\t\t\t\t<string key=\"NSWindowContentMinSize\">{532, 360}</string>\n"
  "\t\t\t\t<object class=\"NSView\" key=\"NSWindowView\" id=\"211121235\">\n"
  "\t\t\t\t\t<nil key=\"NSNextResponder\"/>\n"
  "\t\t\t\t\t<int key=\"NSvFlags\">256</int>\n"
  "\t\t\t\t\t<array class=\"NSMutableArray\" key=\"NSSubviews\">\n"
  "\t\t\t\t\t\t<object class=\"NSScrollView\" id=\"694864762\">\n"
  "\t\t\t\t\t\t\t<reference key=\"NSNextResponder\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t<int key=\"NSvFlags\">274</int>\n"
  "\t\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"NSSubviews\">\n"
  "\t\t\t\t\t\t\t\t<object class=\"NSClipView\" id=\"477363090\">\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSNextResponder\" ref=\"694864762\"/>\n"
  "\t\t\t\t\t\t\t\t\t<int key=\"NSvFlags\">2304</int>\n"
  "\t\t\t\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"NSSubviews\">\n"
  "\t\t\t\t\t\t\t\t\t\t<object class=\"NSTableView\" id=\"54967480\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSNextResponder\" ref=\"477363090\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSvFlags\">4352</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSFrameSize\">{521, 262}</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSSuperview\" ref=\"477363090\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSNextKeyView\" ref=\"870119755\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<bool key=\"NSEnabled\">YES</bool>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSTableHeaderView\" key=\"NSHeaderView\" id=\"933801029\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSNextResponder\" ref=\"870119755\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSvFlags\">256</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSFrameSize\">{521, 17}</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSSuperview\" ref=\"870119755\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSNextKeyView\" ref=\"385156970\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSTableView\" ref=\"54967480\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<object class=\"_NSCornerView\" key=\"NSCornerView\" id=\"385156970\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSNextResponder\" ref=\"694864762\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSvFlags\">256</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSFrame\">{{521, 0}, {12, 17}}</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSSuperview\" ref=\"694864762\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSNextKeyView\" ref=\"477363090\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"NSTableColumns\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSTableColumn\" id=\"665282369\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSIdentifier\">classname</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<double key=\"NSWidth\">355</double>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<double key=\"NSMinWidth\">40</double>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<double key=\"NSMaxWidth\">1000</double>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSTableHeaderCell\" key=\"NSHeaderCell\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSCellFlags\">75628096</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSCellFlags2\">2048</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSContents\">Class Name</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSFont\" key=\"NSSupport\" id=\"26\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSName\">LucidaGrande</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<double key=\"NSSize\">11</double>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSfFlags\">3100</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSColor\" key=\"NSBackgroundColor\" id=\"185912087\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSColorSpace\">3</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<bytes key=\"NSWhite\">MC4zMzMzMzI5OQA</bytes>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSColor\" key=\"NSTextColor\" id=\"700270135\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSColorSpace\">6</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSCatalogName\">System</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSColorName\">headerTextColor</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSColor\" key=\"NSColor\" id=\"155403614\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSColorSpace\">3</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<bytes key=\"NSWhite\">MAA</bytes>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSTextFieldCell\" key=\"NSDataCell\" id=\"820684983\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSCellFlags\">1144127041</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSCellFlags2\">1024</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSContents\">Text Cell</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSSupport\" ref=\"26\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSControlView\" ref=\"54967480\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSColor\" key=\"NSBackgroundColor\" id=\"730430839\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSColorSpace\">3</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<bytes key=\"NSWhite\">MQA</bytes>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSColor\" key=\"NSTextColor\" id=\"175780943\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSColorSpace\">6</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSCatalogName\">System</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSColorName\">controlTextColor</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSColor\" ref=\"155403614\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSResizingMask\">3</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<bool key=\"NSIsResizeable\">YES</bool>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSTableView\" ref=\"54967480\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSTableColumn\" id=\"404121835\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSIdentifier\">live</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<double key=\"NSWidth\">79</double>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<double key=\"NSMinWidth\">40</double>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<double key=\"NSMaxWidth\">1000</double>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSTableHeaderCell\" key=\"NSHeaderCell\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSCellFlags\">75628096</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSCellFlags2\">134219776</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSContents\">Live</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSSupport\" ref=\"26\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSBackgroundColor\" ref=\"185912087\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSTextColor\" ref=\"700270135\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSTextFieldCell\" key=\"NSDataCell\" id=\"590032922\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSCellFlags\">1144127041</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSCellFlags2\">134218752</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSContents\">Text Cell</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSSupport\" ref=\"26\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSControlView\" ref=\"54967480\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSBackgroundColor\" ref=\"730430839\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSTextColor\" ref=\"175780943\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSTableView\" ref=\"54967480\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSTableColumn\" id=\"610270419\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSIdentifier\">allCount</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<double key=\"NSWidth\">78.081050000000005</double>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<double key=\"NSMinWidth\">31.081050000000001</double>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<double key=\"NSMaxWidth\">1000</double>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSTableHeaderCell\" key=\"NSHeaderCell\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSCellFlags\">75628096</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSCellFlags2\">134219776</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSContents\">Total</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSSupport\" ref=\"26\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSColor\" key=\"NSBackgroundColor\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSColorSpace\">6</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSCatalogName\">System</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSColorName\">headerColor</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSColor\" ref=\"730430839\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSTextColor\" ref=\"700270135\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSTextFieldCell\" key=\"NSDataCell\" id=\"236796732\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSCellFlags\">1144127041</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSCellFlags2\">134218752</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSContents\">Text Cell</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSSupport\" ref=\"26\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSControlView\" ref=\"54967480\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSColor\" key=\"NSBackgroundColor\" id=\"1044488591\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSColorSpace\">6</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSCatalogName\">System</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSColorName\">controlBackgroundColor</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSColor\" key=\"NSColor\" id=\"122981434\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSColorSpace\">3</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<bytes key=\"NSWhite\">MC42NjY2NjY2NjY3AA</bytes>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSTextColor\" ref=\"175780943\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSTableView\" ref=\"54967480\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<double key=\"NSIntercellSpacingWidth\">3</double>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<double key=\"NSIntercellSpacingHeight\">2</double>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSBackgroundColor\" ref=\"1044488591\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSColor\" key=\"NSGridColor\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSColorSpace\">6</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSCatalogName\">System</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSColorName\">gridColor</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSColor\" key=\"NSColor\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSColorSpace\">3</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<bytes key=\"NSWhite\">MC41AA</bytes>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<double key=\"NSRowHeight\">14</double>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSTvFlags\">-490733568</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSDelegate\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSDataSource\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSGridStyleMask\">3</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSColumnAutoresizingStyle\">5</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSDraggingSourceMaskForLocal\">15</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSDraggingSourceMaskForNonLocal\">0</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<bool key=\"NSAllowsTypeSelect\">YES</bool>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSTableViewDraggingDestinationStyle\">0</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSTableViewGroupRowStyle\">1</int>\n"
  "\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NSFrame\">{{0, 17}, {521, 262}}</string>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSSuperview\" ref=\"694864762\"/>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSNextKeyView\" ref=\"54967480\"/>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSDocView\" ref=\"54967480\"/>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSBGColor\" ref=\"1044488591\"/>\n"
  "\t\t\t\t\t\t\t\t\t<int key=\"NScvFlags\">4</int>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<object class=\"NSScroller\" id=\"584677815\">\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSNextResponder\" ref=\"694864762\"/>\n"
  "\t\t\t\t\t\t\t\t\t<int key=\"NSvFlags\">256</int>\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NSFrame\">{{521, 17}, {11, 262}}</string>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSSuperview\" ref=\"694864762\"/>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSNextKeyView\" ref=\"466601769\"/>\n"
  "\t\t\t\t\t\t\t\t\t<int key=\"NSsFlags\">256</int>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSTarget\" ref=\"694864762\"/>\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NSAction\">_doScroller:</string>\n"
  "\t\t\t\t\t\t\t\t\t<double key=\"NSPercent\">0.95263160000000002</double>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<object class=\"NSScroller\" id=\"466601769\">\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSNextResponder\" ref=\"694864762\"/>\n"
  "\t\t\t\t\t\t\t\t\t<int key=\"NSvFlags\">256</int>\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NSFrame\">{{0, 279}, {521, 11}}</string>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSSuperview\" ref=\"694864762\"/>\n"
  "\t\t\t\t\t\t\t\t\t<int key=\"NSsFlags\">257</int>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSTarget\" ref=\"694864762\"/>\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NSAction\">_doScroller:</string>\n"
  "\t\t\t\t\t\t\t\t\t<double key=\"NSPercent\">0.99808429118773945</double>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<object class=\"NSClipView\" id=\"870119755\">\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSNextResponder\" ref=\"694864762\"/>\n"
  "\t\t\t\t\t\t\t\t\t<int key=\"NSvFlags\">2304</int>\n"
  "\t\t\t\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"NSSubviews\">\n"
  "\t\t\t\t\t\t\t\t\t\t<reference ref=\"933801029\"/>\n"
  "\t\t\t\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NSFrameSize\">{521, 17}</string>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSSuperview\" ref=\"694864762\"/>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSNextKeyView\" ref=\"933801029\"/>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSDocView\" ref=\"933801029\"/>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSBGColor\" ref=\"1044488591\"/>\n"
  "\t\t\t\t\t\t\t\t\t<int key=\"NScvFlags\">4</int>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<reference ref=\"385156970\"/>\n"
  "\t\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t\t<string key=\"NSFrameSize\">{532, 290}</string>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSSuperview\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSNextKeyView\" ref=\"477363090\"/>\n"
  "\t\t\t\t\t\t\t<int key=\"NSsFlags\">133168</int>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSVScroller\" ref=\"584677815\"/>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSHScroller\" ref=\"466601769\"/>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSContentView\" ref=\"477363090\"/>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSHeaderClipView\" ref=\"870119755\"/>\n"
  "\t\t\t\t\t\t\t<bytes key=\"NSScrollAmts\">QSAAAEEgAABBgAAAQYAAAA</bytes>\n"
  "\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t<object class=\"NSTextField\" id=\"381938415\">\n"
  "\t\t\t\t\t\t\t<reference key=\"NSNextResponder\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t<int key=\"NSvFlags\">268</int>\n"
  "\t\t\t\t\t\t\t<string key=\"NSFrame\">{{404, 308}, {111, 14}}</string>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSSuperview\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSNextKeyView\" ref=\"694864762\"/>\n"
  "\t\t\t\t\t\t\t<bool key=\"NSEnabled\">YES</bool>\n"
  "\t\t\t\t\t\t\t<object class=\"NSTextFieldCell\" key=\"NSCell\" id=\"868904438\">\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSCellFlags\">67239424</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSCellFlags2\">-2008940544</int>\n"
  "\t\t\t\t\t\t\t\t<string key=\"NSContents\">\xE2""\x80""\xA6""live count\xE2""\x80""\xA6"" </string>\n"
  "\t\t\t\t\t\t\t\t<object class=\"NSFont\" key=\"NSSupport\" id=\"27\">\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NSName\">LucidaGrande-Bold</string>\n"
  "\t\t\t\t\t\t\t\t\t<double key=\"NSSize\">11</double>\n"
  "\t\t\t\t\t\t\t\t\t<int key=\"NSfFlags\">3357</int>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<object class=\"NSNumberFormatter\" key=\"NSFormatter\" id=\"18967862\">\n"
  "\t\t\t\t\t\t\t\t\t<dictionary class=\"NSMutableDictionary\" key=\"NS.attributes\">\n"
  "\t\t\t\t\t\t\t\t\t\t<boolean value=\"YES\" key=\"allowsFloats\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t<integer value=\"1040\" key=\"formatterBehavior\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t<object class=\"NSLocale\" key=\"locale\" id=\"866676299\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t<string key=\"NS.identifier\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t<string key=\"negativeInfinitySymbol\">-\xE2""\x88""\x9E""</string>\n"
  "\t\t\t\t\t\t\t\t\t\t<string key=\"nilSymbol\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t<string key=\"positiveInfinitySymbol\">+\xE2""\x88""\x9E""</string>\n"
  "\t\t\t\t\t\t\t\t\t</dictionary>\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NS.positiveformat\">#</string>\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NS.negativeformat\">#</string>\n"
  "\t\t\t\t\t\t\t\t\t<nil key=\"NS.positiveattrs\"/>\n"
  "\t\t\t\t\t\t\t\t\t<nil key=\"NS.negativeattrs\"/>\n"
  "\t\t\t\t\t\t\t\t\t<nil key=\"NS.zero\"/>\n"
  "\t\t\t\t\t\t\t\t\t<object class=\"NSAttributedString\" key=\"NS.nil\">\n"
  "\t\t\t\t\t\t\t\t\t\t<string key=\"NSString\"/>\n"
  "\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t<object class=\"NSAttributedString\" key=\"NS.nan\">\n"
  "\t\t\t\t\t\t\t\t\t\t<string key=\"NSString\">NaN</string>\n"
  "\t\t\t\t\t\t\t\t\t\t<dictionary key=\"NSAttributes\" id=\"546668749\"/>\n"
  "\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t<object class=\"NSDecimalNumberPlaceholder\" key=\"NS.min\" id=\"446279750\">\n"
  "\t\t\t\t\t\t\t\t\t\t<int key=\"NS.exponent\">0</int>\n"
  "\t\t\t\t\t\t\t\t\t\t<int key=\"NS.length\">0</int>\n"
  "\t\t\t\t\t\t\t\t\t\t<bool key=\"NS.negative\">YES</bool>\n"
  "\t\t\t\t\t\t\t\t\t\t<bool key=\"NS.compact\">NO</bool>\n"
  "\t\t\t\t\t\t\t\t\t\t<int key=\"NS.mantissa.bo\">1</int>\n"
  "\t\t\t\t\t\t\t\t\t\t<bytes key=\"NS.mantissa\">AAAAAAAAAAAAAAAAAAAAAA</bytes>\n"
  "\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NS.max\" ref=\"446279750\"/>\n"
  "\t\t\t\t\t\t\t\t\t<object class=\"NSDecimalNumberHandler\" key=\"NS.rounding\">\n"
  "\t\t\t\t\t\t\t\t\t\t<int key=\"NS.roundingmode\">3</int>\n"
  "\t\t\t\t\t\t\t\t\t\t<bool key=\"NS.raise.overflow\">YES</bool>\n"
  "\t\t\t\t\t\t\t\t\t\t<bool key=\"NS.raise.underflow\">YES</bool>\n"
  "\t\t\t\t\t\t\t\t\t\t<bool key=\"NS.raise.dividebyzero\">YES</bool>\n"
  "\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NS.decimal\">.</string>\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NS.thousand\">,</string>\n"
  "\t\t\t\t\t\t\t\t\t<bool key=\"NS.hasthousands\">NO</bool>\n"
  "\t\t\t\t\t\t\t\t\t<bool key=\"NS.localized\">NO</bool>\n"
  "\t\t\t\t\t\t\t\t\t<bool key=\"NS.allowsfloats\">YES</bool>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSControlView\" ref=\"381938415\"/>\n"
  "\t\t\t\t\t\t\t\t<object class=\"NSColor\" key=\"NSBackgroundColor\" id=\"277825497\">\n"
  "\t\t\t\t\t\t\t\t\t<int key=\"NSColorSpace\">6</int>\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NSCatalogName\">System</string>\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NSColorName\">controlColor</string>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSColor\" ref=\"122981434\"/>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSTextColor\" ref=\"175780943\"/>\n"
  "\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t<object class=\"NSPopUpButton\" id=\"518079538\">\n"
  "\t\t\t\t\t\t\t<reference key=\"NSNextResponder\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t<int key=\"NSvFlags\">268</int>\n"
  "\t\t\t\t\t\t\t<string key=\"NSFrame\">{{78, 306}, {164, 19}}</string>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSSuperview\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSNextKeyView\" ref=\"381938415\"/>\n"
  "\t\t\t\t\t\t\t<bool key=\"NSEnabled\">YES</bool>\n"
  "\t\t\t\t\t\t\t<object class=\"NSPopUpButtonCell\" key=\"NSCell\" id=\"92687822\">\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSCellFlags\">-2076049856</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSCellFlags2\">134350848</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSSupport\" ref=\"26\"/>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSControlView\" ref=\"518079538\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSButtonFlags\">-2038284033</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSButtonFlags2\">6</int>\n"
  "\t\t\t\t\t\t\t\t<object class=\"NSFont\" key=\"NSAlternateImage\">\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NSName\">LucidaGrande</string>\n"
  "\t\t\t\t\t\t\t\t\t<double key=\"NSSize\">11</double>\n"
  "\t\t\t\t\t\t\t\t\t<int key=\"NSfFlags\">16</int>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<string key=\"NSAlternateContents\"/>\n"
  "\t\t\t\t\t\t\t\t<string key=\"NSKeyEquivalent\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSPeriodicDelay\">400</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSPeriodicInterval\">75</int>\n"
  "\t\t\t\t\t\t\t\t<object class=\"NSMenuItem\" key=\"NSMenuItem\" id=\"555303939\">\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSMenu\" ref=\"1027996105\"/>\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NSTitle\">All Classes</string>\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NSKeyEquiv\"/>\n"
  "\t\t\t\t\t\t\t\t\t<int key=\"NSMnemonicLoc\">2147483647</int>\n"
  "\t\t\t\t\t\t\t\t\t<int key=\"NSState\">1</int>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSOnImage\" ref=\"538130668\"/>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSMixedImage\" ref=\"339904000\"/>\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NSAction\">_popUpItemAction:</string>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSTarget\" ref=\"92687822\"/>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<bool key=\"NSMenuItemRespectAlignment\">YES</bool>\n"
  "\t\t\t\t\t\t\t\t<object class=\"NSMenu\" key=\"NSMenu\" id=\"1027996105\">\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NSTitle\">OtherViews</string>\n"
  "\t\t\t\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"NSMenuItems\">\n"
  "\t\t\t\t\t\t\t\t\t\t<reference ref=\"555303939\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t<object class=\"NSMenuItem\" id=\"590354082\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSMenu\" ref=\"1027996105\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSTitle\">Only Allocated Classes</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSKeyEquiv\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSMnemonicLoc\">2147483647</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSOnImage\" ref=\"538130668\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSMixedImage\" ref=\"339904000\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSAction\">_popUpItemAction:</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSTarget\" ref=\"92687822\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSPreferredEdge\">1</int>\n"
  "\t\t\t\t\t\t\t\t<bool key=\"NSUsesItemFromMenu\">YES</bool>\n"
  "\t\t\t\t\t\t\t\t<bool key=\"NSAltersState\">YES</bool>\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSArrowPosition\">2</int>\n"
  "\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t<object class=\"NSTextField\" id=\"146764676\">\n"
  "\t\t\t\t\t\t\t<reference key=\"NSNextResponder\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t<int key=\"NSvFlags\">268</int>\n"
  "\t\t\t\t\t\t\t<string key=\"NSFrame\">{{17, 308}, {56, 14}}</string>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSSuperview\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSNextKeyView\" ref=\"518079538\"/>\n"
  "\t\t\t\t\t\t\t<bool key=\"NSEnabled\">YES</bool>\n"
  "\t\t\t\t\t\t\t<object class=\"NSTextFieldCell\" key=\"NSCell\" id=\"1044367949\">\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSCellFlags\">67239424</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSCellFlags2\">4325376</int>\n"
  "\t\t\t\t\t\t\t\t<string key=\"NSContents\">Display:</string>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSSupport\" ref=\"27\"/>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSControlView\" ref=\"146764676\"/>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSBackgroundColor\" ref=\"277825497\"/>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSTextColor\" ref=\"175780943\"/>\n"
  "\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t<object class=\"NSButton\" id=\"477594254\">\n"
  "\t\t\t\t\t\t\t<reference key=\"NSNextResponder\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t<int key=\"NSvFlags\">268</int>\n"
  "\t\t\t\t\t\t\t<string key=\"NSFrame\">{{19, 333}, {225, 18}}</string>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSSuperview\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSNextKeyView\" ref=\"146764676\"/>\n"
  "\t\t\t\t\t\t\t<string key=\"NSReuseIdentifierKey\">_NS:9</string>\n"
  "\t\t\t\t\t\t\t<bool key=\"NSEnabled\">YES</bool>\n"
  "\t\t\t\t\t\t\t<object class=\"NSButtonCell\" key=\"NSCell\" id=\"255990638\">\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSCellFlags\">-2080244224</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSCellFlags2\">131072</int>\n"
  "\t\t\t\t\t\t\t\t<string key=\"NSContents\">Visible At Launch</string>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSSupport\" ref=\"26\"/>\n"
  "\t\t\t\t\t\t\t\t<string key=\"NSCellIdentifier\">_NS:9</string>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSControlView\" ref=\"477594254\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSButtonFlags\">1211912703</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSButtonFlags2\">2</int>\n"
  "\t\t\t\t\t\t\t\t<object class=\"NSCustomResource\" key=\"NSNormalImage\">\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NSClassName\">NSImage</string>\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NSResourceName\">NSSwitch</string>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<object class=\"NSButtonImageSource\" key=\"NSAlternateImage\">\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NSImageName\">NSSwitch</string>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<string key=\"NSAlternateContents\"/>\n"
  "\t\t\t\t\t\t\t\t<string key=\"NSKeyEquivalent\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSPeriodicDelay\">200</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSPeriodicInterval\">25</int>\n"
  "\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t<object class=\"NSTextField\" id=\"336406046\">\n"
  "\t\t\t\t\t\t\t<reference key=\"NSNextResponder\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t<int key=\"NSvFlags\">268</int>\n"
  "\t\t\t\t\t\t\t<string key=\"NSFrame\">{{255, 307}, {147, 15}}</string>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSSuperview\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t<bool key=\"NSEnabled\">YES</bool>\n"
  "\t\t\t\t\t\t\t<object class=\"NSTextFieldCell\" key=\"NSCell\" id=\"403189114\">\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSCellFlags\">67239424</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSCellFlags2\">71434240</int>\n"
  "\t\t\t\t\t\t\t\t<string key=\"NSContents\">Currently Allocated:</string>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSSupport\" ref=\"27\"/>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSControlView\" ref=\"336406046\"/>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSBackgroundColor\" ref=\"277825497\"/>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSTextColor\" ref=\"175780943\"/>\n"
  "\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t<object class=\"NSTextField\" id=\"300812263\">\n"
  "\t\t\t\t\t\t\t<reference key=\"NSNextResponder\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t<int key=\"NSvFlags\">268</int>\n"
  "\t\t\t\t\t\t\t<string key=\"NSFrame\">{{404, 335}, {111, 14}}</string>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSSuperview\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t<bool key=\"NSEnabled\">YES</bool>\n"
  "\t\t\t\t\t\t\t<object class=\"NSTextFieldCell\" key=\"NSCell\" id=\"316229116\">\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSCellFlags\">67239424</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSCellFlags2\">-2008940544</int>\n"
  "\t\t\t\t\t\t\t\t<string key=\"NSContents\">\xE2""\x80""\xA6""total count\xE2""\x80""\xA6"" </string>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSSupport\" ref=\"27\"/>\n"
  "\t\t\t\t\t\t\t\t<object class=\"NSNumberFormatter\" key=\"NSFormatter\" id=\"920445510\">\n"
  "\t\t\t\t\t\t\t\t\t<dictionary class=\"NSMutableDictionary\" key=\"NS.attributes\">\n"
  "\t\t\t\t\t\t\t\t\t\t<boolean value=\"YES\" key=\"allowsFloats\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t<integer value=\"1040\" key=\"formatterBehavior\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t<reference key=\"locale\" ref=\"866676299\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t<string key=\"negativeInfinitySymbol\">-\xE2""\x88""\x9E""</string>\n"
  "\t\t\t\t\t\t\t\t\t\t<string key=\"nilSymbol\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t<string key=\"positiveInfinitySymbol\">+\xE2""\x88""\x9E""</string>\n"
  "\t\t\t\t\t\t\t\t\t</dictionary>\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NS.positiveformat\">#</string>\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NS.negativeformat\">#</string>\n"
  "\t\t\t\t\t\t\t\t\t<nil key=\"NS.positiveattrs\"/>\n"
  "\t\t\t\t\t\t\t\t\t<nil key=\"NS.negativeattrs\"/>\n"
  "\t\t\t\t\t\t\t\t\t<nil key=\"NS.zero\"/>\n"
  "\t\t\t\t\t\t\t\t\t<object class=\"NSAttributedString\" key=\"NS.nil\">\n"
  "\t\t\t\t\t\t\t\t\t\t<string key=\"NSString\"/>\n"
  "\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t<object class=\"NSAttributedString\" key=\"NS.nan\">\n"
  "\t\t\t\t\t\t\t\t\t\t<string key=\"NSString\">NaN</string>\n"
  "\t\t\t\t\t\t\t\t\t\t<reference key=\"NSAttributes\" ref=\"546668749\"/>\n"
  "\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NS.min\" ref=\"446279750\"/>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NS.max\" ref=\"446279750\"/>\n"
  "\t\t\t\t\t\t\t\t\t<object class=\"NSDecimalNumberHandler\" key=\"NS.rounding\">\n"
  "\t\t\t\t\t\t\t\t\t\t<int key=\"NS.roundingmode\">3</int>\n"
  "\t\t\t\t\t\t\t\t\t\t<bool key=\"NS.raise.overflow\">YES</bool>\n"
  "\t\t\t\t\t\t\t\t\t\t<bool key=\"NS.raise.underflow\">YES</bool>\n"
  "\t\t\t\t\t\t\t\t\t\t<bool key=\"NS.raise.dividebyzero\">YES</bool>\n"
  "\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NS.decimal\">.</string>\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NS.thousand\">,</string>\n"
  "\t\t\t\t\t\t\t\t\t<bool key=\"NS.hasthousands\">NO</bool>\n"
  "\t\t\t\t\t\t\t\t\t<bool key=\"NS.localized\">NO</bool>\n"
  "\t\t\t\t\t\t\t\t\t<bool key=\"NS.allowsfloats\">YES</bool>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSControlView\" ref=\"300812263\"/>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSBackgroundColor\" ref=\"277825497\"/>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSTextColor\" ref=\"175780943\"/>\n"
  "\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t<object class=\"NSTextField\" id=\"203767798\">\n"
  "\t\t\t\t\t\t\t<reference key=\"NSNextResponder\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t<int key=\"NSvFlags\">268</int>\n"
  "\t\t\t\t\t\t\t<string key=\"NSFrame\">{{255, 334}, {147, 15}}</string>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSSuperview\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t<bool key=\"NSEnabled\">YES</bool>\n"
  "\t\t\t\t\t\t\t<object class=\"NSTextFieldCell\" key=\"NSCell\" id=\"621467730\">\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSCellFlags\">67239424</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSCellFlags2\">71434240</int>\n"
  "\t\t\t\t\t\t\t\t<string key=\"NSContents\">Total Allocated:</string>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSSupport\" ref=\"27\"/>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSControlView\" ref=\"203767798\"/>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSBackgroundColor\" ref=\"277825497\"/>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSTextColor\" ref=\"175780943\"/>\n"
  "\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t</array>\n"
  "\t\t\t\t\t<string key=\"NSFrameSize\">{532, 360}</string>\n"
  "\t\t\t\t\t<reference key=\"NSNextKeyView\" ref=\"477594254\"/>\n"
  "\t\t\t\t</object>\n"
  "\t\t\t\t<string key=\"NSScreenRect\">{{0, 0}, {2560, 1418}}</string>\n"
  "\t\t\t\t<string key=\"NSMinSize\">{532, 382}</string>\n"
  "\t\t\t\t<string key=\"NSMaxSize\">{10000000000000, 10000000000000}</string>\n"
  "\t\t\t\t<string key=\"NSFrameAutosaveName\">PMAllactionStatsWindowLocation</string>\n"
  "\t\t\t\t<bool key=\"NSWindowIsRestorable\">YES</bool>\n"
  "\t\t\t</object>\n"
  "\t\t</array>\n"
  "\t\t<object class=\"IBObjectContainer\" key=\"IBDocument.Objects\">\n"
  "\t\t\t<array class=\"NSMutableArray\" key=\"connectionRecords\">\n"
  "\t\t\t\t<object class=\"IBConnectionRecord\">\n"
  "\t\t\t\t\t<object class=\"IBOutletConnection\" key=\"connection\">\n"
  "\t\t\t\t\t\t<string key=\"label\">mDebugMenu</string>\n"
  "\t\t\t\t\t\t<reference key=\"source\" ref=\"1001\"/>\n"
  "\t\t\t\t\t\t<reference key=\"destination\" ref=\"832895925\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<int key=\"connectionID\">10</int>\n"
  "\t\t\t\t</object>\n"
  "\t\t\t\t<object class=\"IBConnectionRecord\">\n"
  "\t\t\t\t\t<object class=\"IBOutletConnection\" key=\"connection\">\n"
  "\t\t\t\t\t\t<string key=\"label\">mAllocationStatsWindow</string>\n"
  "\t\t\t\t\t\t<reference key=\"source\" ref=\"1001\"/>\n"
  "\t\t\t\t\t\t<reference key=\"destination\" ref=\"488945732\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<int key=\"connectionID\">60</int>\n"
  "\t\t\t\t</object>\n"
  "\t\t\t\t<object class=\"IBConnectionRecord\">\n"
  "\t\t\t\t\t<object class=\"IBOutletConnection\" key=\"connection\">\n"
  "\t\t\t\t\t\t<string key=\"label\">mAllocatedObjectCountTextField</string>\n"
  "\t\t\t\t\t\t<reference key=\"source\" ref=\"1001\"/>\n"
  "\t\t\t\t\t\t<reference key=\"destination\" ref=\"381938415\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<int key=\"connectionID\">102</int>\n"
  "\t\t\t\t</object>\n"
  "\t\t\t\t<object class=\"IBConnectionRecord\">\n"
  "\t\t\t\t\t<object class=\"IBOutletConnection\" key=\"connection\">\n"
  "\t\t\t\t\t\t<string key=\"label\">mStatsTableView</string>\n"
  "\t\t\t\t\t\t<reference key=\"source\" ref=\"1001\"/>\n"
  "\t\t\t\t\t\t<reference key=\"destination\" ref=\"54967480\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<int key=\"connectionID\">108</int>\n"
  "\t\t\t\t</object>\n"
  "\t\t\t\t<object class=\"IBConnectionRecord\">\n"
  "\t\t\t\t\t<object class=\"IBOutletConnection\" key=\"connection\">\n"
  "\t\t\t\t\t\t<string key=\"label\">mAllocationStatsWindowVisibleAtLaunchCheckbox</string>\n"
  "\t\t\t\t\t\t<reference key=\"source\" ref=\"1001\"/>\n"
  "\t\t\t\t\t\t<reference key=\"destination\" ref=\"477594254\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<int key=\"connectionID\">152</int>\n"
  "\t\t\t\t</object>\n"
  "\t\t\t\t<object class=\"IBConnectionRecord\">\n"
  "\t\t\t\t\t<object class=\"IBOutletConnection\" key=\"connection\">\n"
  "\t\t\t\t\t\t<string key=\"label\">mDisplayFilterPopUpButton</string>\n"
  "\t\t\t\t\t\t<reference key=\"source\" ref=\"1001\"/>\n"
  "\t\t\t\t\t\t<reference key=\"destination\" ref=\"518079538\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<int key=\"connectionID\">153</int>\n"
  "\t\t\t\t</object>\n"
  "\t\t\t\t<object class=\"IBConnectionRecord\">\n"
  "\t\t\t\t\t<object class=\"IBOutletConnection\" key=\"connection\">\n"
  "\t\t\t\t\t\t<string key=\"label\">mCurrentlyAllocatedObjectCountTextField</string>\n"
  "\t\t\t\t\t\t<reference key=\"source\" ref=\"1001\"/>\n"
  "\t\t\t\t\t\t<reference key=\"destination\" ref=\"381938415\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<int key=\"connectionID\">186</int>\n"
  "\t\t\t\t</object>\n"
  "\t\t\t\t<object class=\"IBConnectionRecord\">\n"
  "\t\t\t\t\t<object class=\"IBOutletConnection\" key=\"connection\">\n"
  "\t\t\t\t\t\t<string key=\"label\">mTotalAllocatedObjectCountTextField</string>\n"
  "\t\t\t\t\t\t<reference key=\"source\" ref=\"1001\"/>\n"
  "\t\t\t\t\t\t<reference key=\"destination\" ref=\"300812263\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<int key=\"connectionID\">187</int>\n"
  "\t\t\t\t</object>\n"
  "\t\t\t\t<object class=\"IBConnectionRecord\">\n"
  "\t\t\t\t\t<object class=\"IBActionConnection\" key=\"connection\">\n"
  "\t\t\t\t\t\t<string key=\"label\">makeKeyAndOrderFront:</string>\n"
  "\t\t\t\t\t\t<reference key=\"source\" ref=\"488945732\"/>\n"
  "\t\t\t\t\t\t<reference key=\"destination\" ref=\"391542348\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<int key=\"connectionID\">109</int>\n"
  "\t\t\t\t</object>\n"
  "\t\t\t</array>\n"
  "\t\t\t<object class=\"IBMutableOrderedSet\" key=\"objectRecords\">\n"
  "\t\t\t\t<array key=\"orderedObjects\">\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">0</int>\n"
  "\t\t\t\t\t\t<array key=\"object\" id=\"0\"/>\n"
  "\t\t\t\t\t\t<reference key=\"children\" ref=\"1000\"/>\n"
  "\t\t\t\t\t\t<nil key=\"parent\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">-2</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"1001\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"0\"/>\n"
  "\t\t\t\t\t\t<string key=\"objectName\">File's Owner</string>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">-1</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"1003\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"0\"/>\n"
  "\t\t\t\t\t\t<string key=\"objectName\">First Responder</string>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">-3</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"1004\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"0\"/>\n"
  "\t\t\t\t\t\t<string key=\"objectName\">Application</string>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">6</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"832895925\"/>\n"
  "\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"children\">\n"
  "\t\t\t\t\t\t\t<reference ref=\"391542348\"/>\n"
  "\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"0\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">7</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"391542348\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"832895925\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">13</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"488945732\"/>\n"
  "\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"children\">\n"
  "\t\t\t\t\t\t\t<reference ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"0\"/>\n"
  "\t\t\t\t\t\t<string key=\"objectName\">AllocationStats Window</string>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">14</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"children\">\n"
  "\t\t\t\t\t\t\t<reference ref=\"694864762\"/>\n"
  "\t\t\t\t\t\t\t<object class=\"IBNSLayoutConstraint\" id=\"630903395\">\n"
  "\t\t\t\t\t\t\t\t<reference key=\"firstItem\" ref=\"694864762\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"firstAttribute\">6</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"relation\">0</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"secondItem\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"secondAttribute\">6</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"multiplier\">1</float>\n"
  "\t\t\t\t\t\t\t\t<object class=\"IBLayoutConstant\" key=\"constant\">\n"
  "\t\t\t\t\t\t\t\t\t<double key=\"value\">0.0</double>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<float key=\"priority\">1000</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"scoringType\">8</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"scoringTypeFloat\">29</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"contentType\">3</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"containingView\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t<reference ref=\"518079538\"/>\n"
  "\t\t\t\t\t\t\t<reference ref=\"146764676\"/>\n"
  "\t\t\t\t\t\t\t<reference ref=\"381938415\"/>\n"
  "\t\t\t\t\t\t\t<reference ref=\"477594254\"/>\n"
  "\t\t\t\t\t\t\t<object class=\"IBNSLayoutConstraint\" id=\"158668814\">\n"
  "\t\t\t\t\t\t\t\t<reference key=\"firstItem\" ref=\"146764676\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"firstAttribute\">5</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"relation\">0</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"secondItem\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"secondAttribute\">5</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"multiplier\">1</float>\n"
  "\t\t\t\t\t\t\t\t<object class=\"IBNSLayoutSymbolicConstant\" key=\"constant\">\n"
  "\t\t\t\t\t\t\t\t\t<double key=\"value\">20</double>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<float key=\"priority\">1000</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"scoringType\">8</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"scoringTypeFloat\">29</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"contentType\">3</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"containingView\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t<object class=\"IBNSLayoutConstraint\" id=\"477371999\">\n"
  "\t\t\t\t\t\t\t\t<reference key=\"firstItem\" ref=\"694864762\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"firstAttribute\">4</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"relation\">0</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"secondItem\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"secondAttribute\">4</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"multiplier\">1</float>\n"
  "\t\t\t\t\t\t\t\t<object class=\"IBLayoutConstant\" key=\"constant\">\n"
  "\t\t\t\t\t\t\t\t\t<double key=\"value\">0.0</double>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<float key=\"priority\">1000</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"scoringType\">8</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"scoringTypeFloat\">29</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"contentType\">3</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"containingView\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t<reference ref=\"336406046\"/>\n"
  "\t\t\t\t\t\t\t<object class=\"IBNSLayoutConstraint\" id=\"741576288\">\n"
  "\t\t\t\t\t\t\t\t<reference key=\"firstItem\" ref=\"694864762\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"firstAttribute\">3</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"relation\">0</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"secondItem\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"secondAttribute\">3</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"multiplier\">1</float>\n"
  "\t\t\t\t\t\t\t\t<object class=\"IBLayoutConstant\" key=\"constant\">\n"
  "\t\t\t\t\t\t\t\t\t<double key=\"value\">70</double>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<float key=\"priority\">1000</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"scoringType\">3</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"scoringTypeFloat\">9</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"contentType\">3</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"containingView\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t<reference ref=\"300812263\"/>\n"
  "\t\t\t\t\t\t\t<reference ref=\"203767798\"/>\n"
  "\t\t\t\t\t\t\t<object class=\"IBNSLayoutConstraint\" id=\"753883829\">\n"
  "\t\t\t\t\t\t\t\t<reference key=\"firstItem\" ref=\"300812263\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"firstAttribute\">11</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"relation\">0</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"secondItem\" ref=\"477594254\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"secondAttribute\">11</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"multiplier\">1</float>\n"
  "\t\t\t\t\t\t\t\t<object class=\"IBLayoutConstant\" key=\"constant\">\n"
  "\t\t\t\t\t\t\t\t\t<double key=\"value\">0.0</double>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<float key=\"priority\">1000</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"scoringType\">6</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"scoringTypeFloat\">24</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"contentType\">2</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"containingView\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t<object class=\"IBNSLayoutConstraint\" id=\"359164783\">\n"
  "\t\t\t\t\t\t\t\t<reference key=\"firstItem\" ref=\"518079538\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"firstAttribute\">11</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"relation\">0</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"secondItem\" ref=\"146764676\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"secondAttribute\">11</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"multiplier\">1</float>\n"
  "\t\t\t\t\t\t\t\t<object class=\"IBLayoutConstant\" key=\"constant\">\n"
  "\t\t\t\t\t\t\t\t\t<double key=\"value\">0.0</double>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<float key=\"priority\">1000</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"scoringType\">6</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"scoringTypeFloat\">24</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"contentType\">2</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"containingView\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t<object class=\"IBNSLayoutConstraint\" id=\"49285277\">\n"
  "\t\t\t\t\t\t\t\t<reference key=\"firstItem\" ref=\"518079538\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"firstAttribute\">5</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"relation\">0</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"secondItem\" ref=\"146764676\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"secondAttribute\">6</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"multiplier\">1</float>\n"
  "\t\t\t\t\t\t\t\t<object class=\"IBNSLayoutSymbolicConstant\" key=\"constant\">\n"
  "\t\t\t\t\t\t\t\t\t<double key=\"value\">8</double>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<float key=\"priority\">1000</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"scoringType\">6</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"scoringTypeFloat\">24</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"contentType\">3</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"containingView\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t<object class=\"IBNSLayoutConstraint\" id=\"440047454\">\n"
  "\t\t\t\t\t\t\t\t<reference key=\"firstItem\" ref=\"381938415\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"firstAttribute\">5</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"relation\">0</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"secondItem\" ref=\"336406046\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"secondAttribute\">6</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"multiplier\">1</float>\n"
  "\t\t\t\t\t\t\t\t<object class=\"IBNSLayoutSymbolicConstant\" key=\"constant\">\n"
  "\t\t\t\t\t\t\t\t\t<double key=\"value\">8</double>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<float key=\"priority\">1000</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"scoringType\">6</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"scoringTypeFloat\">24</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"contentType\">3</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"containingView\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t<object class=\"IBNSLayoutConstraint\" id=\"517801530\">\n"
  "\t\t\t\t\t\t\t\t<reference key=\"firstItem\" ref=\"203767798\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"firstAttribute\">3</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"relation\">0</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"secondItem\" ref=\"300812263\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"secondAttribute\">3</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"multiplier\">1</float>\n"
  "\t\t\t\t\t\t\t\t<object class=\"IBLayoutConstant\" key=\"constant\">\n"
  "\t\t\t\t\t\t\t\t\t<double key=\"value\">0.0</double>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<float key=\"priority\">1000</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"scoringType\">6</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"scoringTypeFloat\">24</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"contentType\">2</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"containingView\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t<object class=\"IBNSLayoutConstraint\" id=\"181449967\">\n"
  "\t\t\t\t\t\t\t\t<reference key=\"firstItem\" ref=\"694864762\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"firstAttribute\">5</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"relation\">0</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"secondItem\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"secondAttribute\">5</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"multiplier\">1</float>\n"
  "\t\t\t\t\t\t\t\t<object class=\"IBLayoutConstant\" key=\"constant\">\n"
  "\t\t\t\t\t\t\t\t\t<double key=\"value\">0.0</double>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<float key=\"priority\">1000</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"scoringType\">8</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"scoringTypeFloat\">29</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"contentType\">3</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"containingView\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t<object class=\"IBNSLayoutConstraint\" id=\"631778389\">\n"
  "\t\t\t\t\t\t\t\t<reference key=\"firstItem\" ref=\"300812263\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"firstAttribute\">5</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"relation\">0</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"secondItem\" ref=\"203767798\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"secondAttribute\">6</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"multiplier\">1</float>\n"
  "\t\t\t\t\t\t\t\t<object class=\"IBNSLayoutSymbolicConstant\" key=\"constant\">\n"
  "\t\t\t\t\t\t\t\t\t<double key=\"value\">8</double>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<float key=\"priority\">1000</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"scoringType\">6</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"scoringTypeFloat\">24</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"contentType\">3</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"containingView\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t<object class=\"IBNSLayoutConstraint\" id=\"328264427\">\n"
  "\t\t\t\t\t\t\t\t<reference key=\"firstItem\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"firstAttribute\">6</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"relation\">0</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"secondItem\" ref=\"381938415\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"secondAttribute\">6</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"multiplier\">1</float>\n"
  "\t\t\t\t\t\t\t\t<object class=\"IBNSLayoutSymbolicConstant\" key=\"constant\">\n"
  "\t\t\t\t\t\t\t\t\t<double key=\"value\">20</double>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<float key=\"priority\">1000</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"scoringType\">8</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"scoringTypeFloat\">29</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"contentType\">3</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"containingView\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t<object class=\"IBNSLayoutConstraint\" id=\"546029354\">\n"
  "\t\t\t\t\t\t\t\t<reference key=\"firstItem\" ref=\"381938415\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"firstAttribute\">5</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"relation\">0</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"secondItem\" ref=\"300812263\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"secondAttribute\">5</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"multiplier\">1</float>\n"
  "\t\t\t\t\t\t\t\t<object class=\"IBLayoutConstant\" key=\"constant\">\n"
  "\t\t\t\t\t\t\t\t\t<double key=\"value\">0.0</double>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<float key=\"priority\">1000</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"scoringType\">6</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"scoringTypeFloat\">24</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"contentType\">2</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"containingView\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t<object class=\"IBNSLayoutConstraint\" id=\"876823937\">\n"
  "\t\t\t\t\t\t\t\t<reference key=\"firstItem\" ref=\"381938415\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"firstAttribute\">11</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"relation\">0</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"secondItem\" ref=\"518079538\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"secondAttribute\">11</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"multiplier\">1</float>\n"
  "\t\t\t\t\t\t\t\t<object class=\"IBLayoutConstant\" key=\"constant\">\n"
  "\t\t\t\t\t\t\t\t\t<double key=\"value\">0.0</double>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<float key=\"priority\">1000</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"scoringType\">6</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"scoringTypeFloat\">24</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"contentType\">2</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"containingView\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t<object class=\"IBNSLayoutConstraint\" id=\"207833066\">\n"
  "\t\t\t\t\t\t\t\t<reference key=\"firstItem\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"firstAttribute\">6</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"relation\">0</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"secondItem\" ref=\"300812263\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"secondAttribute\">6</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"multiplier\">1</float>\n"
  "\t\t\t\t\t\t\t\t<object class=\"IBNSLayoutSymbolicConstant\" key=\"constant\">\n"
  "\t\t\t\t\t\t\t\t\t<double key=\"value\">20</double>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<float key=\"priority\">1000</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"scoringType\">8</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"scoringTypeFloat\">29</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"contentType\">3</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"containingView\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t<object class=\"IBNSLayoutConstraint\" id=\"311398500\">\n"
  "\t\t\t\t\t\t\t\t<reference key=\"firstItem\" ref=\"477594254\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"firstAttribute\">3</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"relation\">0</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"secondItem\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"secondAttribute\">3</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"multiplier\">1</float>\n"
  "\t\t\t\t\t\t\t\t<object class=\"IBLayoutConstant\" key=\"constant\">\n"
  "\t\t\t\t\t\t\t\t\t<double key=\"value\">11</double>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<float key=\"priority\">1000</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"scoringType\">3</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"scoringTypeFloat\">9</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"contentType\">3</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"containingView\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t<object class=\"IBNSLayoutConstraint\" id=\"165112170\">\n"
  "\t\t\t\t\t\t\t\t<reference key=\"firstItem\" ref=\"518079538\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"firstAttribute\">6</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"relation\">0</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"secondItem\" ref=\"477594254\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"secondAttribute\">6</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"multiplier\">1</float>\n"
  "\t\t\t\t\t\t\t\t<object class=\"IBLayoutConstant\" key=\"constant\">\n"
  "\t\t\t\t\t\t\t\t\t<double key=\"value\">0.0</double>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<float key=\"priority\">1000</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"scoringType\">6</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"scoringTypeFloat\">24</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"contentType\">2</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"containingView\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t<object class=\"IBNSLayoutConstraint\" id=\"685426321\">\n"
  "\t\t\t\t\t\t\t\t<reference key=\"firstItem\" ref=\"336406046\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"firstAttribute\">5</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"relation\">0</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"secondItem\" ref=\"203767798\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"secondAttribute\">5</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"multiplier\">1</float>\n"
  "\t\t\t\t\t\t\t\t<object class=\"IBLayoutConstant\" key=\"constant\">\n"
  "\t\t\t\t\t\t\t\t\t<double key=\"value\">0.0</double>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<float key=\"priority\">1000</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"scoringType\">6</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"scoringTypeFloat\">24</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"contentType\">2</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"containingView\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t<object class=\"IBNSLayoutConstraint\" id=\"647803546\">\n"
  "\t\t\t\t\t\t\t\t<reference key=\"firstItem\" ref=\"518079538\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"firstAttribute\">3</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"relation\">0</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"secondItem\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"secondAttribute\">3</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"multiplier\">1</float>\n"
  "\t\t\t\t\t\t\t\t<object class=\"IBLayoutConstant\" key=\"constant\">\n"
  "\t\t\t\t\t\t\t\t\t<double key=\"value\">35</double>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<float key=\"priority\">1000</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"scoringType\">3</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"scoringTypeFloat\">9</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"contentType\">3</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"containingView\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t<object class=\"IBNSLayoutConstraint\" id=\"1031787469\">\n"
  "\t\t\t\t\t\t\t\t<reference key=\"firstItem\" ref=\"381938415\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"firstAttribute\">3</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"relation\">0</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"secondItem\" ref=\"336406046\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"secondAttribute\">3</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"multiplier\">1</float>\n"
  "\t\t\t\t\t\t\t\t<object class=\"IBLayoutConstant\" key=\"constant\">\n"
  "\t\t\t\t\t\t\t\t\t<double key=\"value\">0.0</double>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<float key=\"priority\">1000</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"scoringType\">6</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"scoringTypeFloat\">24</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"contentType\">2</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"containingView\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"488945732\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">15</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"694864762\"/>\n"
  "\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"children\">\n"
  "\t\t\t\t\t\t\t<reference ref=\"933801029\"/>\n"
  "\t\t\t\t\t\t\t<reference ref=\"466601769\"/>\n"
  "\t\t\t\t\t\t\t<reference ref=\"584677815\"/>\n"
  "\t\t\t\t\t\t\t<reference ref=\"54967480\"/>\n"
  "\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">16</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"518079538\"/>\n"
  "\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"children\">\n"
  "\t\t\t\t\t\t\t<reference ref=\"92687822\"/>\n"
  "\t\t\t\t\t\t\t<object class=\"IBNSLayoutConstraint\" id=\"218270675\">\n"
  "\t\t\t\t\t\t\t\t<reference key=\"firstItem\" ref=\"518079538\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"firstAttribute\">7</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"relation\">0</int>\n"
  "\t\t\t\t\t\t\t\t<nil key=\"secondItem\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"secondAttribute\">0</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"multiplier\">1</float>\n"
  "\t\t\t\t\t\t\t\t<object class=\"IBLayoutConstant\" key=\"constant\">\n"
  "\t\t\t\t\t\t\t\t\t<double key=\"value\">164</double>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<float key=\"priority\">1000</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"scoringType\">3</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"scoringTypeFloat\">9</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"contentType\">1</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"containingView\" ref=\"518079538\"/>\n"
  "\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">17</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"146764676\"/>\n"
  "\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"children\">\n"
  "\t\t\t\t\t\t\t<reference ref=\"1044367949\"/>\n"
  "\t\t\t\t\t\t\t<object class=\"IBNSLayoutConstraint\" id=\"135702250\">\n"
  "\t\t\t\t\t\t\t\t<reference key=\"firstItem\" ref=\"146764676\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"firstAttribute\">7</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"relation\">0</int>\n"
  "\t\t\t\t\t\t\t\t<nil key=\"secondItem\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"secondAttribute\">0</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"multiplier\">1</float>\n"
  "\t\t\t\t\t\t\t\t<object class=\"IBLayoutConstant\" key=\"constant\">\n"
  "\t\t\t\t\t\t\t\t\t<double key=\"value\">50</double>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<float key=\"priority\">1000</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"scoringType\">3</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"scoringTypeFloat\">9</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"contentType\">1</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"containingView\" ref=\"146764676\"/>\n"
  "\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">18</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"381938415\"/>\n"
  "\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"children\">\n"
  "\t\t\t\t\t\t\t<reference ref=\"868904438\"/>\n"
  "\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">23</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"868904438\"/>\n"
  "\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"children\">\n"
  "\t\t\t\t\t\t\t<reference ref=\"18967862\"/>\n"
  "\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"381938415\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">24</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"1044367949\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"146764676\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">25</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"92687822\"/>\n"
  "\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"children\">\n"
  "\t\t\t\t\t\t\t<reference ref=\"1027996105\"/>\n"
  "\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"518079538\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">26</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"1027996105\"/>\n"
  "\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"children\">\n"
  "\t\t\t\t\t\t\t<reference ref=\"555303939\"/>\n"
  "\t\t\t\t\t\t\t<reference ref=\"590354082\"/>\n"
  "\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"92687822\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">27</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"555303939\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"1027996105\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">28</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"590354082\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"1027996105\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">29</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"933801029\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"694864762\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">30</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"466601769\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"694864762\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">31</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"584677815\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"694864762\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">32</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"54967480\"/>\n"
  "\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"children\">\n"
  "\t\t\t\t\t\t\t<reference ref=\"665282369\"/>\n"
  "\t\t\t\t\t\t\t<reference ref=\"404121835\"/>\n"
  "\t\t\t\t\t\t\t<reference ref=\"610270419\"/>\n"
  "\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"694864762\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">33</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"665282369\"/>\n"
  "\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"children\">\n"
  "\t\t\t\t\t\t\t<reference ref=\"820684983\"/>\n"
  "\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"54967480\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">34</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"404121835\"/>\n"
  "\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"children\">\n"
  "\t\t\t\t\t\t\t<reference ref=\"590032922\"/>\n"
  "\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"54967480\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">35</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"610270419\"/>\n"
  "\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"children\">\n"
  "\t\t\t\t\t\t\t<reference ref=\"236796732\"/>\n"
  "\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"54967480\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">36</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"236796732\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"610270419\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">37</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"590032922\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"404121835\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">38</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"820684983\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"665282369\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">107</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"18967862\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"868904438\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">111</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"630903395\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">134</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"135702250\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"146764676\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">138</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"477594254\"/>\n"
  "\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"children\">\n"
  "\t\t\t\t\t\t\t<reference ref=\"255990638\"/>\n"
  "\t\t\t\t\t\t\t<object class=\"IBNSLayoutConstraint\" id=\"840801593\">\n"
  "\t\t\t\t\t\t\t\t<reference key=\"firstItem\" ref=\"477594254\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"firstAttribute\">7</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"relation\">0</int>\n"
  "\t\t\t\t\t\t\t\t<nil key=\"secondItem\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"secondAttribute\">0</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"multiplier\">1</float>\n"
  "\t\t\t\t\t\t\t\t<object class=\"IBLayoutConstant\" key=\"constant\">\n"
  "\t\t\t\t\t\t\t\t\t<double key=\"value\">220</double>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<float key=\"priority\">1000</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"scoringType\">3</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"scoringTypeFloat\">9</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"contentType\">1</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"containingView\" ref=\"477594254\"/>\n"
  "\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">139</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"255990638\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"477594254\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">146</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"158668814\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">147</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"477371999\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">154</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"336406046\"/>\n"
  "\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"children\">\n"
  "\t\t\t\t\t\t\t<reference ref=\"403189114\"/>\n"
  "\t\t\t\t\t\t\t<object class=\"IBNSLayoutConstraint\" id=\"161811444\">\n"
  "\t\t\t\t\t\t\t\t<reference key=\"firstItem\" ref=\"336406046\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"firstAttribute\">8</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"relation\">0</int>\n"
  "\t\t\t\t\t\t\t\t<nil key=\"secondItem\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"secondAttribute\">0</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"multiplier\">1</float>\n"
  "\t\t\t\t\t\t\t\t<object class=\"IBLayoutConstant\" key=\"constant\">\n"
  "\t\t\t\t\t\t\t\t\t<double key=\"value\">15</double>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<float key=\"priority\">1000</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"scoringType\">3</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"scoringTypeFloat\">9</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"contentType\">1</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"containingView\" ref=\"336406046\"/>\n"
  "\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">156</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"403189114\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"336406046\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">166</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"741576288\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">171</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"300812263\"/>\n"
  "\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"children\">\n"
  "\t\t\t\t\t\t\t<reference ref=\"316229116\"/>\n"
  "\t\t\t\t\t\t\t<object class=\"IBNSLayoutConstraint\" id=\"948614809\">\n"
  "\t\t\t\t\t\t\t\t<reference key=\"firstItem\" ref=\"300812263\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"firstAttribute\">7</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"relation\">0</int>\n"
  "\t\t\t\t\t\t\t\t<nil key=\"secondItem\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"secondAttribute\">0</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"multiplier\">1</float>\n"
  "\t\t\t\t\t\t\t\t<object class=\"IBLayoutConstant\" key=\"constant\">\n"
  "\t\t\t\t\t\t\t\t\t<double key=\"value\">105</double>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<float key=\"priority\">1000</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"scoringType\">3</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"scoringTypeFloat\">9</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"contentType\">1</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"containingView\" ref=\"300812263\"/>\n"
  "\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">172</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"203767798\"/>\n"
  "\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"children\">\n"
  "\t\t\t\t\t\t\t<object class=\"IBNSLayoutConstraint\" id=\"424498295\">\n"
  "\t\t\t\t\t\t\t\t<reference key=\"firstItem\" ref=\"203767798\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"firstAttribute\">8</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"relation\">0</int>\n"
  "\t\t\t\t\t\t\t\t<nil key=\"secondItem\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"secondAttribute\">0</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"multiplier\">1</float>\n"
  "\t\t\t\t\t\t\t\t<object class=\"IBLayoutConstant\" key=\"constant\">\n"
  "\t\t\t\t\t\t\t\t\t<double key=\"value\">15</double>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<float key=\"priority\">1000</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"scoringType\">3</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"scoringTypeFloat\">9</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"contentType\">1</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"containingView\" ref=\"203767798\"/>\n"
  "\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t<object class=\"IBNSLayoutConstraint\" id=\"355792580\">\n"
  "\t\t\t\t\t\t\t\t<reference key=\"firstItem\" ref=\"203767798\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"firstAttribute\">7</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"relation\">0</int>\n"
  "\t\t\t\t\t\t\t\t<nil key=\"secondItem\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"secondAttribute\">0</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"multiplier\">1</float>\n"
  "\t\t\t\t\t\t\t\t<object class=\"IBLayoutConstant\" key=\"constant\">\n"
  "\t\t\t\t\t\t\t\t\t<double key=\"value\">141</double>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<float key=\"priority\">1000</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"scoringType\">3</int>\n"
  "\t\t\t\t\t\t\t\t<float key=\"scoringTypeFloat\">9</float>\n"
  "\t\t\t\t\t\t\t\t<int key=\"contentType\">1</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"containingView\" ref=\"203767798\"/>\n"
  "\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t<reference ref=\"621467730\"/>\n"
  "\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">173</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"424498295\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"203767798\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">174</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"355792580\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"203767798\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">175</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"621467730\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"203767798\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">177</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"316229116\"/>\n"
  "\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"children\">\n"
  "\t\t\t\t\t\t\t<reference ref=\"920445510\"/>\n"
  "\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"300812263\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">178</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"920445510\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"316229116\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">182</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"753883829\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">188</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"359164783\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">189</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"49285277\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">190</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"440047454\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">191</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"517801530\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">192</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"181449967\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">193</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"631778389\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">194</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"328264427\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">195</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"546029354\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">196</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"876823937\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">197</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"207833066\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">198</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"311398500\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">199</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"165112170\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">200</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"685426321\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">201</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"647803546\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">202</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"1031787469\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">203</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"218270675\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"518079538\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">204</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"948614809\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"300812263\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">205</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"161811444\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"336406046\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">206</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"840801593\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"477594254\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t</array>\n"
  "\t\t\t</object>\n"
  "\t\t\t<dictionary class=\"NSMutableDictionary\" key=\"flattenedProperties\">\n"
  "\t\t\t\t<string key=\"-1.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"-2.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"-3.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<integer value=\"1041\" key=\"107.IBNumberFormatterBehaviorMetadataKey\"/>\n"
  "\t\t\t\t<boolean value=\"YES\" key=\"107.IBNumberFormatterLocalizesFormatMetadataKey\"/>\n"
  "\t\t\t\t<string key=\"107.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"111.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"13.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"13.IBWindowTemplateEditedContentRect\">{{110, 1018}, {532, 360}}</string>\n"
  "\t\t\t\t<string key=\"134.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<array class=\"NSMutableArray\" key=\"138.IBNSViewMetadataConstraints\">\n"
  "\t\t\t\t\t<reference ref=\"840801593\"/>\n"
  "\t\t\t\t</array>\n"
  "\t\t\t\t<boolean value=\"NO\" key=\"138.IBNSViewMetadataTranslatesAutoresizingMaskIntoConstraints\"/>\n"
  "\t\t\t\t<string key=\"138.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"139.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<array class=\"NSMutableArray\" key=\"14.IBNSViewMetadataConstraints\">\n"
  "\t\t\t\t\t<reference ref=\"630903395\"/>\n"
  "\t\t\t\t\t<reference ref=\"158668814\"/>\n"
  "\t\t\t\t\t<reference ref=\"477371999\"/>\n"
  "\t\t\t\t\t<reference ref=\"741576288\"/>\n"
  "\t\t\t\t\t<reference ref=\"753883829\"/>\n"
  "\t\t\t\t\t<reference ref=\"359164783\"/>\n"
  "\t\t\t\t\t<reference ref=\"49285277\"/>\n"
  "\t\t\t\t\t<reference ref=\"440047454\"/>\n"
  "\t\t\t\t\t<reference ref=\"517801530\"/>\n"
  "\t\t\t\t\t<reference ref=\"181449967\"/>\n"
  "\t\t\t\t\t<reference ref=\"631778389\"/>\n"
  "\t\t\t\t\t<reference ref=\"328264427\"/>\n"
  "\t\t\t\t\t<reference ref=\"546029354\"/>\n"
  "\t\t\t\t\t<reference ref=\"876823937\"/>\n"
  "\t\t\t\t\t<reference ref=\"207833066\"/>\n"
  "\t\t\t\t\t<reference ref=\"311398500\"/>\n"
  "\t\t\t\t\t<reference ref=\"165112170\"/>\n"
  "\t\t\t\t\t<reference ref=\"685426321\"/>\n"
  "\t\t\t\t\t<reference ref=\"647803546\"/>\n"
  "\t\t\t\t\t<reference ref=\"1031787469\"/>\n"
  "\t\t\t\t</array>\n"
  "\t\t\t\t<string key=\"14.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"146.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"147.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<boolean value=\"NO\" key=\"15.IBNSViewMetadataTranslatesAutoresizingMaskIntoConstraints\"/>\n"
  "\t\t\t\t<string key=\"15.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<array class=\"NSMutableArray\" key=\"154.IBNSViewMetadataConstraints\">\n"
  "\t\t\t\t\t<reference ref=\"161811444\"/>\n"
  "\t\t\t\t</array>\n"
  "\t\t\t\t<boolean value=\"NO\" key=\"154.IBNSViewMetadataTranslatesAutoresizingMaskIntoConstraints\"/>\n"
  "\t\t\t\t<string key=\"154.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"156.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<array class=\"NSMutableArray\" key=\"16.IBNSViewMetadataConstraints\">\n"
  "\t\t\t\t\t<reference ref=\"218270675\"/>\n"
  "\t\t\t\t</array>\n"
  "\t\t\t\t<boolean value=\"NO\" key=\"16.IBNSViewMetadataTranslatesAutoresizingMaskIntoConstraints\"/>\n"
  "\t\t\t\t<string key=\"16.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"166.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<array class=\"NSMutableArray\" key=\"17.IBNSViewMetadataConstraints\">\n"
  "\t\t\t\t\t<reference ref=\"135702250\"/>\n"
  "\t\t\t\t</array>\n"
  "\t\t\t\t<boolean value=\"NO\" key=\"17.IBNSViewMetadataTranslatesAutoresizingMaskIntoConstraints\"/>\n"
  "\t\t\t\t<string key=\"17.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<array class=\"NSMutableArray\" key=\"171.IBNSViewMetadataConstraints\">\n"
  "\t\t\t\t\t<reference ref=\"948614809\"/>\n"
  "\t\t\t\t</array>\n"
  "\t\t\t\t<boolean value=\"NO\" key=\"171.IBNSViewMetadataTranslatesAutoresizingMaskIntoConstraints\"/>\n"
  "\t\t\t\t<string key=\"171.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<array class=\"NSMutableArray\" key=\"172.IBNSViewMetadataConstraints\">\n"
  "\t\t\t\t\t<reference ref=\"355792580\"/>\n"
  "\t\t\t\t\t<reference ref=\"424498295\"/>\n"
  "\t\t\t\t</array>\n"
  "\t\t\t\t<boolean value=\"NO\" key=\"172.IBNSViewMetadataTranslatesAutoresizingMaskIntoConstraints\"/>\n"
  "\t\t\t\t<string key=\"172.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"173.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"174.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"175.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"177.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<integer value=\"1041\" key=\"178.IBNumberFormatterBehaviorMetadataKey\"/>\n"
  "\t\t\t\t<boolean value=\"YES\" key=\"178.IBNumberFormatterLocalizesFormatMetadataKey\"/>\n"
  "\t\t\t\t<string key=\"178.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<boolean value=\"NO\" key=\"18.IBNSViewMetadataTranslatesAutoresizingMaskIntoConstraints\"/>\n"
  "\t\t\t\t<string key=\"18.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"182.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"188.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"189.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"190.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"191.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"192.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"193.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"194.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"195.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"196.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"197.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"198.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"199.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"200.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"201.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"202.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"203.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"204.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"205.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"206.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"23.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"24.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"25.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"26.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"27.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"28.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"29.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<integer value=\"1\" key=\"29.IBShouldRemoveOnLegacySave\"/>\n"
  "\t\t\t\t<string key=\"30.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<integer value=\"1\" key=\"30.IBShouldRemoveOnLegacySave\"/>\n"
  "\t\t\t\t<string key=\"31.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<integer value=\"1\" key=\"31.IBShouldRemoveOnLegacySave\"/>\n"
  "\t\t\t\t<string key=\"32.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"33.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"34.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"35.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"36.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<integer value=\"1\" key=\"36.IBShouldRemoveOnLegacySave\"/>\n"
  "\t\t\t\t<string key=\"37.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<integer value=\"1\" key=\"37.IBShouldRemoveOnLegacySave\"/>\n"
  "\t\t\t\t<string key=\"38.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<integer value=\"1\" key=\"38.IBShouldRemoveOnLegacySave\"/>\n"
  "\t\t\t\t<string key=\"6.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"7.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t</dictionary>\n"
  "\t\t\t<dictionary class=\"NSMutableDictionary\" key=\"unlocalizedProperties\"/>\n"
  "\t\t\t<nil key=\"activeLocalization\"/>\n"
  "\t\t\t<dictionary class=\"NSMutableDictionary\" key=\"localizations\"/>\n"
  "\t\t\t<nil key=\"sourceID\"/>\n"
  "\t\t\t<int key=\"maxID\">206</int>\n"
  "\t\t</object>\n"
  "\t\t<object class=\"IBClassDescriber\" key=\"IBDocument.Classes\">\n"
  "\t\t\t<array class=\"NSMutableArray\" key=\"referencedPartialClassDescriptions\">\n"
  "\t\t\t\t<object class=\"IBPartialClassDescription\">\n"
  "\t\t\t\t\t<string key=\"className\">NSLayoutConstraint</string>\n"
  "\t\t\t\t\t<string key=\"superclassName\">NSObject</string>\n"
  "\t\t\t\t\t<object class=\"IBClassDescriptionSource\" key=\"sourceIdentifier\">\n"
  "\t\t\t\t\t\t<string key=\"majorKey\">IBProjectSource</string>\n"
  "\t\t\t\t\t\t<string key=\"minorKey\">./Classes/NSLayoutConstraint.h</string>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t</object>\n"
  "\t\t\t</array>\n"
  "\t\t</object>\n"
  "\t\t<int key=\"IBDocument.localizationMode\">0</int>\n"
  "\t\t<string key=\"IBDocument.TargetRuntimeIdentifier\">IBCocoaFramework</string>\n"
  "\t\t<bool key=\"IBDocument.PluginDeclaredDependenciesTrackSystemTargetVersion\">YES</bool>\n"
  "\t\t<int key=\"IBDocument.defaultPropertyAccessControl\">3</int>\n"
  "\t\t<dictionary class=\"NSMutableDictionary\" key=\"IBDocument.LastKnownImageSizes\">\n"
  "\t\t\t<string key=\"NSMenuCheckmark\">{11, 11}</string>\n"
  "\t\t\t<string key=\"NSMenuMixedState\">{10, 3}</string>\n"
  "\t\t\t<string key=\"NSSwitch\">{15, 15}</string>\n"
  "\t\t</dictionary>\n"
  "\t\t<bool key=\"IBDocument.UseAutolayout\">YES</bool>\n"
  "\t</data>\n"
  "</archive>\n" ;

static const cRegularFileWrapper gWrapperFile_4_objective_5F_c_5F_sources (
  "PMAllocationDebug.xib",
  "xib",
  true, // Text file
  73829, // Text length
  gWrapperFileContent_4_objective_5F_c_5F_sources
) ;

//--- File '/PMBinaryFlatDocument.h'

static const char * gWrapperFileContent_5_objective_5F_c_5F_sources = "//\n"
  "//  PMBinaryFlatDocument.h\n"
  "//\n"
  "//  Created by Pierre Molinaro on 22/12/06.\n"
  "//  Copyright Pierre Molinaro 2006 . All rights reserved.\n"
  "//\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#import \"PMAbstractPersistentDocument.h\"\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "typedef enum {\n"
  "  PMBinaryFlatDocumentNoCompression,\n"
  "  PMBinaryFlatDocumentBZ2Compression,\n"
  "  PMBinaryFlatDocumentZLIBCompression\n"
  "} PMBinaryFlatDocumentCompressionEnum ;\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@interface PMBinaryFlatDocument : PMAbstractPersistentDocument {\n"
  "  @private UInt8 mReadMetadataStatus ;\n"
  "  @private NSDictionary * mReadMetadataDictionary ;\n"
  "}\n"
  "\n"
  "//--- Methods called during a save operation\n"
  "- (UInt8) metadataStatusForSaving ; // Returns 0 by default\n"
  "\n"
  "- (NSDictionary *) metadataDictionaryForSaving ; // Returns an empty dictionary by default\n"
  "\n"
  "- (PMBinaryFlatDocumentCompressionEnum) compressDataOnSaving ; // Default: PMBinaryFlatDocumentBZ2Compression\n"
  "\n"
  "\n"
  "//--- Methods that can be called during document's life\n"
  "- (UInt8) metadataStatusReadFromFile ; // 0 if document has been never saved\n"
  "\n"
  "- (NSDictionary *) metadataDictionaryReadFromFile ; // nil if document has been never saved\n"
  "\n"
  "//---\n"
  "+ (UInt8) statusForFileAtPath: (NSString *) inFilePath\n"
  "          error: (NSError **) outError ;\n"
  "\n"
  "+ (NSDictionary *) metadataForFileAtPath: (NSString *) inFilePath\n"
  "                   status: (UInt8 *) outStatus\n"
  "                   error: (NSError **) outError ;\n"
  "\n"
  "+ (id) rootObjectWithEntityNamed: (NSString *) inRootEntityName\n"
  "       fromFile: (NSString *) inFilePath\n"
  "       usingManagedObjectContext: (NSManagedObjectContext *) inManagedObjectContext\n"
  "       status: (UInt8 *) outStatus\n"
  "       metadataDictionary: (NSDictionary **) outMetadataDictionary\n"
  "       error: (NSError **) outError ;\n"
  "\n"
  "+ (id) rootObjectWithEntityNamed: (NSString *) inRootEntityName\n"
  "       fromFile: (NSString *) inFilePath\n"
  "       status: (UInt8 *) outStatus\n"
  "       metadataDictionary: (NSDictionary **) outMetadataDictionary\n"
  "       error: (NSError **) outError ;\n"
  "\n"
  "@end\n"
  "\n"
  "//---------------------------------------------------------------------------*\n" ;

static const cRegularFileWrapper gWrapperFile_5_objective_5F_c_5F_sources (
  "PMBinaryFlatDocument.h",
  "h",
  true, // Text file
  2213, // Text length
  gWrapperFileContent_5_objective_5F_c_5F_sources
) ;

//--- File '/PMBinaryFlatDocument.m'

static const char * gWrapperFileContent_6_objective_5F_c_5F_sources = "//\n"
  "//  PMBinaryFlatDocument.m\n"
  "//  persistentDocumentAsPackage\n"
  "//\n"
  "//  Created by Pierre Molinaro on 22/12/06.\n"
  "//  Copyright Pierre Molinaro 2006 . All rights reserved.\n"
  "//\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#import \"PMBinaryFlatDocument.h\"\n"
  "#import \"PMbz2DataCategory.h\"\n"
  "#import \"PMzlibDataCategory.h\"\n"
  "#import \"PMDataScanner.h\"\n"
  "#import \"PMLoadedEntityDatabase.h\"\n"
  "#import \"PMLoadedObjectDatabase.h\"\n"
  "#import \"PMEmbeddedEntityDatabase.h\"\n"
  "#import \"PMEmbeddedObjectDatabase.h\"\n"
  "#import \"PMMutableDataWriteCategory.h\"\n"
  "#import \"easy-bindings-utilities.h\"\n"
  "#import \"PMAllocationDebug.h\"\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "//#define EASY_BINDINGS_DEBUG\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#include <unistd.h>\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@implementation PMBinaryFlatDocument\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#pragma mark Document Saving\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (NSDictionary *) metadataDictionaryForSaving {\n"
  "  return [NSDictionary new] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (UInt8) metadataStatusForSaving {\n"
  "  return 0 ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (PMBinaryFlatDocumentCompressionEnum) compressDataOnSaving {\n"
  "  return PMBinaryFlatDocumentBZ2Compression ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (NSData *) binaryDataForSaving {\n"
  "  NSManagedObjectContext * moc = self.managedObjectContext ;\n"
  "  [moc processPendingChanges] ;\n"
  "  PMEmbeddedEntityDatabase * entityDatabase = [PMEmbeddedEntityDatabase new] ;\n"
  "  PMEmbeddedObjectDatabase * objectDatabase = [PMEmbeddedObjectDatabase new] ;\n"
  "  NSMutableString * trace = nil ; // [NSMutableString new] ;\n"
  "//--- Recursively explore from root object\n"
  "/* \xC2""\xA7"" [objectDatabase\n"
  "    enterObject:[self rootObject]\n"
  "    withEmbeddedEntityDatabase:entityDatabase\n"
  "  ] ;*/\n"
  "//--- Write Entities\n"
  "  NSMutableData * saveData = [NSMutableData new] ;\n"
  "  [entityDatabase\n"
  "    saveEntitiesToData:saveData\n"
  "    trace:trace\n"
  "  ] ;\n"
  "//--- Write objects\n"
  "  [objectDatabase\n"
  "    saveObjectsToData:saveData\n"
  "    trace:trace\n"
  "    withEmbeddedEntityDatabase:entityDatabase\n"
  "  ] ;\n"
  "//---\n"
  "  [moc.undoManager removeAllActions] ;\n"
  "// \xC2""\xA7""  [self updateDocumentEdition:nil] ;\n"
  "//  NSLog (@\"WRITE TRACE:\\n%@\", trace) ;\n"
  "  return saveData ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "static const char * kFormatSignature = \"PM-BINARY-FORMAT\" ;\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (NSData *) dataOfType: (NSString *) inTypeName\n"
  "             error:(NSError **) outError {\n"
  "//---\n"
  "  [self hookOfWillSave] ;\n"
  "//--- Add to metadata dictionary the witdth and the height of main window\n"
  "  NSMutableDictionary * metadataDictionary = self.metadataDictionaryForSaving.mutableCopy ;\n"
  "  if (nil == metadataDictionary) {\n"
  "    metadataDictionary = [NSMutableDictionary new] ;\n"
  "  }\n"
  "  if (nil != self.windowForSheet) { // Document has been opened in the user interface\n"
  "    if ((self.windowForSheet.styleMask & NSResizableWindowMask) != 0) { // Only if window is resizable\n"
  "      const NSSize windowSize = self.windowForSheet.frame.size ;\n"
  "      [metadataDictionary setObject:[NSNumber numberWithDouble:windowSize.width] forKey:@\"PMWindowWidth\"] ;\n"
  "      [metadataDictionary setObject:[NSNumber numberWithDouble:windowSize.height] forKey:@\"PMWindowHeight\"] ;\n"
  "    }\n"
  "  }else{ // Document has been opened in the user interface, use values read from file, if they exist\n"
  "    NSDictionary * metadataDictionaryReadFromFile = self.metadataDictionaryReadFromFile ;\n"
  "    NSNumber * v = [metadataDictionaryReadFromFile objectForKey:@\"PMWindowWidth\"] ;\n"
  "    if (nil != v) {\n"
  "      [metadataDictionary setObject:v forKey:@\"PMWindowWidth\"] ;\n"
  "    }\n"
  "    v = [metadataDictionaryReadFromFile objectForKey:@\"PMWindowHeight\"] ;\n"
  "    if (nil != v) {\n"
  "      [metadataDictionary setObject:v forKey:@\"PMWindowHeight\"] ;\n"
  "    }\n"
  "  }\n"
  "//---\n"
  "  NSMutableData * fileData = [NSMutableData new] ;\n"
  "//--- Append signature\n"
  "  [fileData appendBytes:kFormatSignature length:strlen (kFormatSignature)] ;\n"
  "//--- Write status\n"
  "  [fileData writeByte:[self metadataStatusForSaving] trace:nil] ;\n"
  "//--- Append metadata dictionary\n"
  "  NSData * data = [NSPropertyListSerialization\n"
  "    dataFromPropertyList:metadataDictionary\n"
  "    format:NSPropertyListBinaryFormat_v1_0\n"
  "    errorDescription:nil\n"
  "  ] ;\n"
  "  [fileData writeByte:1 trace:nil] ;\n"
  "  [fileData writeAutosizedData:data trace:nil] ;\n"
  "//--- Append document data\n"
  "  data = [self binaryDataForSaving] ;\n"
  "  switch ([self compressDataOnSaving]) {\n"
  "  case PMBinaryFlatDocumentBZ2Compression:\n"
  "    data = [data bz2CompressedDataWithCompressionFactor:9 returnedErrorCode:nil] ;\n"
  "    [fileData writeByte:2 trace:nil] ;\n"
  "    [fileData writeAutosizedData:data trace:nil] ;\n"
  "    break ;\n"
  "  case PMBinaryFlatDocumentZLIBCompression:\n"
  "    data = [data zlibCompressedDataWithCompressionFactor:9 returnedErrorCode:nil] ;\n"
  "    [fileData writeByte:4 trace:nil] ;\n"
  "    [fileData writeAutosizedData:data trace:nil] ;\n"
  "    break ;\n"
  "  default:\n"
  "    [fileData writeByte:3 trace:nil] ;\n"
  "    [fileData writeAutosizedData:data trace:nil] ;\n"
  "    break ;\n"
  "  }\n"
  "//--- Append final byte\n"
  "  [fileData writeByte:0 trace:nil] ;\n"
  "//---\n"
  "  return fileData ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) hookOfWillSave {\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) showWindows {\n"
  "  if ((self.windowForSheet.styleMask & NSResizableWindowMask) != 0) { // Only if window is resizable\n"
  "    NSDictionary * metadataDictionaryReadFromFile = self.metadataDictionaryReadFromFile ;\n"
  "    NSNumber * windowWidthNumber = [metadataDictionaryReadFromFile objectForKey:@\"PMWindowWidth\"] ;\n"
  "    NSNumber * windowHeightNumber = [metadataDictionaryReadFromFile objectForKey:@\"PMWindowHeight\"] ;\n"
  "    if ((nil != windowWidthNumber) && (nil != windowHeightNumber)) {\n"
  "      const NSSize newSize = {windowWidthNumber.doubleValue, windowHeightNumber.doubleValue} ;\n"
  "      NSRect windowFrame = self.windowForSheet.frame ;\n"
  "      windowFrame.size = newSize ;\n"
  "      [self.windowForSheet setFrame:windowFrame display:YES] ;\n"
  "    }\n"
  "  }\n"
  "//---\n"
  "  [super showWindows] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#pragma mark Document Loading\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "+ (BOOL) loadFromBinaryData: (NSData *) inBinaryData\n"
  "         usingManagedObjectContext: (NSManagedObjectContext *) inManagedObjectContext\n"
  "         error: (NSError **) outError {\n"
  "  NSError * error = nil ;\n"
  "//---\n"
  "  NSDictionary * readOptions = [NSDictionary\n"
  "    dictionaryWithObject:[NSNumber numberWithBool:YES]\n"
  "    forKey:NSIgnorePersistentStoreVersioningOption\n"
  "  ] ;\n"
  "  [[inManagedObjectContext persistentStoreCoordinator] \n"
  "    addPersistentStoreWithType:NSInMemoryStoreType\n"
  "    configuration:nil\n"
  "    URL:nil\n"
  "    options:readOptions\n"
  "    error:&error\n"
  "  ] ;\n"
  "//---\n"
  "  if (nil == error) {\n"
  "    NSMutableString * trace = nil ; // [NSMutableString new] ;\n"
  "//    @try{\n"
  "  //--- Load data\n"
  "    PMDataScanner * dataScanner = [PMDataScanner scannerWithData:inBinaryData displayProgressWindowTitle:nil] ;\n"
  "  //--- Parse entity definitions\n"
  "    PMLoadedEntityDatabase * loadedEntityDatabase = [[PMLoadedEntityDatabase alloc]\n"
  "      initWithDataScanner:dataScanner\n"
  "      trace: trace\n"
  "      entityDictionary:inManagedObjectContext.persistentStoreCoordinator.managedObjectModel.entitiesByName\n"
  "    ] ;\n"
  "  //--- Parse object definitions\n"
  "    [[inManagedObjectContext undoManager] disableUndoRegistration] ;\n"
  "    [PMLoadedObjectDatabase\n"
  "      loadWithDataScanner:dataScanner\n"
  "      trace:trace\n"
  "      withLoadedDatabase:loadedEntityDatabase\n"
  "      managedObjectContext:inManagedObjectContext\n"
  "    ] ;\n"
  "//    }@catch (NSException * e) {\n"
  "//      NSLog (@\"READ TRACE:\\n%@\", trace) ;\n"
  "//      @throw e ;\n"
  "//    }\n"
  "    [inManagedObjectContext processPendingChanges] ;\n"
  "    [[inManagedObjectContext undoManager] enableUndoRegistration] ;\n"
  "  }\n"
  "//---\n"
  "  if (NULL != outError) {\n"
  "    * outError = error ;\n"
  "  }\n"
  "//---\n"
  "  return nil == error ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (NSDictionary *) metadataDictionaryReadFromFile { // nil if document has been never saved\n"
  "  return mReadMetadataDictionary.copy ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (UInt8) metadataStatusReadFromFile {\n"
  "  return mReadMetadataStatus ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (BOOL) readFromData: (NSData *) inData\n"
  "         ofType:(NSString *) inTypeName\n"
  "         error:(NSError **) outError {\n"
  "  #ifdef EASY_BINDINGS_DEBUG\n"
  "    NSLog (@\"PMBinaryFlatDocument <readFromData:'%lu' ofType:'%@'>\", [inData length], inTypeName) ;\n"
  "  #endif\n"
  "//---- Define input data scanner\n"
  "  PMDataScanner * dataScanner = [PMDataScanner\n"
  "    scannerWithData:inData\n"
  "    displayProgressWindowTitle:([inData length] > 30000) \? [[self lastComponentOfFileName] stringByDeletingPathExtension] : nil\n"
  "  ] ;\n"
  "//--- Check Signature\n"
  "  for (NSUInteger i=0 ; i<strlen (kFormatSignature) ; i++) {\n"
  "    [dataScanner acceptRequiredByte: (UInt8) kFormatSignature [i]] ;\n"
  "  }\n"
  "//--- Read Status\n"
  "  mReadMetadataStatus = [dataScanner parseByte] ;\n"
  "//--- if ok, check byte is 1\n"
  "  [dataScanner acceptRequiredByte:1] ;\n"
  "//--- Read dictionary\n"
  "  NSError * error = nil ;\n"
  "  NSData * dictionaryData = [dataScanner parseAutosizedData] ;\n"
  "  if (nil != dictionaryData) {\n"
  "    mReadMetadataDictionary = [NSPropertyListSerialization\n"
  "      propertyListWithData:dictionaryData\n"
  "      options:NSPropertyListImmutable\n"
  "      format:NULL\n"
  "      error:& error\n"
  "    ] ;\n"
  "   //  NSLog (@\"mReadMetadataDictionary %@\", mReadMetadataDictionary) ;\n"
  "  }\n"
  "//--- Read dictionary\n"
  "  if ([dataScanner testAcceptByte:3]) { // Not compressed\n"
  "    NSData * data = [dataScanner parseAutosizedData] ;\n"
  "    if (nil != data) {\n"
  "      [PMBinaryFlatDocument loadFromBinaryData:data usingManagedObjectContext:self.managedObjectContext error: & error] ;\n"
  "    }\n"
  "  }else if ([dataScanner testAcceptByte:4]) { // ZLIB Compressed\n"
  "    NSData * compressedData = [dataScanner parseAutosizedData] ;\n"
  "    if (nil != compressedData) {\n"
  "      NSData * data = [compressedData zlibDecompressedDataWithEstimedExpansion:10 returnedErrorCode:nil] ;\n"
  "      [PMBinaryFlatDocument loadFromBinaryData:data usingManagedObjectContext:self.managedObjectContext error: & error] ;\n"
  "    }\n"
  "  }else{\n"
  "    [dataScanner acceptRequiredByte:2] ; // BZ2 compressed\n"
  "    NSData * compressedData = [dataScanner parseAutosizedData] ;\n"
  "    if (nil != compressedData) {\n"
  "      NSData * data = [compressedData bz2DecompressedDataWithEstimedExpansion:10 returnedErrorCode:nil] ;\n"
  "      [PMBinaryFlatDocument loadFromBinaryData:data usingManagedObjectContext:self.managedObjectContext error: & error] ;\n"
  "    }\n"
  "  }\n"
  "//--- if ok, check final byte (0)\n"
  "  [dataScanner acceptRequiredByte:0] ;\n"
  "//--- Scanner error \?\n"
  "  if (! [dataScanner ok]) {\n"
  "    NSDictionary * dictionary = [NSDictionary dictionaryWithObjectsAndKeys:\n"
  "      @\"Cannot Open Document\",  NSLocalizedDescriptionKey,\n"
  "      @\"The file has an invalid format\",  NSLocalizedRecoverySuggestionErrorKey,\n"
  "      nil\n"
  "    ] ;\n"
  "    error = [[NSError alloc]\n"
  "      initWithDomain:@\"fr.ec-nantes.irccyn.molinaro.canari\"\n"
  "      code:1\n"
  "      userInfo:dictionary\n"
  "    ] ;\n"
  "/*    [NSError\n"
  "      canariErrorWithMessage:@\"Cannot Open Document\"\n"
  "      informativeText:@\"The file has an invalid format\"\n"
  "      error: & error\n"
  "    ] ;*/\n"
  "  }\n"
  "//---\n"
  "  [dataScanner orderOutProgressWindow] ;\n"
  "  dataScanner = nil ;\n"
  "//---\n"
  "  if (NULL != outError) {\n"
  "    * outError = error ;\n"
  "  }\n"
  "//---\n"
  "  return nil == error ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#pragma mark Close User Interface\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef EASY_BINDINGS_DEBUG\n"
  "  - (void) updateChangeCount: (NSDocumentChangeType) inChangeType {\n"
  "    NSLog (@\"%s%d>\", __PRETTY_FUNCTION__, inChangeType) ;\n"
  "    [super updateChangeCount:inChangeType] ;\n"
  "  }\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#pragma mark Get file metadata\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "+ (BOOL) badFormatErrorForFileAtPath: (NSString *) inFilePath\n"
  "         error: (NSError **) outError {\n"
  "/*  return [NSError\n"
  "    canariErrorWithMessage:[NSString stringWithFormat:@\"Cannot read '%@' file\", inFilePath]\n"
  "    informativeText:@\"File does have the required format\"\n"
  "    error:outError\n"
  "  ] ;*/\n"
  "  NSDictionary * dictionary = [NSDictionary dictionaryWithObjectsAndKeys:\n"
  "    [NSString stringWithFormat:@\"Cannot read '%@' file\", inFilePath],  NSLocalizedDescriptionKey,\n"
  "    @\"File does have the required format\",  NSLocalizedRecoverySuggestionErrorKey,\n"
  "    nil\n"
  "  ] ;\n"
  "  NSError * error = [[NSError alloc]\n"
  "    initWithDomain:@\"fr.ec-nantes.irccyn.molinaro.canari\"\n"
  "    code:1\n"
  "    userInfo:dictionary\n"
  "  ] ;\n"
  "  if (nil != outError) {\n"
  "    * outError = error ;\n"
  "  }\n"
  "  return NO ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "static UInt8 readByte (NSFileHandle * inFileHandle, NSString * inFilePath, NSError ** outError) {\n"
  "  UInt8 byte = 0 ;\n"
  "  NSError * error = nil ;\n"
  "  NSData * byteData = [inFileHandle readDataOfLength:1] ;\n"
  "  if ([byteData length] != 1) {\n"
  "    [PMBinaryFlatDocument badFormatErrorForFileAtPath:inFilePath error: & error] ;\n"
  "  }else{\n"
  "    [byteData getBytes: & byte length:1] ;\n"
  "  }\n"
  "//---\n"
  "  if (NULL != outError) {\n"
  "    * outError = error ;\n"
  "  }\n"
  "  return byte ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "static NSUInteger readAutosizedUnsignedIntegerAtIndex (NSFileHandle * inFileHandle, NSString * inFilePath, NSError ** outError) {\n"
  "  NSUInteger result = 0 ;\n"
  "  NSUInteger shift = 0 ;\n"
  "  NSError * error = nil ;\n"
  "  BOOL done = NO ;\n"
  "  do{\n"
  "    const UInt8 byte = readByte (inFileHandle, inFilePath, & error) ;\n"
  "    const NSUInteger w = byte & 0x7FU ;\n"
  "    result |= w << shift ;\n"
  "    shift += 7 ;\n"
  "    done = (byte & 0x80) == 0 ;\n"
  "  }while ((nil == error) && ! done) ;\n"
  "//---\n"
  "  if (NULL != outError) {\n"
  "    * outError = error ;\n"
  "  }\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "static NSData * readAutosizedDataAtIndex (NSFileHandle * inFileHandle, NSString * inFilePath, NSError ** outError) {\n"
  "  NSError * error = nil ;\n"
  "  const NSUInteger dataLength = readAutosizedUnsignedIntegerAtIndex (inFileHandle, inFilePath, & error) ;\n"
  "//---\n"
  "  NSData * result = nil ;\n"
  "  if (nil == error) {\n"
  "    result = [inFileHandle readDataOfLength:dataLength] ;\n"
  "  }\n"
  "//---\n"
  "  if (NULL != outError) {\n"
  "    * outError = error ;\n"
  "  }\n"
  "//---\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "+ (NSDictionary *) metadataForFileAtPath: (NSString *) inFilePath\n"
  "                   status: (UInt8 *) outStatus\n"
  "                   error: (NSError **) outError {\n"
  "//--- Open file\n"
  "  NSError * error = nil ;\n"
  "  NSFileHandle * f = [NSFileHandle\n"
  "    fileHandleForReadingFromURL:[NSURL fileURLWithPath:inFilePath]\n"
  "    error: & error\n"
  "  ] ;\n"
  "//--- Read format string\n"
  "  if (nil == error) {\n"
  "    NSData * formatStringData = [f readDataOfLength:strlen (kFormatSignature)] ;\n"
  "    if ([formatStringData length] != strlen (kFormatSignature)) {\n"
  "      [PMBinaryFlatDocument badFormatErrorForFileAtPath:inFilePath error: & error] ;\n"
  "    }else{\n"
  "      UInt8 * bytes = (UInt8 *) [formatStringData bytes] ;\n"
  "      if (memcmp (bytes, kFormatSignature, strlen (kFormatSignature)) != 0) {\n"
  "        [PMBinaryFlatDocument badFormatErrorForFileAtPath:inFilePath error: & error] ;\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "//--- Read status\n"
  "  if (nil == error) {\n"
  "    const UInt8 status = readByte (f, inFilePath, & error) ;\n"
  "    if (NULL != outStatus) {\n"
  "      * outStatus = status ;\n"
  "    }\n"
  "  }\n"
  "//--- Check byte is 1\n"
  "  if (nil == error) {\n"
  "    const UInt8 byte = readByte (f, inFilePath, & error) ;\n"
  "    if ((nil == error) && (1 != byte)) {\n"
  "      [PMBinaryFlatDocument badFormatErrorForFileAtPath:inFilePath error: & error] ;\n"
  "    }\n"
  "  }\n"
  "//--- Read metadata dictionary\n"
  "  NSData * dictionaryData = nil ;\n"
  "  if (nil == error) {\n"
  "    dictionaryData = readAutosizedDataAtIndex (f, inFilePath, & error) ;\n"
  "  }\n"
  "  NSDictionary * metadataDictionaryForSaving  = nil ;\n"
  "  if (nil == error) {\n"
  "    metadataDictionaryForSaving = [NSPropertyListSerialization\n"
  "      propertyListWithData:dictionaryData\n"
  "      options:NSPropertyListImmutable\n"
  "      format:NULL\n"
  "      error:nil\n"
  "    ] ;\n"
  "  }\n"
  "//---  \n"
  "  [f closeFile] ;\n"
  "//---\n"
  "  if (NULL != outError) {\n"
  "    * outError = error ;\n"
  "  }\n"
  "//---\n"
  "  return metadataDictionaryForSaving ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "+ (UInt8) statusForFileAtPath: (NSString *) inFilePath\n"
  "          error: (NSError **) outError {\n"
  "//--- Open file\n"
  "  NSError * error = nil ;\n"
  "  NSFileHandle * f = [NSFileHandle\n"
  "    fileHandleForReadingFromURL:[NSURL fileURLWithPath:inFilePath]\n"
  "    error: & error\n"
  "  ] ;\n"
  "//--- Read format string\n"
  "  if (nil == error) {\n"
  "    NSData * formatStringData = [f readDataOfLength:strlen (kFormatSignature)] ;\n"
  "    if ([formatStringData length] != strlen (kFormatSignature)) {\n"
  "      [PMBinaryFlatDocument badFormatErrorForFileAtPath:inFilePath error: & error] ;\n"
  "    }else{\n"
  "      UInt8 * bytes = (UInt8 *) [formatStringData bytes] ;\n"
  "      if (memcmp (bytes, kFormatSignature, strlen (kFormatSignature)) != 0) {\n"
  "        [PMBinaryFlatDocument badFormatErrorForFileAtPath:inFilePath error: & error] ;\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "//--- Read status\n"
  "  UInt8 status = 0 ;\n"
  "  if (nil == error) {\n"
  "    NSData * statusData = [f readDataOfLength:1] ;\n"
  "    if ([statusData length] != 1) {\n"
  "      [PMBinaryFlatDocument badFormatErrorForFileAtPath:inFilePath error: & error] ;\n"
  "    }else{\n"
  "      [statusData getBytes: & status length:1] ;\n"
  "    }\n"
  "  }\n"
  "//---  \n"
  "  [f closeFile] ;\n"
  "//---\n"
  "  if (NULL != outError) {\n"
  "    * outError = error ;\n"
  "  }\n"
  "//---\n"
  "  return status ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#pragma mark Load Data in MOC\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "+ (id) rootObjectWithEntityNamed: (NSString *) inRootEntityName\n"
  "       fromFile: (NSString *) inFilePath\n"
  "       usingManagedObjectContext: (NSManagedObjectContext *) inManagedObjectContext\n"
  "       status: (UInt8 *) outStatus\n"
  "       metadataDictionary: (NSDictionary **) outMetadataDictionary\n"
  "       error: (NSError **) outError {\n"
  "//--- Read file\n"
  "  NSData * fileContents = nil ;\n"
  "  NSError * error = nil ;\n"
  "  if (nil == error) {\n"
  "    fileContents = [NSData\n"
  "      dataWithContentsOfFile:inFilePath\n"
  "      options:NSDataReadingMapped\n"
  "      error:& error\n"
  "    ] ;\n"
  "  }\n"
  "//---- Define input data scanner\n"
  "  PMDataScanner * dataScanner = nil ;\n"
  "  if (nil == error) {\n"
  "    dataScanner = [PMDataScanner scannerWithData:fileContents displayProgressWindowTitle:nil] ;\n"
  "  }\n"
  "//--- Check Signature\n"
  "  for (NSUInteger i=0 ; i<strlen (kFormatSignature) ; i++) {\n"
  "    [dataScanner acceptRequiredByte: (UInt8) kFormatSignature [i]] ;\n"
  "  }\n"
  "//--- Pass One byte of Status\n"
  "  const UInt8 status = [dataScanner parseByte] ;\n"
  "  if (NULL != outStatus) {\n"
  "    * outStatus = status ;\n"
  "  }\n"
  "//--- Check byte is 1\n"
  "  [dataScanner acceptRequiredByte:1] ;\n"
  "//--- Metadata dictionary\n"
  "  if (NULL == outMetadataDictionary) {\n"
  "    [dataScanner ignoreAutosizedData] ;\n"
  "  }else{\n"
  "    NSData * dictionaryData = [dataScanner parseAutosizedData] ;\n"
  "    * outMetadataDictionary = [NSPropertyListSerialization\n"
  "      propertyListWithData:dictionaryData\n"
  "      options:NSPropertyListImmutable\n"
  "      format:NULL\n"
  "      error:& error\n"
  "    ] ;\n"
  "  }\n"
  "//--- Read data\n"
  "  if (nil == error) {\n"
  "    if ([dataScanner testAcceptByte:3]) { // Not compressed\n"
  "      NSData * data = [dataScanner parseAutosizedData] ;\n"
  "      if (nil != data) {\n"
  "        [PMBinaryFlatDocument loadFromBinaryData:data usingManagedObjectContext:inManagedObjectContext error:&error] ;\n"
  "      }\n"
  "    }else if ([dataScanner testAcceptByte:4]) { // ZLIB Compressed\n"
  "      NSData * compressedData = [dataScanner parseAutosizedData] ;\n"
  "      if (nil != compressedData) {\n"
  "        NSData * data = [compressedData zlibDecompressedDataWithEstimedExpansion:10 returnedErrorCode:nil] ;\n"
  "        [PMBinaryFlatDocument loadFromBinaryData:data usingManagedObjectContext:inManagedObjectContext error:&error] ;\n"
  "      }\n"
  "    }else{\n"
  "      [dataScanner acceptRequiredByte:2] ; // BZ2 compressed\n"
  "      NSData * compressedData = [dataScanner parseAutosizedData] ;\n"
  "      if (nil != compressedData) {\n"
  "        NSData * data = [compressedData bz2DecompressedDataWithEstimedExpansion:10 returnedErrorCode:nil] ;\n"
  "        [PMBinaryFlatDocument loadFromBinaryData:data usingManagedObjectContext:inManagedObjectContext error:&error] ;\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "//--- Fetch root object\n"
  "  id rootObject = nil ;\n"
  "  if (nil == error) {\n"
  "    NSFetchRequest * request = [NSFetchRequest new] ;\n"
  "    [request setEntity:[NSEntityDescription entityForName:inRootEntityName inManagedObjectContext:inManagedObjectContext]] ;\n"
  "    NSArray * fetchResult = nil ;\n"
  "    if (nil == error) {\n"
  "      fetchResult = [inManagedObjectContext executeFetchRequest:request error:& error] ;\n"
  "    }\n"
  "    if (nil == error) {\n"
  "      if ([fetchResult count] == 1) {\n"
  "        rootObject = [fetchResult objectAtIndex:0 HERE] ;\n"
  "      }else{\n"
  "        NSDictionary * dictionary = [NSDictionary dictionaryWithObjectsAndKeys:\n"
  "          [NSString stringWithFormat:@\"Cannot read '%@' file\", inFilePath],  NSLocalizedDescriptionKey,\n"
  "          @\"File does not present one root object\",  NSLocalizedRecoverySuggestionErrorKey,\n"
  "          nil\n"
  "        ] ;\n"
  "        error = [[NSError alloc]\n"
  "          initWithDomain:@\"fr.ec-nantes.irccyn.molinaro.canari\"\n"
  "          code:1\n"
  "          userInfo:dictionary\n"
  "        ] ;\n"
  "/*        [NSError\n"
  "          canariErrorWithMessage:[NSString stringWithFormat:@\"Cannot read '%@' file\", inFilePath]\n"
  "          informativeText:@\"File does not present one root object\"\n"
  "          error:& error\n"
  "        ] ;*/\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "//---\n"
  "  if (NULL != outError) {\n"
  "    * outError = error ;\n"
  "  }\n"
  "  return rootObject ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "+ (id) rootObjectWithEntityNamed: (NSString *) inRootEntityName\n"
  "       fromFile: (NSString *) inFilePath\n"
  "       status: (UInt8 *) outStatus\n"
  "       metadataDictionary: (NSDictionary **) outMetadataDictionary\n"
  "       error: (NSError **) outError {\n"
  "//--- Configure a temporary MOC\n"
  "  NSManagedObjectContext * temporaryMOC = [NSManagedObjectContext new] ;\n"
  "  NSManagedObjectModel * mom = [NSManagedObjectModel mergedModelFromBundles:nil] ;\n"
  "  NSPersistentStoreCoordinator * coordinator = [[NSPersistentStoreCoordinator alloc] initWithManagedObjectModel:mom] ;\n"
  "  NSDictionary * options = [NSDictionary dictionaryWithObjectsAndKeys:\n"
  "    [NSNumber numberWithBool:YES], NSIgnorePersistentStoreVersioningOption,\n"
  "    nil\n"
  "  ] ;\n"
  "  [coordinator\n"
  "    addPersistentStoreWithType:NSInMemoryStoreType\n"
  "    configuration:nil\n"
  "    URL:nil\n"
  "    options:options\n"
  "    error:nil\n"
  "  ] ;\n"
  "  [temporaryMOC setPersistentStoreCoordinator:coordinator] ;\n"
  "//---\n"
  "  return [PMBinaryFlatDocument\n"
  "    rootObjectWithEntityNamed:inRootEntityName\n"
  "    fromFile:inFilePath\n"
  "    usingManagedObjectContext:temporaryMOC\n"
  "    status:outStatus\n"
  "    metadataDictionary:outMetadataDictionary\n"
  "    error:outError\n"
  "  ] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@end\n" ;

static const cRegularFileWrapper gWrapperFile_6_objective_5F_c_5F_sources (
  "PMBinaryFlatDocument.m",
  "m",
  true, // Text file
  23566, // Text length
  gWrapperFileContent_6_objective_5F_c_5F_sources
) ;

//--- File '/PMDataScanner.h'

static const char * gWrapperFileContent_7_objective_5F_c_5F_sources = "//\n"
  "//  PMDataScanner.h\n"
  "//  canari\n"
  "//\n"
  "//  Created by Pierre Molinaro on 09/11/07.\n"
  "//  Copyright 2007 __MyCompanyName__. All rights reserved.\n"
  "//\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#import <Cocoa/Cocoa.h>\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@interface PMDataScanner : NSObject {\n"
  "  @private NSData * mData ;\n"
  "  @private NSUInteger mReadIndex ;\n"
  "  @private BOOL mReadOk ;\n"
  "  @private NSMutableData * mExpectedBytes ;\n"
  "  @private NSWindow * mProgressWindow ;\n"
  "  @private NSProgressIndicator * mProgressIndicator ;\n"
  "}\n"
  "\n"
  "+ (PMDataScanner *) scannerWithData: (NSData *) inData\n"
  "                    displayProgressWindowTitle: (NSString *) inTitle ;\n"
  "\n"
  "- (void) orderOutProgressWindow ;\n"
  "\n"
  "- (void) ignoreBytes: (NSUInteger) inLengthToIgnore ;\n"
  "\n"
  "- (BOOL) testAcceptByte: (UInt8) inByte ;\n"
  "\n"
  "- (BOOL) testAcceptFromByte: (UInt8) inLowerBound\n"
  "         toByte: (UInt8) inUpperBound\n"
  "         value: (UInt8 *) outValuePtr ;\n"
  "\n"
  "- (void) acceptRequiredByte: (UInt8) inByte ;\n"
  "\n"
  "- (UInt64) parseAutosizedUnsignedInteger ;\n"
  "\n"
  "- (NSString *) parseAutosizedString ;\n"
  "\n"
  "// - (long long) parseIntegerOfSize: (NSUInteger) inByteSize ; // DEPRECATED\n"
  "\n"
  "- (NSData *) parseAutosizedData ;\n"
  "\n"
  "- (void) ignoreAutosizedData ;\n"
  "\n"
  "- (UInt8) parseByte ;\n"
  "\n"
  "- (BOOL) ok ;\n"
  "\n"
  "@end\n"
  "\n"
  "//---------------------------------------------------------------------------*\n" ;

static const cRegularFileWrapper gWrapperFile_7_objective_5F_c_5F_sources (
  "PMDataScanner.h",
  "h",
  true, // Text file
  1383, // Text length
  gWrapperFileContent_7_objective_5F_c_5F_sources
) ;

//--- File '/PMDataScanner.m'

static const char * gWrapperFileContent_8_objective_5F_c_5F_sources = "//\n"
  "//  PMDataScanner.m\n"
  "//  canari\n"
  "//\n"
  "//  Created by Pierre Molinaro on 09/11/07.\n"
  "//  Copyright 2007 __MyCompanyName__. All rights reserved.\n"
  "//\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#import \"PMDataScanner.h\"\n"
  "\n"
  "#import \"PMAllocationDebug.h\"\n"
  "\n"
  "//#define EASY_BINDINGS_DEBUG\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@implementation PMDataScanner\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) openProgressWindowWithTitle: (NSString *) inTitle {\n"
  "  const NSRect visibleFrame = [[NSScreen mainScreen] visibleFrame] ;\n"
  "  const double windowWidth = 400.0 ;\n"
  "  const double windowHeight = 65.0 ;\n"
  "  const NSRect windowRect = {\n"
  "    {NSMidX (visibleFrame) - windowWidth / 2.0, NSMidY (visibleFrame) - windowHeight / 2.0},\n"
  "    {windowWidth, windowHeight}\n"
  "  } ;\n"
  "  mProgressWindow = [[NSWindow alloc]\n"
  "    initWithContentRect:windowRect\n"
  "    styleMask:NSTitledWindowMask\n"
  "    backing:NSBackingStoreBuffered\n"
  "    defer:NO\n"
  "  ] ;\n"
  "  [mProgressWindow setExcludedFromWindowsMenu:YES] ;\n"
  "  [mProgressWindow setTitle:@\"Progress\"] ;\n"
  "  const NSRect contientViewRect = [[mProgressWindow contentView] frame] ;\n"
  "//--- Add comment text\n"
  "  const NSRect ts_r = {{25.0, 30.0}, {NSMaxX (contientViewRect) - 40.0, 20.0}} ;\n"
  "  NSTextField * ts = [[NSTextField alloc] initWithFrame:ts_r] ;\n"
  "  [ts setFont:[NSFont boldSystemFontOfSize:[NSFont smallSystemFontSize]]] ;\n"
  "  [ts setStringValue:[NSString stringWithFormat:@\"Opening %@\xE2""\x80""\xA6""\", inTitle]] ;\n"
  "  [ts setBezeled:NO] ;\n"
  "  [ts setBordered:NO] ;\n"
  "  [ts setEditable:NO] ;\n"
  "  [ts setDrawsBackground:NO] ;\n"
  "  [[mProgressWindow contentView] addSubview:ts] ;\n"
  "//--- Add progress indicator\n"
  "  const NSRect ps_r = {{20.0, 10.0}, {NSMaxX (contientViewRect) - 40.0, 20.0}} ;\n"
  "  mProgressIndicator = [[NSProgressIndicator alloc] initWithFrame:ps_r] ;\n"
  "  [mProgressIndicator setIndeterminate:YES] ;\n"
  "  [[mProgressWindow contentView] addSubview:mProgressIndicator] ;\n"
  "//---\n"
  "  [mProgressIndicator setMinValue:0.0] ;\n"
  "  [mProgressIndicator setMaxValue: (double) [mData length]] ;\n"
  "  [mProgressIndicator setDoubleValue: (double) mReadIndex] ;\n"
  "  [mProgressIndicator setIndeterminate:NO] ;\n"
  "  [mProgressIndicator display] ;\n"
  "  [mProgressWindow makeKeyAndOrderFront:nil] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) orderOutProgressWindow {\n"
  "  [mProgressWindow close] ;\n"
  "  mProgressWindow = nil ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) configureWithData: (NSData *) inData {\n"
  "    mReadIndex = 0 ;\n"
  "    mData = inData ;\n"
  "    mReadOk = YES ;\n"
  "    mExpectedBytes = [NSMutableData new] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "+ (PMDataScanner *) scannerWithData: (NSData *) inData\n"
  "                    displayProgressWindowTitle: (NSString *) inTitle {\n"
  "  PMDataScanner * scanner  = [PMDataScanner new] ;\n"
  "  if (nil != scanner) {\n"
  "    macroNoteObjectAllocation (scanner) ;\n"
  "    [scanner configureWithData:inData] ;\n"
  "    if (nil != inTitle) {\n"
  "      [scanner openProgressWindowWithTitle:inTitle] ;\n"
  "    }\n"
  "  }\n"
  "  return scanner ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//                                                                           *\n"
  "//                           dealloc                             *\n"
  "//                                                                           *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  - (void) dealloc {\n"
  "    macroNoteObjectDeallocation (self) ;\n"
  "  }\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) updateProgressIndicator {\n"
  "  [mProgressIndicator setDoubleValue: (double) mReadIndex] ;\n"
  "  [mProgressIndicator display] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) ignoreBytes: (NSUInteger) inLengthToIgnore {\n"
  "  if (mReadOk) {\n"
  "    mReadIndex += inLengthToIgnore ;\n"
  "    [self updateProgressIndicator] ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (BOOL) testAcceptByte: (UInt8) inByte {\n"
  "  BOOL result = mReadOk ;\n"
  "  if (result) {\n"
  "    if (mReadIndex >= [mData length]) {\n"
  "       NSLog (@\"Read beyond end of data\") ;\n"
  "       mReadOk = NO ;\n"
  "     }else{\n"
  "      const UInt8 * bytes = [mData bytes] ;\n"
  "      result = bytes [mReadIndex] == inByte ;\n"
  "      if (result) {\n"
  "        mReadIndex ++ ;\n"
  "        [mExpectedBytes setLength:0] ;\n"
  "      }else{\n"
  "        [mExpectedBytes appendBytes:& inByte length:1] ;\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "  [self updateProgressIndicator] ;\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (BOOL) testAcceptFromByte: (UInt8) inLowerBound\n"
  "         toByte: (UInt8) inUpperBound\n"
  "         value: (UInt8 *) outValuePtr {\n"
  "  BOOL result = mReadOk ;\n"
  "  if (result) {\n"
  "    if (mReadIndex >= [mData length]) {\n"
  "       NSLog (@\"Read beyond end of data\") ;\n"
  "       mReadOk = NO ;\n"
  "     }else{\n"
  "      const UInt8 * bytes = [mData bytes] ;\n"
  "      result = (bytes [mReadIndex] >= inLowerBound) && (bytes [mReadIndex] <= inUpperBound) ;\n"
  "      if (result) {\n"
  "        if (outValuePtr != NULL) {\n"
  "          * outValuePtr = bytes [mReadIndex] ;\n"
  "        }\n"
  "        mReadIndex ++ ;\n"
  "        [mExpectedBytes setLength:0] ;\n"
  "      }else{\n"
  "        for (NSUInteger i=inLowerBound ; i<=inUpperBound ; i++) {\n"
  "          [mExpectedBytes appendBytes:& i length:1] ;\n"
  "        }\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "  [self updateProgressIndicator] ;\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) acceptRequiredByte: (UInt8) inByte {\n"
  "  if (mReadOk) {\n"
  "    if (mReadIndex >= [mData length]) {\n"
  "       NSLog (@\"Read beyond end of data\") ;\n"
  "       mReadOk = NO ;\n"
  "     }else{\n"
  "      const UInt8 * bytes = [mData bytes] ;\n"
  "      if (bytes [mReadIndex] == inByte) {\n"
  "        mReadIndex ++ ;\n"
  "        [mExpectedBytes setLength:0] ;\n"
  "      }else{\n"
  "        NSMutableString * message = [NSMutableString new] ;\n"
  "        const UInt8 * expectedBytes = [mExpectedBytes bytes] ;\n"
  "        for (NSUInteger i=0 ; i<[mExpectedBytes length] ; i++) {\n"
  "          [message appendFormat:@\"0x%02hhx, \", expectedBytes  [i]] ;\n"
  "        }\n"
  "        NSLog (@\"Invalid current byte (0x%02x): expected bytes:%@0x%02x\", bytes [mReadIndex], message, inByte) ;\n"
  "        mReadOk = NO ;\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "  [self updateProgressIndicator] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (UInt8) parseByte {\n"
  "  UInt8 result = 0 ;\n"
  "  if (mReadOk) {\n"
  "    if (mReadIndex >= [mData length]) {\n"
  "       NSLog (@\"Read beyond end of data\") ;\n"
  "       mReadOk = NO ;\n"
  "     }else{\n"
  "      const UInt8 * bytes = [mData bytes] ;\n"
  "      result = bytes [mReadIndex] ;\n"
  "      mReadIndex ++ ;\n"
  "    }\n"
  "  }\n"
  "  [self updateProgressIndicator] ;\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (UInt64) parseAutosizedUnsignedInteger {\n"
  "  UInt64 result = 0 ;\n"
  "  const UInt8 * bytes = [mData bytes] ;\n"
  "  NSUInteger shift = 0 ;\n"
  "  BOOL loop = YES ;\n"
  "  while (loop && mReadOk) {\n"
  "    if (mReadIndex >= [mData length]) {\n"
  "       NSLog (@\"Read beyond end of data\") ;\n"
  "       mReadOk = NO ;\n"
  "    }else{\n"
  "      const UInt64 w = bytes [mReadIndex] & 0x7F ;\n"
  "      result |= (UInt64) (w << shift) ;\n"
  "      shift += 7 ;\n"
  "      loop = (bytes [mReadIndex] & 0x80) !=0 ;\n"
  "      mReadIndex ++ ;\n"
  "    }\n"
  "  }\n"
  "  [self updateProgressIndicator] ;\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (NSString *) parseAutosizedString {\n"
  "  NSString * result = nil ;\n"
  "  const UInt8 * bytes = [mData bytes] ;\n"
  "  NSUInteger beyondStringIndex = mReadIndex ;\n"
  "  BOOL loop = YES ;\n"
  "  while (loop && mReadOk) {\n"
  "    if (beyondStringIndex >= [mData length]) {\n"
  "       NSLog (@\"Read beyond end of data\") ;\n"
  "       mReadOk = NO ;\n"
  "    }else{\n"
  "      loop = bytes [beyondStringIndex] != 0 ;\n"
  "      beyondStringIndex ++ ;\n"
  "    }\n"
  "  }\n"
  "  if (mReadOk) {\n"
  "    result = [NSString stringWithUTF8String:(const char *) & bytes [mReadIndex]] ;\n"
  "    mReadIndex = beyondStringIndex ;\n"
  "  }\n"
  "  [self updateProgressIndicator] ;\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (NSData *) parseAutosizedData {\n"
  "  NSData * result = nil ;\n"
  "  if (mReadOk) {\n"
  "    const NSUInteger dataLength = [self parseAutosizedUnsignedInteger] ;\n"
  "    if ((mReadIndex + dataLength) >= [mData length]) {\n"
  "      NSLog (@\"Read beyond end of data\") ;\n"
  "      mReadOk = NO ;\n"
  "    }else{\n"
  "      result = [mData subdataWithRange:NSMakeRange (mReadIndex, dataLength)] ;\n"
  "      mReadIndex += dataLength ;\n"
  "    }\n"
  "  }\n"
  "  [self updateProgressIndicator] ;\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) ignoreAutosizedData {\n"
  "  if (mReadOk) {\n"
  "    const NSUInteger dataLength = [self parseAutosizedUnsignedInteger] ;\n"
  "    [self ignoreBytes:dataLength] ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (BOOL) ok {\n"
  "  return mReadOk ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@end\n" ;

static const cRegularFileWrapper gWrapperFile_8_objective_5F_c_5F_sources (
  "PMDataScanner.m",
  "m",
  true, // Text file
  9166, // Text length
  gWrapperFileContent_8_objective_5F_c_5F_sources
) ;

//--- File '/PMEmbeddedEntityDatabase.h'

static const char * gWrapperFileContent_9_objective_5F_c_5F_sources = "//\n"
  "//  PMEmbeddedEntityDatabase.h\n"
  "//  canari\n"
  "//\n"
  "//  Created by Pierre Molinaro on 09/11/07.\n"
  "//  Copyright 2007 __MyCompanyName__. All rights reserved.\n"
  "//\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#import <Cocoa/Cocoa.h>\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@interface PMEmbeddedEntityDatabase : NSObject {\n"
  "  @private NSMutableArray * mEmbeddedEntityArray ; // Object NSEntityDescription\n"
  "  @private NSMutableDictionary * mDictionary ; // Key : NSValue of NSEntityDescription, object : index (NSNumber)\n"
  "}\n"
  "\n"
  "- (void) enterEntity: (NSEntityDescription *) inCoreDataEntity ;\n"
  "\n"
  "- (NSUInteger) indexOfCoreDataEntity: (NSEntityDescription *) inCoreDataEntity ;\n"
  "\n"
  "- (void) saveEntitiesToData: (NSMutableData *) ioData\n"
  "             trace:(NSMutableString *) ioTrace ;\n"
  "\n"
  "@end\n"
  "\n"
  "//---------------------------------------------------------------------------*\n" ;

static const cRegularFileWrapper gWrapperFile_9_objective_5F_c_5F_sources (
  "PMEmbeddedEntityDatabase.h",
  "h",
  true, // Text file
  923, // Text length
  gWrapperFileContent_9_objective_5F_c_5F_sources
) ;

//--- File '/PMEmbeddedEntityDatabase.m'

static const char * gWrapperFileContent_10_objective_5F_c_5F_sources = "//\n"
  "//  PMEmbeddedEntityDatabase.m\n"
  "//  canari\n"
  "//\n"
  "//  Created by Pierre Molinaro on 09/11/07.\n"
  "//  Copyright 2007 __MyCompanyName__. All rights reserved.\n"
  "//\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#import \"PMEmbeddedEntityDatabase.h\"\n"
  "#import \"PMMutableDataWriteCategory.h\"\n"
  "#import \"easy-bindings-utilities.h\"\n"
  "#import \"PMAllocationDebug.h\"\n"
  "\n"
  "//#define EASY_BINDINGS_DEBUG\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@implementation PMEmbeddedEntityDatabase\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (id) init {\n"
  "  self = [super init] ;\n"
  "  if (self) {\n"
  "    macroNoteObjectAllocation (self) ;\n"
  "  //--- Enter super entity \n"
  "    mDictionary = [NSMutableDictionary new] ;\n"
  "    mEmbeddedEntityArray = [NSMutableArray new] ;\n"
  "  }\n"
  "  return self ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//                                                                           *\n"
  "//                           dealloc                             *\n"
  "//                                                                           *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  - (void) dealloc {\n"
  "    macroNoteObjectDeallocation (self) ;\n"
  "  }\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) enterEntity: (NSEntityDescription *) inCoreDataEntity {\n"
  "  if (nil == inCoreDataEntity) {\n"
  "\t\tNSLog (@\"inCoreDataEntity is nil in %s\", __PRETTY_FUNCTION__) ;\n"
  "  }\n"
  "  NSValue * key = [NSValue valueWithNonretainedObject:inCoreDataEntity] ;\n"
  "//--- First, if entity is not already entered, enter super entity.\n"
  "  if (nil == [mDictionary objectForKey:key]) {\n"
  "    NSEntityDescription * superEntity = [inCoreDataEntity superentity] ;\n"
  "    if (nil != superEntity) {\n"
  "      [self enterEntity:superEntity] ;\n"
  "    }\n"
  "  }\n"
  "//--- If it does not exist, enter entity. Entering super entity may have entered this entity, by side effect\n"
  "  if (nil == [mDictionary objectForKey:key]) {\n"
  "    const NSUInteger indexValue = [mDictionary count] ;\n"
  "    #ifdef EASY_BINDINGS_DEBUG\n"
  "      NSLog (@\"ENTER ENTITY '%@' at index %lu\", [inCoreDataEntity name], indexValue) ;\n"
  "    #endif\n"
  "    NSNumber * indexNumber = [NSNumber numberWithUnsignedInteger:indexValue] ;\n"
  "    [mDictionary setObject:indexNumber forKey:key] ;\n"
  "    [mEmbeddedEntityArray addObject:inCoreDataEntity] ;\n"
  "  //--- Now, explore relationships to get other useful entities\n"
  "    NSDictionary * relationshipsByName = [inCoreDataEntity relationshipsByName] ;\n"
  "    NSArray * sortedRelationshipNames = [[relationshipsByName allKeys] sortedArrayUsingSelector:@selector (compare:)] ;\n"
  "    for (NSString * relationshipName in sortedRelationshipNames) {\n"
  "      NSRelationshipDescription * rsd = [relationshipsByName objectForKey:relationshipName] ;\n"
  "      NSEntityDescription * destinationEntity = [rsd destinationEntity] ;\n"
  "      [self enterEntity:destinationEntity] ;\n"
  "    }\n"
  "  }\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (NSUInteger) indexOfCoreDataEntity: (NSEntityDescription *) inCoreDataEntity {\n"
  "  NSValue * key = [NSValue valueWithNonretainedObject:inCoreDataEntity] ;\n"
  "  NSNumber * indexNumber = [mDictionary objectForKey:key] ;\n"
  "  if (indexNumber == nil) {\n"
  "    NSLog (@\"ERROR: UNKNOWN entity named '%@'\", [inCoreDataEntity name]) ;\n"
  "  }\n"
  "  return [indexNumber unsignedIntegerValue] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) saveEntitiesToData: (NSMutableData *) ioData\n"
  "         trace:(NSMutableString *) ioTrace {\n"
  "//--- Write entity count\n"
  "  [ioData writeAutosizedUnsigned:[mEmbeddedEntityArray count] trace:ioTrace] ;\n"
  "  [ioTrace appendFormat:@\"%lu entities\\n\", [mEmbeddedEntityArray count]] ;\n"
  "//--- Write entities\n"
  "  for (NSUInteger entityIdx=0 ; entityIdx<[mEmbeddedEntityArray count] ; entityIdx++) {\n"
  "    NSEntityDescription * coreDataEntity = [mEmbeddedEntityArray objectAtIndex:entityIdx HERE OFCLASS (NSEntityDescription)] ;\n"
  "  //--- Write 'Entity Definition' Mark\n"
  "    [ioData writeByte:0xBA trace:ioTrace] ;\n"
  "    [ioTrace appendFormat:@\"Start of %lu Entity Mark\\n\", entityIdx] ;\n"
  "  //--- Write Entity Name\n"
  "    [ioData writeAutosizedString:[coreDataEntity name] trace:ioTrace] ;\n"
  "    [ioTrace appendFormat:@\"Entity Name: '%@'\\n\", [coreDataEntity name]] ;\n"
  "    #ifdef EASY_BINDINGS_DEBUG\n"
  "      NSLog (@\"Entity #%lu, '%@'\", entityIdx, [coreDataEntity name]) ;\n"
  "    #endif \n"
  "  //--- Write super entity index (if any)\n"
  "    NSEntityDescription * superEntity = [coreDataEntity superentity] ;\n"
  "    if (superEntity == nil) {\n"
  "      [ioData writeByte:0xFF trace:ioTrace] ;\n"
  "      [ioTrace appendFormat:@\"No super Entity\\n\"] ;\n"
  "    }else{\n"
  "      [ioData writeByte:0xFE trace:ioTrace] ;\n"
  "      [ioTrace appendFormat:@\"Entity has super Entity\\n\"] ;\n"
  "      const NSUInteger superEntityIndex = [self\n"
  "        indexOfCoreDataEntity:superEntity\n"
  "      ] ;\n"
  "      [ioData writeAutosizedUnsigned:superEntityIndex trace:ioTrace] ;\n"
  "      [ioTrace appendFormat:@\"Super Entity Index: %lu -> '%@'\\n\", superEntityIndex, [superEntity name]] ;\n"
  "      #ifdef EASY_BINDINGS_DEBUG\n"
  "        NSLog (@\"  Super entity %lu\", superEntityIndex) ;\n"
  "      #endif \n"
  "    }\n"
  "  //---\n"
  "    NSDictionary * attributesByName = [coreDataEntity attributesByName] ;\n"
  "    NSArray * attributeNames = [[attributesByName allKeys] sortedArrayUsingSelector:@selector (compare:)] ;\n"
  "  //--- Write attributes: code byte, then attribute name\n"
  "    for (NSString * attributeName in attributeNames) {\n"
  "      NSAttributeDescription * attributeDescription = [attributesByName objectForKey:attributeName] ;\n"
  "      if (! [attributeDescription isTransient]) {\n"
  "        NSAttributeType attributeType = [attributeDescription attributeType] ;\n"
  "        switch (attributeType) {\n"
  "        case NSInteger16AttributeType :\n"
  "          [ioData writeByte:0x01 trace:ioTrace] ;\n"
  "          [ioTrace appendFormat:@\"Attribute Type: NSInteger16AttributeType\\n\"] ;\n"
  "          #ifdef EASY_BINDINGS_DEBUG\n"
  "            NSLog (@\" Attribute '%@', NSInteger16AttributeType\", attributeName) ;\n"
  "          #endif \n"
  "          break ;\n"
  "        case NSInteger32AttributeType :\n"
  "          [ioData writeByte:0x02 trace:ioTrace] ;\n"
  "          [ioTrace appendFormat:@\"Attribute Type: NSInteger32AttributeType\\n\"] ;\n"
  "          #ifdef EASY_BINDINGS_DEBUG\n"
  "            NSLog (@\" Attribute '%@', NSInteger32AttributeType\", attributeName) ;\n"
  "          #endif \n"
  "          break ;\n"
  "        case NSInteger64AttributeType :\n"
  "          [ioData writeByte:0x03 trace:ioTrace] ;\n"
  "          [ioTrace appendFormat:@\"Attribute Type: NSInteger64AttributeType\\n\"] ;\n"
  "          #ifdef EASY_BINDINGS_DEBUG\n"
  "            NSLog (@\" Attribute '%@', NSInteger64AttributeType\", attributeName) ;\n"
  "          #endif \n"
  "          break ;\n"
  "        case NSDecimalAttributeType   :\n"
  "          [ioData writeByte:0x04 trace:ioTrace] ;\n"
  "          [ioTrace appendFormat:@\"Attribute Type: NSDecimalAttributeType\\n\"] ;\n"
  "           #ifdef EASY_BINDINGS_DEBUG\n"
  "            NSLog (@\" Attribute '%@', NSDecimalAttributeType\", attributeName) ;\n"
  "          #endif \n"
  "         break ;\n"
  "        case NSDoubleAttributeType    :\n"
  "          [ioData writeByte:0x05 trace:ioTrace] ;\n"
  "          [ioTrace appendFormat:@\"Attribute Type: NSDoubleAttributeType\\n\"] ;\n"
  "          #ifdef EASY_BINDINGS_DEBUG\n"
  "            NSLog (@\" Attribute '%@', NSDoubleAttributeType\", attributeName) ;\n"
  "          #endif \n"
  "          break ;\n"
  "        case NSFloatAttributeType     :\n"
  "          [ioData writeByte:0x06 trace:ioTrace] ;\n"
  "          [ioTrace appendFormat:@\"Attribute Type: NSFloatAttributeType\\n\"] ;\n"
  "          #ifdef EASY_BINDINGS_DEBUG\n"
  "            NSLog (@\" Attribute '%@', NSFloatAttributeType\", attributeName) ;\n"
  "          #endif \n"
  "          break ;\n"
  "        case NSStringAttributeType    :\n"
  "          [ioData writeByte:0x07 trace:ioTrace] ;\n"
  "          [ioTrace appendFormat:@\"Attribute Type: NSStringAttributeType\\n\"] ;\n"
  "          #ifdef EASY_BINDINGS_DEBUG\n"
  "            NSLog (@\" Attribute '%@', NSStringAttributeType\", attributeName) ;\n"
  "          #endif \n"
  "          break ;\n"
  "        case NSBooleanAttributeType   :\n"
  "          [ioData writeByte:0x08 trace:ioTrace] ;\n"
  "          [ioTrace appendFormat:@\"Attribute Type: NSBooleanAttributeType\\n\"] ;\n"
  "          #ifdef EASY_BINDINGS_DEBUG\n"
  "            NSLog (@\" Attribute '%@', NSBooleanAttributeType\", attributeName) ;\n"
  "          #endif \n"
  "          break ;\n"
  "        case NSDateAttributeType      :\n"
  "        [ioData writeByte:0x09 trace:ioTrace] ;\n"
  "          [ioTrace appendFormat:@\"Attribute Type: NSDateAttributeType\\n\"] ;\n"
  "        #ifdef EASY_BINDINGS_DEBUG\n"
  "            NSLog (@\" Attribute '%@', NSDateAttributeType\", attributeName) ;\n"
  "          #endif \n"
  "          break ;\n"
  "        case NSBinaryDataAttributeType:\n"
  "          [ioData writeByte:0x0A trace:ioTrace] ;\n"
  "          [ioTrace appendFormat:@\"Attribute Type: NSBinaryDataAttributeType\\n\"] ;\n"
  "          #ifdef EASY_BINDINGS_DEBUG\n"
  "            NSLog (@\" Attribute '%@', NSBinaryDataAttributeType\", attributeName) ;\n"
  "          #endif \n"
  "          break ;\n"
  "        default:\n"
  "          NSLog (@\"Unknow attribute type (%lld)\", (SInt64) attributeType) ;\n"
  "          break ;\n"
  "        }\n"
  "        [ioData writeAutosizedString:attributeName trace:ioTrace] ;\n"
  "        [ioTrace appendFormat:@\"Attribute Name: '%@'\\n\", attributeName] ;\n"
  "      }\n"
  "    }\n"
  "  //--- Write relationships\n"
  "    NSDictionary * relationshipsByName = [coreDataEntity relationshipsByName] ;\n"
  "    NSArray * relationshipNames = [[relationshipsByName allKeys] sortedArrayUsingSelector:@selector (compare:)] ;\n"
  "    for (NSString * relationshipName in relationshipNames) {\n"
  "      NSRelationshipDescription * rsd = [relationshipsByName objectForKey:relationshipName] ;\n"
  "      if (! [rsd isTransient]) {\n"
  "        [ioData writeByte:[rsd isToMany] \? 0x0C : 0x0B trace:ioTrace] ;\n"
  "        [ioTrace appendFormat:@\"%@ Relationship\\n\", [rsd isToMany] \? @\"To-many\" : @\"To-one\"] ;\n"
  "        NSEntityDescription * destinationEntity = [rsd destinationEntity] ;\n"
  "        const NSUInteger destinationEntityIndex = [self\n"
  "          indexOfCoreDataEntity:destinationEntity\n"
  "        ] ;\n"
  "        [ioData writeAutosizedUnsigned:destinationEntityIndex trace:ioTrace] ;\n"
  "        [ioTrace appendFormat:@\"Destination Entity: %lu -> '%@'\\n\", destinationEntityIndex, [destinationEntity name]] ;\n"
  "        [ioData writeAutosizedString:relationshipName trace:ioTrace] ;\n"
  "        [ioTrace appendFormat:@\"Relationship Name: '%@'\\n\", relationshipName] ;\n"
  "      }\n"
  "    }\n"
  "    [ioData writeByte:0x00 trace:ioTrace] ; // 'End of Entity Definition' Mark\n"
  "    [ioTrace appendFormat:@\"End of Entity Definition Mark\\n\"] ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@end\n" ;

static const cRegularFileWrapper gWrapperFile_10_objective_5F_c_5F_sources (
  "PMEmbeddedEntityDatabase.m",
  "m",
  true, // Text file
  10668, // Text length
  gWrapperFileContent_10_objective_5F_c_5F_sources
) ;

//--- File '/PMEmbeddedObjectDatabase.h'

static const char * gWrapperFileContent_11_objective_5F_c_5F_sources = "//\n"
  "//  PMEmbeddedObjectDatabase.h\n"
  "//  canari\n"
  "//\n"
  "//  Created by Pierre Molinaro on 09/11/07.\n"
  "//  Copyright 2007 __MyCompanyName__. All rights reserved.\n"
  "//\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#import <Cocoa/Cocoa.h>\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@class PMEmbeddedEntityDatabase ;\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@interface PMEmbeddedObjectDatabase : NSObject {\n"
  "\n"
  "  @private NSMutableArray * mObjectArray ; // Object NSManagedObject\n"
  "  @private NSMutableDictionary * mDictionary ; // Key : NSValue of NSManagedObject, object : index (NSNumber)\n"
  "\n"
  "}\n"
  "\n"
  "- (void) enterObject: (NSManagedObject *) inObject\n"
  "         withEmbeddedEntityDatabase: (PMEmbeddedEntityDatabase *) ioEmbeddedEntityDatabase ;\n"
  "\n"
  "- (void) saveObjectsToData: (NSMutableData *) ioData\n"
  "         trace: (NSMutableString *) ioTrace\n"
  "         withEmbeddedEntityDatabase: (PMEmbeddedEntityDatabase *) inEmbeddedEntityDatabase ;\n"
  "\n"
  "@end\n"
  "\n"
  "//---------------------------------------------------------------------------*\n" ;

static const cRegularFileWrapper gWrapperFile_11_objective_5F_c_5F_sources (
  "PMEmbeddedObjectDatabase.h",
  "h",
  true, // Text file
  1108, // Text length
  gWrapperFileContent_11_objective_5F_c_5F_sources
) ;

//--- File '/PMEmbeddedObjectDatabase.m'

static const char * gWrapperFileContent_12_objective_5F_c_5F_sources = "//\n"
  "//  PMEmbeddedObjectDatabase.m\n"
  "//  canari\n"
  "//\n"
  "//  Created by Pierre Molinaro on 09/11/07.\n"
  "//  Copyright 2007 __MyCompanyName__. All rights reserved.\n"
  "//\n"
  "\n"
  "#import \"PMEmbeddedObjectDatabase.h\"\n"
  "#import \"PMEmbeddedEntityDatabase.h\"\n"
  "#import \"PMMutableDataWriteCategory.h\"\n"
  "#import \"PMManagedObject.h\"\n"
  "#import \"PMAllocationDebug.h\"\n"
  "\n"
  "//#define EASY_BINDINGS_DEBUG\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "\n"
  "@implementation PMEmbeddedObjectDatabase\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (id) init {\n"
  "  self = [super init] ;\n"
  "  if (self) {\n"
  "    macroNoteObjectAllocation (self) ;\n"
  "  //--- Enter super entity \n"
  "    mDictionary = [NSMutableDictionary new] ;\n"
  "    mObjectArray = [NSMutableArray new] ;\n"
  "  }\n"
  "  return self ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//                                                                           *\n"
  "//                           dealloc                             *\n"
  "//                                                                           *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  - (void) dealloc {\n"
  "    macroNoteObjectDeallocation (self) ;\n"
  "  }\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) enterObject: (NSManagedObject *) inObject\n"
  "         withEmbeddedEntityDatabase: (PMEmbeddedEntityDatabase *) ioEmbeddedEntityDatabase {\n"
  "  NSValue * key = [NSValue valueWithNonretainedObject:inObject] ;\n"
  "  NSNumber * indexNumber = [mDictionary objectForKey:key] ;\n"
  "  if (indexNumber == nil) {\n"
  "  //--- First enter object entity in entity database\n"
  "    [ioEmbeddedEntityDatabase enterEntity:[inObject entity]] ;\n"
  "  //--- Enter object\n"
  "    const NSUInteger objectIndex = [mDictionary count] ;\n"
  "    indexNumber = [NSNumber numberWithUnsignedInteger:objectIndex] ;\n"
  "    [mDictionary setObject:indexNumber forKey:key] ;\n"
  "    [mObjectArray addObject:inObject] ;\n"
  "  //--- Enumerate relationships\n"
  "    NSDictionary * relationshipsByName = [[inObject entity] relationshipsByName] ;\n"
  "    NSArray * relationshipNames = [relationshipsByName allKeys] ;\n"
  "    for (NSString * relationshipName in relationshipNames) {\n"
  "      id value = [inObject valueForKey:relationshipName] ;\n"
  "      if (value != nil) {\n"
  "        NSRelationshipDescription * rsd = [relationshipsByName objectForKey:relationshipName] ;\n"
  "        if ([rsd isToMany]) {\n"
  "          for (NSManagedObject * object in value) {\n"
  "            [self\n"
  "              enterObject:object\n"
  "              withEmbeddedEntityDatabase:ioEmbeddedEntityDatabase\n"
  "            ] ;\n"
  "          }\n"
  "        }else{\n"
  "          [self\n"
  "            enterObject:value\n"
  "            withEmbeddedEntityDatabase:ioEmbeddedEntityDatabase\n"
  "          ] ;\n"
  "        }\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (NSUInteger) indexOfObject: (NSManagedObject *) inObject {\n"
  "  NSValue * key = [NSValue valueWithNonretainedObject:inObject] ;\n"
  "  NSNumber * indexNumber = [mDictionary objectForKey:key] ;\n"
  "  if (indexNumber == nil) {\n"
  "    NSLog (@\"ERROR: UNKNOWN object '%p'\", inObject) ;\n"
  "  }\n"
  "  return [indexNumber unsignedIntegerValue] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) saveObjectsToData: (NSMutableData *) ioData\n"
  "         trace: (NSMutableString *) ioTrace\n"
  "         withEmbeddedEntityDatabase: (PMEmbeddedEntityDatabase *) inEmbeddedEntityDatabase {\n"
  "//--- Write object count\n"
  "  [ioData writeByte:0x02 trace:ioTrace] ;\n"
  "  [ioTrace appendString:@\"Start of data mark\\n\"] ;\n"
  "  [ioData writeAutosizedUnsigned:[mObjectArray count] trace:ioTrace] ;\n"
  "  [ioTrace appendFormat:@\"Data Count: %lu\\n\", [mObjectArray count]] ;\n"
  "//--- Sort objects\n"
  "  [mObjectArray sortUsingSelector:@selector (compareByCreationField:)] ;\n"
  "//--- Write creation field and rebuild object dictionary\n"
  "  mDictionary = [NSMutableDictionary new] ;  // Key : NSValue of NSManagedObject, object : index (NSNumber)\n"
  "  NSUInteger creationFieldValue = 0 ;\n"
  "  for (PMManagedObject * object in mObjectArray) {\n"
  "    object.mObjectIndex = creationFieldValue ;\n"
  "    [mDictionary\n"
  "      setObject:[NSNumber numberWithUnsignedInteger:creationFieldValue]\n"
  "      forKey:[NSValue valueWithNonretainedObject:object]\n"
  "    ] ;\n"
  "    creationFieldValue ++ ;\n"
  "  }\n"
  "//-------------------------- Write objects attributes\n"
  "  NSUInteger idx = 0 ;\n"
  "  for (NSManagedObject * object in mObjectArray) {\n"
  "  //--- Get entity index\n"
  "    NSEntityDescription * coreDataEntity = [object entity] ;\n"
  "    const NSUInteger entityIndex = [inEmbeddedEntityDatabase\n"
  "      indexOfCoreDataEntity:coreDataEntity\n"
  "    ] ;\n"
  "  //--- Write 'Object Attributes Definition' Mark\n"
  "    [ioData writeByte:0x03 trace:ioTrace] ;\n"
  "    [ioTrace appendFormat:@\"Start of #%lu object attributes mark\\n\", idx] ;\n"
  "  //--- Write Entity Index\n"
  "    [ioData writeAutosizedUnsigned:entityIndex trace:ioTrace] ;\n"
  "    [ioTrace appendFormat:@\"Entity Index: %lu -> '%@'\\n\", entityIndex, [coreDataEntity name]] ;\n"
  "  //--- Save object attributes\n"
  "    NSDictionary * attributesByName = [coreDataEntity attributesByName] ;\n"
  "    NSArray * sortedAttributeNames = [[attributesByName allKeys] sortedArrayUsingSelector:@selector (compare:)] ;\n"
  "    for (NSString * attributeName in sortedAttributeNames) {\n"
  "      NSAttributeDescription * attributeDescription = [attributesByName objectForKey:attributeName] ;\n"
  "      if (! [attributeDescription isTransient]) {\n"
  "        id value = [object valueForKey:attributeName] ;\n"
  "        NSAttributeType attributeType = [attributeDescription attributeType] ;\n"
  "        switch (attributeType) {\n"
  "        case NSInteger16AttributeType:\n"
  "          [ioData writePrefixedSigned:value trace:ioTrace] ;\n"
  "          [ioTrace appendFormat:@\"NSInteger16AttributeType: '%@'\\n\", value] ;\n"
  "          break ;\n"
  "        case NSInteger32AttributeType:\n"
  "          [ioData writePrefixedSigned:value trace:ioTrace] ;\n"
  "          [ioTrace appendFormat:@\"NSInteger32AttributeType: '%@'\\n\", value] ;\n"
  "          break ;\n"
  "        case NSInteger64AttributeType:\n"
  "          [ioData writePrefixedSigned:value trace:ioTrace] ;\n"
  "          [ioTrace appendFormat:@\"NSInteger64AttributeType: '%@'\\n\", value] ;\n"
  "          break ;\n"
  "        case NSDecimalAttributeType:\n"
  "          [ioData writePrefixedDecimal:value trace:ioTrace] ;\n"
  "          [ioTrace appendFormat:@\"NSDecimalAttributeType: '%@'\\n\", value] ;\n"
  "          break ;\n"
  "        case NSDoubleAttributeType:\n"
  "          [ioData writePrefixedDouble:value trace:ioTrace] ;\n"
  "          [ioTrace appendFormat:@\"NSDoubleAttributeType: '%@'\\n\", value] ;\n"
  "          break ;\n"
  "        case NSFloatAttributeType:\n"
  "          [ioData writePrefixedFloat:value trace:ioTrace] ;\n"
  "          [ioTrace appendFormat:@\"NSFloatAttributeType: '%@'\\n\", value] ;\n"
  "          break ;\n"
  "        case NSStringAttributeType:\n"
  "          [ioData writePrefixedString:value trace:ioTrace] ;\n"
  "          [ioTrace appendFormat:@\"NSStringAttributeType: '%@'\\n\", value] ;\n"
  "          break ;\n"
  "        case NSBooleanAttributeType:\n"
  "          [ioData writePrefixedBool:value trace:ioTrace] ;\n"
  "          [ioTrace appendFormat:@\"NSBooleanAttributeType: '%@'\\n\", value] ;\n"
  "          break ;\n"
  "        case NSDateAttributeType:\n"
  "          [ioData writePrefixedDate:value trace:ioTrace] ;\n"
  "          [ioTrace appendFormat:@\"NSDateAttributeType: '%@'\\n\", value] ;\n"
  "          break ;\n"
  "        case NSBinaryDataAttributeType:\n"
  "          [ioData writePrefixedBinaryData:value trace:ioTrace] ;\n"
  "          [ioTrace appendFormat:@\"NSBinaryDataAttributeType: %lu bytes\\n\", [value length]] ;\n"
  "          break ;\n"
  "        default: NSLog (@\"Error: unknown attribute type (%lld)\", (SInt64) attributeType) ; break ;\n"
  "        }\n"
  "      }\n"
  "    }\n"
  "    [ioData writeByte:0x00 trace:ioTrace] ; // End of Object Definition Mark\n"
  "    [ioTrace appendFormat:@\"End of #%lu object attributes mark\\n\", idx] ;\n"
  "    idx ++ ;\n"
  "  }\n"
  "//------------------------------------- Save relationships\n"
  "  idx = 0 ;\n"
  "  for (NSManagedObject * object in mObjectArray) {\n"
  "   //--- Write 'Object Relationship Definition' Mark\n"
  "    [ioData writeByte:0x04 trace:ioTrace] ;\n"
  "    [ioTrace appendFormat:@\"Start of #%lu object relationships mark\\n\", idx] ;\n"
  "  //--- Get entity index\n"
  "    NSEntityDescription * coreDataEntity = [object entity] ;\n"
  "    const NSUInteger entityIndex = [inEmbeddedEntityDatabase\n"
  "      indexOfCoreDataEntity:coreDataEntity\n"
  "    ] ;\n"
  "  //--- Write Entity Index\n"
  "    [ioData writeAutosizedUnsigned:entityIndex trace:ioTrace] ;\n"
  "    [ioTrace appendFormat:@\"Entity Index:%lu -> '%@'\\n\", entityIndex, [coreDataEntity name]] ;\n"
  "  //--- Save object relationships\n"
  "    NSDictionary * relationshipsByName = [coreDataEntity relationshipsByName] ;\n"
  "    NSArray * sortedRelationshipNames = [[relationshipsByName allKeys] sortedArrayUsingSelector:@selector (compare:)] ;\n"
  "    for (NSString * relationshipName in sortedRelationshipNames) {\n"
  "      NSRelationshipDescription * rsd = [relationshipsByName objectForKey:relationshipName] ;\n"
  "      if (! [rsd isTransient]) {\n"
  "        id value = [object valueForKey:relationshipName] ;\n"
  "        if ([rsd isToMany]) {\n"
  "          NSSet * valueSet = value ;\n"
  "          if ([valueSet count] == 0) {\n"
  "            [ioData writeByte:0xFF trace:ioTrace code:'Z'] ;\n"
  "            [ioTrace appendFormat:@\"To-many '%@' relationship is nil\\n\", relationshipName] ;\n"
  "          }else{\n"
  "            [ioData writeByte:0x02 trace:ioTrace code:'M'] ;\n"
  "            [ioTrace appendFormat:@\"To-many '%@' relationship has objects\\n\", relationshipName] ;\n"
  "            [ioData writeAutosizedUnsigned:[valueSet count] trace:ioTrace] ;\n"
  "            [ioTrace appendFormat:@\"%lu objects\\n\", [valueSet count]] ;\n"
  "            NSArray * sortedObjectArray = [[valueSet allObjects] sortedArrayUsingSelector:@selector (compareByCreationField:)] ;\n"
  "            NSUInteger objectIdx = 0 ;\n"
  "            for (NSManagedObject * destinationObject in sortedObjectArray) {\n"
  "              const NSUInteger destinationObjectIndex = [self indexOfObject:destinationObject] ;\n"
  "              [ioData writeAutosizedUnsigned:destinationObjectIndex trace:ioTrace] ;\n"
  "              [ioTrace appendFormat:@\"%lu: object has index %lu\\n\", objectIdx, destinationObjectIndex] ;\n"
  "              objectIdx ++ ;\n"
  "            }\n"
  "          }\n"
  "        }else if (value == nil) { // To-one relationship is nil\n"
  "          [ioData writeByte:0xFF trace:ioTrace code:'Z'] ;\n"
  "          [ioTrace appendFormat:@\"To-one '%@' relationship is nil\\n\", relationshipName] ;\n"
  "        }else{\n"
  "          [ioData writeByte:0x01 trace:ioTrace code:'Z'] ;\n"
  "          [ioTrace appendFormat:@\"To-one '%@' relationship has object\\n\", relationshipName] ;\n"
  "          const NSUInteger destinationObjectIndex = [self indexOfObject:value] ;\n"
  "          [ioData writeAutosizedUnsigned:destinationObjectIndex trace:ioTrace] ;\n"
  "          [ioTrace appendFormat:@\"object hasindex %lu\\n\", destinationObjectIndex] ;\n"
  "        }\n"
  "      }\n"
  "    }\n"
  "    [ioData writeByte:0x00 trace:ioTrace] ; // End of Object Definition Mark\n"
  "    [ioTrace appendFormat:@\"End of #%lu object relationships mark\\n\", idx] ;\n"
  "    idx ++ ;\n"
  "  }\n"
  "  [ioData writeByte:0x05 trace:ioTrace] ; // 'End of file' mark\n"
  "  [ioTrace appendString:@\"End of file mark\\n\"] ;\n"
  "}\n"
  "\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@end\n" ;

static const cRegularFileWrapper gWrapperFile_12_objective_5F_c_5F_sources (
  "PMEmbeddedObjectDatabase.m",
  "m",
  true, // Text file
  11212, // Text length
  gWrapperFileContent_12_objective_5F_c_5F_sources
) ;

//--- File '/PMLoadedEntityDatabase.h'

static const char * gWrapperFileContent_13_objective_5F_c_5F_sources = "//\n"
  "//  PMLoadedEntityDatabase.h\n"
  "//  canari\n"
  "//\n"
  "//  Created by Pierre Molinaro on 09/11/07.\n"
  "//  Copyright 2007 __MyCompanyName__. All rights reserved.\n"
  "//\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#import <Cocoa/Cocoa.h>\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@class PMDataScanner ;\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@interface PMLoadedEntityDatabase : NSObject {\n"
  "  @private NSMutableArray * mLoadedEntityArray ; // Object PMLoadedEntityDescription\n"
  "}\n"
  "\n"
  "- (id) initWithDataScanner: (PMDataScanner *) inDataScanner\n"
  "       trace: (NSMutableString *) ioTrace\n"
  "       entityDictionary: (NSDictionary *) inEntityDictionary ;\n"
  "\n"
  "- (NSArray *) sortedAttributeNamesForEntityOfIndex: (NSUInteger) inEntityIndex ;\n"
  "\n"
  "- (NSArray *) sortedRelationshipNamesForEntityOfIndex: (NSUInteger) inEntityIndex ;\n"
  "\n"
  "- (NSString *) entityNameForIndex: (NSUInteger) inEntityIndex ;\n"
  "\n"
  "- (NSEntityDescription *) entityForIndex: (NSUInteger) inEntityIndex ;\n"
  "@end\n"
  "\n"
  "//---------------------------------------------------------------------------*\n" ;

static const cRegularFileWrapper gWrapperFile_13_objective_5F_c_5F_sources (
  "PMLoadedEntityDatabase.h",
  "h",
  true, // Text file
  1130, // Text length
  gWrapperFileContent_13_objective_5F_c_5F_sources
) ;

//--- File '/PMLoadedEntityDatabase.m'

static const char * gWrapperFileContent_14_objective_5F_c_5F_sources = "//\n"
  "//  PMLoadedEntityDatabase.m\n"
  "//  canari\n"
  "//\n"
  "//  Created by Pierre Molinaro on 09/11/07.\n"
  "//  Copyright 2007 __MyCompanyName__. All rights reserved.\n"
  "//\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#import \"PMLoadedEntityDatabase.h\"\n"
  "#import \"PMDataScanner.h\"\n"
  "#import \"PMLoadedEntityDescription.h\"\n"
  "#import \"easy-bindings-utilities.h\"\n"
  "#import \"PMAllocationDebug.h\"\n"
  "\n"
  "#define EASY_BINDINGS_DEBUG\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@implementation PMLoadedEntityDatabase\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (BOOL) checkEntity: (NSEntityDescription *) inEntity\n"
  "         trace: (NSMutableString *) ioTrace\n"
  "         hasAttributeNamed: (NSString *) inAttributeName\n"
  "         ofType: (NSAttributeType) inAttributeType {\n"
  "  NSAttributeDescription * ad = [[inEntity attributesByName] objectForKey:inAttributeName] ;\n"
  "  BOOL ok = ad != nil ;\n"
  "  if (ok) {\n"
  "    const NSAttributeType attributeType = [ad attributeType] ;\n"
  "    if (attributeType != inAttributeType) {\n"
  "      ok = NO ;\n"
  "      [ioTrace appendFormat:@\"For '%@' attribute of '%@' entity, attribute type %lld (read %lld)\\n\",\n"
  "             inAttributeName, [inEntity name], (SInt64) attributeType, (SInt64) inAttributeType] ;\n"
  "    }\n"
  "  }\n"
  "  return ok ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (BOOL) checkEntity: (NSEntityDescription *) inEntity\n"
  "         trace: (NSMutableString *) ioTrace\n"
  "         hasRelationshipNamed: (NSString *) inRelationshipName\n"
  "         toMany: (BOOL) inIsToMany {\n"
  "  NSRelationshipDescription * rd = [[inEntity relationshipsByName] objectForKey:inRelationshipName] ;\n"
  "  BOOL ok = rd != nil ;\n"
  "  if (ok) {\n"
  "    const BOOL isToMany = [rd isToMany] ;\n"
  "    if (isToMany != inIsToMany) {\n"
  "      ok = NO ;\n"
  "      [ioTrace appendFormat:@\"For '%@' relationship of '%@' entity, to-many flag %d (read %d)\\n\",\n"
  "             inRelationshipName, [inEntity name], isToMany, inIsToMany] ;\n"
  "    }\n"
  "  }\n"
  "  return ok ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (id) initWithDataScanner: (PMDataScanner *) inDataScanner\n"
  "       trace: (NSMutableString *) ioTrace\n"
  "       entityDictionary: (NSDictionary *) inEntityDictionary {\n"
  "  self = [super init] ;\n"
  "  if (self) {\n"
  "    macroNoteObjectAllocation (self) ;\n"
  "  //--- Entity name substitution\n"
  "    NSDictionary * entityNameSubstitution = [NSDictionary dictionaryWithObjectsAndKeys:\n"
  "//      @\"PinPadDeviceInProjectEntity\", @\"PinInProjectEntity\",\n"
  "      nil\n"
  "    ] ;\n"
  "  //---\n"
  "    mLoadedEntityArray = [NSMutableArray new] ;\n"
  "  //--- Get entity count \n"
  "    const NSUInteger entityCount = [inDataScanner parseAutosizedUnsignedInteger] ;\n"
  "    for (NSUInteger i=0 ; (i<entityCount)&& [inDataScanner ok] ; i++) {\n"
  "    //--- 'Start of Entity' mark\n"
  "      [inDataScanner acceptRequiredByte:0xBA] ;\n"
  "    //--- Entity Name\n"
  "      NSString * entityName = [inDataScanner parseAutosizedString] ;\n"
  "      NSEntityDescription * coreDataEntity = [inEntityDictionary\n"
  "        objectForKey:entityName\n"
  "      ] ;\n"
  "      if (nil == coreDataEntity) {\n"
  "        NSString * substitutionName = [entityNameSubstitution objectForKey:entityName] ;\n"
  "        if (nil == substitutionName) {\n"
  "          NSLog (@\"Cannot find entity named '%@', no substitution found\", entityName) ;\n"
  "        }else{\n"
  "          coreDataEntity = [inEntityDictionary objectForKey:substitutionName] ;\n"
  "          if (nil == coreDataEntity) {\n"
  "            NSLog (@\"Cannot find entity named '%@', substitution '%@' invalid\", entityName, substitutionName) ;\n"
  "          }else{\n"
  "            NSLog (@\"Cannot find entity named '%@', substitution '%@' ok\", entityName, substitutionName) ;\n"
  "          }\n"
  "        }\n"
  "      }\n"
  "      [ioTrace appendFormat:@\"Load entity #%lu, '%@'\\n\", i, entityName] ;\n"
  "    //--- Super entity \?\n"
  "      PMLoadedEntityDescription * loadedSuperEntity = nil ;\n"
  "      if ([inDataScanner testAcceptByte:0xFE]) { // Has a super entity\n"
  "        const NSUInteger superEntityIndex = [inDataScanner parseAutosizedUnsignedInteger] ;\n"
  "        loadedSuperEntity = [mLoadedEntityArray objectAtIndex:superEntityIndex HERE OFCLASS (PMLoadedEntityDescription)] ;\n"
  "        [ioTrace appendFormat:@\"  Super entity #%lu\\n\", superEntityIndex] ;\n"
  "      }else{ // No super entity\n"
  "        [inDataScanner acceptRequiredByte:0xFF] ;\n"
  "      }\n"
  "    //--- Parse attributes and relationship definitions\n"
  "      NSMutableArray * entityAttributeArray = [NSMutableArray new] ;\n"
  "      NSMutableArray * entityRelationshipArray = [NSMutableArray new] ;\n"
  "      BOOL loop = YES ;\n"
  "      while (loop && [inDataScanner ok]) {\n"
  "        if ([inDataScanner testAcceptByte:0x01]) { // NSInteger16AttributeType\n"
  "          NSString * attributeName = [inDataScanner parseAutosizedString] ;\n"
  "          const BOOL ok =\n"
  "            [self checkEntity:coreDataEntity trace:ioTrace hasAttributeNamed:attributeName ofType:NSInteger64AttributeType]\n"
  "          ||\n"
  "            [self checkEntity:coreDataEntity trace:ioTrace hasAttributeNamed:attributeName ofType:NSInteger32AttributeType]\n"
  "          ||\n"
  "            [self checkEntity:coreDataEntity trace:ioTrace hasAttributeNamed:attributeName ofType:NSInteger16AttributeType]\n"
  "          ;\n"
  "          [entityAttributeArray addObject:ok \? attributeName : @\"\"] ;\n"
  "          [ioTrace appendFormat:@\"  NSInteger16AttributeType, '%@'\\n\", attributeName] ;\n"
  "        }else if ([inDataScanner testAcceptByte:0x02]) { // NSInteger32AttributeType\n"
  "          NSString * attributeName = [inDataScanner parseAutosizedString] ;\n"
  "          const BOOL ok =\n"
  "            [self checkEntity:coreDataEntity trace:ioTrace hasAttributeNamed:attributeName ofType:NSInteger64AttributeType]\n"
  "          ||\n"
  "            [self checkEntity:coreDataEntity trace:ioTrace hasAttributeNamed:attributeName ofType:NSInteger32AttributeType]\n"
  "          ||\n"
  "            [self checkEntity:coreDataEntity trace:ioTrace hasAttributeNamed:attributeName ofType:NSInteger16AttributeType]\n"
  "          ;\n"
  "          [entityAttributeArray addObject:ok \? attributeName : @\"\"] ;\n"
  "          [ioTrace appendFormat:@\"  NSInteger32AttributeType, '%@'\\n\", attributeName] ;\n"
  "        }else if ([inDataScanner testAcceptByte:0x03]) { // NSInteger64AttributeType\n"
  "          NSString * attributeName = [inDataScanner parseAutosizedString] ;\n"
  "          const BOOL ok =\n"
  "            [self checkEntity:coreDataEntity trace:ioTrace hasAttributeNamed:attributeName ofType:NSInteger64AttributeType]\n"
  "          ||\n"
  "            [self checkEntity:coreDataEntity trace:ioTrace hasAttributeNamed:attributeName ofType:NSInteger32AttributeType]\n"
  "          ||\n"
  "            [self checkEntity:coreDataEntity trace:ioTrace hasAttributeNamed:attributeName ofType:NSInteger16AttributeType]\n"
  "          ;\n"
  "          [entityAttributeArray addObject:ok \? attributeName : @\"\"] ;\n"
  "          [ioTrace appendFormat:@\"  NSInteger64AttributeType, '%@'\\n\",attributeName] ;\n"
  "        }else if ([inDataScanner testAcceptByte:0x04]) { // NSDecimalAttributeType\n"
  "          NSString * attributeName = [inDataScanner parseAutosizedString] ;\n"
  "          const BOOL ok = [self checkEntity:coreDataEntity trace:ioTrace hasAttributeNamed:attributeName ofType:NSDecimalAttributeType] ;\n"
  "          [entityAttributeArray addObject:ok \? attributeName : @\"\"] ;\n"
  "          [ioTrace appendFormat:@\"  NSDecimalAttributeType, '%@'\\n\", attributeName] ;\n"
  "         }else if ([inDataScanner testAcceptByte:0x05]) { // NSDoubleAttributeType\n"
  "          NSString * attributeName = [inDataScanner parseAutosizedString] ;\n"
  "          const BOOL ok = [self checkEntity:coreDataEntity trace:ioTrace hasAttributeNamed:attributeName ofType:NSDoubleAttributeType] ;\n"
  "          [entityAttributeArray addObject:ok \? attributeName : @\"\"] ;\n"
  "          [ioTrace appendFormat:@\"  NSDoubleAttributeType, '%@'\\n\", attributeName] ;\n"
  "        }else if ([inDataScanner testAcceptByte:0x06]) { // NSFloatAttributeType or NSDoubleAttributeType\n"
  "          NSString * attributeName = [inDataScanner parseAutosizedString] ;\n"
  "          const BOOL ok =\n"
  "            [self checkEntity:coreDataEntity trace:ioTrace hasAttributeNamed:attributeName ofType:NSFloatAttributeType]\n"
  "          ||\n"
  "            [self checkEntity:coreDataEntity trace:ioTrace hasAttributeNamed:attributeName ofType:NSDoubleAttributeType]\n"
  "          ;\n"
  "          [entityAttributeArray addObject:ok \? attributeName : @\"\"] ;\n"
  "          [ioTrace appendFormat:@\"  NSFloatAttributeType, '%@'\\n\", attributeName] ;\n"
  "        }else if ([inDataScanner testAcceptByte:0x07]) { // NSStringAttributeType\n"
  "          NSString * attributeName = [inDataScanner parseAutosizedString] ;\n"
  "          const BOOL ok = [self checkEntity:coreDataEntity trace:ioTrace hasAttributeNamed:attributeName ofType:NSStringAttributeType] ;\n"
  "          [entityAttributeArray addObject:ok \? attributeName : @\"\"] ;\n"
  "          [ioTrace appendFormat:@\"  NSStringAttributeType, '%@'\\n\", attributeName] ;\n"
  "        }else if ([inDataScanner testAcceptByte:0x08]) { // NSBooleanAttributeType\n"
  "          NSString * attributeName = [inDataScanner parseAutosizedString] ;\n"
  "          const BOOL ok = [self checkEntity:coreDataEntity trace:ioTrace hasAttributeNamed:attributeName ofType:NSBooleanAttributeType] ;\n"
  "          [entityAttributeArray addObject:ok \? attributeName : @\"\"] ;\n"
  "          [ioTrace appendFormat:@\"  NSBooleanAttributeType, '%@'\\n\", attributeName] ;\n"
  "        }else if ([inDataScanner testAcceptByte:0x09]) { // NSDateAttributeType\n"
  "          NSString * attributeName = [inDataScanner parseAutosizedString] ;\n"
  "          const BOOL ok = [self checkEntity:coreDataEntity trace:ioTrace hasAttributeNamed:attributeName ofType:NSDateAttributeType] ;\n"
  "          [entityAttributeArray addObject:ok \? attributeName : @\"\"] ;\n"
  "          [ioTrace appendFormat:@\"  NSDateAttributeType, '%@'\\n\", attributeName] ;\n"
  "        }else if ([inDataScanner testAcceptByte:0x0A]) { // NSBinaryDataAttributeType\n"
  "          NSString * attributeName = [inDataScanner parseAutosizedString] ;\n"
  "          const BOOL ok = [self checkEntity:coreDataEntity trace:ioTrace hasAttributeNamed:attributeName ofType:NSBinaryDataAttributeType] ;\n"
  "          [entityAttributeArray addObject:ok \? attributeName : @\"\"] ;\n"
  "          [ioTrace appendFormat:@\"  NSBinaryDataAttributeType, '%@'\\n\", attributeName] ;\n"
  "        }else if ([inDataScanner testAcceptByte:0x0B]) { // To-one relationship\n"
  "          /* const NSUInteger relationshipEntityIndex = */ [inDataScanner parseAutosizedUnsignedInteger] ;\n"
  "          NSString * relationshipName = [inDataScanner parseAutosizedString] ;\n"
  "          const BOOL ok = [self checkEntity:coreDataEntity trace:ioTrace hasRelationshipNamed:relationshipName toMany:NO] ;\n"
  "          [entityRelationshipArray addObject:ok \? relationshipName : @\"\"] ;\n"
  "          [ioTrace appendFormat:@\"  To-one relationship with '%@'\\n\", relationshipName] ;\n"
  "        }else if ([inDataScanner testAcceptByte:0x0C]) { // To-many relationship\n"
  "          /* const NSUInteger relationshipEntityIndex = */ [inDataScanner parseAutosizedUnsignedInteger] ;\n"
  "          NSString * relationshipName = [inDataScanner parseAutosizedString] ;\n"
  "          const BOOL ok = [self checkEntity:coreDataEntity trace:ioTrace hasRelationshipNamed:relationshipName toMany:YES] ;\n"
  "          [entityRelationshipArray addObject:ok \? relationshipName : @\"\"] ;\n"
  "          [ioTrace appendFormat:@\"  To-many relationship '%@'\\n\", relationshipName] ;\n"
  "        }else{\n"
  "          [entityAttributeArray addObject:@\"\"] ;\n"
  "          [entityRelationshipArray addObject:@\"\"] ;\n"
  "          [inDataScanner acceptRequiredByte:0x00] ;\n"
  "          loop = NO ;\n"
  "        }\n"
  "      }\n"
  "    //--- Enter new description\n"
  "      PMLoadedEntityDescription * newLoadedEntity = [[PMLoadedEntityDescription alloc]\n"
  "        initWithCoreDataEntity:coreDataEntity\n"
  "        withLoadedSuperEntity:loadedSuperEntity\n"
  "        withLoadedAttributes:entityAttributeArray\n"
  "        withLoadedRelationships:entityRelationshipArray\n"
  "      ] ;\n"
  "      [mLoadedEntityArray addObject:newLoadedEntity] ;\n"
  "    }\n"
  "  }\n"
  "  return self ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//                                                                           *\n"
  "//                           dealloc                             *\n"
  "//                                                                           *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  - (void) dealloc {\n"
  "    macroNoteObjectDeallocation (self) ;\n"
  "    \n"
  "  }\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (NSString *) entityNameForIndex: (NSUInteger) inEntityIndex {\n"
  "  PMLoadedEntityDescription * led = [mLoadedEntityArray objectAtIndex:inEntityIndex HERE OFCLASS (PMLoadedEntityDescription)] ;\n"
  "  return [[led coreDataEntity] name] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (NSEntityDescription *) entityForIndex: (NSUInteger) inEntityIndex {\n"
  "  PMLoadedEntityDescription * led = [mLoadedEntityArray objectAtIndex:inEntityIndex HERE OFCLASS (PMLoadedEntityDescription)] ;\n"
  "  return [led coreDataEntity] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (NSArray *) sortedAttributeNamesForEntityOfIndex: (NSUInteger) inEntityIndex {\n"
  "  PMLoadedEntityDescription * led = [mLoadedEntityArray objectAtIndex:inEntityIndex HERE OFCLASS (PMLoadedEntityDescription)] ;\n"
  "  return [led sortedAttributeNames] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (NSArray *) sortedRelationshipNamesForEntityOfIndex: (NSUInteger) inEntityIndex {\n"
  "  PMLoadedEntityDescription * led = [mLoadedEntityArray objectAtIndex:inEntityIndex HERE OFCLASS (PMLoadedEntityDescription)] ;\n"
  "  return [led sortedRelationshipNames] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@end\n" ;

static const cRegularFileWrapper gWrapperFile_14_objective_5F_c_5F_sources (
  "PMLoadedEntityDatabase.m",
  "m",
  true, // Text file
  13783, // Text length
  gWrapperFileContent_14_objective_5F_c_5F_sources
) ;

//--- File '/PMLoadedEntityDescription.h'

static const char * gWrapperFileContent_15_objective_5F_c_5F_sources = "//\n"
  "//  PMLoadedEntityDescription.h\n"
  "//  canari\n"
  "//\n"
  "//  Created by Pierre Molinaro on 09/11/07.\n"
  "//  Copyright 2007 __MyCompanyName__. All rights reserved.\n"
  "//\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#import <Cocoa/Cocoa.h>\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@class PMEmbeddedEntityDatabase ;\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@interface PMLoadedEntityDescription : NSObject {\n"
  "  @private NSEntityDescription * mCoreDataEntity ;\n"
  "  @private PMLoadedEntityDescription * mLoadedSuperEntity ;\n"
  "  @private NSArray * mEntityAttributeArray ;\n"
  "  @private NSArray * mEntityRelationshipArray ;\n"
  "}\n"
  "\n"
  "- (id) initWithCoreDataEntity: (NSEntityDescription *) inCoreDataEntity\n"
  "       withLoadedSuperEntity: (PMLoadedEntityDescription *) inLoadedSuperEntity\n"
  "       withLoadedAttributes: (NSArray *) inEntityAttributeArray\n"
  "       withLoadedRelationships: (NSArray *) inEntityRelationshipArray ;\n"
  "\n"
  "- (NSEntityDescription *) coreDataEntity ;\n"
  "\n"
  "- (NSArray *) sortedAttributeNames ;\n"
  "\n"
  "- (NSArray *) sortedRelationshipNames ;\n"
  "@end\n"
  "\n"
  "//---------------------------------------------------------------------------*\n" ;

static const cRegularFileWrapper gWrapperFile_15_objective_5F_c_5F_sources (
  "PMLoadedEntityDescription.h",
  "h",
  true, // Text file
  1208, // Text length
  gWrapperFileContent_15_objective_5F_c_5F_sources
) ;

//--- File '/PMLoadedEntityDescription.m'

static const char * gWrapperFileContent_16_objective_5F_c_5F_sources = "//\n"
  "//  PMLoadedEntityDescription.m\n"
  "//  canari\n"
  "//\n"
  "//  Created by Pierre Molinaro on 09/11/07.\n"
  "//  Copyright 2007 __MyCompanyName__. All rights reserved.\n"
  "//\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#import \"PMLoadedEntityDescription.h\"\n"
  "#import \"PMEmbeddedEntityDatabase.h\"\n"
  "#import \"PMAllocationDebug.h\"\n"
  "\n"
  "//#define EASY_BINDINGS_DEBUG\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@implementation PMLoadedEntityDescription\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (id) initWithCoreDataEntity: (NSEntityDescription *) inCoreDataEntity\n"
  "       withLoadedSuperEntity: (PMLoadedEntityDescription *) inLoadedSuperEntity\n"
  "       withLoadedAttributes: (NSArray *) inEntityAttributeArray\n"
  "       withLoadedRelationships: (NSArray *) inEntityRelationshipArray {\n"
  "  self = [super init] ;\n"
  "  if (self) {\n"
  "    macroNoteObjectAllocation (self) ;\n"
  "    mCoreDataEntity = inCoreDataEntity ;\n"
  "    mLoadedSuperEntity = inLoadedSuperEntity ;\n"
  "    mEntityAttributeArray = inEntityAttributeArray ;\n"
  "    mEntityRelationshipArray = inEntityRelationshipArray ;\n"
  "  }\n"
  "  return self ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//                                                                           *\n"
  "//                           dealloc                             *\n"
  "//                                                                           *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  - (void) dealloc {\n"
  "    macroNoteObjectDeallocation (self) ;\n"
  "  }\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (NSEntityDescription *) coreDataEntity {\n"
  "  return mCoreDataEntity ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (NSArray *) sortedAttributeNames {\n"
  "  return mEntityAttributeArray ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (NSArray *) sortedRelationshipNames {\n"
  "  return mEntityRelationshipArray ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@end\n" ;

static const cRegularFileWrapper gWrapperFile_16_objective_5F_c_5F_sources (
  "PMLoadedEntityDescription.m",
  "m",
  true, // Text file
  2193, // Text length
  gWrapperFileContent_16_objective_5F_c_5F_sources
) ;

//--- File '/PMLoadedObjectDatabase.h'

static const char * gWrapperFileContent_17_objective_5F_c_5F_sources = "//\n"
  "//  PMLoadedObjectDatabase.h\n"
  "//  canari\n"
  "//\n"
  "//  Created by Pierre Molinaro on 09/11/07.\n"
  "//  Copyright 2007 __MyCompanyName__. All rights reserved.\n"
  "//\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#import <Cocoa/Cocoa.h>\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@class PMDataScanner ;\n"
  "@class PMLoadedEntityDatabase ;\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@interface PMLoadedObjectDatabase : NSObject {\n"
  "\n"
  "}\n"
  "\n"
  "+ (void) loadWithDataScanner: (PMDataScanner *) inDataScanner\n"
  "         trace: (NSMutableString *) ioTrace\n"
  "         withLoadedDatabase: (PMLoadedEntityDatabase *) inLoadedEntityDatabase\n"
  "         managedObjectContext: (NSManagedObjectContext *) inManagedObjectContext ;\n"
  "\n"
  "@end\n"
  "\n"
  "//---------------------------------------------------------------------------*\n" ;

static const cRegularFileWrapper gWrapperFile_17_objective_5F_c_5F_sources (
  "PMLoadedObjectDatabase.h",
  "h",
  true, // Text file
  878, // Text length
  gWrapperFileContent_17_objective_5F_c_5F_sources
) ;

//--- File '/PMLoadedObjectDatabase.m'

static const char * gWrapperFileContent_18_objective_5F_c_5F_sources = "//\n"
  "//  PMLoadedObjectDatabase.m\n"
  "//  canari\n"
  "//\n"
  "//  Created by Pierre Molinaro on 09/11/07.\n"
  "//  Copyright 2007 __MyCompanyName__. All rights reserved.\n"
  "//\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#import \"PMLoadedObjectDatabase.h\"\n"
  "#import \"PMDataScanner.h\"\n"
  "#import \"PMLoadedEntityDatabase.h\"\n"
  "#import \"PMManagedObject.h\"\n"
  "#import \"PMAllocationDebug.h\"\n"
  "#import \"easy-bindings-utilities.h\"\n"
  "\n"
  "#define EASY_BINDINGS_DEBUG\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@implementation PMLoadedObjectDatabase\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "+ (PMManagedObject *) scanObjectDataScanner: (PMDataScanner *) inDataScanner\n"
  "                      trace: (NSMutableString *) ioTrace\n"
  "                      withLoadedDatabase: (PMLoadedEntityDatabase *) inLoadedEntityDatabase\n"
  "                      managedObjectContext: (NSManagedObjectContext *) inManagedObjectContext {\n"
  "//--- 'start of object attribute' mark\n"
  "  [inDataScanner acceptRequiredByte:0x03] ;\n"
  "//--- Entity index\n"
  "  const NSUInteger entityIndex = [inDataScanner parseAutosizedUnsignedInteger] ;\n"
  "//--- Create new object\n"
  "  NSString * entityName = [inLoadedEntityDatabase entityNameForIndex:entityIndex] ;\n"
  "  PMManagedObject * newObject = [NSEntityDescription\n"
  "    insertNewObjectForEntityForName:entityName\n"
  "    inManagedObjectContext:inManagedObjectContext\n"
  "  ] ;\n"
  "  [ioTrace appendFormat:@\"Object of entity named '%@' (#%lu)\\n\", entityName, entityIndex] ;\n"
  "//--- Entity attribute name list, ordered by name\n"
  "  NSArray * sortedAttributeNames = [inLoadedEntityDatabase sortedAttributeNamesForEntityOfIndex:entityIndex] ;\n"
  "//--- Parse attributes and relationship values\n"
  "  NSUInteger propertyIndex = 0 ;\n"
  "  BOOL loop = YES ;\n"
  "  while (loop && [inDataScanner ok]) {\n"
  "    NSString * key = [sortedAttributeNames objectAtIndex:propertyIndex HERE OFCLASS (NSString)] ;\n"
  "    propertyIndex ++ ;\n"
  "    if ([inDataScanner testAcceptByte:0xFF]) { // nil\n"
  "      if ([key length] > 0) {\n"
  "          [ioTrace appendFormat:@\"  attribute '%@': nil\\n\", key] ;\n"
  "      }\n"
  "    }else if ([inDataScanner testAcceptByte:0xFE]) { // positive signed integer\n"
  "      const UInt64 value = [inDataScanner parseAutosizedUnsignedInteger] ;\n"
  "      if ([key length] > 0) {\n"
  "        [newObject setValue:[NSNumber numberWithUnsignedLongLong:value] forKey:key] ;\n"
  "        [ioTrace appendFormat:@\"  attribute '%@': number %@\\n\", key, [NSNumber numberWithUnsignedLongLong:value]] ;\n"
  "      }\n"
  "    }else if ([inDataScanner testAcceptByte:0xFD]) { // negative signed integer\n"
  "      const SInt64 value = (SInt64) [inDataScanner parseAutosizedUnsignedInteger] ;\n"
  "      if ([key length] > 0) {\n"
  "        [newObject setValue:[NSNumber numberWithLongLong: - value] forKey:key] ;\n"
  "        [ioTrace appendFormat:@\"  attribute '%@': number %@\\n\", key, [NSNumber numberWithLongLong: - value]] ;\n"
  "      }\n"
  "    }else if ([inDataScanner testAcceptByte:0x09]) { // String\n"
  "      NSString * s = [inDataScanner parseAutosizedString] ;\n"
  "      if ([key length] > 0) {\n"
  "        [newObject setValue:s forKey:key] ;\n"
  "        [ioTrace appendFormat:@\"  attribute '%@': string '%@'\\n\", key, s] ;\n"
  "      }\n"
  "    }else if ([inDataScanner testAcceptByte:0x0A]) { // False\n"
  "      if ([key length] > 0) {\n"
  "        [newObject setValue:[NSNumber numberWithBool:NO] forKey:key] ;\n"
  "        [ioTrace appendFormat:@\"  attribute '%@': NO\\n\", key] ;\n"
  "      }\n"
  "    }else if ([inDataScanner testAcceptByte:0x0B]) { // True\n"
  "      if ([key length] > 0) {\n"
  "        [newObject setValue:[NSNumber numberWithBool:YES] forKey:key] ;\n"
  "        [ioTrace appendFormat:@\"  attribute '%@': YES\\n\", key] ;\n"
  "      }\n"
  "    }else if ([inDataScanner testAcceptByte:0x0C]) { // Float\n"
  "      NSNumber * numberString = [NSUnarchiver unarchiveObjectWithData:[inDataScanner parseAutosizedData]] ;\n"
  "      const double value = [numberString doubleValue] ; \n"
  "      if ([key length] > 0) {\n"
  "        [newObject setValue:[NSNumber numberWithDouble:value] forKey:key] ;\n"
  "        [ioTrace appendFormat:@\"  attribute '%@': float -> double %@\\n\", key, [NSNumber numberWithDouble:value]] ;\n"
  "      }\n"
  "    }else if ([inDataScanner testAcceptByte:0x0D]) { // Double\n"
  "      NSNumber * numberString = [NSUnarchiver unarchiveObjectWithData:[inDataScanner parseAutosizedData]] ;\n"
  "      const double value = [numberString doubleValue] ;\n"
  "      if ([key length] > 0) {\n"
  "        [newObject setValue:[NSNumber numberWithDouble:value] forKey:key] ;\n"
  "        [ioTrace appendFormat:@\"  attribute '%@': double %@\\n\", key, [NSNumber numberWithDouble:value]] ;\n"
  "      }\n"
  "    }else if ([inDataScanner testAcceptByte:0x0E]) { // Date\n"
  "      NSDate * date = [NSUnarchiver unarchiveObjectWithData:[inDataScanner parseAutosizedData]] ;\n"
  "      // [ioTrace appendFormat:@\"  Date '%@'\", dateString) ;\n"
  "      if ([key length] > 0) {\n"
  "        [newObject setValue:date forKey:key] ;\n"
  "        [ioTrace appendFormat:@\"  attribute '%@': date '%@'\\n\", key, date] ;\n"
  "      }\n"
  "    }else if ([inDataScanner testAcceptByte:0x0F]) { // Binary Data\n"
  "      NSData * data = [inDataScanner parseAutosizedData] ;\n"
  "      // [ioTrace appendFormat:@\"  Data '%@'\\n\", data) ;\n"
  "      if ([key length] > 0) {\n"
  "        [newObject setValue:data forKey:key] ;\n"
  "        [ioTrace appendFormat:@\"  attribute '%@': data (%lu bytes)\\n\", key, [data length]] ;\n"
  "      }\n"
  "    }else if ([inDataScanner testAcceptByte:0x10]) { // Decimal\n"
  "      NSDecimalNumber * decimalNumber = [NSUnarchiver unarchiveObjectWithData:[inDataScanner parseAutosizedData]] ;\n"
  "      if ([key length] > 0) {\n"
  "        [newObject setValue:decimalNumber forKey:key] ;\n"
  "        [ioTrace appendFormat:@\"  attribute '%@': decimal %@\\n\", key, decimalNumber] ;\n"
  "      }\n"
  "    }else{\n"
  "      [inDataScanner acceptRequiredByte:0x00] ;\n"
  "      loop = NO ;\n"
  "    }\n"
  "  }\n"
  "  return newObject ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "+ (void) scanRelationshipForObject: (NSManagedObject *) inObject\n"
  "         trace: (NSMutableString *) ioTrace\n"
  "         withLoadedObjectArray: (NSArray *) inLoadedObjectArray // Object NSManagedObject\n"
  "         withDataScanner: (PMDataScanner *) inDataScanner\n"
  "         withLoadedDatabase: (PMLoadedEntityDatabase *) inLoadedEntityDatabase {\n"
  "//--- 'start of object relationship' mark\n"
  "  [inDataScanner acceptRequiredByte:0x04] ;\n"
  "//--- Entity Index\n"
  "  const NSUInteger entityIndex = [inDataScanner parseAutosizedUnsignedInteger] ;\n"
  "  [ioTrace appendFormat:@\"Object of entity #%lu\\n\", entityIndex] ;\n"
  "//--- Build attribute array\n"
  "  NSArray * relationshipDescriptionArray = [inLoadedEntityDatabase sortedRelationshipNamesForEntityOfIndex:entityIndex] ;\n"
  "//--- Parse relationship values\n"
  "  NSUInteger relationshipIndex = 0 ;\n"
  "  BOOL loop = YES ;\n"
  "  while (loop && [inDataScanner ok]) {\n"
  "    NSString * key = [relationshipDescriptionArray objectAtIndex:relationshipIndex HERE OFCLASS (NSString)] ;\n"
  "    relationshipIndex ++ ;\n"
  "    if ([inDataScanner testAcceptByte:0xFF]) { // nil\n"
  "      [ioTrace appendFormat:@\"  relationship '%@': nil\\n\", key] ;\n"
  "    }else if ([inDataScanner testAcceptByte:0x01]) { // To-one relationship object\n"
  "      const NSUInteger destinationObjectIndex = [inDataScanner parseAutosizedUnsignedInteger] ;\n"
  "      NSManagedObject * destinationObject = [inLoadedObjectArray objectAtIndex:destinationObjectIndex HERE OFCLASS (NSManagedObject)] ;\n"
  "      if ([key length] > 0) {\n"
  "        [inObject setValue:destinationObject forKey:key] ;\n"
  "        [ioTrace appendFormat:@\"  to-one relationship '%@' : object #%lu\\n\", key, destinationObjectIndex] ;\n"
  "      }\n"
  "    }else if ([inDataScanner testAcceptByte:0x02]) { // To-many relationship object\n"
  "      const NSUInteger objectCount = [inDataScanner parseAutosizedUnsignedInteger] ;\n"
  "      NSMutableSet * destinationSet = [NSMutableSet setWithCapacity:objectCount] ;\n"
  "      for (NSUInteger i=0 ; i<objectCount ; i++) {\n"
  "        const NSUInteger destinationObjectIndex = [inDataScanner parseAutosizedUnsignedInteger] ;\n"
  "        NSManagedObject * destinationObject = [inLoadedObjectArray objectAtIndex:destinationObjectIndex HERE OFCLASS (NSManagedObject)] ;\n"
  "        if (destinationObject == nil) {\n"
  "          [ioTrace appendFormat:@\"destinationObject nil for object #%lu\\n\", destinationObjectIndex] ;\n"
  "        }else{\n"
  "          [destinationSet addObject:destinationObject HERE] ;\n"
  "        }\n"
  "      }\n"
  "      if ([key length] > 0) {\n"
  "        [inObject setValue:destinationSet forKey:key] ;\n"
  "        [ioTrace appendFormat:@\"  to-many relationship '%@' : %lu objects\\n\", key, [destinationSet count]] ;\n"
  "      }\n"
  "    }else{\n"
  "      [inDataScanner acceptRequiredByte:0x00] ;\n"
  "      loop = NO ;\n"
  "    }\n"
  "  }\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "+ (void) loadWithDataScanner: (PMDataScanner *) inDataScanner\n"
  "         trace: (NSMutableString *) ioTrace\n"
  "         withLoadedDatabase: (PMLoadedEntityDatabase *) inLoadedEntityDatabase\n"
  "         managedObjectContext: (NSManagedObjectContext *) inManagedObjectContext {\n"
  "  NSMutableArray * mLoadedObjectArray = [NSMutableArray new] ;\n"
  "//------------------------ 'Object count' mark\n"
  "  [inDataScanner acceptRequiredByte:0x02] ;\n"
  "//------------------------ Get object count \n"
  "  const NSUInteger objectCount = [inDataScanner parseAutosizedUnsignedInteger] ;\n"
  "//------------------------ Parse object attributes\n"
  "  for (NSUInteger i=0 ; (i<objectCount)&& [inDataScanner ok] ; i++) {\n"
  "    NSManagedObject * newObject = [PMLoadedObjectDatabase\n"
  "      scanObjectDataScanner:inDataScanner\n"
  "      trace:ioTrace\n"
  "      withLoadedDatabase:inLoadedEntityDatabase\n"
  "      managedObjectContext:inManagedObjectContext\n"
  "    ] ;\n"
  "    [mLoadedObjectArray addObject:newObject] ;\n"
  "  }\n"
  "//------------------------ Parse object relation\n"
  "  for (NSUInteger i=0 ; (i<objectCount)&& [inDataScanner ok] ; i++) {\n"
  "    NSManagedObject * object = [mLoadedObjectArray objectAtIndex:i HERE OFCLASS (NSManagedObject)] ;\n"
  "    [PMLoadedObjectDatabase\n"
  "      scanRelationshipForObject:object\n"
  "      trace:ioTrace\n"
  "      withLoadedObjectArray:mLoadedObjectArray\n"
  "      withDataScanner:inDataScanner\n"
  "      withLoadedDatabase:inLoadedEntityDatabase\n"
  "    ] ;\n"
  "  }\n"
  "//------------------------ 'End of file' mark\n"
  "  [inDataScanner acceptRequiredByte:0x05] ;\n"
  "//------------------------ Set Order field\n"
  "  NSUInteger order = 0 ;\n"
  "  for (PMManagedObject * object in mLoadedObjectArray) {\n"
  "    object.mObjectIndex = order ;\n"
  "    order ++ ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@end\n" ;

static const cRegularFileWrapper gWrapperFile_18_objective_5F_c_5F_sources (
  "PMLoadedObjectDatabase.m",
  "m",
  true, // Text file
  10380, // Text length
  gWrapperFileContent_18_objective_5F_c_5F_sources
) ;

//--- File '/PMManagedObject.h'

static const char * gWrapperFileContent_19_objective_5F_c_5F_sources = "//\n"
  "//  PMManagedObject.h\n"
  "//  canari\n"
  "//\n"
  "//  Created by Pierre Molinaro on 02/11/07.\n"
  "//  Copyright 2007 __MyCompanyName__. All rights reserved.\n"
  "//\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#import <Cocoa/Cocoa.h>\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@interface PMManagedObject : NSManagedObject {\n"
  "  #ifdef PM_COCOA_DEBUG\n"
  "    @private NSWindow * mExplorerWindow ;\n"
  "    @private NSMutableDictionary * mAttributeViewDictionary ;\n"
  "    @private NSTextField * mChangedPropertyTextField ;\n"
  "  #endif \n"
  "}\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  - (void) showExplorerWindow ;\n"
  "#endif\n"
  "\n"
  "@property NSUInteger mObjectIndex ;\n"
  "\n"
  "@end\n"
  "\n"
  "//---------------------------------------------------------------------------*\n" ;

static const cRegularFileWrapper gWrapperFile_19_objective_5F_c_5F_sources (
  "PMManagedObject.h",
  "h",
  true, // Text file
  757, // Text length
  gWrapperFileContent_19_objective_5F_c_5F_sources
) ;

//--- File '/PMManagedObject.m'

static const char * gWrapperFileContent_20_objective_5F_c_5F_sources = "//\n"
  "//  PMManagedObject.m\n"
  "//\n"
  "//  Created by Pierre Molinaro on 02/11/07.\n"
  "//  Copyright 2007 __MyCompanyName__. All rights reserved.\n"
  "//\n"
  "\n"
  "#import \"PMManagedObject.h\"\n"
  "#import \"PMAllocationDebug.h\"\n"
  "\n"
  "//#define EASY_BINDINGS_DEBUG\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@implementation PMManagedObject\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "@synthesize mObjectIndex ;\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    initWithEntity:insertIntoManagedObjectContext:                          *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (id) initWithEntity:(NSEntityDescription *) inEntity\n"
  "       insertIntoManagedObjectContext:(NSManagedObjectContext *) inManagedObjectContext {\n"
  "  self = [super \n"
  "    initWithEntity:inEntity\n"
  "    insertIntoManagedObjectContext:inManagedObjectContext\n"
  "  ] ;\n"
  "  if (self) {\n"
  "    macroNoteObjectAllocation (self) ;\n"
  "  //--- Add Transient observers\n"
  "  }\n"
  "  return self ;\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    Dealloc                                                                 *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) dealloc {\n"
  "  macroNoteObjectDeallocation (self) ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#pragma mark Explorer Window\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  + (void) appendObject: (PMManagedObject *) inObject\n"
  "           toButton: (NSPopUpButton *) inButton\n"
  "           forContext: (NSManagedObjectContext *) inManagedObjectContext {\n"
  "    const NSUInteger objectIndex = inObject.mObjectIndex ;\n"
  "    NSManagedObjectContext * objectMOC = [inObject managedObjectContext] ;\n"
  "    NSString * outsideString = (objectMOC == inManagedObjectContext) \? @\"\" : @\" [OUTSIDE MOC]\" ;\n"
  "    NSString * stringValue = [NSString stringWithFormat:@\"#%ld (%@)%@ %p\", objectIndex, [[inObject entity] name], outsideString, inObject] ;\n"
  "    [inButton addItemWithTitle:stringValue] ;\n"
  "    NSMenuItem * item = [inButton lastItem] ;\n"
  "    [item setTarget:inObject] ;\n"
  "    [item setAction:@selector (showObjectWindowFromSenderTagAction:)] ;\n"
  "  }\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "- (void) updateChangedProperties {\n"
  "  NSArray * changedProperties = [[self changedValues] allKeys] ;\n"
  "  [mChangedPropertyTextField setEnabled:NO] ;\n"
  "  NSString * title = @\"No changed property\" ;\n"
  "  if ([changedProperties count] == 1) {\n"
  "    title = @\"1 changed property\" ;\n"
  "  }else if ([changedProperties count] > 1) {\n"
  "    title = [NSString stringWithFormat:@\"%lu changed properties\", [changedProperties count]] ;\n"
  "  }\n"
  "  [mChangedPropertyTextField setStringValue:title] ;\n"
  "  [mChangedPropertyTextField setToolTip:[changedProperties componentsJoinedByString:@\" \"]] ;\n"
  "}\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "- (void) didSave {\n"
  "  [super didSave] ;\n"
  "  [self updateChangedProperties] ;\n"
  "}\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "- (void) didTurnIntoFault {\n"
  "  [super didTurnIntoFault] ;\n"
  "  [self clearContextExplorer] ;\n"
  "}\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  - (void) updateDisplayForKey: (NSString *) inKey {\n"
  "    [self updateChangedProperties] ;\n"
  "    NSPropertyDescription * property = [self.entity.propertiesByName valueForKey:inKey] ;\n"
  "    if ([property isKindOfClass:[NSAttributeDescription class]]) {\n"
  "      NSString * stringValue = [[self valueForKey:inKey] description] ;\n"
  "      NSTextField * tf = [mAttributeViewDictionary objectForKey:inKey] ;\n"
  "      [tf setStringValue:(stringValue == nil) \? @\"\" : stringValue] ;\n"
  "      [tf setToolTip:(stringValue == nil) \? @\"\" : stringValue] ;\n"
  "    }else if ([property isKindOfClass:[NSRelationshipDescription class]]) {\n"
  "      NSRelationshipDescription * rsd = (NSRelationshipDescription *) property ;\n"
  "      const BOOL isToMany = [rsd isToMany] ;\n"
  "      if (isToMany) {\n"
  "        NSSet * objectSet = [self valueForKey:inKey] ;\n"
  "        NSString * title ;\n"
  "        if ([objectSet count] == 0) {\n"
  "          title = @\"No Object\" ;\n"
  "        }else if ([objectSet count] == 1) {\n"
  "          title = @\"1 Object\" ;\n"
  "        }else{\n"
  "          title = [NSString stringWithFormat:@\"%lu objects\", [objectSet count]] ;\n"
  "        }\n"
  "        NSPopUpButton * bt = [mAttributeViewDictionary objectForKey:inKey] ;\n"
  "        [bt removeAllItems] ;\n"
  "        [bt addItemWithTitle:title] ;\n"
  "        [bt setEnabled:[objectSet count] > 0] ;\n"
  "        NSEnumerator * enumerator = [objectSet objectEnumerator] ;\n"
  "        PMManagedObject * object ;\n"
  "        while ((object = enumerator.nextObject)) {\n"
  "          [PMManagedObject appendObject:object toButton:bt forContext:self.managedObjectContext] ;\n"
  "        }\n"
  "      }else{\n"
  "        PMManagedObject * object = [self valueForKey:inKey] ;\n"
  "        NSManagedObjectContext * objectMOC = [object managedObjectContext] ;\n"
  "        NSString * outsideString = (objectMOC == self.managedObjectContext) \? @\"\" : @\" [OUTSIDE MOC]\" ;\n"
  "        NSString * stringValue = @\"nil\" ;\n"
  "        if (nil != object) {\n"
  "          const NSUInteger objectIndex = object.mObjectIndex ;\n"
  "          stringValue = [NSString stringWithFormat:@\"#%ld (%@)%@ %p\", objectIndex, object.entity.name, outsideString, object] ;\n"
  "        }\n"
  "        NSButton * bt = [mAttributeViewDictionary objectForKey:inKey] ;\n"
  "        [bt setEnabled:object != nil] ;\n"
  "        [bt setTitle:stringValue] ;\n"
  "        [bt setToolTip:stringValue] ;\n"
  "        [bt setTarget:object] ;\n"
  "        [bt setAction:@selector (showObjectWindowFromSenderTagAction:)] ;\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  static NSRect secondColumn (NSRect inRect) {\n"
  "    NSRect r = inRect ;\n"
  "    r.origin.x += inRect.size.width + 2.0 ;\n"
  "    return r ;\n"
  "  }\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "- (void) createAndPopulateObjectExplorerWindow {\n"
  "//-------------------------------------------------- Create Window\n"
  "  const NSRect r = {{20.0, 20.0}, {10.0, 10.0}} ;\n"
  "  mExplorerWindow = [[NSWindow alloc]\n"
  "    initWithContentRect:r\n"
  "    styleMask:NSTitledWindowMask | NSClosableWindowMask\n"
  "    backing:NSBackingStoreBuffered\n"
  "    defer:YES\n"
  "    screen:nil\n"
  "  ] ;\n"
  "//-------------------------------------------------- Adding properties\n"
  "  mAttributeViewDictionary = [NSMutableDictionary new] ;\n"
  "  NSRect nameRect = {{0.0, 0.0}, {200.0, 22.0}} ;\n"
  "  NSFont * font = [NSFont boldSystemFontOfSize:[NSFont smallSystemFontSize]] ;\n"
  "  NSView * view = [[NSView alloc] initWithFrame:nameRect] ;\n"
  "  for (NSPropertyDescription * property  in self.entity.properties) {\n"
  "    NSString * propertyName = property.name ;\n"
  "    NSTextField * tf = [[NSTextField alloc] initWithFrame:nameRect] ;\n"
  "    [tf setEnabled:NO] ;\n"
  "    [tf setStringValue:propertyName] ;\n"
  "    [tf setFont:font] ;\n"
  "    [view addSubview:tf] ;\n"
  "    if ([property isKindOfClass:[NSAttributeDescription class]]) {\n"
  "      NSTextField * tff = [[NSTextField alloc] initWithFrame:secondColumn (nameRect)] ;\n"
  "      [tff setEnabled:NO] ;\n"
  "      [tff setFont:font] ;\n"
  "      [view addSubview:tff] ;\n"
  "      [mAttributeViewDictionary setObject:tff forKey:propertyName] ;\n"
  "    }else if ([property isKindOfClass:[NSRelationshipDescription class]]) {\n"
  "      NSRelationshipDescription * rsd = (NSRelationshipDescription *) property ;\n"
  "      const BOOL isToMany = [rsd isToMany] ;\n"
  "      if (isToMany) {\n"
  "        NSPopUpButton * bt = [[NSPopUpButton alloc] initWithFrame:secondColumn (nameRect) pullsDown:YES] ;\n"
  "        [bt setFont:font] ;\n"
  "        [view addSubview:bt] ;\n"
  "        [mAttributeViewDictionary setObject:bt forKey:propertyName] ;\n"
  "      }else{\n"
  "        NSButton * bt = [[NSButton alloc] initWithFrame:secondColumn (nameRect)] ;\n"
  "        [bt setFont:font] ;\n"
  "        [view addSubview:bt] ;\n"
  "        [mAttributeViewDictionary setObject:bt forKey:propertyName] ;\n"
  "      }\n"
  "    }\n"
  "    [self updateDisplayForKey:propertyName] ;\n"
  "    nameRect.origin.y += nameRect.size.height ;\n"
  "  }\n"
  "//-------------------------------------------------- Object does not validate for insert \?\n"
  "  NSError * error = nil ;\n"
  "  BOOL validate = [self validateForInsert:& error] ;\n"
  "  NSString * faultMessage = validate \? @\"Validates for insert\" : @\"Does not validate for insert\" ;\n"
  "  NSTextField * tf = [[NSTextField alloc] initWithFrame:nameRect] ;\n"
  "  [tf setEnabled:NO] ;\n"
  "  [tf setStringValue:faultMessage] ;\n"
  "  [tf setFont:font] ;\n"
  "  if (! validate) {\n"
  "    [tf setTextColor:[NSColor redColor]] ;\n"
  "    NSString * errorMessage = [error localizedDescription] ;\n"
  "    NSArray * multipleErrorMessage = [[error userInfo] valueForKey:NSDetailedErrorsKey] ;\n"
  "    for (NSUInteger i=0 ; i<[multipleErrorMessage count] ; i++) {\n"
  "      NSError * err = [multipleErrorMessage objectAtIndex:i] ;\n"
  "      errorMessage = [NSString stringWithFormat:@\"%@\\n%@\", errorMessage, [err localizedDescription]] ;\n"
  "    }\n"
  "    [tf setToolTip:errorMessage] ;\n"
  "  }\n"
  "  [view addSubview:tf] ;\n"
  "//-------------------------------------------------- Object does not validate for delete \?\n"
  "  validate = [self validateForDelete:& error] ;\n"
  "  faultMessage = validate \? @\"Validates for delete\" : @\"Does not validate for delete\" ;\n"
  "  tf = [[NSTextField alloc] initWithFrame:secondColumn (nameRect)] ;\n"
  "  [tf setEnabled:NO] ;\n"
  "  [tf setStringValue:faultMessage] ;\n"
  "  [tf setFont:font] ;\n"
  "  if (! validate) {\n"
  "    [tf setTextColor:[NSColor redColor]] ;\n"
  "    NSString * errorMessage = [error localizedDescription] ;\n"
  "    for (NSError * err in [error.userInfo valueForKey:NSDetailedErrorsKey]) {\n"
  "      errorMessage = [NSString stringWithFormat:@\"%@\\n%@\", errorMessage, err.localizedDescription] ;\n"
  "    }\n"
  "    [tf setToolTip:errorMessage] ;\n"
  "  }\n"
  "  [view addSubview:tf] ;\n"
  "//-------------------------------------------------- Object does not validate for update \?\n"
  "  nameRect.origin.y += nameRect.size.height ;\n"
  "  validate = [self validateForUpdate:& error] ;\n"
  "  faultMessage = validate \? @\"Validates for update\" : @\"Does not validate for update\" ;\n"
  "  tf = [[NSTextField alloc] initWithFrame:nameRect] ;\n"
  "  [tf setEnabled:NO] ;\n"
  "  [tf setStringValue:faultMessage] ;\n"
  "  [tf setFont:font] ;\n"
  "  if (! validate) {\n"
  "    [tf setTextColor:[NSColor redColor]] ;\n"
  "    NSString * errorMessage = [error localizedDescription] ;\n"
  "    NSArray * multipleErrorMessage = [[error userInfo] valueForKey:NSDetailedErrorsKey] ;\n"
  "    for (NSUInteger i=0 ; i<[multipleErrorMessage count] ; i++) {\n"
  "      NSError * err = [multipleErrorMessage objectAtIndex:i] ;\n"
  "      errorMessage = [NSString stringWithFormat:@\"%@\\n%@\", errorMessage, [err localizedDescription]] ;\n"
  "    }\n"
  "    [tf setToolTip:errorMessage] ;\n"
  "  }\n"
  "  [view addSubview:tf] ;\n"
  "//-------------------------------------------------- Changed properties\n"
  "  mChangedPropertyTextField = [[NSTextField alloc] initWithFrame:secondColumn (nameRect)] ;\n"
  "  [mChangedPropertyTextField setFont:font] ;\n"
  "  [view addSubview:mChangedPropertyTextField] ;\n"
  "  [self updateChangedProperties] ;\n"
  "//-------------------------------------------------- Finish Window construction\n"
  "//--- Resize View\n"
  "  const NSRect rr = secondColumn (nameRect) ;\n"
  "  [view setFrame:NSMakeRect (0.0, 0.0, NSMaxX (rr), NSMaxY (rr))] ;\n"
  "//--- Set content size\n"
  "  [mExplorerWindow setContentSize:NSMakeSize (NSMaxX (nameRect) * 2.0 + 4.0 + 16.0, fmin (600.0, NSMaxY (nameRect)))] ;\n"
  "//--- Set close button as 'remove window' button\n"
  "  NSButton * closeButton = [mExplorerWindow standardWindowButton:NSWindowCloseButton] ;\n"
  "  [closeButton setTarget:self] ;\n"
  "  [closeButton setAction:@selector (deleteWindowAction:)] ;\n"
  "//--- Set window title\n"
  "  const NSUInteger objectIndex = self.mObjectIndex ;\n"
  "  NSString * windowTitle = [NSString stringWithFormat:@\"#%ld (%@) at 0x%llX\", objectIndex, [[self entity] name], (UInt64) self] ;\n"
  "  [mExplorerWindow setTitle:windowTitle] ;\n"
  "//--- Add Scroll view\n"
  "  const NSRect frame = {{0.0, 0.0}, {NSMaxX (nameRect) * 2.0 + 4.0, NSMaxY (nameRect)}} ;\n"
  "  NSScrollView * sw = [[NSScrollView alloc] initWithFrame:frame] ;\n"
  "  [sw setHasVerticalScroller:YES] ;\n"
  "  [sw setDocumentView:view] ;\n"
  "  [mExplorerWindow setContentView:sw] ;\n"
  "}\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  - (void) deleteWindowAction: (id) inSender {\n"
  "    [self clearContextExplorer] ;\n"
  "  }\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  - (void) showExplorerWindow {\n"
  "    if (mExplorerWindow == nil) {\n"
  "      [self createAndPopulateObjectExplorerWindow] ;\n"
  "    }\n"
  "    [mExplorerWindow makeKeyAndOrderFront:nil] ;\n"
  "  }\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  - (void) showObjectWindowFromSenderTagAction: (id) inSender {\n"
  "    [self showExplorerWindow] ;\n"
  "  }\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#pragma mark Clear Context Explorer\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  - (void) clearContextExplorer {\n"
  "    mAttributeViewDictionary = nil ;\n"
  "\n"
  "    NSButton * closeButton = [mExplorerWindow standardWindowButton:NSWindowCloseButton] ;\n"
  "    [closeButton setTarget:nil] ;\n"
  "\n"
  "    [mExplorerWindow orderOut:nil] ;\n"
  "    mExplorerWindow = nil ;\n"
  "  }\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#pragma mark Attribute did change\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  - (void) didChangeValueForKey:(NSString *) inKey {\n"
  "    [super didChangeValueForKey:inKey] ;\n"
  "    [self updateDisplayForKey:inKey] ;\n"
  "  }\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  - (void) didChangeValueForKey:(NSString *) inKey\n"
  "           withSetMutation:(NSKeyValueSetMutationKind) inMutationKind\n"
  "           usingObjects:(NSSet *) inObjects {\n"
  "    [super\n"
  "      didChangeValueForKey:inKey\n"
  "      withSetMutation:inMutationKind\n"
  "      usingObjects:inObjects\n"
  "    ] ;\n"
  "    [self updateDisplayForKey:inKey] ;\n"
  "  }\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@end\n" ;

static const cRegularFileWrapper gWrapperFile_20_objective_5F_c_5F_sources (
  "PMManagedObject.m",
  "m",
  true, // Text file
  14396, // Text length
  gWrapperFileContent_20_objective_5F_c_5F_sources
) ;

//--- File '/PMMutableDataWriteCategory.h'

static const char * gWrapperFileContent_21_objective_5F_c_5F_sources = "//\n"
  "//  PMMutableDataWriteCategory.h\n"
  "//  canari\n"
  "//\n"
  "//  Created by Pierre Molinaro on 09/11/07.\n"
  "//  Copyright 2007 __MyCompanyName__. All rights reserved.\n"
  "//\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#import <Cocoa/Cocoa.h>\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@interface NSMutableData (PMMutableDataWriteCategory)\n"
  "\n"
  "- (void) writeByte: (UInt8) inByte trace: (NSMutableString *) ioTrace ;\n"
  "\n"
  "- (void) writeByte: (UInt8) inByte trace: (NSMutableString *) ioTrace code: (char) inCode ;\n"
  "\n"
  "- (void) writeAutosizedString: (NSString *) inString trace: (NSMutableString *) ioTrace ;\n"
  "\n"
  "- (void) writeAutosizedUnsigned: (UInt64) inValue trace: (NSMutableString *) ioTrace ;\n"
  "\n"
  "- (void) writeAutosizedData: (NSData *) inData trace: (NSMutableString *) ioTrace ;\n"
  "\n"
  "- (void) writePrefixedSigned: (NSNumber *) inValue trace: (NSMutableString *) ioTrace ;\n"
  "\n"
  "- (void) writePrefixedString: (NSString *) inString trace: (NSMutableString *) ioTrace ;\n"
  "\n"
  "- (void) writePrefixedBool: (NSNumber *) inBoolNumber trace: (NSMutableString *) ioTrace ;\n"
  "\n"
  "- (void) writePrefixedDate: (NSDate *) inDate trace: (NSMutableString *) ioTrace ;\n"
  "\n"
  "- (void) writePrefixedDecimal: (NSDecimalNumber *) inDecimalNumber trace: (NSMutableString *) ioTrace ;\n"
  "\n"
  "- (void) writePrefixedBinaryData: (NSData *) inData trace: (NSMutableString *) ioTrace ;\n"
  "\n"
  "- (void) writePrefixedFloat: (NSNumber *) inValue trace: (NSMutableString *) ioTrace ;\n"
  "\n"
  "- (void) writePrefixedDouble: (NSNumber *) inValue trace: (NSMutableString *) ioTrace ;\n"
  "\n"
  "@end\n"
  "\n"
  "//---------------------------------------------------------------------------*\n" ;

static const cRegularFileWrapper gWrapperFile_21_objective_5F_c_5F_sources (
  "PMMutableDataWriteCategory.h",
  "h",
  true, // Text file
  1638, // Text length
  gWrapperFileContent_21_objective_5F_c_5F_sources
) ;

//--- File '/PMMutableDataWriteCategory.m'

static const char * gWrapperFileContent_22_objective_5F_c_5F_sources = "//\n"
  "//  PMMutableDataWriteCategory.m\n"
  "//  canari\n"
  "//\n"
  "//  Created by Pierre Molinaro on 09/11/07.\n"
  "//  Copyright 2007 __MyCompanyName__. All rights reserved.\n"
  "//\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#import \"PMMutableDataWriteCategory.h\"\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@implementation NSMutableData (PMMutableDataWriteCategory)\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) writeAutosizedData: (NSData *) inData\n"
  "         trace: (NSMutableString *) ioTrace {\n"
  "  [ioTrace appendFormat:@\"%03lu %03lu \", self.length / 1000, self.length % 1000] ;\n"
  "  [self writeAutosizedUnsigned:[inData length] trace:ioTrace] ;\n"
  "  [self appendData:inData] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) writeByte: (UInt8) inByte\n"
  "         trace: (NSMutableString *) ioTrace {\n"
  "  [ioTrace appendFormat:@\"%03lu %03lu \", self.length / 1000, self.length % 1000] ;\n"
  "  [ioTrace appendFormat:@\"%02hhX \", inByte] ;\n"
  "  [self appendBytes:& inByte length:1] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) writeByte: (UInt8) inByte\n"
  "         trace: (NSMutableString *) ioTrace\n"
  "         code: (char) inCode {\n"
  "  [ioTrace appendFormat:@\"%03lu %03lu \", self.length / 1000, self.length % 1000] ;\n"
  "  [ioTrace appendFormat:@\"%c %02hhX \", inCode, inByte] ;\n"
  "  [self appendBytes:& inByte length:1] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) writeAutosizedString: (NSString *) inString\n"
  "         trace: (NSMutableString *) ioTrace {\n"
  "  const char * cString = [inString UTF8String] ;\n"
  "  const NSUInteger length = strlen (cString) ;\n"
  "  if (nil != ioTrace) {\n"
  "    [ioTrace appendFormat:@\"%03lu %03lu S \", self.length / 1000, self.length % 1000] ;\n"
  "    for (NSUInteger i=0 ; i<=length ; i++) {\n"
  "      [ioTrace appendFormat:@\"%02hhX \", cString [i]] ;\n"
  "    }\n"
  "  }\n"
  "  [self appendBytes:cString length:length+1] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) writeAutosizedUnsigned: (UInt64) inValue\n"
  "         trace: (NSMutableString *) ioTrace {\n"
  "  [ioTrace appendFormat:@\"%03lu %03lu \", self.length / 1000, self.length % 1000] ;\n"
  "  [ioTrace appendString:@\"U \"] ;\n"
  "  UInt8 bytes [10] ;\n"
  "  NSUInteger idx = 0 ;\n"
  "  UInt64 value = inValue ;\n"
  "  do{\n"
  "    bytes [idx] = value & 0x7FULL ;\n"
  "    value >>= 7 ;\n"
  "    if (value != 0) {\n"
  "      bytes [idx] |= 0x80 ;\n"
  "    }\n"
  "    [ioTrace appendFormat:@\"%02hhX \", bytes [idx]] ;\n"
  "    idx ++ ;\n"
  "  }while (value != 0) ;\n"
  "  [self appendBytes:bytes length:idx] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) writePrefixedSigned: (NSNumber *) inValue\n"
  "         trace: (NSMutableString *) ioTrace {\n"
  "  if (inValue == nil) {\n"
  "    [self writeByte:0xFF trace:ioTrace code:'Z'] ;\n"
  "  }else{\n"
  "    const SInt64 value = (SInt64) [inValue longLongValue] ;\n"
  "    if (value >= 0) {\n"
  "      [self writeByte:0xFE trace:ioTrace code:'P'] ;\n"
  "      [ioTrace appendString:@\"\\n\"] ;\n"
  "      [self writeAutosizedUnsigned: (UInt64) value trace:ioTrace] ;\n"
  "    }else{\n"
  "      [self writeByte:0xFD trace:ioTrace code:'N'] ;\n"
  "      [ioTrace appendString:@\"\\n\"] ;\n"
  "      const SInt64 w = - value ;\n"
  "      [self writeAutosizedUnsigned: (UInt64) w trace:ioTrace] ;\n"
  "    }\n"
  "  }\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) writePrefixedString: (NSString *) inString\n"
  "         trace: (NSMutableString *) ioTrace {\n"
  "  if (inString == nil) {\n"
  "    [self writeByte:0xFF trace:ioTrace code:'Z'] ;\n"
  "  }else{\n"
  "    [self writeByte:0x09 trace:ioTrace code:'s'] ;\n"
  "    [ioTrace appendString:@\"\\n\"] ;\n"
  "    [self writeAutosizedString:inString trace:ioTrace] ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) writePrefixedBool: (NSNumber *) inBoolNumber\n"
  "         trace: (NSMutableString *) ioTrace {\n"
  "  [ioTrace appendFormat:@\"%03lu %03lu \", self.length / 1000, self.length % 1000] ;\n"
  "  if (inBoolNumber == nil) {\n"
  "    [self writeByte:0xFF trace:ioTrace code:'Z'] ;\n"
  "  }else if ([inBoolNumber boolValue]) {\n"
  "    [self writeByte:0x0B trace:ioTrace code:'T'] ;\n"
  "  }else{\n"
  "    [self writeByte:0x0A trace:ioTrace code:'F'] ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) writePrefixedDate: (NSDate *) inDate\n"
  "         trace: (NSMutableString *) ioTrace {\n"
  "  [ioTrace appendFormat:@\"%03lu %03lu \", self.length / 1000, self.length % 1000] ;\n"
  "  if (inDate == nil) {\n"
  "    [self writeByte:0xFF trace:ioTrace code:'Z'] ;\n"
  "  }else{\n"
  "    [self writeByte:0x0E trace:ioTrace code:'D'] ;\n"
  "    [ioTrace appendString:@\"\\n\"] ;\n"
  "    [self writeAutosizedData:[NSArchiver archivedDataWithRootObject:inDate] trace:ioTrace] ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) writePrefixedDecimal: (NSDecimalNumber *) inDecimalNumber\n"
  "         trace: (NSMutableString *) ioTrace {\n"
  "  [ioTrace appendFormat:@\"%03lu %03lu \", self.length / 1000, self.length % 1000] ;\n"
  "  if (inDecimalNumber == nil) {\n"
  "    [self writeByte:0xFF trace:ioTrace code:'Z'] ;\n"
  "  }else{\n"
  "    [self writeByte:0x10 trace:ioTrace code:'d'] ;\n"
  "    [ioTrace appendString:@\"\\n\"] ;\n"
  "    [self writeAutosizedData:[NSArchiver archivedDataWithRootObject:inDecimalNumber] trace:ioTrace] ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) writePrefixedBinaryData: (NSData *) inData\n"
  "         trace: (NSMutableString *) ioTrace {\n"
  "  [ioTrace appendFormat:@\"%03lu %03lu \", self.length / 1000, self.length % 1000] ;\n"
  "  if (inData == nil) {\n"
  "    [self writeByte:0xFF trace:ioTrace code:'Z'] ;\n"
  "  }else{\n"
  "    [self writeByte:0x0F trace:ioTrace code:'b'] ;\n"
  "    [ioTrace appendString:@\"\\n\"] ;\n"
  "    const NSUInteger length = [inData length] ;\n"
  "    [self writeAutosizedUnsigned:length trace:ioTrace] ;\n"
  "    [ioTrace appendString:@\"\\n\"] ;\n"
  "    [self appendData:inData] ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) writePrefixedFloat: (NSNumber *) inValue\n"
  "         trace: (NSMutableString *) ioTrace {\n"
  "  [ioTrace appendFormat:@\"%03lu %03lu \", self.length / 1000, self.length % 1000] ;\n"
  "  if (inValue == nil) {\n"
  "    [self writeByte:0xFF trace:ioTrace code:'Z'] ;\n"
  "  }else{\n"
  "    [self writeByte:0x0C trace:ioTrace code:'f'] ;\n"
  "    [ioTrace appendString:@\"\\n\"] ;\n"
  "    [self writeAutosizedData:[NSArchiver archivedDataWithRootObject:inValue] trace:ioTrace] ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) writePrefixedDouble: (NSNumber *) inValue\n"
  "         trace: (NSMutableString *) ioTrace {\n"
  "  [ioTrace appendFormat:@\"%03lu %03lu \", self.length / 1000, self.length % 1000] ;\n"
  "  if (inValue == nil) {\n"
  "    [self writeByte:0xFF trace:ioTrace code:'Z'] ;\n"
  "  }else{\n"
  "    [self writeByte:0x0D trace:ioTrace code:'e'] ;\n"
  "    [self writeAutosizedData:[NSArchiver archivedDataWithRootObject:inValue] trace:ioTrace] ;\n"
  "    // NSLog (@\"Write Double '%@'\", [inValue description]) ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@end\n" ;

static const cRegularFileWrapper gWrapperFile_22_objective_5F_c_5F_sources (
  "PMMutableDataWriteCategory.m",
  "m",
  true, // Text file
  7127, // Text length
  gWrapperFileContent_22_objective_5F_c_5F_sources
) ;

//--- File '/PMbz2DataCategory.h'

static const char * gWrapperFileContent_23_objective_5F_c_5F_sources = "#import <Cocoa/Cocoa.h>\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@interface NSData (PMbz2DataCategory)\n"
  "\n"
  "\n"
  "- (NSData *) bz2DecompressedDataWithEstimedExpansion: (NSUInteger) inEstimedExpansionFactor\n"
  "             returnedErrorCode : (NSInteger *) outErrorPtr ;\n"
  "\n"
  "- (NSData *) bz2CompressedDataWithCompressionFactor: (NSInteger) inCompressionFactor\n"
  "             returnedErrorCode: (NSInteger *) outErrorPtr ;\n"
  "\n"
  "\n"
  "+ (NSString *) bz2ErrorMessageForErrorCode: (NSInteger) inErrorCode ;\n"
  "\n"
  "@end\n" ;

static const cRegularFileWrapper gWrapperFile_23_objective_5F_c_5F_sources (
  "PMbz2DataCategory.h",
  "h",
  true, // Text file
  522, // Text length
  gWrapperFileContent_23_objective_5F_c_5F_sources
) ;

//--- File '/PMbz2DataCategory.m'

static const char * gWrapperFileContent_24_objective_5F_c_5F_sources = "\n"
  "#import \"PMbz2DataCategory.h\"\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#include <bzlib.h>\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@implementation NSData (PMbz2DataCategory)\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "// See http://www.bzip.org/1.0.3/html/libprog.html\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (NSData *) bz2DecompressedDataWithEstimedExpansion: (NSUInteger) inEstimedExpansionFactor\n"
  "             returnedErrorCode : (NSInteger *) outErrorPtr {\n"
  "  const NSUInteger compressedDataLength = self.length ;\n"
  "  char * compressedDataPointer = (char *) self.bytes ;\n"
  "  NSUInteger estimedDecompressedDataLength = compressedDataLength ;\n"
  "  if (inEstimedExpansionFactor > 1) {\n"
  "    estimedDecompressedDataLength *= inEstimedExpansionFactor ;\n"
  "  }\n"
  "  NSInteger error ;\n"
  "  UInt32 decompressedDataLength ;\n"
  "  char * decompressedBuffer = NULL ;\n"
  "  do{\n"
  "    free (decompressedBuffer) ;\n"
  "    //NSLog (@\"estimedDecompressedDataLength %u\", estimedDecompressedDataLength) ;\n"
  "    decompressedBuffer = malloc (estimedDecompressedDataLength) ;\n"
  "    decompressedDataLength = (UInt32) estimedDecompressedDataLength ;\n"
  "    error = BZ2_bzBuffToBuffDecompress (decompressedBuffer, & decompressedDataLength,\n"
  "                                        compressedDataPointer, (UInt32) compressedDataLength,\n"
  "                                        0, 0) ;\n"
  "    estimedDecompressedDataLength *= 2 ;\n"
  "  }while (error == BZ_OUTBUFF_FULL) ;\n"
  "  NSData * result = nil ;\n"
  "  if (error == BZ_OK) {\n"
  "    result  = [NSData dataWithBytes:decompressedBuffer length:decompressedDataLength] ;\n"
  "  }\n"
  "  if (outErrorPtr != NULL) {\n"
  "    * outErrorPtr = error ;\n"
  "  }\n"
  "  free (decompressedBuffer) ; decompressedBuffer = NULL ;\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (NSData *) bz2CompressedDataWithCompressionFactor: (NSInteger) inCompressionFactor\n"
  "             returnedErrorCode : (NSInteger *) outErrorPtr {\n"
  "  const UInt32 sourceDataLength = (UInt32) self.length ;\n"
  "  char * sourceDataPointer = (char *) self.bytes ;\n"
  "  UInt32 estimedCompressedDataLength = sourceDataLength + (sourceDataLength / 100) + (600 * 1024) ;\n"
  "  NSInteger error ;\n"
  "  UInt32 compressedDataLength ;\n"
  "  char * compressedBuffer = NULL ;\n"
  "  do{\n"
  "    free (compressedBuffer) ;\n"
  "    compressedBuffer = malloc (estimedCompressedDataLength) ;\n"
  "    compressedDataLength = estimedCompressedDataLength ;\n"
  "    error = BZ2_bzBuffToBuffCompress (compressedBuffer,\n"
  "                                      & compressedDataLength,\n"
  "                                      sourceDataPointer,\n"
  "                                      sourceDataLength,\n"
  "                                      (int) inCompressionFactor,\n"
  "                                      0, // Verbosity (0 = silent)\n"
  "                                      0) ; // Work factor (0 = default)\n"
  "    estimedCompressedDataLength *= 2 ;\n"
  "  }while (error == BZ_OUTBUFF_FULL) ;\n"
  "  NSData * result = nil ;\n"
  "  if (error == BZ_OK) {\n"
  "    result  = [NSData dataWithBytesNoCopy:compressedBuffer length:compressedDataLength] ;\n"
  "  }else{\n"
  "    free (compressedBuffer) ;\n"
  "  }\n"
  "  if (outErrorPtr != NULL) {\n"
  "    * outErrorPtr = error ;\n"
  "  }\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "+ (NSString *) bz2ErrorMessageForErrorCode: (NSInteger) inErrorCode {\n"
  "  NSString * result = @\"Unknown BZ2 Error\" ;\n"
  "  switch (inErrorCode) {\n"
  "  case BZ_OK:\n"
  "    result = @\"\" ;\n"
  "    break ;\n"
  "  case BZ_SEQUENCE_ERROR:\n"
  "    result = @\"BZ2 Sequence Error\" ;\n"
  "    break ;\n"
  "  case BZ_PARAM_ERROR:\n"
  "    result = @\"BZ2 Parameter Error\" ;\n"
  "    break ;\n"
  "  case BZ_MEM_ERROR:\n"
  "    result = @\"BZ2 Memory Error\" ;\n"
  "    break ;\n"
  "  case BZ_DATA_ERROR:\n"
  "    result = @\"BZ2 Data Error\" ;\n"
  "    break ;\n"
  "  case BZ_IO_ERROR:\n"
  "    result = @\"BZ2 I/O Error\" ;\n"
  "    break ;\n"
  "  case BZ_UNEXPECTED_EOF:\n"
  "    result = @\"BZ2 Unexpected EOF Error\" ;\n"
  "    break ;\n"
  "  case BZ_OUTBUFF_FULL:\n"
  "    result = @\"BZ2 Output Buffer Full Error\" ;\n"
  "    break ;\n"
  "  case BZ_CONFIG_ERROR:\n"
  "    result = @\"BZ2 Configuration Error\" ;\n"
  "    break ;\n"
  "  default:\n"
  "    break ;\n"
  "  }\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@end\n" ;

static const cRegularFileWrapper gWrapperFile_24_objective_5F_c_5F_sources (
  "PMbz2DataCategory.m",
  "m",
  true, // Text file
  4283, // Text length
  gWrapperFileContent_24_objective_5F_c_5F_sources
) ;

//--- File '/PMzlibDataCategory.h'

static const char * gWrapperFileContent_25_objective_5F_c_5F_sources = "#import <Cocoa/Cocoa.h>\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@interface NSData (PMzlibDataCategory)\n"
  "\n"
  "\n"
  "- (NSData *) zlibDecompressedDataWithEstimedExpansion: (NSUInteger) inEstimedExpansionFactor\n"
  "             returnedErrorCode : (NSInteger *) outErrorPtr ;\n"
  "\n"
  "- (NSData *) zlibCompressedDataWithCompressionFactor: (NSUInteger) inCompressionFactor\n"
  "             returnedErrorCode: (NSInteger *) outErrorPtr ;\n"
  "\n"
  "\n"
  "+ (NSString *) zlibErrorMessageForErrorCode: (NSInteger) inErrorCode ;\n"
  "\n"
  "@end\n" ;

static const cRegularFileWrapper gWrapperFile_25_objective_5F_c_5F_sources (
  "PMzlibDataCategory.h",
  "h",
  true, // Text file
  527, // Text length
  gWrapperFileContent_25_objective_5F_c_5F_sources
) ;

//--- File '/PMzlibDataCategory.m'

static const char * gWrapperFileContent_26_objective_5F_c_5F_sources = "\n"
  "#import \"PMzlibDataCategory.h\"\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#include <zlib.h>\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@implementation NSData (PMzlibDataCategory)\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (NSData *) zlibDecompressedDataWithEstimedExpansion: (NSUInteger) inEstimedExpansionFactor\n"
  "             returnedErrorCode : (NSInteger *) outErrorPtr {\n"
  "  const NSUInteger compressedDataLength = self.length ;\n"
  "  UInt8 * compressedDataPointer = (UInt8 *) self.bytes ;\n"
  "  NSUInteger estimedDecompressedDataLength = compressedDataLength ;\n"
  "  if (inEstimedExpansionFactor > 1) {\n"
  "    estimedDecompressedDataLength *= inEstimedExpansionFactor ;\n"
  "  }\n"
  "  NSInteger error ;\n"
  "  NSUInteger decompressedDataLength ;\n"
  "  UInt8 * decompressedBuffer = NULL ;\n"
  "  do{\n"
  "    free (decompressedBuffer) ;\n"
  "    //NSLog (@\"estimedDecompressedDataLength %u\", estimedDecompressedDataLength) ;\n"
  "    decompressedBuffer = malloc (estimedDecompressedDataLength) ;\n"
  "    decompressedDataLength = estimedDecompressedDataLength ;\n"
  "    error = uncompress (decompressedBuffer, & decompressedDataLength,\n"
  "                       compressedDataPointer, compressedDataLength) ;\n"
  "    estimedDecompressedDataLength *= 2 ;\n"
  "  }while (error == Z_BUF_ERROR) ;\n"
  "  NSData * result = nil ;\n"
  "  if (error == Z_OK) {\n"
  "    result  = [NSData dataWithBytes:decompressedBuffer length:decompressedDataLength] ;\n"
  "  }\n"
  "  if (outErrorPtr != NULL) {\n"
  "    * outErrorPtr = error ;\n"
  "  }\n"
  "  free (decompressedBuffer) ; decompressedBuffer = NULL ;\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (NSData *) zlibCompressedDataWithCompressionFactor: (NSUInteger) inCompressionFactor\n"
  "             returnedErrorCode : (NSInteger *) outErrorPtr {\n"
  "  const NSUInteger sourceDataLength = self.length ;\n"
  "  UInt8 * sourceDataPointer = (UInt8 *) self.bytes ;\n"
  "  NSUInteger estimedCompressedDataLength = sourceDataLength + (sourceDataLength / 100) + (600 * 1024) ;\n"
  "  NSInteger error ;\n"
  "  NSUInteger compressedDataLength ;\n"
  "  UInt8 * compressedBuffer = NULL ;\n"
  "  do{\n"
  "    free (compressedBuffer) ;\n"
  "    compressedBuffer = malloc (estimedCompressedDataLength) ;\n"
  "    compressedDataLength = estimedCompressedDataLength ;\n"
  "    error = compress2 (compressedBuffer, & compressedDataLength,\n"
  "                       sourceDataPointer, sourceDataLength,\n"
  "                       (int) inCompressionFactor) ; // Work factor (0 = default)\n"
  "    estimedCompressedDataLength *= 2 ;\n"
  "  }while (error == Z_BUF_ERROR) ;\n"
  "  NSData * result = nil ;\n"
  "  if (error == Z_OK) {\n"
  "    result  = [NSData dataWithBytesNoCopy:compressedBuffer length:compressedDataLength] ;\n"
  "  }else{\n"
  "    free (compressedBuffer) ;\n"
  "  }\n"
  "  if (outErrorPtr != NULL) {\n"
  "    * outErrorPtr = error ;\n"
  "  }\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "+ (NSString *) zlibErrorMessageForErrorCode: (NSInteger) inErrorCode {\n"
  "  NSString * result = @\"Unknown ZLIB Error\" ;\n"
  "  switch (inErrorCode) {\n"
  "  case Z_OK:\n"
  "    result = @\"\" ;\n"
  "    break ;\n"
  "  case Z_ERRNO:\n"
  "    result = @\"ZLIB Unknown Error\" ;\n"
  "    break ;\n"
  "  case Z_BUF_ERROR:\n"
  "    result = @\"ZLIB Buffer overflow Error\" ;\n"
  "    break ;\n"
  "  case Z_STREAM_ERROR:\n"
  "    result = @\"ZLIB Stream Error\" ;\n"
  "    break ;\n"
  "  case Z_MEM_ERROR:\n"
  "    result = @\"ZLIB Memory Error\" ;\n"
  "    break ;\n"
  "  case Z_DATA_ERROR:\n"
  "    result = @\"ZLIB Data Error\" ;\n"
  "    break ;\n"
  "  case Z_VERSION_ERROR:\n"
  "    result = @\"ZLIB Version Error\" ;\n"
  "    break ;\n"
  "  default:\n"
  "    break ;\n"
  "  }\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@end\n" ;

static const cRegularFileWrapper gWrapperFile_26_objective_5F_c_5F_sources (
  "PMzlibDataCategory.m",
  "m",
  true, // Text file
  3665, // Text length
  gWrapperFileContent_26_objective_5F_c_5F_sources
) ;

//--- File '/easy-bindings-utilities.h'

static const char * gWrapperFileContent_27_objective_5F_c_5F_sources = "\n"
  "#import <Cocoa/Cocoa.h>\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//   presentErrorWindow                                                      *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "void presentErrorWindow (const char * inFile,\n"
  "                         const int inLine,\n"
  "                         NSString * inErrorMessage) ;\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  #define macroCheckObject(OBJECT,TYPE) routineCheckObject(OBJECT, [TYPE class], __FILE__, __LINE__)\n"
  "  void routineCheckObject (id inObject, Class inClass, const char * inFile, const NSInteger inLine) ;\n"
  "#else\n"
  "  #define macroCheckObject(OBJECT,TYPE)\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  #define macroAssert(EXP,MESSAGE,VALUE1,VALUE2) routineAssert(EXP, MESSAGE, VALUE1, VALUE2, __FILE__, __LINE__)\n"
  "  void routineAssert (const BOOL inAssertion,\n"
  "                      NSString * inFormat,\n"
  "                      const SInt64 inValue1,\n"
  "                      const SInt64 inValue2,\n"
  "                      const char * inFile,\n"
  "                      const NSInteger inLine) ;\n"
  "#else\n"
  "  #define macroAssert(EXP,MESSAGE,VALUE1,VALUE2)\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  #define HERE                  atFile:__FILE__  atLine:__LINE__\n"
  "  #define COLON_HERE            :__FILE__  atLine:__LINE__\n"
  "  #define THERE                 atFile:IN_SOURCE_FILE  atLine:IN_SOURCE_LINE\n"
  "  #define COLON_THERE           IN_SOURCE_FILE  atLine:IN_SOURCE_LINE\n"
  "  #define LOCATION_ARGS         atFile: (const char *) IN_SOURCE_FILE  atLine: (NSInteger) IN_SOURCE_LINE\n"
  "  #define COLON_LOCATION_ARGS   : (const char *) IN_SOURCE_FILE  atLine: (NSInteger) IN_SOURCE_LINE\n"
  "  #define OF_CLASS_ARG          ofClass: (Class) inClass\n"
  "  #define OFCLASS(className)    ofClass:[className class]\n"
  "#else\n"
  "  #define HERE\n"
  "  #define COLON_HERE\n"
  "  #define THERE\n"
  "  #define COLON_THERE\n"
  "  #define LOCATION_ARGS\n"
  "  #define COLON_LOCATION_ARGS\n"
  "  #define OF_CLASS_ARG\n"
  "  #define OFCLASS(className)\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#define value_for_key  valueForKey\n"
  "#define set_value      setValue\n"
  "#define for_key        forKey\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@interface NSArray (PMArrayDebugCategory)\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "+ (id) arrayWithObject: (id) anObject LOCATION_ARGS ;\n"
  "\n"
  "- (id) objectAtIndex: (NSUInteger) inIndex LOCATION_ARGS ;\n"
  "\n"
  "- (id) objectAtIndex: (NSUInteger) inIndex LOCATION_ARGS OF_CLASS_ARG ;\n"
  "\n"
  "- (id) lastObject COLON_LOCATION_ARGS ;\n"
  "\n"
  "- (id) lastObject COLON_LOCATION_ARGS OF_CLASS_ARG ;\n"
  "\n"
  "- (NSEnumerator *) objectEnumerator COLON_LOCATION_ARGS ;\n"
  "#endif\n"
  "\n"
  "@end\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@interface NSMutableSet (PMMutableSetDebugCategory)\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "- (void) addObject: (id) inObject LOCATION_ARGS ;\n"
  "\n"
  "- (void) removeAllObjects COLON_LOCATION_ARGS ;\n"
  "\n"
  "- (void) removeObject: (id) inObject LOCATION_ARGS ;\n"
  "#endif\n"
  "\n"
  "@end\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//   NSData encoding                                                         *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "NSData * dataEncodedValue (id inValue) ;\n"
  "\n"
  "id valueFromData (NSData * inData) ;\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//   BOOL                                                                    *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "BOOL boolFromNSNumber (id inValue) ;\n"
  "\n"
  "NSNumber * numberEncodedBool (BOOL inValue) ;\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//   NSInteger                                                               *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "NSInteger NSIntegerFromNSNumber (id inValue) ;\n"
  "\n"
  "NSNumber * numberEncodedNSInteger (NSInteger inValue) ;\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//   double                                                                  *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "double doubleFromNSNumber (id inValue) ;\n"
  "\n"
  "NSNumber * numberEncodedDouble (double inValue) ;\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//   Font                                                                    *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "NSData * dataFromFont (NSFont * inFont) ;\n"
  "\n"
  "NSFont * fontFromData (NSData * inDataEncodeFont) ;\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//   enterSignatureValue                                                     *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "NSInteger enterSignatureValue (const NSInteger inSignature,\n"
  "                               const NSInteger inValue) ;\n"
  "\n"
  "//---------------------------------------------------------------------------*\n" ;

static const cRegularFileWrapper gWrapperFile_27_objective_5F_c_5F_sources (
  "easy-bindings-utilities.h",
  "h",
  true, // Text file
  5288, // Text length
  gWrapperFileContent_27_objective_5F_c_5F_sources
) ;

//--- File '/easy-bindings-utilities.m'

static const char * gWrapperFileContent_28_objective_5F_c_5F_sources = "//---------------------------------------------------------------------------*\n"
  "\n"
  "#import \"easy-bindings-utilities.h\"\n"
  "#import <objc/runtime.h>\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//   presentErrorWindow                                                      *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "static NSMutableArray * gErrorWindows ;\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "void presentErrorWindow (const char * inFile,\n"
  "                         const int inLineNumber,\n"
  "                         NSString * inErrorMessage) {\n"
  "  if (nil == gErrorWindows) {\n"
  "    gErrorWindows = [NSMutableArray new] ;\n"
  "  }\n"
  "//---\n"
  "  NSString * f = [[NSString stringWithCString:inFile encoding:NSASCIIStringEncoding] lastPathComponent] ;\n"
  "  NSMutableString * message = [NSMutableString stringWithCapacity:1000] ;\n"
  "  [message appendFormat:@\"File: %@\\n\", f] ;\n"
  "  [message appendFormat:@\"Line: %d\\n\\n\", inLineNumber] ;\n"
  "  [message appendFormat:@\"Message: %@\", inErrorMessage] ;\n"
  "  static NSPoint origin = {20.0, 20.0} ;\n"
  "  const NSRect r = {origin, {300.0, 200.0}} ;\n"
  "  origin.x += 20.0 ;\n"
  "  origin.y += 20.0 ;\n"
  "  NSWindow * window = [[NSWindow alloc] initWithContentRect:r\n"
  "    styleMask:NSTitledWindowMask | NSClosableWindowMask\n"
  "    backing:NSBackingStoreBuffered\n"
  "    defer:YES\n"
  "    screen:nil\n"
  "  ] ;\n"
  "  [window setTitle:@\"Outlet Error\"] ;\n"
  "  NSView * contentView = [window contentView] ;\n"
  "  const NSRect tfRect = NSInsetRect ([contentView bounds], 10.0, 10.0) ;\n"
  "  NSTextField * tf = [[NSTextField alloc] initWithFrame:tfRect] ;\n"
  "  [tf setEditable:NO] ;\n"
  "  [tf setSelectable:YES] ;\n"
  "  [tf setFont:[NSFont boldSystemFontOfSize:0.0]] ;\n"
  "  [tf setTextColor:[NSColor redColor]] ;\n"
  "  [tf setStringValue:message] ;\n"
  "  [contentView addSubview:tf] ;\n"
  "  NSBeep () ;\n"
  "  [window makeKeyAndOrderFront:nil] ;\n"
  "//---\n"
  "  [gErrorWindows addObject:window] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  void routineCheckObject (id inObject,\n"
  "                           Class inClass,\n"
  "                           const char * inFile,\n"
  "                           const NSInteger inLine) {\n"
  "    if (nil == inObject) {\n"
  "      presentErrorWindow (inFile, inLine, @\"Object is nil\") ;\n"
  "    }else if (! [inObject isKindOfClass:inClass]) {\n"
  "      NSString * s = [NSString stringWithFormat:\n"
  "        @\"Object is not an instance of %s, but %s\",\n"
  "        class_getName (inClass),\n"
  "        class_getName ([inObject class])\n"
  "      ] ;\n"
  "      presentErrorWindow (inFile, inLine, s) ;\n"
  "    }  \n"
  "  }\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  void routineAssert (const BOOL inAssertion,\n"
  "                      NSString * inFormat,\n"
  "                      const SInt64 inValue1,\n"
  "                      const SInt64 inValue2,\n"
  "                      const char * inFile,\n"
  "                      const NSInteger inLine) {\n"
  "    if (! inAssertion) {\n"
  "      NSString * s = [NSString stringWithFormat:\n"
  "        inFormat,\n"
  "        inValue1,\n"
  "        inValue2\n"
  "      ] ;\n"
  "      presentErrorWindow (inFile, inLine, s) ;\n"
  "    }\n"
  "  }\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@implementation NSArray (PMArrayDebugCategory)\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "+ (id) arrayWithObject: (id) anObject LOCATION_ARGS {\n"
  "  if (anObject == nil) {\n"
  "    NSLog (@\"arrayWithObject: argument is nil in:%s:%ld\", IN_SOURCE_FILE, IN_SOURCE_LINE) ;\n"
  "  }\n"
  "  return [NSArray arrayWithObject:anObject] ; // DO NOT ADD HERE !!!\n"
  "}\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "- (id) objectAtIndex: (NSUInteger) inIndex LOCATION_ARGS {\n"
  "  if (! [self isKindOfClass:[NSArray class]]) {\n"
  "    NSLog (@\"objectAtIndex: receiver is not an instance of NSArray in:%s:%ld\", IN_SOURCE_FILE, IN_SOURCE_LINE) ;\n"
  "  }else if (inIndex >= self.count) {\n"
  "    NSLog (@\"objectAtIndex: index (%llu) >= object count (%llu) in:%s:%ld\",\n"
  "          (UInt64) inIndex, (UInt64) self.count, IN_SOURCE_FILE, IN_SOURCE_LINE) ;  \n"
  "  }\n"
  "  return [self objectAtIndex:inIndex] ;\n"
  "}\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "- (id) objectAtIndex: (NSUInteger) inIndex LOCATION_ARGS OF_CLASS_ARG {\n"
  "  id result = [self objectAtIndex:inIndex THERE] ;\n"
  "  if (! [result isKindOfClass:inClass]) {\n"
  "    NSLog (@\"objectAtIndex: receiver is an instance of %@ class (instead of %@ class) in:%s:%ld\",\n"
  "          [[result class] className], [inClass className], IN_SOURCE_FILE, IN_SOURCE_LINE) ;\n"
  "  }\n"
  "  return result ;\n"
  "}\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "- (id) lastObject COLON_LOCATION_ARGS {\n"
  "  if (! [self isKindOfClass:[NSArray class]]) {\n"
  "    NSLog (@\"<lastObject>: receiver is not an instance of NSArray in:%s:%ld\", IN_SOURCE_FILE, IN_SOURCE_LINE) ;\n"
  "  }\n"
  "  return [self lastObject] ;\n"
  "}\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "- (id) lastObject COLON_LOCATION_ARGS OF_CLASS_ARG {\n"
  "  if (! [self isKindOfClass:[NSArray class]]) {\n"
  "    NSLog (@\"<lastObject>: receiver is not an instance of NSArray in:%s:%ld\", IN_SOURCE_FILE, IN_SOURCE_LINE) ;\n"
  "  }\n"
  "  id result = [self lastObject] ;\n"
  "  if (! [result isKindOfClass:inClass]) {\n"
  "    NSLog (@\"<lastObject>: receiver is an instance of %@ class (instead of %@ class) in:%s:%ld\",\n"
  "          [[result class] className], [inClass className], IN_SOURCE_FILE, IN_SOURCE_LINE) ;\n"
  "  }\n"
  "  return result ;\n"
  "}\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "//--- Define DEBUG_ENUMERATORS (in PMCocoaCallsDebug.h), in order to detect\n"
  "//    \"Collection ... was mutated while being enumerated\" exception\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "- (NSEnumerator *) objectEnumerator COLON_LOCATION_ARGS {\n"
  "  #ifdef DEBUG_ENUMERATORS\n"
  "    NSLog (@\"%p <objectEnumerator> in:%s:%d\", self, IN_SOURCE_FILE, IN_SOURCE_LINE) ;\n"
  "  #endif\n"
  "  return [self objectEnumerator] ; // DO NOT ADD COLON_HERE !!!\n"
  "}\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@end\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@implementation NSMutableSet (PMMutableSetDebugCategory)\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "- (void) addObject: (id) inObject LOCATION_ARGS {\n"
  "  if (! [self isKindOfClass:[NSMutableSet class]]) {\n"
  "    NSLog (@\"addObject: receiver is not an instance of NSMutableSet in sourceFile:%s:%ld\", IN_SOURCE_FILE, IN_SOURCE_LINE) ;\n"
  "  }else if (inObject == nil) {\n"
  "    NSLog (@\"in '%s' file at line %ld, attempt to insert nil\", IN_SOURCE_FILE, IN_SOURCE_LINE) ;  \n"
  "  }\n"
  "  [self addObject:inObject] ;\n"
  "}\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "- (void) removeAllObjects COLON_LOCATION_ARGS {\n"
  "  if (! [self isKindOfClass:[NSMutableSet class]]) {\n"
  "    NSLog (@\"removeAllObjects: receiver is not an instance of NSMutableSet in source file:%s:%ld\", IN_SOURCE_FILE, IN_SOURCE_LINE) ;\n"
  "  }\n"
  "  [self removeAllObjects] ;\n"
  "}\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "- (void) removeObject: (id) inObject LOCATION_ARGS {\n"
  "  if (! [self isKindOfClass:[NSMutableSet class]]) {\n"
  "    NSLog (@\"removeObject: receiver is not an instance of NSMutableSet in source file:%s:%ld\", IN_SOURCE_FILE, IN_SOURCE_LINE) ;\n"
  "  }else if (inObject == nil) {\n"
  "    NSLog (@\"removeObject: argument is nil in source file:%s:%ld\", IN_SOURCE_FILE, IN_SOURCE_LINE) ;\n"
  "  }\n"
  "  [self removeObject:inObject] ;\n"
  "}\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@end\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//   NSData encoding                                                         *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "NSData * dataEncodedValue (id inValue) {\n"
  "  return [NSArchiver archivedDataWithRootObject:inValue] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "id valueFromData (NSData * inData) {\n"
  "  return (inData  == nil) \? nil : [NSUnarchiver unarchiveObjectWithData:inData] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//   BOOL                                                                    *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "BOOL boolFromNSNumber (id inValue) {\n"
  "  return [inValue boolValue] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "NSNumber * numberEncodedBool (BOOL inValue) {\n"
  "  return [NSNumber numberWithBool:inValue] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//   NSInteger                                                               *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "NSInteger NSIntegerFromNSNumber (id inValue) {\n"
  "  return [inValue integerValue] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "NSNumber * numberEncodedNSInteger (NSInteger inValue) {\n"
  "  return [NSNumber numberWithInteger:inValue] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//   double                                                                  *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "double doubleFromNSNumber (id inValue) {\n"
  "  return [inValue doubleValue] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "NSNumber * numberEncodedDouble (double inValue) {\n"
  "  return [NSNumber numberWithDouble:inValue] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//   Font                                                                    *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "NSData * dataFromFont (NSFont * inFont) {\n"
  "  return [NSArchiver archivedDataWithRootObject:inFont] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "NSFont * fontFromData (NSData * inDataEncodeFont) {\n"
  "  return (inDataEncodeFont == nil)\n"
  "    \? nil\n"
  "    : [NSUnarchiver unarchiveObjectWithData:inDataEncodeFont]\n"
  "  ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//   enterSignatureValue                                                     *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "NSInteger enterSignatureValue (const NSInteger inSignature,\n"
  "                               const NSInteger inValue) {\n"
  "  NSInteger result = inSignature ;\n"
  "  NSInteger negative = inSignature < 0 ;\n"
  "  result <<= 1 ;\n"
  "  result |= negative ;\n"
  "  result ^= inValue ;\n"
  "  return result ;  \n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n" ;

static const cRegularFileWrapper gWrapperFile_28_objective_5F_c_5F_sources (
  "easy-bindings-utilities.m",
  "m",
  true, // Text file
  11102, // Text length
  gWrapperFileContent_28_objective_5F_c_5F_sources
) ;

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_objective_5F_c_5F_sources_0 [30] = {
  & gWrapperFile_0_objective_5F_c_5F_sources,
  & gWrapperFile_1_objective_5F_c_5F_sources,
  & gWrapperFile_2_objective_5F_c_5F_sources,
  & gWrapperFile_3_objective_5F_c_5F_sources,
  & gWrapperFile_4_objective_5F_c_5F_sources,
  & gWrapperFile_5_objective_5F_c_5F_sources,
  & gWrapperFile_6_objective_5F_c_5F_sources,
  & gWrapperFile_7_objective_5F_c_5F_sources,
  & gWrapperFile_8_objective_5F_c_5F_sources,
  & gWrapperFile_9_objective_5F_c_5F_sources,
  & gWrapperFile_10_objective_5F_c_5F_sources,
  & gWrapperFile_11_objective_5F_c_5F_sources,
  & gWrapperFile_12_objective_5F_c_5F_sources,
  & gWrapperFile_13_objective_5F_c_5F_sources,
  & gWrapperFile_14_objective_5F_c_5F_sources,
  & gWrapperFile_15_objective_5F_c_5F_sources,
  & gWrapperFile_16_objective_5F_c_5F_sources,
  & gWrapperFile_17_objective_5F_c_5F_sources,
  & gWrapperFile_18_objective_5F_c_5F_sources,
  & gWrapperFile_19_objective_5F_c_5F_sources,
  & gWrapperFile_20_objective_5F_c_5F_sources,
  & gWrapperFile_21_objective_5F_c_5F_sources,
  & gWrapperFile_22_objective_5F_c_5F_sources,
  & gWrapperFile_23_objective_5F_c_5F_sources,
  & gWrapperFile_24_objective_5F_c_5F_sources,
  & gWrapperFile_25_objective_5F_c_5F_sources,
  & gWrapperFile_26_objective_5F_c_5F_sources,
  & gWrapperFile_27_objective_5F_c_5F_sources,
  & gWrapperFile_28_objective_5F_c_5F_sources,
  NULL
} ;

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_objective_5F_c_5F_sources_0 [1] = {
  NULL
} ;

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_objective_5F_c_5F_sources (
  "",
  29,
  gWrapperAllFiles_objective_5F_c_5F_sources_0,
  0,
  gWrapperAllDirectories_objective_5F_c_5F_sources_0
) ;


//---------------------------------------------------------------------------*
//                                                                           *
//                             Routine 'before'                              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_before (C_Compiler * /* inCompiler */
                     COMMA_UNUSED_LOCATION_ARGS) {
}


//---------------------------------------------------------------------------*
//                                                                           *
//                          Routine 'programRule_0'                          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_programRule_5F__30_ (const GALGAS_lstring constinArgument_inSourceFile,
                                  C_Compiler * inCompiler
                                  COMMA_UNUSED_LOCATION_ARGS) {
  //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
  GALGAS_classList var_classList = GALGAS_classList::constructor_emptyList (SOURCE_FILE_AT_LINE (43)) ;
  //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
  GALGAS_entityList var_entityList = GALGAS_entityList::constructor_emptyList (SOURCE_FILE_AT_LINE (44)) ;
  //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
  GALGAS_preferencesDeclarationList var_preferencesList = GALGAS_preferencesDeclarationList::constructor_emptyList (SOURCE_FILE_AT_LINE (45)) ;
  //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
  GALGAS_outletClassList var_outletClassList = GALGAS_outletClassList::constructor_emptyList (SOURCE_FILE_AT_LINE (46)) ;
  //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
  GALGAS_documentDeclarationList var_documentDeclarationList = GALGAS_documentDeclarationList::constructor_emptyList (SOURCE_FILE_AT_LINE (47)) ;
  //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
  GALGAS_controllerClassList var_controllerClassList = GALGAS_controllerClassList::constructor_emptyList (SOURCE_FILE_AT_LINE (48)) ;
  //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
  GALGAS_protocolList var_protocolList = GALGAS_protocolList::constructor_emptyList (SOURCE_FILE_AT_LINE (49)) ;
  //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
  GALGAS_cursorList var_cursorList = GALGAS_cursorList::constructor_emptyList (SOURCE_FILE_AT_LINE (50)) ;
  //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
  GALGAS_enumList var_enumList = GALGAS_enumList::constructor_emptyList (SOURCE_FILE_AT_LINE (51)) ;
  { //---- @grammarInstructionWithSourceExpressionForGeneration
  GALGAS_location joker_2081_0 ; // Joker input parameter
  cGrammar_easyBindings_5F_grammar::_performSourceStringParsing_ (inCompiler, GALGAS_string (filewrapperTemplate_predefinedOutletClasses_sourceFile (inCompiler COMMA_SOURCE_FILE_AT_LINE (52))), var_classList, var_entityList, var_preferencesList, var_outletClassList, var_documentDeclarationList, var_controllerClassList, var_protocolList, var_cursorList, var_enumList, joker_2081_0 COMMA_SOURCE_FILE_AT_LINE (52)) ;
  } //---- END @grammarInstructionWithSourceExpressionForGeneration
  //-------- @localVariableDeclarationForGeneration
  GALGAS_location var_endOfSourceFile ;
  { //-------- @grammarInstructionWithSourceFileForGeneration
  cGrammar_easyBindings_5F_grammar::_performSourceFileParsing_ (inCompiler, constinArgument_inSourceFile, var_classList, var_entityList, var_preferencesList, var_outletClassList, var_documentDeclarationList, var_controllerClassList, var_protocolList, var_cursorList, var_enumList, var_endOfSourceFile COMMA_SOURCE_FILE_AT_LINE (65)) ;
  } //-------- END @grammarInstructionWithSourceFileForGeneration
  //-------- @localVariableDeclarationForGeneration
  GALGAS_userCursorMap var_userCursorMap ;
  //-------- @localVariableDeclarationForGeneration
  GALGAS_stringlist var_predefinedCursorList ;
  { //-------- @routineCallInstructionForGeneration
  routine_cursorAnalysis (var_cursorList, var_userCursorMap, var_predefinedCursorList, inCompiler COMMA_SOURCE_FILE_AT_LINE (79)) ;
  } //-------- @routineCallInstructionForGeneration
  //-------- @localVariableDeclarationForGeneration
  GALGAS_enumMap var_enumMap ;
  //-------- @localVariableDeclarationForGeneration
  GALGAS_globalEnumConstantMap var_globalEnumConstantMap ;
  { //-------- @routineCallInstructionForGeneration
  routine_enumAnalysis (var_enumList, var_enumMap, var_globalEnumConstantMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (85)) ;
  } //-------- @routineCallInstructionForGeneration
  //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
  GALGAS_protocolMap var_protocolMap = GALGAS_protocolMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (91)) ;
  //-------- @foreachInstructionForGeneration
  cEnumerator_protocolList enumerator_2774 (var_protocolList, kEnumeration_up) ;
  //--- simple foreach instruction
  while (enumerator_2774.hasCurrentObject ()) {
    { //-------- @modifierCallInstructionForGeneration
    var_protocolMap.modifier_insertKey (enumerator_2774.current_mProtocolName (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (93)) ;
    } //-------- END @typeMethodInstructionForGeneration
    enumerator_2774.gotoNextObject () ;
  }
  //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
  GALGAS_stringlist var_sortedTransientOrderedList = GALGAS_stringlist::constructor_emptyList (SOURCE_FILE_AT_LINE (96)) ;
  //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
  GALGAS_transientDependencyGraph var_transientDependencyGraph = GALGAS_transientDependencyGraph::constructor_emptyGraph (SOURCE_FILE_AT_LINE (97)) ;
  //-------- @localVariableDeclarationForGeneration
  GALGAS_outletClassMap var_outletClassMap ;
  { //-------- @routineCallInstructionForGeneration
  routine_analyzeOutletClasses (var_outletClassList, var_protocolMap, var_outletClassMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (98)) ;
  } //-------- @routineCallInstructionForGeneration
  //-------- @localVariableDeclarationForGeneration
  GALGAS_controllerClassMap var_controllerClassMap ;
  { //-------- @routineCallInstructionForGeneration
  routine_analyzeControllerClasses (var_controllerClassList, var_transientDependencyGraph, var_controllerClassMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (104)) ;
  } //-------- @routineCallInstructionForGeneration
  //-------- @localVariableDeclarationForGeneration
  GALGAS_classMap var_classMap ;
  { //-------- @routineCallInstructionForGeneration
  routine_analyzeClasses (var_classList, var_globalEnumConstantMap, var_classMap, var_transientDependencyGraph, inCompiler COMMA_SOURCE_FILE_AT_LINE (110)) ;
  } //-------- @routineCallInstructionForGeneration
  //-------- @localVariableDeclarationForGeneration
  GALGAS_preferencesMap var_preferencesMap ;
  { //-------- @routineCallInstructionForGeneration
  routine_analyzePreferences (var_preferencesList, var_controllerClassMap, var_classMap, var_outletClassMap, var_globalEnumConstantMap, var_preferencesMap, var_transientDependencyGraph, inCompiler COMMA_SOURCE_FILE_AT_LINE (117)) ;
  } //-------- @routineCallInstructionForGeneration
  //-------- @localVariableDeclarationForGeneration
  GALGAS_entityMap var_entityMap ;
  //-------- @localVariableDeclarationForGeneration
  GALGAS_entityListForGeneration var_entityListForGeneration ;
  { //-------- @routineCallInstructionForGeneration
  routine_analyzeEntities (var_entityList, var_globalEnumConstantMap, var_entityMap, var_entityListForGeneration, var_preferencesMap, var_transientDependencyGraph, inCompiler COMMA_SOURCE_FILE_AT_LINE (127)) ;
  } //-------- @routineCallInstructionForGeneration
  //-------- @localVariableDeclarationForGeneration
  GALGAS_documentMap var_documentMap ;
  { //-------- @routineCallInstructionForGeneration
  routine_analyzeDocuments (var_documentDeclarationList, var_outletClassMap, var_controllerClassMap, var_entityMap, var_preferencesMap, var_globalEnumConstantMap, var_documentMap, var_transientDependencyGraph, inCompiler COMMA_SOURCE_FILE_AT_LINE (136)) ;
  } //-------- @routineCallInstructionForGeneration
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE_AT_LINE (147)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).operator_and (GALGAS_bool (gOption_easyBindings_5F_options_outputTransientDependencyGraph.reader_value ()) COMMA_SOURCE_FILE_AT_LINE (147)).boolEnum () ;
  if (kBoolTrue == test_0) {
    //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
    GALGAS_string var_s = var_transientDependencyGraph.reader_graphviz (SOURCE_FILE_AT_LINE (148)) ;
    //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
    GALGAS_string var_path = constinArgument_inSourceFile.mAttribute_string.operator_concat (GALGAS_string (".transientDependancyGraph.dot") COMMA_SOURCE_FILE_AT_LINE (149)) ;
    //-------- @methodCallInstructionForGeneration
    GALGAS_bool joker_4346_0 ; // Joker input parameter
    var_s.method_writeToFileWhenDifferentContents (var_path, joker_4346_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (150)) ;
    //-------- END @methodCallInstructionForGeneration
  }
  //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
  GALGAS__32_stringlist var_transientDependencyArcList = var_transientDependencyGraph.reader_arcs (SOURCE_FILE_AT_LINE (153)) ;
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_1 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE_AT_LINE (154)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
  if (kBoolTrue == test_1) {
    //-------- @ifInstructionForGeneration
    const enumGalgasBool test_2 = GALGAS_bool (kIsStrictSup, var_transientDependencyGraph.reader_undefinedNodeCount (SOURCE_FILE_AT_LINE (155)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
    if (kBoolTrue == test_2) {
      //-------- @foreachInstructionForGeneration
      cEnumerator_stringlist enumerator_4636 (var_transientDependencyGraph.reader_undefinedNodeKeyList (SOURCE_FILE_AT_LINE (156)), kEnumeration_up) ;
      //--- simple foreach instruction
      while (enumerator_4636.hasCurrentObject ()) {
        //-------- @errorInstructionForGeneration
        inCompiler->emitSemanticError (var_endOfSourceFile, GALGAS_string ("the '").operator_concat (enumerator_4636.current_mValue (HERE) COMMA_SOURCE_FILE_AT_LINE (157)).operator_concat (GALGAS_string ("' property is not defined") COMMA_SOURCE_FILE_AT_LINE (157)) COMMA_SOURCE_FILE_AT_LINE (157)) ;
        enumerator_4636.gotoNextObject () ;
      }
    }else if (kBoolFalse == test_2) {
      //-------- @localVariableDeclarationForGeneration
      GALGAS_stringlist var_unsortedTransientList ;
      //-------- @methodCallInstructionForGeneration
      GALGAS_lstringlist joker_4883_0 ; // Joker input parameter
      GALGAS_lstringlist joker_4925_0 ; // Joker input parameter
      var_transientDependencyGraph.method_topologicalSort (var_sortedTransientOrderedList, joker_4883_0, var_unsortedTransientList, joker_4925_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (161)) ;
      //-------- END @methodCallInstructionForGeneration
      //-------- @ifInstructionForGeneration
      const enumGalgasBool test_3 = GALGAS_bool (kIsStrictSup, var_unsortedTransientList.reader_length (SOURCE_FILE_AT_LINE (167)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
      if (kBoolTrue == test_3) {
        //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
        GALGAS_string var_s = var_unsortedTransientList.reader_length (SOURCE_FILE_AT_LINE (168)).reader_string (SOURCE_FILE_AT_LINE (168)).operator_concat (GALGAS_string (" transient declarations are involved in circular dependancies:") COMMA_SOURCE_FILE_AT_LINE (168)) ;
        //-------- @foreachInstructionForGeneration
        cEnumerator_stringlist enumerator_5155 (var_unsortedTransientList, kEnumeration_up) ;
        //--- simple foreach instruction
        while (enumerator_5155.hasCurrentObject ()) {
          //-------- @concatInstructionForGeneration
          var_s.dotAssign_operation (GALGAS_string ("\n"
            "-  ").operator_concat (enumerator_5155.current_mValue (HERE) COMMA_SOURCE_FILE_AT_LINE (170)) COMMA_SOURCE_FILE_AT_LINE (170)) ;
          enumerator_5155.gotoNextObject () ;
        }
        //-------- @errorInstructionForGeneration
        inCompiler->emitSemanticError (var_endOfSourceFile, var_s COMMA_SOURCE_FILE_AT_LINE (172)) ;
      }
    }
  }
  //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
  GALGAS_string var_sourceDirectoryPath = constinArgument_inSourceFile.mAttribute_string.reader_stringByDeletingLastPathComponent (SOURCE_FILE_AT_LINE (178)) ;
  { //-------- @routineCallInstructionForGeneration
  routine_generateOutletClassCode (var_outletClassMap, var_sourceDirectoryPath, inCompiler COMMA_SOURCE_FILE_AT_LINE (179)) ;
  } //-------- @routineCallInstructionForGeneration
  { //-------- @routineCallInstructionForGeneration
  routine_generateClassCode (var_transientDependencyArcList, var_classMap, var_sourceDirectoryPath, inCompiler COMMA_SOURCE_FILE_AT_LINE (180)) ;
  } //-------- @routineCallInstructionForGeneration
  { //-------- @routineCallInstructionForGeneration
  routine_generateEntityCode (var_transientDependencyArcList, var_entityListForGeneration, var_sourceDirectoryPath, inCompiler COMMA_SOURCE_FILE_AT_LINE (181)) ;
  } //-------- @routineCallInstructionForGeneration
  { //-------- @routineCallInstructionForGeneration
  routine_generatePreferencesCode (var_transientDependencyArcList, var_preferencesMap, var_sourceDirectoryPath, inCompiler COMMA_SOURCE_FILE_AT_LINE (182)) ;
  } //-------- @routineCallInstructionForGeneration
  { //-------- @routineCallInstructionForGeneration
  routine_generateDocumentCode (var_transientDependencyArcList, var_documentMap, var_sourceDirectoryPath, inCompiler COMMA_SOURCE_FILE_AT_LINE (183)) ;
  } //-------- @routineCallInstructionForGeneration
  { //-------- @routineCallInstructionForGeneration
  routine_generateCursorCode (var_userCursorMap, var_predefinedCursorList, var_sourceDirectoryPath, inCompiler COMMA_SOURCE_FILE_AT_LINE (184)) ;
  } //-------- @routineCallInstructionForGeneration
  { //-------- @routineCallInstructionForGeneration
  routine_generateEnumerations (var_enumMap, var_sourceDirectoryPath, inCompiler COMMA_SOURCE_FILE_AT_LINE (185)) ;
  } //-------- @routineCallInstructionForGeneration
  { //-------- @routineCallInstructionForGeneration
  routine_generateControllerCode (var_controllerClassMap, var_sourceDirectoryPath, inCompiler COMMA_SOURCE_FILE_AT_LINE (186)) ;
  } //-------- @routineCallInstructionForGeneration
  { //-------- @routineCallInstructionForGeneration
  routine_generateTransientDependencyFiles (var_transientDependencyArcList, var_sourceDirectoryPath, var_sortedTransientOrderedList, inCompiler COMMA_SOURCE_FILE_AT_LINE (188)) ;
  } //-------- @routineCallInstructionForGeneration
  //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
  GALGAS_stringset var_generateSet = GALGAS_stringset::constructor_emptySet (SOURCE_FILE_AT_LINE (194)) ;
  //-------- @plusEqualnstructionForGeneration
  var_generateSet.addAssign_operation (GALGAS_string ("easy-bindings-utilities") COMMA_SOURCE_FILE_AT_LINE (195)) ;
  //-------- @plusEqualnstructionForGeneration
  var_generateSet.addAssign_operation (GALGAS_string ("PMAllocationDebug") COMMA_SOURCE_FILE_AT_LINE (196)) ;
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_4 = GALGAS_bool (kIsStrictSup, var_documentMap.reader_count (SOURCE_FILE_AT_LINE (197)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
  if (kBoolTrue == test_4) {
    //-------- @plusEqualnstructionForGeneration
    var_generateSet.addAssign_operation (GALGAS_string ("PMAbstractPersistentDocument") COMMA_SOURCE_FILE_AT_LINE (198)) ;
    //-------- @plusEqualnstructionForGeneration
    var_generateSet.addAssign_operation (GALGAS_string ("PMBinaryFlatDocument") COMMA_SOURCE_FILE_AT_LINE (199)) ;
    //-------- @plusEqualnstructionForGeneration
    var_generateSet.addAssign_operation (GALGAS_string ("PMbz2DataCategory") COMMA_SOURCE_FILE_AT_LINE (200)) ;
    //-------- @plusEqualnstructionForGeneration
    var_generateSet.addAssign_operation (GALGAS_string ("PMzlibDataCategory") COMMA_SOURCE_FILE_AT_LINE (201)) ;
    //-------- @plusEqualnstructionForGeneration
    var_generateSet.addAssign_operation (GALGAS_string ("PMDataScanner") COMMA_SOURCE_FILE_AT_LINE (202)) ;
    //-------- @plusEqualnstructionForGeneration
    var_generateSet.addAssign_operation (GALGAS_string ("PMEmbeddedEntityDatabase") COMMA_SOURCE_FILE_AT_LINE (203)) ;
    //-------- @plusEqualnstructionForGeneration
    var_generateSet.addAssign_operation (GALGAS_string ("PMEmbeddedObjectDatabase") COMMA_SOURCE_FILE_AT_LINE (204)) ;
    //-------- @plusEqualnstructionForGeneration
    var_generateSet.addAssign_operation (GALGAS_string ("PMLoadedEntityDatabase") COMMA_SOURCE_FILE_AT_LINE (205)) ;
    //-------- @plusEqualnstructionForGeneration
    var_generateSet.addAssign_operation (GALGAS_string ("PMLoadedEntityDescription") COMMA_SOURCE_FILE_AT_LINE (206)) ;
    //-------- @plusEqualnstructionForGeneration
    var_generateSet.addAssign_operation (GALGAS_string ("PMLoadedObjectDatabase") COMMA_SOURCE_FILE_AT_LINE (207)) ;
    //-------- @plusEqualnstructionForGeneration
    var_generateSet.addAssign_operation (GALGAS_string ("PMMutableDataWriteCategory") COMMA_SOURCE_FILE_AT_LINE (208)) ;
  }
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_5 = GALGAS_bool (kIsStrictSup, var_entityListForGeneration.reader_length (SOURCE_FILE_AT_LINE (210)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
  if (kBoolTrue == test_5) {
    //-------- @plusEqualnstructionForGeneration
    var_generateSet.addAssign_operation (GALGAS_string ("PMManagedObject") COMMA_SOURCE_FILE_AT_LINE (211)) ;
  }
  //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
  GALGAS_filewrapper var_fw = GALGAS_filewrapper (gWrapperDirectory_0_objective_5F_c_5F_sources) ;
  //-------- @foreachInstructionForGeneration
  cEnumerator_stringlist enumerator_7220 (var_fw.reader_allTextFilePathes (SOURCE_FILE_AT_LINE (215)), kEnumeration_up) ;
  //--- simple foreach instruction
  while (enumerator_7220.hasCurrentObject ()) {
    //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
    GALGAS_string var_sourceName = enumerator_7220.current_mValue (HERE).reader_lastPathComponent (SOURCE_FILE_AT_LINE (216)) ;
    //-------- @ifInstructionForGeneration
    const enumGalgasBool test_6 = var_generateSet.reader_hasKey (var_sourceName.reader_stringByDeletingPathExtension (SOURCE_FILE_AT_LINE (217)) COMMA_SOURCE_FILE_AT_LINE (217)).boolEnum () ;
    if (kBoolTrue == test_6) {
      { //-------- @typeMethodInstructionForGeneration
      GALGAS_string::class_method_generateFile (var_sourceDirectoryPath.operator_concat (enumerator_7220.current_mValue (HERE).reader_stringByDeletingLastPathComponent (SOURCE_FILE_AT_LINE (219)) COMMA_SOURCE_FILE_AT_LINE (219)), var_sourceName, var_fw.reader_textFileContentsAtPath (enumerator_7220.current_mValue (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (221)), inCompiler COMMA_SOURCE_FILE_AT_LINE (218)) ;
      } //-------- @routineCallInstructionForGeneration
    }
    enumerator_7220.gotoNextObject () ;
  }
}


//---------------------------------------------------------------------------*
//                                                                           *
//                              Routine 'after'                              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_after (C_Compiler * /* inCompiler */
                    COMMA_UNUSED_LOCATION_ARGS) {
}


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


