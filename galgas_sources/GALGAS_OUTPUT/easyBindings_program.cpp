//-----------------------------------------------------------------------------*
//                                                                             *
//                      File 'easyBindings_program.cpp'                        *
//                         Generated by version 2.6.0                          *
//                        july 5th, 2014, at 18h19'1"                          *
//                                                                             *
//-----------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "easyBindings_program.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "utilities/F_DisplayException.h"
#include "utilities/basic-allocation.h"
#include "utilities/cpp-allocation.h"
#include "utilities/C_PrologueEpilogue.h"
#include "command_line_interface/F_mainForLIBPM.h"
#include "command_line_interface/C_builtin_CLI_Options.h"
#include "command_line_interface/F_Analyze_CLI_Options.h"
#include "project_header.h"

//-----------------------------------------------------------------------------*

#include "easyBindings_grammar.h"
#include "easyBindings_options.h"

//-----------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "easyBindings_program.gProgram", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//-----------------------------------------------------------------------------*
//                                                                             *
//                      print_tool_help_message                                *
//                                                                             *
//-----------------------------------------------------------------------------*

static void print_tool_help_message (void) {
  co << "Compiled with GALGAS revision NUMERO_REVISION_GALGAS\n" ;
}

//-----------------------------------------------------------------------------*

static const char * kSourceFileExtensions [] = {
  "easyBindings",
  NULL
} ;    

//-----------------------------------------------------------------------------*

static const char * kSourceFileHelpMessages [] = {
  "a source text file with the .easyBindings extension",
  NULL
} ;    

//-----------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  static const char * kVersionString = "version " PROJECT_VERSION_STRING " [debug]" ;
#else
  static const char * kVersionString = "version " PROJECT_VERSION_STRING ;
#endif

//-----------------------------------------------------------------------------*
//                                                                             *
//                      M A I N    F O R    L I B P M                          *
//                                                                             *
//-----------------------------------------------------------------------------*

int mainForLIBPM (int inArgc, const char * inArgv []) {
//--- Analyze Command Line Options
  TC_UniqueArray <C_String> sourceFilesArray ;
  F_Analyze_CLI_Options (inArgc, inArgv,
                         kVersionString,
                         sourceFilesArray,
                         kSourceFileExtensions,
                         kSourceFileHelpMessages,
                         print_tool_help_message) ;
//---
  bool verboseOptionOn = true ;
  int16_t returnCode = 0 ; // No error
//--- Set Execution mode
  C_String executionModeOptionErrorMessage ;
  setExecutionMode (executionModeOptionErrorMessage) ;
  if (executionModeOptionErrorMessage.length () > 0) {
    co << executionModeOptionErrorMessage ;
    returnCode = 1 ;
  }else{
  //--- Common lexique object
    C_Compiler * commonLexique = NULL ;
    macroMyNew (commonLexique, C_Compiler (NULL, "", "" COMMA_HERE)) ;
    try{
      routine_before (commonLexique COMMA_HERE) ;
      verboseOptionOn = gOption_galgas_5F_builtin_5F_options_verbose_5F_output.mValue ;
      for (int32_t i=0 ; i<sourceFilesArray.count () ; i++) {
        setCurrentCompiledFilePath (sourceFilesArray (i COMMA_HERE)) ;
        if (gOption_galgas_5F_builtin_5F_options_trace.mValue) {
          enableTraceWithPath (sourceFilesArray (i COMMA_HERE)) ;
        }
        const C_String fileExtension = sourceFilesArray (i COMMA_HERE).pathExtension () ;
        const GALGAS_string sfp = GALGAS_string (sourceFilesArray (i COMMA_HERE)) ;
        const GALGAS_location location = commonLexique->here () ;
        const GALGAS_lstring sourceFilePath (sfp, location) ;
        int16_t r = 0 ;
        if (fileExtension == "easyBindings") {
          routine_programRule_5F__30_ (sourceFilePath, commonLexique COMMA_HERE) ;
        }else{
          printf ("*** Error: unhandled extension for file '%s' ***\n", sourceFilesArray (i COMMA_HERE).cString (HERE)) ;
          r = 1 ;
        }
        if (r != 0) {
          returnCode = r ;
        }
        closeTrace () ;
      }
    //--- Error or warnings ?
      if (totalErrorCount () > 0) {
        returnCode = 1 ; // Error code
      }else if (totalWarningCount () > 0) {
        if (gOption_galgas_5F_builtin_5F_options_treat_5F_warnings_5F_as_5F_error.mValue) {
          returnCode = 1 ; // Error code
          if (verboseOptionOn) {
            printf ("** Note: warnings are treated as errors. **\n") ;
          }
        }
      }
    //--- Epilogue
      routine_after (commonLexique COMMA_HERE) ;
    //--- Display error and warnings count
      if (gOption_galgas_5F_builtin_5F_options_verbose_5F_output.mValue || (totalWarningCount () > 0) || (totalErrorCount () > 0)) {
        C_String message ;
        if (totalWarningCount () == 0) {
          message << "No warning" ;
        }else if (totalWarningCount () == 1) {
          message << "1 warning" ;
        }else{
          message << cStringWithSigned (totalWarningCount ()) << " warnings" ;
        }
        message << ", " ;
        if (totalErrorCount () == 0) {
          message << "no error" ;
        }else if (totalErrorCount () == 1) {
          message << "1 error" ;
        }else{
          message << cStringWithSigned (totalErrorCount ()) << " errors" ;
        }
        message << ".\n" ;
        ggs_printMessage (message COMMA_HERE) ;
      }
    }catch (const ::std:: exception & e) {
      F_default_display_exception (e) ;
      returnCode = 1 ; // Error code
    }catch (...) {
      printf ("**** Unknow exception ****\n") ;
      throw ;
    }
    macroDetachSharedObject (commonLexique) ;
  }
  return returnCode ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//                    Filewrapper 'predefinedOutletClasses'                    *
//                                                                             *
//-----------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_predefinedOutletClasses_0 [1] = {
  NULL
} ;

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_predefinedOutletClasses_0 [1] = {
  NULL
} ;

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_predefinedOutletClasses (
  "",
  0,
  gWrapperAllFiles_predefinedOutletClasses_0,
  0,
  gWrapperAllDirectories_predefinedOutletClasses_0
) ;


//-----------------------------------------------------------------------------*
//                                                                             *
//          Filewrapper template 'predefinedOutletClasses sourceFile'          *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_predefinedOutletClasses_sourceFile (C_Compiler * /* inCompiler */
                                                                      COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "predefined objectController NSObjectController {\n"
    "  NSDeletesObjectsOnRemove : Bool ;\n"
    "  NSValidatesImmediately : Bool ;\n"
    "  NSConditionallySetsEditable : Bool ;\n"
    "  NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "  NSHandlesContentAsCompoundValue : Bool ;\n"
    "  NSRaisesForNotApplicableKeys : Bool ;\n"
    "}{\n"
    "  action add ;\n"
    "  action remove ;\n"
    "  attribute Bool canAdd ;\n"
    "  attribute Bool canRemove ;\n"
    "  $editable : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "#  $contentObject : toOne {\n"
    "#    NSDeletesObjectsOnRemove : Bool ;\n"
    "#    NSValidatesImmediately : Bool ;\n"
    "#    NSConditionallySetsEditable : Bool ;\n"
    "#    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "#    NSHandlesContentAsCompoundValue : Bool ;\n"
    "#    NSRaisesForNotApplicableKeys : Bool ;\n"
    "#  }\n"
    "  # Warning: skipped $managedObjectContext binding\n"
    "}\n"
    "\n"
    "predefined entityController PMEntityController {\n"
    "  NSDeletesObjectsOnRemove : Bool ;\n"
    "  NSValidatesImmediately : Bool ;\n"
    "  NSConditionallySetsEditable : Bool ;\n"
    "  NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "  NSHandlesContentAsCompoundValue : Bool ;\n"
    "  NSRaisesForNotApplicableKeys : Bool ;\n"
    "}{\n"
    "  action add ;\n"
    "  action remove ;\n"
    "  attribute Bool canAdd ;\n"
    "  attribute Bool canRemove ;\n"
    "  $editable : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "#  $contentObject : toOne {\n"
    "#    NSDeletesObjectsOnRemove : Bool ;\n"
    "#    NSValidatesImmediately : Bool ;\n"
    "#    NSConditionallySetsEditable : Bool ;\n"
    "#    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "#    NSHandlesContentAsCompoundValue : Bool ;\n"
    "#    NSRaisesForNotApplicableKeys : Bool ;\n"
    "#  }\n"
    "  # Warning: skipped $managedObjectContext binding\n"
    "}\n"
    "\n"
    "predefined arrayController NSArrayController {\n"
    "  NSAlwaysPresentsApplicationModalAlertsBindingOption : Bool ;\n"
    "  NSConditionallySetsEditableBindingOption : Bool ;\n"
    "  NSDeletesObjectsOnRemoveBindingsOption : Bool ;\n"
    "  NSHandlesContentAsCompoundValueBindingOption : Bool ;\n"
    "  NSRaisesForNotApplicableKeysBindingOption : Bool ;\n"
    "  NSSelectsAllWhenSettingContentBindingOption : Bool ;\n"
    "  NSValidatesImmediatelyBindingOption : Bool ;\n"
    "}{\n"
    "  action add ;\n"
    "  action remove ;\n"
    "  attribute Bool canAdd ;\n"
    "  attribute Bool canRemove ;\n"
    "  $editable : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined treeController NSTreeController {\n"
    "  NSAlwaysPresentsApplicationModalAlertsBindingOption : Bool ;\n"
    "  NSConditionallySetsEditableBindingOption : Bool ;\n"
    "  NSDeletesObjectsOnRemoveBindingsOption : Bool ;\n"
    "  NSHandlesContentAsCompoundValueBindingOption : Bool ;\n"
    "  NSRaisesForNotApplicableKeysBindingOption : Bool ;\n"
    "  NSSelectsAllWhenSettingContentBindingOption : Bool ;\n"
    "  NSValidatesImmediatelyBindingOption : Bool ;\n"
    "}{\n"
    "  action add ;\n"
    "  action remove ;\n"
    "  attribute Bool canAdd ;\n"
    "  attribute Bool canRemove ;\n"
    "  $editable : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "#  $contentSet : toMany {\n"
    "#    NSAlwaysPresentsApplicationModalAlertsBindingOption : Bool ;\n"
    "#    NSConditionallySetsEditableBindingOption : Bool ;\n"
    "#    NSDeletesObjectsOnRemoveBindingsOption : Bool ;\n"
    "#    NSHandlesContentAsCompoundValueBindingOption : Bool ;\n"
    "#    NSRaisesForNotApplicableKeysBindingOption : Bool ;\n"
    "#    NSSelectsAllWhenSettingContentBindingOption : Bool ;\n"
    "#    NSValidatesImmediatelyBindingOption : Bool ;\n"
    "#  }\n"
    "#  $contentArray : array {\n"
    "#    NSAlwaysPresentsApplicationModalAlertsBindingOption : Bool ;\n"
    "#    NSConditionallySetsEditableBindingOption : Bool ;\n"
    "#    NSDeletesObjectsOnRemoveBindingsOption : Bool ;\n"
    "#    NSHandlesContentAsCompoundValueBindingOption : Bool ;\n"
    "#    NSRaisesForNotApplicableKeysBindingOption : Bool ;\n"
    "#    NSSelectsAllWhenSettingContentBindingOption : Bool ;\n"
    "#    NSValidatesImmediatelyBindingOption : Bool ;\n"
    "#  }\n"
    "  # Warning: skipped $contentArray binding\n"
    "#  $selectionIndexes : NSIndexSet {\n"
    "#    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "#    NSValidatesImmediately : Bool ;\n"
    "#    NSRaisesForNotApplicableKeys : Bool ;\n"
    "#  }\n"
    "#  $contentArrayForMultipleSelection : NSObject {\n"
    "#    NSConditionallySetsEditable : Bool ;\n"
    "#    NSSelectsAllWhenSettingContent : Bool ;\n"
    "#    NSRaisesForNotApplicableKeys : Bool ;\n"
    "#  }\n"
    "  # Warning: skipped $contentSet binding\n"
    "  # Warning: skipped $managedObjectContext binding\n"
    "#  $sortDescriptors : NSArray {\n"
    "#    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "#    NSValidatesImmediately : Bool ;\n"
    "#    NSRaisesForNotApplicableKeys : Bool ;\n"
    "#  }\n"
    "#  $contentObject : NSObject {\n"
    "#    NSDeletesObjectsOnRemove : Bool ;\n"
    "#    NSValidatesImmediately : Bool ;\n"
    "#    NSConditionallySetsEditable : Bool ;\n"
    "#    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "#    NSSelectsAllWhenSettingContent : Bool ;\n"
    "#    NSHandlesContentAsCompoundValue : Bool ;\n"
    "#    NSRaisesForNotApplicableKeys : Bool ;\n"
    "#  }\n"
    "  # Warning: skipped $filterPredicate binding\n"
    "}\n"
    "\n"
    "predefined entityArrayController PMEntityArrayController {\n"
    "  NSAlwaysPresentsApplicationModalAlertsBindingOption : Bool ;\n"
    "  NSConditionallySetsEditableBindingOption : Bool ;\n"
    "  NSDeletesObjectsOnRemoveBindingsOption : Bool ;\n"
    "  NSHandlesContentAsCompoundValueBindingOption : Bool ;\n"
    "  NSRaisesForNotApplicableKeysBindingOption : Bool ;\n"
    "  NSSelectsAllWhenSettingContentBindingOption : Bool ;\n"
    "  NSValidatesImmediatelyBindingOption : Bool ;\n"
    "}{\n"
    "  action add ;\n"
    "  action remove ;\n"
    "  attribute Bool canAdd ;\n"
    "  attribute Bool canRemove ;\n"
    "  $editable : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSBox {\n"
    "  $hidden : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $transparent : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $title : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  # Warning: skipped $displayPatternTitle1 binding\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSBrowser {\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontBold : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontItalic : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  # Warning: skipped $value binding\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $enabled : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "#  $contentValues : NSObject {\n"
    "#    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "#    NSValidatesImmediately : Bool ;\n"
    "#    NSRaisesForNotApplicableKeys : Bool ;\n"
    "#  }\n"
    "  $hidden : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontSize : AnyScalar {\n"
    "    NSMultipleValuesPlaceholder : AnyScalar ;\n"
    "    NSNullPlaceholder : AnyScalar ;\n"
    "    NSNotApplicablePlaceholder : AnyScalar ;\n"
    "    NSNoSelectionPlaceholder : AnyScalar ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  # Warning: skipped $selectionIndexPaths binding\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  # Warning: skipped $content binding\n"
    "}\n"
    "\n"
    "predefined outletClass NSButton {\n"
    "  $alternateImage : NSImage {\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "#  $argument : NSObject {\n"
    "#    NSConditionallySetsEnabled : Bool ;\n"
    "#    NSConditionallySetsHidden : Bool ;\n"
    "#    NSSelectorName : NSString ;\n"
    "#    NSAllowsNullArgument : Bool ;\n"
    "#    NSInvokesSeparatelyWithArrayObjects : Bool ;\n"
    "#    NSRaisesForNotApplicableKeys : Bool ;\n"
    "#  }\n"
    "  # Warning: skipped $fontBold binding\n"
    "  # Warning: skipped $fontItalic binding\n"
    "  $title : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $alternateTitle : NSString {\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $image : NSImage {\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  # Warning: skipped $fontFamilyName binding\n"
    "#  $target : NSObject {\n"
    "#    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "#    NSConditionallySetsEnabled : Bool ;\n"
    "#    NSSelectorName : NSString ;\n"
    "#    NSConditionallySetsHidden : Bool ;\n"
    "#    NSRaisesForNotApplicableKeys : Bool ;\n"
    "#  }\n"
    "  $enabled : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $hidden : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  # Warning: skipped $fontSize binding\n"
    "  # Warning: skipped $fontName binding\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $value : AnyScalar, Bool {\n"
    "    NSAllowsEditingMultipleValuesSelectionBindingOption : Bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlertsBindingOption : Bool ;\n"
    "    NSConditionallySetsEnabledBindingOption : Bool ;\n"
    "    NSConditionallySetsHiddenBindingOption : Bool ;\n"
    "    NSRaisesForNotApplicableKeysBindingOption : Bool ;\n"
    "    NSValidatesImmediatelyBindingOption : Bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSButtonCell {\n"
    "  $alternateImage : NSImage {\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "#  $argument : NSObject {\n"
    "#    NSConditionallySetsEnabled : Bool ;\n"
    "#    NSSelectorName : NSString ;\n"
    "#    NSConditionallySetsEditable : Bool ;\n"
    "#    NSAllowsNullArgument : Bool ;\n"
    "#    NSInvokesSeparatelyWithArrayObjects : Bool ;\n"
    "#    NSRaisesForNotApplicableKeys : Bool ;\n"
    "#  }\n"
    "  # Warning: skipped $fontBold binding\n"
    "  $editable : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  # Warning: skipped $fontItalic binding\n"
    "  $title : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $alternateTitle : NSString {\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $image : NSImage {\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  # Warning: skipped $fontFamilyName binding\n"
    "#  $target : NSObject {\n"
    "#    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "#    NSConditionallySetsEditable : Bool ;\n"
    "#    NSConditionallySetsEnabled : Bool ;\n"
    "#    NSSelectorName : NSString ;\n"
    "#    NSRaisesForNotApplicableKeys : Bool ;\n"
    "#  }\n"
    "  $enabled : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  # Warning: skipped $fontSize binding\n"
    "  # Warning: skipped $fontName binding\n"
    "}\n"
    "\n"
    "predefined outletClass NSCollectionView {\n"
    "  # Warning: skipped $selectionIndexes binding\n"
    "  # Warning: skipped $content binding\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $hidden : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSColorWell {\n"
    "  $value : NSColor {\n"
    "    NSConditionallySetsEnabled : Bool ;\n"
    "    NSConditionallySetsHidden : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $enabled : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $hidden : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSComboBox {\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontBold : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $editable : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontItalic : Bool {\n"
    "    NSMultipleValuesPlaceholder : AnyScalar ;\n"
    "    NSNullPlaceholder : AnyScalar ;\n"
    "    NSNotApplicablePlaceholder : AnyScalar ;\n"
    "    NSNoSelectionPlaceholder : AnyScalar ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  # Warning: skipped $value binding\n"
    "  $alignment : AnyScalar {\n"
    "    NSMultipleValuesPlaceholder : AnyScalar ;\n"
    "    NSNullPlaceholder : AnyScalar ;\n"
    "    NSNotApplicablePlaceholder : AnyScalar ;\n"
    "    NSNoSelectionPlaceholder : AnyScalar ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $textColor : NSColor {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $enabled : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $hidden : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontSize : AnyScalar {\n"
    "    NSMultipleValuesPlaceholder : AnyScalar ;\n"
    "    NSNullPlaceholder : AnyScalar ;\n"
    "    NSNotApplicablePlaceholder : AnyScalar ;\n"
    "    NSNoSelectionPlaceholder : AnyScalar ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  # Warning: skipped $contentValues binding\n"
    "  # Warning: skipped $content binding\n"
    "}\n"
    "\n"
    "predefined outletClass NSDatePicker {\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $maxValue : NSDate {\n"
    "    NSMultipleValuesPlaceholder : AnyScalar ;\n"
    "    NSNullPlaceholder : AnyScalar ;\n"
    "    NSNotApplicablePlaceholder : AnyScalar ;\n"
    "    NSNoSelectionPlaceholder : AnyScalar ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontBold : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $textColor : NSColor {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontItalic : Bool {\n"
    "    NSMultipleValuesPlaceholder : AnyScalar ;\n"
    "    NSNullPlaceholder : AnyScalar ;\n"
    "    NSNotApplicablePlaceholder : AnyScalar ;\n"
    "    NSNoSelectionPlaceholder : AnyScalar ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $value : NSDate {\n"
    "    NSConditionallySetsEnabled : Bool ;\n"
    "    NSConditionallySetsHidden : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $minValue : NSDate {\n"
    "    NSMultipleValuesPlaceholder : AnyScalar ;\n"
    "    NSNullPlaceholder : AnyScalar ;\n"
    "    NSNotApplicablePlaceholder : AnyScalar ;\n"
    "    NSNoSelectionPlaceholder : AnyScalar ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $enabled : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $hidden : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontSize : AnyScalar {\n"
    "    NSMultipleValuesPlaceholder : AnyScalar ;\n"
    "    NSNullPlaceholder : AnyScalar ;\n"
    "    NSNotApplicablePlaceholder : AnyScalar ;\n"
    "    NSNoSelectionPlaceholder : AnyScalar ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSDatePickerCell {\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $maxValue : NSDate {\n"
    "    NSMultipleValuesPlaceholder : AnyScalar ;\n"
    "    NSNullPlaceholder : AnyScalar ;\n"
    "    NSNotApplicablePlaceholder : AnyScalar ;\n"
    "    NSNoSelectionPlaceholder : AnyScalar ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontBold : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $editable : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $textColor : NSColor {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $minValue : NSDate {\n"
    "    NSMultipleValuesPlaceholder : AnyScalar ;\n"
    "    NSNullPlaceholder : AnyScalar ;\n"
    "    NSNotApplicablePlaceholder : AnyScalar ;\n"
    "    NSNoSelectionPlaceholder : AnyScalar ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $value : NSDate {\n"
    "    NSConditionallySetsEnabled : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSConditionallySetsEditable : Bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontItalic : Bool {\n"
    "    NSMultipleValuesPlaceholder : AnyScalar ;\n"
    "    NSNullPlaceholder : AnyScalar ;\n"
    "    NSNotApplicablePlaceholder : AnyScalar ;\n"
    "    NSNoSelectionPlaceholder : AnyScalar ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $enabled : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontSize : AnyScalar {\n"
    "    NSMultipleValuesPlaceholder : AnyScalar ;\n"
    "    NSNullPlaceholder : AnyScalar ;\n"
    "    NSNotApplicablePlaceholder : AnyScalar ;\n"
    "    NSNoSelectionPlaceholder : AnyScalar ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSDrawer {\n"
    "  $visible : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSForm {\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontSize : AnyScalar {\n"
    "    NSMultipleValuesPlaceholder : AnyScalar ;\n"
    "    NSNullPlaceholder : AnyScalar ;\n"
    "    NSNotApplicablePlaceholder : AnyScalar ;\n"
    "    NSNoSelectionPlaceholder : AnyScalar ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontBold : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $enabled : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $hidden : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontItalic : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSFormCell {\n"
    "  $fontSize : AnyNumber {\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontBold : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $editable : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $enabled : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $value : NSString {\n"
    "    NSConditionallySetsEnabled : Bool ;\n"
    "    NSContinuouslyUpdatesValue : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSConditionallySetsEditable : Bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontItalic : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSImageCell {\n"
    "  $editable : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $value : NSImage {\n"
    "    NSConditionallySetsEnabled : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSConditionallySetsEditable : Bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $enabled : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $valuePath : NSString {\n"
    "    NSConditionallySetsEnabled : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSConditionallySetsEditable : Bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  # Warning: skipped $data binding\n"
    "  $valueURL : NSString {\n"
    "    NSConditionallySetsEnabled : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSConditionallySetsEditable : Bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSImageView {\n"
    "  $valuePath : NSString {\n"
    "    NSConditionallySetsEnabled : Bool ;\n"
    "    NSConditionallySetsHidden : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSConditionallySetsEditable : Bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $hidden : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $editable : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $enabled : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  # Warning: skipped $data binding\n"
    "  $value : NSImage {\n"
    "    NSConditionallySetsEnabled : Bool ;\n"
    "    NSConditionallySetsHidden : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSConditionallySetsEditable : Bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $valueURL : NSString {\n"
    "    NSConditionallySetsEnabled : Bool ;\n"
    "    NSConditionallySetsHidden : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSConditionallySetsEditable : Bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSLevelIndicator {\n"
    "  $hidden : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $enabled : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $maxValue : AnyNumber {\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $criticalValue : AnyNumber {\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $minValue : AnyNumber {\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $value : AnyNumber {\n"
    "    NSConditionallySetsEnabled : Bool ;\n"
    "    NSConditionallySetsHidden : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $warningValue : AnyNumber {\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSLevelIndicatorCell {\n"
    "  $editable : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $enabled : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $maxValue : AnyNumber {\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $criticalValue : AnyNumber {\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $minValue : AnyNumber {\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $value : AnyNumber {\n"
    "    NSConditionallySetsEnabled : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSConditionallySetsEditable : Bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $warningValue : AnyNumber {\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSMatrix {\n"
    "  $selectedIndex : AnyScalar {\n"
    "    NSConditionallySetsEnabled : Bool ;\n"
    "    NSConditionallySetsHidden : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $selectedValue : NSString {\n"
    "    NSConditionallySetsEnabled : Bool ;\n"
    "    NSConditionallySetsHidden : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  # Warning: skipped $selectedObject binding\n"
    "  $fontBold : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontItalic : Bool {\n"
    "    NSMultipleValuesPlaceholder : AnyScalar ;\n"
    "    NSNullPlaceholder : AnyScalar ;\n"
    "    NSNotApplicablePlaceholder : AnyScalar ;\n"
    "    NSNoSelectionPlaceholder : AnyScalar ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $selectedTag : AnyScalar {\n"
    "    NSConditionallySetsEnabled : Bool ;\n"
    "    NSConditionallySetsHidden : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $enabled : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  # Warning: skipped $contentObjects binding\n"
    "  $hidden : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontSize : AnyNumber {\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  # Warning: skipped $contentValues binding\n"
    "  # Warning: skipped $content binding\n"
    "}\n"
    "\n"
    "predefined outletClass NSMenuItem {\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "#  $argument : NSObject {\n"
    "#    NSConditionallySetsEnabled : Bool ;\n"
    "#    NSConditionallySetsHidden : Bool ;\n"
    "#    NSSelectorName : NSString ;\n"
    "#    NSAllowsNullArgument : Bool ;\n"
    "#    NSInvokesSeparatelyWithArrayObjects : Bool ;\n"
    "#    NSRaisesForNotApplicableKeys : Bool ;\n"
    "#  }\n"
    "  $fontBold : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontItalic : Bool {\n"
    "    NSMultipleValuesPlaceholder : AnyScalar ;\n"
    "    NSNullPlaceholder : AnyScalar ;\n"
    "    NSNotApplicablePlaceholder : AnyScalar ;\n"
    "    NSNoSelectionPlaceholder : AnyScalar ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $offStateImage : NSImage {\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $title : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $onStateImage : NSImage {\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $image : NSImage {\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "#  $target : NSObject {\n"
    "#    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "#    NSConditionallySetsEnabled : Bool ;\n"
    "#    NSSelectorName : NSString ;\n"
    "#    NSConditionallySetsHidden : Bool ;\n"
    "#    NSRaisesForNotApplicableKeys : Bool ;\n"
    "#  }\n"
    "  $enabled : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $hidden : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontSize : AnyNumber {\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $mixedStateImage : NSImage {\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  # Warning: skipped $value binding\n"
    "}\n"
    "\n"
    "predefined outletClass NSOutlineView {\n"
    "  $tableValue ;\n"
    "  # Warning: skipped $selectionIndexPaths binding\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "#  $doubleClickTarget : NSObject {\n"
    "#    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "#    NSConditionallySetsEnabled : Bool ;\n"
    "#    NSSelectorName : NSString ;\n"
    "#    NSConditionallySetsHidden : Bool ;\n"
    "#    NSRaisesForNotApplicableKeys : Bool ;\n"
    "#  }\n"
    "  $fontBold : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontItalic : Bool {\n"
    "    NSMultipleValuesPlaceholder : AnyScalar ;\n"
    "    NSNullPlaceholder : AnyScalar ;\n"
    "    NSNotApplicablePlaceholder : AnyScalar ;\n"
    "    NSNoSelectionPlaceholder : AnyScalar ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  # Warning: skipped $sortDescriptors binding\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "#  $doubleClickArgument : NSObject {\n"
    "#    NSConditionallySetsEnabled : Bool ;\n"
    "#    NSConditionallySetsHidden : Bool ;\n"
    "#    NSSelectorName : NSString ;\n"
    "#    NSAllowsNullArgument : Bool ;\n"
    "#    NSInvokesSeparatelyWithArrayObjects : Bool ;\n"
    "#    NSRaisesForNotApplicableKeys : Bool ;\n"
    "#  }\n"
    "  $enabled : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $hidden : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontSize : AnyNumber {\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $rowHeight : AnyNumber {\n"
    "    NSMultipleValuesPlaceholder : AnyScalar ;\n"
    "    NSNullPlaceholder : AnyScalar ;\n"
    "    NSNotApplicablePlaceholder : AnyScalar ;\n"
    "    NSNoSelectionPlaceholder : AnyScalar ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  # Warning: skipped $content binding\n"
    "}\n"
    "\n"
    "predefined outletClass NSPanel {\n"
    "  $visible : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $documentEdited : Bool {\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $title : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $representedFilename : NSString {\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $contentWidth : AnyNumber {\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $contentHeight : AnyNumber {\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  # Warning: skipped $displayPatternTitle1 binding\n"
    "}\n"
    "\n"
    "predefined outletClass NSPathCell {\n"
    "  $fontSize : AnyNumber {\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontBold : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $editable : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $enabled : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "#  $value : NSURL {\n"
    "#    NSConditionallySetsEnabled : Bool ;\n"
    "#    NSValidatesImmediately : Bool ;\n"
    "#    NSConditionallySetsEditable : Bool ;\n"
    "#    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "#    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "#    NSRaisesForNotApplicableKeys : Bool ;\n"
    "#  }\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontItalic : Bool {\n"
    "    NSMultipleValuesPlaceholder : AnyScalar ;\n"
    "    NSNullPlaceholder : AnyScalar ;\n"
    "    NSNotApplicablePlaceholder : AnyScalar ;\n"
    "    NSNoSelectionPlaceholder : AnyScalar ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSPathControl {\n"
    "  $fontSize : AnyNumber {\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontBold : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $enabled : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $hidden : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "#  $value : NSURL {\n"
    "#    NSConditionallySetsEnabled : Bool ;\n"
    "#    NSConditionallySetsHidden : Bool ;\n"
    "#    NSValidatesImmediately : Bool ;\n"
    "#    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "#    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "#    NSRaisesForNotApplicableKeys : Bool ;\n"
    "#  }\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontItalic : Bool {\n"
    "    NSMultipleValuesPlaceholder : AnyScalar ;\n"
    "    NSNullPlaceholder : AnyScalar ;\n"
    "    NSNotApplicablePlaceholder : AnyScalar ;\n"
    "    NSNoSelectionPlaceholder : AnyScalar ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSPopUpButton {\n"
    "  $selectedIndex : AnyScalar {\n"
    "    NSConditionallySetsEnabled : Bool ;\n"
    "    NSConditionallySetsHidden : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $selectedValue : NSString {\n"
    "    NSConditionallySetsEnabled : Bool ;\n"
    "    NSConditionallySetsHidden : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  # Warning: skipped $selectedObject binding\n"
    "  $fontBold : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontItalic : Bool {\n"
    "    NSMultipleValuesPlaceholder : AnyScalar ;\n"
    "    NSNullPlaceholder : AnyScalar ;\n"
    "    NSNotApplicablePlaceholder : AnyScalar ;\n"
    "    NSNoSelectionPlaceholder : AnyScalar ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $selectedTag : AnyScalar {\n"
    "    NSConditionallySetsEnabled : Bool ;\n"
    "    NSConditionallySetsHidden : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $enabled : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  # Warning: skipped $contentObjects binding\n"
    "  $hidden : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontSize : AnyNumber {\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  # Warning: skipped $contentValues binding\n"
    "  # Warning: skipped $content binding\n"
    "}\n"
    "\n"
    "predefined outletClass NSPopUpButtonCell {\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $selectedValue : NSString {\n"
    "    NSConditionallySetsEnabled : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSConditionallySetsEditable : Bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  # Warning: skipped $selectedObject binding\n"
    "  # Warning: skipped $onStateImage binding\n"
    "  $fontBold : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $editable : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  # Warning: skipped $offStateImage binding\n"
    "  # Warning: skipped $mixedStateImage binding\n"
    "  $fontItalic : Bool {\n"
    "    NSMultipleValuesPlaceholder : AnyScalar ;\n"
    "    NSNullPlaceholder : AnyScalar ;\n"
    "    NSNotApplicablePlaceholder : AnyScalar ;\n"
    "    NSNoSelectionPlaceholder : AnyScalar ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $selectedTag : AnyScalar {\n"
    "    NSConditionallySetsEnabled : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSConditionallySetsEditable : Bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $enabled : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  # Warning: skipped $contentObjects binding\n"
    "  # Warning: skipped $contentValues binding\n"
    "  $fontSize : AnyNumber {\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $selectedIndex : AnyScalar {\n"
    "    NSConditionallySetsEnabled : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSConditionallySetsEditable : Bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  # Warning: skipped $content binding\n"
    "}\n"
    "\n"
    "predefined outletClass NSPredicateEditor {\n"
    "  $fontSize : AnyNumber {\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontBold : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $editable : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $enabled : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $hidden : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  # Warning: skipped $value binding\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontItalic : Bool {\n"
    "    NSMultipleValuesPlaceholder : AnyScalar ;\n"
    "    NSNullPlaceholder : AnyScalar ;\n"
    "    NSNotApplicablePlaceholder : AnyScalar ;\n"
    "    NSNoSelectionPlaceholder : AnyScalar ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSProgressIndicator {\n"
    "  $hidden : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $maxValue : AnyNumber {\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $animate : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $minValue : AnyNumber {\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $value : AnyNumber {\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "    NSConditionallySetsHidden : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $animationDelay : AnyNumber {\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $isIndeterminate : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSScrollView {\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $hidden : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSSearchField {\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "#  $recentSearches : NSArray {\n"
    "#    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "#    NSValidatesImmediately : Bool ;\n"
    "#    NSRaisesForNotApplicableKeys : Bool ;\n"
    "#  }\n"
    "  $fontItalic : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontBold : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $editable : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "#  $predicate : NSPredicate {\n"
    "#    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "#    NSDisplayName : NSString ;\n"
    "#    NSPredicateFormat : NSString ;\n"
    "#    NSValidatesImmediately : Bool ;\n"
    "#    NSRaisesForNotApplicableKeys : Bool ;\n"
    "#  }\n"
    "  $alignment : AnyScalar {\n"
    "    NSMultipleValuesPlaceholder : AnyScalar ;\n"
    "    NSNullPlaceholder : AnyScalar ;\n"
    "    NSNotApplicablePlaceholder : AnyScalar ;\n"
    "    NSNoSelectionPlaceholder : AnyScalar ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $textColor : NSColor {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $enabled : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $hidden : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontSize : AnyNumber {\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $value : NSString {\n"
    "    NSConditionallySetsEnabled : Bool ;\n"
    "    NSConditionallySetsHidden : Bool ;\n"
    "    NSContinuouslyUpdatesValue : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSConditionallySetsEditable : Bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSSecureTextField {\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontItalic : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontBold : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $editable : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $textColor : NSColor {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $alignment : AnyScalar {\n"
    "    NSMultipleValuesPlaceholder : AnyScalar ;\n"
    "    NSNullPlaceholder : AnyScalar ;\n"
    "    NSNotApplicablePlaceholder : AnyScalar ;\n"
    "    NSNoSelectionPlaceholder : AnyScalar ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $value : NSString {\n"
    "    NSConditionallySetsEnabled : Bool ;\n"
    "    NSConditionallySetsHidden : Bool ;\n"
    "    NSContinuouslyUpdatesValue : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSConditionallySetsEditable : Bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $enabled : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  # Warning: skipped $displayPatternValue1 binding\n"
    "  $fontSize : AnyNumber {\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $hidden : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSSecureTextFieldCell {\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontItalic : Bool {\n"
    "    NSMultipleValuesPlaceholder : AnyScalar ;\n"
    "    NSNullPlaceholder : AnyScalar ;\n"
    "    NSNotApplicablePlaceholder : AnyScalar ;\n"
    "    NSNoSelectionPlaceholder : AnyScalar ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontBold : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $editable : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $textColor : NSColor {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $value : NSString {\n"
    "    NSConditionallySetsEnabled : Bool ;\n"
    "    NSContinuouslyUpdatesValue : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSConditionallySetsEditable : Bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $enabled : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  # Warning: skipped $displayPatternValue1 binding\n"
    "  $fontSize : AnyNumber {\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSSegmentedCell {\n"
    "  $fontSize : AnyNumber {\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontBold : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $editable : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $enabled : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $selectedLabel : NSString {\n"
    "    NSConditionallySetsEnabled : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSConditionallySetsEditable : Bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $selectedTag : AnyScalar {\n"
    "    NSConditionallySetsEnabled : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSConditionallySetsEditable : Bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $selectedIndex : AnyScalar {\n"
    "    NSConditionallySetsEnabled : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSConditionallySetsEditable : Bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontItalic : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSSegmentedControl {\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontBold : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $selectedLabel : NSString {\n"
    "    NSConditionallySetsEnabled : Bool ;\n"
    "    NSConditionallySetsHidden : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontItalic : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $selectedTag : AnyScalar {\n"
    "    NSConditionallySetsEnabled : Bool ;\n"
    "    NSConditionallySetsHidden : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $enabled : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $hidden : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontSize : AnyNumber {\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $selectedIndex : AnyScalar {\n"
    "    NSConditionallySetsEnabled : Bool ;\n"
    "    NSConditionallySetsHidden : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSSlider {\n"
    "  $maxValue : AnyNumber {\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $value : AnyNumber {\n"
    "    NSConditionallySetsEnabled : Bool ;\n"
    "    NSConditionallySetsHidden : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $enabled : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $minValue : AnyNumber {\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $hidden : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSSliderCell {\n"
    "  $editable : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $value : AnyNumber {\n"
    "    NSConditionallySetsEnabled : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSConditionallySetsEditable : Bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $enabled : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $maxValue : AnyNumber {\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $minValue : AnyNumber {\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSSplitView {\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $hidden : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSStepper {\n"
    "  $maxValue : AnyNumber {\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $value : AnyNumber {\n"
    "    NSConditionallySetsEnabled : Bool ;\n"
    "    NSConditionallySetsHidden : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $enabled : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $minValue : AnyNumber {\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $hidden : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSStepperCell {\n"
    "  $editable : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $value : AnyNumber {\n"
    "    NSConditionallySetsEnabled : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSConditionallySetsEditable : Bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $enabled : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $maxValue : AnyNumber {\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $minValue : AnyNumber {\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSTabView {\n"
    "  $fontSize : AnyNumber {\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontBold : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $hidden : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $selectedLabel : NSString {\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $selectedIndex : AnyNumber {\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  # Warning: skipped $selectedIdentifier binding\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontItalic : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSTabViewItem {\n"
    "  $label : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSTableColumn {\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $maxWidth : AnyNumber {\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $width : AnyNumber {\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontItalic : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontBold : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $editable : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $headerTitle : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $minWidth : AnyNumber {\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $textColor : NSColor {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $enabled : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "#  $value : NSString {\n"
    "#    NSConditionallySetsEnabled : Bool ;\n"
    "#    NSContinuouslyUpdatesValue : Bool ;\n"
    "#    NSValidatesImmediately : Bool ;\n"
    "#    NSConditionallySetsEditable : Bool ;\n"
    "#    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "#    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "#    NSCreatesSortDescriptor : Bool ;\n"
    "#    NSRaisesForNotApplicableKeys : Bool ;\n"
    "#  }\n"
    "  # Warning: skipped $displayPatternValue1 binding\n"
    "  $fontSize : AnyNumber {\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSTableView {\n"
    "  # Warning: skipped $selectionIndexes binding\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $tableValue ;\n"
    "#  $doubleClickTarget : NSObject {\n"
    "#    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "#    NSConditionallySetsEnabled : Bool ;\n"
    "#    NSSelectorName : NSString ;\n"
    "#    NSConditionallySetsHidden : Bool ;\n"
    "#    NSRaisesForNotApplicableKeys : Bool ;\n"
    "#  }\n"
    "  $fontBold : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontItalic : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  # Warning: skipped $sortDescriptors binding\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "#  $doubleClickArgument : NSObject {\n"
    "#    NSConditionallySetsEnabled : Bool ;\n"
    "#    NSConditionallySetsHidden : Bool ;\n"
    "#    NSSelectorName : NSString ;\n"
    "#    NSAllowsNullArgument : Bool ;\n"
    "#    NSInvokesSeparatelyWithArrayObjects : Bool ;\n"
    "#    NSRaisesForNotApplicableKeys : Bool ;\n"
    "#  }\n"
    "  $enabled : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $hidden : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontSize : AnyNumber {\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $rowHeight : AnyNumber {\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  # Warning: skipped $content binding\n"
    "}\n"
    "\n"
    "predefined outletClass NSTextField {\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontItalic : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontBold : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $editable : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $textColor : NSColor {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $alignment : AnyScalar {\n"
    "    NSMultipleValuesPlaceholder : AnyScalar ;\n"
    "    NSNullPlaceholder : AnyScalar ;\n"
    "    NSNotApplicablePlaceholder : AnyScalar ;\n"
    "    NSNoSelectionPlaceholder : AnyScalar ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $value : NSString, AnyNumber NSNumberFormatter {\n"
    "    NSConditionallySetsEnabled : Bool ;\n"
    "    NSConditionallySetsHidden : Bool ;\n"
    "    NSContinuouslyUpdatesValue : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSConditionallySetsEditable : Bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $enabled : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  # Warning: skipped $displayPatternValue1 binding\n"
    "  $fontSize : AnyNumber {\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $hidden : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSTextFieldCell {\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontItalic : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontBold : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $editable : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $textColor : NSColor {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $value : NSString {\n"
    "    NSConditionallySetsEnabled : Bool ;\n"
    "    NSContinuouslyUpdatesValue : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSConditionallySetsEditable : Bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $enabled : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  # Warning: skipped $displayPatternValue1 binding\n"
    "  $fontSize : AnyNumber {\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSTextView {\n"
    "  $value : NSString {\n"
    "    NSContinuouslyUpdatesValue : Bool ;\n"
    "    NSConditionallySetsHidden : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSConditionallySetsEditable : Bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $valuePath : NSData {\n"
    "    NSContinuouslyUpdatesValue : Bool ;\n"
    "    NSConditionallySetsHidden : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSConditionallySetsEditable : Bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $hidden : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $editable : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $data : NSData {\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSContinuouslyUpdatesValue : Bool ;\n"
    "    NSConditionallySetsHidden : Bool ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSConditionallySetsEditable : Bool ;\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  # Warning: skipped $attributedString binding\n"
    "  # Warning: skipped $valueURL binding\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSTokenField {\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontItalic : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontBold : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $editable : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $textColor : NSColor {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $alignment : AnyScalar {\n"
    "    NSMultipleValuesPlaceholder : AnyScalar ;\n"
    "    NSNullPlaceholder : AnyScalar ;\n"
    "    NSNotApplicablePlaceholder : AnyScalar ;\n"
    "    NSNoSelectionPlaceholder : AnyScalar ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "#  $value : NSArray {\n"
    "#    NSConditionallySetsEnabled : Bool ;\n"
    "#    NSConditionallySetsHidden : Bool ;\n"
    "#    NSContinuouslyUpdatesValue : Bool ;\n"
    "#    NSValidatesImmediately : Bool ;\n"
    "#    NSConditionallySetsEditable : Bool ;\n"
    "#    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "#    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "#    NSRaisesForNotApplicableKeys : Bool ;\n"
    "#  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $enabled : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  # Warning: skipped $displayPatternValue1 binding\n"
    "  $fontSize : AnyNumber {\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $hidden : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSTokenFieldCell {\n"
    "  $font : NSFont {\n"
    "    NSMultipleValuesPlaceholder : NSFont ;\n"
    "    NSNullPlaceholder : NSFont ;\n"
    "    NSNotApplicablePlaceholder : NSFont ;\n"
    "    NSNoSelectionPlaceholder : NSFont ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontItalic : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontBold : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $editable : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $textColor : NSColor {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "#  $value : NSArray {\n"
    "#    NSConditionallySetsEnabled : Bool ;\n"
    "#    NSContinuouslyUpdatesValue : Bool ;\n"
    "#    NSValidatesImmediately : Bool ;\n"
    "#    NSConditionallySetsEditable : Bool ;\n"
    "#    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "#    NSAllowsEditingMultipleValuesSelection : Bool ;\n"
    "#    NSRaisesForNotApplicableKeys : Bool ;\n"
    "#  }\n"
    "  $fontFamilyName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $enabled : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  # Warning: skipped $displayPatternValue1 binding\n"
    "  $fontSize : AnyNumber {\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $fontName : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSToolbarItem {\n"
    "  $enabled : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSView {\n"
    "  $toolTip : NSString {\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "  $hidden : Bool {\n"
    "    NSMultipleValuesPlaceholder : Bool ;\n"
    "    NSNullPlaceholder : Bool ;\n"
    "    NSNotApplicablePlaceholder : Bool ;\n"
    "    NSNoSelectionPlaceholder : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined outletClass NSWindow {\n"
    "  $contentHeight : Double {\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "  }\n"
    "  $contentWidth : Double {\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "  }\n"
    "  $documentEdited : Bool {\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "  }\n"
    "  $visible : Double {\n"
    "    NSAlwaysPresentsApplicationModalAlerts : Bool ;\n"
    "    NSValidatesImmediately : Bool ;\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "    NSMultipleValuesPlaceholder : AnyNumber ;\n"
    "    NSNoSelectionPlaceholder : AnyNumber ;\n"
    "    NSNullPlaceholder : AnyNumber ;\n"
    "    NSNotApplicablePlaceholder : AnyNumber ;\n"
    "  }\n"
    "  $representedFileName : NSString {\n"
    "    NSRaisesForNotApplicableKeys : Bool ;\n"
    "    NSMultipleValuesPlaceholder : NSString ;\n"
    "    NSNoSelectionPlaceholder : NSString ;\n"
    "    NSNullPlaceholder : NSString ;\n"
    "    NSNotApplicablePlaceholder : NSString ;\n"
    "  }\n"
    "}\n"
    "\n"
    "predefined protocol NSTableViewDataSource ;\n"
    "\n"
    "end\n"
    "\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//                      Filewrapper 'objective_c_sources'                      *
//                                                                             *
//-----------------------------------------------------------------------------*

//--- File '/NSData+BZ2compression.h'

static const char * gWrapperFileContent_0_objective_5F_c_5F_sources = "//\n"
  "//  NSData+BZ2compression.h\n"
  "//  essai\n"
  "//\n"
  "//  Created by Pierre Molinaro on 30/06/13.\n"
  "//  Copyright (c) 2013 ECN / IRCCyN. All rights reserved.\n"
  "//\n"
  "\n"
  "#import <Foundation/Foundation.h>\n"
  "\n"
  "@interface NSData (BZ2compression)\n"
  "\n"
  "- (NSData *) bz2DecompressedDataWithEstimedExpansion: (NSUInteger) inEstimedExpansionFactor\n"
  "             returnedErrorCode : (NSInteger *) outErrorPtr ;\n"
  "\n"
  "- (NSData *) bz2CompressedDataWithCompressionFactor: (NSInteger) inCompressionFactor\n"
  "             returnedErrorCode: (NSInteger *) outErrorPtr ;\n"
  "\n"
  "\n"
  "+ (NSString *) bz2ErrorMessageForErrorCode: (NSInteger) inErrorCode ;\n"
  "\n"
  "@end\n" ;

static const cRegularFileWrapper gWrapperFile_0_objective_5F_c_5F_sources (
  "NSData+BZ2compression.h",
  "h",
  true, // Text file
  598, // Text length
  gWrapperFileContent_0_objective_5F_c_5F_sources
) ;

//--- File '/NSData+BZ2compression.m'

static const char * gWrapperFileContent_1_objective_5F_c_5F_sources = "//\n"
  "//  NSData+BZ2compression.m\n"
  "//  essai\n"
  "//\n"
  "//  Created by Pierre Molinaro on 30/06/13.\n"
  "//  Copyright (c) 2013 ECN / IRCCyN. All rights reserved.\n"
  "//\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#import \"NSData+BZ2compression.h\"\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#include <bzlib.h>\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@implementation NSData (BZ2compression)\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "// See http://www.bzip.org/1.0.3/html/libprog.html\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (NSData *) bz2DecompressedDataWithEstimedExpansion: (NSUInteger) inEstimedExpansionFactor\n"
  "             returnedErrorCode : (NSInteger *) outErrorPtr {\n"
  "  const NSUInteger compressedDataLength = self.length ;\n"
  "  char * compressedDataPointer = (char *) self.bytes ;\n"
  "  NSUInteger estimedDecompressedDataLength = compressedDataLength ;\n"
  "  if (inEstimedExpansionFactor > 1) {\n"
  "    estimedDecompressedDataLength *= inEstimedExpansionFactor ;\n"
  "  }\n"
  "  NSInteger error ;\n"
  "  UInt32 decompressedDataLength ;\n"
  "  char * decompressedBuffer = NULL ;\n"
  "  do{\n"
  "    free (decompressedBuffer) ;\n"
  "    //NSLog (@\"estimedDecompressedDataLength %u\", estimedDecompressedDataLength) ;\n"
  "    decompressedBuffer = malloc (estimedDecompressedDataLength) ;\n"
  "    decompressedDataLength = (UInt32) estimedDecompressedDataLength ;\n"
  "    error = BZ2_bzBuffToBuffDecompress (decompressedBuffer, & decompressedDataLength,\n"
  "                                        compressedDataPointer, (UInt32) compressedDataLength,\n"
  "                                        0, 0) ;\n"
  "    estimedDecompressedDataLength *= 2 ;\n"
  "  }while (error == BZ_OUTBUFF_FULL) ;\n"
  "  NSData * result = nil ;\n"
  "  if (error == BZ_OK) {\n"
  "    result  = [NSData dataWithBytes:decompressedBuffer length:decompressedDataLength] ;\n"
  "  }\n"
  "  if (outErrorPtr != NULL) {\n"
  "    * outErrorPtr = error ;\n"
  "  }\n"
  "  free (decompressedBuffer) ; decompressedBuffer = NULL ;\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (NSData *) bz2CompressedDataWithCompressionFactor: (NSInteger) inCompressionFactor\n"
  "             returnedErrorCode : (NSInteger *) outErrorPtr {\n"
  "  const UInt32 sourceDataLength = (UInt32) self.length ;\n"
  "  char * sourceDataPointer = (char *) self.bytes ;\n"
  "  UInt32 estimedCompressedDataLength = sourceDataLength + (sourceDataLength / 100) + (600 * 1024) ;\n"
  "  NSInteger error ;\n"
  "  UInt32 compressedDataLength ;\n"
  "  char * compressedBuffer = NULL ;\n"
  "  do{\n"
  "    free (compressedBuffer) ;\n"
  "    compressedBuffer = malloc (estimedCompressedDataLength) ;\n"
  "    compressedDataLength = estimedCompressedDataLength ;\n"
  "    error = BZ2_bzBuffToBuffCompress (compressedBuffer,\n"
  "                                      & compressedDataLength,\n"
  "                                      sourceDataPointer,\n"
  "                                      sourceDataLength,\n"
  "                                      (int) inCompressionFactor,\n"
  "                                      0, // Verbosity (0 = silent)\n"
  "                                      0) ; // Work factor (0 = default)\n"
  "    estimedCompressedDataLength *= 2 ;\n"
  "  }while (error == BZ_OUTBUFF_FULL) ;\n"
  "  NSData * result = nil ;\n"
  "  if (error == BZ_OK) {\n"
  "    result  = [NSData dataWithBytesNoCopy:compressedBuffer length:compressedDataLength] ;\n"
  "  }else{\n"
  "    free (compressedBuffer) ;\n"
  "  }\n"
  "  if (outErrorPtr != NULL) {\n"
  "    * outErrorPtr = error ;\n"
  "  }\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "+ (NSString *) bz2ErrorMessageForErrorCode: (NSInteger) inErrorCode {\n"
  "  NSString * result = @\"Unknown BZ2 Error\" ;\n"
  "  switch (inErrorCode) {\n"
  "  case BZ_OK:\n"
  "    result = @\"\" ;\n"
  "    break ;\n"
  "  case BZ_SEQUENCE_ERROR:\n"
  "    result = @\"BZ2 Sequence Error\" ;\n"
  "    break ;\n"
  "  case BZ_PARAM_ERROR:\n"
  "    result = @\"BZ2 Parameter Error\" ;\n"
  "    break ;\n"
  "  case BZ_MEM_ERROR:\n"
  "    result = @\"BZ2 Memory Error\" ;\n"
  "    break ;\n"
  "  case BZ_DATA_ERROR:\n"
  "    result = @\"BZ2 Data Error\" ;\n"
  "    break ;\n"
  "  case BZ_IO_ERROR:\n"
  "    result = @\"BZ2 I/O Error\" ;\n"
  "    break ;\n"
  "  case BZ_UNEXPECTED_EOF:\n"
  "    result = @\"BZ2 Unexpected EOF Error\" ;\n"
  "    break ;\n"
  "  case BZ_OUTBUFF_FULL:\n"
  "    result = @\"BZ2 Output Buffer Full Error\" ;\n"
  "    break ;\n"
  "  case BZ_CONFIG_ERROR:\n"
  "    result = @\"BZ2 Configuration Error\" ;\n"
  "    break ;\n"
  "  default:\n"
  "    break ;\n"
  "  }\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@end\n" ;

static const cRegularFileWrapper gWrapperFile_1_objective_5F_c_5F_sources (
  "NSData+BZ2compression.m",
  "m",
  true, // Text file
  4512, // Text length
  gWrapperFileContent_1_objective_5F_c_5F_sources
) ;

//--- File '/NSData+PMGZcompression.h'

static const char * gWrapperFileContent_2_objective_5F_c_5F_sources = "//\n"
  "//  NSData+PMBZ2compression.h\n"
  "//  essai\n"
  "//\n"
  "//  Created by Pierre Molinaro on 30/06/13.\n"
  "//  Copyright (c) 2013 ECN / IRCCyN. All rights reserved.\n"
  "//\n"
  "\n"
  "#import <Foundation/Foundation.h>\n"
  "\n"
  "@interface NSData (PMBZ2compression)\n"
  "\n"
  "- (NSData *) zlibDecompressedDataWithEstimedExpansion: (NSUInteger) inEstimedExpansionFactor\n"
  "             returnedErrorCode : (NSInteger *) outErrorPtr ;\n"
  "\n"
  "- (NSData *) zlibCompressedDataWithCompressionFactor: (NSUInteger) inCompressionFactor\n"
  "             returnedErrorCode: (NSInteger *) outErrorPtr ;\n"
  "\n"
  "\n"
  "+ (NSString *) zlibErrorMessageForErrorCode: (NSInteger) inErrorCode ;\n"
  "\n"
  "\n"
  "@end\n" ;

static const cRegularFileWrapper gWrapperFile_2_objective_5F_c_5F_sources (
  "NSData+PMGZcompression.h",
  "h",
  true, // Text file
  607, // Text length
  gWrapperFileContent_2_objective_5F_c_5F_sources
) ;

//--- File '/NSData+PMGZcompression.m'

static const char * gWrapperFileContent_3_objective_5F_c_5F_sources = "//\n"
  "//  NSData+PMBZ2compression.m\n"
  "//  essai\n"
  "//\n"
  "//  Created by Pierre Molinaro on 30/06/13.\n"
  "//  Copyright (c) 2013 ECN / IRCCyN. All rights reserved.\n"
  "//\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#import \"NSData+PMGZcompression.h\"\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#include <zlib.h>\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@implementation NSData (PMBZ2compression)\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (NSData *) zlibDecompressedDataWithEstimedExpansion: (NSUInteger) inEstimedExpansionFactor\n"
  "             returnedErrorCode : (NSInteger *) outErrorPtr {\n"
  "  const NSUInteger compressedDataLength = self.length ;\n"
  "  UInt8 * compressedDataPointer = (UInt8 *) self.bytes ;\n"
  "  NSUInteger estimedDecompressedDataLength = compressedDataLength ;\n"
  "  if (inEstimedExpansionFactor > 1) {\n"
  "    estimedDecompressedDataLength *= inEstimedExpansionFactor ;\n"
  "  }\n"
  "  NSInteger error ;\n"
  "  NSUInteger decompressedDataLength ;\n"
  "  UInt8 * decompressedBuffer = NULL ;\n"
  "  do{\n"
  "    free (decompressedBuffer) ;\n"
  "    //NSLog (@\"estimedDecompressedDataLength %u\", estimedDecompressedDataLength) ;\n"
  "    decompressedBuffer = malloc (estimedDecompressedDataLength) ;\n"
  "    decompressedDataLength = estimedDecompressedDataLength ;\n"
  "    error = uncompress (decompressedBuffer, & decompressedDataLength,\n"
  "                       compressedDataPointer, compressedDataLength) ;\n"
  "    estimedDecompressedDataLength *= 2 ;\n"
  "  }while (error == Z_BUF_ERROR) ;\n"
  "  NSData * result = nil ;\n"
  "  if (error == Z_OK) {\n"
  "    result  = [NSData dataWithBytes:decompressedBuffer length:decompressedDataLength] ;\n"
  "  }\n"
  "  if (outErrorPtr != NULL) {\n"
  "    * outErrorPtr = error ;\n"
  "  }\n"
  "  free (decompressedBuffer) ; decompressedBuffer = NULL ;\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (NSData *) zlibCompressedDataWithCompressionFactor: (NSUInteger) inCompressionFactor\n"
  "             returnedErrorCode : (NSInteger *) outErrorPtr {\n"
  "  const NSUInteger sourceDataLength = self.length ;\n"
  "  UInt8 * sourceDataPointer = (UInt8 *) self.bytes ;\n"
  "  NSUInteger estimedCompressedDataLength = sourceDataLength + (sourceDataLength / 100) + (600 * 1024) ;\n"
  "  NSInteger error ;\n"
  "  NSUInteger compressedDataLength ;\n"
  "  UInt8 * compressedBuffer = NULL ;\n"
  "  do{\n"
  "    free (compressedBuffer) ;\n"
  "    compressedBuffer = malloc (estimedCompressedDataLength) ;\n"
  "    compressedDataLength = estimedCompressedDataLength ;\n"
  "    error = compress2 (compressedBuffer, & compressedDataLength,\n"
  "                       sourceDataPointer, sourceDataLength,\n"
  "                       (int) inCompressionFactor) ; // Work factor (0 = default)\n"
  "    estimedCompressedDataLength *= 2 ;\n"
  "  }while (error == Z_BUF_ERROR) ;\n"
  "  NSData * result = nil ;\n"
  "  if (error == Z_OK) {\n"
  "    result  = [NSData dataWithBytesNoCopy:compressedBuffer length:compressedDataLength] ;\n"
  "  }else{\n"
  "    free (compressedBuffer) ;\n"
  "  }\n"
  "  if (outErrorPtr != NULL) {\n"
  "    * outErrorPtr = error ;\n"
  "  }\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "+ (NSString *) zlibErrorMessageForErrorCode: (NSInteger) inErrorCode {\n"
  "  NSString * result = @\"Unknown ZLIB Error\" ;\n"
  "  switch (inErrorCode) {\n"
  "  case Z_OK:\n"
  "    result = @\"\" ;\n"
  "    break ;\n"
  "  case Z_ERRNO:\n"
  "    result = @\"ZLIB Unknown Error\" ;\n"
  "    break ;\n"
  "  case Z_BUF_ERROR:\n"
  "    result = @\"ZLIB Buffer overflow Error\" ;\n"
  "    break ;\n"
  "  case Z_STREAM_ERROR:\n"
  "    result = @\"ZLIB Stream Error\" ;\n"
  "    break ;\n"
  "  case Z_MEM_ERROR:\n"
  "    result = @\"ZLIB Memory Error\" ;\n"
  "    break ;\n"
  "  case Z_DATA_ERROR:\n"
  "    result = @\"ZLIB Data Error\" ;\n"
  "    break ;\n"
  "  case Z_VERSION_ERROR:\n"
  "    result = @\"ZLIB Version Error\" ;\n"
  "    break ;\n"
  "  default:\n"
  "    break ;\n"
  "  }\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@end\n" ;

static const cRegularFileWrapper gWrapperFile_3_objective_5F_c_5F_sources (
  "NSData+PMGZcompression.m",
  "m",
  true, // Text file
  3897, // Text length
  gWrapperFileContent_3_objective_5F_c_5F_sources
) ;

//--- File '/NSMutableData+PMWrites.h'

static const char * gWrapperFileContent_4_objective_5F_c_5F_sources = "//\n"
  "//  NSMutableData+PMWrites.h\n"
  "//  essai\n"
  "//\n"
  "//  Created by Pierre Molinaro on 30/06/13.\n"
  "//  Copyright (c) 2013 ECN / IRCCyN. All rights reserved.\n"
  "//\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#import <Foundation/Foundation.h>\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@interface NSMutableData (PMWrites)\n"
  "\n"
  "- (void) writeAutosizedData: (NSData *) inData\n"
  "         trace: (NSMutableString *) ioTrace ;\n"
  "\n"
  "- (void) writeByte: (UInt8) inByte\n"
  "         trace: (NSMutableString *) ioTrace ;\n"
  "\n"
  "- (void) writeAutosizedUnsigned: (UInt64) inValue\n"
  "         trace: (NSMutableString *) ioTrace ;\n"
  "\n"
  "@end\n"
  "\n"
  "//---------------------------------------------------------------------------*\n" ;

static const cRegularFileWrapper gWrapperFile_4_objective_5F_c_5F_sources (
  "NSMutableData+PMWrites.h",
  "h",
  true, // Text file
  740, // Text length
  gWrapperFileContent_4_objective_5F_c_5F_sources
) ;

//--- File '/NSMutableData+PMWrites.m'

static const char * gWrapperFileContent_5_objective_5F_c_5F_sources = "//\n"
  "//  NSMutableData+PMWrites.m\n"
  "//  essai\n"
  "//\n"
  "//  Created by Pierre Molinaro on 30/06/13.\n"
  "//  Copyright (c) 2013 ECN / IRCCyN. All rights reserved.\n"
  "//\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#import \"NSMutableData+PMWrites.h\"\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@implementation NSMutableData (PMWrites)\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) writeAutosizedData: (NSData *) inData\n"
  "         trace: (NSMutableString *) ioTrace {\n"
  "  [ioTrace appendFormat:@\"%03lu %03lu \", self.length / 1000, self.length % 1000] ;\n"
  "  [self writeAutosizedUnsigned:[inData length] trace:ioTrace] ;\n"
  "  [self appendData:inData] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) writeByte: (UInt8) inByte\n"
  "         trace: (NSMutableString *) ioTrace {\n"
  "  [ioTrace appendFormat:@\"%03lu %03lu \", self.length / 1000, self.length % 1000] ;\n"
  "  [ioTrace appendFormat:@\"%02hhX \", inByte] ;\n"
  "  [self appendBytes:& inByte length:1] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) writeAutosizedUnsigned: (UInt64) inValue\n"
  "         trace: (NSMutableString *) ioTrace {\n"
  "  [ioTrace appendFormat:@\"%03lu %03lu \", self.length / 1000, self.length % 1000] ;\n"
  "  [ioTrace appendString:@\"U \"] ;\n"
  "  UInt8 bytes [10] ;\n"
  "  NSUInteger idx = 0 ;\n"
  "  UInt64 value = inValue ;\n"
  "  do{\n"
  "    bytes [idx] = value & 0x7FULL ;\n"
  "    value >>= 7 ;\n"
  "    if (value != 0) {\n"
  "      bytes [idx] |= 0x80 ;\n"
  "    }\n"
  "    [ioTrace appendFormat:@\"%02hhX \", bytes [idx]] ;\n"
  "    idx ++ ;\n"
  "  }while (value != 0) ;\n"
  "  [self appendBytes:bytes length:idx] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@end\n" ;

static const cRegularFileWrapper gWrapperFile_5_objective_5F_c_5F_sources (
  "NSMutableData+PMWrites.m",
  "m",
  true, // Text file
  1771, // Text length
  gWrapperFileContent_5_objective_5F_c_5F_sources
) ;

//--- File '/PMAllocationDebug.h'

static const char * gWrapperFileContent_6_objective_5F_c_5F_sources = "//----------------------------------------------------------------------------*\n"
  "\n"
  "#import <Foundation/Foundation.h>\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  #define macroNoteObjectAllocation routineNoteObjectAllocation (self.className)\n"
  "  void routineNoteObjectAllocation (NSString * inObjectClassName) ;\n"
  "#else\n"
  "  #define macroNoteObjectAllocation\n"
  "#endif\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  #define macroNoteObjectDeallocation routineNoteObjectDeallocation (self.className)\n"
  "  void routineNoteObjectDeallocation (NSString * inObjectClassName) ;\n"
  "#else\n"
  "  #define macroNoteObjectDeallocation\n"
  "#endif\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  #define macroShowAllocationStatsWindow routineShowAllocationStatsWindow ()\n"
  "  void routineShowAllocationStatsWindow (void) ;\n"
  "#else\n"
  "  #define macroShowAllocationStatsWindow\n"
  "#endif\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  #define macroAddItemToDebugMenu(ITEM) addItemToDebugMenu (ITEM)\n"
  "  void addItemToDebugMenu (NSMenuItem * inMenuItem) ;\n"
  "#else\n"
  "  #define macroAddItemToDebugMenu(ITEM)\n"
  "#endif\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  @interface PMAllocationDebug : NSObject <NSTableViewDataSource> {\n"
  "    @private IBOutlet NSButton * mPerformSnapShotButton ;\n"
  "    @private IBOutlet NSButton * mAllocationStatsWindowVisibleAtLaunchCheckbox ;\n"
  "    @private IBOutlet NSPopUpButton * mDisplayFilterPopUpButton ;\n"
  "    @private IBOutlet NSMenu * mDebugMenu ;\n"
  "    @private IBOutlet NSWindow * mAllocationStatsWindow ;\n"
  "    @private IBOutlet NSTextField * mCurrentlyAllocatedObjectCountTextField ;\n"
  "    @private IBOutlet NSTextField * mTotalAllocatedObjectCountTextField ;\n"
  "    @private IBOutlet NSTableView * mStatsTableView ;\n"
  "    \n"
  "    @private NSCountedSet * mAllocatedObjectCountByClass ;\n"
  "    @private NSCountedSet * mTotalAllocatedObjectCountByClass ;\n"
  "    @private NSMutableDictionary * mSnapShotDictionary ;\n"
  "    @private BOOL mRefreshStatsHasTriggered ;\n"
  "    @private NSArray * mAllocationStatsDataSource ;\n"
  "  }\n"
  "\n"
  "  @property BOOL mAllocationStatsWindowVisibleAtLaunch ;\n"
  "  @property NSUInteger mAllocatedObjectCount ;\n"
  "  @property NSUInteger mTotalAllocatedObjectCount ;\n"
  "  @property NSInteger mDisplayFilter ;\n"
  "  \n"
  "  @end\n"
  "#endif\n"
  "\n"
  "//----------------------------------------------------------------------------*\n" ;

static const cRegularFileWrapper gWrapperFile_6_objective_5F_c_5F_sources (
  "PMAllocationDebug.h",
  "h",
  true, // Text file
  2554, // Text length
  gWrapperFileContent_6_objective_5F_c_5F_sources
) ;

//--- File '/PMAllocationDebug.m'

static const char * gWrapperFileContent_7_objective_5F_c_5F_sources = "#ifdef PM_COCOA_DEBUG\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "#import \"PMAllocationDebug.h\"\n"
  "#import \"easy-bindings-utilities.h\"\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "static PMAllocationDebug * gDebugObject ;\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "@implementation PMAllocationDebug\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "@synthesize mAllocationStatsWindowVisibleAtLaunch ;\n"
  "@synthesize mAllocatedObjectCount ;\n"
  "@synthesize mTotalAllocatedObjectCount ;\n"
  "@synthesize mDisplayFilter ;\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    init                                                                    *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (instancetype) init {\n"
  "  //  NSLog (@\"%s %p\", __PRETTY_FUNCTION__, self) ;\n"
  "  self = [super init] ;\n"
  "  if (self) {\n"
  "    mAllocatedObjectCountByClass = [NSCountedSet new] ;\n"
  "    mTotalAllocatedObjectCountByClass = [NSCountedSet new] ;\n"
  "  //---\n"
  "    NSNotificationCenter * df = [NSNotificationCenter defaultCenter] ;\n"
  "    [df\n"
  "      addObserver:self\n"
  "      selector:@selector(applicationWillTerminateAction:)\n"
  "      name:NSApplicationWillTerminateNotification\n"
  "      object:nil\n"
  "    ] ;\n"
  "  //---\n"
  "    [[NSRunLoop mainRunLoop]\n"
  "      performSelector:@selector (pmInstallDebugMenu)\n"
  "      target:self\n"
  "      argument:nil\n"
  "      order:NSUIntegerMax\n"
  "      modes:[NSArray arrayWithObject:NSDefaultRunLoopMode]\n"
  "    ] ;\n"
  "  }\n"
  "  return self ;\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    pmInstallDebugMenu                                                      *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) pmInstallDebugMenu {\n"
  "  NSMenuItem * item = [[NSMenuItem alloc]\n"
  "    initWithTitle:@\"\"\n"
  "    action:NULL\n"
  "    keyEquivalent:@\"\"\n"
  "  ] ;\n"
  "  [item setSubmenu:mDebugMenu] ;\n"
  "  [[NSApp mainMenu] addItem:item] ;\n"
  "  macroReleaseSetToNil (item) ;\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    addDebugMenuItem:                                                       *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) addDebugMenuItem: (NSMenuItem *) inMenuItem {\n"
  "  [mDebugMenu addItem:inMenuItem] ;\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    awakeFromNib                                                            *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) awakeFromNib {\n"
  "  // NSLog (@\"%s %p %p\", __PRETTY_FUNCTION__, self, mDebugMenu) ;\n"
  "  mPerformSnapShotButton.action = @selector (performSnapShotAction:) ;\n"
  "  mPerformSnapShotButton.target = self ;\n"
  "//--- Allocation Window visibility\n"
  "  self.mAllocationStatsWindowVisibleAtLaunch = [[NSUserDefaults standardUserDefaults]\n"
  "    boolForKey:@\"PMAllocationDebug:allocationStatsWindowVisible\"\n"
  "  ] ;\n"
  "  self.mDisplayFilter = [[NSUserDefaults standardUserDefaults]\n"
  "    integerForKey:@\"PMAllocationDebug:allocationStatsDisplayFilter\"\n"
  "  ] ;\n"
  "//--- Allocation stats window visibility at Launch\n"
  "  if (self.mAllocationStatsWindowVisibleAtLaunch) {\n"
  "    [mAllocationStatsWindow makeKeyAndOrderFront:nil] ;\n"
  "  }\n"
  "//--- Bindings\n"
  "  [mAllocationStatsWindowVisibleAtLaunchCheckbox\n"
  "    bind:@\"value\"\n"
  "    toObject:self\n"
  "    withKeyPath:@\"mAllocationStatsWindowVisibleAtLaunch\"\n"
  "    options:nil\n"
  "  ] ;\n"
  "  [mCurrentlyAllocatedObjectCountTextField\n"
  "    bind:@\"value\"\n"
  "    toObject:self\n"
  "    withKeyPath:@\"mAllocatedObjectCount\"\n"
  "    options:nil\n"
  "  ] ;\n"
  "  [mTotalAllocatedObjectCountTextField\n"
  "    bind:@\"value\"\n"
  "    toObject:self\n"
  "    withKeyPath:@\"mTotalAllocatedObjectCount\"\n"
  "    options:nil\n"
  "  ] ;\n"
  "  [mDisplayFilterPopUpButton\n"
  "    bind:@\"selectedIndex\"\n"
  "    toObject:self\n"
  "    withKeyPath:@\"mDisplayFilter\"\n"
  "    options:nil\n"
  "  ] ;\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    applicationWillTerminateAction:                                         *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) applicationWillTerminateAction: (NSNotification *) inNotification {\n"
  "  // NSLog (@\"%s\", __PRETTY_FUNCTION__) ;\n"
  "  // NSLog (@\"%d\", self.mAllocationStatsWindowVisibleAtLaunch) ;\n"
  "  NSUserDefaults * ud = [NSUserDefaults standardUserDefaults] ;\n"
  "  [ud\n"
  "    setBool:self.mAllocationStatsWindowVisibleAtLaunch\n"
  "    forKey:@\"PMAllocationDebug:allocationStatsWindowVisible\"\n"
  "  ] ;\n"
  "  [ud\n"
  "    setInteger:self.mDisplayFilter\n"
  "    forKey:@\"PMAllocationDebug:allocationStatsDisplayFilter\"\n"
  "  ] ;\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    performSnapShotAction:                                                  *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) performSnapShotAction: (id) inSender {\n"
  "  mSnapShotDictionary = [NSMutableDictionary new] ;\n"
  "  for (NSString * className in mAllocatedObjectCountByClass.allObjects) {\n"
  "    const NSUInteger liveByClass = [mAllocatedObjectCountByClass countForObject:className] ;\n"
  "    [mSnapShotDictionary\n"
  "      setObject:[NSNumber numberWithUnsignedInteger:liveByClass]\n"
  "      forKey:className\n"
  "    ] ;\n"
  "  }\n"
  "  [self triggerRefreshAllocationStatsDisplay] ;\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    triggerRefreshAllocationStatsDisplay                                    *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) triggerRefreshAllocationStatsDisplay {\n"
  "  if (! mRefreshStatsHasTriggered) {\n"
  "    mRefreshStatsHasTriggered = YES ;\n"
  "    [[NSRunLoop mainRunLoop]\n"
  "      performSelector:@selector (refreshAllocationStats)\n"
  "      target:self\n"
  "      argument:nil\n"
  "      order:NSUIntegerMax\n"
  "      modes:[NSArray arrayWithObject:NSRunLoopCommonModes]\n"
  "    ] ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    didChangeValueForKey:                                                   *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) didChangeValueForKey: (NSString *) inKey {\n"
  "  [super didChangeValueForKey:inKey] ;\n"
  "  if ([inKey isEqualToString:@\"mDisplayFilter\"]) {\n"
  "    [self triggerRefreshAllocationStatsDisplay] ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    pmNoteObjectAllocation:                                                 *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) pmNoteObjectAllocation: (NSString *) inObjectClassName {\n"
  "  //NSLog (@\"objectClassName %@\", inObjectClassName) ;\n"
  "  [mAllocatedObjectCountByClass addObject:inObjectClassName] ;\n"
  "  [mTotalAllocatedObjectCountByClass addObject:inObjectClassName] ;\n"
  "  [self triggerRefreshAllocationStatsDisplay] ;\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    pmNoteObjectDeallocation:                                               *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) pmNoteObjectDeallocation: (NSString *) inObjectClassName {\n"
  "  // NSLog (@\"DEALLOC objectClassName %@\", inObjectClassName) ;\n"
  "  [mAllocatedObjectCountByClass removeObject:inObjectClassName] ;\n"
  "  [self triggerRefreshAllocationStatsDisplay] ;\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    refreshAllocationStats                                                  *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) refreshAllocationStats {\n"
  "  mRefreshStatsHasTriggered = NO ;\n"
  "//---\n"
  "  NSUInteger liveObjectCount = 0 ;\n"
  "  NSUInteger totalObjectCount = 0 ;\n"
  "//---\n"
  "  NSMutableArray * array = [NSMutableArray new] ;\n"
  "  for (NSString * className in [mTotalAllocatedObjectCountByClass.allObjects sortedArrayUsingSelector:@selector(compare:)]) {\n"
  "    const NSUInteger liveByClass = [mAllocatedObjectCountByClass countForObject:className] ;\n"
  "    const NSUInteger totalByClass = [mTotalAllocatedObjectCountByClass countForObject:className] ;\n"
  "    const NSUInteger snapShotByClass = [[mSnapShotDictionary objectForKey:className] unsignedIntegerValue] ;\n"
  "    liveObjectCount += liveByClass ;\n"
  "    totalObjectCount += totalByClass ;\n"
  "    BOOL display = YES ;\n"
  "    if (1 == self.mDisplayFilter) {\n"
  "      display = liveByClass != 0 ;\n"
  "    }else if (2 == self.mDisplayFilter) {\n"
  "      display = liveByClass != snapShotByClass ;\n"
  "    }\n"
  "    if (display) {\n"
  "      [array addObject: [NSDictionary\n"
  "        dictionaryWithObjectsAndKeys:\n"
  "          className, @\"classname\",\n"
  "          [NSNumber numberWithUnsignedInteger:totalByClass], @\"allCount\",\n"
  "          [NSNumber numberWithUnsignedInteger:liveByClass], @\"live\",\n"
  "          [NSNumber numberWithUnsignedInteger:snapShotByClass], @\"snapshot\",\n"
  "          nil\n"
  "        ]\n"
  "      ] ;\n"
  "    }\n"
  "  }\n"
  "//---\n"
  "  self.mAllocatedObjectCount = liveObjectCount ;\n"
  "  self.mTotalAllocatedObjectCount = totalObjectCount ;\n"
  "//---\n"
  "  mAllocationStatsDataSource = array ;\n"
  "  [mStatsTableView setDataSource:self] ;\n"
  "  [mStatsTableView reloadData] ;\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    T A B L E   V I E W    D A T A    S O U R C E                           *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (id) tableView: (NSTableView *) aTableView\n"
  "       objectValueForTableColumn: (NSTableColumn *) aTableColumn\n"
  "       row: (NSInteger) rowIndex {\n"
  "  NSDictionary * theRecord = [mAllocationStatsDataSource objectAtIndex:(NSUInteger) rowIndex];\n"
  "  return [theRecord valueForKey:aTableColumn.identifier] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (NSInteger) numberOfRowsInTableView: (NSTableView *) aTableView {\n"
  "  return (NSInteger) [mAllocationStatsDataSource count] ;\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    S H O W     A L L O C A T I O N    S T A T S    W I N D O W             *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) pmShowAllocationStatsWindow {\n"
  "  [mStatsTableView.window makeKeyAndOrderFront:nil] ;\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "@end\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    R O U T I N E S                                                         *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "void routineNoteObjectAllocation (NSString * inObjectClassName) {\n"
  "  if (nil == gDebugObject) {\n"
  "    gDebugObject = [PMAllocationDebug new] ;\n"
  "    const BOOL ok = [NSBundle loadNibNamed:@\"PMAllocationDebug\" owner:gDebugObject] ;\n"
  "    if (! ok) {\n"
  "      presentErrorWindow (__FILE__, __LINE__, @\"Cannot load 'PMAllocationDebug' nib file\") ;\n"
  "    }\n"
  "  }\n"
  "  [[NSRunLoop mainRunLoop]\n"
  "    performSelector:@selector (pmNoteObjectAllocation:)\n"
  "    target:gDebugObject\n"
  "    argument:inObjectClassName\n"
  "    order:NSUIntegerMax\n"
  "    modes:[NSArray arrayWithObject:NSRunLoopCommonModes]\n"
  "  ] ;\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "void routineNoteObjectDeallocation (NSString * inObjectClassName) {\n"
  "  [[NSRunLoop mainRunLoop]\n"
  "    performSelector:@selector (pmNoteObjectDeallocation:)\n"
  "    target:gDebugObject\n"
  "    argument:inObjectClassName\n"
  "    order:NSUIntegerMax\n"
  "    modes:[NSArray arrayWithObject:NSRunLoopCommonModes]\n"
  "  ] ;\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "void routineShowAllocationStatsWindow (void) {\n"
  "  [gDebugObject pmShowAllocationStatsWindow] ;\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  void addItemToDebugMenu (NSMenuItem * inMenuItem) {\n"
  "    if (nil == gDebugObject) {\n"
  "      gDebugObject = [PMAllocationDebug new] ;\n"
  "      const BOOL ok = [NSBundle loadNibNamed:@\"PMAllocationDebug\" owner:gDebugObject] ;\n"
  "      if (! ok) {\n"
  "        presentErrorWindow (__FILE__, __LINE__, @\"Cannot load 'PMAllocationDebug' nib file\") ;\n"
  "      }\n"
  "    }\n"
  "    [[NSRunLoop mainRunLoop]\n"
  "      performSelector:@selector (addDebugMenuItem:)\n"
  "      target:gDebugObject\n"
  "      argument:inMenuItem\n"
  "      order:NSUIntegerMax\n"
  "      modes:[NSArray arrayWithObject:NSDefaultRunLoopMode]\n"
  "    ] ;\n"
  "\n"
  "  }\n"
  "#endif\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "#endif\n"
  "\n" ;

static const cRegularFileWrapper gWrapperFile_7_objective_5F_c_5F_sources (
  "PMAllocationDebug.m",
  "m",
  true, // Text file
  12521, // Text length
  gWrapperFileContent_7_objective_5F_c_5F_sources
) ;

//--- File '/PMAllocationDebug.swift'

static const char * gWrapperFileContent_8_objective_5F_c_5F_sources = "import Cocoa\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "class PMAllocationItemDisplay : NSObject {\n"
  "  var mClassname : String\n"
  "  var mAllCount : Int\n"
  "  var mLive : Int\n"
  "  var mSnapshot : Int\n"
  "\n"
  "  init (classname : String, allCount : Int, live : Int, snapshot : Int) {\n"
  "    mClassname = classname\n"
  "    mAllCount = allCount\n"
  "    mLive = live\n"
  "    mSnapshot = snapshot\n"
  "    super.init ()\n"
  "  }\n"
  "  \n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "var gDebugObject : PMAllocationDebug! = nil\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "@objc(PMAllocationDebug) class PMAllocationDebug : NSObject, NSTableViewDataSource {\n"
  "  @IBOutlet var mPerformSnapShotButton  : NSButton\n"
  "  @IBOutlet var mAllocationStatsWindowVisibleAtLaunchCheckbox : NSButton\n"
  "  @IBOutlet var mDisplayFilterPopUpButton : NSPopUpButton\n"
  "  @IBOutlet var mDebugMenu : NSMenu\n"
  "  @IBOutlet var mAllocationStatsWindow : NSWindow\n"
  "  @IBOutlet var mCurrentlyAllocatedObjectCountTextField : NSTextField\n"
  "  @IBOutlet var mTotalAllocatedObjectCountTextField : NSTextField\n"
  "  @IBOutlet var mStatsTableView : NSTableView\n"
  "\n"
  "  var mDebugMenuInstalled = false\n"
  "  var mAllocationStatsWindowVisibleAtLaunch = true\n"
  "  var mAllocatedObjectCount = 0\n"
  "  var mTotalAllocatedObjectCount = 0\n"
  "  var mDisplayFilter : Int = 0 {\n"
  "    didSet {\n"
  "      mRefreshDisplay = true\n"
  "    }\n"
  "  }\n"
  "  var mAllocatedObjectCountByClass = NSCountedSet ()\n"
  "  var mTotalAllocatedObjectCountByClass = NSCountedSet ()\n"
  "  var mSnapShotDictionary = NSMutableDictionary ()\n"
  "  var mRefreshDisplay = false\n"
  "  var mAllocationStatsDataSource : PMAllocationItemDisplay [] = []\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //    init                                                                   *\n"
  "  //---------------------------------------------------------------------------*\n"
  "  \n"
  "  init () {\n"
  "      //  NSLog (@\"%s %p\", __PRETTY_FUNCTION__, self) ;\n"
  "    super.init ()\n"
  "    assert (gDebugObject == nil, \"PMAllocationDebug already exists\", file:__FILE__, line:__LINE__)\n"
  "    let df = NSNotificationCenter.defaultCenter ()\n"
  "    df.addObserver (self,\n"
  "      selector:\"applicationWillTerminateAction:\",\n"
  "      name:NSApplicationWillTerminateNotification,\n"
  "      object:nil\n"
  "    )\n"
  "    gDebugObject = self\n"
  "  }\n"
  "  \n"
  "  //---------------------------------------------------------------------------*\n"
  "  //    pmInstallDebugMenu                                                     *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  func pmInstallDebugMenu () {\n"
  "    if (!mDebugMenuInstalled) && (NSApp.mainMenu () != nil) {\n"
  "      var item = NSMenuItem (\n"
  "        title:\"\",\n"
  "        action:nil,\n"
  "        keyEquivalent:\"\"\n"
  "      )\n"
  "      item.setSubmenu (mDebugMenu)\n"
  "      NSApp.mainMenu ().addItem (item)\n"
  "      mDebugMenuInstalled = true\n"
  "    }\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //    addDebugMenuItem:                                                      *\n"
  "  //---------------------------------------------------------------------------*\n"
  "  \n"
  "  func addDebugMenuItem (inMenuItem : NSMenuItem) {\n"
  "    mDebugMenu.addItem (inMenuItem)\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //    awakeFromNib                                                           *\n"
  "  //---------------------------------------------------------------------------*\n"
  "  \n"
  "  override func awakeFromNib () {\n"
  "  // NSLog (@\"%s %p %p\", __PRETTY_FUNCTION__, self, mDebugMenu) ;\n"
  "  //--- Allocation Window visibility\n"
  "    var df = NSUserDefaults.standardUserDefaults ()\n"
  "    mAllocationStatsWindowVisibleAtLaunch = df.boolForKey (\"PMAllocationDebug:allocationStatsWindowVisible\")\n"
  "    mDisplayFilter = df.integerForKey (\"PMAllocationDebug:allocationStatsDisplayFilter\")\n"
  "  //--- Allocation stats window visibility at Launch\n"
  "    if mAllocationStatsWindowVisibleAtLaunch {\n"
  "      mAllocationStatsWindow.makeKeyAndOrderFront (nil)\n"
  "    }\n"
  "  //--- Bindings\n"
  "    mAllocationStatsWindowVisibleAtLaunchCheckbox.bind (\"value\",\n"
  "      toObject:self,\n"
  "      withKeyPath:\"mAllocationStatsWindowVisibleAtLaunch\",\n"
  "      options:nil\n"
  "    )\n"
  "    mCurrentlyAllocatedObjectCountTextField.bind (\"value\",\n"
  "      toObject:self,\n"
  "      withKeyPath:\"mAllocatedObjectCount\",\n"
  "      options:nil\n"
  "    )\n"
  "    mTotalAllocatedObjectCountTextField.bind (\"value\",\n"
  "      toObject:self,\n"
  "      withKeyPath:\"mTotalAllocatedObjectCount\",\n"
  "      options:nil\n"
  "    )\n"
  "    mDisplayFilterPopUpButton.bind (\"selectedIndex\",\n"
  "      toObject:self,\n"
  "      withKeyPath:\"mDisplayFilter\",\n"
  "      options:nil\n"
  "    )\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //    applicationWillTerminateAction:                                        *\n"
  "  //---------------------------------------------------------------------------*\n"
  "  \n"
  "  func applicationWillTerminateAction (NSNotification) {\n"
  "    var ud = NSUserDefaults.standardUserDefaults ()\n"
  "    ud.setBool (mAllocationStatsWindowVisibleAtLaunch,\n"
  "      forKey:\"PMAllocationDebug:allocationStatsWindowVisible\"\n"
  "    )\n"
  "    ud.setInteger (mDisplayFilter,\n"
  "      forKey:\"PMAllocationDebug:allocationStatsDisplayFilter\"\n"
  "    )\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //    performSnapShotAction:                                                 *\n"
  "  //---------------------------------------------------------------------------*\n"
  "  \n"
  "  @IBAction func performSnapShotAction (AnyObject) {\n"
  "    mSnapShotDictionary = NSMutableDictionary ()\n"
  "    for c : AnyObject in mAllocatedObjectCountByClass.allObjects () {\n"
  "      let className = c as String\n"
  "      let liveByClass = mAllocatedObjectCountByClass.countForObject (className)\n"
  "      mSnapShotDictionary.setObject (liveByClass, forKey:className)\n"
  "    }\n"
  "    mRefreshDisplay = true\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //    pmNoteObjectAllocation:                                                *\n"
  "  //---------------------------------------------------------------------------*\n"
  "  \n"
  "  func pmNoteObjectAllocation (inObjectClassName : NSString!) {\n"
  "  //NSLog (@\"objectClassName %@\", inObjectClassName) ;\n"
  "    mAllocatedObjectCountByClass.addObject (inObjectClassName)\n"
  "    mTotalAllocatedObjectCountByClass.addObject (inObjectClassName)\n"
  "    mRefreshDisplay = true\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //    pmNoteObjectDeallocation:                                              *\n"
  "  //---------------------------------------------------------------------------*\n"
  "  \n"
  "  func pmNoteObjectDeallocation (inObjectClassName : NSString) {\n"
  "  // NSLog (@\"DEALLOC objectClassName %@\", inObjectClassName) ;\n"
  "    mAllocatedObjectCountByClass.removeObject (inObjectClassName)\n"
  "    mRefreshDisplay = true\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //    refreshAllocationStats                                                 *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  func displayAllocation () {\n"
  "    self.pmInstallDebugMenu ()\n"
  "    if mRefreshDisplay {\n"
  "      mRefreshDisplay = false\n"
  "    //---\n"
  "      var liveObjectCount : Int = 0\n"
  "      var totalObjectCount : Int = 0\n"
  "    //---\n"
  "      var array : PMAllocationItemDisplay [] = []\n"
  "      let allObjects = mTotalAllocatedObjectCountByClass.allObjects ()\n"
  "      for object : AnyObject in allObjects {\n"
  "        let liveByClass = mAllocatedObjectCountByClass.countForObject (object)\n"
  "        let totalByClass = mTotalAllocatedObjectCountByClass.countForObject (object)\n"
  "        let snapShotByClass : Int\? = mSnapShotDictionary.objectForKey (object)\?.unsignedIntegerValue ()\n"
  "        liveObjectCount += liveByClass ;\n"
  "        totalObjectCount += totalByClass ;\n"
  "        var display = true ;\n"
  "        if 1 == mDisplayFilter {\n"
  "          display = liveByClass != 0 ;\n"
  "        }else if 2 == mDisplayFilter {\n"
  "          display = liveByClass != snapShotByClass ;\n"
  "        }\n"
  "        if display {\n"
  "          array += PMAllocationItemDisplay (\n"
  "            classname : object as String,\n"
  "            allCount : totalByClass,\n"
  "            live : liveByClass,\n"
  "            snapshot : (snapShotByClass \? snapShotByClass! : 0)\n"
  "          )\n"
  "        }\n"
  "      }\n"
  "      mAllocatedObjectCount = liveObjectCount ;\n"
  "      mTotalAllocatedObjectCount = totalObjectCount ;\n"
  "    //---\n"
  "      mAllocationStatsDataSource = array\n"
  "      mStatsTableView.setDataSource (self)\n"
  "      mStatsTableView.reloadData ()\n"
  "    }\n"
  "  }\n"
  "\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //    T A B L E   V I E W    D A T A    S O U R C E                          *\n"
  "  //---------------------------------------------------------------------------*\n"
  "  \n"
  "  func tableView (aTableView : NSTableView,\n"
  "                  objectValueForTableColumn: NSTableColumn,\n"
  "                  row:NSInteger) -> AnyObject! {\n"
  "    var theRecord : PMAllocationItemDisplay = mAllocationStatsDataSource [row]\n"
  "    return theRecord.valueForKey (objectValueForTableColumn.identifier () as String)\n"
  "  }\n"
  "  \n"
  "  //---------------------------------------------------------------------------*\n"
  "  \n"
  "  func numberOfRowsInTableView (NSTableView) -> Int {\n"
  "    return mAllocationStatsDataSource.count\n"
  "  }\n"
  "  \n"
  "  //---------------------------------------------------------------------------*\n"
  "  //    S H O W     A L L O C A T I O N    S T A T S    W I N D O W            *\n"
  "  //---------------------------------------------------------------------------*\n"
  "  \n"
  "  func pmShowAllocationStatsWindow () {\n"
  "    mStatsTableView.window ().makeKeyAndOrderFront (nil)\n"
  "  }\n"
  "  \n"
  "  //---------------------------------------------------------------------------*\n"
  "  \n"
  "  class func routineShowAllocationStatsWindow () {\n"
  "    gDebugObject.pmShowAllocationStatsWindow ()\n"
  "  }\n"
  "  \n"
  "  //---------------------------------------------------------------------------*\n"
  "  \n"
  "  class func addItemToDebugMenu (inMenuItem : NSMenuItem) {\n"
  "    if (nil == gDebugObject) {\n"
  "      gDebugObject = PMAllocationDebug ()\n"
  "      let ok = NSBundle.loadNibNamed (\"PMAllocationDebug\", owner:gDebugObject)\n"
  "      if !ok {\n"
  "        presentErrorWindow (__FILE__, __LINE__, \"Cannot load 'PMAllocationDebug' nib file\") ;\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//    R O U T I N E S                                                          *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "func noteObjectAllocation (inObject : NSObject) {\n"
  "  if (nil == gDebugObject) {\n"
  "    gDebugObject = PMAllocationDebug ()\n"
  "    let ok = NSBundle.loadNibNamed (\"PMAllocationDebug\", owner:gDebugObject)\n"
  "    if !ok {\n"
  "      presentErrorWindow (__FILE__, __LINE__, \"Cannot load 'PMAllocationDebug' nib file\") ;\n"
  "    }\n"
  "  }\n"
  "  let className = inObject.className ()\n"
  "  gDebugObject.pmNoteObjectAllocation (className)\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "func noteObjectDeallocation (inObject : NSObject) {\n"
  "  let className = inObject.className ()\n"
  "  gDebugObject.pmNoteObjectDeallocation (className)\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "func displayAllocation () {\n"
  "  gDebugObject\?.displayAllocation ()\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n" ;

static const cRegularFileWrapper gWrapperFile_8_objective_5F_c_5F_sources (
  "PMAllocationDebug.swift",
  "swift",
  true, // Text file
  11389, // Text length
  gWrapperFileContent_8_objective_5F_c_5F_sources
) ;

//--- File '/PMAllocationDebug.xib'

static const char * gWrapperFileContent_9_objective_5F_c_5F_sources = "<\?xml version=\"1.0\" encoding=\"UTF-8\"\?>\n"
  "<archive type=\"com.apple.InterfaceBuilder3.Cocoa.XIB\" version=\"8.00\">\n"
  "\t<data>\n"
  "\t\t<int key=\"IBDocument.SystemTarget\">1090</int>\n"
  "\t\t<string key=\"IBDocument.SystemVersion\">13D65</string>\n"
  "\t\t<string key=\"IBDocument.InterfaceBuilderVersion\">6154.17</string>\n"
  "\t\t<string key=\"IBDocument.AppKitVersion\">1265.20</string>\n"
  "\t\t<string key=\"IBDocument.HIToolboxVersion\">698.00</string>\n"
  "\t\t<object class=\"NSMutableDictionary\" key=\"IBDocument.PluginVersions\">\n"
  "\t\t\t<string key=\"NS.key.0\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t<string key=\"NS.object.0\">6154.17</string>\n"
  "\t\t</object>\n"
  "\t\t<array key=\"IBDocument.IntegratedClassDependencies\">\n"
  "\t\t\t<string>NSButton</string>\n"
  "\t\t\t<string>NSButtonCell</string>\n"
  "\t\t\t<string>NSCustomObject</string>\n"
  "\t\t\t<string>NSMenu</string>\n"
  "\t\t\t<string>NSMenuItem</string>\n"
  "\t\t\t<string>NSNumberFormatter</string>\n"
  "\t\t\t<string>NSPopUpButton</string>\n"
  "\t\t\t<string>NSPopUpButtonCell</string>\n"
  "\t\t\t<string>NSScrollView</string>\n"
  "\t\t\t<string>NSScroller</string>\n"
  "\t\t\t<string>NSTableColumn</string>\n"
  "\t\t\t<string>NSTableHeaderView</string>\n"
  "\t\t\t<string>NSTableView</string>\n"
  "\t\t\t<string>NSTextField</string>\n"
  "\t\t\t<string>NSTextFieldCell</string>\n"
  "\t\t\t<string>NSView</string>\n"
  "\t\t\t<string>NSWindowTemplate</string>\n"
  "\t\t</array>\n"
  "\t\t<array key=\"IBDocument.PluginDependencies\">\n"
  "\t\t\t<string>com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t</array>\n"
  "\t\t<object class=\"NSMutableDictionary\" key=\"IBDocument.Metadata\">\n"
  "\t\t\t<string key=\"NS.key.0\">PluginDependencyRecalculationVersion</string>\n"
  "\t\t\t<integer value=\"1\" key=\"NS.object.0\"/>\n"
  "\t\t</object>\n"
  "\t\t<array class=\"NSMutableArray\" key=\"IBDocument.RootObjects\" id=\"1000\">\n"
  "\t\t\t<object class=\"NSCustomObject\" id=\"1001\">\n"
  "\t\t\t\t<string key=\"NSClassName\">PMAllocationDebug</string>\n"
  "\t\t\t</object>\n"
  "\t\t\t<object class=\"NSCustomObject\" id=\"1003\">\n"
  "\t\t\t\t<string key=\"NSClassName\">FirstResponder</string>\n"
  "\t\t\t</object>\n"
  "\t\t\t<object class=\"NSCustomObject\" id=\"1004\">\n"
  "\t\t\t\t<string key=\"NSClassName\">NSApplication</string>\n"
  "\t\t\t</object>\n"
  "\t\t\t<object class=\"NSMenu\" id=\"832895925\">\n"
  "\t\t\t\t<string key=\"NSTitle\">Debug</string>\n"
  "\t\t\t\t<array class=\"NSMutableArray\" key=\"NSMenuItems\">\n"
  "\t\t\t\t\t<object class=\"NSMenuItem\" id=\"391542348\">\n"
  "\t\t\t\t\t\t<reference key=\"NSMenu\" ref=\"832895925\"/>\n"
  "\t\t\t\t\t\t<string key=\"NSTitle\">Show Allocation Stats</string>\n"
  "\t\t\t\t\t\t<string key=\"NSKeyEquiv\">,</string>\n"
  "\t\t\t\t\t\t<int key=\"NSKeyEquivModMask\">1310720</int>\n"
  "\t\t\t\t\t\t<int key=\"NSMnemonicLoc\">2147483647</int>\n"
  "\t\t\t\t\t\t<object class=\"NSCustomResource\" key=\"NSOnImage\" id=\"538130668\">\n"
  "\t\t\t\t\t\t\t<string key=\"NSClassName\">NSImage</string>\n"
  "\t\t\t\t\t\t\t<string key=\"NSResourceName\">NSMenuCheckmark</string>\n"
  "\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t<object class=\"NSCustomResource\" key=\"NSMixedImage\" id=\"339904000\">\n"
  "\t\t\t\t\t\t\t<string key=\"NSClassName\">NSImage</string>\n"
  "\t\t\t\t\t\t\t<string key=\"NSResourceName\">NSMenuMixedState</string>\n"
  "\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t</array>\n"
  "\t\t\t</object>\n"
  "\t\t\t<object class=\"NSWindowTemplate\" id=\"488945732\">\n"
  "\t\t\t\t<int key=\"NSWindowStyleMask\">15</int>\n"
  "\t\t\t\t<int key=\"NSWindowBacking\">2</int>\n"
  "\t\t\t\t<string key=\"NSWindowRect\">{{18, 448}, {532, 360}}</string>\n"
  "\t\t\t\t<int key=\"NSWTFlags\">1886913536</int>\n"
  "\t\t\t\t<string key=\"NSWindowTitle\">Allocation Stats</string>\n"
  "\t\t\t\t<string key=\"NSWindowClass\">NSWindow</string>\n"
  "\t\t\t\t<object class=\"NSMutableString\" key=\"NSViewClass\">\n"
  "\t\t\t\t\t<characters key=\"NS.bytes\">View</characters>\n"
  "\t\t\t\t</object>\n"
  "\t\t\t\t<nil key=\"NSUserInterfaceItemIdentifier\"/>\n"
  "\t\t\t\t<string key=\"NSWindowContentMinSize\">{532, 360}</string>\n"
  "\t\t\t\t<object class=\"NSView\" key=\"NSWindowView\" id=\"211121235\">\n"
  "\t\t\t\t\t<reference key=\"NSNextResponder\"/>\n"
  "\t\t\t\t\t<int key=\"NSvFlags\">256</int>\n"
  "\t\t\t\t\t<array class=\"NSMutableArray\" key=\"NSSubviews\">\n"
  "\t\t\t\t\t\t<object class=\"NSScrollView\" id=\"694864762\">\n"
  "\t\t\t\t\t\t\t<reference key=\"NSNextResponder\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t<int key=\"NSvFlags\">274</int>\n"
  "\t\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"NSSubviews\">\n"
  "\t\t\t\t\t\t\t\t<object class=\"NSClipView\" id=\"477363090\">\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSNextResponder\" ref=\"694864762\"/>\n"
  "\t\t\t\t\t\t\t\t\t<int key=\"NSvFlags\">2322</int>\n"
  "\t\t\t\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"NSSubviews\">\n"
  "\t\t\t\t\t\t\t\t\t\t<object class=\"NSTableView\" id=\"54967480\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSNextResponder\" ref=\"477363090\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSvFlags\">4352</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSFrameSize\">{521, 262}</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSSuperview\" ref=\"477363090\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSWindow\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSNextKeyView\" ref=\"584677815\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<bool key=\"NSEnabled\">YES</bool>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<bool key=\"NSAllowsLogicalLayoutDirection\">NO</bool>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<bool key=\"NSControlAllowsExpansionToolTips\">YES</bool>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSTableHeaderView\" key=\"NSHeaderView\" id=\"933801029\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSNextResponder\" ref=\"870119755\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSvFlags\">256</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSFrameSize\">{521, 17}</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSSuperview\" ref=\"870119755\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSWindow\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSNextKeyView\" ref=\"385156970\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSTableView\" ref=\"54967480\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<object class=\"_NSCornerView\" key=\"NSCornerView\" id=\"385156970\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSNextResponder\" ref=\"694864762\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSvFlags\">256</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSFrame\">{{521, 0}, {12, 17}}</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSSuperview\" ref=\"694864762\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSWindow\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSNextKeyView\" ref=\"477363090\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"NSTableColumns\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSTableColumn\" id=\"665282369\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSIdentifier\">mClassname</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<double key=\"NSWidth\">285.60546875</double>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<double key=\"NSMinWidth\">40</double>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<double key=\"NSMaxWidth\">1000</double>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSTableHeaderCell\" key=\"NSHeaderCell\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSCellFlags\">75497536</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSCellFlags2\">2048</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSContents\">Class Name</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSFont\" key=\"NSSupport\" id=\"26\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<bool key=\"IBIsSystemFont\">YES</bool>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<double key=\"NSSize\">11</double>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSfFlags\">3100</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSColor\" key=\"NSBackgroundColor\" id=\"185912087\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSColorSpace\">3</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<bytes key=\"NSWhite\">MC4zMzMzMzI5OQA</bytes>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSColor\" key=\"NSTextColor\" id=\"700270135\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSColorSpace\">6</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSCatalogName\">System</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSColorName\">headerTextColor</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSColor\" key=\"NSColor\" id=\"155403614\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSColorSpace\">3</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<bytes key=\"NSWhite\">MAA</bytes>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSTextFieldCell\" key=\"NSDataCell\" id=\"820684983\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSCellFlags\">1143996481</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSCellFlags2\">1024</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSContents\">Text Cell</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSSupport\" ref=\"26\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSControlView\" ref=\"54967480\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSColor\" key=\"NSBackgroundColor\" id=\"730430839\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSColorSpace\">3</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<bytes key=\"NSWhite\">MQA</bytes>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSColor\" key=\"NSTextColor\" id=\"175780943\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSColorSpace\">6</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSCatalogName\">System</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSColorName\">controlTextColor</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSColor\" ref=\"155403614\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSResizingMask\">3</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<bool key=\"NSIsResizeable\">YES</bool>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSTableView\" ref=\"54967480\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSTableColumn\" id=\"856923415\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSIdentifier\">mSnapshot</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<double key=\"NSWidth\">66</double>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<double key=\"NSMinWidth\">10</double>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<double key=\"NSMaxWidth\">3.4028234663852886e+38</double>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSTableHeaderCell\" key=\"NSHeaderCell\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSCellFlags\">75497536</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSCellFlags2\">134219776</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSContents\">Snap Shot</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSSupport\" ref=\"26\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSColor\" key=\"NSBackgroundColor\" id=\"612056213\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSColorSpace\">6</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSCatalogName\">System</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSColorName\">headerColor</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSColor\" ref=\"730430839\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSTextColor\" ref=\"700270135\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSTextFieldCell\" key=\"NSDataCell\" id=\"608501593\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSCellFlags\">337641536</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSCellFlags2\">134223872</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSContents\">Text Cell</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSSupport\" ref=\"26\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSControlView\" ref=\"54967480\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSColor\" key=\"NSBackgroundColor\" id=\"1044488591\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSColorSpace\">6</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSCatalogName\">System</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSColorName\">controlBackgroundColor</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSColor\" key=\"NSColor\" id=\"122981434\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSColorSpace\">3</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<bytes key=\"NSWhite\">MC42NjY2NjY2NjY3AA</bytes>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSTextColor\" ref=\"175780943\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSResizingMask\">3</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<bool key=\"NSIsResizeable\">YES</bool>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSTableView\" ref=\"54967480\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSTableColumn\" id=\"404121835\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSIdentifier\">mLive</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<double key=\"NSWidth\">79</double>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<double key=\"NSMinWidth\">40</double>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<double key=\"NSMaxWidth\">1000</double>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSTableHeaderCell\" key=\"NSHeaderCell\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSCellFlags\">75497536</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSCellFlags2\">134219776</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSContents\">Live</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSSupport\" ref=\"26\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSBackgroundColor\" ref=\"185912087\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSTextColor\" ref=\"700270135\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSTextFieldCell\" key=\"NSDataCell\" id=\"590032922\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSCellFlags\">1143996481</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSCellFlags2\">134218752</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSContents\">Text Cell</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSSupport\" ref=\"26\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSControlView\" ref=\"54967480\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSBackgroundColor\" ref=\"730430839\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSTextColor\" ref=\"175780943\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSTableView\" ref=\"54967480\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSTableColumn\" id=\"610270419\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSIdentifier\">mAllCount</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<double key=\"NSWidth\">78.081050000000005</double>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<double key=\"NSMinWidth\">31.081050000000001</double>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<double key=\"NSMaxWidth\">1000</double>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSTableHeaderCell\" key=\"NSHeaderCell\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSCellFlags\">75497536</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSCellFlags2\">134219776</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSContents\">Total</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSSupport\" ref=\"26\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSBackgroundColor\" ref=\"612056213\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSTextColor\" ref=\"700270135\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSTextFieldCell\" key=\"NSDataCell\" id=\"236796732\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSCellFlags\">1143996481</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSCellFlags2\">134218752</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSContents\">Text Cell</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSSupport\" ref=\"26\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSControlView\" ref=\"54967480\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSBackgroundColor\" ref=\"1044488591\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSTextColor\" ref=\"175780943\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSTableView\" ref=\"54967480\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<double key=\"NSIntercellSpacingWidth\">3</double>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<double key=\"NSIntercellSpacingHeight\">2</double>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSBackgroundColor\" ref=\"1044488591\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSColor\" key=\"NSGridColor\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSColorSpace\">6</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSCatalogName\">System</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSColorName\">gridColor</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t<object class=\"NSColor\" key=\"NSColor\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSColorSpace\">3</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t\t<bytes key=\"NSWhite\">MC41AA</bytes>\n"
  "\t\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<double key=\"NSRowHeight\">14</double>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSTvFlags\">-490733568</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSDelegate\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSDataSource\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSGridStyleMask\">3</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSColumnAutoresizingStyle\">5</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSDraggingSourceMaskForLocal\">15</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSDraggingSourceMaskForNonLocal\">0</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<bool key=\"NSAllowsTypeSelect\">NO</bool>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSTableViewDraggingDestinationStyle\">0</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSTableViewGroupRowStyle\">1</int>\n"
  "\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NSFrame\">{{0, 17}, {521, 262}}</string>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSSuperview\" ref=\"694864762\"/>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSWindow\"/>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSNextKeyView\" ref=\"54967480\"/>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSDocView\" ref=\"54967480\"/>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSBGColor\" ref=\"1044488591\"/>\n"
  "\t\t\t\t\t\t\t\t\t<int key=\"NScvFlags\">4</int>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<object class=\"NSScroller\" id=\"584677815\">\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSNextResponder\" ref=\"694864762\"/>\n"
  "\t\t\t\t\t\t\t\t\t<int key=\"NSvFlags\">256</int>\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NSFrame\">{{521, 17}, {11, 262}}</string>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSSuperview\" ref=\"694864762\"/>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSWindow\"/>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSNextKeyView\" ref=\"466601769\"/>\n"
  "\t\t\t\t\t\t\t\t\t<bool key=\"NSAllowsLogicalLayoutDirection\">NO</bool>\n"
  "\t\t\t\t\t\t\t\t\t<int key=\"NSsFlags\">256</int>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSTarget\" ref=\"694864762\"/>\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NSAction\">_doScroller:</string>\n"
  "\t\t\t\t\t\t\t\t\t<double key=\"NSPercent\">0.95263160000000002</double>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<object class=\"NSScroller\" id=\"466601769\">\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSNextResponder\" ref=\"694864762\"/>\n"
  "\t\t\t\t\t\t\t\t\t<int key=\"NSvFlags\">256</int>\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NSFrame\">{{0, 279}, {521, 11}}</string>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSSuperview\" ref=\"694864762\"/>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSWindow\"/>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSNextKeyView\"/>\n"
  "\t\t\t\t\t\t\t\t\t<bool key=\"NSAllowsLogicalLayoutDirection\">NO</bool>\n"
  "\t\t\t\t\t\t\t\t\t<int key=\"NSsFlags\">257</int>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSTarget\" ref=\"694864762\"/>\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NSAction\">_doScroller:</string>\n"
  "\t\t\t\t\t\t\t\t\t<double key=\"NSCurValue\">1</double>\n"
  "\t\t\t\t\t\t\t\t\t<double key=\"NSPercent\">0.97565543071161054</double>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<object class=\"NSClipView\" id=\"870119755\">\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSNextResponder\" ref=\"694864762\"/>\n"
  "\t\t\t\t\t\t\t\t\t<int key=\"NSvFlags\">2338</int>\n"
  "\t\t\t\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"NSSubviews\">\n"
  "\t\t\t\t\t\t\t\t\t\t<reference ref=\"933801029\"/>\n"
  "\t\t\t\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NSFrameSize\">{521, 17}</string>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSSuperview\" ref=\"694864762\"/>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSWindow\"/>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSNextKeyView\" ref=\"933801029\"/>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSDocView\" ref=\"933801029\"/>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSBGColor\" ref=\"1044488591\"/>\n"
  "\t\t\t\t\t\t\t\t\t<int key=\"NScvFlags\">4</int>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<reference ref=\"385156970\"/>\n"
  "\t\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t\t<string key=\"NSFrameSize\">{532, 290}</string>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSSuperview\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSWindow\"/>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSNextKeyView\" ref=\"870119755\"/>\n"
  "\t\t\t\t\t\t\t<int key=\"NSsFlags\">133168</int>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSVScroller\" ref=\"584677815\"/>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSHScroller\" ref=\"466601769\"/>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSContentView\" ref=\"477363090\"/>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSHeaderClipView\" ref=\"870119755\"/>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSCornerView\" ref=\"385156970\"/>\n"
  "\t\t\t\t\t\t\t<bytes key=\"NSScrollAmts\">QSAAAEEgAABBgAAAQYAAAA</bytes>\n"
  "\t\t\t\t\t\t\t<double key=\"NSMinMagnification\">0.25</double>\n"
  "\t\t\t\t\t\t\t<double key=\"NSMaxMagnification\">4</double>\n"
  "\t\t\t\t\t\t\t<double key=\"NSMagnification\">1</double>\n"
  "\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t<object class=\"NSTextField\" id=\"381938415\">\n"
  "\t\t\t\t\t\t\t<reference key=\"NSNextResponder\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t<int key=\"NSvFlags\">268</int>\n"
  "\t\t\t\t\t\t\t<string key=\"NSFrame\">{{404, 308}, {111, 14}}</string>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSSuperview\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSWindow\"/>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSNextKeyView\" ref=\"694864762\"/>\n"
  "\t\t\t\t\t\t\t<bool key=\"NSEnabled\">YES</bool>\n"
  "\t\t\t\t\t\t\t<object class=\"NSTextFieldCell\" key=\"NSCell\" id=\"868904438\">\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSCellFlags\">67108864</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSCellFlags2\">-2008940544</int>\n"
  "\t\t\t\t\t\t\t\t<string key=\"NSContents\">\xE2""\x80""\xA6""live count\xE2""\x80""\xA6"" </string>\n"
  "\t\t\t\t\t\t\t\t<object class=\"NSFont\" key=\"NSSupport\" id=\"27\">\n"
  "\t\t\t\t\t\t\t\t\t<bool key=\"IBIsSystemFont\">YES</bool>\n"
  "\t\t\t\t\t\t\t\t\t<double key=\"NSSize\">11</double>\n"
  "\t\t\t\t\t\t\t\t\t<int key=\"NSfFlags\">3357</int>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<object class=\"NSNumberFormatter\" key=\"NSFormatter\" id=\"18967862\">\n"
  "\t\t\t\t\t\t\t\t\t<dictionary class=\"NSMutableDictionary\" key=\"NS.attributes\">\n"
  "\t\t\t\t\t\t\t\t\t\t<boolean value=\"YES\" key=\"allowsFloats\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t<integer value=\"1040\" key=\"formatterBehavior\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t<object class=\"NSLocale\" key=\"locale\" id=\"866676299\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t<string key=\"NS.identifier\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t<string key=\"negativeInfinitySymbol\">-\xE2""\x88""\x9E""</string>\n"
  "\t\t\t\t\t\t\t\t\t\t<string key=\"nilSymbol\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t<string key=\"positiveInfinitySymbol\">+\xE2""\x88""\x9E""</string>\n"
  "\t\t\t\t\t\t\t\t\t</dictionary>\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NS.positiveformat\">#</string>\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NS.negativeformat\">#</string>\n"
  "\t\t\t\t\t\t\t\t\t<nil key=\"NS.positiveattrs\"/>\n"
  "\t\t\t\t\t\t\t\t\t<nil key=\"NS.negativeattrs\"/>\n"
  "\t\t\t\t\t\t\t\t\t<nil key=\"NS.zero\"/>\n"
  "\t\t\t\t\t\t\t\t\t<object class=\"NSAttributedString\" key=\"NS.nil\">\n"
  "\t\t\t\t\t\t\t\t\t\t<string key=\"NSString\"/>\n"
  "\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t<object class=\"NSAttributedString\" key=\"NS.nan\">\n"
  "\t\t\t\t\t\t\t\t\t\t<string key=\"NSString\">NaN</string>\n"
  "\t\t\t\t\t\t\t\t\t\t<dictionary key=\"NSAttributes\" id=\"546668749\"/>\n"
  "\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t<object class=\"NSDecimalNumberPlaceholder\" key=\"NS.min\" id=\"446279750\">\n"
  "\t\t\t\t\t\t\t\t\t\t<int key=\"NS.exponent\">0</int>\n"
  "\t\t\t\t\t\t\t\t\t\t<int key=\"NS.length\">0</int>\n"
  "\t\t\t\t\t\t\t\t\t\t<bool key=\"NS.negative\">YES</bool>\n"
  "\t\t\t\t\t\t\t\t\t\t<bool key=\"NS.compact\">NO</bool>\n"
  "\t\t\t\t\t\t\t\t\t\t<int key=\"NS.mantissa.bo\">1</int>\n"
  "\t\t\t\t\t\t\t\t\t\t<bytes key=\"NS.mantissa\">AAAAAAAAAAAAAAAAAAAAAA</bytes>\n"
  "\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NS.max\" ref=\"446279750\"/>\n"
  "\t\t\t\t\t\t\t\t\t<object class=\"NSDecimalNumberHandler\" key=\"NS.rounding\">\n"
  "\t\t\t\t\t\t\t\t\t\t<int key=\"NS.roundingmode\">3</int>\n"
  "\t\t\t\t\t\t\t\t\t\t<bool key=\"NS.raise.overflow\">YES</bool>\n"
  "\t\t\t\t\t\t\t\t\t\t<bool key=\"NS.raise.underflow\">YES</bool>\n"
  "\t\t\t\t\t\t\t\t\t\t<bool key=\"NS.raise.dividebyzero\">YES</bool>\n"
  "\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NS.decimal\">.</string>\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NS.thousand\">,</string>\n"
  "\t\t\t\t\t\t\t\t\t<bool key=\"NS.hasthousands\">NO</bool>\n"
  "\t\t\t\t\t\t\t\t\t<bool key=\"NS.localized\">NO</bool>\n"
  "\t\t\t\t\t\t\t\t\t<bool key=\"NS.allowsfloats\">YES</bool>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSControlView\" ref=\"381938415\"/>\n"
  "\t\t\t\t\t\t\t\t<object class=\"NSColor\" key=\"NSBackgroundColor\" id=\"277825497\">\n"
  "\t\t\t\t\t\t\t\t\t<int key=\"NSColorSpace\">6</int>\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NSCatalogName\">System</string>\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NSColorName\">controlColor</string>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSColor\" ref=\"122981434\"/>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSTextColor\" ref=\"175780943\"/>\n"
  "\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t<bool key=\"NSAllowsLogicalLayoutDirection\">NO</bool>\n"
  "\t\t\t\t\t\t\t<int key=\"NSTextFieldAlignmentRectInsetsVersion\">1</int>\n"
  "\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t<object class=\"NSPopUpButton\" id=\"518079538\">\n"
  "\t\t\t\t\t\t\t<reference key=\"NSNextResponder\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t<int key=\"NSvFlags\">268</int>\n"
  "\t\t\t\t\t\t\t<string key=\"NSFrame\">{{78, 306}, {164, 19}}</string>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSSuperview\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSWindow\"/>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSNextKeyView\" ref=\"336406046\"/>\n"
  "\t\t\t\t\t\t\t<bool key=\"NSEnabled\">YES</bool>\n"
  "\t\t\t\t\t\t\t<object class=\"NSPopUpButtonCell\" key=\"NSCell\" id=\"92687822\">\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSCellFlags\">-2076180416</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSCellFlags2\">134350848</int>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSSupport\" ref=\"26\"/>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSControlView\" ref=\"518079538\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSButtonFlags\">-2038284288</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSButtonFlags2\">6</int>\n"
  "\t\t\t\t\t\t\t\t<object class=\"NSFont\" key=\"NSAlternateImage\">\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NSName\">LucidaGrande</string>\n"
  "\t\t\t\t\t\t\t\t\t<double key=\"NSSize\">11</double>\n"
  "\t\t\t\t\t\t\t\t\t<int key=\"NSfFlags\">16</int>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<string key=\"NSAlternateContents\"/>\n"
  "\t\t\t\t\t\t\t\t<string key=\"NSKeyEquivalent\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSPeriodicDelay\">400</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSPeriodicInterval\">75</int>\n"
  "\t\t\t\t\t\t\t\t<object class=\"NSMenuItem\" key=\"NSMenuItem\" id=\"555303939\">\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSMenu\" ref=\"1027996105\"/>\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NSTitle\">All Classes</string>\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NSKeyEquiv\"/>\n"
  "\t\t\t\t\t\t\t\t\t<int key=\"NSMnemonicLoc\">2147483647</int>\n"
  "\t\t\t\t\t\t\t\t\t<int key=\"NSState\">1</int>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSOnImage\" ref=\"538130668\"/>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSMixedImage\" ref=\"339904000\"/>\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NSAction\">_popUpItemAction:</string>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NSTarget\" ref=\"92687822\"/>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<bool key=\"NSMenuItemRespectAlignment\">YES</bool>\n"
  "\t\t\t\t\t\t\t\t<object class=\"NSMenu\" key=\"NSMenu\" id=\"1027996105\">\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NSTitle\">OtherViews</string>\n"
  "\t\t\t\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"NSMenuItems\">\n"
  "\t\t\t\t\t\t\t\t\t\t<reference ref=\"555303939\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t<object class=\"NSMenuItem\" id=\"590354082\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSMenu\" ref=\"1027996105\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSTitle\">Allocated Classes</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSKeyEquiv\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSMnemonicLoc\">2147483647</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSOnImage\" ref=\"538130668\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSMixedImage\" ref=\"339904000\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSAction\">_popUpItemAction:</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSTarget\" ref=\"92687822\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t\t<object class=\"NSMenuItem\" id=\"951103194\">\n"
  "\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSMenu\" ref=\"1027996105\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSTitle\">Differences with Snap Shot</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSKeyEquiv\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<int key=\"NSMnemonicLoc\">2147483647</int>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSOnImage\" ref=\"538130668\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSMixedImage\" ref=\"339904000\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<string key=\"NSAction\">_popUpItemAction:</string>\n"
  "\t\t\t\t\t\t\t\t\t\t\t<reference key=\"NSTarget\" ref=\"92687822\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSPreferredEdge\">1</int>\n"
  "\t\t\t\t\t\t\t\t<bool key=\"NSUsesItemFromMenu\">YES</bool>\n"
  "\t\t\t\t\t\t\t\t<bool key=\"NSAltersState\">YES</bool>\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSArrowPosition\">2</int>\n"
  "\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t<bool key=\"NSAllowsLogicalLayoutDirection\">NO</bool>\n"
  "\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t<object class=\"NSTextField\" id=\"146764676\">\n"
  "\t\t\t\t\t\t\t<reference key=\"NSNextResponder\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t<int key=\"NSvFlags\">268</int>\n"
  "\t\t\t\t\t\t\t<string key=\"NSFrame\">{{17, 308}, {56, 14}}</string>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSSuperview\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSWindow\"/>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSNextKeyView\" ref=\"518079538\"/>\n"
  "\t\t\t\t\t\t\t<bool key=\"NSEnabled\">YES</bool>\n"
  "\t\t\t\t\t\t\t<object class=\"NSTextFieldCell\" key=\"NSCell\" id=\"1044367949\">\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSCellFlags\">67108864</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSCellFlags2\">4325376</int>\n"
  "\t\t\t\t\t\t\t\t<string key=\"NSContents\">Display:</string>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSSupport\" ref=\"27\"/>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSControlView\" ref=\"146764676\"/>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSBackgroundColor\" ref=\"277825497\"/>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSTextColor\" ref=\"175780943\"/>\n"
  "\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t<bool key=\"NSAllowsLogicalLayoutDirection\">NO</bool>\n"
  "\t\t\t\t\t\t\t<int key=\"NSTextFieldAlignmentRectInsetsVersion\">1</int>\n"
  "\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t<object class=\"NSButton\" id=\"477594254\">\n"
  "\t\t\t\t\t\t\t<reference key=\"NSNextResponder\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t<int key=\"NSvFlags\">268</int>\n"
  "\t\t\t\t\t\t\t<string key=\"NSFrame\">{{19, 333}, {125, 18}}</string>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSSuperview\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSWindow\"/>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSNextKeyView\" ref=\"733945224\"/>\n"
  "\t\t\t\t\t\t\t<string key=\"NSReuseIdentifierKey\">_NS:9</string>\n"
  "\t\t\t\t\t\t\t<bool key=\"NSEnabled\">YES</bool>\n"
  "\t\t\t\t\t\t\t<object class=\"NSButtonCell\" key=\"NSCell\" id=\"255990638\">\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSCellFlags\">-2080374784</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSCellFlags2\">131072</int>\n"
  "\t\t\t\t\t\t\t\t<string key=\"NSContents\">Visible At Launch</string>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSSupport\" ref=\"26\"/>\n"
  "\t\t\t\t\t\t\t\t<string key=\"NSCellIdentifier\">_NS:9</string>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSControlView\" ref=\"477594254\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSButtonFlags\">1211912448</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSButtonFlags2\">2</int>\n"
  "\t\t\t\t\t\t\t\t<object class=\"NSCustomResource\" key=\"NSNormalImage\">\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NSClassName\">NSImage</string>\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NSResourceName\">NSSwitch</string>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<object class=\"NSButtonImageSource\" key=\"NSAlternateImage\">\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NSImageName\">NSSwitch</string>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<string key=\"NSAlternateContents\"/>\n"
  "\t\t\t\t\t\t\t\t<string key=\"NSKeyEquivalent\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSPeriodicDelay\">200</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSPeriodicInterval\">25</int>\n"
  "\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t<bool key=\"NSAllowsLogicalLayoutDirection\">NO</bool>\n"
  "\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t<object class=\"NSTextField\" id=\"336406046\">\n"
  "\t\t\t\t\t\t\t<reference key=\"NSNextResponder\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t<int key=\"NSvFlags\">268</int>\n"
  "\t\t\t\t\t\t\t<string key=\"NSFrame\">{{255, 307}, {147, 15}}</string>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSSuperview\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSWindow\"/>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSNextKeyView\" ref=\"381938415\"/>\n"
  "\t\t\t\t\t\t\t<bool key=\"NSEnabled\">YES</bool>\n"
  "\t\t\t\t\t\t\t<object class=\"NSTextFieldCell\" key=\"NSCell\" id=\"403189114\">\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSCellFlags\">67108864</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSCellFlags2\">71434240</int>\n"
  "\t\t\t\t\t\t\t\t<string key=\"NSContents\">Currently Allocated:</string>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSSupport\" ref=\"27\"/>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSControlView\" ref=\"336406046\"/>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSBackgroundColor\" ref=\"277825497\"/>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSTextColor\" ref=\"175780943\"/>\n"
  "\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t<bool key=\"NSAllowsLogicalLayoutDirection\">NO</bool>\n"
  "\t\t\t\t\t\t\t<int key=\"NSTextFieldAlignmentRectInsetsVersion\">1</int>\n"
  "\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t<object class=\"NSTextField\" id=\"300812263\">\n"
  "\t\t\t\t\t\t\t<reference key=\"NSNextResponder\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t<int key=\"NSvFlags\">268</int>\n"
  "\t\t\t\t\t\t\t<string key=\"NSFrame\">{{404, 335}, {111, 14}}</string>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSSuperview\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSWindow\"/>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSNextKeyView\" ref=\"146764676\"/>\n"
  "\t\t\t\t\t\t\t<bool key=\"NSEnabled\">YES</bool>\n"
  "\t\t\t\t\t\t\t<object class=\"NSTextFieldCell\" key=\"NSCell\" id=\"316229116\">\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSCellFlags\">67108864</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSCellFlags2\">-2008940544</int>\n"
  "\t\t\t\t\t\t\t\t<string key=\"NSContents\">\xE2""\x80""\xA6""total count\xE2""\x80""\xA6"" </string>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSSupport\" ref=\"27\"/>\n"
  "\t\t\t\t\t\t\t\t<object class=\"NSNumberFormatter\" key=\"NSFormatter\" id=\"920445510\">\n"
  "\t\t\t\t\t\t\t\t\t<dictionary class=\"NSMutableDictionary\" key=\"NS.attributes\">\n"
  "\t\t\t\t\t\t\t\t\t\t<boolean value=\"YES\" key=\"allowsFloats\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t<integer value=\"1040\" key=\"formatterBehavior\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t<reference key=\"locale\" ref=\"866676299\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t<string key=\"negativeInfinitySymbol\">-\xE2""\x88""\x9E""</string>\n"
  "\t\t\t\t\t\t\t\t\t\t<string key=\"nilSymbol\"/>\n"
  "\t\t\t\t\t\t\t\t\t\t<string key=\"positiveInfinitySymbol\">+\xE2""\x88""\x9E""</string>\n"
  "\t\t\t\t\t\t\t\t\t</dictionary>\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NS.positiveformat\">#</string>\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NS.negativeformat\">#</string>\n"
  "\t\t\t\t\t\t\t\t\t<nil key=\"NS.positiveattrs\"/>\n"
  "\t\t\t\t\t\t\t\t\t<nil key=\"NS.negativeattrs\"/>\n"
  "\t\t\t\t\t\t\t\t\t<nil key=\"NS.zero\"/>\n"
  "\t\t\t\t\t\t\t\t\t<object class=\"NSAttributedString\" key=\"NS.nil\">\n"
  "\t\t\t\t\t\t\t\t\t\t<string key=\"NSString\"/>\n"
  "\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t<object class=\"NSAttributedString\" key=\"NS.nan\">\n"
  "\t\t\t\t\t\t\t\t\t\t<string key=\"NSString\">NaN</string>\n"
  "\t\t\t\t\t\t\t\t\t\t<reference key=\"NSAttributes\" ref=\"546668749\"/>\n"
  "\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NS.min\" ref=\"446279750\"/>\n"
  "\t\t\t\t\t\t\t\t\t<reference key=\"NS.max\" ref=\"446279750\"/>\n"
  "\t\t\t\t\t\t\t\t\t<object class=\"NSDecimalNumberHandler\" key=\"NS.rounding\">\n"
  "\t\t\t\t\t\t\t\t\t\t<int key=\"NS.roundingmode\">3</int>\n"
  "\t\t\t\t\t\t\t\t\t\t<bool key=\"NS.raise.overflow\">YES</bool>\n"
  "\t\t\t\t\t\t\t\t\t\t<bool key=\"NS.raise.underflow\">YES</bool>\n"
  "\t\t\t\t\t\t\t\t\t\t<bool key=\"NS.raise.dividebyzero\">YES</bool>\n"
  "\t\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NS.decimal\">.</string>\n"
  "\t\t\t\t\t\t\t\t\t<string key=\"NS.thousand\">,</string>\n"
  "\t\t\t\t\t\t\t\t\t<bool key=\"NS.hasthousands\">NO</bool>\n"
  "\t\t\t\t\t\t\t\t\t<bool key=\"NS.localized\">NO</bool>\n"
  "\t\t\t\t\t\t\t\t\t<bool key=\"NS.allowsfloats\">YES</bool>\n"
  "\t\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSControlView\" ref=\"300812263\"/>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSBackgroundColor\" ref=\"277825497\"/>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSTextColor\" ref=\"175780943\"/>\n"
  "\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t<bool key=\"NSAllowsLogicalLayoutDirection\">NO</bool>\n"
  "\t\t\t\t\t\t\t<int key=\"NSTextFieldAlignmentRectInsetsVersion\">1</int>\n"
  "\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t<object class=\"NSTextField\" id=\"203767798\">\n"
  "\t\t\t\t\t\t\t<reference key=\"NSNextResponder\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t<int key=\"NSvFlags\">268</int>\n"
  "\t\t\t\t\t\t\t<string key=\"NSFrame\">{{255, 334}, {147, 15}}</string>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSSuperview\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSWindow\"/>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSNextKeyView\" ref=\"300812263\"/>\n"
  "\t\t\t\t\t\t\t<bool key=\"NSEnabled\">YES</bool>\n"
  "\t\t\t\t\t\t\t<object class=\"NSTextFieldCell\" key=\"NSCell\" id=\"621467730\">\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSCellFlags\">67108864</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSCellFlags2\">71434240</int>\n"
  "\t\t\t\t\t\t\t\t<string key=\"NSContents\">Total Allocated:</string>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSSupport\" ref=\"27\"/>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSControlView\" ref=\"203767798\"/>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSBackgroundColor\" ref=\"277825497\"/>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSTextColor\" ref=\"175780943\"/>\n"
  "\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t<bool key=\"NSAllowsLogicalLayoutDirection\">NO</bool>\n"
  "\t\t\t\t\t\t\t<int key=\"NSTextFieldAlignmentRectInsetsVersion\">1</int>\n"
  "\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t<object class=\"NSButton\" id=\"733945224\">\n"
  "\t\t\t\t\t\t\t<reference key=\"NSNextResponder\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t<int key=\"NSvFlags\">268</int>\n"
  "\t\t\t\t\t\t\t<string key=\"NSFrame\">{{145, 327}, {102, 28}}</string>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSSuperview\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSWindow\"/>\n"
  "\t\t\t\t\t\t\t<reference key=\"NSNextKeyView\" ref=\"203767798\"/>\n"
  "\t\t\t\t\t\t\t<string key=\"NSReuseIdentifierKey\">_NS:9</string>\n"
  "\t\t\t\t\t\t\t<bool key=\"NSEnabled\">YES</bool>\n"
  "\t\t\t\t\t\t\t<object class=\"NSButtonCell\" key=\"NSCell\" id=\"413400078\">\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSCellFlags\">67108864</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSCellFlags2\">134348800</int>\n"
  "\t\t\t\t\t\t\t\t<string key=\"NSContents\">Snap Shot</string>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSSupport\" ref=\"26\"/>\n"
  "\t\t\t\t\t\t\t\t<string key=\"NSCellIdentifier\">_NS:9</string>\n"
  "\t\t\t\t\t\t\t\t<reference key=\"NSControlView\" ref=\"733945224\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSButtonFlags\">-2038284288</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSButtonFlags2\">129</int>\n"
  "\t\t\t\t\t\t\t\t<string key=\"NSAlternateContents\"/>\n"
  "\t\t\t\t\t\t\t\t<string key=\"NSKeyEquivalent\"/>\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSPeriodicDelay\">200</int>\n"
  "\t\t\t\t\t\t\t\t<int key=\"NSPeriodicInterval\">25</int>\n"
  "\t\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t\t<bool key=\"NSAllowsLogicalLayoutDirection\">NO</bool>\n"
  "\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t</array>\n"
  "\t\t\t\t\t<string key=\"NSFrameSize\">{532, 360}</string>\n"
  "\t\t\t\t\t<reference key=\"NSSuperview\"/>\n"
  "\t\t\t\t\t<reference key=\"NSWindow\"/>\n"
  "\t\t\t\t\t<reference key=\"NSNextKeyView\" ref=\"477594254\"/>\n"
  "\t\t\t\t</object>\n"
  "\t\t\t\t<string key=\"NSScreenRect\">{{0, 0}, {2560, 1418}}</string>\n"
  "\t\t\t\t<string key=\"NSMinSize\">{532, 382}</string>\n"
  "\t\t\t\t<string key=\"NSMaxSize\">{10000000000000, 10000000000000}</string>\n"
  "\t\t\t\t<string key=\"NSFrameAutosaveName\">PMAllactionStatsWindowLocation</string>\n"
  "\t\t\t\t<bool key=\"NSWindowIsRestorable\">YES</bool>\n"
  "\t\t\t</object>\n"
  "\t\t</array>\n"
  "\t\t<object class=\"IBObjectContainer\" key=\"IBDocument.Objects\">\n"
  "\t\t\t<array class=\"NSMutableArray\" key=\"connectionRecords\">\n"
  "\t\t\t\t<object class=\"IBConnectionRecord\">\n"
  "\t\t\t\t\t<object class=\"IBOutletConnection\" key=\"connection\">\n"
  "\t\t\t\t\t\t<string key=\"label\">mDebugMenu</string>\n"
  "\t\t\t\t\t\t<reference key=\"source\" ref=\"1001\"/>\n"
  "\t\t\t\t\t\t<reference key=\"destination\" ref=\"832895925\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<int key=\"connectionID\">10</int>\n"
  "\t\t\t\t</object>\n"
  "\t\t\t\t<object class=\"IBConnectionRecord\">\n"
  "\t\t\t\t\t<object class=\"IBOutletConnection\" key=\"connection\">\n"
  "\t\t\t\t\t\t<string key=\"label\">mAllocationStatsWindow</string>\n"
  "\t\t\t\t\t\t<reference key=\"source\" ref=\"1001\"/>\n"
  "\t\t\t\t\t\t<reference key=\"destination\" ref=\"488945732\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<int key=\"connectionID\">60</int>\n"
  "\t\t\t\t</object>\n"
  "\t\t\t\t<object class=\"IBConnectionRecord\">\n"
  "\t\t\t\t\t<object class=\"IBOutletConnection\" key=\"connection\">\n"
  "\t\t\t\t\t\t<string key=\"label\">mAllocatedObjectCountTextField</string>\n"
  "\t\t\t\t\t\t<reference key=\"source\" ref=\"1001\"/>\n"
  "\t\t\t\t\t\t<reference key=\"destination\" ref=\"381938415\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<int key=\"connectionID\">102</int>\n"
  "\t\t\t\t</object>\n"
  "\t\t\t\t<object class=\"IBConnectionRecord\">\n"
  "\t\t\t\t\t<object class=\"IBOutletConnection\" key=\"connection\">\n"
  "\t\t\t\t\t\t<string key=\"label\">mStatsTableView</string>\n"
  "\t\t\t\t\t\t<reference key=\"source\" ref=\"1001\"/>\n"
  "\t\t\t\t\t\t<reference key=\"destination\" ref=\"54967480\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<int key=\"connectionID\">108</int>\n"
  "\t\t\t\t</object>\n"
  "\t\t\t\t<object class=\"IBConnectionRecord\">\n"
  "\t\t\t\t\t<object class=\"IBOutletConnection\" key=\"connection\">\n"
  "\t\t\t\t\t\t<string key=\"label\">mAllocationStatsWindowVisibleAtLaunchCheckbox</string>\n"
  "\t\t\t\t\t\t<reference key=\"source\" ref=\"1001\"/>\n"
  "\t\t\t\t\t\t<reference key=\"destination\" ref=\"477594254\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<int key=\"connectionID\">152</int>\n"
  "\t\t\t\t</object>\n"
  "\t\t\t\t<object class=\"IBConnectionRecord\">\n"
  "\t\t\t\t\t<object class=\"IBOutletConnection\" key=\"connection\">\n"
  "\t\t\t\t\t\t<string key=\"label\">mDisplayFilterPopUpButton</string>\n"
  "\t\t\t\t\t\t<reference key=\"source\" ref=\"1001\"/>\n"
  "\t\t\t\t\t\t<reference key=\"destination\" ref=\"518079538\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<int key=\"connectionID\">153</int>\n"
  "\t\t\t\t</object>\n"
  "\t\t\t\t<object class=\"IBConnectionRecord\">\n"
  "\t\t\t\t\t<object class=\"IBOutletConnection\" key=\"connection\">\n"
  "\t\t\t\t\t\t<string key=\"label\">mCurrentlyAllocatedObjectCountTextField</string>\n"
  "\t\t\t\t\t\t<reference key=\"source\" ref=\"1001\"/>\n"
  "\t\t\t\t\t\t<reference key=\"destination\" ref=\"381938415\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<int key=\"connectionID\">186</int>\n"
  "\t\t\t\t</object>\n"
  "\t\t\t\t<object class=\"IBConnectionRecord\">\n"
  "\t\t\t\t\t<object class=\"IBOutletConnection\" key=\"connection\">\n"
  "\t\t\t\t\t\t<string key=\"label\">mTotalAllocatedObjectCountTextField</string>\n"
  "\t\t\t\t\t\t<reference key=\"source\" ref=\"1001\"/>\n"
  "\t\t\t\t\t\t<reference key=\"destination\" ref=\"300812263\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<int key=\"connectionID\">187</int>\n"
  "\t\t\t\t</object>\n"
  "\t\t\t\t<object class=\"IBConnectionRecord\">\n"
  "\t\t\t\t\t<object class=\"IBOutletConnection\" key=\"connection\">\n"
  "\t\t\t\t\t\t<string key=\"label\">mPerformSnapShotButton</string>\n"
  "\t\t\t\t\t\t<reference key=\"source\" ref=\"1001\"/>\n"
  "\t\t\t\t\t\t<reference key=\"destination\" ref=\"733945224\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<int key=\"connectionID\">209</int>\n"
  "\t\t\t\t</object>\n"
  "\t\t\t\t<object class=\"IBConnectionRecord\">\n"
  "\t\t\t\t\t<object class=\"IBActionConnection\" key=\"connection\">\n"
  "\t\t\t\t\t\t<string key=\"label\">performSnapShotAction:</string>\n"
  "\t\t\t\t\t\t<reference key=\"source\" ref=\"1001\"/>\n"
  "\t\t\t\t\t\t<reference key=\"destination\" ref=\"733945224\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<int key=\"connectionID\">214</int>\n"
  "\t\t\t\t</object>\n"
  "\t\t\t\t<object class=\"IBConnectionRecord\">\n"
  "\t\t\t\t\t<object class=\"IBActionConnection\" key=\"connection\">\n"
  "\t\t\t\t\t\t<string key=\"label\">makeKeyAndOrderFront:</string>\n"
  "\t\t\t\t\t\t<reference key=\"source\" ref=\"488945732\"/>\n"
  "\t\t\t\t\t\t<reference key=\"destination\" ref=\"391542348\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<int key=\"connectionID\">213</int>\n"
  "\t\t\t\t</object>\n"
  "\t\t\t</array>\n"
  "\t\t\t<object class=\"IBMutableOrderedSet\" key=\"objectRecords\">\n"
  "\t\t\t\t<array key=\"orderedObjects\">\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">0</int>\n"
  "\t\t\t\t\t\t<array key=\"object\" id=\"0\"/>\n"
  "\t\t\t\t\t\t<reference key=\"children\" ref=\"1000\"/>\n"
  "\t\t\t\t\t\t<nil key=\"parent\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">-2</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"1001\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"0\"/>\n"
  "\t\t\t\t\t\t<string key=\"objectName\">File's Owner</string>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">-1</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"1003\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"0\"/>\n"
  "\t\t\t\t\t\t<string key=\"objectName\">First Responder</string>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">-3</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"1004\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"0\"/>\n"
  "\t\t\t\t\t\t<string key=\"objectName\">Application</string>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">6</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"832895925\"/>\n"
  "\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"children\">\n"
  "\t\t\t\t\t\t\t<reference ref=\"391542348\"/>\n"
  "\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"0\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">7</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"391542348\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"832895925\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">13</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"488945732\"/>\n"
  "\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"children\">\n"
  "\t\t\t\t\t\t\t<reference ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"0\"/>\n"
  "\t\t\t\t\t\t<string key=\"objectName\">AllocationStats Window</string>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">14</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"children\">\n"
  "\t\t\t\t\t\t\t<reference ref=\"518079538\"/>\n"
  "\t\t\t\t\t\t\t<reference ref=\"146764676\"/>\n"
  "\t\t\t\t\t\t\t<reference ref=\"381938415\"/>\n"
  "\t\t\t\t\t\t\t<reference ref=\"477594254\"/>\n"
  "\t\t\t\t\t\t\t<reference ref=\"336406046\"/>\n"
  "\t\t\t\t\t\t\t<reference ref=\"300812263\"/>\n"
  "\t\t\t\t\t\t\t<reference ref=\"203767798\"/>\n"
  "\t\t\t\t\t\t\t<reference ref=\"733945224\"/>\n"
  "\t\t\t\t\t\t\t<reference ref=\"694864762\"/>\n"
  "\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"488945732\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">15</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"694864762\"/>\n"
  "\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"children\">\n"
  "\t\t\t\t\t\t\t<reference ref=\"933801029\"/>\n"
  "\t\t\t\t\t\t\t<reference ref=\"466601769\"/>\n"
  "\t\t\t\t\t\t\t<reference ref=\"584677815\"/>\n"
  "\t\t\t\t\t\t\t<reference ref=\"54967480\"/>\n"
  "\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">16</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"518079538\"/>\n"
  "\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"children\">\n"
  "\t\t\t\t\t\t\t<reference ref=\"92687822\"/>\n"
  "\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">17</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"146764676\"/>\n"
  "\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"children\">\n"
  "\t\t\t\t\t\t\t<reference ref=\"1044367949\"/>\n"
  "\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">18</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"381938415\"/>\n"
  "\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"children\">\n"
  "\t\t\t\t\t\t\t<reference ref=\"868904438\"/>\n"
  "\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">23</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"868904438\"/>\n"
  "\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"children\">\n"
  "\t\t\t\t\t\t\t<reference ref=\"18967862\"/>\n"
  "\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"381938415\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">24</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"1044367949\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"146764676\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">25</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"92687822\"/>\n"
  "\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"children\">\n"
  "\t\t\t\t\t\t\t<reference ref=\"1027996105\"/>\n"
  "\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"518079538\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">26</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"1027996105\"/>\n"
  "\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"children\">\n"
  "\t\t\t\t\t\t\t<reference ref=\"555303939\"/>\n"
  "\t\t\t\t\t\t\t<reference ref=\"590354082\"/>\n"
  "\t\t\t\t\t\t\t<reference ref=\"951103194\"/>\n"
  "\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"92687822\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">27</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"555303939\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"1027996105\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">28</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"590354082\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"1027996105\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">29</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"933801029\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"694864762\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">30</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"466601769\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"694864762\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">31</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"584677815\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"694864762\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">32</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"54967480\"/>\n"
  "\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"children\">\n"
  "\t\t\t\t\t\t\t<reference ref=\"665282369\"/>\n"
  "\t\t\t\t\t\t\t<reference ref=\"404121835\"/>\n"
  "\t\t\t\t\t\t\t<reference ref=\"610270419\"/>\n"
  "\t\t\t\t\t\t\t<reference ref=\"856923415\"/>\n"
  "\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"694864762\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">33</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"665282369\"/>\n"
  "\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"children\">\n"
  "\t\t\t\t\t\t\t<reference ref=\"820684983\"/>\n"
  "\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"54967480\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">34</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"404121835\"/>\n"
  "\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"children\">\n"
  "\t\t\t\t\t\t\t<reference ref=\"590032922\"/>\n"
  "\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"54967480\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">35</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"610270419\"/>\n"
  "\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"children\">\n"
  "\t\t\t\t\t\t\t<reference ref=\"236796732\"/>\n"
  "\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"54967480\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">36</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"236796732\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"610270419\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">37</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"590032922\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"404121835\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">38</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"820684983\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"665282369\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">107</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"18967862\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"868904438\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">138</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"477594254\"/>\n"
  "\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"children\">\n"
  "\t\t\t\t\t\t\t<reference ref=\"255990638\"/>\n"
  "\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">139</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"255990638\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"477594254\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">154</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"336406046\"/>\n"
  "\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"children\">\n"
  "\t\t\t\t\t\t\t<reference ref=\"403189114\"/>\n"
  "\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">156</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"403189114\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"336406046\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">171</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"300812263\"/>\n"
  "\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"children\">\n"
  "\t\t\t\t\t\t\t<reference ref=\"316229116\"/>\n"
  "\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">172</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"203767798\"/>\n"
  "\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"children\">\n"
  "\t\t\t\t\t\t\t<reference ref=\"621467730\"/>\n"
  "\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">175</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"621467730\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"203767798\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">177</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"316229116\"/>\n"
  "\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"children\">\n"
  "\t\t\t\t\t\t\t<reference ref=\"920445510\"/>\n"
  "\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"300812263\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">178</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"920445510\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"316229116\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">207</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"733945224\"/>\n"
  "\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"children\">\n"
  "\t\t\t\t\t\t\t<reference ref=\"413400078\"/>\n"
  "\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"211121235\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">208</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"413400078\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"733945224\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">210</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"856923415\"/>\n"
  "\t\t\t\t\t\t<array class=\"NSMutableArray\" key=\"children\">\n"
  "\t\t\t\t\t\t\t<reference ref=\"608501593\"/>\n"
  "\t\t\t\t\t\t</array>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"54967480\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">211</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"608501593\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"856923415\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"IBObjectRecord\">\n"
  "\t\t\t\t\t\t<int key=\"objectID\">212</int>\n"
  "\t\t\t\t\t\t<reference key=\"object\" ref=\"951103194\"/>\n"
  "\t\t\t\t\t\t<reference key=\"parent\" ref=\"1027996105\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t</array>\n"
  "\t\t\t</object>\n"
  "\t\t\t<dictionary class=\"NSMutableDictionary\" key=\"flattenedProperties\">\n"
  "\t\t\t\t<string key=\"-1.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"-2.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"-3.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<integer value=\"1041\" key=\"107.IBNumberFormatterBehaviorMetadataKey\"/>\n"
  "\t\t\t\t<boolean value=\"YES\" key=\"107.IBNumberFormatterLocalizesFormatMetadataKey\"/>\n"
  "\t\t\t\t<string key=\"107.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"13.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"13.IBWindowTemplateEditedContentRect\">{{110, 1018}, {532, 360}}</string>\n"
  "\t\t\t\t<string key=\"138.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"139.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"14.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"15.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"154.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"156.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"16.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"17.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"171.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"172.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"175.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"177.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<integer value=\"1041\" key=\"178.IBNumberFormatterBehaviorMetadataKey\"/>\n"
  "\t\t\t\t<boolean value=\"YES\" key=\"178.IBNumberFormatterLocalizesFormatMetadataKey\"/>\n"
  "\t\t\t\t<string key=\"178.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"18.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"207.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"208.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"210.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"211.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"212.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"23.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"24.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"25.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"26.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"27.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"28.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"29.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<integer value=\"1\" key=\"29.IBShouldRemoveOnLegacySave\"/>\n"
  "\t\t\t\t<string key=\"30.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<integer value=\"1\" key=\"30.IBShouldRemoveOnLegacySave\"/>\n"
  "\t\t\t\t<string key=\"31.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<integer value=\"1\" key=\"31.IBShouldRemoveOnLegacySave\"/>\n"
  "\t\t\t\t<string key=\"32.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"33.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"34.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"35.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"36.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<integer value=\"1\" key=\"36.IBShouldRemoveOnLegacySave\"/>\n"
  "\t\t\t\t<string key=\"37.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<integer value=\"1\" key=\"37.IBShouldRemoveOnLegacySave\"/>\n"
  "\t\t\t\t<string key=\"38.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<integer value=\"1\" key=\"38.IBShouldRemoveOnLegacySave\"/>\n"
  "\t\t\t\t<string key=\"6.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t\t<string key=\"7.IBPluginDependency\">com.apple.InterfaceBuilder.CocoaPlugin</string>\n"
  "\t\t\t</dictionary>\n"
  "\t\t\t<dictionary class=\"NSMutableDictionary\" key=\"unlocalizedProperties\"/>\n"
  "\t\t\t<nil key=\"activeLocalization\"/>\n"
  "\t\t\t<dictionary class=\"NSMutableDictionary\" key=\"localizations\"/>\n"
  "\t\t\t<nil key=\"sourceID\"/>\n"
  "\t\t\t<int key=\"maxID\">214</int>\n"
  "\t\t</object>\n"
  "\t\t<object class=\"IBClassDescriber\" key=\"IBDocument.Classes\">\n"
  "\t\t\t<array class=\"NSMutableArray\" key=\"referencedPartialClassDescriptions\">\n"
  "\t\t\t\t<object class=\"IBPartialClassDescription\">\n"
  "\t\t\t\t\t<string key=\"className\">FirstResponder</string>\n"
  "\t\t\t\t\t<object class=\"IBClassDescriptionSource\" key=\"sourceIdentifier\">\n"
  "\t\t\t\t\t\t<string key=\"majorKey\">IBUserSource</string>\n"
  "\t\t\t\t\t\t<string key=\"minorKey\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t</object>\n"
  "\t\t\t\t<object class=\"IBPartialClassDescription\">\n"
  "\t\t\t\t\t<string key=\"className\">PMAllocationDebug</string>\n"
  "\t\t\t\t\t<string key=\"superclassName\">NSObject</string>\n"
  "\t\t\t\t\t<object class=\"NSMutableDictionary\" key=\"actions\">\n"
  "\t\t\t\t\t\t<string key=\"NS.key.0\">performSnapShotAction:</string>\n"
  "\t\t\t\t\t\t<string key=\"NS.object.0\">id</string>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"NSMutableDictionary\" key=\"actionInfosByName\">\n"
  "\t\t\t\t\t\t<string key=\"NS.key.0\">performSnapShotAction:</string>\n"
  "\t\t\t\t\t\t<object class=\"IBActionInfo\" key=\"NS.object.0\" id=\"252222515\">\n"
  "\t\t\t\t\t\t\t<string key=\"name\">performSnapShotAction:</string>\n"
  "\t\t\t\t\t\t\t<string key=\"candidateClassName\">id</string>\n"
  "\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<dictionary class=\"NSMutableDictionary\" key=\"outlets\">\n"
  "\t\t\t\t\t\t<string key=\"mAllocationStatsWindow\">NSWindow</string>\n"
  "\t\t\t\t\t\t<string key=\"mAllocationStatsWindowVisibleAtLaunchCheckbox\">NSButton</string>\n"
  "\t\t\t\t\t\t<string key=\"mCurrentlyAllocatedObjectCountTextField\">NSTextField</string>\n"
  "\t\t\t\t\t\t<string key=\"mDebugMenu\">NSMenu</string>\n"
  "\t\t\t\t\t\t<string key=\"mDisplayFilterPopUpButton\">NSPopUpButton</string>\n"
  "\t\t\t\t\t\t<string key=\"mPerformSnapShotButton\">NSButton</string>\n"
  "\t\t\t\t\t\t<string key=\"mStatsTableView\">NSTableView</string>\n"
  "\t\t\t\t\t\t<string key=\"mTotalAllocatedObjectCountTextField\">NSTextField</string>\n"
  "\t\t\t\t\t</dictionary>\n"
  "\t\t\t\t\t<dictionary class=\"NSMutableDictionary\" key=\"toOneOutletInfosByName\">\n"
  "\t\t\t\t\t\t<object class=\"IBToOneOutletInfo\" key=\"mAllocationStatsWindow\" id=\"202261494\">\n"
  "\t\t\t\t\t\t\t<string key=\"name\">mAllocationStatsWindow</string>\n"
  "\t\t\t\t\t\t\t<string key=\"candidateClassName\">NSWindow</string>\n"
  "\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t<object class=\"IBToOneOutletInfo\" key=\"mAllocationStatsWindowVisibleAtLaunchCheckbox\" id=\"96313521\">\n"
  "\t\t\t\t\t\t\t<string key=\"name\">mAllocationStatsWindowVisibleAtLaunchCheckbox</string>\n"
  "\t\t\t\t\t\t\t<string key=\"candidateClassName\">NSButton</string>\n"
  "\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t<object class=\"IBToOneOutletInfo\" key=\"mCurrentlyAllocatedObjectCountTextField\" id=\"802936540\">\n"
  "\t\t\t\t\t\t\t<string key=\"name\">mCurrentlyAllocatedObjectCountTextField</string>\n"
  "\t\t\t\t\t\t\t<string key=\"candidateClassName\">NSTextField</string>\n"
  "\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t<object class=\"IBToOneOutletInfo\" key=\"mDebugMenu\" id=\"270990980\">\n"
  "\t\t\t\t\t\t\t<string key=\"name\">mDebugMenu</string>\n"
  "\t\t\t\t\t\t\t<string key=\"candidateClassName\">NSMenu</string>\n"
  "\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t<object class=\"IBToOneOutletInfo\" key=\"mDisplayFilterPopUpButton\" id=\"677236983\">\n"
  "\t\t\t\t\t\t\t<string key=\"name\">mDisplayFilterPopUpButton</string>\n"
  "\t\t\t\t\t\t\t<string key=\"candidateClassName\">NSPopUpButton</string>\n"
  "\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t<object class=\"IBToOneOutletInfo\" key=\"mPerformSnapShotButton\" id=\"383270263\">\n"
  "\t\t\t\t\t\t\t<string key=\"name\">mPerformSnapShotButton</string>\n"
  "\t\t\t\t\t\t\t<string key=\"candidateClassName\">NSButton</string>\n"
  "\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t<object class=\"IBToOneOutletInfo\" key=\"mStatsTableView\" id=\"705173782\">\n"
  "\t\t\t\t\t\t\t<string key=\"name\">mStatsTableView</string>\n"
  "\t\t\t\t\t\t\t<string key=\"candidateClassName\">NSTableView</string>\n"
  "\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t\t<object class=\"IBToOneOutletInfo\" key=\"mTotalAllocatedObjectCountTextField\" id=\"1061158610\">\n"
  "\t\t\t\t\t\t\t<string key=\"name\">mTotalAllocatedObjectCountTextField</string>\n"
  "\t\t\t\t\t\t\t<string key=\"candidateClassName\">NSTextField</string>\n"
  "\t\t\t\t\t\t</object>\n"
  "\t\t\t\t\t</dictionary>\n"
  "\t\t\t\t\t<object class=\"IBClassDescriptionSource\" key=\"sourceIdentifier\">\n"
  "\t\t\t\t\t\t<string key=\"majorKey\">IBProjectSource</string>\n"
  "\t\t\t\t\t\t<string key=\"minorKey\">../01-simple-preferences/PMAllocationDebug.swift</string>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t</object>\n"
  "\t\t\t\t<object class=\"IBPartialClassDescription\">\n"
  "\t\t\t\t\t<string key=\"className\">PMAllocationDebug</string>\n"
  "\t\t\t\t\t<string key=\"superclassName\">NSObject</string>\n"
  "\t\t\t\t\t<object class=\"NSMutableDictionary\" key=\"actions\">\n"
  "\t\t\t\t\t\t<string key=\"NS.key.0\">performSnapShotAction:</string>\n"
  "\t\t\t\t\t\t<string key=\"NS.object.0\">id</string>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<object class=\"NSMutableDictionary\" key=\"actionInfosByName\">\n"
  "\t\t\t\t\t\t<string key=\"NS.key.0\">performSnapShotAction:</string>\n"
  "\t\t\t\t\t\t<reference key=\"NS.object.0\" ref=\"252222515\"/>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t\t<dictionary class=\"NSMutableDictionary\" key=\"outlets\">\n"
  "\t\t\t\t\t\t<string key=\"mAllocationStatsWindow\">NSWindow</string>\n"
  "\t\t\t\t\t\t<string key=\"mAllocationStatsWindowVisibleAtLaunchCheckbox\">NSButton</string>\n"
  "\t\t\t\t\t\t<string key=\"mCurrentlyAllocatedObjectCountTextField\">NSTextField</string>\n"
  "\t\t\t\t\t\t<string key=\"mDebugMenu\">NSMenu</string>\n"
  "\t\t\t\t\t\t<string key=\"mDisplayFilterPopUpButton\">NSPopUpButton</string>\n"
  "\t\t\t\t\t\t<string key=\"mPerformSnapShotButton\">NSButton</string>\n"
  "\t\t\t\t\t\t<string key=\"mStatsTableView\">NSTableView</string>\n"
  "\t\t\t\t\t\t<string key=\"mTotalAllocatedObjectCountTextField\">NSTextField</string>\n"
  "\t\t\t\t\t</dictionary>\n"
  "\t\t\t\t\t<dictionary class=\"NSMutableDictionary\" key=\"toOneOutletInfosByName\">\n"
  "\t\t\t\t\t\t<reference key=\"mAllocationStatsWindow\" ref=\"202261494\"/>\n"
  "\t\t\t\t\t\t<reference key=\"mAllocationStatsWindowVisibleAtLaunchCheckbox\" ref=\"96313521\"/>\n"
  "\t\t\t\t\t\t<reference key=\"mCurrentlyAllocatedObjectCountTextField\" ref=\"802936540\"/>\n"
  "\t\t\t\t\t\t<reference key=\"mDebugMenu\" ref=\"270990980\"/>\n"
  "\t\t\t\t\t\t<reference key=\"mDisplayFilterPopUpButton\" ref=\"677236983\"/>\n"
  "\t\t\t\t\t\t<reference key=\"mPerformSnapShotButton\" ref=\"383270263\"/>\n"
  "\t\t\t\t\t\t<reference key=\"mStatsTableView\" ref=\"705173782\"/>\n"
  "\t\t\t\t\t\t<reference key=\"mTotalAllocatedObjectCountTextField\" ref=\"1061158610\"/>\n"
  "\t\t\t\t\t</dictionary>\n"
  "\t\t\t\t\t<object class=\"IBClassDescriptionSource\" key=\"sourceIdentifier\">\n"
  "\t\t\t\t\t\t<string key=\"majorKey\">IBProjectSource</string>\n"
  "\t\t\t\t\t\t<string key=\"minorKey\">./Classes/PMAllocationDebug.h</string>\n"
  "\t\t\t\t\t</object>\n"
  "\t\t\t\t</object>\n"
  "\t\t\t</array>\n"
  "\t\t</object>\n"
  "\t\t<int key=\"IBDocument.localizationMode\">0</int>\n"
  "\t\t<string key=\"IBDocument.TargetRuntimeIdentifier\">IBCocoaFramework</string>\n"
  "\t\t<bool key=\"IBDocument.previouslyAttemptedUpgradeToXcode5\">NO</bool>\n"
  "\t\t<object class=\"NSMutableDictionary\" key=\"IBDocument.PluginDeclaredDevelopmentDependencies\">\n"
  "\t\t\t<string key=\"NS.key.0\">com.apple.InterfaceBuilder.CocoaPlugin.InterfaceBuilder3</string>\n"
  "\t\t\t<integer value=\"4600\" key=\"NS.object.0\"/>\n"
  "\t\t</object>\n"
  "\t\t<bool key=\"IBDocument.PluginDeclaredDependenciesTrackSystemTargetVersion\">YES</bool>\n"
  "\t\t<int key=\"IBDocument.defaultPropertyAccessControl\">3</int>\n"
  "\t\t<dictionary class=\"NSMutableDictionary\" key=\"IBDocument.LastKnownImageSizes\">\n"
  "\t\t\t<string key=\"NSMenuCheckmark\">{11, 11}</string>\n"
  "\t\t\t<string key=\"NSMenuMixedState\">{10, 3}</string>\n"
  "\t\t\t<string key=\"NSSwitch\">{15, 15}</string>\n"
  "\t\t</dictionary>\n"
  "\t</data>\n"
  "</archive>\n" ;

static const cRegularFileWrapper gWrapperFile_9_objective_5F_c_5F_sources (
  "PMAllocationDebug.xib",
  "xib",
  true, // Text file
  58705, // Text length
  gWrapperFileContent_9_objective_5F_c_5F_sources
) ;

//--- File '/PMAttributeDescription.h'

static const char * gWrapperFileContent_10_objective_5F_c_5F_sources = "//\n"
  "//  PMAttributeDescription.h\n"
  "//  essai\n"
  "//\n"
  "//  Created by Pierre Molinaro on 30/06/13.\n"
  "//  Copyright (c) 2013 ECN / IRCCyN. All rights reserved.\n"
  "//\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#import <Foundation/Foundation.h>\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@interface PMAttributeDescription : NSObject\n"
  "\n"
  "+ (PMAttributeDescription *) descriptionWithAttributeName: (NSString *) inAttributeName ;\n"
  "\n"
  "+ (PMAttributeDescription *) descriptionWithAttributeName: (NSString *) inAttributeName\n"
  "                             withConversionFunction: (NSString * (*) (NSValue * inValue)) inConversionFunction ;\n"
  "\n"
  "@property (copy, readonly, atomic) NSString * attributeName ;\n"
  "@property (readonly, atomic) NSString * (* conversionFunction) (NSValue * inValue) ;\n"
  "\n"
  "- (NSComparisonResult) compareByAttributeName: (PMAttributeDescription *) inOtherDescription ;\n"
  "\n"
  "- (NSComparisonResult) reverseCompareByAttributeName: (PMAttributeDescription *) inOtherDescription ;\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@end\n" ;

static const cRegularFileWrapper gWrapperFile_10_objective_5F_c_5F_sources (
  "PMAttributeDescription.h",
  "h",
  true, // Text file
  1116, // Text length
  gWrapperFileContent_10_objective_5F_c_5F_sources
) ;

//--- File '/PMAttributeDescription.m'

static const char * gWrapperFileContent_11_objective_5F_c_5F_sources = "//\n"
  "//  PMAttributeDescription.m\n"
  "//  essai\n"
  "//\n"
  "//  Created by Pierre Molinaro on 30/06/13.\n"
  "//  Copyright (c) 2013 ECN / IRCCyN. All rights reserved.\n"
  "//\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#import \"easy-bindings-utilities.h\"\n"
  "#import \"PMAttributeDescription.h\"\n"
  "#import \"PMAllocationDebug.h\"\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@implementation PMAttributeDescription\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@synthesize attributeName ;\n"
  "@synthesize conversionFunction ;\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (instancetype) initWithDescriptionWithAttributeName: (NSString *) inAttributeName\n"
  "                 withConversionFunction: (NSString * (*) (NSValue * inValue)) inConversionFunction {\n"
  "  self = [self init] ;\n"
  "  if (self) {\n"
  "    attributeName = inAttributeName ;\n"
  "    conversionFunction = inConversionFunction ;\n"
  "    macroNoteObjectAllocation ;\n"
  "  }\n"
  "  return self ;\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    Dealloc                                                                 *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) dealloc {\n"
  "  macroNoteObjectDeallocation ;\n"
  "  macroSuperDealloc ;\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//   descriptionWithAttributeName:withConversionFunction:                     *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "+ (PMAttributeDescription *) descriptionWithAttributeName: (NSString *) inAttributeName\n"
  "                             withConversionFunction: (NSString * (*) (NSValue * inValue)) inConversionFunction {\n"
  "  PMAttributeDescription * result = [[PMAttributeDescription alloc]\n"
  "    initWithDescriptionWithAttributeName:inAttributeName\n"
  "    withConversionFunction:inConversionFunction\n"
  "  ] ;\n"
  "  macroAutorelease (result) ;\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//   descriptionWithAttributeName:                                            *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "+ (PMAttributeDescription *) descriptionWithAttributeName: (NSString *) inAttributeName {\n"
  "  PMAttributeDescription * result = [[PMAttributeDescription alloc]\n"
  "    initWithDescriptionWithAttributeName:inAttributeName\n"
  "    withConversionFunction:NULL\n"
  "  ] ;\n"
  "  macroAutorelease (result) ;\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (NSComparisonResult) compareByAttributeName: (PMAttributeDescription *) inOtherDescription {\n"
  "  return [self.attributeName compare:inOtherDescription.attributeName] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (NSComparisonResult) reverseCompareByAttributeName: (PMAttributeDescription *) inOtherDescription {\n"
  "  return [inOtherDescription.attributeName compare:self.attributeName] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@end\n" ;

static const cRegularFileWrapper gWrapperFile_11_objective_5F_c_5F_sources (
  "PMAttributeDescription.m",
  "m",
  true, // Text file
  3165, // Text length
  gWrapperFileContent_11_objective_5F_c_5F_sources
) ;

//--- File '/PMDataScanner.h'

static const char * gWrapperFileContent_12_objective_5F_c_5F_sources = "//\n"
  "//  PMDataScanner.h\n"
  "//  canari\n"
  "//\n"
  "//  Created by Pierre Molinaro on 09/11/07.\n"
  "//  Copyright 2007 __MyCompanyName__. All rights reserved.\n"
  "//\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#import <Cocoa/Cocoa.h>\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@interface PMDataScanner : NSObject {\n"
  "  @private NSData * mData ;\n"
  "  @private NSUInteger mReadIndex ;\n"
  "  @private BOOL mReadOk ;\n"
  "  @private NSMutableData * mExpectedBytes ;\n"
  "  @private NSWindow * mProgressWindow ;\n"
  "  @private NSProgressIndicator * mProgressIndicator ;\n"
  "}\n"
  "\n"
  "+ (PMDataScanner *) scannerWithData: (NSData *) inData\n"
  "                    displayProgressWindowTitle: (NSString *) inTitle ;\n"
  "\n"
  "- (void) orderOutProgressWindow ;\n"
  "\n"
  "- (void) ignoreBytes: (NSUInteger) inLengthToIgnore ;\n"
  "\n"
  "- (BOOL) testAcceptByte: (UInt8) inByte ;\n"
  "\n"
  "- (BOOL) testAcceptFromByte: (UInt8) inLowerBound\n"
  "         toByte: (UInt8) inUpperBound\n"
  "         value: (UInt8 *) outValuePtr ;\n"
  "\n"
  "- (void) acceptRequiredByte: (UInt8) inByte sourceFile: (const char *) inSourceFile ;\n"
  "\n"
  "- (UInt64) parseAutosizedUnsignedInteger ;\n"
  "\n"
  "- (NSString *) parseAutosizedString ;\n"
  "\n"
  "// - (long long) parseIntegerOfSize: (NSUInteger) inByteSize ; // DEPRECATED\n"
  "\n"
  "- (NSData *) parseAutosizedData ;\n"
  "\n"
  "- (void) ignoreAutosizedData ;\n"
  "\n"
  "- (UInt8) parseByte ;\n"
  "\n"
  "- (BOOL) ok ;\n"
  "\n"
  "@end\n"
  "\n"
  "//---------------------------------------------------------------------------*\n" ;

static const cRegularFileWrapper gWrapperFile_12_objective_5F_c_5F_sources (
  "PMDataScanner.h",
  "h",
  true, // Text file
  1423, // Text length
  gWrapperFileContent_12_objective_5F_c_5F_sources
) ;

//--- File '/PMDataScanner.m'

static const char * gWrapperFileContent_13_objective_5F_c_5F_sources = "//\n"
  "//  PMDataScanner.m\n"
  "//  canari\n"
  "//\n"
  "//  Created by Pierre Molinaro on 09/11/07.\n"
  "//  Copyright 2007 __MyCompanyName__. All rights reserved.\n"
  "//\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#import \"PMDataScanner.h\"\n"
  "#import \"easy-bindings-utilities.h\"\n"
  "#import \"PMAllocationDebug.h\"\n"
  "\n"
  "//#define EASY_BINDINGS_DEBUG\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@implementation PMDataScanner\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) openProgressWindowWithTitle: (NSString *) inTitle {\n"
  "  const NSRect visibleFrame = [[NSScreen mainScreen] visibleFrame] ;\n"
  "  const double windowWidth = 400.0 ;\n"
  "  const double windowHeight = 65.0 ;\n"
  "  const NSRect windowRect = {\n"
  "    {NSMidX (visibleFrame) - windowWidth / 2.0, NSMidY (visibleFrame) - windowHeight / 2.0},\n"
  "    {windowWidth, windowHeight}\n"
  "  } ;\n"
  "  mProgressWindow = [[NSWindow alloc]\n"
  "    initWithContentRect:windowRect\n"
  "    styleMask:NSTitledWindowMask\n"
  "    backing:NSBackingStoreBuffered\n"
  "    defer:NO\n"
  "  ] ;\n"
  "  [mProgressWindow setExcludedFromWindowsMenu:YES] ;\n"
  "  [mProgressWindow setTitle:@\"Progress\"] ;\n"
  "  const NSRect contientViewRect = [[mProgressWindow contentView] frame] ;\n"
  "//--- Add comment text\n"
  "  const NSRect ts_r = {{25.0, 30.0}, {NSMaxX (contientViewRect) - 40.0, 20.0}} ;\n"
  "  NSTextField * ts = [[NSTextField alloc] initWithFrame:ts_r] ;\n"
  "  [ts setFont:[NSFont boldSystemFontOfSize:[NSFont smallSystemFontSize]]] ;\n"
  "  [ts setStringValue:[NSString stringWithFormat:@\"Opening %@\xE2""\x80""\xA6""\", inTitle]] ;\n"
  "  [ts setBezeled:NO] ;\n"
  "  [ts setBordered:NO] ;\n"
  "  [ts setEditable:NO] ;\n"
  "  [ts setDrawsBackground:NO] ;\n"
  "  [[mProgressWindow contentView] addSubview:ts] ;\n"
  "  macroReleaseSetToNil (ts) ;\n"
  "//--- Add progress indicator\n"
  "  const NSRect ps_r = {{20.0, 10.0}, {NSMaxX (contientViewRect) - 40.0, 20.0}} ;\n"
  "  mProgressIndicator = [[NSProgressIndicator alloc] initWithFrame:ps_r] ;\n"
  "  [mProgressIndicator setIndeterminate:YES] ;\n"
  "  [[mProgressWindow contentView] addSubview:mProgressIndicator] ;\n"
  "//---\n"
  "  [mProgressIndicator setMinValue:0.0] ;\n"
  "  [mProgressIndicator setMaxValue: (double) [mData length]] ;\n"
  "  [mProgressIndicator setDoubleValue: (double) mReadIndex] ;\n"
  "  [mProgressIndicator setIndeterminate:NO] ;\n"
  "  [mProgressIndicator display] ;\n"
  "  [mProgressWindow makeKeyAndOrderFront:nil] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) orderOutProgressWindow {\n"
  "  [mProgressWindow close] ;\n"
  "  mProgressWindow = nil ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) configureWithData: (NSData *) inData {\n"
  "    mReadIndex = 0 ;\n"
  "    mData = inData ;\n"
  "    mReadOk = YES ;\n"
  "    mExpectedBytes = [NSMutableData new] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "+ (PMDataScanner *) scannerWithData: (NSData *) inData\n"
  "                    displayProgressWindowTitle: (NSString *) inTitle {\n"
  "  PMDataScanner * scanner  = [PMDataScanner new] ;\n"
  "  [scanner configureWithData:inData] ;\n"
  "  if (nil != inTitle) {\n"
  "    [scanner openProgressWindowWithTitle:inTitle] ;\n"
  "  }\n"
  "  macroAutorelease (scanner) ;\n"
  "  return scanner ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//                                                                           *\n"
  "//                           dealloc                                         *\n"
  "//                                                                           *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  - (void) dealloc {\n"
  "    macroNoteObjectDeallocation ;\n"
  "    macroSuperDealloc ;\n"
  "  }\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//                                                                           *\n"
  "//                           dealloc                                         *\n"
  "//                                                                           *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (instancetype) init {\n"
  "  self = [super init] ;\n"
  "  if (self) {\n"
  "    macroNoteObjectAllocation ;\n"
  "  }\n"
  "  return self ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) updateProgressIndicator {\n"
  "  [mProgressIndicator setDoubleValue: (double) mReadIndex] ;\n"
  "  [mProgressIndicator display] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) ignoreBytes: (NSUInteger) inLengthToIgnore {\n"
  "  if (mReadOk) {\n"
  "    mReadIndex += inLengthToIgnore ;\n"
  "    [self updateProgressIndicator] ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (BOOL) testAcceptByte: (UInt8) inByte {\n"
  "  BOOL result = mReadOk ;\n"
  "  if (result) {\n"
  "    if (mReadIndex >= [mData length]) {\n"
  "       NSLog (@\"Read beyond end of data\") ;\n"
  "       mReadOk = NO ;\n"
  "     }else{\n"
  "      const UInt8 * bytes = [mData bytes] ;\n"
  "      result = bytes [mReadIndex] == inByte ;\n"
  "      if (result) {\n"
  "        mReadIndex ++ ;\n"
  "        [mExpectedBytes setLength:0] ;\n"
  "      }else{\n"
  "        [mExpectedBytes appendBytes:& inByte length:1] ;\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "  [self updateProgressIndicator] ;\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (BOOL) testAcceptFromByte: (UInt8) inLowerBound\n"
  "         toByte: (UInt8) inUpperBound\n"
  "         value: (UInt8 *) outValuePtr {\n"
  "  BOOL result = mReadOk ;\n"
  "  if (result) {\n"
  "    if (mReadIndex >= [mData length]) {\n"
  "       NSLog (@\"Read beyond end of data\") ;\n"
  "       mReadOk = NO ;\n"
  "     }else{\n"
  "      const UInt8 * bytes = [mData bytes] ;\n"
  "      result = (bytes [mReadIndex] >= inLowerBound) && (bytes [mReadIndex] <= inUpperBound) ;\n"
  "      if (result) {\n"
  "        if (outValuePtr != NULL) {\n"
  "          * outValuePtr = bytes [mReadIndex] ;\n"
  "        }\n"
  "        mReadIndex ++ ;\n"
  "        [mExpectedBytes setLength:0] ;\n"
  "      }else{\n"
  "        for (NSUInteger i=inLowerBound ; i<=inUpperBound ; i++) {\n"
  "          [mExpectedBytes appendBytes:& i length:1] ;\n"
  "        }\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "  [self updateProgressIndicator] ;\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) acceptRequiredByte: (UInt8) inByte\n"
  "         sourceFile: (const char *) inSourceFile {\n"
  "  if (mReadOk) {\n"
  "    if (mReadIndex >= [mData length]) {\n"
  "       NSLog (@\"Read beyond end of data\") ;\n"
  "       mReadOk = NO ;\n"
  "     }else{\n"
  "      const UInt8 * bytes = [mData bytes] ;\n"
  "      if (bytes [mReadIndex] == inByte) {\n"
  "        mReadIndex ++ ;\n"
  "        [mExpectedBytes setLength:0] ;\n"
  "      }else{\n"
  "        NSMutableString * message = [NSMutableString new] ;\n"
  "        const UInt8 * expectedBytes = [mExpectedBytes bytes] ;\n"
  "        for (NSUInteger i=0 ; i<[mExpectedBytes length] ; i++) {\n"
  "          [message appendFormat:@\"0x%02hhx, \", expectedBytes  [i]] ;\n"
  "        }\n"
  "        NSLog (@\"%s: invalid current byte (0x%02x): expected bytes:%@0x%02x\", inSourceFile, bytes [mReadIndex], message, inByte) ;\n"
  "        macroReleaseSetToNil (message) ;\n"
  "        mReadOk = NO ;\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "  [self updateProgressIndicator] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (UInt8) parseByte {\n"
  "  UInt8 result = 0 ;\n"
  "  if (mReadOk) {\n"
  "    if (mReadIndex >= [mData length]) {\n"
  "       NSLog (@\"Read beyond end of data\") ;\n"
  "       mReadOk = NO ;\n"
  "     }else{\n"
  "      const UInt8 * bytes = [mData bytes] ;\n"
  "      result = bytes [mReadIndex] ;\n"
  "      mReadIndex ++ ;\n"
  "    }\n"
  "  }\n"
  "  [self updateProgressIndicator] ;\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (UInt64) parseAutosizedUnsignedInteger {\n"
  "  UInt64 result = 0 ;\n"
  "  const UInt8 * bytes = [mData bytes] ;\n"
  "  NSUInteger shift = 0 ;\n"
  "  BOOL loop = YES ;\n"
  "  while (loop && mReadOk) {\n"
  "    if (mReadIndex >= [mData length]) {\n"
  "       NSLog (@\"Read beyond end of data\") ;\n"
  "       mReadOk = NO ;\n"
  "    }else{\n"
  "      const UInt64 w = bytes [mReadIndex] & 0x7F ;\n"
  "      result |= (UInt64) (w << shift) ;\n"
  "      shift += 7 ;\n"
  "      loop = (bytes [mReadIndex] & 0x80) !=0 ;\n"
  "      mReadIndex ++ ;\n"
  "    }\n"
  "  }\n"
  "  [self updateProgressIndicator] ;\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (NSString *) parseAutosizedString {\n"
  "  NSString * result = nil ;\n"
  "  const UInt8 * bytes = [mData bytes] ;\n"
  "  NSUInteger beyondStringIndex = mReadIndex ;\n"
  "  BOOL loop = YES ;\n"
  "  while (loop && mReadOk) {\n"
  "    if (beyondStringIndex >= [mData length]) {\n"
  "       NSLog (@\"Read beyond end of data\") ;\n"
  "       mReadOk = NO ;\n"
  "    }else{\n"
  "      loop = bytes [beyondStringIndex] != 0 ;\n"
  "      beyondStringIndex ++ ;\n"
  "    }\n"
  "  }\n"
  "  if (mReadOk) {\n"
  "    result = [NSString stringWithUTF8String:(const char *) & bytes [mReadIndex]] ;\n"
  "    mReadIndex = beyondStringIndex ;\n"
  "  }\n"
  "  [self updateProgressIndicator] ;\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (NSData *) parseAutosizedData {\n"
  "  NSData * result = nil ;\n"
  "  if (mReadOk) {\n"
  "    const NSUInteger dataLength = [self parseAutosizedUnsignedInteger] ;\n"
  "    if ((mReadIndex + dataLength) >= [mData length]) {\n"
  "      NSLog (@\"Read beyond end of data\") ;\n"
  "      mReadOk = NO ;\n"
  "    }else{\n"
  "      result = [mData subdataWithRange:NSMakeRange (mReadIndex, dataLength)] ;\n"
  "      mReadIndex += dataLength ;\n"
  "    }\n"
  "  }\n"
  "  [self updateProgressIndicator] ;\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) ignoreAutosizedData {\n"
  "  if (mReadOk) {\n"
  "    const NSUInteger dataLength = [self parseAutosizedUnsignedInteger] ;\n"
  "    [self ignoreBytes:dataLength] ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (BOOL) ok {\n"
  "  return mReadOk ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@end\n" ;

static const cRegularFileWrapper gWrapperFile_13_objective_5F_c_5F_sources (
  "PMDataScanner.m",
  "m",
  true, // Text file
  9834, // Text length
  gWrapperFileContent_13_objective_5F_c_5F_sources
) ;

//--- File '/PMDataScanner.swift'

static const char * gWrapperFileContent_14_objective_5F_c_5F_sources = "//\n"
  "//  PMDataScanner.m\n"
  "//  canari\n"
  "//\n"
  "//  Created by Pierre Molinaro on 09/11/07.\n"
  "//  Copyright 2007 __MyCompanyName__. All rights reserved.\n"
  "//\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "import Cocoa\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@objc(PMDataScanner) class PMDataScanner : NSObject {\n"
  "  var mData : NSData\n"
  "  var mReadIndex : Int = 0\n"
  "  var mReadOk : Bool = true\n"
  "  var mExpectedBytes : Array<UInt8> = []\n"
  "  var mProgressWindow : NSWindow\?\n"
  "  var mProgressIndicator : NSProgressIndicator\?\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //  init                                                                     *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  init (data: NSData,\n"
  "        displayProgressWindowTitle: String\?) {\n"
  "    mData = data\n"
  "    super.init ()\n"
  "    noteObjectAllocation (self)\n"
  "    if (nil != displayProgressWindowTitle) {\n"
  "      openProgressWindowWithTitle (displayProgressWindowTitle!)\n"
  "    }\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //  deinit                                                                   *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  deinit {\n"
  "    mProgressWindow\?.orderOut (self)\n"
  "    noteObjectDeallocation (self)\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //  openProgressWindowWithTitle                                              *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  func openProgressWindowWithTitle (inTitle : String) {\n"
  "    let visibleFrame = NSScreen.mainScreen ().visibleFrame ()\n"
  "    let windowWidth = 400.0\n"
  "    let windowHeight = 65.0\n"
  "    let windowRect = NSRect (\n"
  "      x:NSMidX (visibleFrame) - windowWidth / 2.0,\n"
  "      y:NSMidY (visibleFrame) - windowHeight / 2.0,\n"
  "      width:windowWidth,\n"
  "      height:windowHeight\n"
  "    )\n"
  "    mProgressWindow = NSWindow (\n"
  "      contentRect:windowRect,\n"
  "      styleMask:NSTitledWindowMask,\n"
  "      backing:NSBackingStoreBuffered,\n"
  "      defer:false\n"
  "    )\n"
  "    mProgressWindow!.setExcludedFromWindowsMenu (true)\n"
  "    mProgressWindow!.setTitle (\"Progress\")\n"
  "    let contientViewRect : NSRect = mProgressWindow!.contentView().frame ()\n"
  "  //--- Add comment text\n"
  "    let ts_r = NSRect (\n"
  "      x:25.0,\n"
  "      y:30.0,\n"
  "      width:NSMaxX (contientViewRect) - 40.0,\n"
  "      height:20.0\n"
  "    )\n"
  "    var ts = NSTextField (frame:ts_r)\n"
  "    ts.setFont (NSFont.boldSystemFontOfSize (NSFont.smallSystemFontSize ()))\n"
  "    ts.setStringValue (NSString (format:\"Opening %@\xE2""\x80""\xA6""\", inTitle))\n"
  "    ts.setBezeled (false)\n"
  "    ts.setBordered (false)\n"
  "    ts.setEditable (false)\n"
  "    ts.setDrawsBackground (false)\n"
  "    mProgressWindow!.contentView ().addSubview (ts)\n"
  "  //--- Add progress indicator\n"
  "    let ps_r = NSRect (\n"
  "      x:20.0,\n"
  "      y:10.0,\n"
  "      width:NSMaxX (contientViewRect) - 40.0,\n"
  "      height: 20.0\n"
  "    )\n"
  "    mProgressIndicator = NSProgressIndicator (frame:ps_r)\n"
  "    mProgressIndicator!.setIndeterminate (true)\n"
  "    mProgressWindow!.contentView ().addSubview (mProgressIndicator)\n"
  "  //---\n"
  "    mProgressIndicator!.setMinValue (0.0)\n"
  "    mProgressIndicator!.setMaxValue (Double (mData.length ()))\n"
  "    mProgressIndicator!.setDoubleValue (Double (mReadIndex))\n"
  "    mProgressIndicator!.setIndeterminate (false)\n"
  "    mProgressIndicator!.display ()\n"
  "  //---\n"
  "    mProgressWindow!.makeKeyAndOrderFront (nil)\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //  updateProgressIndicator                                                  *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  func updateProgressIndicator () {\n"
  "    mProgressIndicator\?.setDoubleValue (Double (mReadIndex))\n"
  "    mProgressIndicator\?.display ()\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //  ignoreBytes                                                              *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  func ignoreBytes (inLengthToIgnore : Int) {\n"
  "    if mReadOk {\n"
  "      mReadIndex += inLengthToIgnore ;\n"
  "      updateProgressIndicator ()\n"
  "    }\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //  testAcceptByte                                                           *\n"
  "  //---------------------------------------------------------------------------*\n"
  "  // http://stackoverflow.com/questions/24067085/pointers-pointer-arithmetic-and-raw-data-in-swift\n"
  "\n"
  "  func testAcceptByte (inByte : UInt8) -> Bool {\n"
  "    var result = mReadOk\n"
  "    if result {\n"
  "      if mReadIndex >= mData.length () {\n"
  "         NSLog (\"Read beyond end of data\")\n"
  "         mReadOk = false\n"
  "       }else{\n"
  "        let byteAsData = mData.subdataWithRange (NSMakeRange(mReadIndex, sizeof(UInt8))).bytes\n"
  "        var byte = UnsafePointer<UInt8> (byteAsData()).memory\n"
  "     //   let ptr = offsetPointer (mData.bytes, CInt(mReadIndex))\n"
  "     //   var array : COpaquePointer = mData.bytes ()\n"
  "     //   var byteArray : CConstPointer<UInt8> = CConstPointer<UInt8> (mData.bytes ())\n"
  "        result = byte == inByte\n"
  "        if result {\n"
  "          mReadIndex += 1\n"
  "          mExpectedBytes = []\n"
  "        }else{\n"
  "          mExpectedBytes += inByte\n"
  "        }\n"
  "      }\n"
  "    }\n"
  "    updateProgressIndicator ()\n"
  "    return result ;\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //  testAcceptFromByte                                                       *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  func testAcceptFromByte (lowerBound: UInt8,\n"
  "                           upperBound: UInt8,\n"
  "                           inout value:UInt8) -> Bool {\n"
  "    var result = mReadOk\n"
  "    if result {\n"
  "      if mReadIndex >= mData.length () {\n"
  "         NSLog (\"Read beyond end of data\")\n"
  "         mReadOk = false\n"
  "       }else{\n"
  "        let byteAsData = mData.subdataWithRange (NSMakeRange(mReadIndex, sizeof(UInt8))).bytes\n"
  "        var byte = UnsafePointer<UInt8> (byteAsData()).memory\n"
  "        result = (byte >= lowerBound) && (byte <= upperBound) ;\n"
  "        if (result) {\n"
  "          value = byte\n"
  "          mReadIndex += 1\n"
  "          mExpectedBytes = []\n"
  "        }else{\n"
  "          for i in lowerBound .. upperBound + 1 {\n"
  "            mExpectedBytes += i\n"
  "          }\n"
  "        }\n"
  "      }\n"
  "    }\n"
  "    updateProgressIndicator ()\n"
  "    return result ;\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //  acceptRequiredByte                                                       *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  func acceptRequiredByte (inByte : UInt8,\n"
  "                           sourceFile: String) {\n"
  "    if mReadOk {\n"
  "      if mReadIndex >= mData.length () {\n"
  "         NSLog (\"Read beyond end of data\")\n"
  "         mReadOk = false\n"
  "      }else{\n"
  "        let byteAsData = mData.subdataWithRange (NSMakeRange(mReadIndex, sizeof(UInt8))).bytes\n"
  "        var byte = UnsafePointer<UInt8> (byteAsData()).memory\n"
  "        if (byte == inByte) {\n"
  "          mReadIndex += 1\n"
  "          mExpectedBytes = []\n"
  "        }else{\n"
  "          var message = \"\"\n"
  "          for b in mExpectedBytes {\n"
  "            message += NSString (format:\"0x%02hhx, \", b)\n"
  "          }\n"
  "          NSLog (\"%s: invalid current byte (0x%02x): expected bytes:%@0x%02x\", sourceFile, byte, message, inByte) ;\n"
  "          mReadOk = false\n"
  "        }\n"
  "      }\n"
  "    }\n"
  "    updateProgressIndicator ()\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //  parseByte                                                                *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  func parseByte () -> UInt8 {\n"
  "    var result : UInt8 = 0\n"
  "    if mReadOk {\n"
  "      if mReadIndex >= mData.length() {\n"
  "         NSLog (\"Read beyond end of data\")\n"
  "         mReadOk = false\n"
  "       }else{\n"
  "        let byteAsData = mData.subdataWithRange (NSMakeRange(mReadIndex, sizeof(UInt8))).bytes\n"
  "        result = UnsafePointer<UInt8> (byteAsData()).memory\n"
  "        mReadIndex += 1\n"
  "      }\n"
  "    }\n"
  "    updateProgressIndicator ()\n"
  "    return result\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //  parseAutosizedUnsignedInteger                                            *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  func parseAutosizedUnsignedInteger () -> UInt {\n"
  "    var result : UInt = 0\n"
  "    var shift : UInt = 0\n"
  "    var loop = true\n"
  "    while loop && mReadOk {\n"
  "      if mReadIndex >= mData.length () {\n"
  "         NSLog (\"Read beyond end of data\")\n"
  "         mReadOk = false\n"
  "      }else{\n"
  "        let byteAsData = mData.subdataWithRange (NSMakeRange(mReadIndex, sizeof(UInt8))).bytes\n"
  "        var byte = UnsafePointer<UInt8> (byteAsData()).memory\n"
  "        let w : UInt = UInt (byte) & 0x7F\n"
  "        result |= (w << shift)\n"
  "        shift += 7\n"
  "        loop = (byte & 0x80) != 0\n"
  "        mReadIndex += 1\n"
  "      }\n"
  "    }\n"
  "    updateProgressIndicator ()\n"
  "    return result ;\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //  parseAutosizedData                                                       *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  func parseAutosizedData () -> NSData {\n"
  "  var result = NSData ()\n"
  "  if mReadOk {\n"
  "    let dataLength : Int = Int (parseAutosizedUnsignedInteger ())\n"
  "    if (mReadIndex + dataLength) >= mData.length () {\n"
  "      NSLog (\"Read beyond end of data\")\n"
  "      mReadOk = false\n"
  "    }else{\n"
  "      result = mData.subdataWithRange (NSMakeRange (mReadIndex, dataLength))\n"
  "      mReadIndex += dataLength\n"
  "    }\n"
  "  }\n"
  "  updateProgressIndicator ()\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //  ok                                                                       *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  func ok () -> Bool {\n"
  "    return mReadOk\n"
  "  }\n"
  "\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n" ;

static const cRegularFileWrapper gWrapperFile_14_objective_5F_c_5F_sources (
  "PMDataScanner.swift",
  "swift",
  true, // Text file
  10187, // Text length
  gWrapperFileContent_14_objective_5F_c_5F_sources
) ;

//--- File '/PMDocument.swift'

static const char * gWrapperFileContent_15_objective_5F_c_5F_sources = "//-----------------------------------------------------------------------------*\n"
  "//                                                                             *\n"
  "//                          File 'PMDocument.swift'                            *\n"
  "//                         Generated by version 0.0.1                          *\n"
  "//                        june 29th, 2014, at 23h3'59\"                         *\n"
  "//                                                                             *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "//--- START OF USER ZONE 1\n"
  "\n"
  "\n"
  "//--- END OF USER ZONE 1\n"
  "\n"
  "\n"
  "import Cocoa\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "@objc(PMDocument) class PMDocument : PMManagedDocument {\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //    Outlets                                                                *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  @IBOutlet var namesTableView : NSTableView\n"
  "  @IBOutlet var canRemoveTextField : NSTextField\n"
  "  @IBOutlet var addPathButton : NSButton\n"
  "  @IBOutlet var removePathButton : NSButton\n"
  "  @IBOutlet var countItemTextField : NSTextField\n"
  "  @IBOutlet var countItemMessageTextField : NSTextField\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //    Controllers                                                            *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  var nameController : PMEntityArrayController \n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //    Documents attributes                                                   *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //    init                                                                   *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  init () {\n"
  "    let em = PMObjectManager ()\n"
  "    nameController = PMEntityArrayController (entityManager:em, inClassName:\"NameEntity\")\n"
  "    super.init (inEntityManager:em)\n"
  "  }\n"
  "  \n"
  "  //---------------------------------------------------------------------------*\n"
  "  //    windowNibName                                                          *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  var windowNibName: String {\n"
  "    return \"PMDocument\"\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //    rootEntityClassName                                                    *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  override func rootEntityClassName () -> String {\n"
  "    return \"MyRootEntity\"\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //    rootObject                                                             *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  var rootObject : MyRootEntity {\n"
  "    get {\n"
  "      return mRootObject as MyRootEntity\n"
  "    }\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //    windowControllerDidLoadNib                                             *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  override func windowControllerDidLoadNib (aController: NSWindowController) {\n"
  "    super.windowControllerDidLoadNib (aController)\n"
  "  //--------------------------- Controller bindings\n"
  "//--- 'nameController' controller bindings\n"
  "    nameController.bind (\"contentArray\",\n"
  "      toObject:self.rootObject,\n"
  "      withKeyPath:\"mNames\",\n"
  "      options:[\n"
  "        \"NSDeletesObjectsOnRemoveBindingsOption\" : true\n"
  "      ]\n"
  "    )\n"
  "  //--------------------------- Outlet bindings\n"
  "  //--- Outlet namesTableView\n"
  "    if nil == namesTableView {\n"
  "      presentErrorWindow (__FILE__, __LINE__, \"the 'namesTableView' outlet is nil\") ;\n"
  "    }\n"
  "    if nil == namesTableView.tableColumnWithIdentifier (\"name\") {\n"
  "      presentErrorWindow (__FILE__, __LINE__, \"the 'namesTableView' NSTableView outlet has no formatter has no column with the name identifier\") ;\n"
  "    }else{\n"
  "      let cell : NSActionCell = namesTableView.tableColumnWithIdentifier (\"name\").dataCell () as NSActionCell\n"
  "      if !cell.isKindOfClass (NSTextFieldCell) {\n"
  "        presentErrorWindow (__FILE__, __LINE__, \"the dataCell is 'name' column of the 'namesTableView' should be an 'NSTextFieldCell instance\") ;\n"
  "      }\n"
  "    }\n"
  "    namesTableView.tableColumnWithIdentifier (\"name\").bind (\"value\",\n"
  "      toObject:nameController,\n"
  "      withKeyPath:\"arrangedObjects.name\",\n"
  "      options:nil\n"
  "  )\n"
  "    if nil == namesTableView.tableColumnWithIdentifier (\"int\") {\n"
  "      presentErrorWindow (__FILE__, __LINE__, \"the 'namesTableView' NSTableView outlet has no formatter has no column with the int identifier\") ;\n"
  "    }else{\n"
  "      let cell : NSActionCell = namesTableView.tableColumnWithIdentifier (\"int\").dataCell () as NSActionCell\n"
  "      if !cell.isKindOfClass (NSTextFieldCell) {\n"
  "        presentErrorWindow (__FILE__, __LINE__, \"the dataCell is 'int' column of the 'namesTableView' should be an 'NSTextFieldCell instance\") ;\n"
  "      }\n"
  "    }\n"
  "    namesTableView.tableColumnWithIdentifier (\"int\").bind (\"value\",\n"
  "      toObject:nameController,\n"
  "      withKeyPath:\"arrangedObjects.aValue\",\n"
  "      options:nil\n"
  "  )\n"
  "  //--- Outlet canRemoveTextField\n"
  "    if nil == canRemoveTextField {\n"
  "      presentErrorWindow (__FILE__, __LINE__, \"the 'canRemoveTextField' outlet is nil\") ;\n"
  "    }\n"
  "    canRemoveTextField.bind (\"value\",\n"
  "      toObject:self,\n"
  "      withKeyPath:\"canRemoveString\",\n"
  "      options:nil\n"
  "    )\n"
  "  //--- Outlet addPathButton\n"
  "    if nil == addPathButton {\n"
  "      presentErrorWindow (__FILE__, __LINE__, \"the 'addPathButton' outlet is nil\") ;\n"
  "    }\n"
  "    addPathButton.setTarget (nameController)\n"
  "    addPathButton.setAction (\"add:\")\n"
  "  //--- Outlet removePathButton\n"
  "    if nil == removePathButton {\n"
  "      presentErrorWindow (__FILE__, __LINE__, \"the 'removePathButton' outlet is nil\") ;\n"
  "    }\n"
  "    removePathButton.setTarget (nameController)\n"
  "    removePathButton.setAction (\"remove:\")\n"
  "    removePathButton.bind (\"enabled\",\n"
  "      toObject:nameController,\n"
  "      withKeyPath:\"canRemove\",\n"
  "      options:nil\n"
  "    )\n"
  "  //--- Outlet countItemTextField\n"
  "    if nil == countItemTextField {\n"
  "      presentErrorWindow (__FILE__, __LINE__, \"the 'countItemTextField' outlet is nil\") ;\n"
  "    }\n"
  "    if (nil != countItemTextField) && (nil == countItemTextField.formatter) {\n"
  "      presentErrorWindow (__FILE__, __LINE__, \"the 'countItemTextField' outlet has no formatter, it should have an NSNumberFormatter\") ;\n"
  "    }else if (nil != countItemTextField) && !(countItemTextField.formatter ().isKindOfClass (NSNumberFormatter)) {\n"
  "      presentErrorWindow (__FILE__, __LINE__, \"the 'countItemTextField outlet has a formatter that is not kind of NSNumberFormatter class\") ;\n"
  "    }\n"
  "    countItemTextField.bind (\"value\",\n"
  "      toObject:mRootObject,\n"
  "      withKeyPath:\"mNames.@count\",\n"
  "      options:nil\n"
  "    )\n"
  "  //--- Outlet countItemMessageTextField\n"
  "    if nil == countItemMessageTextField {\n"
  "      presentErrorWindow (__FILE__, __LINE__, \"the 'countItemMessageTextField' outlet is nil\") ;\n"
  "    }\n"
  "    countItemMessageTextField.bind (\"value\",\n"
  "      toObject:self,\n"
  "      withKeyPath:\"countItemMessage\",\n"
  "      options:nil\n"
  "    )\n"
  "  //--------------------------- Add Transient observers\n"
  "    nameController.addObserver (self,\n"
  "      forKeyPath:\"canRemove\",\n"
  "      options:NSKeyValueObservingOptions (),\n"
  "      context:nil\n"
  "    )\n"
  "    rootObject.addObserverOf_mNames (self)\n"
  "  //--------------------------- Add Signature observer\n"
  "}\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //   R E M O V E    W I N D O W    C O N T R O L L E R                       *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  override func removeWindowController (inWindowController : NSWindowController) {\n"
  "  //--------------------------- Add Signature observer\n"
  "  //--- Unbind Outlets\n"
  "    namesTableView.tableColumnWithIdentifier (\"name\").unbind (\"value\")\n"
  "    namesTableView.tableColumnWithIdentifier (\"int\").unbind (\"value\")\n"
  "    canRemoveTextField.unbind (\"value\")\n"
  "    addPathButton\?.setTarget (nil)\n"
  "    addPathButton\?.setAction (nil)\n"
  "    removePathButton.unbind (\"enabled\")\n"
  "    removePathButton\?.setTarget (nil)\n"
  "    removePathButton\?.setAction (nil)\n"
  "    countItemTextField.unbind (\"value\")\n"
  "    countItemMessageTextField.unbind (\"value\")\n"
  "  //--- Unbind Controllers\n"
  "    nameController.unbind (\"contentArray\")\n"
  "  //--- Remove Transient observers\n"
  "    nameController.removeObserver (self,\n"
  "      forKeyPath:\"canRemove\"\n"
  "    )\n"
  "    rootObject.removeObserverOf_mNames (self)\n"
  "  //--- Release controllers\n"
  "    // nameController = nil\n"
  "  //--- Remove circularities in outlets\n"
  "  //---\n"
  "    super.removeWindowController (inWindowController)\n"
  "  }\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //    Transient: canRemoveString                                             *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  var canRemoveString__cache : String\?\n"
  "  var canRemoveString : String {\n"
  "    if canRemoveString__cache == nil {\n"
  "      canRemoveString__cache = compute_PMDocument_canRemoveString (nameController.canRemove ()) ;\n"
  "    }\n"
  "    return canRemoveString__cache!\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //    Transient: countItemMessage                                            *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  var countItemMessage__cache : String\?\n"
  "  var countItemMessage : String {\n"
  "    if countItemMessage__cache == nil {\n"
  "      countItemMessage__cache = compute_PMDocument_countItemMessage (rootObject.mNames.count ()) ;\n"
  "    }\n"
  "    return countItemMessage__cache!\n"
  "  }\n"
  "\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "//--- START OF USER ZONE 2\n"
  "\n"
  "\n"
  "//--- END OF USER ZONE 2\n"
  "\n"
  "\n" ;

static const cRegularFileWrapper gWrapperFile_15_objective_5F_c_5F_sources (
  "PMDocument.swift",
  "swift",
  true, // Text file
  10160, // Text length
  gWrapperFileContent_15_objective_5F_c_5F_sources
) ;

//--- File '/PMEntityArrayController.h'

static const char * gWrapperFileContent_16_objective_5F_c_5F_sources = "//\n"
  "//  PMEntityArrayController.h\n"
  "//  essai\n"
  "//\n"
  "//  Created by Pierre Molinaro on 29/06/13.\n"
  "//  Copyright (c) 2013 ECN / IRCCyN. All rights reserved.\n"
  "//\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "#import <Cocoa/Cocoa.h>\n"
  "\n"
  "@class PMObjectManager ;\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "@interface PMEntityArrayController : NSArrayController {\n"
  "  @private NSString * mFilteringKey ;\n"
  "  @private NSSet * mObservedObjects ;\n"
  "}\n"
  "\n"
  "@property (atomic) BOOL deleteEntityOnRemove ;\n"
  "@property (retain, atomic) PMObjectManager * entityManager ;\n"
  "\n"
  "- (void) add: (id) inSender ;\n"
  "\n"
  "- (void) remove: (id) inSender ;\n"
  "\n"
  "- (void) automaticallyFilterWithKey: (NSString *) inKey ;\n"
  "\n"
  "@end\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n" ;

static const cRegularFileWrapper gWrapperFile_16_objective_5F_c_5F_sources (
  "PMEntityArrayController.h",
  "h",
  true, // Text file
  822, // Text length
  gWrapperFileContent_16_objective_5F_c_5F_sources
) ;

//--- File '/PMEntityArrayController.m'

static const char * gWrapperFileContent_17_objective_5F_c_5F_sources = "//\n"
  "//  PMEntityArrayController.m\n"
  "//  essai\n"
  "//\n"
  "//  Created by Pierre Molinaro on 29/06/13.\n"
  "//  Copyright (c) 2013 ECN / IRCCyN. All rights reserved.\n"
  "//\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "#import \"easy-bindings-utilities.h\"\n"
  "#import \"PMEntityArrayController.h\"\n"
  "#import \"PMManagedObject.h\"\n"
  "#import \"PMObjectManager.h\"\n"
  "#import \"PMAllocationDebug.h\"\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "@implementation PMEntityArrayController\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "@synthesize deleteEntityOnRemove ;\n"
  "@synthesize entityManager ;\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (instancetype) init {\n"
  "  self = [super init] ;\n"
  "  if (self) {\n"
  "    macroNoteObjectAllocation ;\n"
  "  }\n"
  "  return self ;\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    Dealloc                                                                 *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) dealloc {\n"
  "  macroReleaseSetToNil (mFilteringKey) ;\n"
  "  macroReleaseSetToNil (mObservedObjects) ;\n"
  "  macroReleaseSetToNil (entityManager) ;\n"
  "  macroNoteObjectDeallocation ;\n"
  "  macroSuperDealloc ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) add: (id) inSender {\n"
  "  if (nil == self.entityManager) {\n"
  "    [super add:inSender] ;\n"
  "  }else{\n"
  "    id newObject = [self.entityManager newInstanceOfEntity:self.objectClass] ;\n"
  "    [self addObject:newObject] ;\n"
  "    macroAutorelease (newObject) ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) remove: (id) inSender {\n"
  "  if (self.deleteEntityOnRemove && (nil != self.entityManager)) {\n"
  "    NSIndexSet * selectedObjectIndexes = self.selectionIndexes ;\n"
  "    NSArray * selectedObjects = [self.arrangedObjects objectsAtIndexes:selectedObjectIndexes] ;\n"
  "    for (PMManagedObject * object in selectedObjects) {\n"
  "      [self.entityManager deleteEntity:object] ;\n"
  "    }\n"
  "  }else{\n"
  "    [super remove:inSender] ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//                                                                           *\n"
  "//  A U T O M A T I C     F I L T E R I N G                                  *\n"
  "//                                                                           *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) automaticallyFilterWithKey: (NSString *) inKey {\n"
  "  if (mFilteringKey.length > 0) {\n"
  "    [mObservedObjects.allObjects\n"
  "      removeObserver:self\n"
  "      fromObjectsAtIndexes:[NSIndexSet indexSetWithIndexesInRange:NSMakeRange (0, mObservedObjects.allObjects.count)]\n"
  "      forKeyPath:mFilteringKey\n"
  "    ] ;\n"
  "  }\n"
  "//---\n"
  "  mFilteringKey = inKey.copy ;\n"
  "  macroReleaseSetToNil (mObservedObjects) ;\n"
  "  [self didChangeArrangementCriteria] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (NSArray *) arrangeObjects: (NSArray *) inObjects {\n"
  "  // NSLog (@\"%s\", __PRETTY_FUNCTION__) ;\n"
  "  NSArray * result = inObjects ;\n"
  "  if ([mFilteringKey length] > 0) {\n"
  "  //---\n"
  "    NSSet * objectSet = [NSSet setWithArray:inObjects] ;\n"
  "  //--- Add observer to new objects\n"
  "    NSMutableSet * newObjects = [NSMutableSet new] ;\n"
  "    [newObjects setSet:objectSet] ;\n"
  "    [newObjects minusSet:mObservedObjects] ;\n"
  "    [newObjects.allObjects\n"
  "      addObserver:self\n"
  "      toObjectsAtIndexes:[NSIndexSet indexSetWithIndexesInRange:NSMakeRange (0, newObjects.allObjects.count)]\n"
  "      forKeyPath:mFilteringKey\n"
  "      options:0\n"
  "      context:NULL\n"
  "    ] ;\n"
  "    macroReleaseSetToNil (newObjects) ;\n"
  "  //--- Remove observer to removed objects\n"
  "    NSMutableSet * removedObjects = [NSMutableSet new] ;\n"
  "    [removedObjects setSet:mObservedObjects] ;\n"
  "    [removedObjects minusSet:objectSet] ;\n"
  "    [removedObjects.allObjects\n"
  "      removeObserver:self\n"
  "      fromObjectsAtIndexes:[NSIndexSet indexSetWithIndexesInRange:NSMakeRange (0, removedObjects.allObjects.count)]\n"
  "      forKeyPath:mFilteringKey\n"
  "    ] ;\n"
  "    macroReleaseSetToNil (removedObjects) ;\n"
  "  //--- Assign new object set\n"
  "    macroAssign (mObservedObjects, objectSet) ;\n"
  "  //---\n"
  "    NSMutableArray * filteredObjects = [NSMutableArray new] ;\n"
  "    for (NSObject * object in inObjects) {\n"
  "      if ([[object valueForKey:mFilteringKey] boolValue]) {\n"
  "        [filteredObjects addObject:object] ;\n"
  "      }\n"
  "    }\n"
  "    result = filteredObjects ;\n"
  "    macroAutorelease (filteredObjects) ;\n"
  "  }\n"
  "  // NSLog (@\"selectedObjects %lu\", [[self selectedObjects] count]) ;\n"
  "  return [super arrangeObjects:result] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) observeValueForKeyPath:(NSString *) inKeyPath\n"
  "         ofObject:(id)object\n"
  "         change:(NSDictionary *)change\n"
  "         context:(void *) inContext {\n"
  "  // NSLog (@\"%s, keyPath '%@'\", __PRETTY_FUNCTION__, inKeyPath) ;\n"
  "  if ([inKeyPath isEqualToString:mFilteringKey]) {\n"
  "    const NSUInteger selectionIndex = [self selectionIndex] ;\n"
  "    [self rearrangeObjects] ;\n"
  "    // NSLog (@\"selectedObjects %lu\", [[self selectedObjects] count]) ;\n"
  "    const NSUInteger count = [[self arrangedObjects] count] ;\n"
  "    if ([self avoidsEmptySelection]) {\n"
  "      if ((selectionIndex != NSNotFound) && (selectionIndex < count)) {\n"
  "        [self setSelectionIndex:selectionIndex] ;\n"
  "      }else if ((selectionIndex == NSNotFound) && (count > 0)) {\n"
  "        [self setSelectionIndex:0] ;\n"
  "      }else if ((selectionIndex >= count) && (count > 0)) {\n"
  "        [self setSelectionIndex:count - 1] ;\n"
  "      }\n"
  "    }\n"
  "  }else{\n"
  "    [super\n"
  "      observeValueForKeyPath:inKeyPath\n"
  "      ofObject:object\n"
  "      change:change\n"
  "      context:inContext\n"
  "    ] ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) unbind: (NSString *) inBinding {\n"
  "  if ([inBinding isEqualToString:@\"contentArray\"] && (mFilteringKey.length > 0)) {\n"
  "    [mObservedObjects.allObjects\n"
  "      removeObserver:self\n"
  "      fromObjectsAtIndexes:[NSIndexSet indexSetWithIndexesInRange:NSMakeRange (0, mObservedObjects.allObjects.count)]\n"
  "      forKeyPath:mFilteringKey\n"
  "    ] ;\n"
  "    macroReleaseSetToNil (mObservedObjects) ;\n"
  "  }\n"
  "  [super unbind:inBinding] ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "@end\n" ;

static const cRegularFileWrapper gWrapperFile_17_objective_5F_c_5F_sources (
  "PMEntityArrayController.m",
  "m",
  true, // Text file
  6369, // Text length
  gWrapperFileContent_17_objective_5F_c_5F_sources
) ;

//--- File '/PMEntityArrayController.swift'

static const char * gWrapperFileContent_18_objective_5F_c_5F_sources = "//\n"
  "//  PMEntityArrayController.swift\n"
  "//\n"
  "//  Created by Pierre Molinaro on 29/06/14.\n"
  "//  Copyright (c) 2013 ECN / IRCCyN. All rights reserved.\n"
  "//\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "import Cocoa\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "@objc(PMEntityArrayController) class PMEntityArrayController : NSArrayController {\n"
  "  var mFilteringKey : String = \"\"\n"
  "  var mObjectClassName = \"\"\n"
  "  var mObservedObjects = NSSet ()\n"
  "  var deleteEntityOnRemove = false\n"
  "  var mEntityManager : PMObjectManager\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //    init                                                                   *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  init (entityManager : PMObjectManager,\n"
  "        inClassName : String) {\n"
  "    mEntityManager = entityManager\n"
  "    super.init (content:NSArray ())\n"
  "    mObjectClassName = inClassName\n"
  "    noteObjectAllocation (self)\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //    deinit                                                                 *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  deinit {\n"
  "    noteObjectDeallocation (self)\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //    add                                                                    *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  override func add (inSender : AnyObject!) {\n"
  "   var newObject : PMManagedObject = mEntityManager.newInstanceOfEntityNamed (mObjectClassName)!\n"
  "   addObject (newObject)\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //    remove                                                                 *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  override func remove (inSender : AnyObject!) {\n"
  "    if deleteEntityOnRemove {\n"
  "      let selectedObjectIndexes : NSIndexSet = selectionIndexes ()\n"
  "      let selectedObjects : NSArray = self.arrangedObjects ().objectsAtIndexes (selectedObjectIndexes)\n"
  "      for object : AnyObject in selectedObjects {\n"
  "        let managedObject : PMManagedObject = object as PMManagedObject\n"
  "        mEntityManager.deleteEntity (managedObject)\n"
  "      }\n"
  "    }else{\n"
  "      super.remove (inSender)\n"
  "    }\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //  A U T O M A T I C     F I L T E R I N G                                  *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  func automaticallyFilterWithKey (inKey : String) {\n"
  "    if countElements (mFilteringKey) > 0 {\n"
  "      let allObjects : NSArray = mObservedObjects.allObjects () as NSArray\n"
  "      allObjects.removeObserver (self,\n"
  "        fromObjectsAtIndexes:NSIndexSet (indexesInRange:NSRange (location:0, length:allObjects.count ())),\n"
  "        forKeyPath:mFilteringKey\n"
  "      )\n"
  "    }\n"
  "  //---\n"
  "    mFilteringKey = inKey ;\n"
  "    didChangeArrangementCriteria ()\n"
  "  }\n"
  "\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //  arrangeObjects                                                           *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  override func arrangeObjects (inObjects : AnyObject[]!) -> AnyObject[]! {\n"
  "    // NSLog (@\"%s\", __PRETTY_FUNCTION__) ;\n"
  "\n"
  "    var result = inObjects\n"
  "    if countElements(mFilteringKey) > 0 {\n"
  "    //---\n"
  "      let objectSet : NSSet = NSSet (array:inObjects)\n"
  "    //--- Add observer to new objects\n"
  "      var newObjects = NSMutableSet ()\n"
  "      newObjects.setSet (objectSet)\n"
  "      newObjects.minusSet (mObservedObjects)\n"
  "      let newObjectArray = newObjects.allObjects () as NSArray\n"
  "      newObjectArray.addObserver (self,\n"
  "        toObjectsAtIndexes:NSIndexSet (indexesInRange:NSRange (location:0, length:newObjectArray.count ())),\n"
  "        forKeyPath:mFilteringKey,\n"
  "        options:NSKeyValueObservingOptions (0),\n"
  "        context:nil\n"
  "      )\n"
  "    //--- Remove observer to removed objects\n"
  "      var removedObjects = NSMutableSet ()\n"
  "      removedObjects.setSet (mObservedObjects)\n"
  "      removedObjects.minusSet (objectSet)\n"
  "      let removedObjectArray : NSArray = removedObjects.allObjects () as NSArray\n"
  "      removedObjectArray.removeObserver (self,\n"
  "        fromObjectsAtIndexes:NSIndexSet (indexesInRange:NSRange (location:0, length:removedObjectArray.count ())),\n"
  "        forKeyPath:mFilteringKey\n"
  "      )\n"
  "    //--- Assign new object set\n"
  "      mObservedObjects = objectSet\n"
  "    //---\n"
  "      var filteredObjects = NSMutableArray ()\n"
  "      for object : AnyObject in inObjects {\n"
  "        if object.valueForKey (mFilteringKey).boolValue () {\n"
  "          filteredObjects.addObject (object)\n"
  "        }\n"
  "      }\n"
  "      result = filteredObjects ;\n"
  "    }\n"
  "    // NSLog (@\"selectedObjects %lu\", [[self selectedObjects] count]) ;\n"
  "    return super.arrangeObjects (result)\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //  unbind                                                                   *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  override func unbind (inBinding : String) {\n"
  "    if inBinding == \"contentArray\" && (countElements (mFilteringKey) > 0) {\n"
  "      let objectArray : NSArray = mObservedObjects.allObjects () as NSArray\n"
  "      objectArray.removeObserver (self,\n"
  "        fromObjectsAtIndexes:NSIndexSet (indexesInRange:NSRange (location:0, length:objectArray.count ())),\n"
  "        forKeyPath:mFilteringKey\n"
  "      )\n"
  "    }\n"
  "    super.unbind (inBinding)\n"
  "  }\n"
  "\n"
  "\n"
  "}\n"
  "\n"
  "\n"
  "\n"
  "/*\n"
  "\n"
  "#import \"easy-bindings-utilities.h\"\n"
  "#import \"PMEntityArrayController.h\"\n"
  "#import \"PMManagedObject.h\"\n"
  "#import \"PMObjectManager.h\"\n"
  "#import \"PMAllocationDebug.h\"\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "@implementation PMEntityArrayController\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "@synthesize deleteEntityOnRemove ;\n"
  "@synthesize entityManager ;\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (instancetype) init {\n"
  "  self = [super init] ;\n"
  "  if (self) {\n"
  "    macroNoteObjectAllocation ;\n"
  "  }\n"
  "  return self ;\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    Dealloc                                                                 *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) dealloc {\n"
  "  macroReleaseSetToNil (mFilteringKey) ;\n"
  "  macroReleaseSetToNil (mObservedObjects) ;\n"
  "  macroReleaseSetToNil (entityManager) ;\n"
  "  macroNoteObjectDeallocation ;\n"
  "  macroSuperDealloc ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) add: (id) inSender {\n"
  "  if (nil == self.entityManager) {\n"
  "    [super add:inSender] ;\n"
  "  }else{\n"
  "    id newObject = [self.entityManager newInstanceOfEntity:self.objectClass] ;\n"
  "    [self addObject:newObject] ;\n"
  "    macroAutorelease (newObject) ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) remove: (id) inSender {\n"
  "  if (self.deleteEntityOnRemove && (nil != self.entityManager)) {\n"
  "    NSIndexSet * selectedObjectIndexes = self.selectionIndexes ;\n"
  "    NSArray * selectedObjects = [self.arrangedObjects objectsAtIndexes:selectedObjectIndexes] ;\n"
  "    for (PMManagedObject * object in selectedObjects) {\n"
  "      [self.entityManager deleteEntity:object] ;\n"
  "    }\n"
  "  }else{\n"
  "    [super remove:inSender] ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//                                                                           *\n"
  "//  A U T O M A T I C     F I L T E R I N G                                  *\n"
  "//                                                                           *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) automaticallyFilterWithKey: (NSString *) inKey {\n"
  "  if (mFilteringKey.length > 0) {\n"
  "    [mObservedObjects.allObjects\n"
  "      removeObserver:self\n"
  "      fromObjectsAtIndexes:[NSIndexSet indexSetWithIndexesInRange:NSMakeRange (0, mObservedObjects.allObjects.count)]\n"
  "      forKeyPath:mFilteringKey\n"
  "    ] ;\n"
  "  }\n"
  "//---\n"
  "  mFilteringKey = inKey.copy ;\n"
  "  macroReleaseSetToNil (mObservedObjects) ;\n"
  "  [self didChangeArrangementCriteria] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (NSArray *) arrangeObjects: (NSArray *) inObjects {\n"
  "  // NSLog (@\"%s\", __PRETTY_FUNCTION__) ;\n"
  "  NSArray * result = inObjects ;\n"
  "  if ([mFilteringKey length] > 0) {\n"
  "  //---\n"
  "    NSSet * objectSet = [NSSet setWithArray:inObjects] ;\n"
  "  //--- Add observer to new objects\n"
  "    NSMutableSet * newObjects = [NSMutableSet new] ;\n"
  "    [newObjects setSet:objectSet] ;\n"
  "    [newObjects minusSet:mObservedObjects] ;\n"
  "    [newObjects.allObjects\n"
  "      addObserver:self\n"
  "      toObjectsAtIndexes:[NSIndexSet indexSetWithIndexesInRange:NSMakeRange (0, newObjects.allObjects.count)]\n"
  "      forKeyPath:mFilteringKey\n"
  "      options:0\n"
  "      context:NULL\n"
  "    ] ;\n"
  "    macroReleaseSetToNil (newObjects) ;\n"
  "  //--- Remove observer to removed objects\n"
  "    NSMutableSet * removedObjects = [NSMutableSet new] ;\n"
  "    [removedObjects setSet:mObservedObjects] ;\n"
  "    [removedObjects minusSet:objectSet] ;\n"
  "    [removedObjects.allObjects\n"
  "      removeObserver:self\n"
  "      fromObjectsAtIndexes:[NSIndexSet indexSetWithIndexesInRange:NSMakeRange (0, removedObjects.allObjects.count)]\n"
  "      forKeyPath:mFilteringKey\n"
  "    ] ;\n"
  "    macroReleaseSetToNil (removedObjects) ;\n"
  "  //--- Assign new object set\n"
  "    macroAssign (mObservedObjects, objectSet) ;\n"
  "  //---\n"
  "    NSMutableArray * filteredObjects = [NSMutableArray new] ;\n"
  "    for (NSObject * object in inObjects) {\n"
  "      if ([[object valueForKey:mFilteringKey] boolValue]) {\n"
  "        [filteredObjects addObject:object] ;\n"
  "      }\n"
  "    }\n"
  "    result = filteredObjects ;\n"
  "    macroAutorelease (filteredObjects) ;\n"
  "  }\n"
  "  // NSLog (@\"selectedObjects %lu\", [[self selectedObjects] count]) ;\n"
  "  return [super arrangeObjects:result] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) observeValueForKeyPath:(NSString *) inKeyPath\n"
  "         ofObject:(id)object\n"
  "         change:(NSDictionary *)change\n"
  "         context:(void *) inContext {\n"
  "  // NSLog (@\"%s, keyPath '%@'\", __PRETTY_FUNCTION__, inKeyPath) ;\n"
  "  if ([inKeyPath isEqualToString:mFilteringKey]) {\n"
  "    const NSUInteger selectionIndex = [self selectionIndex] ;\n"
  "    [self rearrangeObjects] ;\n"
  "    // NSLog (@\"selectedObjects %lu\", [[self selectedObjects] count]) ;\n"
  "    const NSUInteger count = [[self arrangedObjects] count] ;\n"
  "    if ([self avoidsEmptySelection]) {\n"
  "      if ((selectionIndex != NSNotFound) && (selectionIndex < count)) {\n"
  "        [self setSelectionIndex:selectionIndex] ;\n"
  "      }else if ((selectionIndex == NSNotFound) && (count > 0)) {\n"
  "        [self setSelectionIndex:0] ;\n"
  "      }else if ((selectionIndex >= count) && (count > 0)) {\n"
  "        [self setSelectionIndex:count - 1] ;\n"
  "      }\n"
  "    }\n"
  "  }else{\n"
  "    [super\n"
  "      observeValueForKeyPath:inKeyPath\n"
  "      ofObject:object\n"
  "      change:change\n"
  "      context:inContext\n"
  "    ] ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "@end\n"
  "\n"
  "*/\n" ;

static const cRegularFileWrapper gWrapperFile_18_objective_5F_c_5F_sources (
  "PMEntityArrayController.swift",
  "swift",
  true, // Text file
  11364, // Text length
  gWrapperFileContent_18_objective_5F_c_5F_sources
) ;

//--- File '/PMEntityController.h'

static const char * gWrapperFileContent_19_objective_5F_c_5F_sources = "//\n"
  "//  PMEntityController.h\n"
  "//  essai\n"
  "//\n"
  "//  Created by Pierre Molinaro on 29/06/13.\n"
  "//  Copyright (c) 2013 ECN / IRCCyN. All rights reserved.\n"
  "//\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "#import <Cocoa/Cocoa.h>\n"
  "\n"
  "@class PMObjectManager ;\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "@interface PMEntityController : NSObjectController {\n"
  "}\n"
  "\n"
  "@property (atomic) BOOL deleteEntityOnRemove ;\n"
  "@property (retain, atomic) PMObjectManager * entityManager ;\n"
  "\n"
  "- (void) add: (id) inSender ;\n"
  "\n"
  "- (void) remove: (id) inSender ;\n"
  "\n"
  "@end\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n" ;

static const cRegularFileWrapper gWrapperFile_19_objective_5F_c_5F_sources (
  "PMEntityController.h",
  "h",
  true, // Text file
  678, // Text length
  gWrapperFileContent_19_objective_5F_c_5F_sources
) ;

//--- File '/PMEntityController.m'

static const char * gWrapperFileContent_20_objective_5F_c_5F_sources = "//\n"
  "//  PMEntityController.m\n"
  "//  essai\n"
  "//\n"
  "//  Created by Pierre Molinaro on 29/06/13.\n"
  "//  Copyright (c) 2013 ECN / IRCCyN. All rights reserved.\n"
  "//\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "#import \"easy-bindings-utilities.h\"\n"
  "#import \"PMEntityController.h\"\n"
  "#import \"PMManagedObject.h\"\n"
  "#import \"PMObjectManager.h\"\n"
  "#import \"PMAllocationDebug.h\"\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "@implementation PMEntityController\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "@synthesize deleteEntityOnRemove ;\n"
  "@synthesize entityManager ;\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (instancetype) init {\n"
  "  self = [super init] ;\n"
  "  if (self) {\n"
  "    macroNoteObjectAllocation ;\n"
  "  }\n"
  "  return self ;\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    Dealloc                                                                 *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) dealloc {\n"
  "  macroReleaseSetToNil (entityManager) ;\n"
  "  macroNoteObjectDeallocation ;\n"
  "  macroSuperDealloc ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) add: (id) inSender {\n"
  "  if (nil == self.entityManager) {\n"
  "    [super add:inSender] ;\n"
  "  }else{\n"
  "    id newObject = [self.entityManager newInstanceOfEntity:self.objectClass] ;\n"
  "    [self addObject:newObject] ;\n"
  "    macroAutorelease (newObject) ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) remove: (id) inSender {\n"
  "  id contentObject = self.content ;\n"
  "  if ((contentObject != nil) && (nil != self.entityManager)) {\n"
  "    [self.entityManager deleteEntity:contentObject] ;\n"
  "  }else{\n"
  "    [super remove:inSender] ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "@end\n" ;

static const cRegularFileWrapper gWrapperFile_20_objective_5F_c_5F_sources (
  "PMEntityController.m",
  "m",
  true, // Text file
  1941, // Text length
  gWrapperFileContent_20_objective_5F_c_5F_sources
) ;

//--- File '/PMEntityController.swift'

static const char * gWrapperFileContent_21_objective_5F_c_5F_sources = "//\n"
  "//  PMEntityController.swift\n"
  "//  essai\n"
  "//\n"
  "//  Created by Pierre Molinaro on 29/06/14.\n"
  "//  Copyright (c) 2013 ECN / IRCCyN. All rights reserved.\n"
  "//\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "import Cocoa\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "class PMEntityController : NSObjectController {\n"
  "  var deleteEntityOnRemove : Bool = false\n"
  "  var mEntityManager : PMObjectManager\n"
  "  var mObjectClassName : String\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //    init                                                                   *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  init (entityManager : PMObjectManager,\n"
  "        className : String) {\n"
  "    mEntityManager = entityManager\n"
  "    mObjectClassName = className\n"
  "    super.init ()\n"
  "    noteObjectAllocation (self)\n"
  "  }\n"
  "\n"
  "  //-----------------------------------------------------------------------------*\n"
  "  //    deinit                                                                   *\n"
  "  //-----------------------------------------------------------------------------*\n"
  "\n"
  "  deinit {\n"
  "    noteObjectDeallocation (self)\n"
  "  }\n"
  "\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "/*#import \"easy-bindings-utilities.h\"\n"
  "#import \"PMEntityController.h\"\n"
  "#import \"PMManagedObject.h\"\n"
  "#import \"PMObjectManager.h\"\n"
  "#import \"PMAllocationDebug.h\"\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "@implementation PMEntityController\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "@synthesize deleteEntityOnRemove ;\n"
  "@synthesize entityManager ;\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (instancetype) init {\n"
  "  self = [super init] ;\n"
  "  if (self) {\n"
  "    macroNoteObjectAllocation ;\n"
  "  }\n"
  "  return self ;\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    Dealloc                                                                 *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) dealloc {\n"
  "  macroReleaseSetToNil (entityManager) ;\n"
  "  macroNoteObjectDeallocation ;\n"
  "  macroSuperDealloc ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) add: (id) inSender {\n"
  "  if (nil == self.entityManager) {\n"
  "    [super add:inSender] ;\n"
  "  }else{\n"
  "    id newObject = [self.entityManager newInstanceOfEntity:self.objectClass] ;\n"
  "    [self addObject:newObject] ;\n"
  "    macroAutorelease (newObject) ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) remove: (id) inSender {\n"
  "  id contentObject = self.content ;\n"
  "  if ((contentObject != nil) && (nil != self.entityManager)) {\n"
  "    [self.entityManager deleteEntity:contentObject] ;\n"
  "  }else{\n"
  "    [super remove:inSender] ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "@end\n"
  "\n"
  "*/\n" ;

static const cRegularFileWrapper gWrapperFile_21_objective_5F_c_5F_sources (
  "PMEntityController.swift",
  "swift",
  true, // Text file
  3032, // Text length
  gWrapperFileContent_21_objective_5F_c_5F_sources
) ;

//--- File '/PMManagedDocument.h'

static const char * gWrapperFileContent_22_objective_5F_c_5F_sources = "//\n"
  "//  PMManagedDocument.h\n"
  "//  essai\n"
  "//\n"
  "//  Created by Pierre Molinaro on 28/06/13.\n"
  "//  Copyright (c) 2013 ECN / IRCCyN. All rights reserved.\n"
  "//\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#import <Cocoa/Cocoa.h>\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@class PMManagedObject ;\n"
  "@class PMObjectManager ;\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "typedef enum : NSUInteger {\n"
  "  PMDocumentNoCompression,\n"
  "  PMDocumentBZ2Compression,\n"
  "  PMDocumentZLIBCompression\n"
  "} PMDocumentCompressionEnum ;\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@interface PMManagedDocument : NSDocument {\n"
  "  @private PMObjectManager * mEntityManager ;\n"
  "  @protected PMManagedObject * mRootObject ;\n"
  "  @private UInt8 mReadMetadataStatus ;\n"
  "  @private NSDictionary * mReadMetadataDictionary ;\n"
  "}\n"
  "\n"
  "- (void) hookOfInit ;\n"
  "\n"
  "- (Class) rootEntityClass ;\n"
  "\n"
  "- (PMObjectManager *) entityManager ;\n"
  "\n"
  "- (void) hookOfNewDocumentCreation ;\n"
  "\n"
  "//--- Methods called during a save operation\n"
  "- (void) hookOfWillSave ;\n"
  "\n"
  "- (UInt8) metadataStatusForSaving ; // Returns 0 by default\n"
  "\n"
  "- (NSDictionary *) metadataDictionaryForSaving ; // Returns an empty dictionary by default\n"
  "\n"
  "- (PMDocumentCompressionEnum) compressDataOnSaving ; // Default: PMDocumentBZ2Compression\n"
  "\n"
  "//--- Legacy format helper\n"
  "@property (atomic)\n"
  "   PMManagedObject * (* legacyFormatLoader) (NSData * inData,\n"
  "                                             PMObjectManager * inManager,\n"
  "                                             Class inRootEntityClass,\n"
  "                                             NSError ** outError) ;\n"
  "\n"
  "//--- Methods that can be called during document's life\n"
  "- (UInt8) metadataStatusReadFromFile ; // 0 if document has been never saved\n"
  "\n"
  "- (NSDictionary *) metadataDictionaryReadFromFile ; // nil if document has been never saved\n"
  "\n"
  "//--- Metadata access\n"
  "+ (UInt8) statusForFileAtPath: (NSString *) inFilePath\n"
  "          error: (NSError **) outError ;\n"
  "\n"
  "+ (NSDictionary *) metadataForFileAtPath: (NSString *) inFilePath\n"
  "                   status: (UInt8 *) outStatus\n"
  "                   error: (NSError **) outError ;\n"
  "\n"
  "@end\n"
  "\n"
  "//---------------------------------------------------------------------------*\n" ;

static const cRegularFileWrapper gWrapperFile_22_objective_5F_c_5F_sources (
  "PMManagedDocument.h",
  "h",
  true, // Text file
  2273, // Text length
  gWrapperFileContent_22_objective_5F_c_5F_sources
) ;

//--- File '/PMManagedDocument.m'

static const char * gWrapperFileContent_23_objective_5F_c_5F_sources = "//\n"
  "//  PMManagedDocument.m\n"
  "//  essai\n"
  "//\n"
  "//  Created by Pierre Molinaro on 28/06/13.\n"
  "//  Copyright (c) 2013 ECN / IRCCyN. All rights reserved.\n"
  "//\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "#import \"easy-bindings-utilities.h\"\n"
  "#import \"PMManagedDocument.h\"\n"
  "#import \"PMAllocationDebug.h\"\n"
  "#import \"PMObjectManager.h\"\n"
  "#import \"PMManagedObject.h\"\n"
  "#import \"NSMutableData+PMWrites.h\"\n"
  "#import \"NSData+PMGZcompression.h\"\n"
  "#import \"NSData+BZ2compression.h\"\n"
  "#import \"PMDataScanner.h\"\n"
  "#import \"PMRelationshipDescription.h\"\n"
  "#import \"PMUndoManager.h\"\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  static BOOL gDebugMenuItemsAdded ;\n"
  "#endif\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "@implementation PMManagedDocument\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "@synthesize legacyFormatLoader ;\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//    init                                                                     *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (instancetype) init {\n"
  "  #ifdef EASY_BINDINGS_DEBUG\n"
  "    NSLog (@\"%s\", __PRETTY_FUNCTION__) ;\n"
  "  #endif\n"
  "  self = [super init] ;\n"
  "  if (self) {\n"
  "    PMUndoManager * um = [PMUndoManager new] ;\n"
  "    self.undoManager = um ;\n"
  "    macroReleaseSetToNil (um) ;\n"
  "    mEntityManager = [[PMObjectManager alloc] initWithUndoManager:self.undoManager] ;\n"
  "    [self hookOfInit] ;\n"
  "    macroNoteObjectAllocation ;\n"
  "  }\n"
  "  return self ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//    hookOfInit                                                               *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) hookOfInit {\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//    Dealloc                                                                  *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) dealloc {\n"
  "  [mEntityManager resetBeforeDeletion] ;\n"
  "  macroReleaseSetToNil (mReadMetadataDictionary) ;\n"
  "  macroReleaseSetToNil (mRootObject) ;\n"
  "  macroReleaseSetToNil (mEntityManager) ;\n"
  "  macroNoteObjectDeallocation ;\n"
  "  macroSuperDealloc ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (instancetype) initWithType: (NSString *) typeName error: (NSError **) outError {\n"
  "  #ifdef EASY_BINDINGS_DEBUG\n"
  "    NSLog (@\"%s\", __PRETTY_FUNCTION__) ;\n"
  "  #endif\n"
  "  self = [super initWithType:typeName error:outError] ;\n"
  "  if (self) {\n"
  "    [self.undoManager disableUndoRegistration] ;\n"
  "    mRootObject = [mEntityManager newInstanceOfEntity:self.rootEntityClass] ;\n"
  "    [self hookOfNewDocumentCreation] ;\n"
  "    [self.undoManager enableUndoRegistration] ;\n"
  "  }\n"
  "  return self ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) hookOfNewDocumentCreation {\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (Class) rootEntityClass {\n"
  "  return NULL ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (PMObjectManager *) entityManager {\n"
  "  return mEntityManager ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//    windowControllerDidLoadNib:                                              *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) windowControllerDidLoadNib: (NSWindowController *) inWindowController {\n"
  "  [super windowControllerDidLoadNib:inWindowController] ;\n"
  "//--- Add Debug menu items \?\n"
  "  #ifdef PM_COCOA_DEBUG\n"
  "    if (! gDebugMenuItemsAdded) {\n"
  "      gDebugMenuItemsAdded = YES ;\n"
  "      NSMenuItem * menuItem = [[NSMenuItem alloc]\n"
  "        initWithTitle:@\"Explore document\"\n"
  "        action:@selector (showObjectExplorerWindow:)\n"
  "        keyEquivalent:@\"\"\n"
  "      ] ;\n"
  "      macroAddItemToDebugMenu (menuItem) ;\n"
  "      macroReleaseSetToNil (menuItem) ;\n"
  "      menuItem = [[NSMenuItem alloc]\n"
  "        initWithTitle:@\"Check Relationships\"\n"
  "        action:@selector (checkRelationships:)\n"
  "        keyEquivalent:@\"\"\n"
  "      ] ;\n"
  "      macroAddItemToDebugMenu (menuItem) ;\n"
  "      macroReleaseSetToNil (menuItem) ;\n"
  "      menuItem = [[NSMenuItem alloc]\n"
  "        initWithTitle:@\"Check All Objects are Reachable\"\n"
  "        action:@selector (checkEntityReachability:)\n"
  "        keyEquivalent:@\"\"\n"
  "      ] ;\n"
  "      macroAddItemToDebugMenu (menuItem) ;\n"
  "      macroReleaseSetToNil (menuItem) ;\n"
  "    }\n"
  "  //-------------- Check relationships\n"
  "    NSUserDefaultsController * sudc = [NSUserDefaultsController sharedUserDefaultsController] ;\n"
  "    const BOOL check = [[[sudc values] value_for_key:@\"checkDocumentRelationships\"] boolValue] ;\n"
  "    if (check) {\n"
  "      [self.windowForSheet makeKeyAndOrderFront:nil] ;\n"
  "      [self checkRelationships:nil] ;\n"
  "    }\n"
  "  #endif\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//   removeWindowController:                                                   *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) removeWindowController: (NSWindowController *) inWindowController {\n"
  "  [self.undoManager disableUndoRegistration] ;\n"
  "  [mEntityManager resetBeforeDeletion] ;\n"
  "  [self.undoManager enableUndoRegistration] ;\n"
  "  [self.undoManager removeAllActions] ;\n"
  "  [super removeWindowController:inWindowController] ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "#pragma mark Check Entity Reachability\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//                                                                             *\n"
  "//   C H E C K    E N T I T Y   R E A C H A B I L I T Y                        *\n"
  "//                                                                             *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (IBAction) checkEntityReachability: (id) inSender {\n"
  "  #ifdef EASY_BINDINGS_DEBUG\n"
  "    NSLog (@\"%s\", __PRETTY_FUNCTION__) ;\n"
  "  #endif\n"
  "//--- Build and show Panel\n"
  "  const NSRect panelRect = {{0.0, 0.0}, {295.0, 107.0}} ;\n"
  "  NSPanel * panel = [[NSPanel alloc] initWithContentRect:panelRect styleMask:NSTitledWindowMask backing:NSBackingStoreBuffered defer:NO] ;\n"
  "  const NSRect textRect = {{17.0, 45.0}, {261.0, 17.0}} ;\n"
  "  NSTextField * tf = [[NSTextField alloc] initWithFrame:textRect] ;\n"
  "  [tf setStringValue:@\"Checking Document Relationships...\"] ;\n"
  "  [tf setBezeled:NO] ;\n"
  "  [tf setBordered:NO] ;\n"
  "  [tf setDrawsBackground:NO] ;\n"
  "  [tf setEditable:NO] ;\n"
  "  [tf setFont:[NSFont boldSystemFontOfSize:0.0]] ;\n"
  "  [panel.contentView addSubview:tf] ;\n"
  "  macroReleaseSetToNil (tf) ;\n"
  "  [NSApp\n"
  "    beginSheet:panel\n"
  "    modalForWindow:self.windowForSheet\n"
  "    modalDelegate:nil\n"
  "    didEndSelector:NULL\n"
  "    contextInfo:NULL\n"
  "  ] ;\n"
  "  [panel display] ;\n"
  "//--- \n"
  "  NSSet * unreachableObjects = [mEntityManager uneachableObjectsFromObject:mRootObject] ;\n"
  "//---\n"
  "  [panel orderOut:nil] ; [NSApp endSheet:panel] ; panel = nil ;\n"
  "//---\n"
  "  const NSUInteger n = unreachableObjects.count ;\n"
  "  if (n > 0) {\n"
  "    const NSUInteger rn = mEntityManager.entityCount ;\n"
  "    const NSUInteger reachableCount = rn - n ;\n"
  "    NSAlert * alert = [NSAlert\n"
  "      alertWithMessageText:@\"Object Graph Warning\"\n"
  "      defaultButton:@\"Do not Delete\"\n"
  "      alternateButton:[NSString stringWithFormat:@\"Delete %lu unreachable Object%s\", n, (n > 1) \? \"s\" : \"\"]\n"
  "      otherButton:nil\n"
  "      informativeTextWithFormat:@\"There %s %lu registered object%s, \"\n"
  "        \" %lu reachable object%s from root object.\",\n"
  "        (rn > 1) \? \"are\" : \"is\", rn, (rn > 1) \? \"s\" : \"\",\n"
  "        reachableCount, (reachableCount > 1) \? \"s\" : \"\"\n"
  "    ] ;\n"
  "    [alert\n"
  "      beginSheetModalForWindow:self.windowForSheet\n"
  "      modalDelegate:self\n"
  "      didEndSelector:@selector (deleteUnreachableObjects:returnCode:contextInfo:)\n"
  "      contextInfo:ARC_BRIDGE_RETAINED_VOID (unreachableObjects)\n"
  "    ] ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) deleteUnreachableObjects:(NSAlert *) inAlert\n"
  "         returnCode:(NSInteger) inReturnCode\n"
  "         contextInfo:(void *) inContextInfo {\n"
  "  NSSet * objectsToDelete = (ARC_BRIDGE_TRANSFER NSSet *) inContextInfo ;\n"
  "  macroCheckObject (objectsToDelete, NSSet) ;\n"
  "  if (inReturnCode == 0) {\n"
  "    for (PMManagedObject * object in objectsToDelete) {\n"
  "      [mEntityManager deleteEntity:object] ;\n"
  "    }\n"
  "  }\n"
  "  macroReleaseSetToNil (objectsToDelete) ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "#pragma mark Check Relationships\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//                                                                             *\n"
  "//   C H E C K    R E L A T I O N S H I P S                                    *\n"
  "//                                                                             *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (IBAction) checkRelationships: (id) inSender {\n"
  "  #ifdef EASY_BINDINGS_DEBUG\n"
  "    NSLog (@\"%s\", __PRETTY_FUNCTION__) ;\n"
  "  #endif\n"
  "//--- Build and show Panel\n"
  "  const NSRect panelRect = {{0.0, 0.0}, {295.0, 107.0}} ;\n"
  "  NSPanel * panel = [[NSPanel alloc] initWithContentRect:panelRect styleMask:NSTitledWindowMask backing:NSBackingStoreBuffered defer:NO] ;\n"
  "  const NSRect textRect = {{17.0, 45.0}, {261.0, 17.0}} ;\n"
  "  NSTextField * tf = [[NSTextField alloc] initWithFrame:textRect] ;\n"
  "  [tf setStringValue:@\"Checking Document Relationships...\"] ;\n"
  "  [tf setBezeled:NO] ;\n"
  "  [tf setBordered:NO] ;\n"
  "  [tf setDrawsBackground:NO] ;\n"
  "  [tf setEditable:NO] ;\n"
  "  [tf setFont:[NSFont boldSystemFontOfSize:0.0]] ;\n"
  "  [panel.contentView addSubview:tf] ;\n"
  "  macroReleaseSetToNil (tf) ;\n"
  "  [NSApp\n"
  "    beginSheet:panel\n"
  "    modalForWindow:self.windowForSheet\n"
  "    modalDelegate:nil\n"
  "    didEndSelector:NULL\n"
  "    contextInfo:NULL\n"
  "  ] ;\n"
  "  [panel display] ;\n"
  "//--- Fetch all instances of root entity (normally only one !)\n"
  "  NSArray * allInstancesOfRootEntity = [mEntityManager allEntitiesKindOfClass:self.rootEntityClass] ;\n"
  "  const NSUInteger n = allInstancesOfRootEntity.count ;\n"
  "  BOOL ok = n == 1 ;\n"
  "  if (! ok) {\n"
  "    [panel orderOut:nil] ; [NSApp endSheet:panel] ; panel = nil ;\n"
  "    NSAlert * alert = [NSAlert\n"
  "      alertWithMessageText:@\"Object Graph Error\"\n"
  "      defaultButton:@\"Ok\"\n"
  "      alternateButton:nil\n"
  "      otherButton:nil\n"
  "      informativeTextWithFormat:@\"There %s %lu instance%s of root entity. Normally, there is exactly one instance of root entity.\",\n"
  "        (n > 1) \? \"are\" : \"is\", n, (n > 1) \? \"s\" : \"\"\n"
  "    ] ;\n"
  "    [alert beginSheetModalForWindow:self.windowForSheet modalDelegate:nil didEndSelector:NULL contextInfo:NULL] ;\n"
  "  }\n"
  "  if (ok) {\n"
  "  //--- Find reachable objects from root entity\n"
  "    NSArray * reachableObjects = [mEntityManager reachableObjectsFromObject:mRootObject] ;\n"
  "    NSUInteger correctedErrors = 0 ;\n"
  "    NSUInteger fatalErrors = 0 ;\n"
  "    for (PMManagedObject * object in reachableObjects) {\n"
  "      [self\n"
  "        checkObjectRelationShips:object\n"
  "        correctedError: & correctedErrors\n"
  "        fatalErrors: & fatalErrors\n"
  "      ] ;\n"
  "    }\n"
  "    if ((correctedErrors != 0) || (fatalErrors != 0)) {\n"
  "      [panel orderOut:nil] ; [NSApp endSheet:panel] ; panel = nil ;\n"
  "      NSAlert * alert = [NSAlert\n"
  "        alertWithMessageText:@\"Object Graph Relationship Error\"\n"
  "        defaultButton:@\"Ok\"\n"
  "        alternateButton:nil\n"
  "        otherButton:nil\n"
  "        informativeTextWithFormat:@\"%lu object relationship%s been corrected, \"\n"
  "          \"%lu object relationship%s cannot be corrected.\",\n"
  "          correctedErrors,\n"
  "          (correctedErrors > 1) \? \"s have\" : \" has\",\n"
  "          fatalErrors,\n"
  "          (fatalErrors > 1) \? \"s\" : \"\"\n"
  "      ] ;\n"
  "      [alert\n"
  "        beginSheetModalForWindow:self.windowForSheet\n"
  "        modalDelegate:nil\n"
  "        didEndSelector:NULL\n"
  "        contextInfo:NULL\n"
  "      ] ;\n"
  "    }\n"
  "  }\n"
  "  if (ok && (panel != nil)) {\n"
  "    [panel orderOut:nil] ; [NSApp endSheet:panel] ; panel = nil ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) checkObjectRelationShips: (PMManagedObject *) inManagedObject\n"
  "         correctedError: (NSUInteger *) ioCorrectedErrorsPtr\n"
  "         fatalErrors: (NSUInteger *) ioFatalErrorsPtr {\n"
  "  #ifdef EASY_BINDINGS_DEBUG\n"
  "    NSLog (@\"%s, object %p (%@)\", __PRETTY_FUNCTION__, inManagedObject, inManagedObject.className) ;\n"
  "  #endif\n"
  "//--- Check to one relationships\n"
  "  NSArray * toOneRelationshipNameArray = [inManagedObject toOneRelationshipDescriptionArray] ;\n"
  "  for (PMRelationshipDescription * description in [toOneRelationshipNameArray sortedArrayUsingSelector:@selector (compareByRelationshipName:)]) {\n"
  "    NSString * relationshipName = description.relationshipName ;\n"
  "    PMManagedObject * attribute = [inManagedObject valueForKey:relationshipName] ;\n"
  "    if (description.oppositeRelationshipIsToMany) {  // Opposite is to many\n"
  "      NSArray * oppositeOfOpposite = [attribute valueForKey:description.oppositeRelationshipName] ;\n"
  "      if (! [oppositeOfOpposite containsObject:inManagedObject]) {\n"
  "        (* ioFatalErrorsPtr) ++ ;\n"
  "      }\n"
  "    }else{ // Opposite is to one\n"
  "      PMManagedObject * oppositeOfOpposite = [attribute valueForKey:description.oppositeRelationshipName] ;\n"
  "      if (nil == oppositeOfOpposite) {\n"
  "        [oppositeOfOpposite setValue:attribute forKey:description.oppositeRelationshipName] ;\n"
  "        (* ioCorrectedErrorsPtr) ++ ;\n"
  "      }else if (oppositeOfOpposite != inManagedObject) {\n"
  "        (* ioFatalErrorsPtr) ++ ;\n"
  "      }    \n"
  "    }\n"
  "  }\n"
  "//--- Check to many relationships\n"
  "  NSArray * toManyRelationshipNameArray = [inManagedObject toManyRelationshipDescriptionArray] ;\n"
  "  for (PMRelationshipDescription * description in toManyRelationshipNameArray) {\n"
  "    NSString * relationshipName = description.relationshipName ;\n"
  "    NSArray * attribute = [inManagedObject valueForKey:relationshipName] ;\n"
  "    for (PMManagedObject * object in attribute) {\n"
  "      if (description.oppositeRelationshipIsToMany) {  // Opposite is to many\n"
  "        NSArray * oppositeOfOpposite = [object valueForKey:description.oppositeRelationshipName] ;\n"
  "        if (! [oppositeOfOpposite containsObject:inManagedObject]) {\n"
  "          (* ioFatalErrorsPtr) ++ ;\n"
  "        }\n"
  "      }else{ // Opposite is to one\n"
  "        PMManagedObject * oppositeOfOpposite = [object valueForKey:description.oppositeRelationshipName] ;\n"
  "        if (nil == oppositeOfOpposite) {\n"
  "          [object setValue:inManagedObject forKey:description.oppositeRelationshipName] ;\n"
  "          (* ioCorrectedErrorsPtr) ++ ;\n"
  "        }else if (oppositeOfOpposite != inManagedObject) {\n"
  "          (* ioFatalErrorsPtr) ++ ;\n"
  "        }      \n"
  "      }    \n"
  "    }\n"
  "  }\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "#pragma mark Object Explorer Window\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//                                                                             *\n"
  "//   showObjectExplorerWindow:                                                 *\n"
  "//                                                                             *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) showObjectExplorerWindow: (id) inUnusedSender {\n"
  "  #ifdef PM_COCOA_DEBUG\n"
  "    [mRootObject showExplorerWindow] ;\n"
  "  #endif\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//  S A V E    T O    D A T A                                                  *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "#pragma mark Document Saving\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "static const char * kFormatSignature = \"PM-BINARY-FORMAT\" ;\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (NSDictionary *) metadataDictionaryForSaving {\n"
  "  return [NSDictionary dictionary] ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (UInt8) metadataStatusForSaving {\n"
  "  return 0 ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (PMDocumentCompressionEnum) compressDataOnSaving {\n"
  "  return PMDocumentBZ2Compression ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) hookOfWillSave {\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (NSData *) dataOfType: (NSString *) inTypeName\n"
  "             error:(NSError **) outError {\n"
  "//---\n"
  "  [self hookOfWillSave] ;\n"
  "//--- Add to metadata dictionary the witdth and the height of main window\n"
  "  NSMutableDictionary * metadataDictionary = self.metadataDictionaryForSaving.mutableCopy ;\n"
  "  if (nil == metadataDictionary) {\n"
  "    metadataDictionary = [NSMutableDictionary new] ;\n"
  "  }\n"
  "  if (nil != self.windowForSheet) { // Document has been opened in the user interface\n"
  "    if ((self.windowForSheet.styleMask & NSResizableWindowMask) != 0) { // Only if window is resizable\n"
  "      const NSSize windowSize = self.windowForSheet.frame.size ;\n"
  "      [metadataDictionary setObject:[NSNumber numberWithDouble:windowSize.width] forKey:@\"PMWindowWidth\"] ;\n"
  "      [metadataDictionary setObject:[NSNumber numberWithDouble:windowSize.height] forKey:@\"PMWindowHeight\"] ;\n"
  "    }\n"
  "  }else{ // Document has not been opened in the user interface, use values read from file, if they exist\n"
  "    NSDictionary * metadataDictionaryReadFromFile = self.metadataDictionaryReadFromFile ;\n"
  "    NSNumber * v = [metadataDictionaryReadFromFile objectForKey:@\"PMWindowWidth\"] ;\n"
  "    if (nil != v) {\n"
  "      [metadataDictionary setObject:v forKey:@\"PMWindowWidth\"] ;\n"
  "    }\n"
  "    v = [metadataDictionaryReadFromFile objectForKey:@\"PMWindowHeight\"] ;\n"
  "    if (nil != v) {\n"
  "      [metadataDictionary setObject:v forKey:@\"PMWindowHeight\"] ;\n"
  "    }\n"
  "  }\n"
  "//---\n"
  "  NSMutableData * fileData = [NSMutableData new] ;\n"
  "//--- Append signature\n"
  "  [fileData appendBytes:kFormatSignature length:strlen (kFormatSignature)] ;\n"
  "//--- Write status\n"
  "  [fileData writeByte:[self metadataStatusForSaving] trace:nil] ;\n"
  "//--- Append metadata dictionary\n"
  "  NSData * data = [NSPropertyListSerialization\n"
  "    dataFromPropertyList:metadataDictionary\n"
  "    format:NSPropertyListBinaryFormat_v1_0\n"
  "    errorDescription:nil\n"
  "  ] ;\n"
  "  macroReleaseSetToNil (metadataDictionary) ;\n"
  "  [fileData writeByte:1 trace:nil] ;\n"
  "  [fileData writeAutosizedData:data trace:nil] ;\n"
  "//--- Append document data\n"
  "  data = [mEntityManager dataForSavingFromRootObject:mRootObject] ;\n"
  "  switch ([self compressDataOnSaving]) {\n"
  "  case PMDocumentBZ2Compression:\n"
  "    data = [data bz2CompressedDataWithCompressionFactor:9 returnedErrorCode:nil] ;\n"
  "    [fileData writeByte:5 trace:nil] ;\n"
  "    [fileData writeAutosizedData:data trace:nil] ;\n"
  "    break ;\n"
  "  case PMDocumentZLIBCompression:\n"
  "    data = [data zlibCompressedDataWithCompressionFactor:9 returnedErrorCode:nil] ;\n"
  "    [fileData writeByte:7 trace:nil] ;\n"
  "    [fileData writeAutosizedData:data trace:nil] ;\n"
  "    break ;\n"
  "  default:\n"
  "    [fileData writeByte:6 trace:nil] ;\n"
  "    [fileData writeAutosizedData:data trace:nil] ;\n"
  "    break ;\n"
  "  }\n"
  "//--- Append final byte\n"
  "  [fileData writeByte:0 trace:nil] ;\n"
  "//---\n"
  "  macroAutorelease (fileData) ;\n"
  "  return fileData ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) showWindows {\n"
  "  if ((self.windowForSheet.styleMask & NSResizableWindowMask) != 0) { // Only if window is resizable\n"
  "    NSDictionary * metadataDictionaryReadFromFile = self.metadataDictionaryReadFromFile ;\n"
  "    NSNumber * windowWidthNumber = [metadataDictionaryReadFromFile objectForKey:@\"PMWindowWidth\"] ;\n"
  "    NSNumber * windowHeightNumber = [metadataDictionaryReadFromFile objectForKey:@\"PMWindowHeight\"] ;\n"
  "    if ((nil != windowWidthNumber) && (nil != windowHeightNumber)) {\n"
  "      const NSSize newSize = {windowWidthNumber.doubleValue, windowHeightNumber.doubleValue} ;\n"
  "      NSRect windowFrame = self.windowForSheet.frame ;\n"
  "      windowFrame.size = newSize ;\n"
  "      [self.windowForSheet setFrame:windowFrame display:YES] ;\n"
  "    }\n"
  "  }\n"
  "//---\n"
  "  [super showWindows] ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//  R E A D    F R O M    D A T A                                              *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "#pragma mark Document loading\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (NSDictionary *) metadataDictionaryReadFromFile { // nil if document has been never saved\n"
  "  NSDictionary * result = mReadMetadataDictionary.copy ;\n"
  "  macroAutorelease (result) ;\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (UInt8) metadataStatusReadFromFile {\n"
  "  return mReadMetadataStatus ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (BOOL) readFromData: (NSData *) inData\n"
  "         ofType:(NSString *) inTypeName\n"
  "         error:(NSError **) outError {\n"
  "  #ifdef EASY_BINDINGS_DEBUG\n"
  "    NSLog (@\"%s '%lu' ofType:'%@'\", __PRETTY_FUNCTION__, inData.length, inTypeName) ;\n"
  "  #endif\n"
  "  [self.undoManager disableUndoRegistration] ;\n"
  "//---- Define input data scanner\n"
  "  PMDataScanner * dataScanner = [PMDataScanner\n"
  "    scannerWithData:inData\n"
  "    displayProgressWindowTitle:(inData.length > 30000) \? self.lastComponentOfFileName.stringByDeletingPathExtension : nil\n"
  "  ] ;\n"
  "//--- Check Signature\n"
  "  for (NSUInteger i=0 ; i<strlen (kFormatSignature) ; i++) {\n"
  "    [dataScanner acceptRequiredByte: (UInt8) kFormatSignature [i] sourceFile:__PRETTY_FUNCTION__] ;\n"
  "  }\n"
  "//--- Read Status\n"
  "  mReadMetadataStatus = [dataScanner parseByte] ;\n"
  "//--- if ok, check byte is 1\n"
  "  [dataScanner acceptRequiredByte:1 sourceFile:__PRETTY_FUNCTION__] ;\n"
  "//--- Read dictionary\n"
  "  NSError * error = nil ;\n"
  "  NSData * dictionaryData = [dataScanner parseAutosizedData] ;\n"
  "  if (nil != dictionaryData) {\n"
  "    mReadMetadataDictionary = [NSPropertyListSerialization\n"
  "      propertyListWithData:dictionaryData\n"
  "      options:NSPropertyListImmutable\n"
  "      format:NULL\n"
  "      error:& error\n"
  "    ] ;\n"
  "    macroRetain (mReadMetadataDictionary) ;\n"
  "   //  NSLog (@\"mReadMetadataDictionary %@\", mReadMetadataDictionary) ;\n"
  "  }\n"
  "//--- Read dictionary\n"
  "  BOOL legacyDataWithoutConverterError = NO ;\n"
  "  if ([dataScanner testAcceptByte:3]) { // Legacy data, not compressed\n"
  "    NSData * data = [dataScanner parseAutosizedData] ;\n"
  "    if (NULL == legacyFormatLoader) {\n"
  "      data = nil ;\n"
  "      legacyDataWithoutConverterError = YES ;\n"
  "    }else if (nil != data) {\n"
  "      mRootObject = legacyFormatLoader (data, self.entityManager, self.rootEntityClass, & error) ;\n"
  "    }\n"
  "  }else if ([dataScanner testAcceptByte:4]) { // Legacy data, ZLIB Compressed\n"
  "    NSData * compressedData = [dataScanner parseAutosizedData] ;\n"
  "    NSData * data = nil ;\n"
  "    if (nil != compressedData) {\n"
  "       data = [compressedData zlibDecompressedDataWithEstimedExpansion:10 returnedErrorCode:nil] ;\n"
  "    }\n"
  "    if (NULL == legacyFormatLoader) {\n"
  "      legacyDataWithoutConverterError = YES ;\n"
  "      data = nil ;\n"
  "    }else if (nil != data) {\n"
  "      mRootObject = legacyFormatLoader (data, self.entityManager, self.rootEntityClass, & error) ;\n"
  "    }\n"
  "  }else if ([dataScanner testAcceptByte:2]) { // Legacy data, BZ2 compressed\n"
  "    NSData * compressedData = [dataScanner parseAutosizedData] ;\n"
  "    NSData * data = nil ;\n"
  "    if (nil != compressedData) {\n"
  "      data = [compressedData bz2DecompressedDataWithEstimedExpansion:10 returnedErrorCode:nil] ;\n"
  "    }\n"
  "    if (NULL == legacyFormatLoader) {\n"
  "      legacyDataWithoutConverterError = YES ;\n"
  "      data = nil ;\n"
  "    }else if (nil != data) {\n"
  "      mRootObject = legacyFormatLoader (data, self.entityManager, self.rootEntityClass, & error) ;\n"
  "    }\n"
  "  }else if ([dataScanner testAcceptByte:6]) { // Not compressed\n"
  "    NSData * data = [dataScanner parseAutosizedData] ;\n"
  "    if (nil != data) {\n"
  "      mRootObject = [mEntityManager readFromData:data withRootEntityClass:self.rootEntityClass] ;\n"
  "      macroRetain (mRootObject) ;\n"
  "    }\n"
  "  }else if ([dataScanner testAcceptByte:7]) { // ZLIB Compressed\n"
  "    NSData * compressedData = [dataScanner parseAutosizedData] ;\n"
  "    if (nil != compressedData) {\n"
  "      NSData * data = [compressedData zlibDecompressedDataWithEstimedExpansion:10 returnedErrorCode:nil] ;\n"
  "      mRootObject = [mEntityManager readFromData:data withRootEntityClass:self.rootEntityClass] ;\n"
  "      macroRetain (mRootObject) ;\n"
  "    }\n"
  "  }else{\n"
  "    [dataScanner acceptRequiredByte:5 sourceFile:__PRETTY_FUNCTION__] ; // BZ2 compressed\n"
  "    NSData * compressedData = [dataScanner parseAutosizedData] ;\n"
  "    if (nil != compressedData) {\n"
  "      NSData * data = [compressedData bz2DecompressedDataWithEstimedExpansion:10 returnedErrorCode:nil] ;\n"
  "      mRootObject = [mEntityManager readFromData:data withRootEntityClass:self.rootEntityClass] ;\n"
  "      macroRetain (mRootObject) ;\n"
  "    }\n"
  "  }\n"
  "//--- if ok, check final byte (0)\n"
  "  [dataScanner acceptRequiredByte:0 sourceFile:__PRETTY_FUNCTION__] ;\n"
  "//--- Scanner error \?\n"
  "  if (! [dataScanner ok]) {\n"
  "    NSDictionary * dictionary = [NSDictionary dictionaryWithObjectsAndKeys:\n"
  "      @\"Cannot Open Document\",  NSLocalizedDescriptionKey,\n"
  "      @\"The file has an invalid format\",  NSLocalizedRecoverySuggestionErrorKey,\n"
  "      nil\n"
  "    ] ;\n"
  "    error = [[NSError alloc]\n"
  "      initWithDomain:[NSBundle mainBundle].bundleIdentifier\n"
  "      code:1\n"
  "      userInfo:dictionary\n"
  "    ] ;\n"
  "  }\n"
  "//---\n"
  "  [dataScanner orderOutProgressWindow] ;\n"
  "  dataScanner = nil ;\n"
  "//---\n"
  "  if (legacyDataWithoutConverterError) {\n"
  "    NSDictionary * dictionary = [NSDictionary dictionaryWithObjectsAndKeys:\n"
  "      @\"Cannot Open Document\",  NSLocalizedDescriptionKey,\n"
  "      @\"Legacy data, no helper function\",  NSLocalizedRecoverySuggestionErrorKey,\n"
  "      nil\n"
  "    ] ;\n"
  "    macroReleaseSetToNil (error) ;\n"
  "    error = [[NSError alloc]\n"
  "      initWithDomain:[NSBundle mainBundle].bundleIdentifier\n"
  "      code:1\n"
  "      userInfo:dictionary\n"
  "    ] ;\n"
  "  }\n"
  "//---\n"
  "  if ((error == nil) && (mRootObject == nil)) {\n"
  "    NSDictionary * dictionary = [NSDictionary dictionaryWithObjectsAndKeys:\n"
  "      @\"Cannot Open Document\",  NSLocalizedDescriptionKey,\n"
  "      @\"Root object cannot be read\",  NSLocalizedRecoverySuggestionErrorKey,\n"
  "      nil\n"
  "    ] ;\n"
  "    macroReleaseSetToNil (error) ;\n"
  "    error = [[NSError alloc]\n"
  "      initWithDomain:[NSBundle mainBundle].bundleIdentifier\n"
  "      code:1\n"
  "      userInfo:dictionary\n"
  "    ] ;\n"
  "  }\n"
  "//---\n"
  "  if (NULL != outError) {\n"
  "    * outError = error ;\n"
  "  }\n"
  "  [self.undoManager enableUndoRegistration] ;\n"
  "//---\n"
  "  const BOOL result = nil == error  ;\n"
  "  macroReleaseSetToNil (error) ;\n"
  "  return result;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//  M E T A D A T A    A C C E S S                                             *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "#pragma mark Metadata access\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "+ (BOOL) badFormatErrorForFileAtPath: (NSString *) inFilePath\n"
  "         error: (NSError **) outError {\n"
  "  NSDictionary * dictionary = [NSDictionary dictionaryWithObjectsAndKeys:\n"
  "    [NSString stringWithFormat:@\"Cannot read '%@' file\", inFilePath],  NSLocalizedDescriptionKey,\n"
  "    @\"File does have the required format\",  NSLocalizedRecoverySuggestionErrorKey,\n"
  "    nil\n"
  "  ] ;\n"
  "  NSError * error = [[NSError alloc]\n"
  "    initWithDomain:[NSBundle mainBundle].bundleIdentifier\n"
  "    code:1\n"
  "    userInfo:dictionary\n"
  "  ] ;\n"
  "  if (nil != outError) {\n"
  "    * outError = error ;\n"
  "  }\n"
  "  macroReleaseSetToNil (error) ;\n"
  "  return NO ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "+ (UInt8) statusForFileAtPath: (NSString *) inFilePath\n"
  "          error: (NSError **) outError {\n"
  "//--- Open file\n"
  "  NSError * error = nil ;\n"
  "  NSFileHandle * f = [NSFileHandle\n"
  "    fileHandleForReadingFromURL:[NSURL fileURLWithPath:inFilePath]\n"
  "    error: & error\n"
  "  ] ;\n"
  "//--- Read format string\n"
  "  if (nil == error) {\n"
  "    NSData * formatStringData = [f readDataOfLength:strlen (kFormatSignature)] ;\n"
  "    if ([formatStringData length] != strlen (kFormatSignature)) {\n"
  "      [self badFormatErrorForFileAtPath:inFilePath error: & error] ;\n"
  "    }else{\n"
  "      UInt8 * bytes = (UInt8 *) [formatStringData bytes] ;\n"
  "      if (memcmp (bytes, kFormatSignature, strlen (kFormatSignature)) != 0) {\n"
  "        [self badFormatErrorForFileAtPath:inFilePath error: & error] ;\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "//--- Read status\n"
  "  UInt8 status = 0 ;\n"
  "  if (nil == error) {\n"
  "    NSData * statusData = [f readDataOfLength:1] ;\n"
  "    if ([statusData length] != 1) {\n"
  "      [self badFormatErrorForFileAtPath:inFilePath error: & error] ;\n"
  "    }else{\n"
  "      [statusData getBytes: & status length:1] ;\n"
  "    }\n"
  "  }\n"
  "//---  \n"
  "  [f closeFile] ;\n"
  "//---\n"
  "  if (NULL != outError) {\n"
  "    * outError = error ;\n"
  "  }\n"
  "//---\n"
  "  return status ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "static UInt8 readByte (NSFileHandle * inFileHandle, NSString * inFilePath, NSError ** outError) {\n"
  "  UInt8 byte = 0 ;\n"
  "  NSError * error = nil ;\n"
  "  NSData * byteData = [inFileHandle readDataOfLength:1] ;\n"
  "  if ([byteData length] != 1) {\n"
  "    [PMManagedDocument badFormatErrorForFileAtPath:inFilePath error: & error] ;\n"
  "  }else{\n"
  "    [byteData getBytes: & byte length:1] ;\n"
  "  }\n"
  "//---\n"
  "  if (NULL != outError) {\n"
  "    * outError = error ;\n"
  "  }\n"
  "  return byte ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "static NSUInteger readAutosizedUnsignedIntegerAtIndex (NSFileHandle * inFileHandle, NSString * inFilePath, NSError ** outError) {\n"
  "  NSUInteger result = 0 ;\n"
  "  NSUInteger shift = 0 ;\n"
  "  NSError * error = nil ;\n"
  "  BOOL done = NO ;\n"
  "  do{\n"
  "    const UInt8 byte = readByte (inFileHandle, inFilePath, & error) ;\n"
  "    const NSUInteger w = byte & 0x7FU ;\n"
  "    result |= w << shift ;\n"
  "    shift += 7 ;\n"
  "    done = (byte & 0x80) == 0 ;\n"
  "  }while ((nil == error) && ! done) ;\n"
  "//---\n"
  "  if (NULL != outError) {\n"
  "    * outError = error ;\n"
  "  }\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "static NSData * readAutosizedDataAtIndex (NSFileHandle * inFileHandle, NSString * inFilePath, NSError ** outError) {\n"
  "  NSError * error = nil ;\n"
  "  const NSUInteger dataLength = readAutosizedUnsignedIntegerAtIndex (inFileHandle, inFilePath, & error) ;\n"
  "//---\n"
  "  NSData * result = nil ;\n"
  "  if (nil == error) {\n"
  "    result = [inFileHandle readDataOfLength:dataLength] ;\n"
  "  }\n"
  "//---\n"
  "  if (NULL != outError) {\n"
  "    * outError = error ;\n"
  "  }\n"
  "//---\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "+ (NSDictionary *) metadataForFileAtPath: (NSString *) inFilePath\n"
  "                   status: (UInt8 *) outStatus\n"
  "                   error: (NSError **) outError {\n"
  "//--- Open file\n"
  "  NSError * error = nil ;\n"
  "  NSFileHandle * f = [NSFileHandle\n"
  "    fileHandleForReadingFromURL:[NSURL fileURLWithPath:inFilePath]\n"
  "    error: & error\n"
  "  ] ;\n"
  "//--- Read format string\n"
  "  if (nil == error) {\n"
  "    NSData * formatStringData = [f readDataOfLength:strlen (kFormatSignature)] ;\n"
  "    if ([formatStringData length] != strlen (kFormatSignature)) {\n"
  "      [self badFormatErrorForFileAtPath:inFilePath error: & error] ;\n"
  "    }else{\n"
  "      UInt8 * bytes = (UInt8 *) [formatStringData bytes] ;\n"
  "      if (memcmp (bytes, kFormatSignature, strlen (kFormatSignature)) != 0) {\n"
  "        [self badFormatErrorForFileAtPath:inFilePath error: & error] ;\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "//--- Read status\n"
  "  if (nil == error) {\n"
  "    const UInt8 status = readByte (f, inFilePath, & error) ;\n"
  "    if (NULL != outStatus) {\n"
  "      * outStatus = status ;\n"
  "    }\n"
  "  }\n"
  "//--- Check byte is 1\n"
  "  if (nil == error) {\n"
  "    const UInt8 byte = readByte (f, inFilePath, & error) ;\n"
  "    if ((nil == error) && (1 != byte)) {\n"
  "      [self badFormatErrorForFileAtPath:inFilePath error: & error] ;\n"
  "    }\n"
  "  }\n"
  "//--- Read metadata dictionary\n"
  "  NSData * dictionaryData = nil ;\n"
  "  if (nil == error) {\n"
  "    dictionaryData = readAutosizedDataAtIndex (f, inFilePath, & error) ;\n"
  "  }\n"
  "  NSDictionary * metadataDictionaryForSaving  = nil ;\n"
  "  if (nil == error) {\n"
  "    metadataDictionaryForSaving = [NSPropertyListSerialization\n"
  "      propertyListWithData:dictionaryData\n"
  "      options:NSPropertyListImmutable\n"
  "      format:NULL\n"
  "      error:nil\n"
  "    ] ;\n"
  "  }\n"
  "//---  \n"
  "  [f closeFile] ;\n"
  "//---\n"
  "  if (NULL != outError) {\n"
  "    * outError = error ;\n"
  "  }\n"
  "//---\n"
  "  return metadataDictionaryForSaving ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "@end\n" ;

static const cRegularFileWrapper gWrapperFile_23_objective_5F_c_5F_sources (
  "PMManagedDocument.m",
  "m",
  true, // Text file
  32531, // Text length
  gWrapperFileContent_23_objective_5F_c_5F_sources
) ;

//--- File '/PMManagedDocument.swift'

static const char * gWrapperFileContent_24_objective_5F_c_5F_sources = "//\n"
  "//  PMManagedDocument.m\n"
  "//  essai\n"
  "//\n"
  "//  Created by Pierre Molinaro on 28/06/13.\n"
  "//  Copyright (c) 2013 ECN / IRCCyN. All rights reserved.\n"
  "//\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "import Cocoa\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "let kFormatSignature = \"PM-BINARY-FORMAT\"\n"
  "var gDebugMenuItemsAdded = false\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "enum PMDocumentCompressionEnum {\n"
  "  case PMDocumentNoCompression\n"
  "  case PMDocumentBZ2Compression\n"
  "  case PMDocumentZLIBCompression\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//                                                                           *\n"
  "//                          PMManagedDocument                                *\n"
  "//                                                                           *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "class PMManagedDocument : NSDocument {\n"
  "  var mEntityManager : PMObjectManager\n"
  "  var mRootObject : PMManagedObject\?\n"
  "  var mReadMetadataStatus : UInt8 = 0\n"
  "  var mMetadataDictionary : NSMutableDictionary = [:]\n"
  "\n"
  "  //-----------------------------------------------------------------------------*\n"
  "  //    init                                                                     *\n"
  "  //-----------------------------------------------------------------------------*\n"
  "\n"
  "  init (inEntityManager : PMObjectManager) {\n"
  "    mEntityManager = inEntityManager\n"
  "    super.init ()\n"
  "    noteObjectAllocation (self)\n"
  "    let um = mEntityManager.undoManager\n"
  "    setUndoManager (um)\n"
  "    hookOfInit () ;\n"
  "    um.disableUndoRegistration ()\n"
  "    mRootObject = mEntityManager.newInstanceOfEntityNamed (rootEntityClassName ())\n"
  "    hookOfNewDocumentCreation ()\n"
  "    um.enableUndoRegistration ()\n"
  "  }\n"
  "\n"
  "  //-----------------------------------------------------------------------------*\n"
  "  //    deinit                                                                   *\n"
  "  //-----------------------------------------------------------------------------*\n"
  "\n"
  "  deinit {\n"
  "    noteObjectDeallocation (self)\n"
  "  }\n"
  "\n"
  "  //-----------------------------------------------------------------------------*\n"
  "  //    hookOfInit                                                               *\n"
  "  //-----------------------------------------------------------------------------*\n"
  "\n"
  "  func hookOfInit () {\n"
  "  }\n"
  "\n"
  "  //-----------------------------------------------------------------------------*\n"
  "  //    hookOfNewDocumentCreation                                                *\n"
  "  //-----------------------------------------------------------------------------*\n"
  "\n"
  "  func hookOfNewDocumentCreation () {\n"
  "  }\n"
  "\n"
  "  //-----------------------------------------------------------------------------*\n"
  "  //    rootEntityClassName                                                      *\n"
  "  //-----------------------------------------------------------------------------*\n"
  "\n"
  "  func rootEntityClassName () -> String {\n"
  "    return \"\"\n"
  "  }\n"
  "\n"
  "  //-----------------------------------------------------------------------------*\n"
  "  //    entityManager                                                            *\n"
  "  //-----------------------------------------------------------------------------*\n"
  "\n"
  "  func entityManager () -> PMObjectManager {\n"
  "    return mEntityManager\n"
  "  }\n"
  "\n"
  "  //-----------------------------------------------------------------------------*\n"
  "  //    windowControllerDidLoadNib:                                              *\n"
  "  //-----------------------------------------------------------------------------*\n"
  "\n"
  "  override func windowControllerDidLoadNib (aController: NSWindowController) {\n"
  "    super.windowControllerDidLoadNib (aController)\n"
  "  //--- Add Debug menu items \?\n"
  "      if !gDebugMenuItemsAdded {\n"
  "        gDebugMenuItemsAdded = true\n"
  "        var menuItem = NSMenuItem (\n"
  "          title:\"Explore document\",\n"
  "          action:\"showObjectExplorerWindow:\",\n"
  "          keyEquivalent:\"\"\n"
  "        )\n"
  "        gDebugObject.addDebugMenuItem (menuItem)\n"
  "        menuItem = NSMenuItem (\n"
  "          title:\"Check Relationships\",\n"
  "          action:\"checkRelationships:\",\n"
  "          keyEquivalent:\"\"\n"
  "        )\n"
  "        gDebugObject.addDebugMenuItem (menuItem)\n"
  "        menuItem = NSMenuItem (\n"
  "          title:\"Check All Objects are Reachable\",\n"
  "          action:\"checkEntityReachability:\",\n"
  "          keyEquivalent:\"\"\n"
  "        )\n"
  "        gDebugObject.addDebugMenuItem (menuItem)\n"
  "      }\n"
  "    //-------------- Check relationships\n"
  "/*      NSUserDefaultsController * sudc = [NSUserDefaultsController sharedUserDefaultsController] ;\n"
  "      const BOOL check = [[[sudc values] value_for_key:@\"checkDocumentRelationships\"] boolValue] ;\n"
  "      if (check) {\n"
  "        [self.windowForSheet makeKeyAndOrderFront:nil] ;\n"
  "        [self checkRelationships:nil] ;\n"
  "      }*/\n"
  "  }\n"
  "\n"
  "  //-----------------------------------------------------------------------------*\n"
  "  //   removeWindowController:                                                   *\n"
  "  //-----------------------------------------------------------------------------*\n"
  "\n"
  "/*  - (void) removeWindowController: (NSWindowController *) inWindowController {\n"
  "    [self.undoManager disableUndoRegistration] ;\n"
  "    [mEntityManager resetBeforeDeletion] ;\n"
  "    [self.undoManager enableUndoRegistration] ;\n"
  "    [self.undoManager removeAllActions] ;\n"
  "    [super removeWindowController:inWindowController] ;\n"
  "  } */\n"
  "\n"
  "\n"
  "  //-----------------------------------------------------------------------------*\n"
  "  //  S A V E    T O    D A T A                                                  *\n"
  "  //-----------------------------------------------------------------------------*\n"
  "\n"
  "  func metadataStatusForSaving () -> UInt8 {\n"
  "    return 0 ;\n"
  "  }\n"
  "\n"
  "  //-----------------------------------------------------------------------------*\n"
  "\n"
  "  func compressDataOnSaving () -> PMDocumentCompressionEnum {\n"
  "    return PMDocumentCompressionEnum.PMDocumentBZ2Compression ;\n"
  "  }\n"
  "\n"
  "  //-----------------------------------------------------------------------------*\n"
  "\n"
  "  func hookOfWillSave () {\n"
  "  }\n"
  "\n"
  "  //----------------------------------------------------------------------------*\n"
  "  //    dataOfType                                                              *\n"
  "  //----------------------------------------------------------------------------*\n"
  "\n"
  "  override func dataOfType (typeName: String\?, error outError: NSErrorPointer) -> NSData\? {\n"
  "  //---\n"
  "    hookOfWillSave ()\n"
  "  //--- Add to metadata dictionary the witdth and the height of main window\n"
  "    if nil != windowForSheet { // Document has been opened in the user interface\n"
  "      if (windowForSheet()!.styleMask() & NSResizableWindowMask) != 0 { // Only if window is resizable\n"
  "        let windowSize = windowForSheet ().frame ().size ;\n"
  "        mMetadataDictionary.setObject (NSNumber.numberWithDouble (windowSize.width), forKey:\"PMWindowWidth\")\n"
  "        mMetadataDictionary.setObject (NSNumber.numberWithDouble (windowSize.height), forKey:\"PMWindowHeight\")\n"
  "      }\n"
  "    }else{ // Document has not been opened in the user interface, use values read from file, if they exist\n"
  "/*      NSDictionary * metadataDictionaryReadFromFile = self.metadataDictionaryReadFromFile ;\n"
  "      NSNumber * v = [metadataDictionaryReadFromFile objectForKey:@\"PMWindowWidth\"] ;\n"
  "      if (nil != v) {\n"
  "        [metadataDictionary setObject:v forKey:@\"PMWindowWidth\"] ;\n"
  "      }\n"
  "      v = [metadataDictionaryReadFromFile objectForKey:@\"PMWindowHeight\"] ;\n"
  "      if (nil != v) {\n"
  "        [metadataDictionary setObject:v forKey:@\"PMWindowHeight\"] ;\n"
  "      }*/\n"
  "    }\n"
  "  //---\n"
  "    var fileData = NSMutableData ()\n"
  "    var trace : String = \"\"\n"
  "  //--- Append signature\n"
  "    fileData.writeSignature (&trace)\n"
  "  //--- Write status\n"
  "    fileData.writeByte (metadataStatusForSaving (), trace:&trace)\n"
  "  //--- Append metadata dictionary\n"
  "    let metaData = NSPropertyListSerialization.dataWithPropertyList (mMetadataDictionary,\n"
  "      format:NSPropertyListFormat.BinaryFormat_v1_0,\n"
  "      options:0,\n"
  "      error:nil\n"
  "    )\n"
  "    fileData.writeByte (1, trace:&trace)\n"
  "    fileData.writeAutosizedData (metaData, trace:&trace)\n"
  "  //--- Append document data\n"
  "    let documentData = mEntityManager.dataForSavingFromRootObject (mRootObject!)\n"
  "    fileData.writeByte (6, trace:&trace)\n"
  "    fileData.writeAutosizedData (documentData, trace:&trace)\n"
  "/*    switch ([self compressDataOnSaving]) {\n"
  "    case PMDocumentBZ2Compression:\n"
  "      data = [data bz2CompressedDataWithCompressionFactor:9 returnedErrorCode:nil] ;\n"
  "      [fileData writeByte:5 trace:nil] ;\n"
  "      [fileData writeAutosizedData:data trace:nil] ;\n"
  "      break ;\n"
  "    case PMDocumentZLIBCompression:\n"
  "      data = [data zlibCompressedDataWithCompressionFactor:9 returnedErrorCode:nil] ;\n"
  "      [fileData writeByte:7 trace:nil] ;\n"
  "      [fileData writeAutosizedData:data trace:nil] ;\n"
  "      break ;\n"
  "    default:\n"
  "      [fileData writeByte:6 trace:nil] ;\n"
  "      [fileData writeAutosizedData:data trace:nil] ;\n"
  "      break ;\n"
  "    }*/\n"
  "  //--- Append final byte\n"
  "    fileData.writeByte (0, trace:&trace)\n"
  "    println (trace)\n"
  "  //---\n"
  "    return fileData ;\n"
  "  }\n"
  "\n"
  "  //----------------------------------------------------------------------------*\n"
  "  //    readFromData                                                            *\n"
  "  //----------------------------------------------------------------------------*\n"
  "\n"
  "  override func readFromData (data: NSData\?,\n"
  "                              ofType typeName: String\?,\n"
  "                              error outError: NSErrorPointer) -> Bool {\n"
  "    undoManager ().disableUndoRegistration ()\n"
  "  //---- Define input data scanner\n"
  "    var dataScanner = PMDataScanner (\n"
  "      data:data!,\n"
  "      displayProgressWindowTitle:(data!.length () > 30000) \? lastComponentOfFileName ().stringByDeletingPathExtension : nil\n"
  "    )\n"
  "  //--- Check Signature\n"
  "    for c in kFormatSignature.utf8 {\n"
  "      dataScanner.acceptRequiredByte (c, sourceFile:__FUNCTION__)\n"
  "    }\n"
  "  //--- Read Status\n"
  "    mReadMetadataStatus = dataScanner.parseByte ()\n"
  "  //--- if ok, check byte is 1\n"
  "    dataScanner.acceptRequiredByte (1, sourceFile:__FUNCTION__)\n"
  "  //--- Read metadata dictionary\n"
  "    var error : NSError\?\n"
  "    let dictionaryData = dataScanner.parseAutosizedData ()\n"
  "    let metadataDictionary = NSPropertyListSerialization.propertyListWithData (dictionaryData,\n"
  "      options:0, // NSPropertyListReadOptions.Immutable,\n"
  "      format:nil,\n"
  "      error:nil\n"
  "    ) as NSDictionary\n"
  "    mMetadataDictionary = metadataDictionary.mutableCopy () as NSMutableDictionary\n"
  "     //  NSLog (@\"mReadMetadataDictionary %@\", mReadMetadataDictionary) ;\n"
  "  //--- Read data dictionary\n"
  "    let dataFormat = dataScanner.parseByte ()\n"
  "    switch dataFormat {\n"
  "    case 6 :\n"
  "      let data = dataScanner.parseAutosizedData ()\n"
  "      self.mEntityManager.deleteEntity (mRootObject!)\n"
  "      mRootObject = mEntityManager.readFromData (data, rootEntityClassName:rootEntityClassName ())\n"
  "    default:\n"
  "      NSLog (\"unknowm data format: %u\", dataFormat)\n"
  "    }\n"
  "/*    BOOL legacyDataWithoutConverterError = NO ;\n"
  "    if ([dataScanner testAcceptByte:3]) { // Legacy data, not compressed\n"
  "      NSData * data = [dataScanner parseAutosizedData] ;\n"
  "      if (NULL == legacyFormatLoader) {\n"
  "        data = nil ;\n"
  "        legacyDataWithoutConverterError = YES ;\n"
  "      }else if (nil != data) {\n"
  "        mRootObject = legacyFormatLoader (data, self.entityManager, self.rootEntityClass, & error) ;\n"
  "      }\n"
  "    }else if ([dataScanner testAcceptByte:4]) { // Legacy data, ZLIB Compressed\n"
  "      NSData * compressedData = [dataScanner parseAutosizedData] ;\n"
  "      NSData * data = nil ;\n"
  "      if (nil != compressedData) {\n"
  "         data = [compressedData zlibDecompressedDataWithEstimedExpansion:10 returnedErrorCode:nil] ;\n"
  "      }\n"
  "      if (NULL == legacyFormatLoader) {\n"
  "        legacyDataWithoutConverterError = YES ;\n"
  "        data = nil ;\n"
  "      }else if (nil != data) {\n"
  "        mRootObject = legacyFormatLoader (data, self.entityManager, self.rootEntityClass, & error) ;\n"
  "      }\n"
  "    }else if ([dataScanner testAcceptByte:2]) { // Legacy data, BZ2 compressed\n"
  "      NSData * compressedData = [dataScanner parseAutosizedData] ;\n"
  "      NSData * data = nil ;\n"
  "      if (nil != compressedData) {\n"
  "        data = [compressedData bz2DecompressedDataWithEstimedExpansion:10 returnedErrorCode:nil] ;\n"
  "      }\n"
  "      if (NULL == legacyFormatLoader) {\n"
  "        legacyDataWithoutConverterError = YES ;\n"
  "        data = nil ;\n"
  "      }else if (nil != data) {\n"
  "        mRootObject = legacyFormatLoader (data, self.entityManager, self.rootEntityClass, & error) ;\n"
  "      }\n"
  "    }else if ([dataScanner testAcceptByte:6]) { // Not compressed\n"
  "      NSData * data = [dataScanner parseAutosizedData] ;\n"
  "      if (nil != data) {\n"
  "        mRootObject = [mEntityManager readFromData:data withRootEntityClass:self.rootEntityClass] ;\n"
  "        macroRetain (mRootObject) ;\n"
  "      }\n"
  "    }else if ([dataScanner testAcceptByte:7]) { // ZLIB Compressed\n"
  "      NSData * compressedData = [dataScanner parseAutosizedData] ;\n"
  "      if (nil != compressedData) {\n"
  "        NSData * data = [compressedData zlibDecompressedDataWithEstimedExpansion:10 returnedErrorCode:nil] ;\n"
  "        mRootObject = [mEntityManager readFromData:data withRootEntityClass:self.rootEntityClass] ;\n"
  "        macroRetain (mRootObject) ;\n"
  "      }\n"
  "    }else{\n"
  "      [dataScanner acceptRequiredByte:5 sourceFile:__FUNCTION__] ; // BZ2 compressed\n"
  "      NSData * compressedData = [dataScanner parseAutosizedData] ;\n"
  "      if (nil != compressedData) {\n"
  "        NSData * data = [compressedData bz2DecompressedDataWithEstimedExpansion:10 returnedErrorCode:nil] ;\n"
  "        mRootObject = [mEntityManager readFromData:data withRootEntityClass:self.rootEntityClass] ;\n"
  "        macroRetain (mRootObject) ;\n"
  "      }\n"
  "    }*/\n"
  "  //--- if ok, check final byte (0)\n"
  "    dataScanner.acceptRequiredByte (0, sourceFile:__FUNCTION__)\n"
  "  //--- Scanner error \?\n"
  "    if !dataScanner.ok () {\n"
  "      let dictionary = [\n"
  "        \"Cannot Open Document\" :  NSLocalizedDescriptionKey,\n"
  "        \"The file has an invalid format\" :  NSLocalizedRecoverySuggestionErrorKey\n"
  "      ]\n"
  "      error = NSError (\n"
  "        domain:NSBundle.mainBundle ().bundleIdentifier (),\n"
  "        code:1,\n"
  "        userInfo:dictionary\n"
  "      )\n"
  "    }\n"
  "  //---\n"
  "/*    if (legacyDataWithoutConverterError) {\n"
  "      NSDictionary * dictionary = [NSDictionary dictionaryWithObjectsAndKeys:\n"
  "        @\"Cannot Open Document\",  NSLocalizedDescriptionKey,\n"
  "        @\"Legacy data, no helper function\",  NSLocalizedRecoverySuggestionErrorKey,\n"
  "        nil\n"
  "      ] ;\n"
  "      macroReleaseSetToNil (error) ;\n"
  "      error = [[NSError alloc]\n"
  "        initWithDomain:[NSBundle mainBundle].bundleIdentifier\n"
  "        code:1\n"
  "        userInfo:dictionary\n"
  "      ] ;\n"
  "    }*/\n"
  "  //---\n"
  "    if (error == nil) && (mRootObject == nil) {\n"
  "      let dictionary = [\n"
  "        \"Cannot Open Document\" :  NSLocalizedDescriptionKey,\n"
  "        \"Root object cannot be read\" :  NSLocalizedRecoverySuggestionErrorKey\n"
  "      ]\n"
  "      error = NSError (\n"
  "        domain:NSBundle.mainBundle ().bundleIdentifier (),\n"
  "        code:1,\n"
  "        userInfo:dictionary\n"
  "      )\n"
  "    }\n"
  "  //---\n"
  "    if (nil != outError) {\n"
  "      outError.memory = error\n"
  "    }\n"
  "    undoManager ().enableUndoRegistration ()\n"
  "  //---\n"
  "    return nil == error\n"
  "  }\n"
  "\n"
  "  //-----------------------------------------------------------------------------*\n"
  "  //   showWindows                                                               *\n"
  "  //-----------------------------------------------------------------------------*\n"
  "\n"
  "  override func showWindows () {\n"
  "    if (windowForSheet ().styleMask () & NSResizableWindowMask) != 0 { // Only if window is resizable\n"
  "      var windowWidthNumber : NSNumber\? = mMetadataDictionary.objectForKey (\"PMWindowWidth\") as\? NSNumber\n"
  "      var windowHeightNumber : NSNumber\? = mMetadataDictionary.objectForKey (\"PMWindowHeight\") as\? NSNumber\n"
  "      if (nil != windowWidthNumber) && (nil != windowHeightNumber) {\n"
  "        let newSize = NSSize (width:Double (windowWidthNumber!.doubleValue ()), height:Double (windowHeightNumber!.doubleValue ()))\n"
  "        var windowFrame : NSRect = windowForSheet ().frame()\n"
  "        windowFrame.size = newSize\n"
  "        windowForSheet ().setFrame (windowFrame, display:true)\n"
  "      }\n"
  "    }\n"
  "  //---\n"
  "    super.showWindows ()\n"
  "  }\n"
  "\n"
  "  //-----------------------------------------------------------------------------*\n"
  "  //   C H E C K    E N T I T Y   R E A C H A B I L I T Y                        *\n"
  "  //-----------------------------------------------------------------------------*\n"
  "\n"
  "  @IBAction func checkEntityReachability (AnyObject!) {\n"
  "  //--- Build and show Panel\n"
  "    let panelRect = NSRect (\n"
  "      x:0.0,\n"
  "      y:0.0,\n"
  "      width:295.0,\n"
  "      height:107.0\n"
  "    )\n"
  "    let panel = NSPanel (contentRect:panelRect,\n"
  "      styleMask:NSTitledWindowMask,\n"
  "      backing:NSBackingStoreBuffered,\n"
  "      defer:false\n"
  "    )\n"
  "    let textRect = NSRect (\n"
  "     x:17.0,\n"
  "     y:45.0,\n"
  "     width:261.0,\n"
  "     height:17.0\n"
  "    )\n"
  "    var tf = NSTextField (frame:textRect)\n"
  "    tf.setStringValue (\"Checking Document Relationships...\")\n"
  "    tf.setBezeled (false)\n"
  "    tf.setBordered (false)\n"
  "    tf.setDrawsBackground (false)\n"
  "    tf.setEditable (false)\n"
  "    tf.setFont (NSFont.boldSystemFontOfSize (0.0))\n"
  "    panel.contentView ().addSubview (tf)\n"
  "    NSApp.beginSheet (panel,\n"
  "      modalForWindow:windowForSheet (),\n"
  "      modalDelegate:nil,\n"
  "      didEndSelector:nil,\n"
  "      contextInfo:nil\n"
  "    )\n"
  "    panel.display ()\n"
  "  //---\n"
  "    let unreachableObjects : NSSet = mEntityManager.unreachableObjectsFromObject (mRootObject!)\n"
  "  //---\n"
  "    panel.orderOut (nil) ; NSApp.endSheet (panel)\n"
  "  //---\n"
  "    let n = unreachableObjects.count ()\n"
  "    if n > 0 {\n"
  "      let rn = mEntityManager.entityCount () ;\n"
  "      let reachableCount = rn - n ;\n"
  "      var alert = NSAlert ()\n"
  "      alert.setMessageText (\"Object Graph Warning\")\n"
  "      alert.addButtonWithTitle (\"Do not Delete\")\n"
  "      alert.addButtonWithTitle (NSString (format:\"Delete %lu unreachable Object%@\", n, (n > 1) \? \"s\" : \"\"))\n"
  "      alert.setInformativeText (NSString (format:\"There %@ %lu registered object%@, %lu reachable object%@ from root object.\",\n"
  "        (rn > 1) \? \"are\" : \"is\", rn, (rn > 1) \? \"s\" : \"\",\n"
  "        reachableCount, (reachableCount > 1) \? \"s\" : \"\"\n"
  "      ))\n"
  "      alert.beginSheetModalForWindow (windowForSheet (),\n"
  "        completionHandler:nil\n"
  "      )\n"
  "    }\n"
  "  }\n"
  "\n"
  "  //-----------------------------------------------------------------------------*\n"
  "  //   showObjectExplorerWindow:                                                 *\n"
  "  //-----------------------------------------------------------------------------*\n"
  "\n"
  "  @IBAction func showObjectExplorerWindow (AnyObject!) {\n"
  "    mRootObject\?.showExplorerWindow ()\n"
  "  }\n"
  "\n"
  "\n"
  "\n"
  "}\n"
  "\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//                                                                           *\n"
  "//     NSMutableData extension                                               *\n"
  "//                                                                           *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "extension NSMutableData {\n"
  "\n"
  "  func writeSignature (inout trace: String) {\n"
  "    trace += NSString (format:\"%03lu %03lu \", length () / 1000, length () % 1000)\n"
  "    for c in kFormatSignature.utf8 {\n"
  "      var byte : UInt8 = UInt8 (c)\n"
  "      appendBytes (&byte, length:1)\n"
  "      trace += NSString (format:\"%02hhX \", byte)\n"
  "    }\n"
  "    trace += \"\\n\"\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  func writeAutosizedData (inData: NSData,\n"
  "                           inout trace: String) {\n"
  "    writeAutosizedUnsigned (UInt64 (inData.length ()), trace:&trace)\n"
  "    trace += NSString (format:\"%03lu %03lu \", length () / 1000, length () % 1000)\n"
  "    appendData (inData)\n"
  "    trace += \"(data, length \\(inData.length ()))\\n\"\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  func writeByte (inByte: UInt8,\n"
  "                  inout trace: String) {\n"
  "    trace += NSString (format:\"%03lu %03lu \", length () / 1000, length () % 1000)\n"
  "    trace += NSString (format:\"%02hhX \", inByte)\n"
  "    var byte = inByte\n"
  "    appendBytes (&byte, length:1)\n"
  "    trace += \"\\n\"\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  func writeAutosizedUnsigned (inValue: UInt64,\n"
  "                               inout trace: String) {\n"
  "    trace += NSString (format:\"%03lu %03lu \", length () / 1000, length () % 1000)\n"
  "    trace += \"U \"\n"
  "    var value = inValue\n"
  "    do{\n"
  "      var byte : UInt8 = UInt8 (value & 0x7F)\n"
  "      value >>= 7\n"
  "      if (value != 0) {\n"
  "        byte |= 0x80\n"
  "      }\n"
  "      trace += NSString (format:\"%02hhX \", byte)\n"
  "      appendBytes (&byte, length:1)\n"
  "    }while value != 0\n"
  "    trace += \"\\n\"\n"
  "  }\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "/*\n"
  "\n"
  "#import <Cocoa/Cocoa.h>\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@class PMManagedObject ;\n"
  "@class PMObjectManager ;\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "typedef enum : NSUInteger {\n"
  "  PMDocumentNoCompression,\n"
  "  PMDocumentBZ2Compression,\n"
  "  PMDocumentZLIBCompression\n"
  "} PMDocumentCompressionEnum ;\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@interface PMManagedDocument : NSDocument {\n"
  "  @private PMObjectManager * mEntityManager ;\n"
  "  @protected PMManagedObject * mRootObject ;\n"
  "  @private UInt8 mReadMetadataStatus ;\n"
  "  @private NSDictionary * mReadMetadataDictionary ;\n"
  "}\n"
  "\n"
  "- (void) hookOfInit ;\n"
  "\n"
  "- (Class) rootEntityClass ;\n"
  "\n"
  "- (PMObjectManager *) entityManager ;\n"
  "\n"
  "- (void) hookOfNewDocumentCreation ;\n"
  "\n"
  "//--- Methods called during a save operation\n"
  "- (void) hookOfWillSave ;\n"
  "\n"
  "- (UInt8) metadataStatusForSaving ; // Returns 0 by default\n"
  "\n"
  "- (NSDictionary *) metadataDictionaryForSaving ; // Returns an empty dictionary by default\n"
  "\n"
  "- (PMDocumentCompressionEnum) compressDataOnSaving ; // Default: PMDocumentBZ2Compression\n"
  "\n"
  "//--- Legacy format helper\n"
  "@property (atomic)\n"
  "   PMManagedObject * (* legacyFormatLoader) (NSData * inData,\n"
  "                                             PMObjectManager * inManager,\n"
  "                                             Class inRootEntityClass,\n"
  "                                             NSError ** outError) ;\n"
  "\n"
  "//--- Methods that can be called during document's life\n"
  "- (UInt8) metadataStatusReadFromFile ; // 0 if document has been never saved\n"
  "\n"
  "- (NSDictionary *) metadataDictionaryReadFromFile ; // nil if document has been never saved\n"
  "\n"
  "//--- Metadata access\n"
  "+ (UInt8) statusForFileAtPath: (NSString *) inFilePath\n"
  "          error: (NSError **) outError ;\n"
  "\n"
  "+ (NSDictionary *) metadataForFileAtPath: (NSString *) inFilePath\n"
  "                   status: (UInt8 *) outStatus\n"
  "                   error: (NSError **) outError ;\n"
  "\n"
  "@end\n"
  "\n"
  "*/\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "\n"
  "/*\n"
  "#import \"easy-bindings-utilities.h\"\n"
  "#import \"PMManagedDocument.h\"\n"
  "#import \"PMAllocationDebug.h\"\n"
  "#import \"PMObjectManager.h\"\n"
  "#import \"PMManagedObject.h\"\n"
  "#import \"NSMutableData+PMWrites.h\"\n"
  "#import \"NSData+PMGZcompression.h\"\n"
  "#import \"NSData+BZ2compression.h\"\n"
  "#import \"PMDataScanner.h\"\n"
  "#import \"PMRelationshipDescription.h\"\n"
  "#import \"PMUndoManager.h\"\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  static BOOL gDebugMenuItemsAdded ;\n"
  "#endif\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "@implementation PMManagedDocument\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "@synthesize legacyFormatLoader ;\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//    init                                                                     *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (instancetype) init {\n"
  "  #ifdef EASY_BINDINGS_DEBUG\n"
  "    NSLog (@\"%s\", __PRETTY_FUNCTION__) ;\n"
  "  #endif\n"
  "  self = [super init] ;\n"
  "  if (self) {\n"
  "    PMUndoManager * um = [PMUndoManager new] ;\n"
  "    self.undoManager = um ;\n"
  "    macroReleaseSetToNil (um) ;\n"
  "    mEntityManager = [[PMObjectManager alloc] initWithUndoManager:self.undoManager] ;\n"
  "    [self hookOfInit] ;\n"
  "    macroNoteObjectAllocation ;\n"
  "  }\n"
  "  return self ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//    hookOfInit                                                               *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) hookOfInit {\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//    Dealloc                                                                  *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) dealloc {\n"
  "  [mEntityManager resetBeforeDeletion] ;\n"
  "  macroReleaseSetToNil (mReadMetadataDictionary) ;\n"
  "  macroReleaseSetToNil (mRootObject) ;\n"
  "  macroReleaseSetToNil (mEntityManager) ;\n"
  "  macroNoteObjectDeallocation ;\n"
  "  macroSuperDealloc ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (instancetype) initWithType: (NSString *) typeName error: (NSError **) outError {\n"
  "  #ifdef EASY_BINDINGS_DEBUG\n"
  "    NSLog (@\"%s\", __PRETTY_FUNCTION__) ;\n"
  "  #endif\n"
  "  self = [super initWithType:typeName error:outError] ;\n"
  "  if (self) {\n"
  "    [self.undoManager disableUndoRegistration] ;\n"
  "    mRootObject = [mEntityManager newInstanceOfEntity:self.rootEntityClass] ;\n"
  "    [self hookOfNewDocumentCreation] ;\n"
  "    [self.undoManager enableUndoRegistration] ;\n"
  "  }\n"
  "  return self ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) hookOfNewDocumentCreation {\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (Class) rootEntityClass {\n"
  "  return NULL ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (PMObjectManager *) entityManager {\n"
  "  return mEntityManager ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//    windowControllerDidLoadNib:                                              *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) windowControllerDidLoadNib: (NSWindowController *) inWindowController {\n"
  "  [super windowControllerDidLoadNib:inWindowController] ;\n"
  "//--- Add Debug menu items \?\n"
  "  #ifdef PM_COCOA_DEBUG\n"
  "    if (! gDebugMenuItemsAdded) {\n"
  "      gDebugMenuItemsAdded = YES ;\n"
  "      NSMenuItem * menuItem = [[NSMenuItem alloc]\n"
  "        initWithTitle:@\"Explore document\"\n"
  "        action:@selector (showObjectExplorerWindow:)\n"
  "        keyEquivalent:@\"\"\n"
  "      ] ;\n"
  "      macroAddItemToDebugMenu (menuItem) ;\n"
  "      macroReleaseSetToNil (menuItem) ;\n"
  "      menuItem = [[NSMenuItem alloc]\n"
  "        initWithTitle:@\"Check Relationships\"\n"
  "        action:@selector (checkRelationships:)\n"
  "        keyEquivalent:@\"\"\n"
  "      ] ;\n"
  "      macroAddItemToDebugMenu (menuItem) ;\n"
  "      macroReleaseSetToNil (menuItem) ;\n"
  "      menuItem = [[NSMenuItem alloc]\n"
  "        initWithTitle:@\"Check All Objects are Reachable\"\n"
  "        action:@selector (checkEntityReachability:)\n"
  "        keyEquivalent:@\"\"\n"
  "      ] ;\n"
  "      macroAddItemToDebugMenu (menuItem) ;\n"
  "      macroReleaseSetToNil (menuItem) ;\n"
  "    }\n"
  "  //-------------- Check relationships\n"
  "    NSUserDefaultsController * sudc = [NSUserDefaultsController sharedUserDefaultsController] ;\n"
  "    const BOOL check = [[[sudc values] value_for_key:@\"checkDocumentRelationships\"] boolValue] ;\n"
  "    if (check) {\n"
  "      [self.windowForSheet makeKeyAndOrderFront:nil] ;\n"
  "      [self checkRelationships:nil] ;\n"
  "    }\n"
  "  #endif\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//   removeWindowController:                                                   *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) removeWindowController: (NSWindowController *) inWindowController {\n"
  "  [self.undoManager disableUndoRegistration] ;\n"
  "  [mEntityManager resetBeforeDeletion] ;\n"
  "  [self.undoManager enableUndoRegistration] ;\n"
  "  [self.undoManager removeAllActions] ;\n"
  "  [super removeWindowController:inWindowController] ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "#pragma mark Check Entity Reachability\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//                                                                             *\n"
  "//   C H E C K    E N T I T Y   R E A C H A B I L I T Y                        *\n"
  "//                                                                             *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (IBAction) checkEntityReachability: (id) inSender {\n"
  "  #ifdef EASY_BINDINGS_DEBUG\n"
  "    NSLog (@\"%s\", __PRETTY_FUNCTION__) ;\n"
  "  #endif\n"
  "//--- Build and show Panel\n"
  "  const NSRect panelRect = {{0.0, 0.0}, {295.0, 107.0}} ;\n"
  "  NSPanel * panel = [[NSPanel alloc] initWithContentRect:panelRect styleMask:NSTitledWindowMask backing:NSBackingStoreBuffered defer:NO] ;\n"
  "  const NSRect textRect = {{17.0, 45.0}, {261.0, 17.0}} ;\n"
  "  NSTextField * tf = [[NSTextField alloc] initWithFrame:textRect] ;\n"
  "  [tf setStringValue:@\"Checking Document Relationships...\"] ;\n"
  "  [tf setBezeled:NO] ;\n"
  "  [tf setBordered:NO] ;\n"
  "  [tf setDrawsBackground:NO] ;\n"
  "  [tf setEditable:NO] ;\n"
  "  [tf setFont:[NSFont boldSystemFontOfSize:0.0]] ;\n"
  "  [panel.contentView addSubview:tf] ;\n"
  "  macroReleaseSetToNil (tf) ;\n"
  "  [NSApp\n"
  "    beginSheet:panel\n"
  "    modalForWindow:self.windowForSheet\n"
  "    modalDelegate:nil\n"
  "    didEndSelector:NULL\n"
  "    contextInfo:NULL\n"
  "  ] ;\n"
  "  [panel display] ;\n"
  "//--- \n"
  "  NSSet * unreachableObjects = [mEntityManager unreachableObjectsFromObject:mRootObject] ;\n"
  "//---\n"
  "  [panel orderOut:nil] ; [NSApp endSheet:panel] ; panel = nil ;\n"
  "//---\n"
  "  const NSUInteger n = unreachableObjects.count ;\n"
  "  if (n > 0) {\n"
  "    const NSUInteger rn = mEntityManager.entityCount ;\n"
  "    const NSUInteger reachableCount = rn - n ;\n"
  "    NSAlert * alert = [NSAlert\n"
  "      alertWithMessageText:@\"Object Graph Warning\"\n"
  "      defaultButton:@\"Do not Delete\"\n"
  "      alternateButton:[NSString stringWithFormat:@\"Delete %lu unreachable Object%s\", n, (n > 1) \? \"s\" : \"\"]\n"
  "      otherButton:nil\n"
  "      informativeTextWithFormat:@\"There %s %lu registered object%s, \"\n"
  "        \" %lu reachable object%s from root object.\",\n"
  "        (rn > 1) \? \"are\" : \"is\", rn, (rn > 1) \? \"s\" : \"\",\n"
  "        reachableCount, (reachableCount > 1) \? \"s\" : \"\"\n"
  "    ] ;\n"
  "    [alert\n"
  "      beginSheetModalForWindow:self.windowForSheet\n"
  "      modalDelegate:self\n"
  "      didEndSelector:@selector (deleteUnreachableObjects:returnCode:contextInfo:)\n"
  "      contextInfo:ARC_BRIDGE_RETAINED_VOID (unreachableObjects)\n"
  "    ] ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) deleteUnreachableObjects:(NSAlert *) inAlert\n"
  "         returnCode:(NSInteger) inReturnCode\n"
  "         contextInfo:(void *) inContextInfo {\n"
  "  NSSet * objectsToDelete = (ARC_BRIDGE_TRANSFER NSSet *) inContextInfo ;\n"
  "  macroCheckObject (objectsToDelete, NSSet) ;\n"
  "  if (inReturnCode == 0) {\n"
  "    for (PMManagedObject * object in objectsToDelete) {\n"
  "      [mEntityManager deleteEntity:object] ;\n"
  "    }\n"
  "  }\n"
  "  macroReleaseSetToNil (objectsToDelete) ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "#pragma mark Check Relationships\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//                                                                             *\n"
  "//   C H E C K    R E L A T I O N S H I P S                                    *\n"
  "//                                                                             *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (IBAction) checkRelationships: (id) inSender {\n"
  "  #ifdef EASY_BINDINGS_DEBUG\n"
  "    NSLog (@\"%s\", __PRETTY_FUNCTION__) ;\n"
  "  #endif\n"
  "//--- Build and show Panel\n"
  "  const NSRect panelRect = {{0.0, 0.0}, {295.0, 107.0}} ;\n"
  "  NSPanel * panel = [[NSPanel alloc] initWithContentRect:panelRect styleMask:NSTitledWindowMask backing:NSBackingStoreBuffered defer:NO] ;\n"
  "  const NSRect textRect = {{17.0, 45.0}, {261.0, 17.0}} ;\n"
  "  NSTextField * tf = [[NSTextField alloc] initWithFrame:textRect] ;\n"
  "  [tf setStringValue:@\"Checking Document Relationships...\"] ;\n"
  "  [tf setBezeled:NO] ;\n"
  "  [tf setBordered:NO] ;\n"
  "  [tf setDrawsBackground:NO] ;\n"
  "  [tf setEditable:NO] ;\n"
  "  [tf setFont:[NSFont boldSystemFontOfSize:0.0]] ;\n"
  "  [panel.contentView addSubview:tf] ;\n"
  "  macroReleaseSetToNil (tf) ;\n"
  "  [NSApp\n"
  "    beginSheet:panel\n"
  "    modalForWindow:self.windowForSheet\n"
  "    modalDelegate:nil\n"
  "    didEndSelector:NULL\n"
  "    contextInfo:NULL\n"
  "  ] ;\n"
  "  [panel display] ;\n"
  "//--- Fetch all instances of root entity (normally only one !)\n"
  "  NSArray * allInstancesOfRootEntity = [mEntityManager allEntitiesKindOfClass:self.rootEntityClass] ;\n"
  "  const NSUInteger n = allInstancesOfRootEntity.count ;\n"
  "  BOOL ok = n == 1 ;\n"
  "  if (! ok) {\n"
  "    [panel orderOut:nil] ; [NSApp endSheet:panel] ; panel = nil ;\n"
  "    NSAlert * alert = [NSAlert\n"
  "      alertWithMessageText:@\"Object Graph Error\"\n"
  "      defaultButton:@\"Ok\"\n"
  "      alternateButton:nil\n"
  "      otherButton:nil\n"
  "      informativeTextWithFormat:@\"There %s %lu instance%s of root entity. Normally, there is exactly one instance of root entity.\",\n"
  "        (n > 1) \? \"are\" : \"is\", n, (n > 1) \? \"s\" : \"\"\n"
  "    ] ;\n"
  "    [alert beginSheetModalForWindow:self.windowForSheet modalDelegate:nil didEndSelector:NULL contextInfo:NULL] ;\n"
  "  }\n"
  "  if (ok) {\n"
  "  //--- Find reachable objects from root entity\n"
  "    NSArray * reachableObjects = [mEntityManager reachableObjectsFromObject:mRootObject] ;\n"
  "    NSUInteger correctedErrors = 0 ;\n"
  "    NSUInteger fatalErrors = 0 ;\n"
  "    for (PMManagedObject * object in reachableObjects) {\n"
  "      [self\n"
  "        checkObjectRelationShips:object\n"
  "        correctedError: & correctedErrors\n"
  "        fatalErrors: & fatalErrors\n"
  "      ] ;\n"
  "    }\n"
  "    if ((correctedErrors != 0) || (fatalErrors != 0)) {\n"
  "      [panel orderOut:nil] ; [NSApp endSheet:panel] ; panel = nil ;\n"
  "      NSAlert * alert = [NSAlert\n"
  "        alertWithMessageText:@\"Object Graph Relationship Error\"\n"
  "        defaultButton:@\"Ok\"\n"
  "        alternateButton:nil\n"
  "        otherButton:nil\n"
  "        informativeTextWithFormat:@\"%lu object relationship%s been corrected, \"\n"
  "          \"%lu object relationship%s cannot be corrected.\",\n"
  "          correctedErrors,\n"
  "          (correctedErrors > 1) \? \"s have\" : \" has\",\n"
  "          fatalErrors,\n"
  "          (fatalErrors > 1) \? \"s\" : \"\"\n"
  "      ] ;\n"
  "      [alert\n"
  "        beginSheetModalForWindow:self.windowForSheet\n"
  "        modalDelegate:nil\n"
  "        didEndSelector:NULL\n"
  "        contextInfo:NULL\n"
  "      ] ;\n"
  "    }\n"
  "  }\n"
  "  if (ok && (panel != nil)) {\n"
  "    [panel orderOut:nil] ; [NSApp endSheet:panel] ; panel = nil ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) checkObjectRelationShips: (PMManagedObject *) inManagedObject\n"
  "         correctedError: (NSUInteger *) ioCorrectedErrorsPtr\n"
  "         fatalErrors: (NSUInteger *) ioFatalErrorsPtr {\n"
  "  #ifdef EASY_BINDINGS_DEBUG\n"
  "    NSLog (@\"%s, object %p (%@)\", __PRETTY_FUNCTION__, inManagedObject, inManagedObject.className) ;\n"
  "  #endif\n"
  "//--- Check to one relationships\n"
  "  NSArray * toOneRelationshipNameArray = [inManagedObject toOneRelationshipDescriptionArray] ;\n"
  "  for (PMRelationshipDescription * description in [toOneRelationshipNameArray sortedArrayUsingSelector:@selector (compareByRelationshipName:)]) {\n"
  "    NSString * relationshipName = description.relationshipName ;\n"
  "    PMManagedObject * attribute = [inManagedObject valueForKey:relationshipName] ;\n"
  "    if (description.oppositeRelationshipIsToMany) {  // Opposite is to many\n"
  "      NSArray * oppositeOfOpposite = [attribute valueForKey:description.oppositeRelationshipName] ;\n"
  "      if (! [oppositeOfOpposite containsObject:inManagedObject]) {\n"
  "        (* ioFatalErrorsPtr) ++ ;\n"
  "      }\n"
  "    }else{ // Opposite is to one\n"
  "      PMManagedObject * oppositeOfOpposite = [attribute valueForKey:description.oppositeRelationshipName] ;\n"
  "      if (nil == oppositeOfOpposite) {\n"
  "        [oppositeOfOpposite setValue:attribute forKey:description.oppositeRelationshipName] ;\n"
  "        (* ioCorrectedErrorsPtr) ++ ;\n"
  "      }else if (oppositeOfOpposite != inManagedObject) {\n"
  "        (* ioFatalErrorsPtr) ++ ;\n"
  "      }    \n"
  "    }\n"
  "  }\n"
  "//--- Check to many relationships\n"
  "  NSArray * toManyRelationshipNameArray = [inManagedObject toManyRelationshipDescriptionArray] ;\n"
  "  for (PMRelationshipDescription * description in toManyRelationshipNameArray) {\n"
  "    NSString * relationshipName = description.relationshipName ;\n"
  "    NSArray * attribute = [inManagedObject valueForKey:relationshipName] ;\n"
  "    for (PMManagedObject * object in attribute) {\n"
  "      if (description.oppositeRelationshipIsToMany) {  // Opposite is to many\n"
  "        NSArray * oppositeOfOpposite = [object valueForKey:description.oppositeRelationshipName] ;\n"
  "        if (! [oppositeOfOpposite containsObject:inManagedObject]) {\n"
  "          (* ioFatalErrorsPtr) ++ ;\n"
  "        }\n"
  "      }else{ // Opposite is to one\n"
  "        PMManagedObject * oppositeOfOpposite = [object valueForKey:description.oppositeRelationshipName] ;\n"
  "        if (nil == oppositeOfOpposite) {\n"
  "          [object setValue:inManagedObject forKey:description.oppositeRelationshipName] ;\n"
  "          (* ioCorrectedErrorsPtr) ++ ;\n"
  "        }else if (oppositeOfOpposite != inManagedObject) {\n"
  "          (* ioFatalErrorsPtr) ++ ;\n"
  "        }      \n"
  "      }    \n"
  "    }\n"
  "  }\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "#pragma mark Object Explorer Window\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//  S A V E    T O    D A T A                                                  *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "#pragma mark Document Saving\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "static const char * kFormatSignature = \"PM-BINARY-FORMAT\" ;\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (NSDictionary *) metadataDictionaryForSaving {\n"
  "  return [NSDictionary dictionary] ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (UInt8) metadataStatusForSaving {\n"
  "  return 0 ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (PMDocumentCompressionEnum) compressDataOnSaving {\n"
  "  return PMDocumentBZ2Compression ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) hookOfWillSave {\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (NSData *) dataOfType: (NSString *) inTypeName\n"
  "             error:(NSError **) outError {\n"
  "//---\n"
  "  [self hookOfWillSave] ;\n"
  "//--- Add to metadata dictionary the witdth and the height of main window\n"
  "  NSMutableDictionary * metadataDictionary = self.metadataDictionaryForSaving.mutableCopy ;\n"
  "  if (nil == metadataDictionary) {\n"
  "    metadataDictionary = [NSMutableDictionary new] ;\n"
  "  }\n"
  "  if (nil != self.windowForSheet) { // Document has been opened in the user interface\n"
  "    if ((self.windowForSheet.styleMask & NSResizableWindowMask) != 0) { // Only if window is resizable\n"
  "      const NSSize windowSize = self.windowForSheet.frame.size ;\n"
  "      [metadataDictionary setObject:[NSNumber numberWithDouble:windowSize.width] forKey:@\"PMWindowWidth\"] ;\n"
  "      [metadataDictionary setObject:[NSNumber numberWithDouble:windowSize.height] forKey:@\"PMWindowHeight\"] ;\n"
  "    }\n"
  "  }else{ // Document has not been opened in the user interface, use values read from file, if they exist\n"
  "    NSDictionary * metadataDictionaryReadFromFile = self.metadataDictionaryReadFromFile ;\n"
  "    NSNumber * v = [metadataDictionaryReadFromFile objectForKey:@\"PMWindowWidth\"] ;\n"
  "    if (nil != v) {\n"
  "      [metadataDictionary setObject:v forKey:@\"PMWindowWidth\"] ;\n"
  "    }\n"
  "    v = [metadataDictionaryReadFromFile objectForKey:@\"PMWindowHeight\"] ;\n"
  "    if (nil != v) {\n"
  "      [metadataDictionary setObject:v forKey:@\"PMWindowHeight\"] ;\n"
  "    }\n"
  "  }\n"
  "//---\n"
  "  NSMutableData * fileData = [NSMutableData new] ;\n"
  "//--- Append signature\n"
  "  [fileData appendBytes:kFormatSignature length:strlen (kFormatSignature)] ;\n"
  "//--- Write status\n"
  "  [fileData writeByte:[self metadataStatusForSaving] trace:nil] ;\n"
  "//--- Append metadata dictionary\n"
  "  NSData * data = [NSPropertyListSerialization\n"
  "    dataFromPropertyList:metadataDictionary\n"
  "    format:NSPropertyListBinaryFormat_v1_0\n"
  "    errorDescription:nil\n"
  "  ] ;\n"
  "  macroReleaseSetToNil (metadataDictionary) ;\n"
  "  [fileData writeByte:1 trace:nil] ;\n"
  "  [fileData writeAutosizedData:data trace:nil] ;\n"
  "//--- Append document data\n"
  "  data = [mEntityManager dataForSavingFromRootObject:mRootObject] ;\n"
  "  switch ([self compressDataOnSaving]) {\n"
  "  case PMDocumentBZ2Compression:\n"
  "    data = [data bz2CompressedDataWithCompressionFactor:9 returnedErrorCode:nil] ;\n"
  "    [fileData writeByte:5 trace:nil] ;\n"
  "    [fileData writeAutosizedData:data trace:nil] ;\n"
  "    break ;\n"
  "  case PMDocumentZLIBCompression:\n"
  "    data = [data zlibCompressedDataWithCompressionFactor:9 returnedErrorCode:nil] ;\n"
  "    [fileData writeByte:7 trace:nil] ;\n"
  "    [fileData writeAutosizedData:data trace:nil] ;\n"
  "    break ;\n"
  "  default:\n"
  "    [fileData writeByte:6 trace:nil] ;\n"
  "    [fileData writeAutosizedData:data trace:nil] ;\n"
  "    break ;\n"
  "  }\n"
  "//--- Append final byte\n"
  "  [fileData writeByte:0 trace:nil] ;\n"
  "//---\n"
  "  macroAutorelease (fileData) ;\n"
  "  return fileData ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//  R E A D    F R O M    D A T A                                              *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "#pragma mark Document loading\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (NSDictionary *) metadataDictionaryReadFromFile { // nil if document has been never saved\n"
  "  NSDictionary * result = mReadMetadataDictionary.copy ;\n"
  "  macroAutorelease (result) ;\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (UInt8) metadataStatusReadFromFile {\n"
  "  return mReadMetadataStatus ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (BOOL) readFromData: (NSData *) inData\n"
  "         ofType:(NSString *) inTypeName\n"
  "         error:(NSError **) outError {\n"
  "  #ifdef EASY_BINDINGS_DEBUG\n"
  "    NSLog (@\"%s '%lu' ofType:'%@'\", __PRETTY_FUNCTION__, inData.length, inTypeName) ;\n"
  "  #endif\n"
  "  [self.undoManager disableUndoRegistration] ;\n"
  "//---- Define input data scanner\n"
  "  PMDataScanner * dataScanner = [PMDataScanner\n"
  "    scannerWithData:inData\n"
  "    displayProgressWindowTitle:(inData.length > 30000) \? self.lastComponentOfFileName.stringByDeletingPathExtension : nil\n"
  "  ] ;\n"
  "//--- Check Signature\n"
  "  for (NSUInteger i=0 ; i<strlen (kFormatSignature) ; i++) {\n"
  "    [dataScanner acceptRequiredByte: (UInt8) kFormatSignature [i] sourceFile:__PRETTY_FUNCTION__] ;\n"
  "  }\n"
  "//--- Read Status\n"
  "  mReadMetadataStatus = [dataScanner parseByte] ;\n"
  "//--- if ok, check byte is 1\n"
  "  [dataScanner acceptRequiredByte:1 sourceFile:__PRETTY_FUNCTION__] ;\n"
  "//--- Read dictionary\n"
  "  NSError * error = nil ;\n"
  "  NSData * dictionaryData = [dataScanner parseAutosizedData] ;\n"
  "  if (nil != dictionaryData) {\n"
  "    mReadMetadataDictionary = [NSPropertyListSerialization\n"
  "      propertyListWithData:dictionaryData\n"
  "      options:NSPropertyListImmutable\n"
  "      format:NULL\n"
  "      error:& error\n"
  "    ] ;\n"
  "    macroRetain (mReadMetadataDictionary) ;\n"
  "   //  NSLog (@\"mReadMetadataDictionary %@\", mReadMetadataDictionary) ;\n"
  "  }\n"
  "//--- Read dictionary\n"
  "  BOOL legacyDataWithoutConverterError = NO ;\n"
  "  if ([dataScanner testAcceptByte:3]) { // Legacy data, not compressed\n"
  "    NSData * data = [dataScanner parseAutosizedData] ;\n"
  "    if (NULL == legacyFormatLoader) {\n"
  "      data = nil ;\n"
  "      legacyDataWithoutConverterError = YES ;\n"
  "    }else if (nil != data) {\n"
  "      mRootObject = legacyFormatLoader (data, self.entityManager, self.rootEntityClass, & error) ;\n"
  "    }\n"
  "  }else if ([dataScanner testAcceptByte:4]) { // Legacy data, ZLIB Compressed\n"
  "    NSData * compressedData = [dataScanner parseAutosizedData] ;\n"
  "    NSData * data = nil ;\n"
  "    if (nil != compressedData) {\n"
  "       data = [compressedData zlibDecompressedDataWithEstimedExpansion:10 returnedErrorCode:nil] ;\n"
  "    }\n"
  "    if (NULL == legacyFormatLoader) {\n"
  "      legacyDataWithoutConverterError = YES ;\n"
  "      data = nil ;\n"
  "    }else if (nil != data) {\n"
  "      mRootObject = legacyFormatLoader (data, self.entityManager, self.rootEntityClass, & error) ;\n"
  "    }\n"
  "  }else if ([dataScanner testAcceptByte:2]) { // Legacy data, BZ2 compressed\n"
  "    NSData * compressedData = [dataScanner parseAutosizedData] ;\n"
  "    NSData * data = nil ;\n"
  "    if (nil != compressedData) {\n"
  "      data = [compressedData bz2DecompressedDataWithEstimedExpansion:10 returnedErrorCode:nil] ;\n"
  "    }\n"
  "    if (NULL == legacyFormatLoader) {\n"
  "      legacyDataWithoutConverterError = YES ;\n"
  "      data = nil ;\n"
  "    }else if (nil != data) {\n"
  "      mRootObject = legacyFormatLoader (data, self.entityManager, self.rootEntityClass, & error) ;\n"
  "    }\n"
  "  }else if ([dataScanner testAcceptByte:6]) { // Not compressed\n"
  "    NSData * data = [dataScanner parseAutosizedData] ;\n"
  "    if (nil != data) {\n"
  "      mRootObject = [mEntityManager readFromData:data withRootEntityClass:self.rootEntityClass] ;\n"
  "      macroRetain (mRootObject) ;\n"
  "    }\n"
  "  }else if ([dataScanner testAcceptByte:7]) { // ZLIB Compressed\n"
  "    NSData * compressedData = [dataScanner parseAutosizedData] ;\n"
  "    if (nil != compressedData) {\n"
  "      NSData * data = [compressedData zlibDecompressedDataWithEstimedExpansion:10 returnedErrorCode:nil] ;\n"
  "      mRootObject = [mEntityManager readFromData:data withRootEntityClass:self.rootEntityClass] ;\n"
  "      macroRetain (mRootObject) ;\n"
  "    }\n"
  "  }else{\n"
  "    [dataScanner acceptRequiredByte:5 sourceFile:__PRETTY_FUNCTION__] ; // BZ2 compressed\n"
  "    NSData * compressedData = [dataScanner parseAutosizedData] ;\n"
  "    if (nil != compressedData) {\n"
  "      NSData * data = [compressedData bz2DecompressedDataWithEstimedExpansion:10 returnedErrorCode:nil] ;\n"
  "      mRootObject = [mEntityManager readFromData:data withRootEntityClass:self.rootEntityClass] ;\n"
  "      macroRetain (mRootObject) ;\n"
  "    }\n"
  "  }\n"
  "//--- if ok, check final byte (0)\n"
  "  [dataScanner acceptRequiredByte:0 sourceFile:__PRETTY_FUNCTION__] ;\n"
  "//--- Scanner error \?\n"
  "  if (! [dataScanner ok]) {\n"
  "    NSDictionary * dictionary = [NSDictionary dictionaryWithObjectsAndKeys:\n"
  "      @\"Cannot Open Document\",  NSLocalizedDescriptionKey,\n"
  "      @\"The file has an invalid format\",  NSLocalizedRecoverySuggestionErrorKey,\n"
  "      nil\n"
  "    ] ;\n"
  "    error = [[NSError alloc]\n"
  "      initWithDomain:[NSBundle mainBundle].bundleIdentifier\n"
  "      code:1\n"
  "      userInfo:dictionary\n"
  "    ] ;\n"
  "  }\n"
  "//---\n"
  "  [dataScanner orderOutProgressWindow] ;\n"
  "  dataScanner = nil ;\n"
  "//---\n"
  "  if (legacyDataWithoutConverterError) {\n"
  "    NSDictionary * dictionary = [NSDictionary dictionaryWithObjectsAndKeys:\n"
  "      @\"Cannot Open Document\",  NSLocalizedDescriptionKey,\n"
  "      @\"Legacy data, no helper function\",  NSLocalizedRecoverySuggestionErrorKey,\n"
  "      nil\n"
  "    ] ;\n"
  "    macroReleaseSetToNil (error) ;\n"
  "    error = [[NSError alloc]\n"
  "      initWithDomain:[NSBundle mainBundle].bundleIdentifier\n"
  "      code:1\n"
  "      userInfo:dictionary\n"
  "    ] ;\n"
  "  }\n"
  "//---\n"
  "  if ((error == nil) && (mRootObject == nil)) {\n"
  "    NSDictionary * dictionary = [NSDictionary dictionaryWithObjectsAndKeys:\n"
  "      @\"Cannot Open Document\",  NSLocalizedDescriptionKey,\n"
  "      @\"Root object cannot be read\",  NSLocalizedRecoverySuggestionErrorKey,\n"
  "      nil\n"
  "    ] ;\n"
  "    macroReleaseSetToNil (error) ;\n"
  "    error = [[NSError alloc]\n"
  "      initWithDomain:[NSBundle mainBundle].bundleIdentifier\n"
  "      code:1\n"
  "      userInfo:dictionary\n"
  "    ] ;\n"
  "  }\n"
  "//---\n"
  "  if (NULL != outError) {\n"
  "    * outError = error ;\n"
  "  }\n"
  "  [self.undoManager enableUndoRegistration] ;\n"
  "//---\n"
  "  const BOOL result = nil == error  ;\n"
  "  macroReleaseSetToNil (error) ;\n"
  "  return result;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//  M E T A D A T A    A C C E S S                                             *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "#pragma mark Metadata access\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "+ (BOOL) badFormatErrorForFileAtPath: (NSString *) inFilePath\n"
  "         error: (NSError **) outError {\n"
  "  NSDictionary * dictionary = [NSDictionary dictionaryWithObjectsAndKeys:\n"
  "    [NSString stringWithFormat:@\"Cannot read '%@' file\", inFilePath],  NSLocalizedDescriptionKey,\n"
  "    @\"File does have the required format\",  NSLocalizedRecoverySuggestionErrorKey,\n"
  "    nil\n"
  "  ] ;\n"
  "  NSError * error = [[NSError alloc]\n"
  "    initWithDomain:[NSBundle mainBundle].bundleIdentifier\n"
  "    code:1\n"
  "    userInfo:dictionary\n"
  "  ] ;\n"
  "  if (nil != outError) {\n"
  "    * outError = error ;\n"
  "  }\n"
  "  macroReleaseSetToNil (error) ;\n"
  "  return NO ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "+ (UInt8) statusForFileAtPath: (NSString *) inFilePath\n"
  "          error: (NSError **) outError {\n"
  "//--- Open file\n"
  "  NSError * error = nil ;\n"
  "  NSFileHandle * f = [NSFileHandle\n"
  "    fileHandleForReadingFromURL:[NSURL fileURLWithPath:inFilePath]\n"
  "    error: & error\n"
  "  ] ;\n"
  "//--- Read format string\n"
  "  if (nil == error) {\n"
  "    NSData * formatStringData = [f readDataOfLength:strlen (kFormatSignature)] ;\n"
  "    if ([formatStringData length] != strlen (kFormatSignature)) {\n"
  "      [self badFormatErrorForFileAtPath:inFilePath error: & error] ;\n"
  "    }else{\n"
  "      UInt8 * bytes = (UInt8 *) [formatStringData bytes] ;\n"
  "      if (memcmp (bytes, kFormatSignature, strlen (kFormatSignature)) != 0) {\n"
  "        [self badFormatErrorForFileAtPath:inFilePath error: & error] ;\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "//--- Read status\n"
  "  UInt8 status = 0 ;\n"
  "  if (nil == error) {\n"
  "    NSData * statusData = [f readDataOfLength:1] ;\n"
  "    if ([statusData length] != 1) {\n"
  "      [self badFormatErrorForFileAtPath:inFilePath error: & error] ;\n"
  "    }else{\n"
  "      [statusData getBytes: & status length:1] ;\n"
  "    }\n"
  "  }\n"
  "//---  \n"
  "  [f closeFile] ;\n"
  "//---\n"
  "  if (NULL != outError) {\n"
  "    * outError = error ;\n"
  "  }\n"
  "//---\n"
  "  return status ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "static UInt8 readByte (NSFileHandle * inFileHandle, NSString * inFilePath, NSError ** outError) {\n"
  "  UInt8 byte = 0 ;\n"
  "  NSError * error = nil ;\n"
  "  NSData * byteData = [inFileHandle readDataOfLength:1] ;\n"
  "  if ([byteData length] != 1) {\n"
  "    [PMManagedDocument badFormatErrorForFileAtPath:inFilePath error: & error] ;\n"
  "  }else{\n"
  "    [byteData getBytes: & byte length:1] ;\n"
  "  }\n"
  "//---\n"
  "  if (NULL != outError) {\n"
  "    * outError = error ;\n"
  "  }\n"
  "  return byte ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "static NSUInteger readAutosizedUnsignedIntegerAtIndex (NSFileHandle * inFileHandle, NSString * inFilePath, NSError ** outError) {\n"
  "  NSUInteger result = 0 ;\n"
  "  NSUInteger shift = 0 ;\n"
  "  NSError * error = nil ;\n"
  "  BOOL done = NO ;\n"
  "  do{\n"
  "    const UInt8 byte = readByte (inFileHandle, inFilePath, & error) ;\n"
  "    const NSUInteger w = byte & 0x7FU ;\n"
  "    result |= w << shift ;\n"
  "    shift += 7 ;\n"
  "    done = (byte & 0x80) == 0 ;\n"
  "  }while ((nil == error) && ! done) ;\n"
  "//---\n"
  "  if (NULL != outError) {\n"
  "    * outError = error ;\n"
  "  }\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "static NSData * readAutosizedDataAtIndex (NSFileHandle * inFileHandle, NSString * inFilePath, NSError ** outError) {\n"
  "  NSError * error = nil ;\n"
  "  const NSUInteger dataLength = readAutosizedUnsignedIntegerAtIndex (inFileHandle, inFilePath, & error) ;\n"
  "//---\n"
  "  NSData * result = nil ;\n"
  "  if (nil == error) {\n"
  "    result = [inFileHandle readDataOfLength:dataLength] ;\n"
  "  }\n"
  "//---\n"
  "  if (NULL != outError) {\n"
  "    * outError = error ;\n"
  "  }\n"
  "//---\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "+ (NSDictionary *) metadataForFileAtPath: (NSString *) inFilePath\n"
  "                   status: (UInt8 *) outStatus\n"
  "                   error: (NSError **) outError {\n"
  "//--- Open file\n"
  "  NSError * error = nil ;\n"
  "  NSFileHandle * f = [NSFileHandle\n"
  "    fileHandleForReadingFromURL:[NSURL fileURLWithPath:inFilePath]\n"
  "    error: & error\n"
  "  ] ;\n"
  "//--- Read format string\n"
  "  if (nil == error) {\n"
  "    NSData * formatStringData = [f readDataOfLength:strlen (kFormatSignature)] ;\n"
  "    if ([formatStringData length] != strlen (kFormatSignature)) {\n"
  "      [self badFormatErrorForFileAtPath:inFilePath error: & error] ;\n"
  "    }else{\n"
  "      UInt8 * bytes = (UInt8 *) [formatStringData bytes] ;\n"
  "      if (memcmp (bytes, kFormatSignature, strlen (kFormatSignature)) != 0) {\n"
  "        [self badFormatErrorForFileAtPath:inFilePath error: & error] ;\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "//--- Read status\n"
  "  if (nil == error) {\n"
  "    const UInt8 status = readByte (f, inFilePath, & error) ;\n"
  "    if (NULL != outStatus) {\n"
  "      * outStatus = status ;\n"
  "    }\n"
  "  }\n"
  "//--- Check byte is 1\n"
  "  if (nil == error) {\n"
  "    const UInt8 byte = readByte (f, inFilePath, & error) ;\n"
  "    if ((nil == error) && (1 != byte)) {\n"
  "      [self badFormatErrorForFileAtPath:inFilePath error: & error] ;\n"
  "    }\n"
  "  }\n"
  "//--- Read metadata dictionary\n"
  "  NSData * dictionaryData = nil ;\n"
  "  if (nil == error) {\n"
  "    dictionaryData = readAutosizedDataAtIndex (f, inFilePath, & error) ;\n"
  "  }\n"
  "  NSDictionary * metadataDictionaryForSaving  = nil ;\n"
  "  if (nil == error) {\n"
  "    metadataDictionaryForSaving = [NSPropertyListSerialization\n"
  "      propertyListWithData:dictionaryData\n"
  "      options:NSPropertyListImmutable\n"
  "      format:NULL\n"
  "      error:nil\n"
  "    ] ;\n"
  "  }\n"
  "//---  \n"
  "  [f closeFile] ;\n"
  "//---\n"
  "  if (NULL != outError) {\n"
  "    * outError = error ;\n"
  "  }\n"
  "//---\n"
  "  return metadataDictionaryForSaving ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "@end\n"
  "\n"
  "\n"
  "*/\n" ;

static const cRegularFileWrapper gWrapperFile_24_objective_5F_c_5F_sources (
  "PMManagedDocument.swift",
  "swift",
  true, // Text file
  53758, // Text length
  gWrapperFileContent_24_objective_5F_c_5F_sources
) ;

//--- File '/PMManagedObject.h'

static const char * gWrapperFileContent_25_objective_5F_c_5F_sources = "//\n"
  "//  PMManagedObject.h\n"
  "//  essai\n"
  "//\n"
  "//  Created by Pierre Molinaro on 28/06/13.\n"
  "//  Copyright (c) 2013 ECN / IRCCyN. All rights reserved.\n"
  "//\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "#import <Foundation/Foundation.h>\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "@class PMObjectManager ;\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "NSString * convertBOOLValueToString (NSNumber * inValue) ;\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//   PMSignatureObserverProtocol                                               *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "@protocol PMSignatureObserverProtocol <NSObject>\n"
  "\n"
  "- (void) triggerSignatureComputing ;\n"
  "\n"
  "@end\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//  PMManagedObject                                                            *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "@interface PMManagedObject : NSObject <PMSignatureObserverProtocol> {\n"
  "  @private PMObjectManager * mEntityManager ;\n"
  "  @private NSUndoManager * mUndoManager ;\n"
  "//--- Signature\n"
  "  @private NSInteger mSignatureCache ;\n"
  "  @private NSMutableSet * mSignatureObserverSet ;\n"
  "  @private BOOL mSignatureHasBeenComputed ;\n"
  "\n"
  "  #ifdef PM_COCOA_DEBUG\n"
  "    @private NSUInteger mExplorerObjectIndex ;\n"
  "    @private NSWindow * mExplorerWindow ;\n"
  "    @private NSMutableDictionary * mAttributeViewDictionary ;\n"
  "    @private NSSet * mToOneRelationshipSet ;\n"
  "    @private NSSet * mToManyRelationshipSet ;\n"
  "    @private NSArray * mAttributeDescriptionArray ; // Of PMAttributeDescription\n"
  "  #endif\n"
  "}\n"
  "\n"
  "- (instancetype) initWithEntityManager: (PMObjectManager *) inEntityManager ;\n"
  "\n"
  "- (PMObjectManager *) entityManager ;\n"
  "\n"
  "- (NSUndoManager *) undoManager ;\n"
  "\n"
  "- (NSArray *) attributeDescriptionArray ;\n"
  "\n"
  "- (BOOL) hasAttributeNamed: (NSString *) inName ;\n"
  "\n"
  "- (NSArray *) toOneRelationshipDescriptionArray ;\n"
  "\n"
  "- (BOOL) hasToOneRelationshipNamed: (NSString *) inName ;\n"
  "\n"
  "- (NSArray *) toManyRelationshipDescriptionArray ;\n"
  "\n"
  "- (BOOL) hasToManyRelationshipNamed: (NSString *) inName ;\n"
  "\n"
  "- (void) buildAttributeDescriptionArray: (NSMutableArray *) ioDescriptionArray ;\n"
  "\n"
  "- (void) buildToOneRelationshipDescriptionArray: (NSMutableArray *) ioDescriptionArray ; // Of PMRelationshipDescription\n"
  "\n"
  "- (void) buildToManyRelationshipDescriptionArray: (NSMutableArray *) ioDescriptionArray ; // Of PMRelationshipDescription\n"
  "\n"
  "- (void) setUpWithDictionary: (NSDictionary *) inDictionary\n"
  "         withManagedEntityArray: (NSArray *) inObjectArray ;\n"
  "\n"
  "- (void) resetBeforeDeletion ;\n"
  "\n"
  "- (void) saveIntoDictionary: (NSMutableDictionary *) ioDictionary ;\n"
  "\n"
  "//--- Signature\n"
  "- (NSInteger) computeSignature ;\n"
  "- (void) addSignatureObserver: (NSObject <PMSignatureObserverProtocol> *) inObserver ;\n"
  "- (void) removeSignatureObserver: (NSObject <PMSignatureObserverProtocol> *) inObserver ;\n"
  "- (void) triggerSignatureComputing ;\n"
  "- (NSInteger) signature ;\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  - (void) showExplorerWindow ;\n"
  "  - (NSUInteger) explorerObjectIndex ;\n"
  "#endif\n"
  "\n"
  "@property (atomic) NSUInteger savingIndex ;\n"
  "@end\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//   Signature routines                                                      *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "NSInteger computeIntegerSignature (const NSInteger inSignature,\n"
  "                                   const NSInteger inValue) ;\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "NSInteger computeNSStringSignature (const NSInteger inSignature,\n"
  "                                    NSString * inValue) ;\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "NSInteger computeToOneEntitySignature (const NSInteger inSignature,\n"
  "                                       PMManagedObject * inToOnePropertyValue) ;\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "NSInteger computeToManyEntitySignature (const NSInteger inSignature,\n"
  "                                        NSArray * inToManyPropertyValue) ;\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n" ;

static const cRegularFileWrapper gWrapperFile_25_objective_5F_c_5F_sources (
  "PMManagedObject.h",
  "h",
  true, // Text file
  4324, // Text length
  gWrapperFileContent_25_objective_5F_c_5F_sources
) ;

//--- File '/PMManagedObject.m'

static const char * gWrapperFileContent_26_objective_5F_c_5F_sources = "//\n"
  "//  PMManagedObject.m\n"
  "//  essai\n"
  "//\n"
  "//  Created by Pierre Molinaro on 28/06/13.\n"
  "//  Copyright (c) 2013 ECN / IRCCyN. All rights reserved.\n"
  "//\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "#import \"easy-bindings-utilities.h\"\n"
  "#import \"PMAllocationDebug.h\"\n"
  "#import \"PMManagedObject.h\"\n"
  "#import \"PMObjectManager.h\"\n"
  "#import \"PMRelationshipDescription.h\"\n"
  "#import \"PMAttributeDescription.h\"\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//  Function used for object explorer                                          *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "NSString * convertBOOLValueToString (NSNumber * inValue) {\n"
  "  return [inValue boolValue] \? @\"YES\" : @\"NO\" ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  static NSUInteger gExplorerObjectIndex ;\n"
  "#endif\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//  Attribute and relationship description caches                              *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "static NSMutableDictionary * gAttributeDescriptionDictionary ;\n"
  "static NSMutableDictionary * gToOneRelationshipDescriptionDictionary ;\n"
  "static NSMutableDictionary * gToManyRelationshipDescriptionDictionary ;\n"
  "static NSUInteger gAllocatedEntityCount = 0 ;\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//  PMManagedObject                                                            *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "@implementation PMManagedObject\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "@synthesize savingIndex ;\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (instancetype) initWithEntityManager: (PMObjectManager *) inEntityManager {\n"
  "  self = [self init] ;\n"
  "  if (self) {\n"
  "    gAllocatedEntityCount ++ ;\n"
  "    macroAssign (mEntityManager, inEntityManager) ;\n"
  "    mUndoManager = inEntityManager.undoManager ;\n"
  "    macroRetain (mUndoManager) ;\n"
  "    macroNoteObjectAllocation ;\n"
  "    #ifdef PM_COCOA_DEBUG\n"
  "      mExplorerObjectIndex = gExplorerObjectIndex ;\n"
  "      gExplorerObjectIndex ++ ;\n"
  "    #endif\n"
  "  }\n"
  "  return self ;\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    Dealloc                                                                 *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) dealloc {\n"
  "  gAllocatedEntityCount -- ;\n"
  "  if (0 == gAllocatedEntityCount) {\n"
  "    macroReleaseSetToNil (gAttributeDescriptionDictionary) ;\n"
  "    macroReleaseSetToNil (gToOneRelationshipDescriptionDictionary) ;\n"
  "    macroReleaseSetToNil (gToManyRelationshipDescriptionDictionary) ;\n"
  "  }\n"
  "  macroReleaseSetToNil (mEntityManager) ;\n"
  "  macroReleaseSetToNil (mUndoManager) ;\n"
  "  macroNoteObjectDeallocation ;\n"
  "  macroSuperDealloc ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//  Getters                                                                    *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  - (NSUInteger) explorerObjectIndex {\n"
  "    return mExplorerObjectIndex ;\n"
  "  }\n"
  "#endif\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (PMObjectManager *) entityManager {\n"
  "  return mEntityManager ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (NSUndoManager *) undoManager {\n"
  "  return mUndoManager ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//  Attributes                                                                 *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (NSArray *) attributeDescriptionArray {\n"
  "  if (nil == gAttributeDescriptionDictionary) {\n"
  "    gAttributeDescriptionDictionary = [NSMutableDictionary new] ;\n"
  "  }\n"
  "  NSArray * result = [gAttributeDescriptionDictionary valueForKey:self.className] ;\n"
  "  if (nil == result) {\n"
  "    NSMutableArray * descriptionArray = [NSMutableArray new] ;\n"
  "    [self buildAttributeDescriptionArray:descriptionArray] ;\n"
  "    macroAutorelease (descriptionArray) ;\n"
  "    result = [descriptionArray sortedArrayUsingSelector:@selector (reverseCompareByAttributeName:)] ;\n"
  "    [gAttributeDescriptionDictionary setValue:result forKey:self.className] ;\n"
  "  }\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (BOOL) hasAttributeNamed: (NSString *) inName {\n"
  "  NSArray * attributeDescriptionArray = self.attributeDescriptionArray ;\n"
  "  BOOL result = NO ;\n"
  "  for (PMAttributeDescription * ad in attributeDescriptionArray) {\n"
  "    if ([inName isEqualToString:ad.attributeName]) {\n"
  "      result = YES ;\n"
  "      break ;\n"
  "    }\n"
  "  }\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) buildAttributeDescriptionArray: (NSMutableArray *) ioDescriptionArray {\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//  To One Relationships                                                       *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (NSArray *) toOneRelationshipDescriptionArray {\n"
  "  if (nil == gToOneRelationshipDescriptionDictionary) {\n"
  "    gToOneRelationshipDescriptionDictionary = [NSMutableDictionary new] ;\n"
  "  }\n"
  "  NSArray * result = [gToOneRelationshipDescriptionDictionary valueForKey:self.className] ;\n"
  "  if (nil == result) {\n"
  "    NSMutableArray * descriptionArray = [NSMutableArray new] ;\n"
  "    [self buildToOneRelationshipDescriptionArray:descriptionArray] ;\n"
  "    macroAutorelease (descriptionArray) ;\n"
  "    result = [descriptionArray sortedArrayUsingSelector:@selector (compareByRelationshipName:)] ;\n"
  "    [gToOneRelationshipDescriptionDictionary setValue:result forKey:self.className] ;\n"
  "  }\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (BOOL) hasToOneRelationshipNamed: (NSString *) inName {\n"
  "  NSArray * descriptionArray = self.toOneRelationshipDescriptionArray ;\n"
  "  BOOL result = NO ;\n"
  "  for (PMRelationshipDescription * ad in descriptionArray) {\n"
  "    if ([inName isEqualToString:ad.relationshipName]) {\n"
  "      result = YES ;\n"
  "      break ;\n"
  "    }\n"
  "  }\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) buildToOneRelationshipDescriptionArray: (NSMutableArray *) ioDescriptionArray {\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//  To Many Relationships                                                      *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (BOOL) hasToManyRelationshipNamed: (NSString *) inName {\n"
  "  NSArray * descriptionArray = self.toManyRelationshipDescriptionArray ;\n"
  "  BOOL result = NO ;\n"
  "  for (PMRelationshipDescription * ad in descriptionArray) {\n"
  "    if ([inName isEqualToString:ad.relationshipName]) {\n"
  "      result = YES ;\n"
  "      break ;\n"
  "    }\n"
  "  }\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) buildToManyRelationshipDescriptionArray: (NSMutableArray *) ioDescriptionArray {\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (NSArray *) toManyRelationshipDescriptionArray {\n"
  "  if (nil == gToManyRelationshipDescriptionDictionary) {\n"
  "    gToManyRelationshipDescriptionDictionary = [NSMutableDictionary new] ;\n"
  "  }\n"
  "  NSArray * result = [gToManyRelationshipDescriptionDictionary valueForKey:self.className] ;\n"
  "  if (nil == result) {\n"
  "    NSMutableArray * descriptionArray = [NSMutableArray new] ;\n"
  "    [self buildToManyRelationshipDescriptionArray:descriptionArray] ;\n"
  "    macroAutorelease (descriptionArray) ;\n"
  "    result = [descriptionArray sortedArrayUsingSelector:@selector (compareByRelationshipName:)] ;\n"
  "    [gToManyRelationshipDescriptionDictionary setValue:result forKey:self.className] ;\n"
  "  }\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) setUpWithDictionary: (NSDictionary *) inDictionary\n"
  "         withManagedEntityArray: (NSArray *) inObjectArray {\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) saveIntoDictionary: (NSMutableDictionary *) ioDictionary {\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) setEntityManager: (PMObjectManager *) inManager {\n"
  "  [mUndoManager\n"
  "    registerUndoWithTarget:self\n"
  "    selector: @selector (setEntityManager:)\n"
  "    object:mEntityManager\n"
  "  ] ;\n"
  "  macroAssign (mEntityManager, inManager) ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) resetBeforeDeletion {\n"
  "  [self setEntityManager:nil] ;\n"
  "  #ifdef PM_COCOA_DEBUG\n"
  "    [self clearContextExplorer] ;\n"
  "  #endif\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//  S I G N A T U R E                                                        *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#pragma mark Object Explorer\n"
  "\n"
  "\n"
  "- (void) addSignatureObserver: (NSObject <PMSignatureObserverProtocol> *) inObserver {\n"
  "  if (nil == mSignatureObserverSet) {\n"
  "    mSignatureObserverSet = [NSMutableSet new] ;\n"
  "  }\n"
  "  [mSignatureObserverSet addObject:inObserver] ;\n"
  "  [inObserver triggerSignatureComputing] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) removeSignatureObserver: (NSObject <PMSignatureObserverProtocol> *) inObserver {\n"
  "  [inObserver triggerSignatureComputing] ;\n"
  "  [mSignatureObserverSet removeObject:inObserver] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (void) triggerSignatureComputing {\n"
  "  if (mSignatureHasBeenComputed) {\n"
  "    mSignatureHasBeenComputed = NO ;\n"
  "    [mSignatureObserverSet makeObjectsPerformSelector:@selector (triggerSignatureComputing)] ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (NSInteger) signature {\n"
  "  if (! mSignatureHasBeenComputed) {\n"
  "    mSignatureHasBeenComputed = YES ;\n"
  "    mSignatureCache = self.computeSignature ;\n"
  "  }\n"
  "  return mSignatureCache ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (NSInteger) computeSignature {\n"
  "  return 0 ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//   Signature routines                                                      *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "NSInteger computeIntegerSignature (const NSInteger inSignature,\n"
  "                                   const NSInteger inValue) {\n"
  "  NSInteger result = inSignature ;\n"
  "  NSInteger negative = inSignature < 0 ;\n"
  "  result <<= 1 ;\n"
  "  result |= negative ;\n"
  "  result ^= inValue ;\n"
  "  return result ;  \n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "NSInteger computeNSStringSignature (const NSInteger inSignature,\n"
  "                                    NSString * inValue) {\n"
  "  NSInteger result = inSignature ;\n"
  "  for (NSUInteger i=0 ; i<inValue.length ; i++) {\n"
  "    result = computeIntegerSignature (result, [inValue characterAtIndex:i]) ;\n"
  "  }\n"
  "  return result ;  \n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "NSInteger computeToOneEntitySignature (const NSInteger inSignature,\n"
  "                                       PMManagedObject * inToOnePropertyValue) {\n"
  "  return computeIntegerSignature (inSignature, inToOnePropertyValue.signature) ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "NSInteger computeToManyEntitySignature (const NSInteger inSignature,\n"
  "                                        NSArray * inToManyPropertyValue) {\n"
  "  NSInteger result = inSignature ;\n"
  "  for (PMManagedObject * object in inToManyPropertyValue) {\n"
  "    result = computeIntegerSignature (result, object.signature) ;\n"
  "  }\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//  O B J E C T    E X P L O R E R                                           *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#pragma mark Object Explorer\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  - (void) updateAttributeDisplayForDescription: (PMAttributeDescription *) inDescription {\n"
  "    id value = [self valueForKey:inDescription.attributeName] ;\n"
  "    NSString * stringValue = nil ;\n"
  "    if (NULL == inDescription.conversionFunction) {\n"
  "      stringValue = [value description] ;\n"
  "    }else{\n"
  "      stringValue = inDescription.conversionFunction (value) ;\n"
  "    }\n"
  "    NSTextField * tf = [mAttributeViewDictionary objectForKey:inDescription.attributeName] ;\n"
  "    [tf setStringValue:(stringValue == nil) \? @\"\" : stringValue] ;\n"
  "    [tf setToolTip:(stringValue == nil) \? @\"\" : stringValue] ;\n"
  "  }\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  - (void) updateEntityDisplayForKey: (NSString *) inKey {\n"
  "    PMManagedObject * object = [self valueForKey:inKey] ;\n"
  "    NSString * stringValue = @\"nil\" ;\n"
  "    if (nil != object) {\n"
  "      const NSUInteger objectIndex = object.explorerObjectIndex ;\n"
  "      stringValue = [NSString stringWithFormat:@\"#%ld (%@) %p\", objectIndex, object.className, object] ;\n"
  "    }\n"
  "    NSButton * bt = [mAttributeViewDictionary objectForKey:inKey] ;\n"
  "    [bt setEnabled:object != nil] ;\n"
  "    [bt setTitle:stringValue] ;\n"
  "    [bt setToolTip:stringValue] ;\n"
  "    [bt setTarget:object] ;\n"
  "    [bt setAction:@selector (showObjectWindowFromSenderTagAction:)] ;\n"
  "  }\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  - (void) updateEntityArrayDisplayForKey: (NSString *) inKey {\n"
  "    NSArray * objectArray = [self valueForKey:inKey] ;\n"
  "    NSString * title = @\"No Object\" ;\n"
  "    if (objectArray.count == 1) {\n"
  "      title = @\"1 Object\" ;\n"
  "    }else if (objectArray.count > 1) {\n"
  "      title = [NSString stringWithFormat:@\"%lu objects\", objectArray.count] ;\n"
  "    }\n"
  "    NSPopUpButton * bt = [mAttributeViewDictionary objectForKey:inKey] ;\n"
  "    [bt removeAllItems] ;\n"
  "    [bt addItemWithTitle:title] ;\n"
  "    [bt setEnabled:objectArray.count > 0] ;\n"
  "    for (PMManagedObject * object in objectArray) {\n"
  "      const NSUInteger objectIndex = object.explorerObjectIndex ;\n"
  "      NSString * stringValue = [NSString stringWithFormat:@\"#%ld (%@) %p\", objectIndex, object.className, object] ;\n"
  "      [bt addItemWithTitle:stringValue] ;\n"
  "      NSMenuItem * item = [bt lastItem] ;\n"
  "      [item setTarget:object] ;\n"
  "      [item setAction:@selector (showObjectWindowFromSenderTagAction:)] ;\n"
  "    }\n"
  "  }\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  static NSRect secondColumn (NSRect inRect) {\n"
  "    NSRect r = inRect ;\n"
  "    r.origin.x += inRect.size.width + 2.0 ;\n"
  "    return r ;\n"
  "  }\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "- (void) createAndPopulateObjectExplorerWindow {\n"
  "//-------------------------------------------------- Create Window\n"
  "  const NSRect r = {{20.0, 20.0}, {10.0, 10.0}} ;\n"
  "  mExplorerWindow = [[NSWindow alloc]\n"
  "    initWithContentRect:r\n"
  "    styleMask:NSTitledWindowMask | NSClosableWindowMask\n"
  "    backing:NSBackingStoreBuffered\n"
  "    defer:YES\n"
  "    screen:nil\n"
  "  ] ;\n"
  "//-------------------------------------------------- Adding properties\n"
  "  mAttributeViewDictionary = [NSMutableDictionary new] ;\n"
  "  NSRect nameRect = {{0.0, 0.0}, {300.0, 22.0}} ;\n"
  "  NSFont * font = [NSFont boldSystemFontOfSize:[NSFont smallSystemFontSize]] ;\n"
  "  NSView * view = [[NSView alloc] initWithFrame:nameRect] ;\n"
  "//-------------------------------------------------- Adding To many relation ships\n"
  "  NSArray * toManyRelationshipNameArray = [self toManyRelationshipDescriptionArray] ;\n"
  "  NSMutableArray * relationshipNameArray = [NSMutableArray new] ;\n"
  "  for (PMRelationshipDescription * description in toManyRelationshipNameArray) {\n"
  "    [relationshipNameArray addObject:description.relationshipName] ;\n"
  "    NSTextField * tf = [[NSTextField alloc] initWithFrame:nameRect] ;\n"
  "    [tf setEnabled:NO] ;\n"
  "    [tf setStringValue:description.relationshipName] ;\n"
  "    [tf setFont:font] ;\n"
  "    [view addSubview:tf] ;\n"
  "    macroReleaseSetToNil (tf) ;\n"
  "    NSPopUpButton * bt = [[NSPopUpButton alloc] initWithFrame:secondColumn (nameRect) pullsDown:YES] ;\n"
  "    [bt setFont:font] ;\n"
  "    [view addSubview:bt] ;\n"
  "    [mAttributeViewDictionary setObject:bt forKey:description.relationshipName] ;\n"
  "    macroReleaseSetToNil (bt) ;\n"
  "    [self updateEntityArrayDisplayForKey:description.relationshipName] ;\n"
  "    nameRect.origin.y += nameRect.size.height ;\n"
  "  }\n"
  "  mToManyRelationshipSet = [NSSet setWithArray:relationshipNameArray] ;\n"
  "  macroReleaseSetToNil (relationshipNameArray) ;\n"
  "  macroRetain (mToManyRelationshipSet) ;\n"
  "//-------------------------------------------------- Adding To one relation ships\n"
  "  NSArray * toOneRelationshipNameArray = [self toOneRelationshipDescriptionArray] ;\n"
  "  relationshipNameArray = [NSMutableArray new] ;\n"
  "  for (PMRelationshipDescription * description in toOneRelationshipNameArray) {\n"
  "    [relationshipNameArray addObject:description.relationshipName] ;\n"
  "    NSTextField * tf = [[NSTextField alloc] initWithFrame:nameRect] ;\n"
  "    [tf setEnabled:NO] ;\n"
  "    [tf setStringValue:description.relationshipName] ;\n"
  "    [tf setFont:font] ;\n"
  "    [view addSubview:tf] ;\n"
  "    macroReleaseSetToNil (tf) ;\n"
  "    NSButton * bt = [[NSButton alloc] initWithFrame:secondColumn (nameRect)] ;\n"
  "    [bt setFont:font] ;\n"
  "    [view addSubview:bt] ;\n"
  "    [mAttributeViewDictionary setObject:bt forKey:description.relationshipName] ;\n"
  "    macroReleaseSetToNil (bt) ;\n"
  "    [self updateEntityDisplayForKey:description.relationshipName] ;\n"
  "    nameRect.origin.y += nameRect.size.height ;\n"
  "  }\n"
  "  mToOneRelationshipSet = [NSSet setWithArray:relationshipNameArray] ;\n"
  "  macroReleaseSetToNil (relationshipNameArray) ;\n"
  "  macroRetain (mToOneRelationshipSet) ;\n"
  "//-------------------------------------------------- Adding attributes\n"
  "  NSArray * attributeDescriptionArray = [self attributeDescriptionArray] ;\n"
  "  for (PMAttributeDescription * description in attributeDescriptionArray) {\n"
  "    NSTextField * tf = [[NSTextField alloc] initWithFrame:nameRect] ;\n"
  "    [tf setEnabled:NO] ;\n"
  "    [tf setStringValue:description.attributeName] ;\n"
  "    [tf setFont:font] ;\n"
  "    [view addSubview:tf] ;\n"
  "    macroReleaseSetToNil (tf) ;\n"
  "    NSTextField * tff = [[NSTextField alloc] initWithFrame:secondColumn (nameRect)] ;\n"
  "    [tff setEnabled:NO] ;\n"
  "    [tff setFont:font] ;\n"
  "    [view addSubview:tff] ;\n"
  "    [mAttributeViewDictionary setObject:tff forKey:description.attributeName] ;\n"
  "    macroReleaseSetToNil (tff) ;\n"
  "    [self updateAttributeDisplayForDescription:description] ;\n"
  "    nameRect.origin.y += nameRect.size.height ;\n"
  "  }\n"
  "  macroAssign (mAttributeDescriptionArray, attributeDescriptionArray) ;\n"
  "//-------------------------------------------------- Finish Window construction\n"
  "//--- Resize View\n"
  "  const NSRect rr = secondColumn (nameRect) ;\n"
  "  [view setFrame:NSMakeRect (0.0, 0.0, NSMaxX (rr), NSMaxY (rr))] ;\n"
  "//--- Set content size\n"
  "  [mExplorerWindow setContentSize:NSMakeSize (NSMaxX (nameRect) * 2.0 + 4.0 + 16.0, fmin (600.0, NSMaxY (nameRect)))] ;\n"
  "//--- Set close button as 'remove window' button\n"
  "  NSButton * closeButton = [mExplorerWindow standardWindowButton:NSWindowCloseButton] ;\n"
  "  [closeButton setTarget:self] ;\n"
  "  [closeButton setAction:@selector (deleteWindowAction:)] ;\n"
  "//--- Set window title\n"
  "  NSString * windowTitle = [NSString stringWithFormat:@\"#%ld (%@) at 0x%llX\", mExplorerObjectIndex, self.className, (UInt64) self] ;\n"
  "  [mExplorerWindow setTitle:windowTitle] ;\n"
  "//--- Add Scroll view\n"
  "  const NSRect frame = {{0.0, 0.0}, {NSMaxX (nameRect) * 2.0 + 4.0, NSMaxY (nameRect)}} ;\n"
  "  NSScrollView * sw = [[NSScrollView alloc] initWithFrame:frame] ;\n"
  "  [sw setHasVerticalScroller:YES] ;\n"
  "  [sw setDocumentView:view] ;\n"
  "  macroReleaseSetToNil (view) ;\n"
  "  [mExplorerWindow setContentView:sw] ;\n"
  "  macroReleaseSetToNil (sw) ;\n"
  "}\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  - (void) deleteWindowAction: (id) inSender {\n"
  "    [self clearContextExplorer] ;\n"
  "  }\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  - (void) showExplorerWindow {\n"
  "    if (mExplorerWindow == nil) {\n"
  "      [self createAndPopulateObjectExplorerWindow] ;\n"
  "    }\n"
  "    [mExplorerWindow makeKeyAndOrderFront:nil] ;\n"
  "  }\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  - (void) showObjectWindowFromSenderTagAction: (id) inSender {\n"
  "    [self showExplorerWindow] ;\n"
  "  }\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#pragma mark Clear Context Explorer\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  - (void) clearContextExplorer {\n"
  "    macroReleaseSetToNil (mAttributeViewDictionary) ;\n"
  "    macroReleaseSetToNil (mToOneRelationshipSet) ;\n"
  "    macroReleaseSetToNil (mToManyRelationshipSet) ;\n"
  "    macroReleaseSetToNil (mAttributeDescriptionArray) ;\n"
  "\n"
  "    NSButton * closeButton = [mExplorerWindow standardWindowButton:NSWindowCloseButton] ;\n"
  "    [closeButton setTarget:nil] ;\n"
  "\n"
  "    [mExplorerWindow orderOut:nil] ;\n"
  "    macroReleaseSetToNil (mExplorerWindow) ;\n"
  "  }\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#pragma mark Attribute did change\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  - (void) didChangeValueForKey:(NSString *) inKey {\n"
  "    [super didChangeValueForKey:inKey] ;\n"
  "    if ([mToManyRelationshipSet containsObject:inKey]) {\n"
  "      [self updateEntityArrayDisplayForKey:inKey] ;\n"
  "    }else if ([mToOneRelationshipSet containsObject:inKey]) {\n"
  "      [self updateEntityDisplayForKey:inKey] ;\n"
  "    }else{\n"
  "      for (PMAttributeDescription * description in mAttributeDescriptionArray) {\n"
  "        if ([inKey isEqualToString:description.attributeName]) {\n"
  "          [self updateAttributeDisplayForDescription:description] ;\n"
  "          break ;\n"
  "        }\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  - (void) didChange: (NSKeyValueChange) inChange\n"
  "           valuesAtIndexes:(NSIndexSet *) inIndexes\n"
  "           forKey:(NSString *) inKey {\n"
  "    [super\n"
  "      didChange:inChange\n"
  "      valuesAtIndexes:inIndexes\n"
  "      forKey:inKey\n"
  "    ] ;\n"
  "    [self updateEntityArrayDisplayForKey:inKey] ;\n"
  "  }\n"
  "#endif\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "@end\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "\n" ;

static const cRegularFileWrapper gWrapperFile_26_objective_5F_c_5F_sources (
  "PMManagedObject.m",
  "m",
  true, // Text file
  23081, // Text length
  gWrapperFileContent_26_objective_5F_c_5F_sources
) ;

//--- File '/PMManagedObject.swift'

static const char * gWrapperFileContent_27_objective_5F_c_5F_sources = "//\n"
  "//  PMManagedObject.swift\n"
  "//  essai\n"
  "//\n"
  "//  Created by Pierre Molinaro on 28/06/13.\n"
  "//  Copyright (c) 2013 ECN / IRCCyN. All rights reserved.\n"
  "//\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "import Cocoa\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//   PMSignatureObserverProtocol                                               *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "protocol PMSignatureObserverProtocol {\n"
  "  func triggerSignatureComputing ()\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "var gExplorerObjectIndex = 0\n"
  "var gAllocatedEntityCount = 0\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//  PMManagedObject                                                            *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "class PMManagedObject : NSObject, PMSignatureObserverProtocol {\n"
  "  var savingIndex = 0\n"
  "  weak var mEntityManager : PMObjectManager\?\n"
  "//--- Signature\n"
  "  var mSignatureCache = 0\n"
  "  var mSignatureObserverSet = NSMutableSet () // : Array<PMSignatureObserverProtocol> = []\n"
  "  var mSignatureHasBeenComputed = false\n"
  "\n"
  " // #ifdef PM_COCOA_DEBUG\n"
  "    var mExplorerObjectIndex : Int\n"
  "    var mExplorerWindow : NSWindow\?\n"
  "//  #endif\n"
  "\n"
  "  //-----------------------------------------------------------------------------*\n"
  "  //  init                                                                       *\n"
  "  //-----------------------------------------------------------------------------*\n"
  "\n"
  "  init (entityManager : PMObjectManager) {\n"
  "    mEntityManager = entityManager\n"
  "    gAllocatedEntityCount = gAllocatedEntityCount + 1\n"
  " //   #ifdef PM_COCOA_DEBUG\n"
  "      mExplorerObjectIndex = gExplorerObjectIndex\n"
  "      gExplorerObjectIndex = gExplorerObjectIndex + 1\n"
  " //   #endif\n"
  "    super.init ()\n"
  "    noteObjectAllocation (self)\n"
  "  }\n"
  "\n"
  "  //-----------------------------------------------------------------------------*\n"
  "  //  deinit                                                                     *\n"
  "  //-----------------------------------------------------------------------------*\n"
  "\n"
  "  deinit {\n"
  "    noteObjectDeallocation (self)\n"
  "  }\n"
  "  \n"
  "  //-----------------------------------------------------------------------------*\n"
  "  //  setup and save                                                             *\n"
  "  //-----------------------------------------------------------------------------*\n"
  "\n"
  "  func setUpWithDictionary (inDictionary : NSDictionary,\n"
  "                            managedObjectArray : PMManagedObject []) {\n"
  "  }\n"
  "\n"
  "  //-----------------------------------------------------------------------------*\n"
  "\n"
  "  func saveIntoDictionary (ioDictionary : NSMutableDictionary) {\n"
  "  }\n"
  "\n"
  "  //-----------------------------------------------------------------------------*\n"
  "  //  Signature                                                                  *\n"
  "  //-----------------------------------------------------------------------------*\n"
  "\n"
  "  func addSignatureObserver (inObserver : PMSignatureObserverProtocol) {\n"
  "//    mSignatureObserverSet.addObject (inObserver)\n"
  "    inObserver.triggerSignatureComputing ()\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  func removeSignatureObserver (inObserver : PMSignatureObserverProtocol) {\n"
  "    inObserver.triggerSignatureComputing ()\n"
  "//    mSignatureObserverSet.removeObject (inObserver)\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  func triggerSignatureComputing () {\n"
  "    if mSignatureHasBeenComputed {\n"
  "      mSignatureHasBeenComputed = false ;\n"
  "      mSignatureObserverSet.makeObjectsPerformSelector (\"triggerSignatureComputing\")\n"
  "    }\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  func signature () -> Int {\n"
  "    if !mSignatureHasBeenComputed {\n"
  "      mSignatureHasBeenComputed = true\n"
  "      mSignatureCache = computeSignature ()\n"
  "    }\n"
  "    return mSignatureCache ;\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  func computeSignature () -> Int {\n"
  "    return 0\n"
  "  }\n"
  "\n"
  "  //-----------------------------------------------------------------------------*\n"
  "  //  Getters                                                                    *\n"
  "  //-----------------------------------------------------------------------------*\n"
  "\n"
  "  func entityManager () -> PMObjectManager {\n"
  "    return mEntityManager!\n"
  "  }\n"
  "\n"
  "  func undoManager () -> PMUndoManager {\n"
  "    return mEntityManager!.mUndoManager\n"
  "  }\n"
  "\n"
  "  func explorerObjectIndex () -> Int {\n"
  "    return mExplorerObjectIndex\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //   showExplorerWindow                                                      *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  func showExplorerWindow () {\n"
  "    if mExplorerWindow == nil {\n"
  "      createAndPopulateObjectExplorerWindow ()\n"
  "    }\n"
  "    mExplorerWindow\?.makeKeyAndOrderFront (nil)\n"
  "  }\n"
  "\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //   accessibleObjects                                                       *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  func accessibleObjects (inout objects : PMManagedObject []) {\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //   secondColumn                                                            *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  func secondColumn (inRect : NSRect) -> NSRect {\n"
  "    var r = inRect\n"
  "    r.origin.x += inRect.size.width + 2.0 ;\n"
  "    return r\n"
  "  }\n"
  "\n"
  "  //-----------------------------------------------------------------------------*\n"
  "  //    populateExplorerWindow                                                   *\n"
  "  //-----------------------------------------------------------------------------*\n"
  "\n"
  "  func populateExplorerWindowWithRect (inout ioRect : NSRect, view : NSView) {\n"
  "  }\n"
  "\n"
  "  //-----------------------------------------------------------------------------*\n"
  "  //    createEntryForAttributeNamed                                             *\n"
  "  //-----------------------------------------------------------------------------*\n"
  "\n"
  "  func createEntryForAttributeNamed (attributeName : String,\n"
  "                                     inout ioRect : NSRect,\n"
  "                                     view : NSView) -> NSTextField {\n"
  "    let font = NSFont.boldSystemFontOfSize (NSFont.smallSystemFontSize ())\n"
  "    var tf = NSTextField (frame:ioRect)\n"
  "    tf.setEnabled (false)\n"
  "    tf.setStringValue (attributeName)\n"
  "    tf.setFont (font)\n"
  "    view.addSubview (tf)\n"
  "    var tff = NSTextField (frame:secondColumn (ioRect))\n"
  "    tff.setEnabled (false)\n"
  "    tff.setFont (font)\n"
  "    view.addSubview (tff)\n"
  "    ioRect.origin.y += ioRect.size.height\n"
  "    return tff\n"
  "  }\n"
  "\n"
  "  //-----------------------------------------------------------------------------*\n"
  "  //    createEntryForToOneRelationshipNamed                                     *\n"
  "  //-----------------------------------------------------------------------------*\n"
  "\n"
  "  func createEntryForToOneRelationshipNamed (relationshipName : String,\n"
  "                                             inout ioRect : NSRect,\n"
  "                                             view : NSView) -> NSButton {\n"
  "    let font = NSFont.boldSystemFontOfSize (NSFont.smallSystemFontSize ())\n"
  "    var tf = NSTextField (frame:ioRect)\n"
  "    tf.setEnabled (false)\n"
  "    tf.setStringValue (relationshipName)\n"
  "    tf.setFont (font)\n"
  "    view.addSubview (tf)\n"
  "    var bt = NSButton (frame:secondColumn (ioRect))\n"
  "    bt.setFont (font)\n"
  "    view.addSubview (bt)\n"
  "    ioRect.origin.y += ioRect.size.height\n"
  "    return bt\n"
  "  }\n"
  "\n"
  "  //-----------------------------------------------------------------------------*\n"
  "  //    createEntryForToManyRelationshipNamed                                    *\n"
  "  //-----------------------------------------------------------------------------*\n"
  "\n"
  "  func createEntryForToManyRelationshipNamed (relationshipName : String,\n"
  "                                              inout ioRect : NSRect,\n"
  "                                              view : NSView) -> NSPopUpButton {\n"
  "    let font = NSFont.boldSystemFontOfSize (NSFont.smallSystemFontSize ())\n"
  "    var tf = NSTextField (frame:ioRect)\n"
  "    tf.setEnabled (false)\n"
  "    tf.setStringValue (relationshipName)\n"
  "    tf.setFont (font)\n"
  "    view.addSubview (tf)\n"
  "    var bt = NSPopUpButton (frame:secondColumn (ioRect), pullsDown:true)\n"
  "    bt.setFont (font)\n"
  "    view.addSubview (bt)\n"
  "    ioRect.origin.y += ioRect.size.height ;\n"
  "    return bt\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //   createAndPopulateObjectExplorerWindow                                   *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  func createAndPopulateObjectExplorerWindow () {\n"
  "  //-------------------------------------------------- Create Window\n"
  "    let r = NSRect (x:20.0, y:20.0, width:10.0, height:10.0)\n"
  "    mExplorerWindow = NSWindow (\n"
  "      contentRect:r,\n"
  "      styleMask:NSTitledWindowMask | NSClosableWindowMask,\n"
  "      backing:NSBackingStoreBuffered,\n"
  "      defer:true,\n"
  "      screen:nil\n"
  "    )\n"
  "  //-------------------------------------------------- Adding properties\n"
  "    var nameRect = NSRect (x:0.0, y:0.0, width:300.0, height:22.0)\n"
  "    let font = NSFont.boldSystemFontOfSize (NSFont.smallSystemFontSize ())\n"
  "    var view = NSView (frame:nameRect)\n"
  "    populateExplorerWindowWithRect (&nameRect, view:view)\n"
  "  //-------------------------------------------------- Finish Window construction\n"
  "  //--- Resize View\n"
  "    let rr = secondColumn (nameRect)\n"
  "    view.setFrame (NSRect (x:0.0, y:0.0, width:NSMaxX (rr), height:NSMaxY (rr)))\n"
  "  //--- Set content size\n"
  "    mExplorerWindow\?.setContentSize (NSSize (width:NSMaxX (nameRect) * 2.0 + 4.0 + 16.0, height:fmin (600.0, NSMaxY (nameRect))))\n"
  "  //--- Set close button as 'remove window' button\n"
  "    var closeButton = mExplorerWindow\?.standardWindowButton (NSWindowCloseButton)\n"
  "    closeButton\?.setTarget (self)\n"
  "    closeButton\?.setAction (\"deleteWindowAction:\")\n"
  "  //--- Set window title\n"
  "    let windowTitle = NSString (format:\"#%ld (%@) at %p\", mExplorerObjectIndex, className (), self)\n"
  "    mExplorerWindow\?.setTitle (windowTitle)\n"
  "  //--- Add Scroll view\n"
  "    let frame = NSRect (x:0.0, y:0.0, width:NSMaxX (nameRect) * 2.0 + 4.0, height:NSMaxY (nameRect))\n"
  "    var sw = NSScrollView (frame:frame)\n"
  "    sw.setHasVerticalScroller (true)\n"
  "    sw.setDocumentView (view)\n"
  "    mExplorerWindow\?.setContentView (sw)\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //   updateManagedObjectToManyRelationshipDisplayForKey                      *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  func updateManagedObjectToManyRelationshipDisplayForKey (inKey : NSString, popUpButton : NSPopUpButton) {\n"
  "    var objectArray : NSArray = valueForKey (inKey) as NSArray\n"
  "    var title = \"No Object\" ;\n"
  "    if objectArray.count () == 1 {\n"
  "      title = \"1 Object\" ;\n"
  "    }else if objectArray.count () > 1 {\n"
  "      title = NSString (format:\"%lu objects\", objectArray.count ())\n"
  "    }\n"
  "    popUpButton.removeAllItems ()\n"
  "    popUpButton.addItemWithTitle (title)\n"
  "    popUpButton.setEnabled (objectArray.count () > 0)\n"
  "    for obj : AnyObject in objectArray {\n"
  "      let object = obj as PMManagedObject\n"
  "      let objectIndex = object.explorerObjectIndex ()\n"
  "      let stringValue = NSString (format:\"#%d (%@) %p\", objectIndex, object.className (), object)\n"
  "      popUpButton.addItemWithTitle (stringValue)\n"
  "      var item = popUpButton.lastItem ()\n"
  "      item.setTarget (object)\n"
  "      item.setAction (\"showObjectWindowFromExplorerButton:\")\n"
  "    }\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //   updateManagedObjectToOneRelationshipDisplayForKey                       *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  func updateManagedObjectToOneRelationshipDisplayForKey (inKey : NSString, button : NSButton) {\n"
  "    var object = valueForKey (inKey) as PMManagedObject\n"
  "    var stringValue = \"nil\"\n"
  "    if nil != object {\n"
  "      let objectIndex = object.explorerObjectIndex ()\n"
  "      stringValue = NSString (format:\"#%d (%@) %p\", objectIndex, object.className (), object)\n"
  "    }\n"
  "    button.setEnabled (object != nil)\n"
  "    button.setTitle (stringValue)\n"
  "    button.setToolTip (stringValue)\n"
  "    button.setTarget (object)\n"
  "    button.setAction (\"showObjectWindowFromExplorerButton:\")\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //   showObjectWindowFromExplorerButton                                      *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  func showObjectWindowFromExplorerButton (AnyObject!) {\n"
  "    showExplorerWindow ()\n"
  "  }\n"
  "  \n"
  "  //---------------------------------------------------------------------------*\n"
  "  //   deleteWindowAction                                                      *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  func deleteWindowAction (AnyObject) {\n"
  "    clearObjectExplorer ()\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //   clearObjectExplorer                                                    *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  func clearObjectExplorer () {\n"
  "    var closeButton = mExplorerWindow\?.standardWindowButton (NSWindowCloseButton)\n"
  "    closeButton\?.setTarget (nil)\n"
  "    mExplorerWindow\?.orderOut (nil)\n"
  "    mExplorerWindow = nil\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //   storeEntityArrayInDictionary                                            *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  func storeEntityArrayInDictionary (inEntityArray : NSArray,\n"
  "                                     inRelationshipName: String,\n"
  "                                     ioDictionary : NSMutableDictionary) {\n"
  "\n"
  "    if inEntityArray.count () > 0 {\n"
  "      var indexArray = NSMutableArray ()\n"
  "      for object : AnyObject in inEntityArray {\n"
  "        let managedObject = object as PMManagedObject\n"
  "        indexArray.addObject (NSNumber (unsignedInteger:object.savingIndex))\n"
  "      }\n"
  "      ioDictionary.setObject (indexArray, forKey:inRelationshipName)\n"
  "    }\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //   storeEntityInDictionary                                                 *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  func storeEntityInDictionary (inObject : PMManagedObject\?,\n"
  "                                inRelationshipName: String,\n"
  "                                ioDictionary : NSMutableDictionary) {\n"
  "    if nil != inObject {\n"
  "      ioDictionary.setObject (NSNumber (unsignedInteger:inObject!.savingIndex), forKey:inRelationshipName)\n"
  "    }\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //   readEntityFromDictionary                                                *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  func readEntityFromDictionary (inRelationshipName: String,\n"
  "                                 inDictionary : NSDictionary,\n"
  "                                 managedObjectArray : PMManagedObject []) -> PMManagedObject\? {\n"
  "  let value : NSNumber\? = inDictionary.valueForKey (inRelationshipName) as\? NSNumber\n"
  "  var result : PMManagedObject\? = nil\n"
  "  if nil != value {\n"
  "    result = managedObjectArray [value!.unsignedIntegerValue ()]\n"
  "  }\n"
  "  return result\n"
  "}\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //   readEntityArrayFromDictionary                                           *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  func readEntityArrayFromDictionary (inRelationshipName: String,\n"
  "                                     inDictionary : NSDictionary,\n"
  "                                     managedObjectArray : PMManagedObject []) -> NSMutableArray {\n"
  "  let indexArray : NSArray\? = inDictionary.valueForKey (inRelationshipName) as\? NSArray\n"
  "  var result = NSMutableArray ()\n"
  "  if nil != indexArray {\n"
  "    for object : AnyObject in indexArray! {\n"
  "      let number = object as NSNumber\n"
  "      let managedObject = managedObjectArray [number.unsignedIntegerValue ()]\n"
  "      result.addObject (managedObject)\n"
  "    }\n"
  "  }\n"
  "  return result\n"
  "}\n"
  "\n"
  "\n"
  "}\n"
  "\n"
  "/*\n"
  "//---------------------------------------------------------------------------*\n"
  "//   Signature routines                                                      *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "NSInteger computeIntegerSignature (const NSInteger inSignature,\n"
  "                                   const NSInteger inValue) ;\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "NSInteger computeNSStringSignature (const NSInteger inSignature,\n"
  "                                    NSString * inValue) ;\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "NSInteger computeToOneEntitySignature (const NSInteger inSignature,\n"
  "                                       PMManagedObject * inToOnePropertyValue) ;\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "NSInteger computeToManyEntitySignature (const NSInteger inSignature,\n"
  "                                        NSArray * inToManyPropertyValue) ;\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "*/\n"
  "\n"
  "\n"
  "\n"
  "\n"
  "\n"
  "/*\n"
  "#import \"easy-bindings-utilities.h\"\n"
  "#import \"PMAllocationDebug.h\"\n"
  "#import \"PMManagedObject.h\"\n"
  "#import \"PMObjectManager.h\"\n"
  "#import \"PMRelationshipDescription.h\"\n"
  "#import \"PMAttributeDescription.h\"\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//  Function used for object explorer                                          *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "NSString * convertBOOLValueToString (NSNumber * inValue) {\n"
  "  return [inValue boolValue] \? @\"YES\" : @\"NO\" ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  static NSUInteger gExplorerObjectIndex ;\n"
  "#endif\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//  Attribute and relationship description caches                              *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "static NSMutableDictionary * gAttributeDescriptionDictionary ;\n"
  "static NSMutableDictionary * gToOneRelationshipDescriptionDictionary ;\n"
  "static NSMutableDictionary * gToManyRelationshipDescriptionDictionary ;\n"
  "static NSUInteger gAllocatedEntityCount = 0 ;\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    Dealloc                                                                 *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) dealloc {\n"
  "  gAllocatedEntityCount -- ;\n"
  "  if (0 == gAllocatedEntityCount) {\n"
  "    macroReleaseSetToNil (gAttributeDescriptionDictionary) ;\n"
  "    macroReleaseSetToNil (gToOneRelationshipDescriptionDictionary) ;\n"
  "    macroReleaseSetToNil (gToManyRelationshipDescriptionDictionary) ;\n"
  "  }\n"
  "  macroReleaseSetToNil (mEntityManager) ;\n"
  "  macroReleaseSetToNil (mUndoManager) ;\n"
  "  macroNoteObjectDeallocation ;\n"
  "  macroSuperDealloc ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) setEntityManager: (PMObjectManager *) inManager {\n"
  "  [mUndoManager\n"
  "    registerUndoWithTarget:self\n"
  "    selector: @selector (setEntityManager:)\n"
  "    object:mEntityManager\n"
  "  ] ;\n"
  "  macroAssign (mEntityManager, inManager) ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) resetBeforeDeletion {\n"
  "  [self setEntityManager:nil] ;\n"
  "  #ifdef PM_COCOA_DEBUG\n"
  "    [self clearContextExplorer] ;\n"
  "  #endif\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//  S I G N A T U R E                                                        *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#pragma mark Object Explorer\n"
  "\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//   Signature routines                                                      *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "NSInteger computeIntegerSignature (const NSInteger inSignature,\n"
  "                                   const NSInteger inValue) {\n"
  "  NSInteger result = inSignature ;\n"
  "  NSInteger negative = inSignature < 0 ;\n"
  "  result <<= 1 ;\n"
  "  result |= negative ;\n"
  "  result ^= inValue ;\n"
  "  return result ;  \n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "NSInteger computeNSStringSignature (const NSInteger inSignature,\n"
  "                                    NSString * inValue) {\n"
  "  NSInteger result = inSignature ;\n"
  "  for (NSUInteger i=0 ; i<inValue.length ; i++) {\n"
  "    result = computeIntegerSignature (result, [inValue characterAtIndex:i]) ;\n"
  "  }\n"
  "  return result ;  \n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "NSInteger computeToOneEntitySignature (const NSInteger inSignature,\n"
  "                                       PMManagedObject * inToOnePropertyValue) {\n"
  "  return computeIntegerSignature (inSignature, inToOnePropertyValue.signature) ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "NSInteger computeToManyEntitySignature (const NSInteger inSignature,\n"
  "                                        NSArray * inToManyPropertyValue) {\n"
  "  NSInteger result = inSignature ;\n"
  "  for (PMManagedObject * object in inToManyPropertyValue) {\n"
  "    result = computeIntegerSignature (result, object.signature) ;\n"
  "  }\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//  O B J E C T    E X P L O R E R                                           *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#pragma mark Object Explorer\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  - (void) showObjectWindowFromSenderTagAction: (id) inSender {\n"
  "    [self showExplorerWindow] ;\n"
  "  }\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#pragma mark Clear Context Explorer\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#pragma mark Attribute did change\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  - (void) didChangeValueForKey:(NSString *) inKey {\n"
  "    [super didChangeValueForKey:inKey] ;\n"
  "    if ([mToManyRelationshipSet containsObject:inKey]) {\n"
  "      [self updateEntityArrayDisplayForKey:inKey] ;\n"
  "    }else if ([mToOneRelationshipSet containsObject:inKey]) {\n"
  "      [self updateEntityDisplayForKey:inKey] ;\n"
  "    }else{\n"
  "      for (PMAttributeDescription * description in mAttributeDescriptionArray) {\n"
  "        if ([inKey isEqualToString:description.attributeName]) {\n"
  "          [self updateAttributeDisplayForDescription:description] ;\n"
  "          break ;\n"
  "        }\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  - (void) didChange: (NSKeyValueChange) inChange\n"
  "           valuesAtIndexes:(NSIndexSet *) inIndexes\n"
  "           forKey:(NSString *) inKey {\n"
  "    [super\n"
  "      didChange:inChange\n"
  "      valuesAtIndexes:inIndexes\n"
  "      forKey:inKey\n"
  "    ] ;\n"
  "    [self updateEntityArrayDisplayForKey:inKey] ;\n"
  "  }\n"
  "#endif\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "@end\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "*/\n" ;

static const cRegularFileWrapper gWrapperFile_27_objective_5F_c_5F_sources (
  "PMManagedObject.swift",
  "swift",
  true, // Text file
  24146, // Text length
  gWrapperFileContent_27_objective_5F_c_5F_sources
) ;

//--- File '/PMObjectManager.h'

static const char * gWrapperFileContent_28_objective_5F_c_5F_sources = "//\n"
  "//  PMObjectManager.h\n"
  "//  essai\n"
  "//\n"
  "//  Created by Pierre Molinaro on 28/06/13.\n"
  "//  Copyright (c) 2013 ECN / IRCCyN. All rights reserved.\n"
  "//\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "#import <Foundation/Foundation.h>\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "@class PMManagedObject ;\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "@interface PMObjectManager : NSObject {\n"
  "  @private NSUndoManager * mUndoManager ;\n"
  "  @private NSMutableSet * mManagedObjectSet ;\n"
  "}\n"
  "\n"
  "- (instancetype) initWithUndoManager: (NSUndoManager *) inUndoManager ;\n"
  "\n"
  "- (NSUndoManager *) undoManager ;\n"
  "\n"
  "- (id) newInstanceOfEntity: (Class) inEntityClass ;\n"
  "\n"
  "- (void) deleteEntity: (PMManagedObject *) inObject ;\n"
  "\n"
  "- (void) deleteEntities: (NSArray *) inObjects ;\n"
  "\n"
  "- (NSArray *) allEntitiesKindOfClass: (Class) inClass ;\n"
  "\n"
  "- (NSArray *) reachableObjectsFromObject: (PMManagedObject *) inRootObject ;\n"
  "\n"
  "- (NSSet *) uneachableObjectsFromObject: (PMManagedObject *) inRootObject ;\n"
  "\n"
  "- (id) readFromData: (NSData *) inData withRootEntityClass: (Class) inRootEntityClass ;\n"
  "\n"
  "- (void) resetBeforeDeletion ;\n"
  "\n"
  "- (NSData *) dataForSavingFromRootObject: (PMManagedObject *) inRootObject ;\n"
  "\n"
  "- (NSUInteger) entityCount ;\n"
  "@end\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n" ;

static const cRegularFileWrapper gWrapperFile_28_objective_5F_c_5F_sources (
  "PMObjectManager.h",
  "h",
  true, // Text file
  1374, // Text length
  gWrapperFileContent_28_objective_5F_c_5F_sources
) ;

//--- File '/PMObjectManager.m'

static const char * gWrapperFileContent_29_objective_5F_c_5F_sources = "//\n"
  "//  PMObjectManager.m\n"
  "//  essai\n"
  "//\n"
  "//  Created by Pierre Molinaro on 28/06/13.\n"
  "//  Copyright (c) 2013 ECN / IRCCyN. All rights reserved.\n"
  "//\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "#import \"PMAllocationDebug.h\"\n"
  "#import \"PMObjectManager.h\"\n"
  "#import \"PMManagedObject.h\"\n"
  "#import \"PMRelationshipDescription.h\"\n"
  "#import \"easy-bindings-utilities.h\"\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "#import <objc/runtime.h>\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "@implementation PMObjectManager\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (instancetype) initWithUndoManager: (NSUndoManager *) inUndoManager {\n"
  "  self = [self init] ;\n"
  "  if (self) {\n"
  "    mManagedObjectSet = [NSMutableSet new] ;\n"
  "    macroAssign (mUndoManager, inUndoManager) ;\n"
  "    macroNoteObjectAllocation ;\n"
  "  }\n"
  "  return self ;\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    Dealloc                                                                 *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) dealloc {\n"
  "  macroReleaseSetToNil (mManagedObjectSet) ;\n"
  "  macroReleaseSetToNil (mUndoManager) ;\n"
  "  macroNoteObjectDeallocation ;\n"
  "  macroSuperDealloc ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (NSUndoManager *) undoManager {\n"
  "  return mUndoManager ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (NSUInteger) entityCount {\n"
  "  return mManagedObjectSet.count ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) addEntity: (PMManagedObject *) inEntity {\n"
  "  [self willChangeValueForKey:@\"entityCount\"] ;\n"
  "  [mManagedObjectSet addObject:inEntity] ;\n"
  "  [self didChangeValueForKey:@\"entityCount\"] ;\n"
  "  [mUndoManager\n"
  "    registerUndoWithTarget:self\n"
  "    selector:@selector (removeEntity:)\n"
  "    object:inEntity\n"
  "  ] ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) removeEntity: (PMManagedObject *) inEntity {\n"
  "  [self willChangeValueForKey:@\"entityCount\"] ;\n"
  "  [mManagedObjectSet removeObject:inEntity] ;\n"
  "  [self didChangeValueForKey:@\"entityCount\"] ;\n"
  "  [mUndoManager\n"
  "    registerUndoWithTarget:self\n"
  "    selector:@selector (addEntity:)\n"
  "    object:inEntity\n"
  "  ] ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (id) newInstanceOfEntity: (Class) inEntityClass {\n"
  "  PMManagedObject * result = [inEntityClass alloc] ;\n"
  "  result = [result initWithEntityManager:self] ;\n"
  "  [self addEntity:result] ;\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) deleteEntity: (PMManagedObject *) inObject {\n"
  "  [inObject resetBeforeDeletion] ;\n"
  "  [self removeEntity:inObject] ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) deleteEntities: (NSArray *) inObjectArray {\n"
  "  for (PMManagedObject * object in inObjectArray) {\n"
  "    [self deleteEntity:object] ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) resetBeforeDeletion {\n"
  "  for (PMManagedObject * object in mManagedObjectSet) {\n"
  "    [object resetBeforeDeletion] ;\n"
  "  }\n"
  "  [self willChangeValueForKey:@\"entityCount\"] ;\n"
  "  macroReleaseSetToNil (mManagedObjectSet) ;\n"
  "  [self didChangeValueForKey:@\"entityCount\"] ;\n"
  "  macroReleaseSetToNil (mUndoManager) ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (NSArray *) allEntitiesKindOfClass: (Class) inClass {\n"
  "  NSMutableArray * result = [NSMutableArray new] ;\n"
  "  for (PMManagedObject * object in mManagedObjectSet) {\n"
  "    if ([object isKindOfClass:inClass]) {\n"
  "      [result addObject:object] ;\n"
  "    }\n"
  "  }\n"
  "  macroAutorelease (result) ;\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//  R E A C H A B L E   O B J E C T S    F R O M    O B J E C T              *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (NSArray *) reachableObjectsFromObject: (PMManagedObject *) inRootObject {\n"
  "  NSMutableArray * reachableObjectArray = [NSMutableArray new] ;\n"
  "  [reachableObjectArray addObject:inRootObject] ;\n"
  "  NSMutableArray * objectsToExploreArray = [NSMutableArray new] ;\n"
  "  [objectsToExploreArray addObject:inRootObject] ;\n"
  "  NSMutableSet * handledObjectSet = [NSMutableSet new] ;\n"
  "  [handledObjectSet addObject:inRootObject] ;\n"
  "//---\n"
  "  while (objectsToExploreArray.count > 0) {\n"
  "    PMManagedObject * objectToExplore = [objectsToExploreArray objectAtIndex:0] ;\n"
  "    [objectsToExploreArray removeObjectAtIndex:0] ;\n"
  "  //--- To one relation ships\n"
  "    NSArray * toOneRelationshipNameArray = [objectToExplore toOneRelationshipDescriptionArray] ;\n"
  "    for (PMRelationshipDescription * description in toOneRelationshipNameArray) {\n"
  "      id value = [objectToExplore valueForKey:description.relationshipName] ;\n"
  "      if ((nil != value) && ! [handledObjectSet containsObject:value]) {\n"
  "        [handledObjectSet addObject:value] ;\n"
  "        [reachableObjectArray addObject:value] ;\n"
  "        [objectsToExploreArray addObject:value] ;\n"
  "      }\n"
  "    }\n"
  "  //--- To many relation ships\n"
  "    NSArray * toManyRelationshipNameArray = [objectToExplore toManyRelationshipDescriptionArray] ;\n"
  "    for (PMRelationshipDescription * description in toManyRelationshipNameArray) {\n"
  "      id value = [objectToExplore valueForKey:description.relationshipName] ;\n"
  "      for (PMManagedObject * object in value) {\n"
  "        if (! [handledObjectSet containsObject:object]) {\n"
  "          [handledObjectSet addObject:object] ;\n"
  "          [reachableObjectArray addObject:object] ;\n"
  "          [objectsToExploreArray addObject:object] ;\n"
  "        }\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "  macroReleaseSetToNil (handledObjectSet) ;\n"
  "  macroReleaseSetToNil (objectsToExploreArray) ;\n"
  "  macroAutorelease\n"
  "  (reachableObjectArray) ;\n"
  "  return reachableObjectArray ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//  R E A C H A B L E   O B J E C T S    F R O M    O B J E C T              *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (NSSet *) uneachableObjectsFromObject: (PMManagedObject *) inRootObject {\n"
  "  NSArray * reachableObjects = [self reachableObjectsFromObject:inRootObject] ;\n"
  "  NSMutableSet * s = [NSMutableSet new] ;\n"
  "  [s setSet:mManagedObjectSet] ;\n"
  "  [s minusSet:[NSSet setWithArray:reachableObjects]] ;\n"
  "  macroAutorelease (s) ;\n"
  "  return s ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//  S A V I N G    A N D    R E A D I N G                                    *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (NSData *) dataForSavingFromRootObject: (PMManagedObject *) inRootObject {\n"
  "  NSArray * objectsToSaveArray = [self reachableObjectsFromObject:inRootObject] ;\n"
  "//--- Set savingIndex for each object\n"
  "  NSUInteger idx = 0 ;\n"
  "  for (PMManagedObject * object in objectsToSaveArray) {\n"
  "    object.savingIndex = idx ;\n"
  "    idx ++ ;\n"
  "  }\n"
  "//---\n"
  "  NSMutableArray * saveDataArray = [NSMutableArray new] ;\n"
  "  for (PMManagedObject * object in objectsToSaveArray) {\n"
  "    NSMutableDictionary * d = [NSMutableDictionary new] ; \n"
  "    [d setValue:object.className forKey:@\"--entity\"] ;\n"
  "    [object saveIntoDictionary:d] ;\n"
  "    [saveDataArray addObject:d] ;\n"
  "    macroReleaseSetToNil (d) ;\n"
  "  }\n"
  "  macroAutorelease (saveDataArray) ;\n"
  "  return [NSPropertyListSerialization\n"
  "    dataFromPropertyList:saveDataArray\n"
  "    format:NSPropertyListBinaryFormat_v1_0\n"
  "    errorDescription:nil\n"
  "  ] ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "- (id) readFromData: (NSData *) inData\n"
  "       withRootEntityClass: (Class) inRootEntityClass {\n"
  "  NSArray * dictionaryArray = [NSPropertyListSerialization\n"
  "    propertyListFromData:inData\n"
  "    mutabilityOption:NSPropertyListImmutable \n"
  "    format:NULL\n"
  "    errorDescription:NULL\n"
  "  ] ;\n"
  "  NSMutableArray * objectArray = [NSMutableArray new] ;\n"
  "  for (NSDictionary * d in dictionaryArray) {\n"
  "    NSString * className = [d objectForKey:@\"--entity\"] ;\n"
  "    Class c = objc_getClass ([className cStringUsingEncoding:NSASCIIStringEncoding]) ;\n"
  "    PMManagedObject * object = [self newInstanceOfEntity:c] ;\n"
  "    [objectArray addObject:object] ;\n"
  "    macroReleaseSetToNil (object) ;\n"
  "  }\n"
  "  NSUInteger idx = 0 ;\n"
  "  for (NSDictionary * d in dictionaryArray) {\n"
  "    PMManagedObject * object = [objectArray objectAtIndex:idx] ;\n"
  "    [object setUpWithDictionary:d withManagedEntityArray:objectArray] ;\n"
  "    idx ++ ;\n"
  "  }\n"
  "  macroAutorelease (objectArray) ;\n"
  "//--- Return root object\n"
  "  return [objectArray objectAtIndex:0] ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "@end\n" ;

static const cRegularFileWrapper gWrapperFile_29_objective_5F_c_5F_sources (
  "PMObjectManager.m",
  "m",
  true, // Text file
  8836, // Text length
  gWrapperFileContent_29_objective_5F_c_5F_sources
) ;

//--- File '/PMObjectManager.swift'

static const char * gWrapperFileContent_30_objective_5F_c_5F_sources = "//\n"
  "//  PMObjectManager.swift\n"
  "//  essai\n"
  "//\n"
  "//  Created by Pierre Molinaro on 28/06/13.\n"
  "//  Copyright (c) 2013 ECN / IRCCyN. All rights reserved.\n"
  "//\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "import Cocoa\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "@objc(PMObjectManager) class PMObjectManager : NSObject {\n"
  "  var mUndoManager : PMUndoManager\n"
  "  var mManagedObjectSet = NSMutableSet ()\n"
  "\n"
  "  //-----------------------------------------------------------------------------*\n"
  "  //  init                                                                       *\n"
  "  //-----------------------------------------------------------------------------*\n"
  "\n"
  "  init () {\n"
  "    mUndoManager = PMUndoManager ()\n"
  "    super.init ()\n"
  "    noteObjectAllocation (self)\n"
  "  }\n"
  "\n"
  "  //-----------------------------------------------------------------------------*\n"
  "  //  deinit                                                                     *\n"
  "  //-----------------------------------------------------------------------------*\n"
  "\n"
  "  deinit {\n"
  "    noteObjectDeallocation (self)\n"
  "  }\n"
  "\n"
  "  //-----------------------------------------------------------------------------*\n"
  "  //  undoManager                                                                *\n"
  "  //-----------------------------------------------------------------------------*\n"
  "\n"
  "  var undoManager : PMUndoManager {\n"
  "    return mUndoManager\n"
  "  }\n"
  "\n"
  "  //-----------------------------------------------------------------------------*\n"
  "  //  entityCount                                                                *\n"
  "  //-----------------------------------------------------------------------------*\n"
  "\n"
  "  func entityCount () -> Int {\n"
  "    return mManagedObjectSet.count () ;\n"
  "  }\n"
  "\n"
  "  //-----------------------------------------------------------------------------*\n"
  "  //  addEntity                                                                  *\n"
  "  //-----------------------------------------------------------------------------*\n"
  "\n"
  "  func addEntity (inEntity : PMManagedObject) {\n"
  " //   willChangeValueForKey (\"entityCount\")\n"
  "    mManagedObjectSet.addObject (inEntity)\n"
  "//    didChangeValueForKey (\"entityCount\")\n"
  "    mUndoManager.registerUndoWithTarget (self,\n"
  "      selector:\"private_removeEntity:\",\n"
  "      object:inEntity\n"
  "    )\n"
  "  }\n"
  "\n"
  "  //-----------------------------------------------------------------------------*\n"
  "\n"
  "  func private_removeEntity (inEntity : PMManagedObject) {\n"
  "    willChangeValueForKey (\"entityCount\")\n"
  "    mManagedObjectSet.removeObject (inEntity)\n"
  "    didChangeValueForKey (\"entityCount\")\n"
  "    mUndoManager.registerUndoWithTarget (self,\n"
  "      selector:\"addEntity:\",\n"
  "      object:inEntity\n"
  "    )\n"
  "  }\n"
  "\n"
  "  //-----------------------------------------------------------------------------*\n"
  "  //  deleteEntity                                                               *\n"
  "  //-----------------------------------------------------------------------------*\n"
  "\n"
  "  func deleteEntity (inObject : PMManagedObject) {\n"
  "    private_removeEntity (inObject)\n"
  "  }\n"
  "\n"
  "  //-----------------------------------------------------------------------------*\n"
  "  //  deleteEntities                                                             *\n"
  "  //-----------------------------------------------------------------------------*\n"
  "\n"
  "  func deleteEntities (inObjectArray : PMManagedObject []) {\n"
  "    for object in inObjectArray {\n"
  "      deleteEntity (object)\n"
  "    }\n"
  "  }\n"
  "\n"
  "  //-----------------------------------------------------------------------------*\n"
  "  //  allEntitiesKindOfClass                                                     *\n"
  "  //-----------------------------------------------------------------------------*\n"
  "\n"
  "  func allEntitiesKindOfClass (inClassName : String) -> PMManagedObject [] {\n"
  "    var result : PMManagedObject [] = []\n"
  "    for object : AnyObject in mManagedObjectSet {\n"
  "      let managedObject = object as PMManagedObject\n"
  "      if managedObject.className () == inClassName {\n"
  "        result += managedObject\n"
  "      }\n"
  "    }\n"
  "    return result ;\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //  S A V I N G    A N D    R E A D I N G                                    *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  func dataForSavingFromRootObject (inRootObject : PMManagedObject) -> NSData {\n"
  "    let objectsToSaveArray = reachableObjectsFromObject (inRootObject)\n"
  "  //--- Set savingIndex for each object\n"
  "    var idx = 0 ;\n"
  "    for object in objectsToSaveArray {\n"
  "      object.savingIndex = idx\n"
  "      idx = idx + 1\n"
  "    }\n"
  "  //---\n"
  "    var saveDataArray : NSDictionary [] = []\n"
  "    for object in objectsToSaveArray {\n"
  "      var d : NSMutableDictionary = [\n"
  "        \"--entity\" : object.className ()\n"
  "      ]\n"
  "      object.saveIntoDictionary (d)\n"
  "      saveDataArray += d\n"
  "    }\n"
  "    return NSPropertyListSerialization.dataWithPropertyList (saveDataArray,\n"
  "      format:NSPropertyListFormat.BinaryFormat_v1_0,\n"
  "      options:0,\n"
  "      error:nil\n"
  "    )\n"
  "  }\n"
  "\n"
  "  //-----------------------------------------------------------------------------*\n"
  "\n"
  "  func readFromData (inData : NSData,\n"
  "                     rootEntityClassName : String) -> PMManagedObject {\n"
  "    let v : AnyObject = NSPropertyListSerialization.propertyListWithData (inData,\n"
  "      options:0, // NSPropertyListReadOptions.Immutable,\n"
  "      format:nil,\n"
  "      error:nil\n"
  "    )\n"
  "    let dictionaryArray : NSDictionary [] = v as NSDictionary []\n"
  "    var objectArray : PMManagedObject [] = []\n"
  "    for d in dictionaryArray {\n"
  "      let className = d.objectForKey (\"--entity\") as String\n"
  "      let object = newInstanceOfEntityNamed (className)\n"
  "      objectArray += object!\n"
  "    }\n"
  "    var idx = 0\n"
  "    for d in dictionaryArray {\n"
  "      var object : PMManagedObject = objectArray [idx]\n"
  "      object.setUpWithDictionary (d, managedObjectArray:objectArray)\n"
  "      idx += 1\n"
  "    }\n"
  "  //--- Return root object\n"
  "    return objectArray [0]\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //  R E A C H A B L E   O B J E C T S    F R O M    O B J E C T              *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  func reachableObjectsFromObject (inRootObject : PMManagedObject) -> PMManagedObject [] {\n"
  "    var reachables : Bool [] = []\n"
  "    var idx = 0\n"
  "    for object : AnyObject in mManagedObjectSet {\n"
  "      let managedObject = object as PMManagedObject\n"
  "      managedObject.savingIndex = idx\n"
  "      reachables += false\n"
  "      idx += 1\n"
  "    }\n"
  "    var objectsToExploreArray : PMManagedObject [] = [inRootObject]\n"
  "    var reachableObjectArray : PMManagedObject [] = [inRootObject]\n"
  " //let start = NSDate()\n"
  " //   NSLog (\"start\")\n"
  "    reachables [inRootObject.savingIndex] = true\n"
  "    while (objectsToExploreArray.count > 0) {\n"
  "      let objectToExplore : PMManagedObject = objectsToExploreArray [objectsToExploreArray.count - 1]\n"
  "      objectsToExploreArray.removeAtIndex (objectsToExploreArray.count - 1)\n"
  "     var accessible : PMManagedObject [] = []\n"
  "     objectToExplore.accessibleObjects (&accessible)\n"
  "      for managedObject : PMManagedObject in accessible {\n"
  "        if !reachables [managedObject.savingIndex] {\n"
  "          reachables [managedObject.savingIndex] = true\n"
  "          reachableObjectArray += managedObject\n"
  "          objectsToExploreArray += managedObject\n"
  "        }\n"
  "      }\n"
  "    }\n"
  "// let end = NSDate()\n"
  "// let timeTaken = end.timeIntervalSinceDate(start) * 1000\n"
  "// NSLog (\"%f ms\", timeTaken)\n"
  "    return reachableObjectArray ;\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "  //  R E A C H A B L E   O B J E C T S    F R O M    O B J E C T              *\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  func unreachableObjectsFromObject (inRootObject : PMManagedObject) -> NSSet {\n"
  "    let reachableObjects = reachableObjectsFromObject (inRootObject)\n"
  "    var s = NSMutableSet ()\n"
  "    s.setSet (mManagedObjectSet)\n"
  "    s.minusSet (NSSet (array:reachableObjects))\n"
  "    return s\n"
  "  }\n"
  "\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n" ;

static const cRegularFileWrapper gWrapperFile_30_objective_5F_c_5F_sources (
  "PMObjectManager.swift",
  "swift",
  true, // Text file
  8057, // Text length
  gWrapperFileContent_30_objective_5F_c_5F_sources
) ;

//--- File '/PMRelationshipDescription.h'

static const char * gWrapperFileContent_31_objective_5F_c_5F_sources = "//\n"
  "//  PMRelationshipDescription.h\n"
  "//  essai\n"
  "//\n"
  "//  Created by Pierre Molinaro on 30/06/13.\n"
  "//  Copyright (c) 2013 ECN / IRCCyN. All rights reserved.\n"
  "//\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#import <Foundation/Foundation.h>\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@interface PMRelationshipDescription : NSObject\n"
  "\n"
  "+ (PMRelationshipDescription *) descriptionWithRelationshipName: (NSString *) inRelationshipName\n"
  "                                withOppositionRelationshipName: (NSString *) inOppositeRelationshipName\n"
  "                                withIsToManyOppositionRelationship: (BOOL) inIsToMany ;\n"
  "\n"
  "@property (copy, readonly, atomic) NSString * relationshipName ;\n"
  "@property (copy, readonly, atomic) NSString * oppositeRelationshipName ;\n"
  "@property (readonly, atomic) BOOL oppositeRelationshipIsToMany ;\n"
  "\n"
  "- (NSComparisonResult) compareByRelationshipName: (PMRelationshipDescription *) inOtherDescription ;\n"
  "\n"
  "- (NSComparisonResult) reverseCompareByRelationshipName: (PMRelationshipDescription *) inOtherDescription ;\n"
  "\n"
  "@end\n"
  "\n"
  "//---------------------------------------------------------------------------*\n" ;

static const cRegularFileWrapper gWrapperFile_31_objective_5F_c_5F_sources (
  "PMRelationshipDescription.h",
  "h",
  true, // Text file
  1187, // Text length
  gWrapperFileContent_31_objective_5F_c_5F_sources
) ;

//--- File '/PMRelationshipDescription.m'

static const char * gWrapperFileContent_32_objective_5F_c_5F_sources = "//\n"
  "//  PMRelationshipDescription.m\n"
  "//  essai\n"
  "//\n"
  "//  Created by Pierre Molinaro on 30/06/13.\n"
  "//  Copyright (c) 2013 ECN / IRCCyN. All rights reserved.\n"
  "//\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#import \"easy-bindings-utilities.h\"\n"
  "#import \"PMRelationshipDescription.h\"\n"
  "#import \"PMAllocationDebug.h\"\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@implementation PMRelationshipDescription\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@synthesize relationshipName ;\n"
  "@synthesize oppositeRelationshipName ;\n"
  "@synthesize oppositeRelationshipIsToMany ;\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (instancetype) initWithRelationshipName: (NSString *) inRelationshipName\n"
  "                 withOppositionRelationshipName: (NSString *) inOppositeRelationshipName\n"
  "                 withIsToManyOppositionRelationship: (BOOL) inIsToMany {\n"
  "  self = [self init] ;\n"
  "  if (self) {\n"
  "    relationshipName = inRelationshipName ;\n"
  "    oppositeRelationshipName = inOppositeRelationshipName ;\n"
  "    oppositeRelationshipIsToMany = inIsToMany ;\n"
  "    macroNoteObjectAllocation ;\n"
  "  }\n"
  "  return self ;\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    Dealloc                                                                 *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) dealloc {\n"
  "  macroNoteObjectDeallocation ;\n"
  "  macroSuperDealloc ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "+ (PMRelationshipDescription *) descriptionWithRelationshipName: (NSString *) inRelationshipName\n"
  "                                withOppositionRelationshipName: (NSString *) inOppositeRelationshipName\n"
  "                                withIsToManyOppositionRelationship: (BOOL) inIsToMany {\n"
  "  PMRelationshipDescription * result = [[PMRelationshipDescription alloc]\n"
  "    initWithRelationshipName:inRelationshipName\n"
  "    withOppositionRelationshipName:inOppositeRelationshipName\n"
  "    withIsToManyOppositionRelationship:inIsToMany\n"
  "  ] ;\n"
  "  macroAutorelease (result) ;\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (NSComparisonResult) compareByRelationshipName: (PMRelationshipDescription *) inOtherDescription {\n"
  "  return [self.relationshipName compare:inOtherDescription.relationshipName] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (NSComparisonResult) reverseCompareByRelationshipName: (PMRelationshipDescription *) inOtherDescription {\n"
  "  return [inOtherDescription.relationshipName compare:self.relationshipName] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@end\n" ;

static const cRegularFileWrapper gWrapperFile_32_objective_5F_c_5F_sources (
  "PMRelationshipDescription.m",
  "m",
  true, // Text file
  2811, // Text length
  gWrapperFileContent_32_objective_5F_c_5F_sources
) ;

//--- File '/PMUndoManager.h'

static const char * gWrapperFileContent_33_objective_5F_c_5F_sources = "//\n"
  "//  PMUndoManager.h\n"
  "//  essai\n"
  "//\n"
  "//  Created by Pierre Molinaro on 30/06/13.\n"
  "//  Copyright (c) 2013 ECN / IRCCyN. All rights reserved.\n"
  "//\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#import <Foundation/Foundation.h>\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@interface PMUndoManager : NSUndoManager\n"
  "\n"
  "@end\n"
  "\n"
  "//---------------------------------------------------------------------------*\n" ;

static const cRegularFileWrapper gWrapperFile_33_objective_5F_c_5F_sources (
  "PMUndoManager.h",
  "h",
  true, // Text file
  463, // Text length
  gWrapperFileContent_33_objective_5F_c_5F_sources
) ;

//--- File '/PMUndoManager.m'

static const char * gWrapperFileContent_34_objective_5F_c_5F_sources = "//\n"
  "//  PMUndoManager.m\n"
  "//  essai\n"
  "//\n"
  "//  Created by Pierre Molinaro on 30/06/13.\n"
  "//  Copyright (c) 2013 ECN / IRCCyN. All rights reserved.\n"
  "//\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#import \"easy-bindings-utilities.h\"\n"
  "#import \"PMUndoManager.h\"\n"
  "#import \"PMAllocationDebug.h\"\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@implementation PMUndoManager\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "- (instancetype) init {\n"
  "  self = [super init] ;\n"
  "  if (self) {\n"
  "    macroNoteObjectAllocation ;\n"
  "  }\n"
  "  return self ;\n"
  "}\n"
  "\n"
  "//----------------------------------------------------------------------------*\n"
  "//    Dealloc                                                                 *\n"
  "//----------------------------------------------------------------------------*\n"
  "\n"
  "- (void) dealloc {\n"
  "  macroNoteObjectDeallocation ;\n"
  "  macroSuperDealloc ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@end\n" ;

static const cRegularFileWrapper gWrapperFile_34_objective_5F_c_5F_sources (
  "PMUndoManager.m",
  "m",
  true, // Text file
  1024, // Text length
  gWrapperFileContent_34_objective_5F_c_5F_sources
) ;

//--- File '/PMUndoManager.swift'

static const char * gWrapperFileContent_35_objective_5F_c_5F_sources = "//\n"
  "//  PMUndoManager.swift\n"
  "//  essai\n"
  "//\n"
  "//  Created by Pierre Molinaro on 30/06/14.\n"
  "//  Copyright (c) 2013 ECN / IRCCyN. All rights reserved.\n"
  "//\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "import Cocoa\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "let traceUndoManager = false\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@objc(PMUndoManager) class PMUndoManager : NSUndoManager {\n"
  "\n"
  "  //-----------------------------------------------------------------------------*\n"
  "  //    init                                                                     *\n"
  "  //-----------------------------------------------------------------------------*\n"
  "\n"
  "  init () {\n"
  "    super.init ()\n"
  "    noteObjectAllocation (self)\n"
  "  }\n"
  "\n"
  "  //-----------------------------------------------------------------------------*\n"
  "  //    deinit                                                                   *\n"
  "  //-----------------------------------------------------------------------------*\n"
  "\n"
  "  deinit {\n"
  "    noteObjectDeallocation (self)\n"
  "  }\n"
  "\n"
  "  //-----------------------------------------------------------------------------*\n"
  "  //    registerUndoWithTarget                                                   *\n"
  "  //-----------------------------------------------------------------------------*\n"
  "\n"
  "  override func prepareWithInvocationTarget (target:AnyObject!) -> AnyObject! {\n"
  "    let result : AnyObject! = super.prepareWithInvocationTarget (target)\n"
  "    if traceUndoManager {\n"
  "      NSLog (\"prepareWithInvocationTarget (%@) target:%@\", isUndoRegistrationEnabled () \? \"yes\" : \"no\", target.description)\n"
  "    }\n"
  "    return result\n"
  "  }\n"
  "\n"
  "  //-----------------------------------------------------------------------------*\n"
  "  //    registerUndoWithTarget                                                   *\n"
  "  //-----------------------------------------------------------------------------*\n"
  "\n"
  "  override func registerUndoWithTarget (target:AnyObject!, selector:Selector, object anObject:AnyObject!) {\n"
  "    super.registerUndoWithTarget (target, selector:selector, object:anObject)\n"
  "    if traceUndoManager {\n"
  "      if anObject == nil {\n"
  "        NSLog (\"registerUndoWithTarget (%@) target:%@, selector:\\\"%@\\\" object:nil\", isUndoRegistrationEnabled () \? \"yes\" : \"no\", target.description, s"
  "elector.description)\n"
  "      }else{\n"
  "        NSLog (\"registerUndoWithTarget (%@) target:%@, selector:\\\"%@\\\" object:%@\", isUndoRegistrationEnabled () \? \"yes\" : \"no\", target.description, se"
  "lector.description, anObject.description)\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "\n"
  "  //-----------------------------------------------------------------------------*\n"
  "  //    beginUndoGrouping                                                        *\n"
  "  //-----------------------------------------------------------------------------*\n"
  "\n"
  "  override func beginUndoGrouping () {\n"
  "    if traceUndoManager {\n"
  "      NSLog (\"beginUndoGrouping\")\n"
  "    }\n"
  "    super.beginUndoGrouping ()\n"
  "  }\n"
  "\n"
  "  //-----------------------------------------------------------------------------*\n"
  "  //    endUndoGrouping                                                          *\n"
  "  //-----------------------------------------------------------------------------*\n"
  "\n"
  "  override func endUndoGrouping () {\n"
  "    if traceUndoManager {\n"
  "      NSLog (\"endUndoGrouping\")\n"
  "    }\n"
  "    super.endUndoGrouping ()\n"
  "  }\n"
  "}\n"
  "\n"
  "//------------------------------------------------------------------------------*\n" ;

static const cRegularFileWrapper gWrapperFile_35_objective_5F_c_5F_sources (
  "PMUndoManager.swift",
  "swift",
  true, // Text file
  3432, // Text length
  gWrapperFileContent_35_objective_5F_c_5F_sources
) ;

//--- File '/easy-bindings-utilities.h'

static const char * gWrapperFileContent_36_objective_5F_c_5F_sources = "\n"
  "#import <Cocoa/Cocoa.h>\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "#import <objc/runtime.h>\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//   presentErrorWindow                                                      *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "void presentErrorWindow (const char * inFile,\n"
  "                         const int inLine,\n"
  "                         NSString * inErrorMessage) ;\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  #define macroCheckObject(OBJECT,TYPE) routineCheckObject(OBJECT, [TYPE class], __FILE__, __LINE__)\n"
  "  void routineCheckObject (id inObject, Class inClass, const char * inFile, const int inLine) ;\n"
  "#else\n"
  "  #define macroCheckObject(OBJECT,TYPE)\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  #define macroAssert(EXP,MESSAGE,VALUE1,VALUE2) routineAssert(EXP, MESSAGE, VALUE1, VALUE2, __FILE__, __LINE__)\n"
  "  void routineAssert (const BOOL inAssertion,\n"
  "                      NSString * inFormat,\n"
  "                      const SInt64 inValue1,\n"
  "                      const SInt64 inValue2,\n"
  "                      const char * inFile,\n"
  "                      const int inLine) ;\n"
  "#else\n"
  "  #define macroAssert(EXP,MESSAGE,VALUE1,VALUE2)\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  #define HERE                  atFile:__FILE__  atLine:__LINE__\n"
  "  #define COLON_HERE            :__FILE__  atLine:__LINE__\n"
  "  #define THERE                 atFile:IN_SOURCE_FILE  atLine:IN_SOURCE_LINE\n"
  "  #define COLON_THERE           IN_SOURCE_FILE  atLine:IN_SOURCE_LINE\n"
  "  #define LOCATION_ARGS         atFile: (const char *) IN_SOURCE_FILE  atLine: (NSInteger) IN_SOURCE_LINE\n"
  "  #define COLON_LOCATION_ARGS   : (const char *) IN_SOURCE_FILE  atLine: (NSInteger) IN_SOURCE_LINE\n"
  "  #define OF_CLASS_ARG          ofClass: (Class) inClass\n"
  "  #define OFCLASS(className)    ofClass:[className class]\n"
  "#else\n"
  "  #define HERE\n"
  "  #define COLON_HERE\n"
  "  #define THERE\n"
  "  #define COLON_THERE\n"
  "  #define LOCATION_ARGS\n"
  "  #define COLON_LOCATION_ARGS\n"
  "  #define OF_CLASS_ARG\n"
  "  #define OFCLASS(className)\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#define value_for_key  valueForKey\n"
  "#define set_value      setValue\n"
  "#define for_key        forKey\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  #define macroCheckMethodSwizzling(ORIGINAL,SWIZZLED) routineCheckMethodSwizzling(ORIGINAL, SWIZZLED, __FILE__, __LINE__)\n"
  "  void routineCheckMethodSwizzling (Method inOriginal, Method inSwizzled, const char * inFile, const int inLine) ;\n"
  "#else\n"
  "  #define macroCheckMethodSwizzling(ORIGINAL,SWIZZLED)\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@interface NSArray (PMDebug)\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "+ (id) arrayWithObject: (id) anObject LOCATION_ARGS ;\n"
  "\n"
  "- (id) objectAtIndex: (NSUInteger) inIndex LOCATION_ARGS ;\n"
  "\n"
  "- (id) objectAtIndex: (NSUInteger) inIndex LOCATION_ARGS OF_CLASS_ARG ;\n"
  "\n"
  "- (id) lastObject COLON_LOCATION_ARGS ;\n"
  "\n"
  "- (id) lastObject COLON_LOCATION_ARGS OF_CLASS_ARG ;\n"
  "\n"
  "- (NSEnumerator *) objectEnumerator COLON_LOCATION_ARGS ;\n"
  "#endif\n"
  "\n"
  "@end\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@interface NSMutableSet (PMDebug)\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "- (void) addObject: (id) inObject LOCATION_ARGS ;\n"
  "\n"
  "- (void) removeAllObjects COLON_LOCATION_ARGS ;\n"
  "\n"
  "- (void) removeObject: (id) inObject LOCATION_ARGS ;\n"
  "#endif\n"
  "\n"
  "@end\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//   NSData encoding                                                         *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "NSData * dataEncodedValue (id inValue) ;\n"
  "\n"
  "id valueFromData (NSData * inData) ;\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//   BOOL                                                                    *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "BOOL boolFromNSNumber (id inValue) ;\n"
  "\n"
  "NSNumber * numberEncodedBool (BOOL inValue) ;\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//   NSInteger                                                               *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "NSInteger NSIntegerFromNSNumber (id inValue) ;\n"
  "\n"
  "NSNumber * numberEncodedNSInteger (NSInteger inValue) ;\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//   double                                                                  *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "double doubleFromNSNumber (id inValue) ;\n"
  "\n"
  "NSNumber * numberEncodedDouble (double inValue) ;\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//   Font                                                                    *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "NSData * dataFromFont (NSFont * inFont) ;\n"
  "\n"
  "NSFont * fontFromData (NSData * inDataEncodeFont) ;\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#if __has_feature(objc_arc)\n"
  "  #define macroSuperDealloc\n"
  "#else\n"
  "  #define macroSuperDealloc [super dealloc]\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#if __has_feature(objc_arc)\n"
  "  #define macroRetain(OBJECT)\n"
  "#else\n"
  "  #define macroRetain(OBJECT) [OBJECT retain]\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#if __has_feature(objc_arc)\n"
  "  #define macroAssign(OBJECT,SOURCE) OBJECT = SOURCE ;\n"
  "#else\n"
  "  #define macroAssign(OBJECT,SOURCE) [SOURCE retain] ; [OBJECT release] ; OBJECT = SOURCE ;\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#if __has_feature(objc_arc)\n"
  "  #define macroReleaseSetToNil(OBJECT) OBJECT = nil\n"
  "#else\n"
  "  #define macroReleaseSetToNil(OBJECT) { [OBJECT release] ; OBJECT = nil ; }\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#if __has_feature(objc_arc)\n"
  "  #define macroAutorelease(OBJECT)\n"
  "#else\n"
  "  #define macroAutorelease(OBJECT) [OBJECT autorelease]\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#if __has_feature(objc_arc)\n"
  "  #define ARC_BRIDGE_RETAINED_VOID(OBJECT) ((__bridge_retained void *) OBJECT)\n"
  "#else\n"
  "  #define ARC_BRIDGE_RETAINED_VOID(OBJECT) [OBJECT retain]\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#if __has_feature(objc_arc)\n"
  "  #define ARC_BRIDGE_TRANSFER __bridge_transfer\n"
  "#else\n"
  "  #define ARC_BRIDGE_TRANSFER\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n" ;

static const cRegularFileWrapper gWrapperFile_36_objective_5F_c_5F_sources (
  "easy-bindings-utilities.h",
  "h",
  true, // Text file
  6990, // Text length
  gWrapperFileContent_36_objective_5F_c_5F_sources
) ;

//--- File '/easy-bindings-utilities.m'

static const char * gWrapperFileContent_37_objective_5F_c_5F_sources = "//---------------------------------------------------------------------------*\n"
  "\n"
  "#import \"easy-bindings-utilities.h\"\n"
  "#import <objc/runtime.h>\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//   presentErrorWindow                                                      *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "static NSMutableArray * gErrorWindows ;\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "void presentErrorWindow (const char * inFile,\n"
  "                         const int inLineNumber,\n"
  "                         NSString * inErrorMessage) {\n"
  "  if (nil == gErrorWindows) {\n"
  "    gErrorWindows = [NSMutableArray new] ;\n"
  "  }\n"
  "//---\n"
  "  NSString * f = [[NSString stringWithCString:inFile encoding:NSASCIIStringEncoding] lastPathComponent] ;\n"
  "  NSMutableString * message = [NSMutableString stringWithCapacity:1000] ;\n"
  "  [message appendFormat:@\"File: %@\\n\", f] ;\n"
  "  [message appendFormat:@\"Line: %d\\n\\n\", inLineNumber] ;\n"
  "  [message appendFormat:@\"Message: %@\", inErrorMessage] ;\n"
  "  static NSPoint origin = {20.0, 20.0} ;\n"
  "  const NSRect r = {origin, {300.0, 200.0}} ;\n"
  "  origin.x += 20.0 ;\n"
  "  origin.y += 20.0 ;\n"
  "  NSWindow * window = [[NSWindow alloc] initWithContentRect:r\n"
  "    styleMask:NSTitledWindowMask | NSClosableWindowMask\n"
  "    backing:NSBackingStoreBuffered\n"
  "    defer:YES\n"
  "    screen:nil\n"
  "  ] ;\n"
  "  [window setTitle:@\"Outlet Error\"] ;\n"
  "  NSView * contentView = [window contentView] ;\n"
  "  const NSRect tfRect = NSInsetRect ([contentView bounds], 10.0, 10.0) ;\n"
  "  NSTextField * tf = [[NSTextField alloc] initWithFrame:tfRect] ;\n"
  "  [tf setEditable:NO] ;\n"
  "  [tf setSelectable:YES] ;\n"
  "  [tf setFont:[NSFont boldSystemFontOfSize:0.0]] ;\n"
  "  [tf setTextColor:[NSColor redColor]] ;\n"
  "  [tf setStringValue:message] ;\n"
  "  [contentView addSubview:tf] ;\n"
  "  macroReleaseSetToNil (tf) ;\n"
  "  NSBeep () ;\n"
  "  [window makeKeyAndOrderFront:nil] ;\n"
  "//---\n"
  "  [gErrorWindows addObject:window] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  void routineCheckObject (id inObject,\n"
  "                           Class inClass,\n"
  "                           const char * inFile,\n"
  "                           const int inLine) {\n"
  "    if (nil == inObject) {\n"
  "      presentErrorWindow (inFile, inLine, @\"Object is nil\") ;\n"
  "    }else if (! [inObject isKindOfClass:inClass]) {\n"
  "      NSString * s = [NSString stringWithFormat:\n"
  "        @\"Object is not an instance of %s, but %s\",\n"
  "        class_getName (inClass),\n"
  "        class_getName ([inObject class])\n"
  "      ] ;\n"
  "      presentErrorWindow (inFile, inLine, s) ;\n"
  "    }  \n"
  "  }\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  void routineAssert (const BOOL inAssertion,\n"
  "                      NSString * inFormat,\n"
  "                      const SInt64 inValue1,\n"
  "                      const SInt64 inValue2,\n"
  "                      const char * inFile,\n"
  "                      const int inLine) {\n"
  "    if (! inAssertion) {\n"
  "      NSString * s = [NSString stringWithFormat:\n"
  "        inFormat,\n"
  "        inValue1,\n"
  "        inValue2\n"
  "      ] ;\n"
  "      presentErrorWindow (inFile, inLine, s) ;\n"
  "    }\n"
  "  }\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@implementation NSArray (PMDebug)\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "+ (id) arrayWithObject: (id) anObject LOCATION_ARGS {\n"
  "  if (anObject == nil) {\n"
  "    NSLog (@\"arrayWithObject: argument is nil in:%s:%ld\", IN_SOURCE_FILE, IN_SOURCE_LINE) ;\n"
  "  }\n"
  "  return [NSArray arrayWithObject:anObject] ; // DO NOT ADD \"HERE\" !!!\n"
  "}\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "- (id) objectAtIndex: (NSUInteger) inIndex LOCATION_ARGS {\n"
  "  if (! [self isKindOfClass:[NSArray class]]) {\n"
  "    NSLog (@\"objectAtIndex: receiver is not an instance of NSArray in:%s:%ld\", IN_SOURCE_FILE, IN_SOURCE_LINE) ;\n"
  "  }else if (inIndex >= self.count) {\n"
  "    NSLog (@\"objectAtIndex: index (%llu) >= object count (%llu) in:%s:%ld\",\n"
  "          (UInt64) inIndex, (UInt64) self.count, IN_SOURCE_FILE, IN_SOURCE_LINE) ;  \n"
  "  }\n"
  "  return [self objectAtIndex:inIndex] ;\n"
  "}\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "- (id) objectAtIndex: (NSUInteger) inIndex LOCATION_ARGS OF_CLASS_ARG {\n"
  "  id result = [self objectAtIndex:inIndex THERE] ;\n"
  "  if (! [result isKindOfClass:inClass]) {\n"
  "    NSLog (@\"objectAtIndex: receiver is an instance of %@ class (instead of %@ class) in:%s:%ld\",\n"
  "          [[result class] className], [inClass className], IN_SOURCE_FILE, IN_SOURCE_LINE) ;\n"
  "  }\n"
  "  return result ;\n"
  "}\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "- (id) lastObject COLON_LOCATION_ARGS {\n"
  "  if (! [self isKindOfClass:[NSArray class]]) {\n"
  "    NSLog (@\"<lastObject>: receiver is not an instance of NSArray in:%s:%ld\", IN_SOURCE_FILE, IN_SOURCE_LINE) ;\n"
  "  }\n"
  "  return [self lastObject] ;\n"
  "}\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "- (id) lastObject COLON_LOCATION_ARGS OF_CLASS_ARG {\n"
  "  if (! [self isKindOfClass:[NSArray class]]) {\n"
  "    NSLog (@\"<lastObject>: receiver is not an instance of NSArray in:%s:%ld\", IN_SOURCE_FILE, IN_SOURCE_LINE) ;\n"
  "  }\n"
  "  id result = [self lastObject] ;\n"
  "  if (! [result isKindOfClass:inClass]) {\n"
  "    NSLog (@\"<lastObject>: receiver is an instance of %@ class (instead of %@ class) in:%s:%ld\",\n"
  "          [[result class] className], [inClass className], IN_SOURCE_FILE, IN_SOURCE_LINE) ;\n"
  "  }\n"
  "  return result ;\n"
  "}\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "//--- Define DEBUG_ENUMERATORS (in PMCocoaCallsDebug.h), in order to detect\n"
  "//    \"Collection ... was mutated while being enumerated\" exception\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "- (NSEnumerator *) objectEnumerator COLON_LOCATION_ARGS {\n"
  "  #ifdef DEBUG_ENUMERATORS\n"
  "    NSLog (@\"%p <objectEnumerator> in:%s:%d\", self, IN_SOURCE_FILE, IN_SOURCE_LINE) ;\n"
  "  #endif\n"
  "  return [self objectEnumerator] ; // DO NOT ADD COLON_HERE !!!\n"
  "}\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@end\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@implementation NSMutableSet (PMDebug)\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "- (void) addObject: (id) inObject LOCATION_ARGS {\n"
  "  if (! [self isKindOfClass:[NSMutableSet class]]) {\n"
  "    NSLog (@\"addObject: receiver is not an instance of NSMutableSet in sourceFile:%s:%ld\", IN_SOURCE_FILE, IN_SOURCE_LINE) ;\n"
  "  }else if (inObject == nil) {\n"
  "    NSLog (@\"in '%s' file at line %ld, attempt to insert nil\", IN_SOURCE_FILE, IN_SOURCE_LINE) ;  \n"
  "  }\n"
  "  [self addObject:inObject] ;\n"
  "}\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "- (void) removeAllObjects COLON_LOCATION_ARGS {\n"
  "  if (! [self isKindOfClass:[NSMutableSet class]]) {\n"
  "    NSLog (@\"removeAllObjects: receiver is not an instance of NSMutableSet in source file:%s:%ld\", IN_SOURCE_FILE, IN_SOURCE_LINE) ;\n"
  "  }\n"
  "  [self removeAllObjects] ;\n"
  "}\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "- (void) removeObject: (id) inObject LOCATION_ARGS {\n"
  "  if (! [self isKindOfClass:[NSMutableSet class]]) {\n"
  "    NSLog (@\"removeObject: receiver is not an instance of NSMutableSet in source file:%s:%ld\", IN_SOURCE_FILE, IN_SOURCE_LINE) ;\n"
  "  }else if (inObject == nil) {\n"
  "    NSLog (@\"removeObject: argument is nil in source file:%s:%ld\", IN_SOURCE_FILE, IN_SOURCE_LINE) ;\n"
  "  }\n"
  "  [self removeObject:inObject] ;\n"
  "}\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "@end\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#ifdef PM_COCOA_DEBUG\n"
  "  void routineCheckMethodSwizzling (Method inOriginal,\n"
  "                                    Method inSwizzled,\n"
  "                                    const char * inFile,\n"
  "                                    const int inLine) {\n"
  "    if (NULL == inOriginal) {\n"
  "      presentErrorWindow (inFile, inLine, @\"Method swizzling: original is NULL\") ;\n"
  "    }\n"
  "    if (NULL == inSwizzled) {\n"
  "      presentErrorWindow (inFile, inLine, @\"Method swizzling: swizzled is NULL\") ;\n"
  "    }\n"
  "  }\n"
  "#endif\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//   NSData encoding                                                         *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "NSData * dataEncodedValue (id inValue) {\n"
  "  return [NSArchiver archivedDataWithRootObject:inValue] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "id valueFromData (NSData * inData) {\n"
  "  return (inData  == nil) \? nil : [NSUnarchiver unarchiveObjectWithData:inData] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//   BOOL                                                                    *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "BOOL boolFromNSNumber (id inValue) {\n"
  "  return [inValue boolValue] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "NSNumber * numberEncodedBool (BOOL inValue) {\n"
  "  return [NSNumber numberWithBool:inValue] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//   NSInteger                                                               *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "NSInteger NSIntegerFromNSNumber (id inValue) {\n"
  "  return [inValue integerValue] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "NSNumber * numberEncodedNSInteger (NSInteger inValue) {\n"
  "  return [NSNumber numberWithInteger:inValue] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//   double                                                                  *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "double doubleFromNSNumber (id inValue) {\n"
  "  return [inValue doubleValue] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "NSNumber * numberEncodedDouble (double inValue) {\n"
  "  return [NSNumber numberWithDouble:inValue] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//   Font                                                                    *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "NSData * dataFromFont (NSFont * inFont) {\n"
  "  return [NSArchiver archivedDataWithRootObject:inFont] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "NSFont * fontFromData (NSData * inDataEncodeFont) {\n"
  "  return (inDataEncodeFont == nil)\n"
  "    \? nil\n"
  "    : [NSUnarchiver unarchiveObjectWithData:inDataEncodeFont]\n"
  "  ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n" ;

static const cRegularFileWrapper gWrapperFile_37_objective_5F_c_5F_sources (
  "easy-bindings-utilities.m",
  "m",
  true, // Text file
  11149, // Text length
  gWrapperFileContent_37_objective_5F_c_5F_sources
) ;

//--- File '/easy-bindings-utilities.swift'

static const char * gWrapperFileContent_38_objective_5F_c_5F_sources = "import Cocoa\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//   presentErrorWindow                                                      *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "var gErrorWindows : NSWindow [] = []\n"
  "var origin = NSPoint (x:20.0, y:20.0)\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "func presentErrorWindow (file : String!,\n"
  "                         lineNumber : Int,\n"
  "                         errorMessage : String) {\n"
  "  var message = \"\"\n"
  "  message += \"File: \" + file + \"\\n\"\n"
  "  message += \"Line: \\(lineNumber)\\n\"\n"
  "  message += \"Message: \" + errorMessage + \"\\n\"\n"
  "  let r = NSRect (origin:origin, size:NSSize (width:300.0, height:200.0))\n"
  "  origin.x += 20.0 ;\n"
  "  origin.y += 20.0 ;\n"
  "  var window = NSWindow.init (\n"
  "    contentRect:r,\n"
  "    styleMask:NSTitledWindowMask | NSClosableWindowMask,\n"
  "    backing:NSBackingStoreBuffered,\n"
  "    defer:true\n"
  "  )\n"
  "  window.setTitle (\"Outlet Error\")\n"
  "  let contentView : NSView! = window.contentView () as NSView\n"
  "  let tfRect = NSInsetRect (contentView.bounds (), 10.0, 10.0)\n"
  "  var tf = NSTextField.init (frame:tfRect)\n"
  "  tf.setEditable (false)\n"
  "  tf.setSelectable (true)\n"
  "  tf.setFont (NSFont.boldSystemFontOfSize (0.0))\n"
  "  tf.setTextColor (NSColor.redColor ())\n"
  "  tf.setStringValue (message)\n"
  "  contentView.addSubview (tf)\n"
  "  NSBeep () ;\n"
  "  window.makeKeyAndOrderFront (nil)\n"
  "  //---\n"
  "  gErrorWindows += window\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "extension NSDictionary {\n"
  "\n"
  "  func readString (inKey : String) -> String {\n"
  "    var result = \"\"\n"
  "    let object : AnyObject = valueForKey (inKey)\n"
  "    if let s = object as\? String {\n"
  "      result = s\n"
  "    }\n"
  "    return result\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  func readNSColor (inKey : String) -> NSColor {\n"
  "    var result = NSColor.blackColor ()\n"
  "    let object : AnyObject = valueForKey (inKey)\n"
  "    if let d = object as\? NSData {\n"
  "      let c : AnyObject = NSUnarchiver.unarchiveObjectWithData (d)\n"
  "      if let color = c as\? NSColor {\n"
  "        result = color\n"
  "      }\n"
  "    }\n"
  "    return result\n"
  "  }\n"
  "\n"
  "  //---------------------------------------------------------------------------*\n"
  "\n"
  "  func readInt64 (inKey : String) -> Int64 {\n"
  "    var result : Int64 = 0\n"
  "    let object : AnyObject = valueForKey (inKey)\n"
  "    if let d = object as\? NSNumber {\n"
  "      result = d.longLongValue ()\n"
  "    }\n"
  "    return result\n"
  "  }\n"
  "\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n" ;

static const cRegularFileWrapper gWrapperFile_38_objective_5F_c_5F_sources (
  "easy-bindings-utilities.swift",
  "swift",
  true, // Text file
  2555, // Text length
  gWrapperFileContent_38_objective_5F_c_5F_sources
) ;

//--- File '/load-store-functions.h'

static const char * gWrapperFileContent_39_objective_5F_c_5F_sources = "//\n"
  "//  NSMutableDictionary+PMSetters.h\n"
  "//  essai\n"
  "//\n"
  "//  Created by Pierre Molinaro on 28/06/13.\n"
  "//  Copyright (c) 2013 ECN / IRCCyN. All rights reserved.\n"
  "//\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "#import <Foundation/Foundation.h>\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "@class PMManagedObject ;\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//  STORE ROUTINES                                                             *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "void storeBOOLInDictionary (const BOOL inBool, NSString * inKey, NSMutableDictionary * ioDictionary) ;\n"
  "\n"
  "void storeNSIntegerInDictionary (const NSInteger inValue, NSString * inKey, NSMutableDictionary * ioDictionary) ;\n"
  "\n"
  "void storeNSStringInDictionary (NSString * inString, NSString * inKey, NSMutableDictionary * ioDictionary) ;\n"
  "\n"
  "void storeNSColorInDictionary (NSColor * inColor, NSString * inKey, NSMutableDictionary * ioDictionary) ;\n"
  "\n"
  "void storeEntityInDictionary (PMManagedObject * inObject, NSString * inKey, NSMutableDictionary * ioDictionary) ;\n"
  "\n"
  "void storeEntityArrayInDictionary (NSArray * inObjectArray, NSString * inKey, NSMutableDictionary * ioDictionary) ;\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//  LOAD ROUTINES                                                              *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "BOOL readBOOLFromDictionary (NSString * inKey, NSDictionary * inDictionary) ;\n"
  "\n"
  "NSInteger readNSIntegerFromDictionary (NSString * inKey, NSDictionary * inDictionary) ;\n"
  "\n"
  "NSString * readNSStringFromDictionary (NSString * inKey, NSDictionary * inDictionary) ;\n"
  "\n"
  "NSColor * readNSColorFromDictionary (NSString * inKey, NSDictionary * inDictionary) ;\n"
  "\n"
  "id readEntityFromDictionary (NSString * inKey,\n"
  "                             NSDictionary * inDictionary,\n"
  "                             NSArray * inManagedEntityArray) ;\n"
  "\n"
  "NSMutableArray * readEntityArrayFromDictionary (NSString * inKey,\n"
  "                                                NSDictionary * inDictionary,\n"
  "                                                NSArray * inManagedEntityArray) ;\n"
  "\n"
  "//---------------------------------------------------------------------------*\n" ;

static const cRegularFileWrapper gWrapperFile_39_objective_5F_c_5F_sources (
  "load-store-functions.h",
  "h",
  true, // Text file
  2356, // Text length
  gWrapperFileContent_39_objective_5F_c_5F_sources
) ;

//--- File '/load-store-functions.m'

static const char * gWrapperFileContent_40_objective_5F_c_5F_sources = "//\n"
  "//  NSMutableDictionary+PMSetters.m\n"
  "//  essai\n"
  "//\n"
  "//  Created by Pierre Molinaro on 28/06/13.\n"
  "//  Copyright (c) 2013 ECN / IRCCyN. All rights reserved.\n"
  "//\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#import \"load-store-functions.h\"\n"
  "#import \"PMManagedObject.h\"\n"
  "#import \"easy-bindings-utilities.h\"\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//  STORE ROUTINES                                                             *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "void storeBOOLInDictionary (const BOOL inBool,\n"
  "                            NSString * inKey,\n"
  "                            NSMutableDictionary * ioDictionary) {\n"
  "  [ioDictionary setObject:[NSNumber numberWithBool:inBool] forKey:inKey] ;\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "void storeNSIntegerInDictionary (const NSInteger inValue,\n"
  "                                 NSString * inKey,\n"
  "                                 NSMutableDictionary * ioDictionary) {\n"
  "  [ioDictionary setObject:[NSNumber numberWithInteger:inValue] forKey:inKey] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "void storeNSStringInDictionary (NSString * inString,\n"
  "                                NSString * inKey,\n"
  "                                NSMutableDictionary * ioDictionary) {\n"
  "  if (inString.length > 0) {\n"
  "    [ioDictionary setObject:inString forKey:inKey] ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "void storeNSColorInDictionary (NSColor * inColor,\n"
  "                               NSString * inKey,\n"
  "                               NSMutableDictionary * ioDictionary) {\n"
  "  if (inColor != nil) {\n"
  "    [ioDictionary setObject:[NSArchiver archivedDataWithRootObject:inColor] forKey:inKey] ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "void storeEntityInDictionary (PMManagedObject * inObject,\n"
  "                              NSString * inKey,\n"
  "                              NSMutableDictionary * ioDictionary) {\n"
  "  if (nil != inObject) {\n"
  "    [ioDictionary\n"
  "      setObject:[NSNumber numberWithUnsignedInteger:inObject.savingIndex]\n"
  "      forKey:inKey\n"
  "    ] ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "void storeEntityArrayInDictionary (NSArray * inEntityArray,\n"
  "                                   NSString * inKey,\n"
  "                                   NSMutableDictionary * ioDictionary) {\n"
  "  if (inEntityArray.count > 0) {\n"
  "    NSMutableArray * indexArray = [NSMutableArray new] ;\n"
  "    for (PMManagedObject * object in inEntityArray) {\n"
  "      [indexArray addObject:[NSNumber numberWithUnsignedInteger:object.savingIndex]] ;\n"
  "    }\n"
  "    [ioDictionary setObject:indexArray forKey:inKey] ;\n"
  "    macroReleaseSetToNil (indexArray) ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//-----------------------------------------------------------------------------*\n"
  "//  LOAD ROUTINES                                                              *\n"
  "//-----------------------------------------------------------------------------*\n"
  "\n"
  "BOOL readBOOLFromDictionary (NSString * inKey, NSDictionary * inDictionary) {\n"
  "  return [[inDictionary valueForKey:inKey] boolValue] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "NSString * readNSStringFromDictionary (NSString * inKey, NSDictionary * inDictionary) {\n"
  "  return [inDictionary valueForKey:inKey] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "NSInteger readNSIntegerFromDictionary (NSString * inKey, NSDictionary * inDictionary) {\n"
  "  return [[inDictionary valueForKey:inKey] integerValue] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "NSColor * readNSColorFromDictionary (NSString * inKey, NSDictionary * inDictionary) {\n"
  "  NSData * data = [inDictionary valueForKey:inKey] ;\n"
  "  return (nil == data) \? nil : [NSUnarchiver unarchiveObjectWithData:data] ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "id readEntityFromDictionary (NSString * inKey,\n"
  "                             NSDictionary * inDictionary,\n"
  "                             NSArray * inManagedEntityArray) {\n"
  "  NSNumber * value = [inDictionary valueForKey:inKey] ;\n"
  "  id result = nil ;\n"
  "  if (nil != value) {\n"
  "    result = [inManagedEntityArray objectAtIndex:value.unsignedIntegerValue] ;\n"
  "  }\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "NSMutableArray * readEntityArrayFromDictionary (NSString * inKey,\n"
  "                                                NSDictionary * inDictionary,\n"
  "                                                NSArray * inManagedEntityArray) {\n"
  "  NSMutableArray * result = [NSMutableArray new] ;\n"
  "  NSArray * indexArray = [inDictionary valueForKey:inKey] ;\n"
  "  for (NSNumber * number in indexArray) {\n"
  "    id object = [inManagedEntityArray objectAtIndex:number.unsignedIntegerValue] ;\n"
  "    [result addObject:object] ;\n"
  "  }\n"
  "  macroAutorelease (result) ;\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n" ;

static const cRegularFileWrapper gWrapperFile_40_objective_5F_c_5F_sources (
  "load-store-functions.m",
  "m",
  true, // Text file
  5169, // Text length
  gWrapperFileContent_40_objective_5F_c_5F_sources
) ;

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_objective_5F_c_5F_sources_0 [42] = {
  & gWrapperFile_0_objective_5F_c_5F_sources,
  & gWrapperFile_1_objective_5F_c_5F_sources,
  & gWrapperFile_2_objective_5F_c_5F_sources,
  & gWrapperFile_3_objective_5F_c_5F_sources,
  & gWrapperFile_4_objective_5F_c_5F_sources,
  & gWrapperFile_5_objective_5F_c_5F_sources,
  & gWrapperFile_6_objective_5F_c_5F_sources,
  & gWrapperFile_7_objective_5F_c_5F_sources,
  & gWrapperFile_8_objective_5F_c_5F_sources,
  & gWrapperFile_9_objective_5F_c_5F_sources,
  & gWrapperFile_10_objective_5F_c_5F_sources,
  & gWrapperFile_11_objective_5F_c_5F_sources,
  & gWrapperFile_12_objective_5F_c_5F_sources,
  & gWrapperFile_13_objective_5F_c_5F_sources,
  & gWrapperFile_14_objective_5F_c_5F_sources,
  & gWrapperFile_15_objective_5F_c_5F_sources,
  & gWrapperFile_16_objective_5F_c_5F_sources,
  & gWrapperFile_17_objective_5F_c_5F_sources,
  & gWrapperFile_18_objective_5F_c_5F_sources,
  & gWrapperFile_19_objective_5F_c_5F_sources,
  & gWrapperFile_20_objective_5F_c_5F_sources,
  & gWrapperFile_21_objective_5F_c_5F_sources,
  & gWrapperFile_22_objective_5F_c_5F_sources,
  & gWrapperFile_23_objective_5F_c_5F_sources,
  & gWrapperFile_24_objective_5F_c_5F_sources,
  & gWrapperFile_25_objective_5F_c_5F_sources,
  & gWrapperFile_26_objective_5F_c_5F_sources,
  & gWrapperFile_27_objective_5F_c_5F_sources,
  & gWrapperFile_28_objective_5F_c_5F_sources,
  & gWrapperFile_29_objective_5F_c_5F_sources,
  & gWrapperFile_30_objective_5F_c_5F_sources,
  & gWrapperFile_31_objective_5F_c_5F_sources,
  & gWrapperFile_32_objective_5F_c_5F_sources,
  & gWrapperFile_33_objective_5F_c_5F_sources,
  & gWrapperFile_34_objective_5F_c_5F_sources,
  & gWrapperFile_35_objective_5F_c_5F_sources,
  & gWrapperFile_36_objective_5F_c_5F_sources,
  & gWrapperFile_37_objective_5F_c_5F_sources,
  & gWrapperFile_38_objective_5F_c_5F_sources,
  & gWrapperFile_39_objective_5F_c_5F_sources,
  & gWrapperFile_40_objective_5F_c_5F_sources,
  NULL
} ;

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_objective_5F_c_5F_sources_0 [1] = {
  NULL
} ;

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_objective_5F_c_5F_sources (
  "",
  41,
  gWrapperAllFiles_objective_5F_c_5F_sources_0,
  0,
  gWrapperAllDirectories_objective_5F_c_5F_sources_0
) ;


//-----------------------------------------------------------------------------*
//                                                                             *
//                         Routine 'semanticAnalysis'                          *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_semanticAnalysis (const GALGAS_unifiedTypeMap constinArgument_inUnifiedTypeMap,
                               const GALGAS_lstringlist constinArgument_inSortedKeys,
                               const GALGAS_string constinArgument_inSourceFile,
                               const GALGAS_cursorList constinArgument_inCursorList,
                               const GALGAS_location constinArgument_inEndOfSourceFile,
                               C_Compiler * inCompiler
                               COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string var_outputDirectory = constinArgument_inSourceFile.reader_stringByDeletingLastPathComponent (SOURCE_FILE_AT_LINE (116)) ;
  GALGAS_observablePropertyMapMap var_observablePropertyMapMap = GALGAS_observablePropertyMapMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (118)) ;
  GALGAS_transientDependencyGraph var_transientDependencyGraph = GALGAS_transientDependencyGraph::constructor_emptyGraph (SOURCE_FILE_AT_LINE (119)) ;
  cEnumerator_lstringlist enumerator_4920 (constinArgument_inSortedKeys, kEnumeration_up) ;
  while (enumerator_4920.hasCurrentObject ()) {
    GALGAS_astDeclaration var_declaration ;
    GALGAS_ebType joker_4977_0 ; // Joker input parameter
    constinArgument_inUnifiedTypeMap.method_searchKey (enumerator_4920.current_mValue (HERE), joker_4977_0, var_declaration, inCompiler COMMA_SOURCE_FILE_AT_LINE (121)) ;
    callCategoryMethod_buildObservablePropertyMap ((const cPtr_astDeclaration *) var_declaration.ptr (), constinArgument_inUnifiedTypeMap, var_observablePropertyMapMap, var_transientDependencyGraph, inCompiler COMMA_SOURCE_FILE_AT_LINE (126)) ;
    enumerator_4920.gotoNextObject () ;
  }
  GALGAS_contextAnalysisStruct var_contextAnalysisStruct = GALGAS_contextAnalysisStruct::constructor_default (SOURCE_FILE_AT_LINE (132)) ;
  var_contextAnalysisStruct.mAttribute_mObservablePropertyMapMap = var_observablePropertyMapMap ;
  var_contextAnalysisStruct.mAttribute_mTransientDependencyGraph = var_transientDependencyGraph ;
  GALGAS_stringlist var_predefinedCursorList ;
  {
  routine_cursorAnalysis (constinArgument_inCursorList, var_contextAnalysisStruct, var_predefinedCursorList, inCompiler COMMA_SOURCE_FILE_AT_LINE (136)) ;
  }
  GALGAS_generationList var_generationList = GALGAS_generationList::constructor_emptyList (SOURCE_FILE_AT_LINE (142)) ;
  cEnumerator_lstringlist enumerator_5614 (constinArgument_inSortedKeys, kEnumeration_up) ;
  while (enumerator_5614.hasCurrentObject ()) {
    GALGAS_astDeclaration var_declaration ;
    GALGAS_ebType joker_5671_0 ; // Joker input parameter
    constinArgument_inUnifiedTypeMap.method_searchKey (enumerator_5614.current_mValue (HERE), joker_5671_0, var_declaration, inCompiler COMMA_SOURCE_FILE_AT_LINE (144)) ;
    callCategoryMethod_semanticAnalysis ((const cPtr_astDeclaration *) var_declaration.ptr (), constinArgument_inUnifiedTypeMap, var_contextAnalysisStruct, var_generationList, inCompiler COMMA_SOURCE_FILE_AT_LINE (149)) ;
    enumerator_5614.gotoNextObject () ;
  }
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE_AT_LINE (156)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    cEnumerator_entityMap enumerator_5983 (var_contextAnalysisStruct.mAttribute_mEntityMap, kEnumeration_up) ;
    while (enumerator_5983.hasCurrentObject ()) {
      cEnumerator_relationshipMap enumerator_6024 (enumerator_5983.current_mCurrentRelationshipMap (HERE), kEnumeration_up) ;
      while (enumerator_6024.hasCurrentObject ()) {
        GALGAS_relationshipMap var_destinationEntityRelationshipMap ;
        GALGAS_string joker_6126_9 ; // Joker input parameter
        GALGAS_attributeListForImplementation joker_6126_8 ; // Joker input parameter
        GALGAS_attributeListForImplementation joker_6126_7 ; // Joker input parameter
        GALGAS_attributeListForImplementation joker_6126_6 ; // Joker input parameter
        GALGAS_transientListForImplementation joker_6126_5 ; // Joker input parameter
        GALGAS_relationshipList joker_6126_4 ; // Joker input parameter
        GALGAS_relationshipList joker_6126_3 ; // Joker input parameter
        GALGAS_propertyMap joker_6126_2 ; // Joker input parameter
        GALGAS_relationshipMap joker_6126_1 ; // Joker input parameter
        GALGAS_fileInclusionSet joker_6201_2 ; // Joker input parameter
        GALGAS_signListForGeneration joker_6201_1 ; // Joker input parameter
        var_contextAnalysisStruct.mAttribute_mEntityMap.method_searchKey (enumerator_6024.current_mDestinationEntityName (HERE), joker_6126_9, joker_6126_8, joker_6126_7, joker_6126_6, joker_6126_5, joker_6126_4, joker_6126_3, joker_6126_2, joker_6126_1, var_destinationEntityRelationshipMap, joker_6201_2, joker_6201_1, inCompiler COMMA_SOURCE_FILE_AT_LINE (159)) ;
        GALGAS_lstring var_inverseOfInverseRelationshipName ;
        GALGAS_bool var_inverseIsToMany ;
        GALGAS_bool joker_6315_2 ; // Joker input parameter
        GALGAS_lstring joker_6315_1 ; // Joker input parameter
        GALGAS_deleteRuleEnum joker_6415_0 ; // Joker input parameter
        var_destinationEntityRelationshipMap.method_searchKey (enumerator_6024.current_mInverseRelationshipName (HERE), joker_6315_2, joker_6315_1, var_inverseOfInverseRelationshipName, var_inverseIsToMany, joker_6415_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (165)) ;
        const enumGalgasBool test_1 = GALGAS_bool (kIsNotEqual, enumerator_6024.current_lkey (HERE).mAttribute_string.objectCompare (var_inverseOfInverseRelationshipName.mAttribute_string)).boolEnum () ;
        if (kBoolTrue == test_1) {
          GALGAS_location location_2 (enumerator_6024.current_mInverseRelationshipName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_2, GALGAS_string ("the inverse relationship does not name '").operator_concat (enumerator_6024.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (173)) COMMA_SOURCE_FILE_AT_LINE (173)).operator_concat (GALGAS_string ("' relationship as inverse") COMMA_SOURCE_FILE_AT_LINE (173)) COMMA_SOURCE_FILE_AT_LINE (173)) ;
        }
        const enumGalgasBool test_3 = GALGAS_bool (kIsNotEqual, enumerator_6024.current_mIsToMany (HERE).objectCompare (var_inverseIsToMany)).boolEnum () ;
        if (kBoolTrue == test_3) {
          //--- @ifExpressionForGeneration
          GALGAS_string temp_4 ;
          const enumGalgasBool test_5 = var_inverseIsToMany.boolEnum () ;
          if (kBoolTrue == test_5) {
            temp_4 = GALGAS_string ("to many") ;
          }else if (kBoolFalse == test_5) {
            temp_4 = GALGAS_string ("to one") ;
          }
          GALGAS_location location_6 (enumerator_6024.current_mInverseRelationshipName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_6, GALGAS_string ("the inverse relationship is ").operator_concat (temp_4 COMMA_SOURCE_FILE_AT_LINE (176)) COMMA_SOURCE_FILE_AT_LINE (176)) ;
        }
        enumerator_6024.gotoNextObject () ;
      }
      enumerator_5983.gotoNextObject () ;
    }
  }
  const enumGalgasBool test_7 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE_AT_LINE (182)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_7) {
    cEnumerator_generationList enumerator_6961 (var_generationList, kEnumeration_up) ;
    while (enumerator_6961.hasCurrentObject ()) {
      callCategoryMethod_generate ((const cPtr_generation *) enumerator_6961.current_mGeneration (HERE).ptr (), var_outputDirectory, inCompiler COMMA_SOURCE_FILE_AT_LINE (184)) ;
      enumerator_6961.gotoNextObject () ;
    }
    {
    routine_generateCursorCode (var_contextAnalysisStruct.mAttribute_mUserCursorMap, var_predefinedCursorList, var_outputDirectory, inCompiler COMMA_SOURCE_FILE_AT_LINE (186)) ;
    }
    {
    routine_generateEntityFactory (var_contextAnalysisStruct.mAttribute_mEntityMap, var_outputDirectory, inCompiler COMMA_SOURCE_FILE_AT_LINE (191)) ;
    }
  }
  const enumGalgasBool test_8 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE_AT_LINE (194)).objectCompare (GALGAS_uint ((uint32_t) 0U))).operator_and (GALGAS_bool (gOption_easyBindings_5F_options_outputTransientDependencyGraph.reader_value ()) COMMA_SOURCE_FILE_AT_LINE (194)).boolEnum () ;
  if (kBoolTrue == test_8) {
    GALGAS_string var_s = var_contextAnalysisStruct.mAttribute_mTransientDependencyGraph.reader_graphviz (SOURCE_FILE_AT_LINE (195)) ;
    GALGAS_string var_path = constinArgument_inSourceFile.operator_concat (GALGAS_string (".transientDependancyGraph.dot") COMMA_SOURCE_FILE_AT_LINE (196)) ;
    GALGAS_bool joker_7587_0 ; // Joker input parameter
    var_s.method_writeToFileWhenDifferentContents (var_path, joker_7587_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (197)) ;
  }
  GALGAS__32_stringlist var_transientDependencyArcList = var_contextAnalysisStruct.mAttribute_mTransientDependencyGraph.reader_edges (SOURCE_FILE_AT_LINE (200)) ;
  GALGAS_stringlist var_sortedTransientOrderedList = GALGAS_stringlist::constructor_emptyList (SOURCE_FILE_AT_LINE (201)) ;
  const enumGalgasBool test_9 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE_AT_LINE (202)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_9) {
    const enumGalgasBool test_10 = GALGAS_bool (kIsStrictSup, var_contextAnalysisStruct.mAttribute_mTransientDependencyGraph.reader_undefinedNodeCount (SOURCE_FILE_AT_LINE (203)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
    if (kBoolTrue == test_10) {
      cEnumerator_stringlist enumerator_8001 (var_contextAnalysisStruct.mAttribute_mTransientDependencyGraph.reader_undefinedNodeKeyList (SOURCE_FILE_AT_LINE (204)), kEnumeration_up) ;
      while (enumerator_8001.hasCurrentObject ()) {
        inCompiler->emitSemanticError (constinArgument_inEndOfSourceFile, GALGAS_string ("the '").operator_concat (enumerator_8001.current_mValue (HERE) COMMA_SOURCE_FILE_AT_LINE (205)).operator_concat (GALGAS_string ("' property is not defined") COMMA_SOURCE_FILE_AT_LINE (205)) COMMA_SOURCE_FILE_AT_LINE (205)) ;
        enumerator_8001.gotoNextObject () ;
      }
    }else if (kBoolFalse == test_10) {
      GALGAS_stringlist var_unsortedTransientList ;
      GALGAS_lstringlist joker_8234_0 ; // Joker input parameter
      GALGAS_lstringlist joker_8288_0 ; // Joker input parameter
      var_contextAnalysisStruct.mAttribute_mTransientDependencyGraph.method_topologicalSort (var_sortedTransientOrderedList, joker_8234_0, var_unsortedTransientList, joker_8288_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (208)) ;
      const enumGalgasBool test_11 = GALGAS_bool (kIsStrictSup, var_unsortedTransientList.reader_length (SOURCE_FILE_AT_LINE (214)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
      if (kBoolTrue == test_11) {
        GALGAS_string var_s = var_unsortedTransientList.reader_length (SOURCE_FILE_AT_LINE (215)).reader_string (SOURCE_FILE_AT_LINE (215)).operator_concat (GALGAS_string (" transient declarations are involved in circular dependancies:") COMMA_SOURCE_FILE_AT_LINE (215)) ;
        cEnumerator_stringlist enumerator_8516 (var_unsortedTransientList, kEnumeration_up) ;
        while (enumerator_8516.hasCurrentObject ()) {
          var_s.dotAssign_operation (GALGAS_string ("\n"
            "-  ").operator_concat (enumerator_8516.current_mValue (HERE) COMMA_SOURCE_FILE_AT_LINE (217)) COMMA_SOURCE_FILE_AT_LINE (217)) ;
          enumerator_8516.gotoNextObject () ;
        }
        inCompiler->emitSemanticError (constinArgument_inEndOfSourceFile, var_s COMMA_SOURCE_FILE_AT_LINE (219)) ;
      }
    }
  }
  {
  routine_generateTransientDependencyFiles (var_transientDependencyArcList, var_outputDirectory, var_sortedTransientOrderedList, inCompiler COMMA_SOURCE_FILE_AT_LINE (225)) ;
  }
  GALGAS_stringset var_extensionSet = GALGAS_stringset::constructor_setWithString (GALGAS_string ("xib") COMMA_SOURCE_FILE_AT_LINE (231)) ;
  const enumGalgasBool test_12 = GALGAS_bool (gOption_easyBindings_5F_options_outputSwift.reader_value ()).boolEnum () ;
  if (kBoolTrue == test_12) {
    var_extensionSet.addAssign_operation (GALGAS_string ("swift") COMMA_SOURCE_FILE_AT_LINE (233)) ;
  }else if (kBoolFalse == test_12) {
    var_extensionSet.addAssign_operation (GALGAS_string ("m") COMMA_SOURCE_FILE_AT_LINE (235)) ;
    var_extensionSet.addAssign_operation (GALGAS_string ("h") COMMA_SOURCE_FILE_AT_LINE (236)) ;
  }
  GALGAS_stringset var_generateSet = GALGAS_stringset::constructor_emptySet (SOURCE_FILE_AT_LINE (239)) ;
  var_generateSet.addAssign_operation (GALGAS_string ("easy-bindings-utilities") COMMA_SOURCE_FILE_AT_LINE (240)) ;
  var_generateSet.addAssign_operation (GALGAS_string ("PMAllocationDebug") COMMA_SOURCE_FILE_AT_LINE (241)) ;
  const enumGalgasBool test_13 = var_contextAnalysisStruct.mAttribute_mContainsDocument.boolEnum () ;
  if (kBoolTrue == test_13) {
    var_generateSet.addAssign_operation (GALGAS_string ("PMUndoManager") COMMA_SOURCE_FILE_AT_LINE (243)) ;
    var_generateSet.addAssign_operation (GALGAS_string ("PMManagedDocument") COMMA_SOURCE_FILE_AT_LINE (244)) ;
    var_generateSet.addAssign_operation (GALGAS_string ("NSData+BZ2compression") COMMA_SOURCE_FILE_AT_LINE (245)) ;
    var_generateSet.addAssign_operation (GALGAS_string ("NSData+BZ2compression") COMMA_SOURCE_FILE_AT_LINE (246)) ;
    var_generateSet.addAssign_operation (GALGAS_string ("NSData+PMGZcompression") COMMA_SOURCE_FILE_AT_LINE (247)) ;
    var_generateSet.addAssign_operation (GALGAS_string ("NSMutableData+PMWrites") COMMA_SOURCE_FILE_AT_LINE (248)) ;
    var_generateSet.addAssign_operation (GALGAS_string ("PMDataScanner") COMMA_SOURCE_FILE_AT_LINE (249)) ;
  }
  const enumGalgasBool test_14 = GALGAS_bool (kIsStrictSup, var_contextAnalysisStruct.mAttribute_mEntityMap.reader_count (SOURCE_FILE_AT_LINE (251)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_14) {
    var_generateSet.addAssign_operation (GALGAS_string ("load-store-functions") COMMA_SOURCE_FILE_AT_LINE (252)) ;
    var_generateSet.addAssign_operation (GALGAS_string ("PMManagedObject") COMMA_SOURCE_FILE_AT_LINE (253)) ;
    var_generateSet.addAssign_operation (GALGAS_string ("PMObjectManager") COMMA_SOURCE_FILE_AT_LINE (254)) ;
    var_generateSet.addAssign_operation (GALGAS_string ("PMAttributeDescription") COMMA_SOURCE_FILE_AT_LINE (255)) ;
    var_generateSet.addAssign_operation (GALGAS_string ("PMRelationshipDescription") COMMA_SOURCE_FILE_AT_LINE (256)) ;
    var_generateSet.addAssign_operation (GALGAS_string ("PMEntityArrayController") COMMA_SOURCE_FILE_AT_LINE (257)) ;
    var_generateSet.addAssign_operation (GALGAS_string ("PMEntityController") COMMA_SOURCE_FILE_AT_LINE (258)) ;
  }
  GALGAS_filewrapper var_fw = GALGAS_filewrapper (gWrapperDirectory_0_objective_5F_c_5F_sources) ;
  cEnumerator_stringlist enumerator_10108 (var_fw.reader_allTextFilePathes (SOURCE_FILE_AT_LINE (262)), kEnumeration_up) ;
  while (enumerator_10108.hasCurrentObject ()) {
    GALGAS_string var_sourceName = enumerator_10108.current_mValue (HERE).reader_lastPathComponent (SOURCE_FILE_AT_LINE (263)) ;
    const enumGalgasBool test_15 = var_generateSet.reader_hasKey (var_sourceName.reader_stringByDeletingPathExtension (SOURCE_FILE_AT_LINE (264)) COMMA_SOURCE_FILE_AT_LINE (264)).operator_and (var_extensionSet.reader_hasKey (var_sourceName.reader_pathExtension (SOURCE_FILE_AT_LINE (264)) COMMA_SOURCE_FILE_AT_LINE (264)) COMMA_SOURCE_FILE_AT_LINE (264)).boolEnum () ;
    if (kBoolTrue == test_15) {
      {
      GALGAS_string::class_method_generateFile (var_outputDirectory.operator_concat (enumerator_10108.current_mValue (HERE).reader_stringByDeletingLastPathComponent (SOURCE_FILE_AT_LINE (266)) COMMA_SOURCE_FILE_AT_LINE (266)), var_sourceName, var_fw.reader_textFileContentsAtPath (enumerator_10108.current_mValue (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (268)), inCompiler COMMA_SOURCE_FILE_AT_LINE (265)) ;
      }
    }
    enumerator_10108.gotoNextObject () ;
  }
}


//-----------------------------------------------------------------------------*
//                                                                             *
//                              Routine 'before'                               *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_before (C_Compiler * /* inCompiler */
                     COMMA_UNUSED_LOCATION_ARGS) {
}


//-----------------------------------------------------------------------------*
//                                                                             *
//                           Routine 'programRule_0'                           *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_programRule_5F__30_ (const GALGAS_lstring constinArgument_inSourceFile,
                                  C_Compiler * inCompiler
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_astDeclarationList var_declarationList = GALGAS_astDeclarationList::constructor_emptyList (SOURCE_FILE_AT_LINE (33)) ;
  GALGAS_cursorList var_cursorList = GALGAS_cursorList::constructor_emptyList (SOURCE_FILE_AT_LINE (35)) ;
  GALGAS_location joker_1202_0 ; // Joker input parameter
  cGrammar_easyBindings_5F_grammar::_performSourceStringParsing_ (inCompiler, GALGAS_string (filewrapperTemplate_predefinedOutletClasses_sourceFile (inCompiler COMMA_SOURCE_FILE_AT_LINE (36))), var_declarationList, var_cursorList, joker_1202_0 COMMA_SOURCE_FILE_AT_LINE (36)) ;
  GALGAS_location var_endOfSourceFile ;
  cGrammar_easyBindings_5F_grammar::_performSourceFileParsing_ (inCompiler, constinArgument_inSourceFile, var_declarationList, var_cursorList, var_endOfSourceFile COMMA_SOURCE_FILE_AT_LINE (42)) ;
  var_declarationList.addAssign_operation (GALGAS_predefinedTypeDeclaration::constructor_new (GALGAS_string ("NSString"), GALGAS_typeKind::constructor_stringType (SOURCE_FILE_AT_LINE (48)) COMMA_SOURCE_FILE_AT_LINE (48)) COMMA_SOURCE_FILE_AT_LINE (48)) ;
  var_declarationList.addAssign_operation (GALGAS_predefinedTypeDeclaration::constructor_new (GALGAS_string ("NSColor"), GALGAS_typeKind::constructor_colorType (SOURCE_FILE_AT_LINE (49)) COMMA_SOURCE_FILE_AT_LINE (49)) COMMA_SOURCE_FILE_AT_LINE (49)) ;
  var_declarationList.addAssign_operation (GALGAS_predefinedTypeDeclaration::constructor_new (GALGAS_string ("NSData"), GALGAS_typeKind::constructor_dataType (SOURCE_FILE_AT_LINE (50)) COMMA_SOURCE_FILE_AT_LINE (50)) COMMA_SOURCE_FILE_AT_LINE (50)) ;
  var_declarationList.addAssign_operation (GALGAS_predefinedTypeDeclaration::constructor_new (GALGAS_string ("NSDate"), GALGAS_typeKind::constructor_dateType (SOURCE_FILE_AT_LINE (51)) COMMA_SOURCE_FILE_AT_LINE (51)) COMMA_SOURCE_FILE_AT_LINE (51)) ;
  var_declarationList.addAssign_operation (GALGAS_predefinedTypeDeclaration::constructor_new (GALGAS_string ("NSFont"), GALGAS_typeKind::constructor_fontType (SOURCE_FILE_AT_LINE (52)) COMMA_SOURCE_FILE_AT_LINE (52)) COMMA_SOURCE_FILE_AT_LINE (52)) ;
  var_declarationList.addAssign_operation (GALGAS_predefinedTypeDeclaration::constructor_new (GALGAS_string ("NSImage"), GALGAS_typeKind::constructor_imageType (SOURCE_FILE_AT_LINE (53)) COMMA_SOURCE_FILE_AT_LINE (53)) COMMA_SOURCE_FILE_AT_LINE (53)) ;
  var_declarationList.addAssign_operation (GALGAS_predefinedTypeDeclaration::constructor_new (GALGAS_string ("NSMenu"), GALGAS_typeKind::constructor_menuType (SOURCE_FILE_AT_LINE (54)) COMMA_SOURCE_FILE_AT_LINE (54)) COMMA_SOURCE_FILE_AT_LINE (54)) ;
  var_declarationList.addAssign_operation (GALGAS_predefinedTypeDeclaration::constructor_new (GALGAS_string ("NSBezierPath"), GALGAS_typeKind::constructor_bezierPathType (SOURCE_FILE_AT_LINE (55)) COMMA_SOURCE_FILE_AT_LINE (55)) COMMA_SOURCE_FILE_AT_LINE (55)) ;
  var_declarationList.addAssign_operation (GALGAS_predefinedTypeDeclaration::constructor_new (GALGAS_string ("Integer"), GALGAS_typeKind::constructor_integerType (SOURCE_FILE_AT_LINE (56)) COMMA_SOURCE_FILE_AT_LINE (56)) COMMA_SOURCE_FILE_AT_LINE (56)) ;
  var_declarationList.addAssign_operation (GALGAS_predefinedTypeDeclaration::constructor_new (GALGAS_string ("UInteger"), GALGAS_typeKind::constructor_uintegerType (SOURCE_FILE_AT_LINE (57)) COMMA_SOURCE_FILE_AT_LINE (57)) COMMA_SOURCE_FILE_AT_LINE (57)) ;
  var_declarationList.addAssign_operation (GALGAS_predefinedTypeDeclaration::constructor_new (GALGAS_string ("Bool"), GALGAS_typeKind::constructor_boolType (SOURCE_FILE_AT_LINE (58)) COMMA_SOURCE_FILE_AT_LINE (58)) COMMA_SOURCE_FILE_AT_LINE (58)) ;
  var_declarationList.addAssign_operation (GALGAS_predefinedTypeDeclaration::constructor_new (GALGAS_string ("Double"), GALGAS_typeKind::constructor_doubleType (SOURCE_FILE_AT_LINE (59)) COMMA_SOURCE_FILE_AT_LINE (59)) COMMA_SOURCE_FILE_AT_LINE (59)) ;
  var_declarationList.addAssign_operation (GALGAS_predefinedTypeDeclaration::constructor_new (GALGAS_string ("enum"), GALGAS_typeKind::constructor_enumType (SOURCE_FILE_AT_LINE (60)) COMMA_SOURCE_FILE_AT_LINE (60)) COMMA_SOURCE_FILE_AT_LINE (60)) ;
  GALGAS_unifiedTypeMap var_unifiedTypeMap = GALGAS_unifiedTypeMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (62)) ;
  cEnumerator_astDeclarationList enumerator_2715 (var_declarationList, kEnumeration_up) ;
  while (enumerator_2715.hasCurrentObject ()) {
    callCategoryMethod_typeInventory ((const cPtr_astDeclaration *) enumerator_2715.current_mDeclaration (HERE).ptr (), var_unifiedTypeMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (65)) ;
    enumerator_2715.gotoNextObject () ;
  }
  const enumGalgasBool test_0 = GALGAS_bool (gOption_easyBindings_5F_options_outputClassDependencyGraph.reader_value ()).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_string var_s = var_unifiedTypeMap.reader_edgeGraphvizRepresentation (SOURCE_FILE_AT_LINE (68)) ;
    GALGAS_string var_path = constinArgument_inSourceFile.mAttribute_string.operator_concat (GALGAS_string (".classDependancyGraph.dot") COMMA_SOURCE_FILE_AT_LINE (69)) ;
    GALGAS_bool joker_3039_0 ; // Joker input parameter
    var_s.method_writeToFileWhenDifferentContents (var_path, joker_3039_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (70)) ;
  }
  GALGAS_lstringlist var_unsolvedProxyList = var_unifiedTypeMap.reader_unsolvedProxyList (SOURCE_FILE_AT_LINE (73)) ;
  cEnumerator_lstringlist enumerator_3221 (var_unsolvedProxyList, kEnumeration_up) ;
  while (enumerator_3221.hasCurrentObject ()) {
    GALGAS_location location_1 (enumerator_3221.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("type ").operator_concat (enumerator_3221.current_mValue (HERE).reader_string (SOURCE_FILE_AT_LINE (75)) COMMA_SOURCE_FILE_AT_LINE (75)).operator_concat (GALGAS_string (" is undefined") COMMA_SOURCE_FILE_AT_LINE (75)) COMMA_SOURCE_FILE_AT_LINE (75)) ;
    enumerator_3221.gotoNextObject () ;
  }
  const enumGalgasBool test_2 = GALGAS_bool (kIsEqual, var_unsolvedProxyList.reader_length (SOURCE_FILE_AT_LINE (78)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_2) {
    GALGAS_lstringlist var_sortedKeys ;
    GALGAS_lstringlist var_unsortedKeys ;
    var_unifiedTypeMap.method_topologicalSort (var_sortedKeys, var_unsortedKeys, inCompiler COMMA_SOURCE_FILE_AT_LINE (79)) ;
    const enumGalgasBool test_3 = GALGAS_bool (kIsStrictSup, var_unsortedKeys.reader_length (SOURCE_FILE_AT_LINE (80)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
    if (kBoolTrue == test_3) {
      GALGAS_string var_s = GALGAS_string ("cannot sort types ; the following types are involved in circular dependence:") ;
      cEnumerator_lstringlist enumerator_3664 (var_unsortedKeys, kEnumeration_up) ;
      while (enumerator_3664.hasCurrentObject ()) {
        var_s.dotAssign_operation (GALGAS_string ("\n"
          "-- ").operator_concat (enumerator_3664.current_mValue (HERE).reader_string (SOURCE_FILE_AT_LINE (83)) COMMA_SOURCE_FILE_AT_LINE (83)) COMMA_SOURCE_FILE_AT_LINE (83)) ;
        enumerator_3664.gotoNextObject () ;
      }
      inCompiler->emitSemanticError (inCompiler->here (), var_s COMMA_SOURCE_FILE_AT_LINE (85)) ;
    }else if (kBoolFalse == test_3) {
      {
      routine_semanticAnalysis (var_unifiedTypeMap, var_sortedKeys, constinArgument_inSourceFile.mAttribute_string, var_cursorList, var_endOfSourceFile, inCompiler COMMA_SOURCE_FILE_AT_LINE (92)) ;
      }
    }
  }
}


//-----------------------------------------------------------------------------*
//                                                                             *
//                               Routine 'after'                               *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_after (C_Compiler * /* inCompiler */
                    COMMA_UNUSED_LOCATION_ARGS) {
}


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


