semantics easyBindingType :

#-----------------------------------------------------------------------------*

abstract class @easyBindingType {
}

#-----------------------------------------------------------------------------*

class @boolType, @integerType,
 @uintegerType,
 @decimalType, @doubleType,
 @stringType, @dataType, @dateType,
 @fontType, @imageType, @colorType,
 @valueType,
 @bezierPathType, @menuType extends @easyBindingType {
}

#-----------------------------------------------------------------------------*

class @objectArrayType extends @easyBindingType {
  @string mClassName ;
}

#-----------------------------------------------------------------------------*

class @toOneEntityType, @toManyEntitiesType extends @easyBindingType {
  @string mEntityName ;
}

#-----------------------------------------------------------------------------*

class @enumType extends @easyBindingType {
  @lstring mEnumTypeName ;
}

#----------------------------------------------------------------------------*

list @structFieldList {
  @easyBindingType mFieldType ;
  @string mFieldName ;
}

#-----------------------------------------------------------------------------*

class @structType extends @easyBindingType {
  @lstring mStructTypeName ;
  @structFieldList mFieldList ;
}

#-----------------------------------------------------------------------------*

abstract reader @easyBindingType ebTypeName -> @string outResult ;

override reader @boolType ebTypeName -> @string outResult : outResult := "BOOL" ; end reader ;
override reader @integerType ebTypeName -> @string outResult : outResult := "NSInteger" ; end reader ;
override reader @uintegerType ebTypeName -> @string outResult : outResult := "NSUInteger" ; end reader ;
override reader @decimalType ebTypeName -> @string outResult : outResult := "decimal" ; end reader ;
override reader @doubleType ebTypeName -> @string outResult : outResult := "double" ; end reader ;
override reader @stringType ebTypeName -> @string outResult : outResult := "NSString" ; end reader ;
override reader @dataType ebTypeName -> @string outResult : outResult := "NSData" ; end reader ;
override reader @dateType ebTypeName -> @string outResult : outResult := "NSDate" ; end reader ;
override reader @fontType ebTypeName -> @string outResult : outResult := "NSFont" ; end reader ;
override reader @imageType ebTypeName -> @string outResult : outResult := "NSImage" ; end reader ;
override reader @colorType ebTypeName -> @string outResult : outResult := "NSColor" ; end reader ;
override reader @valueType ebTypeName -> @string outResult : outResult := "NSValue" ; end reader ;
override reader @objectArrayType ebTypeName -> @string outResult : outResult := "NSArray" ; end reader ;
override reader @bezierPathType ebTypeName -> @string outResult : outResult := "NSBezierPath" ; end reader ;
override reader @menuType ebTypeName -> @string outResult : outResult := "NSMenu" ; end reader ;
override reader @toOneEntityType ebTypeName -> @string outResult : outResult := "PMManagedEntity" ; end reader ;
override reader @toManyEntitiesType ebTypeName -> @string outResult : outResult := "NSArray" ; end reader ;
override reader @enumType ebTypeName -> @string outResult : outResult := mEnumTypeName->string ; end reader ;
override reader @structType ebTypeName -> @string outResult : outResult := mStructTypeName->string ; end reader ;

#-----------------------------------------------------------------------------*

abstract reader @easyBindingType isClass -> @bool outResult ;

override reader @boolType isClass -> @bool outResult : outResult := false ; end reader ;
override reader @decimalType isClass -> @bool outResult : outResult := false ; end reader ;
override reader @integerType isClass -> @bool outResult : outResult := false ; end reader ;
override reader @uintegerType isClass -> @bool outResult : outResult := false ; end reader ;
override reader @doubleType isClass -> @bool outResult : outResult := false ; end reader ;
override reader @stringType isClass -> @bool outResult : outResult := true ; end reader ;
override reader @fontType isClass -> @bool outResult : outResult := true ; end reader ;
override reader @imageType isClass -> @bool outResult : outResult := true ; end reader ;
override reader @toOneEntityType isClass -> @bool outResult : outResult := true ; end reader ;
override reader @toManyEntitiesType isClass -> @bool outResult : outResult := true ; end reader ;
override reader @colorType isClass -> @bool outResult : outResult := true ; end reader ;
override reader @dataType isClass -> @bool outResult : outResult := true ; end reader ;
override reader @dateType isClass -> @bool outResult : outResult := true ; end reader ;
override reader @valueType isClass -> @bool outResult : outResult := true ; end reader ;
override reader @objectArrayType isClass -> @bool outResult : outResult := true ; end reader ;
override reader @bezierPathType isClass -> @bool outResult : outResult := true ; end reader ;
override reader @menuType isClass -> @bool outResult : outResult := true ; end reader ;
override reader @enumType isClass -> @bool outResult : outResult := false ; end reader ;
override reader @structType isClass -> @bool outResult : outResult := false ; end reader ;

#-----------------------------------------------------------------------------*

reader @easyBindingType preferencesGetterTransformerFunctionName -> @string outResult : outResult := "" ; end reader ;

override reader @boolType preferencesGetterTransformerFunctionName -> @string outResult : outResult := "boolFromNSNumber" ; end reader ;
override reader @integerType preferencesGetterTransformerFunctionName -> @string outResult : outResult := "NSIntegerFromNSNumber" ; end reader ;
override reader @enumType preferencesGetterTransformerFunctionName -> @string outResult : outResult := "(" . mEnumTypeName . ") NSIntegerFromNSNumber" ; end reader ;
override reader @doubleType preferencesGetterTransformerFunctionName -> @string outResult : outResult := "doubleFromNSNumber" ; end reader ;
override reader @fontType preferencesGetterTransformerFunctionName -> @string outResult : outResult := "fontFromData" ; end reader ;
override reader @colorType preferencesGetterTransformerFunctionName -> @string outResult : outResult := "valueFromData" ; end reader ;
override reader @valueType preferencesGetterTransformerFunctionName -> @string outResult : outResult := "valueFromData" ; end reader ;
override reader @bezierPathType preferencesGetterTransformerFunctionName -> @string outResult : outResult := "valueFromData" ; end reader ;
override reader @structType preferencesGetterTransformerFunctionName -> @string outResult : outResult := mStructTypeName->string . "FromData" ; end reader ;

#-----------------------------------------------------------------------------*

reader @easyBindingType preferencesSetterTransformerFunctionName -> @string outResult : outResult := "" ; end reader ;

override reader @boolType preferencesSetterTransformerFunctionName -> @string outResult : outResult := "numberEncodedBool" ; end reader ;
override reader @integerType preferencesSetterTransformerFunctionName -> @string outResult : outResult := "numberEncodedNSInteger" ; end reader ;
override reader @doubleType preferencesSetterTransformerFunctionName -> @string outResult : outResult := "numberEncodedDouble" ; end reader ;
override reader @fontType preferencesSetterTransformerFunctionName -> @string outResult : outResult := "dataFromFont" ; end reader ;
override reader @colorType preferencesSetterTransformerFunctionName -> @string outResult : outResult := "dataEncodedValue" ; end reader ;
override reader @valueType preferencesSetterTransformerFunctionName -> @string outResult : outResult := "dataEncodedValue" ; end reader ;
override reader @bezierPathType preferencesSetterTransformerFunctionName -> @string outResult : outResult := "dataEncodedValue" ; end reader ;
override reader @menuType preferencesSetterTransformerFunctionName -> @string outResult : outResult := "dataEncodedValue" ; end reader ;
override reader @enumType preferencesSetterTransformerFunctionName -> @string outResult : outResult := "numberEncodedNSInteger" ; end reader ;
override reader @structType preferencesSetterTransformerFunctionName -> @string outResult : outResult := "dataEncoded" . mStructTypeName ; end reader ;

#-----------------------------------------------------------------------------*

reader @easyBindingType propertyAttributeString -> @string outResult : outResult := "" ; end reader ;

override reader @stringType propertyAttributeString -> @string outResult : outResult := " (copy)" ; end reader ;
override reader @valueType propertyAttributeString -> @string outResult : outResult := " (copy)" ; end reader ;
override reader @bezierPathType propertyAttributeString -> @string outResult : outResult := " (copy)" ; end reader ;
override reader @menuType propertyAttributeString -> @string outResult : outResult := " (copy)" ; end reader ;

override reader @colorType propertyAttributeString -> @string outResult : outResult := " (copy)" ; end reader ;
override reader @dateType propertyAttributeString -> @string outResult : outResult := " (copy)" ; end reader ;

override reader @fontType propertyAttributeString -> @string outResult : outResult := " (copy)" ; end reader ;

#-----------------------------------------------------------------------------*

 # Returning an empty string means not allowed
reader @easyBindingType requiredCellTypeInTableColumnBinding -> @string outResult : outResult := "" ; end reader ;

override reader @boolType requiredCellTypeInTableColumnBinding -> @string outResult : outResult := "NSButtonCell" ; end reader ;
override reader @integerType requiredCellTypeInTableColumnBinding -> @string outResult : outResult := "NSTextFieldCell" ; end reader ;
override reader @uintegerType requiredCellTypeInTableColumnBinding -> @string outResult : outResult := "NSTextFieldCell" ; end reader ;
override reader @decimalType requiredCellTypeInTableColumnBinding -> @string outResult : outResult := "NSTextFieldCell" ; end reader ;
override reader @doubleType requiredCellTypeInTableColumnBinding -> @string outResult : outResult := "NSTextFieldCell" ; end reader ;
override reader @stringType requiredCellTypeInTableColumnBinding -> @string outResult : outResult := "NSTextFieldCell" ; end reader ;
override reader @dateType requiredCellTypeInTableColumnBinding -> @string outResult : outResult := "NSDateFieldCell" ; end reader ;
override reader @imageType requiredCellTypeInTableColumnBinding -> @string outResult : outResult := "NSImageCell" ; end reader ;

#-----------------------------------------------------------------------------*
#   equalExpression                                                           *
#-----------------------------------------------------------------------------*

abstract reader @easyBindingType equalExpression
  ??@string inExp1
  ??@string inExp2
  -> @string outResult
;

#-----------------------------------------------------------------------------*

override reader @integerType equalExpression
  ??@string inExp1
  ??@string inExp2
  -> @string outResult
:
  outResult := inExp1 . " == " . inExp2 ;
end reader ;

#-----------------------------------------------------------------------------*

override reader @uintegerType equalExpression
  ??@string inExp1
  ??@string inExp2
  -> @string outResult
:
  outResult := inExp1 . " == " . inExp2 ;
end reader ;

#-----------------------------------------------------------------------------*

override reader @boolType equalExpression
  ??@string inExp1
  ??@string inExp2
  -> @string outResult
:
  outResult := inExp1 . " == " . inExp2 ;
end reader ;

#-----------------------------------------------------------------------------*

override reader @doubleType equalExpression
  ??@string inExp1
  ??@string inExp2
  -> @string outResult
:
  outResult := inExp1 . " == " . inExp2 ;
end reader ;

#-----------------------------------------------------------------------------*

override reader @enumType equalExpression
  ??@string inExp1
  ??@string inExp2
  -> @string outResult
:
  outResult := inExp1 . " == " . inExp2 ;
end reader ;

#-----------------------------------------------------------------------------*

override reader @structType equalExpression
  ??@string inExp1
  ??@string inExp2
  -> @string outResult
:
  outResult := "equal" . mStructTypeName . "s (" . inExp1 . ", " . inExp2 . ")" ;
end reader ;

#-----------------------------------------------------------------------------*

override reader @toOneEntityType equalExpression
  ??@string inExp1
  ??@string inExp2
  -> @string outResult
:
  outResult := inExp1 . " == " . inExp2 ;
end reader ;

#-----------------------------------------------------------------------------*

override reader @decimalType equalExpression
  ??@string inExp1
  ??@string inExp2
  -> @string outResult
:
  outResult := "[" . inExp1 . " isEqual:" . inExp2 . "]" ;
end reader ;

#-----------------------------------------------------------------------------*

override reader @toManyEntitiesType equalExpression
  ??@string inExp1
  ??@string inExp2
  -> @string outResult
:
  outResult := "[" . inExp1 . " isEqual:" . inExp2 . "]" ;
end reader ;

#-----------------------------------------------------------------------------*

override reader @stringType equalExpression
  ??@string inExp1
  ??@string inExp2
  -> @string outResult
:
  outResult := "[" . inExp1 . " isEqualToString:" . inExp2 . "]" ;
end reader ;

#-----------------------------------------------------------------------------*

override reader @dataType equalExpression
  ??@string inExp1
  ??@string inExp2
  -> @string outResult
:
  outResult := "[" . inExp1 . " isEqual:" . inExp2 . "]" ;
end reader ;

#-----------------------------------------------------------------------------*

override reader @dateType equalExpression
  ??@string inExp1
  ??@string inExp2
  -> @string outResult
:
  outResult := "[" . inExp1 . " isEqual:" . inExp2 . "]" ;
end reader ;

#-----------------------------------------------------------------------------*

override reader @fontType equalExpression
  ??@string inExp1
  ??@string inExp2
  -> @string outResult
:
  outResult := "[" . inExp1 . " isEqual:" . inExp2 . "]" ;
end reader ;

#-----------------------------------------------------------------------------*

override reader @imageType equalExpression
  ??@string inExp1
  ??@string inExp2
  -> @string outResult
:
  outResult := "[" . inExp1 . " isEqual:" . inExp2 . "]" ;
end reader ;

#-----------------------------------------------------------------------------*

override reader @colorType equalExpression
  ??@string inExp1
  ??@string inExp2
  -> @string outResult
:
  outResult := "[" . inExp1 . " isEqual:" . inExp2 . "]" ;
end reader ;

#-----------------------------------------------------------------------------*

override reader @valueType equalExpression
  ??@string inExp1
  ??@string inExp2
  -> @string outResult
:
  outResult := "[" . inExp1 . " isEqual:" . inExp2 . "]" ;
end reader ;

#-----------------------------------------------------------------------------*

override reader @objectArrayType equalExpression
  ??@string inExp1
  ??@string inExp2
  -> @string outResult
:
  outResult := "[" . inExp1 . " isEqual:" . inExp2 . "]" ;
end reader ;

#-----------------------------------------------------------------------------*

override reader @bezierPathType equalExpression
  ??@string inExp1
  ??@string inExp2
  -> @string outResult
:
  outResult := "[" . inExp1 . " isEqual:" . inExp2 . "]" ;
end reader ;

#-----------------------------------------------------------------------------*

override reader @menuType equalExpression
  ??@string inExp1
  ??@string inExp2
  -> @string outResult
:
  outResult := "[" . inExp1 . " isEqual:" . inExp2 . "]" ;
end reader ;

#-----------------------------------------------------------------------------*
#   ebTypeIdentifier                                                          *
#-----------------------------------------------------------------------------*

abstract reader @easyBindingType ebTypeIdentifier -> @string outResult ;

override reader @boolType ebTypeIdentifier -> @string outResult : outResult := "bool" ; end reader ;
override reader @integerType ebTypeIdentifier -> @string outResult : outResult := "integer" ; end reader ;
override reader @uintegerType ebTypeIdentifier -> @string outResult : outResult := "unsignedInteger" ; end reader ;
override reader @decimalType ebTypeIdentifier -> @string outResult : outResult := "decimal" ; end reader ;
override reader @doubleType ebTypeIdentifier -> @string outResult : outResult := "double" ; end reader ;
override reader @stringType ebTypeIdentifier -> @string outResult : outResult := "NSString" ; end reader ;
override reader @dataType ebTypeIdentifier -> @string outResult : outResult := "NSData" ; end reader ;
override reader @dateType ebTypeIdentifier -> @string outResult : outResult := "NSDate" ; end reader ;
override reader @fontType ebTypeIdentifier -> @string outResult : outResult := "NSFont" ; end reader ;
override reader @imageType ebTypeIdentifier -> @string outResult : outResult := "NSImage" ; end reader ;
override reader @colorType ebTypeIdentifier -> @string outResult : outResult := "NSColor" ; end reader ;
override reader @valueType ebTypeIdentifier -> @string outResult : outResult := "NSValue" ; end reader ;
override reader @menuType ebTypeIdentifier -> @string outResult : outResult := "NSMenu" ; end reader ;
override reader @bezierPathType ebTypeIdentifier -> @string outResult : outResult := "NSBezierPath" ; end reader ;
override reader @toOneEntityType ebTypeIdentifier -> @string outResult : outResult := "toOne[" . mEntityName . "]" ; end reader ;
override reader @toManyEntitiesType ebTypeIdentifier -> @string outResult : outResult := "toMany[" . mEntityName . "]" ; end reader ;
override reader @objectArrayType ebTypeIdentifier -> @string outResult : outResult := "array[" . mClassName . "]" ; end reader ;

override reader @enumType ebTypeIdentifier -> @string outResult : outResult := "enum[" . mEnumTypeName . "]" ; end reader ;
override reader @structType ebTypeIdentifier -> @string outResult : outResult := "struct[" . mStructTypeName . "]" ; end reader ;

#-----------------------------------------------------------------------------*

reader @easyBindingType ebGenericTypeIdentifier ??@string unused inTypeName -> @string outResult
:
  outResult := [selfcopy ebTypeIdentifier] ;
end reader ;

#------------

override reader @toManyEntitiesType ebGenericTypeIdentifier ??@string inTypeName -> @string outResult
:
  outResult := "toMany[" . inTypeName . "]" ;
end reader ;

#------------

override reader @objectArrayType ebGenericTypeIdentifier ??@string inTypeName -> @string outResult
:
  outResult := "array[" . inTypeName . "]" ;
end reader ;

#------------

override reader @enumType ebGenericTypeIdentifier ??@string inTypeName -> @string outResult
:
  outResult := "enum[" . inTypeName . "]" ;
end reader ;

#-----------------------------------------------------------------------------*

abstract reader @easyBindingType ocTypeName -> @string outResult ;

override reader @boolType ocTypeName -> @string outResult : outResult := "BOOL" ; end reader ;
override reader @integerType ocTypeName -> @string outResult : outResult := "NSInteger" ; end reader ;
override reader @uintegerType ocTypeName -> @string outResult : outResult := "NSUInteger" ; end reader ;
override reader @decimalType ocTypeName -> @string outResult : outResult := "NSDecimal" ; end reader ;
override reader @doubleType ocTypeName -> @string outResult : outResult := "double" ; end reader ;
override reader @stringType ocTypeName -> @string outResult : outResult := "NSString *" ; end reader ;
override reader @fontType ocTypeName -> @string outResult : outResult := "NSFont *" ; end reader ;
override reader @imageType ocTypeName -> @string outResult : outResult := "NSImage *" ; end reader ;
override reader @colorType ocTypeName -> @string outResult : outResult := "NSColor *" ; end reader ;
override reader @dataType ocTypeName -> @string outResult : outResult := "NSData *" ; end reader ;
override reader @dateType ocTypeName -> @string outResult : outResult := "NSDate *" ; end reader ;
override reader @objectArrayType ocTypeName -> @string outResult : outResult := "NSArray *" ; end reader ;
override reader @valueType ocTypeName -> @string outResult : outResult := "NSValue *" ; end reader ;
override reader @menuType ocTypeName -> @string outResult : outResult := "NSMenu *" ; end reader ;
override reader @bezierPathType ocTypeName -> @string outResult : outResult := "NSBezierPath *" ; end reader ;
override reader @toOneEntityType ocTypeName -> @string outResult : outResult := "??" ; end reader ;
override reader @toManyEntitiesType ocTypeName -> @string outResult : outResult := "??" ; end reader ;
override reader @enumType ocTypeName -> @string outResult : outResult := mEnumTypeName->string ; end reader ;
override reader @structType ocTypeName -> @string outResult : outResult := mStructTypeName->string ; end reader ;

#-----------------------------------------------------------------------------*

abstract reader @easyBindingType ocClassName -> @string outResult ;

override reader @boolType ocClassName -> @string outResult : outResult := "NSNumber" ; end reader ;
override reader @integerType ocClassName -> @string outResult : outResult := "NSNumber" ; end reader ;
override reader @uintegerType ocClassName -> @string outResult : outResult := "NSNumber" ; end reader ;
override reader @decimalType ocClassName -> @string outResult : outResult := "NSNumber" ; end reader ;
override reader @doubleType ocClassName -> @string outResult : outResult := "NSNumber" ; end reader ;
override reader @stringType ocClassName -> @string outResult : outResult := "NSString" ; end reader ;
override reader @fontType ocClassName -> @string outResult : outResult := "NSFont" ; end reader ;
override reader @imageType ocClassName -> @string outResult : outResult := "NSImage" ; end reader ;
override reader @colorType ocClassName -> @string outResult : outResult := "NSColor" ; end reader ;
override reader @dataType ocClassName -> @string outResult : outResult := "NSData" ; end reader ;
override reader @dateType ocClassName -> @string outResult : outResult := "NSDate" ; end reader ;
override reader @objectArrayType ocClassName -> @string outResult : outResult := "NSArray" ; end reader ;
override reader @valueType ocClassName -> @string outResult : outResult := "NSValue" ; end reader ;
override reader @menuType ocClassName -> @string outResult : outResult := "NSMenu" ; end reader ;
override reader @bezierPathType ocClassName -> @string outResult : outResult := "NSBezierPath" ; end reader ;
override reader @toOneEntityType ocClassName -> @string outResult : outResult := "??" ; end reader ;
override reader @toManyEntitiesType ocClassName -> @string outResult : outResult := "??" ; end reader ;
override reader @enumType ocClassName -> @string outResult : outResult := mEnumTypeName->string ; end reader ;
override reader @structType ocClassName -> @string outResult : outResult := mStructTypeName->string ; end reader ;

#-----------------------------------------------------------------------------*

reader @easyBindingType copyOnAssign -> @bool outResult : outResult := false ; end reader ;

override reader @stringType copyOnAssign -> @bool outResult : outResult := true ; end reader ;
override reader @valueType copyOnAssign -> @bool outResult : outResult := true ; end reader ;
override reader @objectArrayType copyOnAssign -> @bool outResult : outResult := true ; end reader ;
override reader @bezierPathType copyOnAssign -> @bool outResult : outResult := true ; end reader ;
override reader @menuType copyOnAssign -> @bool outResult : outResult := true ; end reader ;

#-----------------------------------------------------------------------------*

method @easyBindingType addEnumAndStructType
  ?!@stringset unused ioSet
:
end method ;


override method @enumType addEnumAndStructType
  ?!@stringset ioSet
:
  ioSet += !mEnumTypeName->string ;
end method ;

override method @structType addEnumAndStructType
  ?!@stringset ioSet
:
  ioSet += !mStructTypeName->string ;
end method ;

#-----------------------------------------------------------------------------*

reader @easyBindingType isToManyEntitiesType -> @bool outResult: outResult := false ; end reader ;

override reader @toManyEntitiesType isToManyEntitiesType -> @bool outResult : outResult := true ; end reader ;

#-----------------------------------------------------------------------------*

reader @easyBindingType isBoolType -> @bool outResult: outResult := false ; end reader ;

override reader @boolType isBoolType -> @bool outResult : outResult := true ; end reader ;

#-----------------------------------------------------------------------------*

reader @easyBindingType isIntegerType -> @bool outResult: outResult := false ; end reader ;

override reader @integerType isIntegerType -> @bool outResult : outResult := true ; end reader ;

#-----------------------------------------------------------------------------*

reader @easyBindingType isDoubleType -> @bool outResult: outResult := false ; end reader ;

override reader @doubleType isDoubleType -> @bool outResult : outResult := true ; end reader ;

#-----------------------------------------------------------------------------*

reader @easyBindingType isStringType -> @bool outResult: outResult := false ; end reader ;

override reader @stringType isStringType -> @bool outResult : outResult := true ; end reader ;

#-----------------------------------------------------------------------------*

reader @easyBindingType isColorType -> @bool outResult: outResult := false ; end reader ;

override reader @colorType isColorType -> @bool outResult : outResult := true ; end reader ;

#-----------------------------------------------------------------------------*

reader @easyBindingType isDateType -> @bool outResult: outResult := false ; end reader ;

override reader @dateType isDateType -> @bool outResult : outResult := true ; end reader ;

#-----------------------------------------------------------------------------*

reader @easyBindingType isFontType -> @bool outResult: outResult := false ; end reader ;

override reader @fontType isFontType -> @bool outResult : outResult := true ; end reader ;

#-----------------------------------------------------------------------------*

reader @easyBindingType isEnumType -> @bool outResult: outResult := false ; end reader ;

override reader @enumType isEnumType -> @bool outResult : outResult := true ; end reader ;

#-----------------------------------------------------------------------------*

reader @easyBindingType functionForComputingSignature -> @string outResult: outResult := "computeIntegerSignature" ; end reader ;

override reader @stringType functionForComputingSignature -> @string outResult : outResult := "computeNSStringSignature" ; end reader ;

override reader @toOneEntityType functionForComputingSignature -> @string outResult : outResult := "computeToOneEntitySignature" ; end reader ;

override reader @toManyEntitiesType functionForComputingSignature -> @string outResult : outResult := "computeToManyEntitySignature" ; end reader ;

#-----------------------------------------------------------------------------*

end semantics ;
