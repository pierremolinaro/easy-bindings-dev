semantics transientGeneration :
  import "decoratedTypes.gSemantics" ;

#----------------------------------------------------------------------------*

abstract reader @abstractTransientDependencyForImplementation generateFormalArgument
  ->@string outResult
;

#----------------------------------------------------------------------------*

override reader @transientDependencyFromSelfForImplementation generateFormalArgument
  ->@string outResult
:
  outResult := [mMasterAttributeType ocTypeName] . " in" . [mMasterAttributeName stringByCapitalizingFirstCharacter] ;
end reader ;

#----------------------------------------------------------------------------*

override reader @transientDependencyFromControllerForImplementation generateFormalArgument
  ->@string outResult
:
  outResult := [mMasterAttributeType ocTypeName] . " in" . [mMasterAttributeName stringByCapitalizingFirstCharacter] ;
end reader ;

#----------------------------------------------------------------------------*

override reader @transientDependencyFromRootForImplementation generateFormalArgument
  ->@string outResult
:
  if mNamesCountOption then
    outResult := "const NSUInteger in" . [mMasterAttributeName stringByCapitalizingFirstCharacter] . "_count" ;
  else
    outResult := [mMasterAttributeType ocTypeName] . " in" . [mMasterAttributeName stringByCapitalizingFirstCharacter] ;
  end if ;
end reader ;

#----------------------------------------------------------------------------*

override reader @transientDependencyFromPreferenceForImplementation generateFormalArgument
  ->@string outResult
:
  outResult := [mMasterAttributeType ocTypeName] . " in" . [mMasterAttributeName stringByCapitalizingFirstCharacter] ;
end reader ;

#----------------------------------------------------------------------------*

abstract reader @abstractTransientDependencyForImplementation generateMasterAttributeCall
  ->@string outResult
;

#----------------------------------------------------------------------------*

override reader @transientDependencyFromSelfForImplementation generateMasterAttributeCall
  ->@string outResult
:
  outResult := "self." . mMasterAttributeName ;
end reader ;

#----------------------------------------------------------------------------*

override reader @transientDependencyFromRootForImplementation generateMasterAttributeCall
  ->@string outResult
:
  outResult := "mRootObject." . mMasterAttributeName ;
  if mNamesCountOption then
    outResult .= ".count" ;
  end if ;
end reader ;

#----------------------------------------------------------------------------*

override reader @transientDependencyFromControllerForImplementation generateMasterAttributeCall
  ->@string outResult
:
  outResult := mControllerName . "." . mMasterAttributeName ;
end reader ;

#----------------------------------------------------------------------------*

override reader @transientDependencyFromPreferenceForImplementation generateMasterAttributeCall
  ->@string outResult
:
  outResult := "g_" . mPreferenceName . "." . mMasterAttributeName ;
end reader ;

#----------------------------------------------------------------------------*

function generateTransientFunctionDeclarations
  ??@string inKindName
  ??@transientListForImplementation inTransientListForImplementation
  ->@string outResult
:
  outResult :=
    "//----------------------------------------------------------------------------*\n"
  . "//   T R A N S I E N T    P R O P E R T I E S                                 *\n"
  . "//----------------------------------------------------------------------------*\n\n" ;

  foreach inTransientListForImplementation do
    outResult .= [mTransientType ocTypeName] . " compute_" . inKindName . "_" . mTransientName . " (\n" ;
    @bool first := true ;
    foreach mDependencyList do
      if first then
        first := false ;
      else
        outResult .= ",\n" ;
      end if ;
      outResult .= "    " . [mDependency generateFormalArgument] ;
    end foreach ;
    foreach mRootSignDependencyList do
      if first then
        first := false ;
      else
        outResult .= ",\n" ;
      end if ;
      outResult .= "    const NSInteger inSignature" ;
    end foreach ;
    outResult .= ") ;\n\n" ;
  end foreach ;
end function ;

#----------------------------------------------------------------------------*

function generateTransientFunctionImplementation
  ??@string inKindName
  ??@easyBindingType inTransientType
  ??@string inTransientName
  ??@directDependancyList inDependencyList
  ??@stringlist inRootSignDependencyList
  ->@string outResult
:
  outResult := [inTransientType ocTypeName] . " compute_" . inKindName . "_" . inTransientName . " (\n" ;
  @bool first := true ;
  foreach inDependencyList do
    if first then
      first := false ;
    else
      outResult .= ",\n" ;
    end if ;
    outResult .= "    " . [mDependency generateFormalArgument] ;
  end foreach ;
  foreach inRootSignDependencyList do
    if first then
      first := false ;
    else
      outResult .= ",\n" ;
    end if ;
    outResult .= "    const NSInteger inSignature" ;
  end foreach ;
  outResult .= ") {\n" ;
end function ;

#----------------------------------------------------------------------------*

function generateTransientCacheRoutine
  ??@string inKindName 
  ??@transientListForImplementation inTransientListForImplementation
  ->@string outResult
:
  outResult := "" ;
  foreach inTransientListForImplementation do
    outResult .=
    "//----------------------------------------------------------------------------*\n"
    "// Cache routine of '" . mTransientName . "' transient     *\n"
    "//----------------------------------------------------------------------------*\n\n"   
    "- (" . [mTransientType ocTypeName] . ") " . mTransientName . " {\n"
    "  if (! " . mTransientName . "__computed) {\n"
    "    " . mTransientName . "__cache = compute_" . inKindName . "_" . mTransientName . " (" ;
    @bool first := true ;
    foreach mDependencyList do
      if first then
        first := false ;
      else
        outResult .= ", " ;
      end if ;
      outResult .= [mDependency generateMasterAttributeCall] ;
    end foreach ;
    foreach mRootSignDependencyList do
      if first then
        first := false ;
      else
        outResult .= ", " ;
      end if ;
      outResult .= "mRootObject.signature" ;
    end foreach ;
    outResult .= ") ;\n"
    "    " . mTransientName . "__computed = YES ;\n"
    "  }\n"
    "  return " . mTransientName . "__cache" ;
    if [mTransientType copyOnAssign] then outResult .= ".copy" ; end if ;
    outResult .= " ;\n"
    "}\n\n" ;
  end foreach ;
end function ;

#----------------------------------------------------------------------------*

listmap @triggeredKeysForSelfObject (@stringlist) ;

#----------------------------------------------------------------------------*

listmap @triggeredKeysForOtherObjects (@2stringlist) ;

#----------------------------------------------------------------------------*

abstract method @abstractTransientDependencyForImplementation generateTransientTriggerFromSelfAttribute
  ??@string inPrefix # entity, class, preference
  ??@string inClassName
  ??@string inTransientName
  ?!@stringset ioMasterAttributeSet
  ?!@stringset ioRegisteredTransientSet
  ?!@bool ioContinue
  ?!@string ioResult
;

#----------------------------------------------------------------------------*

override method @transientDependencyFromSelfForImplementation generateTransientTriggerFromSelfAttribute
  ??@string inPrefix # entity, class, preference
  ??@string inClassName
  ??@string inTransientName
  ?!@stringset ioMasterAttributeSet
  ?!@stringset ioRegisteredTransientSet
  ?!@bool ioContinue
  ?!@string ioResult
:
  if [ioMasterAttributeSet hasKey !mMasterAttributeName] then
    ioMasterAttributeSet += !inTransientName ;
    ioRegisteredTransientSet += !inTransientName ;
    ioContinue := true ;
    ioResult .=
    "  //--- Trigger '" . inTransientName . " transient'\n"
    "    if (" . inTransientName . "__computed) {\n"
    "      " . inTransientName . "__computed = NO ;\n"
    "      [PMTransientDependancyManager\n"
    "        enterTriggerForObject:self\n"
    "        transientIndex:" . [inPrefix . "." . inClassName . "." . inTransientName identifierRepresentation] . "\n"
    "      ] ;\n"
    "    }\n" ;
  end if ;
end method ;

#----------------------------------------------------------------------------*

override method @transientDependencyFromRootForImplementation generateTransientTriggerFromSelfAttribute
  ??@string inPrefix # entity, class, preference
  ??@string inClassName
  ??@string inTransientName
  ?!@stringset ioMasterAttributeSet
  ?!@stringset ioRegisteredTransientSet
  ?!@bool ioContinue
  ?!@string ioResult
:
  if [ioMasterAttributeSet hasKey !mMasterAttributeName] then
    ioMasterAttributeSet += !inTransientName ;
    ioRegisteredTransientSet += !inTransientName ;
    ioContinue := true ;
    ioResult .=
    "  //--- Trigger '" . inTransientName . " transient'\n"
    "    if (" . inTransientName . "__computed) {\n"
    "      " . inTransientName . "__computed = NO ;\n"
    "      [PMTransientDependancyManager\n"
    "        enterTriggerForObject:self\n"
    "        transientIndex:" . [inPrefix . "." . inClassName . "." . inTransientName identifierRepresentation] . "\n"
    "      ] ;\n"
    "    }\n" ;
  end if ;
end method ;

#----------------------------------------------------------------------------*

override method @transientDependencyFromPreferenceForImplementation generateTransientTriggerFromSelfAttribute
  ??@string unused inPrefix # entity, class, preference
  ??@string unused inClassName
  ??@string unused inTransientName
  ?!@stringset unused ioMasterAttributeSet
  ?!@stringset unused ioRegisteredTransientSet
  ?!@bool unused ioContinue
  ?!@string unused ioResult
:
end method ;

#----------------------------------------------------------------------------*

override method @transientDependencyFromControllerForImplementation generateTransientTriggerFromSelfAttribute
  ??@string unused inPrefix # entity, class, preference
  ??@string unused inClassName
  ??@string unused inTransientName
  ?!@stringset unused ioMasterAttributeSet
  ?!@stringset unused ioRegisteredTransientSet
  ?!@bool unused ioContinue
  ?!@string unused ioResult
:
end method ;

#----------------------------------------------------------------------------*

function generateTransientTriggering
  ??@string inPropertyName
  ??@string inClassName
  ??@transientListForImplementation inTransientListForImplementation
  ??@string inPrefix # entity, class, preference
  ->@string outResult
:
  outResult := "" ;
#----
  @stringset masterSet [setWithString !inPropertyName] ;
  @stringset registeredTransientSet [emptySet] ;
  @bool looping := true ;
  loop [inTransientListForImplementation length] + 1 while looping do
    looping := false ;
    foreach inTransientListForImplementation do
      foreach mDependencyList do
        if (not [registeredTransientSet hasKey !mTransientName]) then
          [mDependency generateTransientTriggerFromSelfAttribute
            !inPrefix
            !inClassName
            !mTransientName
            !?masterSet
            !?registeredTransientSet
            !?looping
            !?outResult
          ] ;
        end if ;
      end foreach ;
    end foreach ;
  end loop ;
end function ;

#----------------------------------------------------------------------------*

abstract method @abstractTransientDependencyForImplementation generateAddObserverForTransient
  ??@string inLeadingSpaces
  ?!@string ioResult
;

#----------------------------------------------------------------------------*

override method @transientDependencyFromSelfForImplementation generateAddObserverForTransient
  ??@string unused inLeadingSpaces
  ?!@string unused ioResult
:
end method ;

#----------------------------------------------------------------------------*

override method @transientDependencyFromControllerForImplementation generateAddObserverForTransient
  ??@string inLeadingSpaces
  ?!@string ioResult
:
  ioResult .= inLeadingSpaces .
  "  [" . mControllerName . "\n"
  "    addObserver:self\n"
  "    forKeyPath:@\"" . mMasterAttributeName . "\"\n"
  "    options:0\n"
  "    context:NULL\n"
  "  ] ;\n" ;
end method ;

#----------------------------------------------------------------------------*

override method @transientDependencyFromPreferenceForImplementation generateAddObserverForTransient
  ??@string inLeadingSpaces
  ?!@string ioResult
:
  if not mMasterIsTransient then
    ioResult .= inLeadingSpaces . "  [g_" . mPreferenceName . " addObserverOf_" . mMasterAttributeName . ":self] ;\n" ;
  end if ;
end method ;

#----------------------------------------------------------------------------*

override method @transientDependencyFromRootForImplementation generateAddObserverForTransient
  ??@string inLeadingSpaces
  ?!@string ioResult
:
  ioResult .= inLeadingSpaces . "  [mRootObject addObserverOf_" . mMasterAttributeName . ":self] ;\n" ;
end method ;

#----------------------------------------------------------------------------*

function generateAddObserverForTransients
  ??@transientListForImplementation inTransientListForImplementation
  ??@string inLeadingSpaces
  ->@string outResult
:
  outResult := "" ;
  foreach inTransientListForImplementation do
    foreach mDependencyList do
      [mDependency generateAddObserverForTransient
        !inLeadingSpaces
        !?outResult
      ] ;
    end foreach ;
  end foreach ;
end function ;

#----------------------------------------------------------------------------*

abstract method @abstractTransientDependencyForImplementation generateRemoveObserverForTransient
  ?!@string ioResult
;

#----------------------------------------------------------------------------*

override method @transientDependencyFromSelfForImplementation generateRemoveObserverForTransient
  ?!@string unused ioResult
:
end method ;

#----------------------------------------------------------------------------*

override method @transientDependencyFromControllerForImplementation generateRemoveObserverForTransient
  ?!@string ioResult
:
  ioResult .=
  "  [" . mControllerName . "\n"
  "    removeObserver:self\n"
  "    forKeyPath:@\"" . mMasterAttributeName . "\"\n"
  "  ] ;\n" ;
end method ;

#----------------------------------------------------------------------------*

override method @transientDependencyFromPreferenceForImplementation generateRemoveObserverForTransient
  ?!@string ioResult
:
  if not mMasterIsTransient then
    ioResult .= "  [g_" . mPreferenceName . " removeObserverOf_" . mMasterAttributeName . ":self] ;\n" ;
  end if ;
end method ;

#----------------------------------------------------------------------------*

override method @transientDependencyFromRootForImplementation generateRemoveObserverForTransient
  ?!@string ioResult
:
  ioResult .= "  [mRootObject removeObserverOf_" . mMasterAttributeName . ":self] ;\n" ;
end method ;

#----------------------------------------------------------------------------*

function generateRemoveObserverForTransients
  ??@transientListForImplementation inTransientListForImplementation
  ->@string outResult
:
  outResult := "" ;
  foreach inTransientListForImplementation do
    foreach mDependencyList do
      [mDependency generateRemoveObserverForTransient
        !?outResult
      ] ;
    end foreach ;
  end foreach ;
end function ;

#----------------------------------------------------------------------------*

listmap @observerListMap (@stringlist) ;

#----------------------------------------------------------------------------*

abstract method @abstractTransientDependencyForImplementation generateObserverRoutineForTransient
  ??@string inTransientName
  ?!@observerListMap didChangeTriggeredRoutineListMap
  ?!@observerListMap ioObserveForKeyPathRoutineElementListMap
;

#----------------------------------------------------------------------------*

override method @transientDependencyFromSelfForImplementation generateObserverRoutineForTransient
  ??@string unused inTransientName
  ?!@observerListMap unused didChangeTriggeredRoutineListMap
  ?!@observerListMap unused ioObserveForKeyPathRoutineElementListMap
:
end method ;

#----------------------------------------------------------------------------*

override method @transientDependencyFromControllerForImplementation generateObserverRoutineForTransient
  ??@string inTransientName
  ?!@observerListMap unused didChangeTriggeredRoutineListMap
  ?!@observerListMap ioObserveForKeyPathRoutineElementListMap
:
  ioObserveForKeyPathRoutineElementListMap += !mControllerName . "." . mMasterAttributeName !inTransientName ;
end method ;

#----------------------------------------------------------------------------*

override method @transientDependencyFromPreferenceForImplementation generateObserverRoutineForTransient
  ??@string inTransientName
  ?!@observerListMap didChangeTriggeredRoutineListMap
  ?!@observerListMap unused ioObserveForKeyPathRoutineElementListMap
:
  if not mMasterIsTransient then
    didChangeTriggeredRoutineListMap += !["preference." . mPreferenceName . "." . mMasterAttributeName identifierRepresentation] !inTransientName ;
  end if ;
end method ;

#----------------------------------------------------------------------------*

override method @transientDependencyFromRootForImplementation generateObserverRoutineForTransient
  ??@string inTransientName
  ?!@observerListMap didChangeTriggeredRoutineListMap
  ?!@observerListMap unused ioObserveForKeyPathRoutineElementListMap
:
  didChangeTriggeredRoutineListMap += !mTriggerRoutineName !inTransientName ;
end method ;

#----------------------------------------------------------------------------*

function generateObserverRoutinesForTransient
  ??@string inKindName 
  ??@transientListForImplementation inTransientListForImplementation
  ??@string inPrefix # entity, class, preference
  ->@string outResult
:
  outResult := "" ;
  @observerListMap didChangeTriggeredRoutineListMap [emptyMap] ;
  @observerListMap observeForKeyPathRoutineElementListMap [emptyMap] ;
  foreach inTransientListForImplementation do
    foreach mDependencyList do
      [mDependency generateObserverRoutineForTransient
        !mTransientName
        !?didChangeTriggeredRoutineListMap
        !?observeForKeyPathRoutineElementListMap
      ] ;
    end foreach ;
  end foreach ;
#------------------------ Generate xxx_xxx_didChange methods
  const @string fullPrefix := inPrefix . "." . inKindName . "." ;
  foreach didChangeTriggeredRoutineListMap do
    outResult .=
    "//----------------------------------------------------------------------------*\n"
    "//  " . key . "_didChange   *\n"
    "//----------------------------------------------------------------------------*\n\n"
    "- (void) " . key . "_didChange {\n" ;
    foreach mList do
    outResult .=
      "  //--- Trigger '" . mValue . " transient'\n"
      "  if (" . mValue . "__computed) {\n"
      "    " . mValue . "__computed = NO ;\n"
      "    [PMTransientDependancyManager\n"
      "      enterTriggerForObject:self\n"
      "      transientIndex:" . [fullPrefix . mValue identifierRepresentation] . "\n"
      "    ] ;\n"
      "  }\n" ;
    end foreach ;
    outResult .= "}\n\n" ;
  end foreach ;
#------------------------ Generate observeValueForKeyPath method
  foreach observeForKeyPathRoutineElementListMap
  before
    outResult .=
    "//----------------------------------------------------------------------------*\n"
    "//  observeValueForKeyPath:ofObject:change:context:                           *\n"
    "//----------------------------------------------------------------------------*\n\n"
    "- (void) observeValueForKeyPath: (NSString *) inKeyPath\n"
    "         ofObject: (id) inObject\n"
    "         change: (NSDictionary *) inChange\n"
    "         context: (void *) inContext {\n"
    " " ;
  do
    outResult .=
    " if ((inObject == " . [key stringByDeletingPathExtension] .") && [inKeyPath isEqualToString:@\"" . [key pathExtension] . "\"]) {\n" ;
    foreach mList do
      outResult .=
      "  //--- Trigger '" . mValue . " transient'\n"
      "    if (" . mValue . "__computed) {\n"
      "      " . mValue . "__computed = NO ;\n"
      "      [PMTransientDependancyManager\n"
      "        enterTriggerForObject:self\n"
      "        transientIndex:" . [fullPrefix . mValue identifierRepresentation] . "\n"
      "      ] ;\n"
      "    }\n" ;
    end foreach ;
    outResult .= "  }else" ;
  after
    outResult .=
    "{\n"
    "    [super\n"
    "     observeValueForKeyPath:inKeyPath\n"
    "     ofObject:inObject\n"
    "     change:inChange\n"
    "     context:inContext\n"
    "    ] ;\n"
    "  }\n"
    "}\n\n" ;
  end foreach ;
end function ;

#----------------------------------------------------------------------------*

local filewrapper transientManager in "../generation-templates/transient-dependency-manager" {
}{
}{
  template managerDeclaration "PMTransientDependancyManager.h.gTemplate"
    ?@string GRAPH_STRING
    ?@string TRANSIENT_LIST_STRING
    ?@string TRANSIENT_INDEXES
    ?@uint TRANSIENT_COUNT
  ;
  
  template managerImplementation "PMTransientDependancyManager.m.gTemplate"
    ?@string TRANSIENT_LIST
  ;
}

#----------------------------------------------------------------------------*

routine generateTransientDependencyFiles
  ??@2stringlist inTransientDependencyArcList
  ??@string inSourceDirectoryPath
  ??@stringlist inSortedTransientOrderedList
:
#--- Output dependency order definition file
  @string graphString := "" ;
  @stringset dependentSet [emptySet] ;
  foreach inTransientDependencyArcList do
    graphString .= "// " . mValue0 . " -> " . mValue1 . "\n" ;
    dependentSet += !mValue1 ;
  end foreach ;
  @string transientOrderedList := "" ;
  foreach \down inSortedTransientOrderedList do
    transientOrderedList .= "// " . mValue . "\n" ;
  end foreach ;
  @string transientIndexesString := "" ;
  @string transientList := "" ;
  @uint idx := 0 ;
  foreach \down inSortedTransientOrderedList do
    if [dependentSet hasKey !mValue] then
      transientIndexesString .= "#define " . [mValue identifierRepresentation] . " (" . idx . ")\n" ;
      transientList .= "      @" . [[mValue pathExtension] utf8Representation] . ", // " . mValue . "\n" ;
      idx ++ ;
    end if ;
  end foreach ;
  const @uint transientCount := idx ;
#--- Header
  @string s := [filewrapper transientManager.managerDeclaration
    !graphString
    !transientOrderedList
    !transientIndexesString
    !transientCount
  ] ;
  [@string generateFileWithPattern
    !inSourceDirectoryPath
    !"PMTransientDependancyManager.h"
    !"//"
    !"\n\n" # Defaut user zone1
    !s
    !"\n\n" # Defaut user zone2
    !""
  ] ;
#--- Implementation
  s := [filewrapper transientManager.managerImplementation
    !transientList
  ] ;
  [@string generateFileWithPattern
    !inSourceDirectoryPath
    !"PMTransientDependancyManager.m"
    !"//"
    !"\n\n" # Defaut user zone1
    !s
    !"\n\n" # Defaut user zone2
    !""
  ] ;
end routine ;

#----------------------------------------------------------------------------*

end semantics ;
