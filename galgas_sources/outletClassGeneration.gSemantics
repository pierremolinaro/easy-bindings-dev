semantics outletClassGeneration :
  import "easyBindings_options.gOption" ;
  import "decoratedTypes.gSemantics" ;

#----------------------------------------------------------------------------*

local filewrapper outletClassGenerationTemplate in "../generation-templates/outlet-class-generation" {
}{
}{
  template outletClassDeclaration "outlet-class.h.gTemplate"
    ?@string OUTLET_CLASS_NAME
    ?@string SUPER_CLASS_NAME
    ?@protocolList ADOPTED_PROTOCOL_LIST
    ?@EXoutletClassBindingMap BINDING_MAP
  ;
  
  template outletClassImplementation "outlet-class.m.gTemplate"
    ?@string OUTLET_CLASS_NAME
    ?@string SUPER_CLASS_NAME
    ?@EXoutletClassBindingMap BINDING_MAP
  ;
}

#----------------------------------------------------------------------------*

routine generateOutletClassCode
  ??@outletClassMap inOutletClassMap
  ??@string inOutputDirectory
:
  if [@uint errorCount] == 0 then
    foreach inOutletClassMap do
      if mGenerationKind == [@generationKind fullGeneration] then
      #--- Header
        @string s := [filewrapper outletClassGenerationTemplate.outletClassDeclaration
          ![lkey string]
          !mSuperClassName
          !mAdoptedProtocolList
          !mCurrentBindingMap
        ] ;
        [@string generateFileWithPattern
          !inOutputDirectory
          ![lkey string] . ".h"
          !"//"
          !"\n\n" # Defaut user zone1
          !s
          !"\n\n" # Defaut user zone2
          !"@end\n"
        ] ;
      #--- Implementation
        s := [filewrapper outletClassGenerationTemplate.outletClassImplementation
          ![lkey string]
          !mSuperClassName
          !mCurrentBindingMap
        ] ;
        [@string generateFileWithPattern
          !inOutputDirectory
          ![lkey string] . ".m"
          !"//"
          !"\n\n" # Defaut user zone1
          !s
          !"\n\n" # Defaut user zone2
          !"@end\n"
        ] ;
      end if ;
    end foreach ;
  end if ;
end routine ;

#----------------------------------------------------------------------------*


end semantics ;
