semantics classAnalysis :
  import "transientAnalysis.gSemantics" ;
  import "attributeDeclarationAnalysis.gSemantics" ;

#----------------------------------------------------------------------------*

local routine analyzeClass
  ??@classList.element inClass
  ??@contextAnalysisStruct inContextAnalysisStruct
  ?!@classMap ioClassMap
  ?!@transientDependencyGraph ioTransientDependencyGraph
:
#------------------------------- Super class ?
  @observablePropertyMap observablePropertyMap ;
  @attributeListForImplementation propertyListForInitMethodHeader [emptyList] ;
  if [inClass->mSuperClassName string] != "" then
    [ioClassMap searchKey !inClass->mSuperClassName ?* ?observablePropertyMap ?propertyListForInitMethodHeader ?4*] ;
  else
    observablePropertyMap := [@observablePropertyMap emptyMap] ;
    propertyListForInitMethodHeader := [@attributeListForImplementation emptyList] ;
  end if ;
  const @attributeListForImplementation inheritedAttributeListForImplementation := propertyListForInitMethodHeader ;
#---------------------------------- Analyze attributes
  @fileInclusionSet fileInclusionSet [new ![@stringset emptySet] ![@stringset emptySet] ![@stringset emptySet]] ;
  analyzeAttributeDeclaration
    !inClass->mAttributeList
    !inContextAnalysisStruct
    !"class." . inClass->mClassName
    !?ioTransientDependencyGraph
    !?fileInclusionSet
    !?observablePropertyMap
    ?@attributeListForImplementation attributeListForImplementation
    !?propertyListForInitMethodHeader
  ;
#---------------------------------- Analyze transient properties
  @transientListForImplementation transientListForImplementation ;
  analyzeTransientProperties
    ![@preferencesMap emptyMap]
    !"class." . inClass->mClassName . "."
    !inClass->mTransientList
    ![@observablePropertyMap emptyMap] # Root property map
    !"" # No Root entity
    ![@controllerMap emptyMap]
    !?observablePropertyMap
    !?fileInclusionSet
    ?transientListForImplementation
    !?ioTransientDependencyGraph
  ;
#----------------------------------
  [!?fileInclusionSet->mImplementationFileInclusionSet removeKey !""] ;
  [!?ioClassMap insertKey
    !inClass->mClassName
    !inClass->mSuperClassName->string
    !observablePropertyMap
    !propertyListForInitMethodHeader
    !inheritedAttributeListForImplementation
    !attributeListForImplementation
    !transientListForImplementation
    !fileInclusionSet
  ] ;
end routine ;

#----------------------------------------------------------------------------*

routine analyzeClasses
  ??@classList inClassList
  ??@contextAnalysisStruct inContextAnalysisStruct
  !@classMap outClassMap
  ?!@transientDependencyGraph ioTransientDependencyGraph
:
  outClassMap := [@classMap emptyMap] ;
  for aClass in inClassList do
    analyzeClass
      !aClass
      !inContextAnalysisStruct
      !?outClassMap
      !?ioTransientDependencyGraph
    ;
  end for ;
end routine ;

#----------------------------------------------------------------------------*

end semantics ;
