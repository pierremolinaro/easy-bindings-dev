program easyBindings_program :
import "easyBindings_grammar.gGrammar" ;

import "cursorAnalysis.gSemantics" ;
import "cursorGeneration.gSemantics" ;
import "transientGeneration.gSemantics" ;
import "easyBindings_options.gOption" ;
import "entityGeneration.gSemantics" ;
import "typeAnalysis.gSemantics" ;
import "actionGeneration.gSemantics" ;
import "outletClassGeneration.gSemantics" ;

#----------------------------------------------------------------------------*

filewrapper predefinedOutletClasses in "../generation-templates" {
}{
}{
  template sourceFile "predefinedOutletClasses.easyBindings" ;
}

#----------------------------------------------------------------------------*

filewrapper objective_c_sources in "../generation-templates/objective-c-sources" {
  "m", "h", "xib", "swift"
}{
}{
}

#----------------------------------------------------------------------------*

when . "easyBindings"
message "a source text file with the .easyBindings extension"
??@lstring inSourceFile {
#--- Parse predefined outlets
  @astDeclarationList declarationList [emptyList] ;
  @outletClassDeclarationList outletClassDeclarationList := {} ;
  @cursorList cursorList [emptyList] ;
  grammar easyBindings_grammar on [filewrapper predefinedOutletClasses.sourceFile]
    !userDefined:false
    !?declarationList
    !?cursorList
    !?outletClassDeclarationList
    ?*
  ;
#--- Parse source file
  grammar easyBindings_grammar in inSourceFile
    !userDefined:true
    !?declarationList
    !?cursorList
    !?outletClassDeclarationList
    ?@location endOfSourceFile
  ;
#--- Enter predefined types
  declarationList += ![@predefinedTypeDeclaration new !false !"String" ![@typeKind stringType]] ;
  declarationList += ![@predefinedTypeDeclaration new !false !"NSColor" ![@typeKind colorType]] ;
  declarationList += ![@predefinedTypeDeclaration new !false !"NSData" ![@typeKind dataType]] ;
  declarationList += ![@predefinedTypeDeclaration new !false !"NSDate" ![@typeKind dateType]] ;
  declarationList += ![@predefinedTypeDeclaration new !false !"NSFont" ![@typeKind fontType]] ;
  declarationList += ![@predefinedTypeDeclaration new !false !"NSImage" ![@typeKind imageType]] ;
  declarationList += ![@predefinedTypeDeclaration new !false !"NSMenu" ![@typeKind menuType]] ;
  declarationList += ![@predefinedTypeDeclaration new !false !"NSBezierPath" ![@typeKind bezierPathType]] ;
  declarationList += ![@predefinedTypeDeclaration new !false !"Integer" ![@typeKind integerType]] ;
  declarationList += ![@predefinedTypeDeclaration new !false !"UInteger" ![@typeKind uintegerType]] ;
  declarationList += ![@predefinedTypeDeclaration new !false !"Bool" ![@typeKind boolType]] ;
  declarationList += ![@predefinedTypeDeclaration new !false !"Double" ![@typeKind doubleType]] ;
#------------------------------------------------------- Type Inventory
   @unifiedTypeMap unifiedTypeMap [emptyMap] ;
  foreach declarationList do
    [mDeclaration typeInventory !?unifiedTypeMap] ;
  end foreach ;
  if [option easyBindings_options.outputClassDependencyGraph value] then
    const s := [unifiedTypeMap edgeGraphvizRepresentation] ;
    const path := inSourceFile->string . ".classDependancyGraph.dot" ;
    [s writeToFileWhenDifferentContents !path ?*] ;
  end if ;
#------------------------------------------- Check all types are defined
  const unsolvedProxyList := [unifiedTypeMap unsolvedProxyList] ;
  foreach unsolvedProxyList do
    error mValue :"type " . mValue . " is undefined" ;
  end foreach ;
#------------------------------------------- Topological sort types and continue
  if [unsolvedProxyList length] == 0 then
    [unifiedTypeMap topologicalSort
      ?@lstringlist sortedTypeNames
      ?@lstringlist unsortedTypeNames
    ] ;
    if [unsortedTypeNames length] > 0 then
      var s := "cannot sort types ; the following types are involved in circular dependence:" ;
      foreach unsortedTypeNames do
        s .= "\n-- " . mValue ;
      end foreach ;
      error here : s ;
    else
      semanticAnalysis
        !unifiedTypeMap
        !sortedTypeNames
        !inSourceFile->string
        !cursorList
        !outletClassDeclarationList
        ??@transientDependencyGraphNodeInfoList sortedTransientAndObservablePropertyNodes
        ??@structForGeneration generation
      ;
      if [@uint errorCount] == 0 then
        generateCode
          !sortedTransientAndObservablePropertyNodes
          !generation
          !inSourceFile->string
        ;
      end if ;
    end if ;
  end if ;
}

#----------------------------------------------------------------------------*
#                                                                            *
#   S E M A N T I C    A N A L Y S I S                                       *
#                                                                            *
#----------------------------------------------------------------------------*

local routine semanticAnalysis
  ??@unifiedTypeMap inUnifiedTypeMap
  ??@lstringlist unused inSortedKeys
  ??@string inSourceFile
  ??@cursorList unused inCursorList
  ??@outletClassDeclarationList inOutletClassDeclarationList
  !@transientDependencyGraphNodeInfoList outSortedTransientAndObservablePropertyNodes
  !@structForGeneration outGeneration
:
#--- Build transient dependancy graph
  buildTransientDependencyGraph
    !inUnifiedTypeMap
    !inSourceFile
    ?outSortedTransientAndObservablePropertyNodes
  ;
#--- Build outlet class map
  @outletClassMap outletClassMap := {} ;
  for () in inOutletClassDeclarationList do
    [!?outletClassMap insertKey !mOutletClassName] ;
  end for ;
#--- Type analysis
  if [@uint errorCount] == 0 then
    typeAnalysis
      !inUnifiedTypeMap
      !outletClassMap
      ?outGeneration
    ;
  else
    outGeneration := [@structForGeneration default] ;
  end if ;
end routine ;

#----------------------------------------------------------------------------*
#                                                                            *
#   G E N E R A T E    C O D E                                               *
#                                                                            *
#----------------------------------------------------------------------------*

local routine generateCode
  ??@transientDependencyGraphNodeInfoList inSortedTransientAndObservablePropertyNodes
  ??@structForGeneration inGeneration
  ??@string inSourceFile
:
  generateTransients
    !inSourceFile
    !inSortedTransientAndObservablePropertyNodes
    !inGeneration->mTransientListForGeneration
  ;
  generateActions
    !inSourceFile
    !inGeneration->mActionListForGeneration
  ;
  const outputDirectory := [inSourceFile stringByDeletingLastPathComponent] ;
  generatePreferences
    !inGeneration->mPreferenceListForGeneration
    !outputDirectory
  ;
  generateOutletClasses
    !inGeneration->mNeededOutletClasses
    !outputDirectory
  ;
end routine ;

#----------------------------------------------------------------------------*

end program ;
