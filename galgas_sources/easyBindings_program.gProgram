program easyBindings_program :
import "abstractSyntaxTree.gSemantics" ;
import "semanticAnalysis.gSemantics" ;
import "classGeneration.gSemantics" ;
import "entityGeneration.gSemantics" ;
import "preferencesGeneration.gSemantics" ;
import "documentGeneration.gSemantics" ;
import "easyBindings_grammar.gGrammar" ;

#----------------------------------------------------------------------------*

local filewrapper predefinedOutletClasses in "../generation-templates/predefined-outlet-classes" {
}{
}{
  template sourceFile "predefinedOutletClasses.easyBindings" ;
}

#----------------------------------------------------------------------------*

local filewrapper objective_c_sources in "../generation-templates/objective-c-sources" {
  "m", "h", "xib"
}{
}{
}

#----------------------------------------------------------------------------*

when . "easyBindings"
message "a source text file with the .easyBindings extension"
??@lstring inSourceFile {
#--- Parse predefined outlets
  @ASTstruct ast ;
  grammar easyBindings_grammar on [filewrapper predefinedOutletClasses.sourceFile] ?ast ;
#--- Parse source file
  @ASTstruct sourceAST ;
  grammar easyBindings_grammar in inSourceFile ?sourceAST ;
#--- Combine ASTs
  ast->mClassList .= sourceAST->mClassList ;
  ast->mEntityList .= sourceAST->mEntityList ;
  ast->mPreferencesList .= sourceAST->mPreferencesList ;
  ast->mDocumentDeclarationList .= sourceAST->mDocumentDeclarationList ;
  ast->mOutletClassList .= sourceAST->mOutletClassList ;
  ast->mControllerClassList .= sourceAST->mControllerClassList ;
#--- Semantic Analysis
  @classMap classMap ;
  @entityMap entityMap ;
  @preferencesMap preferencesMap ;
  @outletClassMap outletClassMap ;
  @documentMap documentMap ;
  @controllerClassMap controllerClassMap ;
  @stringlist sortedTransientOrderedList ;
  @2stringlist transientDependencyArcList ;
  semanticAnalysis
    !ast
    !inSourceFile->string
    ?outletClassMap
    ?controllerClassMap
    ?classMap
    ?entityMap
    ?preferencesMap
    ?documentMap
    ?sortedTransientOrderedList
    ?transientDependencyArcList
  ;
#--- Code generation
  const @string sourceDirectoryPath := [inSourceFile stringByDeletingLastPathComponent] ;
  generateClassCode !transientDependencyArcList !classMap !sourceDirectoryPath ;
  generateEntityCode !transientDependencyArcList !entityMap !sourceDirectoryPath ;
  generatePreferencesCode !transientDependencyArcList !preferencesMap !sourceDirectoryPath ;
  generateDocumentCode !transientDependencyArcList !documentMap !sourceDirectoryPath ;
#--- Output dependency order definition file
  generateTransientDependencyFiles
    !transientDependencyArcList
    !sourceDirectoryPath
    !sortedTransientOrderedList
  ;
#--- Add embedded sources
  @stringset sources [setWithString !"easy-bindings-utilities"] ;
  sources += !"PMDebug" ;
#  if [preferencesMap count] > 0 then
#    sources += !"PMAbstractPreferences" ;
#  end if ;
#  if [documentMap count] > 0 then
#    sources += !"PMAbstractPersistentDocument" ;
#  end if ;
#  if [entityMap count] > 0 then
#    sources += !"PMAbstractManagedObject" ;
#  end if ;
  if [classMap count] > 0 then
    sources += !"PMClass" ;
  end if ;
  @filewrapper fw := [filewrapper objective_c_sources] ;
  foreach [fw allTextFilePathes] do
    const @string sourceName := [mValue lastPathComponent] ;
    if [sources hasKey ![sourceName stringByDeletingPathExtension]] then
      [@string generateFile
        !sourceDirectoryPath . [mValue stringByDeletingLastPathComponent]
        !sourceName
        ![fw textFileContentsAtPath !mValue]
       ] ;
    end if ;
  end foreach ;
}

#----------------------------------------------------------------------------*

end program ;
