//----------------------------------------------------------------------------------------------------------------------
#   SYNTAX
//----------------------------------------------------------------------------------------------------------------------

syntax extension easyBindings_syntax {

  #·····················································································································
  
  rule <graphviz_declaration> (?!@astDeclarationStruct ioDeclarationAST) {
    $graphviz$
    $Identifier$ (?let @lstring entityName)
    !?ioDeclarationAST.mGraphvizList.append (entityName)
    $;$
 }
 
  #·····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
#   SEMANTIC TYPES                        
//----------------------------------------------------------------------------------------------------------------------

proc graphvizAnalysis (
  let @string inSourceFileDirectory,
  let @semanticContext inSemanticContext,
  let @lstringlist inGraphvizList)
{
  if @uint.errorCount == 0 then
    for (rootEntityName) in inGraphvizList do
      graphvizRootEntityAnalysis (inSourceFileDirectory, inSemanticContext, rootEntityName.string)
      graphvizRootEntityStrongAnalysis (inSourceFileDirectory, inSemanticContext, rootEntityName.string)
    end
  end
}

//----------------------------------------------------------------------------------------------------------------------

private proc graphvizRootEntityAnalysis (let @string inSourceFileDirectory,
                                         let @semanticContext inSemanticContext,
                                         let @string inRootEntityName) {
  var @stringset reachableEntityNameSet = [inRootEntityName]
  var @stringlist exploreArray = [.init (inRootEntityName)]
  var @stringlist nodeList = []
  var @stringlist arrowList = []
  loop (inSemanticContext.mClassMap.count + 1) while exploreArray.count > 0 do
    !?exploreArray.popLast (?let @string entityName)
    var node = "  " + entityName + "[label=\"<" + entityName + ">" + entityName
    inSemanticContext.mClassMap.searchKey (entityName.nowhere , ?let entityKind, ?let @propertyMap propertyMap, ?2*)
    entityKind.extractEntity (?superEntityName: let superEntityName, ?3*)
    if superEntityName != "" then
      if not reachableEntityNameSet.hasKey (superEntityName) then
        !?reachableEntityNameSet.insert (superEntityName)
        !?exploreArray.append (superEntityName)
      end
      !?arrowList.append ("  " + entityName + " -> " + superEntityName +  " [dir=both arrowtail=dot arrowhead=normal]")
    end
    for (propertyName, propertyKind, 2*) in propertyMap do
      switch propertyKind
      case property (type, accessibility) :
        switch accessibility 
        case stored :
          node += "|" + type.swiftTypeName + " " + propertyName
        case transient (*) :
        case computed :
        end
      case arrayController (2*) :
      case selectionController (*) :
      case toMany (@lstring typeName, @propertyAccessibility accessibility, *, optionKind) :
       if accessibility.isStored then
         node += "|<" + propertyName + ">[" + typeName + "] " + propertyName
         switch optionKind
         case none :
           if not reachableEntityNameSet.hasKey (typeName) then
              !?reachableEntityNameSet.insert (typeName)
              !?exploreArray.append (typeName)
           end
           !?arrowList.append ("  " + entityName + ":" + propertyName
             + " -> " + typeName + " [dir=both arrowtail=none arrowhead=veevee]")
         case hasOpposite (oppositeName) :
           if not reachableEntityNameSet.hasKey (typeName) then
             !?reachableEntityNameSet.insert (typeName)
             !?exploreArray.append (typeName)
           end
           !?arrowList.append ("  " + entityName + ":" + propertyName
              + " -> " + typeName + ":" + oppositeName + " [dir=both arrowtail=onormal arrowhead=veevee]")
         case hasDependance (*) :
           if not reachableEntityNameSet.hasKey (typeName) then
             !?reachableEntityNameSet.insert (typeName)
             !?exploreArray.append (typeName)
           end
           !?arrowList.append ("  " + entityName + ":" + propertyName
              + " -> " + typeName + " [dir=both arrowtail=none arrowhead=veevee]")
         end
        end
      case toOne (@lstring typeName, @propertyAccessibility accessibility, *, opposite, *) :
        if accessibility.isStored then
          node += "|<" + propertyName + ">" + typeName + "? " + propertyName
          switch opposite
          case none :
            if not reachableEntityNameSet.hasKey (typeName) then
              !?reachableEntityNameSet.insert (typeName)
              !?exploreArray.append (typeName)
            end
            !?arrowList.append ("  " + entityName + ":" + propertyName 
               + " -> " + typeName + ":" + typeName + " [dir=both arrowtail=none arrowhead=onormal]")
          case oppositeIsToMany (*) : # No generation
          case oppositeIsToOne (oppositeName) :
            if not reachableEntityNameSet.hasKey (typeName) then
              !?reachableEntityNameSet.insert (typeName)
              !?exploreArray.append (typeName)
            end
            if propertyName.string > oppositeName.string then
              !?arrowList.append ("  " + entityName + ":" + propertyName 
                   + " -> " + typeName + ":" + oppositeName + " [dir=both arrowtail=onormal arrowhead=onormal]")
            end
          end
        end
      end
    end
    node += "\"]"
    !?nodeList.append (node)
  end
//-- Generation
  var s = "digraph G {\n"
  s += "  rankdir=LR ;\n"
  s += "  node [shape=record fontname=helvetica style=rounded] ;\n"
  for (node) in nodeList do
    s += node + " ;\n"
  end
  for (arrow) in arrowList do
    s += arrow + " ;\n"
  end
  s += "}\n"
  let filePath = inSourceFileDirectory + "/models/graph-" + inRootEntityName + ".dot"
  let temp = filePath.stringByDeletingLastPathComponent ; temp.makeDirectory ()
#  filePath.stringByDeletingLastPathComponent ().makeDirectory ()
}

#·······················································································································

graph @entityStrongReferenceGraph (@stringlist) {
  %insertSetter addNode %errorMessage "the '%K' entity is already declared at %L"
}

//----------------------------------------------------------------------------------------------------------------------

private proc graphvizRootEntityStrongAnalysis (let @string inSourceFileDirectory,
                                               let @semanticContext inSemanticContext,
                                               let @string inRootEntityName) {
  var @stringset reachableEntityNameSet = [inRootEntityName]
  var @stringlist exploreArray = [.init (inRootEntityName)]
  var @stringlist nodeList = []
  var @stringlist arrowList = []
  var @entityStrongReferenceGraph entityStrongReferenceGraph = .init
  loop (inSemanticContext.mClassMap.count + 1) while exploreArray.count > 0 do
    !?exploreArray.popLast (?let @string entityName)
    !?nodeList.append (entityName)
    !?entityStrongReferenceGraph.addNode (.init (entityName, .nowhere), entityName)
    inSemanticContext.mClassMap.searchKey (entityName.nowhere , ?let entityKind, ?let @propertyMap propertyMap, ?2*)
    entityKind.extractEntity (?superEntityName: let superEntityName, ?3*)
    if superEntityName != "" then
      if not reachableEntityNameSet.hasKey (superEntityName) then
        !?reachableEntityNameSet.insert (superEntityName)
        !?exploreArray.append (superEntityName)
      end
      !?arrowList.append (superEntityName + " -> " + entityName +  " [arrowtail=dot arrowhead=normal]")
      !?entityStrongReferenceGraph.addEdge (.init (superEntityName, .nowhere), .init (entityName, .nowhere))
    end
    for (*, propertyKind, 2*) in propertyMap do
      switch propertyKind
      case property (2 *) :
      case arrayController (2*) :
      case selectionController (*) :
      case toMany (@lstring typeName, @propertyAccessibility accessibility, 2*) :
        !?arrowList.append (entityName + " -> " + typeName + " [dir=both arrowtail=none arrowhead=veevee]")
        !?entityStrongReferenceGraph.addEdge (.init (entityName, .nowhere), .init (typeName, .nowhere))
        if accessibility.isStored then
          if not reachableEntityNameSet.hasKey (typeName) then
             !?reachableEntityNameSet.insert (typeName)
             !?exploreArray.append (typeName)
           end
        end
      case toOne (@lstring typeName, @propertyAccessibility accessibility, *, opposite, weak) :
        if not weak then
          !?arrowList.append (entityName + " -> " + typeName + " [dir=both arrowtail=none arrowhead=onormal]")
          !?entityStrongReferenceGraph.addEdge (.init (entityName, .nowhere), .init (typeName, .nowhere))
        end
        if accessibility.isStored then
          switch opposite
          case none :
            if not reachableEntityNameSet.hasKey (typeName) then
              !?reachableEntityNameSet.insert (typeName)
              !?exploreArray.append (typeName)
            end
          case oppositeIsToMany (*) : # No generation
          case oppositeIsToOne (*) :
            if not reachableEntityNameSet.hasKey (typeName) then
              !?reachableEntityNameSet.insert (typeName)
              !?exploreArray.append (typeName)
            end
          end
        end
      end
    end
  end
//-- Generation
  var s = "digraph G {\n"
  s += "  rankdir=LR ;\n"
  s += "  node [shape=record fontname=helvetica style=rounded] ;\n"
  for (node) in nodeList do
    s += "  " + node + " ;\n"
  end
  for (arrow) in arrowList do
    s += "  " + arrow + " ;\n"
  end
  s += "}\n"
  var filePath = inSourceFileDirectory + "/models/strong-" + inRootEntityName + ".dot"
  let temp = filePath.stringByDeletingLastPathComponent ; temp.makeDirectory ()
  s.writeToFileWhenDifferentContents (filePath, ?*)
//-- Print graph
  filePath = inSourceFileDirectory + "/models/strong-dep-" + inRootEntityName + ".dot"
  let temp2 = entityStrongReferenceGraph.graphviz ; temp2.writeToFileWhenDifferentContents (filePath, ?*)
//-- Check all node are defined
  let undefinedNodeList = entityStrongReferenceGraph.undefinedNodeKeyList
  if undefinedNodeList.count > 0 then
    var s = "for " + inRootEntityName + " graph , the following entities are not defined"
    for (node) in undefinedNodeList do
      s += "\n -- " + node
    end
    error .nowhere : s
  end
//-- Check accessibility
  if undefinedNodeList.count == 0 then
    let accessibleNodeList = entityStrongReferenceGraph.accessibleNodesFrom (
     [.init (.init (inRootEntityName, .nowhere))], [])
    let accessibleNodeSet = @stringset.setWithLStringList (accessibleNodeList)
    for (node) in nodeList do
      if not accessibleNodeSet.hasKey (node) then
        error .nowhere : node + " entity is not reachable via strong reference from " + inRootEntityName
      end
    end
  end
//-- Check no circularities
  if undefinedNodeList.count == 0 then 
    entityStrongReferenceGraph.circularities (?*, ?let @lstringlist unsortedNodeList)
    if unsortedNodeList.count > 0 then
      var s = "for " + inRootEntityName + " graph, " + unsortedNodeList.count
      s += " entities are involved in a strong reference cycle"
      for (node) in unsortedNodeList do
        s += "\n -- " + node
      end
      warning .nowhere : s
    end
  end
}

//----------------------------------------------------------------------------------------------------------------------

