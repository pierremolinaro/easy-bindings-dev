//----------------------------------------------------------------------------------------------------------------------
#   AST   
//----------------------------------------------------------------------------------------------------------------------

class @enumerationDeclarationAST : @abstractDeclarationAST {
  let @lstringlist mEnumConstantNameList
  let @bool mCaseIterable
}

#·······················································································································

override proc @enumerationDeclarationAST.enterInPrecedenceGraph (?!@declarationPrecedenceGraph ioGraph) {
  !?ioGraph.addNode (self.mClassName, self)
}

#·······················································································································

override func @enumerationDeclarationAST.nodeKey() -> @lstring {
  result = self.mClassName
}

#·······················································································································

list @enumerationFunctionListAST {
  public var @lstring mEnumName
  public var @lstring mFunctionName
  public var @2lstringlist mAssociationList
}

//----------------------------------------------------------------------------------------------------------------------
#   SYNTAX
//----------------------------------------------------------------------------------------------------------------------

syntax extension easyBindings_syntax {

  #·····················································································································
  
  rule <enum_declaration> (?!@astDeclarationStruct ioDeclarationAST) {
    $enum$
    $Identifier$ (?let @lstring enumName)
    let @bool caseIterable
    select
      caseIterable = false
    or
      $@attribute$ (?let attribute)
      if attribute.string != "CaseIterable" then
        error attribute : "only @CaseIterable attribute is allowed here" fixit ( %replaceBy "@CaseIterable" )
      end
      caseIterable = true
    end
    ${$
    var @lstringlist enumConstants = []
    repeat
      $identifier$ (?let @lstring constantName)
      !?enumConstants.append (constantName)
    while
      $,$
    end
    $}$
    !?ioDeclarationAST.mUnifiedDeclarationList.append (@enumerationDeclarationAST (enumName, enumConstants, caseIterable))
  }

  #·····················································································································
  
  rule <enum_function_declaration> (?!@astDeclarationStruct ioDeclarationAST) {
    $func$
    $enum$
    $Identifier$ (?let @lstring enumName)
    $.$    
    $identifier$ (?let @lstring funcName)
    ${$
    var @2lstringlist associationList = []
    repeat
    while
      $identifier$ (?let @lstring constantName)
      $:$
      $literal_string$ (?let @lstring associatedString)
      $;$
      !?associationList.append (constantName, associatedString)
    end 
    $}$
    !?ioDeclarationAST.mEnumerationFunctionListAST.append (enumName, funcName, associationList)
  }
  
  #·····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
#   CLASS AND PROPERTY SEMANTIC ANALYSIS                       
//----------------------------------------------------------------------------------------------------------------------

map @enumConstantMap {
  public var @uint mIndex
  %insertSetter insertKey %errorMessage "there is already a '%K' constant"
  %searchMethod searchKey %errorMessage "the '%K' constant is not defined"
}

//----------------------------------------------------------------------------------------------------------------------

sortedlist @enumFunAssociationSortedList {
  public var @uint mIndex
  public var @string mAssociatedString
}{
  mIndex <
}

//----------------------------------------------------------------------------------------------------------------------

map @enumFuncMap {
  public var @enumFunAssociationSortedList mAssociationSortedList
  %insertSetter insertKey %errorMessage "there is already a '%K' enum function"
  %searchMethod searchKey %errorMessage "the '%K' enum function is not defined"
}

#·······················································································································

override proc @enumerationDeclarationAST.firstAnalysisPhase(
       ?!@semanticContext ioSemanticContext,
       ?!@generationStruct ioGeneration)
{
  var @enumConstantMap enumConstantMap = []
  for (s) in self.mEnumConstantNameList do
    !?enumConstantMap.insertKey (s, enumConstantMap.count )
  end
  var @enumFuncMap enumFuncMap = []
  for (enumTypeName, funcName, associationList) in ioSemanticContext.mEnumerationFunctionListAST do
    if enumTypeName.string == self.mClassName.string then
      var @stringset definedConstantNameSet = []
      var @enumFunAssociationSortedList associationSortedList = []
      for (constantName, associatedString) in associationList do
        enumConstantMap.searchKey (constantName, ?let idx)
        !?associationSortedList.insert (idx, associatedString.string)
        if definedConstantNameSet.hasKey (constantName) then
          error constantName : "Duplicated constant"
        end
        !?definedConstantNameSet.insert (constantName)
      end
      for (s) in self.mEnumConstantNameList do
        if not definedConstantNameSet.hasKey (s) then
          error funcName : "No association for '" + s + "' constant"
        end
      end
      !?enumFuncMap.insertKey (funcName, associationSortedList)
    end
  end
  !?ioSemanticContext.mClassMap.insertKey (
    self.mClassName,
    .atomic (!kind: .enumType (!enumTypeName:self.mClassName, !constantMap: enumConstantMap, !funcMap: enumFuncMap)),
    [],
    [],
    []
  )
//-- Generation
  !?ioGeneration.mFileGenerationList.append (@enumForGeneration (
    self.mClassName,
    self.mEnumConstantNameList,
    enumFuncMap,
    self.mCaseIterable
  )
  )
}

//----------------------------------------------------------------------------------------------------------------------
#   GENERATION
//----------------------------------------------------------------------------------------------------------------------

class @enumForGeneration : @abstractFileGeneration {
  let @string mEnumName
  let @lstringlist mEnumConstantList
  let @enumFuncMap mEnumFuncMap
  let @bool mCaseIterable
}

#·······················································································································

private filewrapper enumGenerationTemplate in "generation-templates" {
}{
}{
  template enumGenerationInSwift : "enum.swift.galgasTemplate" (
    @string ENUM_TYPE_NAME,
    @lstringlist CONSTANT_ORDERED_LIST,
    @enumFuncMap FUNCTION_MAP,
    @bool CASE_ITERABLE
  )
}

#·······················································································································

override proc @enumForGeneration.generateCode(
    let @string inOutputDirectory,
    let @generationStruct unused inGenerationStruct,
    ?!@stringset ioGeneratedFileSet) {
  if self.mEnumConstantList.count > 0 then # Empty list is the generic type "Enum"
    let s = filewrapper [enumGenerationTemplate.enumGenerationInSwift:
      self.mEnumName,
      self.mEnumConstantList,
      self.mEnumFuncMap,
      self.mCaseIterable
    ]
    let fileName = "enum-" + self.mEnumName + ".swift"
    !?ioGeneratedFileSet.insert (fileName)
    @string.generateFile (
      inOutputDirectory,
      fileName,
      s
    )
  end
}

//----------------------------------------------------------------------------------------------------------------------
