#-----------------------------------------------------------------------------------------------------------------------
#   AST
#-----------------------------------------------------------------------------------------------------------------------

enum @proxyKind {
  case propertyProxy
  case toManyProxy
}

#·······················································································································

class @proxyDeclarationAST : @abstractDeclarationAST {
  public var @proxyKind mProxyKind
  public var @lstring mProxyTypeName
  public var @lstring mProxyName
  public var @lstring mToOneRelationshipName
  public var @lstring mPropertyName
}

#·······················································································································

override proc @proxyDeclarationAST. enterInPrecedenceGraph( ?!@declarationPrecedenceGraph ioGraph) {
  let node = @lstring.new (!self.mClassName.string + " " + self.mProxyName !self.mProxyName.location)
  [!?ioGraph addNode !node !self]
  [!?ioGraph addEdge !node !self.mClassName]
  [!?ioGraph addEdge !node !self.mProxyTypeName]
}

#·······················································································································

override func @proxyDeclarationAST. nodeKey() -> @lstring {
  result = @lstring.new (!self.mClassName.string + " " + self.mProxyName !self.mProxyName.location)
}

#-----------------------------------------------------------------------------------------------------------------------
#   SYNTAX
#-----------------------------------------------------------------------------------------------------------------------

syntax extension easyBindings_syntax {

  #·····················································································································
  
  rule <controller_declaration>(
            ?let @lstring inCurrentEntity
            ?let @lstring unused inRootEntity
            ?!@arrayControllerBindingListAST unused ioArrayControllerBindingListAST
            ?!@astDeclarationStruct ioDeclarationAST)
  {
    let @proxyKind proxyKind
    select
      $property$
      proxyKind = .propertyProxy
    or
      $toMany$
      proxyKind = .toManyProxy
    end
    $proxy$
    $Identifier$( ?let @lstring proxyTypeName)
    $identifier$( ?let @lstring proxyName)
    $:$
    $identifier$( ?let @lstring toOnePropertyName)
    $.$
    $identifier$( ?let @lstring propertyName)
    $;$
    ioDeclarationAST.mUnifiedDeclarationList += !@proxyDeclarationAST.new (
      !inCurrentEntity
      !proxyKind
      !proxyTypeName
      !proxyName
      !toOnePropertyName
      !propertyName
    )
  }

  #·····················································································································

}

#-----------------------------------------------------------------------------------------------------------------------
#   CLASS AND PROPERTY SEMANTIC ANALYSIS                       
#-----------------------------------------------------------------------------------------------------------------------

override proc @proxyDeclarationAST. firstAnalysisPhase(
       ?!@semanticContext ioSemanticContext
       ?!@generationStruct unused ioGeneration)
{
  with self.mClassName in !?ioSemanticContext.mClassMap 
    error message searchKey
  do
    [ioSemanticContext.mClassMap searchKey !self.mProxyTypeName ?let proxyKind ?3*]
    switch proxyKind
    case prefs :
      error self.mProxyTypeName : "an atomic type is required here"
    case entity (* @bool isGraphic *) :
      switch self.mProxyKind 
      case toManyProxy :
      let k = @propertyKind.toMany (
        !typeName: self.mProxyTypeName
        !accessibility: .stored
        !graphic: isGraphic
        !optionKind: .none
      )
      [!?mPropertyMap insertKey !self.mProxyName !k !{} !false]
      case propertyProxy :
        error self.mProxyTypeName : "this type should be an entity"
      end
    case document (*) :
      error self.mProxyTypeName : "an atomic type is required here"
    case atomic (type) :
      [!?mPropertyMap insertKey !self.mProxyName !.property (!type: type !accessibility: .stored) !{} !false]
    end
  end
}

#·······················································································································

override proc @proxyDeclarationAST. secondAnalysisPhase(
       ?!@semanticContext ioSemanticContext
       ?!@generationStruct unused ioGeneration)
{
  with self.mClassName in !?ioSemanticContext.mClassMap 
    error message searchKey
  do
    [mPropertyMap searchKey !self.mToOneRelationshipName ?let relationshipKind ?2*]
    switch relationshipKind
    case arrayController (2*) :
      error self.mToOneRelationshipName : "a toOne relationship is required here"
    case selectionController (*) :
      error self.mToOneRelationshipName : "a toOne relationship is required here"
    case property (2*) :
      error self.mToOneRelationshipName : "a toOne relationship is required here"
    case toMany (4*) :
      error self.mToOneRelationshipName : "a toOne relationship is required here"
    case toOne (toOneTypeName 3*) :
      [ioSemanticContext.mClassMap searchKey !toOneTypeName ?* ?let propertyMap ?2*]
      [propertyMap searchKey !self.mPropertyName ?let propertyKind ?2*]
      switch propertyKind
      case property (propertyType 1*) :
        mPropertyGenerationList += !@atomicProxyGeneration.new (
          !self.mProxyName.string
          !self.mProxyKind
          !propertyType
          !self.mToOneRelationshipName.string
          !self.mPropertyName.string
        )
        if self.mProxyKind != .propertyProxy then
          error self.mPropertyName : "this property is not atomic"
        end
      case toMany (toManyTypeName 3*) :
        [ioSemanticContext.mClassMap searchKey !toManyTypeName ?4*]
        mPropertyGenerationList += !@toManyProxyGeneration.new (
          !self.mProxyName.string
          !self.mProxyKind
          !toManyTypeName
          !self.mToOneRelationshipName.string
          !self.mPropertyName.string
        )
        if self.mProxyKind != .toManyProxy then
          error self.mPropertyName : "this property is not atomic"
        end
      case toOne (4*) :
        switch self.mProxyKind
        case propertyProxy :
          error self.mPropertyName : "an atomic property is required here"
        case toManyProxy :
          error self.mPropertyName : "a toMany property is required here"
        end
      case arrayController (2*) :
        switch self.mProxyKind
        case propertyProxy :
          error self.mPropertyName : "an atomic property is required here"
        case toManyProxy :
          error self.mPropertyName : "a toMany property is required here"
        end
      case selectionController (*) :
        switch self.mProxyKind
        case propertyProxy :
          error self.mPropertyName : "an atomic property is required here"
        case toManyProxy :
          error self.mPropertyName : "a toMany property is required here"
        end
      end
    end
  end
}

#-----------------------------------------------------------------------------------------------------------------------
#   CODE GENERATION (toMany proxy)
#-----------------------------------------------------------------------------------------------------------------------

class @toManyProxyGeneration : @propertyGeneration {
  public var @proxyKind mProxyKind
  public var @string mToManyTypeName
  public var @string mObservedRelationshipName
  public var @string mObservedPropertyName
}

#·······················································································································

list @toManyProxyGenerationList {
  public var @toManyProxyGeneration mProperty
}

#·······················································································································

override func @toManyProxyGeneration. declarationInSelectionControllerCode() -> @string {
  result  = "  //" + @string.stringWithSequenceOfCharacters  (!'·' !116) + "\n"
  result += "  //   ToMany proxy: " + self.mPropertyName + "\n"
  result += "  //" + @string.stringWithSequenceOfCharacters  (!'·' !116) + "\n\n"
  result += "  let " + self.mPropertyName + "_property = ProxyArrayOf_" + self.mToManyTypeName + " ()\n\n"
}

#·······················································································································

override func @toManyProxyGeneration. initCode() -> @string {
  result = ""
}

#·······················································································································

override func @toManyProxyGeneration. bindPropertyInSelectionController() -> @string {
  result = ""
}

#·······················································································································

override func @toManyProxyGeneration. propertyDeclarationCode(
   ?let @bool unused inPreferences
   ?let @stringset unused inOverriddenTransients) -> @string
{
  result  = "  //" + @string.stringWithSequenceOfCharacters  (!'·' !116) + "\n"
  result += "  //   ToMany proxy: " + self.mPropertyName + "\n"
  result += "  //" + @string.stringWithSequenceOfCharacters  (!'·' !116) + "\n\n"
  result += "  var " + self.mPropertyName + "_modelDidChangeController : EBObservablePropertyController? = nil\n"
  result += "  // var " + self.mPropertyName + "_boundObjectDidChangeController : EBObservablePropertyController? = nil\n"
  result += "  let " + self.mPropertyName + "_property = ProxyArrayOf_" + self.mToManyTypeName + " ()\n\n"
  result += "  //" + @string.stringWithSequenceOfCharacters  (!'·' !116) + "\n\n"
  result += "  var " + self.mPropertyName + " : EBReferenceArray <" + self.mToManyTypeName + "> {\n"
  result += "    get {\n"
  result += "      switch self." + self.mPropertyName + "_property.selection {\n"
  result += "      case .empty, .multiple :\n"
  result += "        return EBReferenceArray ()\n"
  result += "      case .single (let v) :\n"
  result += "        return EBReferenceArray (v)\n"
  result += "      }\n"
  result += "    }\n"
  result += "    set {\n"
  result += "      self." + self.mPropertyName + "_property.setProp (newValue)\n"
  result += "    }\n"
  result += "  }\n\n"
}

#·······················································································································

override func @toManyProxyGeneration. configurationCode( ?let @bool unused inPreferences) -> @string {
  result  = "  //--- ToMany proxy: " + self.mPropertyName + "\n"
  result += "    do{\n"
  result += "      let controller = EBObservablePropertyController (\n"
  result += "        observedObjects: [self." + self.mObservedRelationshipName + "_property],\n"
  result += "        callBack: { [weak self] in\n"
  result += "          if let me = self, let model = me." + self.mObservedRelationshipName + " {\n"
  result += "            me." + self.mPropertyName + "_property.setModel (model." + self.mObservedPropertyName + "_property)\n"
  result += "          }\n"
  result += "        }\n"
  result += "      )\n"
  result += "      self." + self.mObservedRelationshipName + "_property.addEBObserverOf_" + self.mObservedPropertyName + " (controller)\n"
  result += "      self." + self.mPropertyName + "_modelDidChangeController = controller\n"
  result += "    }\n"
}

#·······················································································································

override func @toManyProxyGeneration. terminationCode( ?let @bool unused inPreferences) -> @string {
  result  = "  //--- ToMany proxy: " + self.mPropertyName + "\n"
  result += "    self." + self.mPropertyName + "_property.setModel (nil)\n"
  result += "    self." + self.mPropertyName + "_modelDidChangeController?.unregister ()\n"
  result += "    self." + self.mPropertyName + "_modelDidChangeController = nil\n"
}

#·······················································································································

override func @toManyProxyGeneration. clearObjectExplorerCode() -> @string {
  result  = "    //--- ToMany proxy: " + self.mPropertyName + "\n"
  result += "      self." + self.mPropertyName + "_property.mObserverExplorer = nil\n"
}

#-----------------------------------------------------------------------------------------------------------------------
#   CODE GENERATION (atomic proxy)
#-----------------------------------------------------------------------------------------------------------------------

class @atomicProxyGeneration : @propertyGeneration {
  public var @proxyKind mProxyKind
  public var @typeKind mType
  public var @string mObservedRelationshipName
  public var @string mObservedPropertyName
}

#·······················································································································

list @atomicProxyGenerationList {
  public var @atomicProxyGeneration mProperty
}

#·······················································································································

override func @atomicProxyGeneration. declarationInSelectionControllerCode() -> @string {
  result  = "  //" + @string.stringWithSequenceOfCharacters  (!'·' !116) + "\n"
  result += "  //   Atomic proxy property: " + self.mPropertyName + "\n"
  result += "  //" + @string.stringWithSequenceOfCharacters  (!'·' !116) + "\n\n"
  result += "  let " + self.mPropertyName + "_property = EBPropertyProxy_" + [self.mType swiftTypeName] + " ()\n\n"
}

#·······················································································································

override func @atomicProxyGeneration. initCode() -> @string {
  result = ""
}

#·······················································································································

override func @atomicProxyGeneration. bindPropertyInSelectionController() -> @string {
  result  = "  //" + @string.stringWithSequenceOfCharacters  (!'·' !116) + "\n\n"
  result += "  private final func bind_property_" + self.mPropertyName + " () {\n"
  result += "    self.selectedArray_property.addEBObserverOf_" + self.mPropertyName + " (self." + self.mPropertyName + "_property)\n"
  result += "    self." + self.mPropertyName + "_property.mReadModelFunction = { [weak self] in\n"
  result += "      if let model = self?.selectedArray_property {\n"
  result += "        switch model.selection {\n"
  result += "        case .empty :\n"
  result += "          return .empty\n"
  result += "        case .multiple :\n"
  result += "          return .multiple\n"
  result += "        case .single (let v) :\n"
  result += "          var s = Set <" + [self.mType swiftTypeName] + "> ()\n"
  result += "          var isMultipleSelection = false\n"
  result += "          for object in v {\n"
  result += "            switch object." + self.mPropertyName + "_property.selection {\n"
  result += "            case .empty :\n"
  result += "              return .empty\n"
  result += "            case .multiple :\n"
  result += "              isMultipleSelection = true\n"
  result += "            case .single (let vProp) :\n"
  result += "              s.insert (vProp)\n"
  result += "            }\n"
  result += "          }\n"
  result += "          if isMultipleSelection {\n"
  result += "            return .multiple\n"
  result += "          }else if s.count == 0 {\n"
  result += "            return .empty\n"
  result += "          }else if s.count == 1 {\n"
  result += "            return .single (s.first!)\n"
  result += "          }else{\n"
  result += "            return .multiple\n"
  result += "          }\n"
  result += "        }\n"
  result += "      }else{\n"
  result += "        return .empty\n"
  result += "      }\n"
  result += "    }\n"

  result += "    self." + self.mPropertyName + "_property.mWriteModelFunction = { [weak self] (inValue : " + [self.mType swiftTypeName] + ") in\n"
  result += "      if let model = self?.selectedArray_property {\n"
  result += "        switch model.selection {\n"
  result += "        case .empty, .multiple :\n"
  result += "          break\n"
  result += "        case .single (let v) :\n"
  result += "          for object in v {\n"
  result += "            object." + self.mPropertyName + "_property.setProp (inValue)\n"
  result += "          }\n"
  result += "        }\n"
  result += "      }\n"
  result += "    }\n"
  result += "  }\n"
}

#·······················································································································

override func @atomicProxyGeneration. propertyDeclarationCode(
   ?let @bool unused inPreferences
   ?let @stringset unused inOverriddenTransients) -> @string
{
  result  = "  //" + @string.stringWithSequenceOfCharacters  (!'·' !116) + "\n"
  result += "  //   Atomic proxy property: " + self.mPropertyName + "\n"
  result += "  //" + @string.stringWithSequenceOfCharacters  (!'·' !116) + "\n\n"
  result += "  let " + self.mPropertyName + "_property = EBPropertyProxy_" + [self.mType swiftTypeName] + " ()\n\n"
  result += "  //" + @string.stringWithSequenceOfCharacters  (!'·' !116) + "\n\n"
  result += "  var " + self.mPropertyName + " : " + [self.mType swiftTypeName] + "? {\n"
  result += "    get {\n"
  result += "      switch self." + self.mPropertyName + "_property.selection {\n"
  result += "      case .empty, .multiple :\n"
  result += "        return nil\n"
  result += "      case .single (let v) :\n"
  result += "        return v\n"
  result += "      }\n"
  result += "    }\n"
  result += "    set {\n"
  result += "      if let unwrappedNewValue = newValue {\n"
  result += "        self." + self.mPropertyName + "_property.setProp (unwrappedNewValue)\n"
  result += "      }\n"
  result += "    }\n"
  result += "  }\n\n"
}

#·······················································································································

override func @atomicProxyGeneration. configurationCode( ?let @bool unused inPreferences) -> @string {
  result  = "  //--- Atomic proxy property: " + self.mPropertyName + "\n"
  result += "    self." + self.mPropertyName + "_property.mReadModelFunction = { [weak self] in\n"
  result += "      if let object = self?." + self.mObservedRelationshipName + "_property {\n"
  result += "        switch object." + self.mObservedPropertyName + "_property.selection {\n"
  result += "        case .empty :\n"
  result += "          return .empty\n"
  result += "        case .multiple :\n"
  result += "          return .multiple\n"
  result += "        case .single (let optionalV) :\n"
  result += "          if let v = optionalV {\n"
  result += "            return .single (v)\n"
  result += "          }else{\n"
  result += "            return .empty\n"
  result += "          }\n"
  result += "        }\n"
  result += "      }else{\n"
  result += "        return .empty\n"
  result += "      }\n"
  result += "    }\n"
  result += "    self." + self.mPropertyName + "_property.mWriteModelFunction = { [weak self] (_ inValue : " + [self.mType swiftTypeName] + ") in\n"
  result += "      self?." + self.mObservedRelationshipName + "?." + self.mObservedPropertyName + " = inValue\n"
  result += "    }\n"
  result += "    self." + self.mObservedRelationshipName + "_property." + self.mObservedPropertyName
  result += "_property.addEBObserver (self." + self.mPropertyName + "_property)\n"
}

#·······················································································································

override func @atomicProxyGeneration. terminationCode( ?let @bool unused inPreferences) -> @string {
  result  = "  //--- Atomic proxy property: " + self.mPropertyName + "\n"
  result += "    self." + self.mPropertyName + "_property.mReadModelFunction = nil\n"
  result += "    self." + self.mPropertyName + "_property.mWriteModelFunction = nil\n"
  result += "    self." + self.mObservedRelationshipName + "_property." + self.mObservedPropertyName
  result += "_property.removeEBObserver (self." + self.mPropertyName + "_property)\n"
}

#·······················································································································

override func @atomicProxyGeneration. clearObjectExplorerCode() -> @string {
  result  = "    //--- Atomic proxy property: " + self.mPropertyName + "\n"
  result += "      self." + self.mPropertyName + "_property.mObserverExplorer = nil\n"
  result += "      self." + self.mPropertyName + "_property.mValueExplorer = nil\n"
}

#-----------------------------------------------------------------------------------------------------------------------
