#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   AST                                                                                                                *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

list @mainXibDescriptorList {
  @mainXibElement mElement
}

#......................................................................................................................*

enum @mainXibElement {
  case text (@lstring text)
  case outlet (@lstring outletType @lstring outletName)
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   SYNTAX                                                                                                             *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

syntax extension easyBindings_syntax {

  #....................................................................................................................*
  
  rule <main_xib>
    ?!@mainXibDescriptorList ioElementList
  {
    $mainxib$
    ${$
    repeat
    while
      $Identifier$ ?let @lstring outletType
      $identifier$ ?let @lstring outletName
      ioElementList += !.outlet {!outletType:outletType !outletName:outletName}
    while
      $literal_string$ ?let @lstring s
      ioElementList += !.text {!text:s}
    end
    $}$
  }

  #....................................................................................................................*

}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   CODE GENERATION                                                                                                    *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

getter @mainXibDescriptorList generateCode -> @string outResult {
  outResult =  "    var y = OUTLET_HEIGHT * 1.5 * " + [self length] + ".0\n"
  outResult += "    let view = NSView (frame:NSRect (x:0.0, y:0.0, width:10.0, height:10.0))\n"
  for () in self do (idx)
    switch mElement
    case text (t) :
      outResult += "  //--- Text " + t + "\n"
      outResult += "  //  createTextFieldForText (" + [t utf8Representation] + ", y:&y, col:0, view:view)\n"
      outResult += "    y -= OUTLET_HEIGHT\n"
      outResult += "    let tf" + idx + " = NSTextField (frame:NSRect (x:10.0 + OUTLET_WIDTH * 0.0, y:y, width:OUTLET_WIDTH, height:OUTLET_HEIGHT))\n"
      outResult += "    tf" + idx + ".stringValue = " + [t utf8Representation] + "\n"
      outResult += "    tf" + idx + ".editable = false\n"
      outResult += "    tf" + idx + ".drawsBackground = false\n"
      outResult += "    tf" + idx + ".bordered = false\n"
      outResult += "    view.addSubview (tf" + idx + ")\n"
      outResult += "    y -= OUTLET_HEIGHT / 2.0\n"
    case outlet (outletType outletName) :
      outResult += "  //--- Outlet " + outletName + "\n"
      outResult += "    y -= OUTLET_HEIGHT\n"
      outResult += "    " + outletName + " = " + outletType + "(frame:NSRect (x:10.0 + OUTLET_WIDTH * 0.0, y:y, width:OUTLET_WIDTH, height:OUTLET_HEIGHT))\n"
      outResult += "    view.addSubview (" + outletName + "!)\n"
      outResult += "    y -= OUTLET_HEIGHT / 2.0\n"
    end
  end
  outResult += "  //--- Set pref window content view\n"
  outResult += "    window?.setContentSize (NSSize (width:OUTLET_WIDTH + 20.0, height:OUTLET_HEIGHT * 1.5 * 7))\n"
  outResult += "    window?.contentView = view\n"
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
