#-----------------------------------------------------------------------------------------------------------------------
#   AST   
#-----------------------------------------------------------------------------------------------------------------------

list @mainXibDescriptorList {
  public var @mainXibLineDescriptorList mLine
}

#·······················································································································

list @mainXibLineDescriptorList {
  public var @mainXibElement mElement
}

#·······················································································································

enum @mainXibElement {
  case text (@lstring text)
  case outlet (@lstring outletType @lstring outletName)
}

#-----------------------------------------------------------------------------------------------------------------------
#   SYNTAX
#-----------------------------------------------------------------------------------------------------------------------

syntax extension easyBindings_syntax {

  #·····················································································································
  
  rule <main_xib>(
    ?!@mainXibDescriptorList ioElementList)
  {
    $mainxib$
    ${$
    repeat
      select
        $Identifier$ (?let @lstring outletType)
        $identifier$ (?let @lstring outletName)
        ioElementList += !{
          !.outlet (!outletType:outletType, !outletName:outletName)
        }
      or
        $literal_string$ (?let @lstring s)
        ioElementList += !{!.text (!text:s)}
      or
        ${$
        <main_xib_line> (?let @mainXibLineDescriptorList lineDescription)
        ioElementList += !lineDescription
        $}$
      end
    while
      $,$
    end
    $}$
  }

  #·····················································································································
  
  rule <main_xib_line>(
    !@mainXibLineDescriptorList outLineDescription)
  {
    outLineDescription = {}
    repeat
      select
        $Identifier$ (?let @lstring outletType)
        $identifier$ (?let @lstring outletName)
        outLineDescription +=
          !.outlet (!outletType:outletType, !outletName:outletName)
      or
        $literal_string$ (?let @lstring s)
        outLineDescription += !.text (!text:s)
      end
    while
      $,$
    end
  }

  #·····················································································································

}

#-----------------------------------------------------------------------------------------------------------------------
#   CODE GENERATION                       
#-----------------------------------------------------------------------------------------------------------------------

func @mainXibDescriptorList.generateCode() -> @string outResult {
  outResult = ""
  if self.length () > 0 then
    outResult =  "    var y = OUTLET_HEIGHT * 1.5 * " + self.length () + ".0\n"
    outResult += "    let view = NSView (frame:NSRect (x:0.0, y:0.0, width:10.0, height:10.0))\n"
    var idx = 0
    var columnMax = 1
    for (mLine) in self do
      var column = 0
      outResult += "    y -= OUTLET_HEIGHT\n"
      for (mElement) in mLine do
        switch mElement
        case text (t) :
          idx += 1
          outResult += "  //--- Text " + t + "\n"
          outResult += "  //  createTextFieldForText (" + t.utf8Representation () + ", y:&y, col:0, view:view)\n"
          outResult += "    let tf" + idx + " = NSTextField (frame:NSRect (x:10.0 + OUTLET_WIDTH * " + column + ".0, y:y, width:OUTLET_WIDTH, height:OUTLET_HEIGHT))\n"
          outResult += "    tf" + idx + ".stringValue = " + t.utf8Representation () + "\n"
          outResult += "    tf" + idx + ".isEditable = false\n"
          outResult += "    tf" + idx + ".drawsBackground = false\n"
          outResult += "    tf" + idx + ".isBordered = false\n"
          outResult += "    view.addSubview (tf" + idx + ")\n"
        case outlet (outletType outletName) :
          outResult += "  //--- Outlet " + outletName + "\n"
          outResult += "    " + outletName + " = " + outletType + "(frame:NSRect (x:10.0 + OUTLET_WIDTH * " + column + ".0, y:y, width:OUTLET_WIDTH, height:OUTLET_HEIGHT))\n"
          outResult += "    " + outletName + "?.setAccessibilityIdentifier (" + outletName.utf8Representation () + ")\n"
          outResult += "    view.addSubview (" + outletName + "!)\n"
        end
        column += 1
      end
      if column > columnMax then
        columnMax = column
      end
      outResult += "    y -= OUTLET_HEIGHT / 2.0\n"
   end
    outResult += "  //--- Set pref window content view\n"
    outResult += "    window?.setContentSize (NSSize (width:20.0 + OUTLET_WIDTH * " + columnMax + ".0, height:OUTLET_HEIGHT * (1.5 * " + self.length () + ".0 + 0.5)))\n"
    outResult += "    window?.contentView = view\n"
  end
}

#·······················································································································

proc generateTestFile(
  ?let @string inBundleIdentifier,
  ?let @string inProjectName,
  ?let @mainXibDescriptorList inMainXibDescriptorList,
  ?let @string inOutputDirectory)
{
  if (inMainXibDescriptorList.length () > 0) && (inBundleIdentifier != "") then
    var @stringlist outlet_identifier_list = {}
    for (mLine) in inMainXibDescriptorList do
      for (mElement) in mLine do
        switch mElement
        case text (*) :
        case outlet (* outletName) :
          outlet_identifier_list += !outletName.string
        end
      end
    end
    let s = filewrapper [testFiles.test_py:
      !inBundleIdentifier,
      !inProjectName,
      !outlet_identifier_list
    ]
    let header = "#!/usr/bin/python\n"
      "# coding=utf-8\n\n"
      "# https://pypi.python.org/pypi/atomac\n"
      "# https://github.com/pyatom/pyatom/blob/master/atomac/AXClasses.py\n\n"
    [@string generateFileWithPattern
      !startPath:inOutputDirectory
      !fileName:"test.py"
      !lineComment:"#"
      !header:header
      !defaultUserZone1:"" # Defaut user zone1
      !generatedZone2:s
      !defaultUserZone2:"#    ENTER USER CODE HERE\n" # Defaut user zone2
      !generatedZone3:"\nquitApplication ()\n\n#----------------------------------------------------------------------------*\n"
      !makeExecutable:true
    ]
  end
}

#·······················································································································

private filewrapper testFiles in "generation-templates/xcode-project" {
}{
}{
  template test_py "test.py.galgasTemplate"
    ?@string BUNDLE_IDENTIFIER
    ?@string PROJECT_NAME
    ?@stringlist OUTLET_IDENTIFIER_LIST
}

#-----------------------------------------------------------------------------------------------------------------------
