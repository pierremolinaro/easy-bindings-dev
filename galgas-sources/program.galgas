#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   PROGRAM                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct @semanticContext {
  @classMap mClassMap
  @outletClassMap mOutletClassMap
  @bindingSpecificationMap mBindingSpecificationMap
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

case . "eb"
  message "a source text file with the .easyBindings extension"
  grammar easyBindings_grammar
  ?sourceFilePath:@lstring inSourceFile
{
  @astDeclarationStruct declarationStruct = .default
#----------------------------------------- Parse predefined outlets files
  grammar easyBindings_grammar on ([filewrapper predefinedOutletClasses.sourceFile], "")
    !?declarationStruct
    ?*
#----------------------------------------- Parse source file
  grammar easyBindings_grammar in inSourceFile
    !?declarationStruct
    ?var @location endOfSourceFile
#------------------------ Add prefs declaration
  declarationStruct.mUnifiedDeclarationList += !@prefsDeclarationAST.new {
    !.new{!preferencesName () !.nowhere}
    !declarationStruct.mPreferences
  }
#----------------------------------------- Add Atomic type declarations
  enterAtomicClassesIn (!?declarationList: declarationStruct.mUnifiedDeclarationList)
#----------------------------------------- Sort properties
  sortProperties (!inSourceFile.string !declarationStruct.mUnifiedDeclarationList ?let sortedDeclarationListAST)
#----------------------------------------- Semantic Analysis, first phase
  @semanticContext semanticContext = .default
  @generationStruct generation = .default
  for (declaration) in sortedDeclarationListAST do
    [declaration firstAnalysisPhase !?semanticContext !?generation]
  end
#----------------------------------------- Build binding specification map
  buildBindingSpecificationMap (
    !?semanticContext
    !declarationStruct.mBindingSpecificationListMap
  )
#----------------------------------------- Semantic Analysis, second phase
  for (declaration) in sortedDeclarationListAST do
    [declaration secondAnalysisPhase !?semanticContext !?generation]
  end
#----------------------------------------- Semantic Analysis, third phase
  for (declaration) in sortedDeclarationListAST do
    [declaration thirdAnalysisPhase !?semanticContext !?generation]
  end
  if @uint.errorCount == 0 then
    generateCode (
      !declarationStruct.mXcodeProject.string
      !generation
      !inSourceFile.string
    )
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   FILEWRAPPER: predefined outlet classes
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

filewrapper predefinedOutletClasses in "../generation-templates" {
}{
}{
  template sourceFile "predefinedOutletClasses.eb"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
