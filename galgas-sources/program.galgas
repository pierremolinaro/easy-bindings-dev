#-----------------------------------------------------------------------------------------------------------------------
#   PROGRAM                               
#-----------------------------------------------------------------------------------------------------------------------

struct @semanticContext {
  @classMap mClassMap
  @outletClassMap mOutletClassMap
  @bindingSpecificationMap mBindingSpecificationMap
  @autolayoutViewClassMap mAutolayoutViewClassMap
  @autoLayoutBindingSpecificationMap mAutoLayoutBindingSpecificationMap
  @astAutoLayoutViewFunctionMap mAutoLayoutVStackFunctionMap
  @astAutoLayoutViewFunctionMap mAutoLayoutHStackFunctionMap
}

#-----------------------------------------------------------------------------------------------------------------------

case . "eb"
  message "a source text file with the .easyBindings extension"
  grammar easyBindings_grammar
  ?sourceFilePath:@lstring inSourceFile
{
  @astDeclarationStruct declarationStruct = .default
#----------------------------------------- Parse predefined outlets files
  grammar easyBindings_grammar on ([filewrapper predefinedOutletClasses.sourceFile], "")
    !?declarationStruct
    ?*
#----------------------------------------- Parse source file
  grammar easyBindings_grammar in inSourceFile
    !?declarationStruct
    ?var @location endOfSourceFile
#------------------------ Add prefs declaration
  declarationStruct.mUnifiedDeclarationList += !@prefsDeclarationAST.new {
    !.new{!preferencesName () !.nowhere}
    !declarationStruct.mPreferences
  }
#----------------------------------------- Add Atomic type declarations
  enterAtomicClassesIn (!?declarationList: declarationStruct.mUnifiedDeclarationList)
#----------------------------------------- Sort properties
  sortProperties (!inSourceFile.string !declarationStruct.mUnifiedDeclarationList ?let sortedDeclarationListAST)
#----------------------------------------- Semantic Analysis, first phase
  @semanticContext semanticContext = .default
  semanticContext.mAutoLayoutVStackFunctionMap = declarationStruct.mAutoLayoutVStackFunctionMap
  semanticContext.mAutoLayoutHStackFunctionMap = declarationStruct.mAutoLayoutHStackFunctionMap
  @generationStruct generation = .default
  for (declaration) in sortedDeclarationListAST while @uint.errorCount == 0 do
    [declaration firstAnalysisPhase !?semanticContext !?generation]
  end
#----------------------------------------- Build binding specification map
  if @uint.errorCount == 0 then
    buildBindingSpecificationMap (
      !?semanticContext
      !declarationStruct.mBindingSpecificationListMap
    )
  end
  if @uint.errorCount == 0 then
    buildAutoLayoutBindingSpecificationMap (
      !?semanticContext
      !declarationStruct.mAutoLayoutBindingSpecificationList
    )
  end
#----------------------------------------- Semantic Analysis, second phase
  for (declaration) in sortedDeclarationListAST while @uint.errorCount == 0 do
    [declaration secondAnalysisPhase !?semanticContext !?generation]
  end
#----------------------------------------- Semantic Analysis, third phase
  for (declaration) in sortedDeclarationListAST while @uint.errorCount == 0 do
    [declaration thirdAnalysisPhase !?semanticContext !?generation]
  end
#----------------------------------------- Semantic Analysis, fourth phase
  for (declaration) in sortedDeclarationListAST while @uint.errorCount == 0 do
    [declaration fourthAnalysisPhase !?semanticContext !?generation]
  end
#----------------------------------------- Semantic Analysis, graphviz
  if @uint.errorCount == 0 then
    graphvizAnalysis (![inSourceFile stringByDeletingLastPathComponent] !semanticContext !declarationStruct.mGraphvizList)
  end
#----------------------------------------- Generate code
  if @uint.errorCount == 0 then
    generateCode (
      !declarationStruct.mXcodeProject.string
      !generation
      !inSourceFile.string
    )
  end
}

#-----------------------------------------------------------------------------------------------------------------------
#   FILEWRAPPER: predefined outlet classes
#-----------------------------------------------------------------------------------------------------------------------

filewrapper predefinedOutletClasses in "../generation-templates" {
}{
}{
  template sourceFile "predefinedOutletClasses.eb"
}

#-----------------------------------------------------------------------------------------------------------------------
