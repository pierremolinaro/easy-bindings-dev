#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST   
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#enum @toOneOppositeRelationship {
#  case none
#  case toOneOpposite (@lstring oppositeRelationshipName)
#  case toManyOpposite (@lstring oppositeRelationshipName)
#}

#·······················································································································

class @toOneRelationshipAST : @abstractDeclarationAST {
  @lstring mDestinationEntityName
  @lstring mToOneRelationshipName
  @lstring mOppositeRelationshipName # Empty string if not inverse relation ship
  @propertyMultiplicity mInverseRelationMultiplicity
}

#·······················································································································

override method @toOneRelationshipAST enterInPrecedenceGraph ?!@declarationPrecedenceGraph ioGraph {
  let node = @lstring.new {!mClassName.string + " " + mToOneRelationshipName !mToOneRelationshipName.location}
  [!?ioGraph addNode !node !self]
  [!?ioGraph addEdge !node !mClassName]
  [!?ioGraph addEdge !node !mDestinationEntityName]
}

#·······················································································································

override getter @toOneRelationshipAST lkey -> @lstring {
  result = @lstring.new {!mClassName.string + " " + mToOneRelationshipName !mToOneRelationshipName.location}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension easyBindings_syntax {

  #·····················································································································

  rule <toOne_relationship> ?let @lstring inCurrentEntity ?!@astDeclarationStruct ioDeclarationAST {
    $toOne$
    $Identifier$ ?let @lstring destinationEntityName
    $identifier$ ?let @lstring relationshipName
    @propertyMultiplicity inverseRelationMultiplicity
    @lstring inverseRelationshipName
    select
      inverseRelationMultiplicity = .single
      inverseRelationshipName = ["" here]
    or
      $inverse$
      select
        $toOne$
        inverseRelationMultiplicity = .single
      or
        $toMany$
        inverseRelationMultiplicity = .collection
      end
      $identifier$ ?inverseRelationshipName
      end
    $;$
    ioDeclarationAST.mUnifiedDeclarationList += !@toOneRelationshipAST.new {
      !inCurrentEntity
      !destinationEntityName
      !relationshipName
      !inverseRelationshipName
      !inverseRelationMultiplicity
    }
  }
  
  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @toOneRelationshipAST firstAnalysisPhase 
       ?!@semanticContext ioSemanticContext
       ?!@generationStruct unused ioGeneration
{
  with mClassName in !?ioSemanticContext.mClassMap 
    error message searchKey
  do
    [ioSemanticContext.mClassMap searchKey !mDestinationEntityName ?let classKind ?3*]
    switch classKind
    case prefs :
      error mDestinationEntityName : "an entity is required here"
    case atomic (*) :
      error mDestinationEntityName : "an entity is required here"
    case document (*) :
      error mDestinationEntityName : "an entity is required here"
    case entity (* graphic *) :
      let kind = @propertyKind.toOne {
        !typeName: mDestinationEntityName
        !accessibility: .stored
        !graphic: graphic
      }
      [!?mPropertyMap insertKey !mToOneRelationshipName !kind !{}]
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @toOneRelationshipAST secondAnalysisPhase 
       ?!@semanticContext ioSemanticContext
       ?!@generationStruct unused ioGeneration
{
  with mClassName in !?ioSemanticContext.mClassMap 
    error message searchKey
  do
    [ioSemanticContext.mClassMap searchKey !mDestinationEntityName ?let classKind ?let destinationEntityPropertyMap ?2*]
    switch classKind
    case prefs :
    case atomic (*) :
    case document (*) :
    case entity (* graphic *) :
      let kind = @propertyKind.toOne {
        !typeName: mDestinationEntityName
        !accessibility: .stored
        !graphic: graphic
      }
    #--- Code Generation
      mPropertyGenerationList += !@toOnePropertyGeneration.new {
        !mToOneRelationshipName.string
        !mClassName
        !kind
        !mOppositeRelationshipName
        !mInverseRelationMultiplicity
        !destinationEntityPropertyMap
      }
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   GENERATION                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @toOnePropertyGeneration : @propertyGeneration {
  @string mClassName
  @propertyKind mRelationshipType
  @string mOppositeRelationshipName
  @propertyMultiplicity mInverseRelationMultiplicity
  @propertyMap mDestinationEntityObservablePropertyMap
}

#·······················································································································

list @toOnePropertyGenerationList {
  @toOnePropertyGeneration mProperty
}

#·······················································································································

override getter @toOnePropertyGeneration propertyDeclarationCode ?let @stringset unused inOverriddenTransients -> @string {
  result  = "  //" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n"
  result += "  //   To one property: " + mPropertyName + "\n"
  result += "  //" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n\n"
  result += "  var " + mPropertyName + "_property = ToOneRelationship_" + mClassName
          + "_" + mPropertyName + " ()\n\n"
  result += "  //" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n\n"
  result += "  var " + mPropertyName + "_property_selection : EBSelection <Bool> {\n"
  result += "    return .single (self." + mPropertyName + "_property.propval == nil)\n"
  result += "  }\n\n"
}

#·······················································································································

override getter @toOnePropertyGeneration configurationCode -> @string {
  result  = "  //--- To one property: " + mPropertyName + "\n"
  result += "    self." + mPropertyName + "_property.owner = self\n"
}

#·······················································································································

override getter @toOnePropertyGeneration setupRelationshipFromDictionaryCode -> @string {
  result  = ""
#  if [mInverseRelationMultiplicity isSingle] then
    result += "  //--- To one property: " + mPropertyName + "\n"
    result += "    do{\n"
    result += "      let possibleEntity = readEntityFromDictionary (\n"
    result += "        inRelationshipName: \"" + mPropertyName + "\",\n"
    result += "        inDictionary: inDictionary,\n"
    result += "        managedObjectArray: &managedObjectArray\n"
    result += "      )\n"
    result += "      if let entity = possibleEntity as? " + [mRelationshipType swiftTypeName] + " {\n"
    result += "        self." + mPropertyName + "_property.setProp (entity)\n"
    result += "      }\n"
    result += "    }\n"
#  end
}

#·······················································································································

override getter @toOnePropertyGeneration saveIntoDictionaryCode -> @string {
  result  = ""
  if [mInverseRelationMultiplicity isSingle] then
    result +="  //--- To one property: " + mPropertyName + "\n"
    result += "    self.store (managedObject:self." + mPropertyName + "_property.propval,\n"
    result += "      relationshipName: \"" + mPropertyName + "\",\n"
    result += "      intoDictionary: ioDictionary)\n"
  end
}

#·······················································································································

override getter @toOnePropertyGeneration objectAccessibilityCode -> @string {
  result  = "  //--- To one property: " + mPropertyName + "\n"
  result += "    if let managedObject = self." + mPropertyName + "_property.propval {\n"
  result += "      objects.append (managedObject)\n"
  result += "    }\n"
}

#·······················································································································

override getter @toOnePropertyGeneration objectAccessibilityCodeForSaveOperation -> @string {
  result  = "  //--- To one property: " + mPropertyName + "\n"
  result += "    if let managedObject = self." + mPropertyName + "_property.propval {\n"
  result += "      objects.append (managedObject)\n"
  result += "    }\n"
}

#·······················································································································

override getter @toOnePropertyGeneration clearObjectExplorerCode -> @string {
  result  = "  //--- To one property: " + mPropertyName + "\n"
  result += "    self." + mPropertyName + "_property.mObserverExplorer = nil\n"
  result += "    self." + mPropertyName + "_property.mValueExplorer = nil\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
