#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST   
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @toOneOppositeRelationship {
  case none
  case oppositeIsToOne (@lstring oppositeRelationshipName)
  case oppositeIsToMany (@lstring oppositeRelationshipName)
}

#·······················································································································

class @toOneRelationshipAST : @abstractDeclarationAST {
  @lstring mDestinationEntityName
  @lstring mToOneRelationshipName
  @toOneOppositeRelationship mOpposite
}

#·······················································································································

override method @toOneRelationshipAST enterInPrecedenceGraph ?!@declarationPrecedenceGraph ioGraph {
  let node = @lstring.new {!mClassName.string + " " + mToOneRelationshipName !mToOneRelationshipName.location}
  [!?ioGraph addNode !node !self]
  [!?ioGraph addEdge !node !mClassName]
  [!?ioGraph addEdge !node !mDestinationEntityName]
}

#·······················································································································

override getter @toOneRelationshipAST nodeKey -> @lstring {
  result = @lstring.new {!mClassName.string + " " + mToOneRelationshipName !mToOneRelationshipName.location}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension easyBindings_syntax {

  #·····················································································································

  rule <toOne_relationship> ?let @lstring inCurrentEntity ?!@astDeclarationStruct ioDeclarationAST {
    $toOne$
    $Identifier$ ?let @lstring destinationEntityName
    $identifier$ ?let @lstring relationshipName
    @toOneOppositeRelationship opposite
    select
      opposite = .none
    or
      $inverse$
      select
        $toOne$
        $identifier$ ?let inverseRelationshipName
        opposite = .oppositeIsToOne {!oppositeRelationshipName: inverseRelationshipName}
      or
        $toMany$
        $identifier$ ?let inverseRelationshipName
        opposite = .oppositeIsToMany {!oppositeRelationshipName: inverseRelationshipName}
      end
    end
    $;$
    ioDeclarationAST.mUnifiedDeclarationList += !@toOneRelationshipAST.new {
      !inCurrentEntity
      !destinationEntityName
      !relationshipName
      !opposite
    }
  }
  
  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @toOneRelationshipAST firstAnalysisPhase 
       ?!@semanticContext ioSemanticContext
       ?!@generationStruct unused ioGeneration
{
  with mClassName in !?ioSemanticContext.mClassMap 
    error message searchKey
  do
    [ioSemanticContext.mClassMap searchKey !mDestinationEntityName ?let classKind ?3*]
    switch classKind
    case prefs :
      error mDestinationEntityName : "an entity is required here"
    case atomic (*) :
      error mDestinationEntityName : "an entity is required here"
    case document (*) :
      error mDestinationEntityName : "an entity is required here"
    case entity (* graphic *) :
      let kind = @propertyKind.toOne {
        !typeName: mDestinationEntityName
        !accessibility: .stored
        !graphic: graphic
        !opposite: mOpposite
      }
      [!?mPropertyMap insertKey !mToOneRelationshipName !kind !{} !false]
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @toOneRelationshipAST thirdAnalysisPhase 
       ?!@semanticContext ioSemanticContext
       ?!@generationStruct unused ioGeneration
{
  with mClassName in !?ioSemanticContext.mClassMap 
    error message searchKey
  do
    [ioSemanticContext.mClassMap searchKey !mDestinationEntityName ?let classKind ?let destinationEntityPropertyMap ?2*]
    switch classKind
    case prefs :
    case atomic (*) :
    case document (*) :
    case entity (* graphic *) :
      let kind = @propertyKind.toOne {
        !typeName: mDestinationEntityName
        !accessibility: .stored
        !graphic: graphic
        !opposite: mOpposite
      }
    #--- Code Generation
      mPropertyGenerationList += !@toOnePropertyGeneration.new {
        !mToOneRelationshipName.string
        !mClassName
        !kind
        !mOpposite
        !destinationEntityPropertyMap
      }
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   GENERATION                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @toOnePropertyGeneration : @propertyGeneration {
  @string mClassName
  @propertyKind mRelationshipType
  @toOneOppositeRelationship mOpposite
  @propertyMap mDestinationEntityObservablePropertyMap
}

#·······················································································································

list @toOnePropertyGenerationList {
  @toOnePropertyGeneration mProperty
}

#·······················································································································

override getter @toOnePropertyGeneration propertyDeclarationCode ?let @stringset unused inOverriddenTransients -> @string {
  result  = "  //" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n"
  result += "  //   To one property: " + mPropertyName + "\n"
  result += "  //" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n\n"
  result += "   let " + mPropertyName + "_property = StoredObject_" + [mRelationshipType swiftTypeName] + " ()\n\n"
  result += "  //" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n\n"
  result += "  var " + mPropertyName + "_property_selection : EBSelection <" + [mRelationshipType swiftTypeName] + "?> {\n"
  result += "    return .single (self." + mPropertyName + "_property.propval)\n"
  result += "  }\n\n"
  result += "  //" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n\n"
  result += "  var " + mPropertyName + " : " + [mRelationshipType swiftTypeName] + "? {\n"
  result += "    get {\n"
  result += "      return self." + mPropertyName + "_property.propval\n"
  result += "    }\n"
  result += "    set {\n"
  result += "      if self." + mPropertyName + "_property.propval != nil {\n"
  result += "        self." + mPropertyName + "_property.setProp (nil)\n"
  result += "      }\n"
  result += "      if newValue != nil {\n"
  result += "        self." + mPropertyName + "_property.setProp (newValue)\n"
  result += "      }\n"
  result += "    }\n"
  result += "  }\n\n"
  result += "  //" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n\n"
  result += "  var " + mPropertyName + "_none : StoredObject_" + [mRelationshipType swiftTypeName] + " { return self." + mPropertyName + "_property }\n\n"
  result += "  //" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n\n"
  result += "  var " + mPropertyName + "_none_selection : EBSelection <Bool> {\n"
  result += "    return .single (self." + mPropertyName + "_property.propval == nil)\n"
  result += "  }\n\n"
}

#·······················································································································

override getter @toOnePropertyGeneration configurationCode -> @string {
  switch mOpposite
  case oppositeIsToMany (oppositeName) :
    result  = "  //--- To one property: " + mPropertyName + " (has opposite to many relationship: " + oppositeName + ")\n"
    result += "    self." + mPropertyName + "_property.ebUndoManager = self.ebUndoManager\n"
    result += "    self." + mPropertyName + "_property.setOppositeRelationShipFunctions (\n"
    result += "      setter: { [weak self] inObject in if let me = self { inObject." + oppositeName + "_property.add (me) } },\n"
    result += "      resetter: { [weak self] inObject in if let me = self { inObject." + oppositeName + "_property.remove (me) } }\n"
    result += "    )\n"
  case none :
    result  = "  //--- To one property: " + mPropertyName + "\n"
    result += "    self." + mPropertyName + "_property.ebUndoManager = self.ebUndoManager\n"
  case oppositeIsToOne (oppositeName) :
    result  = "  //--- To one property: " + mPropertyName + " (has opposite to one relationship: " + oppositeName + ")\n"
    result += "    self." + mPropertyName + "_property.ebUndoManager = self.ebUndoManager\n"
    result += "    self." + mPropertyName + "_property.setOppositeRelationShipFunctions (\n"
    result += "      setter: { [weak self] inObject in if let me = self { inObject." + oppositeName + "_property.setProp (me) } },\n"
    result += "      resetter: { inObject in inObject." + oppositeName + "_property.setProp (nil) }\n"
    result += "    )\n"
  end
}

#·······················································································································

override getter @toOnePropertyGeneration setupRelationshipFromDictionaryCode -> @string {
  result  = ""
#  if [mInverseRelationMultiplicity isSingle] then
    result += "  //--- To one property: " + mPropertyName + "\n"
    result += "    do{\n"
    result += "      let possibleEntity = readEntityFromDictionary (\n"
    result += "        inRelationshipName: \"" + mPropertyName + "\",\n"
    result += "        inDictionary: inDictionary,\n"
    result += "        managedObjectArray: &managedObjectArray\n"
    result += "      )\n"
    result += "      if let entity = possibleEntity as? " + [mRelationshipType swiftTypeName] + " {\n"
    result += "        self." + mPropertyName + "_property.setProp (entity)\n"
    result += "      }\n"
    result += "    }\n"
#  end
}

#·······················································································································

override getter @toOnePropertyGeneration saveIntoDictionaryCode -> @string {
  result  = ""
  switch mOpposite
  case oppositeIsToMany (*) :
  case none :
    result +="  //--- To one property: " + mPropertyName + "\n"
    result += "    self.store (managedObject:self." + mPropertyName + "_property.propval,\n"
    result += "      relationshipName: \"" + mPropertyName + "\",\n"
    result += "      intoDictionary: ioDictionary)\n"
  case oppositeIsToOne (oppositeName) :
    result +="  //--- To one property: " + mPropertyName + " // Opposite is toOne " + oppositeName + "\n"
    result += "    self.store (managedObject:self." + mPropertyName + "_property.propval,\n"
    result += "      relationshipName: \"" + mPropertyName + "\",\n"
    result += "      intoDictionary: ioDictionary)\n"
  end
}

#·······················································································································

override getter @toOnePropertyGeneration objectAccessibilityCode -> @string {
  result  = "  //--- To one property: " + mPropertyName + "\n"
  result += "    if let object = self." + mPropertyName + " {\n"
  result += "      objects.append (object)\n"
  result += "    }\n"
}

#·······················································································································

override getter @toOnePropertyGeneration objectAccessibilityCodeForSaveOperation -> @string {
  result  = "  //--- To one property: " + mPropertyName + "\n"
  result += "    if let object = self." + mPropertyName + " {\n"
  result += "      objects.append (object)\n"
  result += "    }\n"
}

#·······················································································································

override getter @toOnePropertyGeneration clearObjectExplorerCode -> @string {
  result  = "  //--- To one property: " + mPropertyName + "\n"
  result += "    self." + mPropertyName + "_property.mObserverExplorer = nil\n"
  result += "    self." + mPropertyName + "_property.mValueExplorer = nil\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
