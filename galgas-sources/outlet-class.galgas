#-----------------------------------------------------------------------------------------------------------------------
#   AST   
#-----------------------------------------------------------------------------------------------------------------------

refclass @outletClassDeclarationAST : @abstractDeclarationAST {
  @bool mUserDefined
  @lstring mSuperClassName
  @bool mHasRunAction
  @bool mHasEnabled
  @bool mHandlesTableValueBinding
  @bool mHandlesGraphicControllerBinding
  @bool mHasHidden
}

#·······················································································································

override method @outletClassDeclarationAST enterInPrecedenceGraph ?!@declarationPrecedenceGraph ioGraph {
  [!?ioGraph addNode !self.mClassName !self]
  if self.mSuperClassName.string != "" then
    [!?ioGraph addEdge !self.mClassName !self.mSuperClassName]
  end
}

#·······················································································································

override getter @outletClassDeclarationAST nodeKey -> @lstring {
  result = self.mClassName
}

#-----------------------------------------------------------------------------------------------------------------------
#   SYNTAX
#-----------------------------------------------------------------------------------------------------------------------

syntax extension easyBindings_syntax {

  #·····················································································································
  
  rule <outlet_class_declaration> ?!@astDeclarationStruct ioDeclarationAST {
    @bool userDefined
    select
      $extern$
      userDefined = true
    or
      userDefined = false
    end
    $outlet$
    $class$
    $Identifier$ ?let @lstring outletClassName
    @lstring superClassName
    select
      superClassName = ["" here]
    or
      $:$
      $Identifier$ ?superClassName
    end
    @bool hasRunAction = false
    @bool hasEnabled = false
    @bool hasHidden = false
    @bool handlesTableViewBinding = false
    @bool handlesGraphicControllerBinding = false
    repeat
    while
      $tableValue$
      handlesTableViewBinding = true
    while
      $run$
      hasRunAction = true
    while
      $enabled$
      hasEnabled = true
    while
      $hidden$
      hasHidden = true
    while
      $graphicController$
      handlesGraphicControllerBinding = true
    end
    $;$
    ioDeclarationAST.mUnifiedDeclarationList += !@outletClassDeclarationAST.new {
      !outletClassName
      !userDefined
      !superClassName
      !hasRunAction
      !hasEnabled
      !handlesTableViewBinding
      !handlesGraphicControllerBinding
      !hasHidden
    }
  }

  #·····················································································································

}

#-----------------------------------------------------------------------------------------------------------------------
#   SEMANTIC ANALYSIS                       
#-----------------------------------------------------------------------------------------------------------------------

override method @outletClassDeclarationAST firstAnalysisPhase
       ?!@semanticContext ioSemanticContext
       ?!@generationStruct unused ioGeneration
{
  if self.mSuperClassName.string == "" then
    [!?ioSemanticContext.mOutletClassMap insertKey
      !self.mClassName
      !["" nowhere]  # No super class
      !self.mHasRunAction
      !self.mHandlesTableValueBinding
      !self.mHasEnabled
      !self.mHasHidden
      !self.mHandlesGraphicControllerBinding
      !self.mUserDefined
    ]
  else
    [ioSemanticContext.mOutletClassMap searchKey
      !self.mSuperClassName
      ?*
      ?let hasRunAction
      ?let handlesTableValueBinding
      ?let hasEnabled
      ?let hasHidden
      ?let handlesGraphicControllerBinding
      ?*
    ]
    if self.mHasRunAction & hasRunAction then
      error self.mClassName : "$run binding already defined in superclass"
    end
    if self.mHandlesTableValueBinding & handlesTableValueBinding then
      error self.mClassName : "$tableview binding already defined in superclass"
    end
    if self.mHasEnabled & hasEnabled then
      error self.mClassName : "$enabled binding already defined in superclass"
    end
    if self.mHasHidden & hasHidden then
      error self.mClassName : "$hidden binding already defined in superclass"
    end
    if self.mHandlesGraphicControllerBinding & handlesGraphicControllerBinding then
      error self.mClassName : "$graphicController binding already defined in superclass"
    end
    [!?ioSemanticContext.mOutletClassMap insertKey
      !self.mClassName
      !self.mSuperClassName
      !self.mHasRunAction | hasRunAction
      !self.mHandlesTableValueBinding | handlesTableValueBinding
      !self.mHasEnabled | hasEnabled
      !self.mHasHidden | hasHidden
      !self.mHandlesGraphicControllerBinding | handlesGraphicControllerBinding
      !self.mUserDefined
    ]
  end
}

#-----------------------------------------------------------------------------------------------------------------------
#  SEMANTIC TYPE                          
#-----------------------------------------------------------------------------------------------------------------------

map @outletClassMap {
  @lstring mSuperClassName
  @bool mHandlesRunAction
  @bool mHandlesTableValueBinding
  @bool mHandleEnabledBinding
  @bool mHandleHiddenBinding
  @bool mHandleGraphicControllerBinding
  @bool mUserDefined
  insert insertKey error message "the '%K' outlet class is already declared in %L"
  search searchKey error message "there is no '%K' outlet class"
}

#-----------------------------------------------------------------------------------------------------------------------
#  CODE GENERATION                        
#-----------------------------------------------------------------------------------------------------------------------

filewrapper outletClassGeneration in "../generation-templates/outlet-classes" {
  "swift"
}{
}{
}

#----------------------------------------------------------------------------------------------------------------------*

proc generateOutletClasses
  ?let @stringset inNeededOutletClasses
  ?let @string inOutputDirectory
  ?!@stringset ioGeneratedFileSet
{
  let @filewrapper w = [filewrapper outletClassGeneration]
  for key in inNeededOutletClasses do
    let s = [w textFileContentsAtPath !"/" + key + ".swift"]
    let fileName = key + ".swift"
    ioGeneratedFileSet += !fileName
    [@string generateFile !inOutputDirectory !fileName !s]
  end
}

#-----------------------------------------------------------------------------------------------------------------------
