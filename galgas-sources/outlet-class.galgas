#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   AST                                                                                                                *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

list @outletClassDeclarationList {
  @bool mUserDefined
  @lstring mOutletClassName
  @lstring mSuperClassName
  @bool mHasRunAction
  @bool mHasEnabled
  @bool mHandlesTableValueBinding
  @bool mHandlesGraphicControllerBinding
  @bool mHasHidden
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   SYNTAX                                                                                                             *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

syntax extension easyBindings_syntax {

  #·····················································································································
  
  rule <outlet_class_declaration> ?let @bool inIsUserDefined ?!@outletClassDeclarationList ioOutletClassDeclarationList {
    $extern$
    $outlet$
    $class$
    $Identifier$ ?let @lstring outletClassName
    @lstring superClassName
    select
      superClassName = ["" here]
    or
      $:$
      $Identifier$ ?superClassName
    end
    @bool hasRunAction = false
    @bool hasEnabled = false
    @bool hasHidden = false
    @bool handlesTableViewBinding = false
    @bool handlesGraphicControllerBinding = false
    repeat
    while
      $tableValue$
      handlesTableViewBinding = true
    while
      $run$
      hasRunAction = true
    while
      $enabled$
      hasEnabled = true
    while
      $hidden$
      hasHidden = true
    while
      $graphicController$
      handlesGraphicControllerBinding = true
    end
    $;$
    ioOutletClassDeclarationList +=
      !inIsUserDefined
      !outletClassName
      !superClassName
      !hasRunAction
      !hasEnabled
      !handlesTableViewBinding
      !handlesGraphicControllerBinding
      !hasHidden
  }

  #·····················································································································

}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#  SEMANTIC TYPE                                                                                                       *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

map @outletClassMap {
  @lstring mSuperClassName
  @bool mHandlesRunAction
  @bool mHandlesTableValueBinding
  @bool mHandleEnabledBinding
  @bool mHandleHiddenBinding
  @bool mHandleGraphicControllerBinding
  @bool mUserDefined
  insert insertKey error message "the '%K' outlet class is already declared in %L"
  search searchKey error message "there is no '%K' outlet class"
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#  SEMANTICS                                                                                                           *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

method @outletClassDeclarationList buildOutletClassMap !@outletClassMap outOutletClassMap {
  outOutletClassMap = {}
#--- First, enter classes without any superclass
  @outletClassDeclarationList remainingList = {}
  for () in self do
    if mSuperClassName.string == "" then
      [!?outOutletClassMap insertKey
        !mOutletClassName
        !["" nowhere] # No super class
        !mHasRunAction
        !mHandlesTableValueBinding
        !mHasEnabled
        !mHasHidden
        !mHandlesGraphicControllerBinding
        !mUserDefined
      ]
    else
      remainingList +=
        !mUserDefined
        !mOutletClassName
        !mSuperClassName
        !mHasRunAction
        !mHasEnabled
        !mHandlesTableValueBinding
        !mHandlesGraphicControllerBinding
        !mHasHidden
    end
  end
#--- Then, enter classes that have their superclass defined
  var continue = true
  loop ([remainingList length] + 1) while ([remainingList length] > 0) & continue do
    let currentList = remainingList
    remainingList = {}
    continue = false
    for () in currentList do
      if [outOutletClassMap hasKey !mSuperClassName.string] then
        [outOutletClassMap searchKey
          !mSuperClassName
          ?*
          ?let hasRunAction
          ?let handlesTableValueBinding
          ?let hasEnabled
          ?let hasHidden
          ?let handlesGraphicControllerBinding
          ?*
        ]  
        if mHasRunAction & hasRunAction then
          error mOutletClassName : "$run binding already defined in superclass"
        end
        if mHandlesTableValueBinding & handlesTableValueBinding then
          error mOutletClassName : "$tableview binding already defined in superclass"
        end
        if mHasEnabled & hasEnabled then
          error mOutletClassName : "$enabled binding already defined in superclass"
        end
        if mHasHidden & hasHidden then
          error mOutletClassName : "$hidden binding already defined in superclass"
        end
        if mHandlesGraphicControllerBinding & handlesGraphicControllerBinding then
          error mOutletClassName : "$graphicControler binding already defined in superclass"
        end
        [!?outOutletClassMap insertKey
          !mOutletClassName
          !mSuperClassName
          !mHasRunAction | hasRunAction
          !mHandlesTableValueBinding | handlesTableValueBinding
          !mHasEnabled | hasEnabled
          !mHasHidden | hasHidden
          !mHandlesGraphicControllerBinding | handlesGraphicControllerBinding
          !mUserDefined
        ]
      else
        continue = true
        remainingList +=
          !mUserDefined
          !mOutletClassName
          !mSuperClassName
          !mHasRunAction
          !mHasEnabled
          !mHandlesTableValueBinding
          !mHandlesGraphicControllerBinding
          !mHasHidden
      end
    end
  end
#--- Remaining classes have their superclass undefined, or there is a circularity in inheritance graph
  for () in remainingList do
    error mSuperClassName : "undefined outlet class"
  end
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#  CODE GENERATION                                                                                                     *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

filewrapper outletClassGeneration in "../generation-templates/outlet-classes" {
  "swift"
}{
}{
}

#----------------------------------------------------------------------------------------------------------------------*

proc generateOutletClasses
  ?let @stringset inNeededOutletClasses
  ?let @string inOutputDirectory
  ?!@stringset ioGeneratedFileSet
{
  let @filewrapper w = [filewrapper outletClassGeneration]
  for key in inNeededOutletClasses do
    let s = [w textFileContentsAtPath !"/" + key + ".swift"]
    let fileName = key + ".swift"
    ioGeneratedFileSet += !fileName
    [@string generateFile !inOutputDirectory !fileName !s]
  end
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
