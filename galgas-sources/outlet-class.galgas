#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   AST                                                                                                                *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

list @outletClassDeclarationList {
  @bool mUserDefined
  @lstring mOutletClassName
  @bool mHasRunAction
  @bool mHasEnabled
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   SYNTAX                                                                                                             *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

syntax extension easyBindings_syntax {

  #....................................................................................................................*
  
  rule <outlet_class_declaration>
    ?let @bool inIsUserDefined
    ?!@outletClassDeclarationList ioOutletClassDeclarationList
  {
    $outletClass$
    $Identifier$ ?let @lstring outletClassName
    @bool hasRunAction = false
    @bool hasEnabled = false
    repeat
    while
      $run$
      hasRunAction = true
    while
      $enabled$
      hasEnabled = true
    end
    $;$
    ioOutletClassDeclarationList +=
      !inIsUserDefined
      !outletClassName
      !hasRunAction
      !hasEnabled
  }

  #....................................................................................................................*

}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#  SEMANTIC TYPE                                                                                                       *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

map @outletClassMap {
  @bool mHandlesRunAction
  insert insertKey error message "the '%K' outlet class is already declared in %L"
  search searchKey error message "there is no '%K' outlet class"
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#  SEMANTICS                                                                                                           *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

method @outletClassDeclarationList buildOutletClassMap
  !@outletClassMap outOutletClassMap
{
  outOutletClassMap = {}
  for () in self do
    [!?outOutletClassMap insertKey !mOutletClassName !mHasRunAction]
  end
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#  CODE GENERATION                                                                                                     *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

filewrapper outletClassGeneration in "../generation-templates/outlet-classes" {
  "swift"
}{
}{
}

#----------------------------------------------------------------------------------------------------------------------*

proc generateOutletClasses
  ?let @stringset inNeededOutletClasses
  ?let @string inOutputDirectory
{
  let @filewrapper w = [filewrapper outletClassGeneration]
  for key in inNeededOutletClasses do
  #--- Header
    let s = [w textFileContentsAtPath !"/" + key + ".swift"]
    [@string generateFile
      !inOutputDirectory
      !key + ".swift"
      !s
    ]
  end
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
