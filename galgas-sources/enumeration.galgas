#-----------------------------------------------------------------------------------------------------------------------
#   AST   
#-----------------------------------------------------------------------------------------------------------------------

refclass @enumerationDeclarationAST : @abstractDeclarationAST {
  @lstringlist mEnumConstantNameList
}

#·······················································································································

override method @enumerationDeclarationAST enterInPrecedenceGraph ?!@declarationPrecedenceGraph ioGraph {
  [!?ioGraph addNode !self.mClassName !self]
}

#·······················································································································

override getter @enumerationDeclarationAST nodeKey -> @lstring {
  result = self.mClassName
}

#·······················································································································

list @enumerationFunctionListAST {
  @lstring mEnumName
  @lstring mFunctionName
  @2lstringlist mAssociationList
}

#-----------------------------------------------------------------------------------------------------------------------
#   SYNTAX
#-----------------------------------------------------------------------------------------------------------------------

syntax extension easyBindings_syntax {

  #·····················································································································
  
  rule <enum_declaration> ?!@astDeclarationStruct ioDeclarationAST {
    $enum$
    $Identifier$ ?let @lstring enumName
    ${$
    @lstringlist enumConstants = {}
    repeat
      $identifier$ ?let @lstring constantName
      enumConstants += !constantName
    while
      $,$
    end
    $}$
    ioDeclarationAST.mUnifiedDeclarationList += !@enumerationDeclarationAST.new {!enumName !enumConstants}
  }

  #·····················································································································
  
  rule <enum_function_declaration> ?!@astDeclarationStruct ioDeclarationAST {
    $func$
    $enum$
    $Identifier$ ?let @lstring enumName
    $.$    
    $identifier$ ?let @lstring funcName
    ${$
    @2lstringlist associationList = {}
    repeat
    while
      $identifier$ ?let @lstring constantName
      $:$
      $literal_string$ ?let @lstring associatedString
      $;$
      associationList += !constantName !associatedString
    end 
    $}$
    ioDeclarationAST.mEnumerationFunctionListAST += !enumName !funcName !associationList
  }
  
  #·····················································································································

}

#-----------------------------------------------------------------------------------------------------------------------
#   CLASS AND PROPERTY SEMANTIC ANALYSIS                       
#-----------------------------------------------------------------------------------------------------------------------

map @enumConstantMap {
  @uint mIndex
  insert insertKey error message "there is already a '%K' constant"
  search searchKey error message "the '%K' constant is not defined"
}

#-----------------------------------------------------------------------------------------------------------------------

sortedlist @enumFunAssociationSortedList {
  @uint mIndex
  @string mAssociatedString
}{
  mIndex <
}

#-----------------------------------------------------------------------------------------------------------------------

map @enumFuncMap {
  @enumFunAssociationSortedList mAssociationSortedList
  insert insertKey error message "there is already a '%K' enum function"
  search searchKey error message "the '%K' enum function is not defined"
}

#·······················································································································

override method @enumerationDeclarationAST firstAnalysisPhase
       ?!@semanticContext ioSemanticContext
       ?!@generationStruct ioGeneration
{
  @enumConstantMap enumConstantMap = {}
  for (s) in self.mEnumConstantNameList do
    [!?enumConstantMap insertKey !s ![enumConstantMap count]]
  end
  @enumFuncMap enumFuncMap = {}
  for (enumTypeName funcName associationList) in ioSemanticContext.mEnumerationFunctionListAST do
    if enumTypeName.string == self.mClassName.string then
      @stringset definedConstantNameSet = {}
      @enumFunAssociationSortedList associationSortedList = {}
      for (constantName associatedString) in associationList do
        [enumConstantMap searchKey !constantName ?let idx]
        associationSortedList += !idx !associatedString.string
        if [definedConstantNameSet hasKey !constantName] then
          error constantName : "Duplicated constant"
        end
        definedConstantNameSet += !constantName
      end
      for (s) in self.mEnumConstantNameList do
        if not [definedConstantNameSet hasKey !s] then
          error funcName : "No association for '" + s + "' constant"
        end
      end
      [!?enumFuncMap insertKey !funcName !associationSortedList]
    end
  end
  [!?ioSemanticContext.mClassMap insertKey
    !self.mClassName
    !.atomic {!kind: .enumType {!enumTypeName:self.mClassName !constantMap: enumConstantMap !funcMap: enumFuncMap}}
    !{}
    !{}
    !{}
  ]
#--- Generation
  ioGeneration.mFileGenerationList += !@enumForGeneration.new {
    !self.mClassName
    !self.mEnumConstantNameList
    !enumFuncMap
  }
}

#-----------------------------------------------------------------------------------------------------------------------
#   GENERATION
#-----------------------------------------------------------------------------------------------------------------------

refclass @enumForGeneration : @abstractFileGeneration {
  @string mEnumName
  @lstringlist mEnumConstantList
  @enumFuncMap mEnumFuncMap
}

#·······················································································································

private filewrapper enumGenerationTemplate in "../generation-templates" {
}{
}{
  template enumGenerationInSwift "enum.swift.galgasTemplate"
    ?@string ENUM_TYPE_NAME
    ?@lstringlist CONSTANT_ORDERED_LIST
    ?@enumFuncMap FUNCTION_MAP
}

#·······················································································································

override method @enumForGeneration generateCode
    ?let @string inOutputDirectory
    ?!@stringset ioGeneratedFileSet
{
  if [self.mEnumConstantList length] > 0 then # Empty list is the generic type "Enum"
    let s = [filewrapper enumGenerationTemplate.enumGenerationInSwift
      !self.mEnumName
      !self.mEnumConstantList
      !self.mEnumFuncMap
    ]
    let fileName = "enum-" + self.mEnumName + ".swift"
    ioGeneratedFileSet += !fileName
    [@string generateFile
      !inOutputDirectory
      !fileName
      !s
    ]
  end
}

#-----------------------------------------------------------------------------------------------------------------------
