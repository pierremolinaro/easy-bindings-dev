#-----------------------------------------------------------------------------------------------------------------------
#   AST   
#-----------------------------------------------------------------------------------------------------------------------

class @enumerationDeclarationAST : @abstractDeclarationAST {
  @lstringlist mEnumConstantNameList
}

#·······················································································································

override method @enumerationDeclarationAST enterInPrecedenceGraph ?!@declarationPrecedenceGraph ioGraph {
  [!?ioGraph addNode !mClassName !self]
}

#·······················································································································

override getter @enumerationDeclarationAST nodeKey -> @lstring {
  result = mClassName
}

#-----------------------------------------------------------------------------------------------------------------------
#   SYNTAX
#-----------------------------------------------------------------------------------------------------------------------

syntax extension easyBindings_syntax {

  #·····················································································································
  
  rule <enum_declaration> ?!@astDeclarationStruct ioDeclarationAST {
    $enum$
    $Identifier$ ?let @lstring enumName
    ${$
    @lstringlist enumConstants = {}
    repeat
      $identifier$ ?let @lstring constantName
      enumConstants += !constantName
    while
      $,$
    end
    $}$
    ioDeclarationAST.mUnifiedDeclarationList += !@enumerationDeclarationAST.new {!enumName !enumConstants}
  }

  #·····················································································································

}

#-----------------------------------------------------------------------------------------------------------------------
#   CLASS AND PROPERTY SEMANTIC ANALYSIS                       
#-----------------------------------------------------------------------------------------------------------------------

map @enumConstantMap {
  insert insertKey error message "there is already a '%K' constant"
  search searchKey error message "the '%K' constant is not defined"
}

#·······················································································································

override method @enumerationDeclarationAST firstAnalysisPhase
       ?!@semanticContext ioSemanticContext
       ?!@generationStruct ioGeneration
{
  @enumConstantMap enumConstantMap = {}
  for (s) in mEnumConstantNameList do
    [!?enumConstantMap insertKey !s]
  end
  [!?ioSemanticContext.mClassMap insertKey
    !mClassName
    !.atomic {!kind: .enumType {!enumTypeName:mClassName !constantMap: enumConstantMap}}
    !{}
    !{}
    !{}
  ]
#--- Generation
  ioGeneration.mFileGenerationList += !@enumForGeneration.new {
    !mClassName
    !mEnumConstantNameList
  }
}

#-----------------------------------------------------------------------------------------------------------------------
#   GENERATION
#-----------------------------------------------------------------------------------------------------------------------

class @enumForGeneration : @abstractFileGeneration {
  @string mEnumName
  @lstringlist mEnumConstantList
}

#·······················································································································

private filewrapper enumGenerationTemplate in "../generation-templates" {
}{
}{
  template enumGenerationInSwift "enum.swift.galgasTemplate"
    ?@string ENUM_TYPE_NAME
    ?@lstringlist CONSTANT_ORDERED_LIST
}

#·······················································································································

override method @enumForGeneration generateCode
    ?let @string inOutputDirectory
    ?!@stringset ioGeneratedFileSet
{
  if [mEnumConstantList length] > 0 then # Empty list is the generic type "Enum"
    let s = [filewrapper enumGenerationTemplate.enumGenerationInSwift
      !mEnumName
      !mEnumConstantList
    ]
    let fileName = "enum-" + mEnumName + ".swift"
    ioGeneratedFileSet += !fileName
    [@string generateFile
      !inOutputDirectory
      !fileName
      !s
    ]
  end
}

#-----------------------------------------------------------------------------------------------------------------------
