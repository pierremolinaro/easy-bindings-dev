
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   AST                                                                                                                *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

list @controllerBindingOptionList {
  @lstring mOptionName
  @lstring mOptionTypeName
}

#·······················································································································

list @outletClassBindingSpecificationModelList {
  @lstring mModelTypeName
  @bool mModelShouldBeWritableProperty
}

#·······················································································································

list @outletClassBindingSpecificationList {
  @lstring mOutletClassName
  @bool mIsUserDefined
  @lstring mBindingName
  @outletClassBindingSpecificationModelList mOutletClassBindingSpecificationModelList
  @controllerBindingOptionList mBindingOptionList
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   SYNTAX                                                                                                             *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

syntax extension easyBindings_syntax {

  #·····················································································································
  
  rule <binding_specification>
    ?let @bool inIsUserDefined
    ?!@outletClassBindingSpecificationList ioControllerTemplateList
  {
    $binding$
    $Identifier$ ?let @lstring outletClassName
    $bindingName$ ?let @lstring bindingName
    $:$
    @outletClassBindingSpecificationModelList outletClassBindingSpecificationModelList = {}
    repeat
      @bool modelShouldBeWritableProperty
      select
        $property$
        modelShouldBeWritableProperty = true
      or
        $transient$
        modelShouldBeWritableProperty = false
      end
      @lstring modelTypeName
      select
        $Identifier$ ?modelTypeName
      or
        $enum$
        modelTypeName = .new {!"enum" !.here}
      end
      outletClassBindingSpecificationModelList += !modelTypeName !modelShouldBeWritableProperty
    while
      $,$
    end
    @controllerBindingOptionList bindingOptionList = {}
    select
    or
      ${$
      repeat
        $identifier$ ?let @lstring optionName
        $:$
        $Identifier$ ?let @lstring optionType
        bindingOptionList += !optionName !optionType
      while
        $,$
      end
      $}$
    end
    $;$
    ioControllerTemplateList +=
      !outletClassName
      !inIsUserDefined
      !bindingName
      !outletClassBindingSpecificationModelList
      !bindingOptionList
  }

  #·····················································································································

}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#  SEMANTICS                                                                                                           *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

map @bindingSpecificationMap {
  @lstring mOutletSuperClassName
  @outletBindingSpecificationMap mBindingMap
  insert insertKey error message "the '%K' binding is already declared in %L"
  search searchKey error message "there is no '%K' binding"
  remove removeKey error message "there is no '%K' binding"
}

#·······················································································································

list @outletBindingSpecificationModelList {
  @typeKind mModelType
  @bool mModelShouldBeWritableProperty
}

#·······················································································································

list @controllerBindingOptionDecoratedList {
  @typeKind mOptionType
  @lstring mOptionName
}

#·······················································································································

map @outletBindingSpecificationMap {
  @outletBindingSpecificationModelList mOutletBindingSpecificationModelList
  @controllerBindingOptionDecoratedList mControllerBindingOptionList
  insert insertKey error message "the '%K' binding is already declared in %L"
  search searchKey error message "there is no '%K' binding"
}

#·······················································································································

proc buildBindingSpecificationMap
  ?let @unifiedTypeMap inUnifiedTypeMap
  ?let @outletClassMap inOutletClassMap
  ?let @outletClassBindingSpecificationList inBindingSpecificationListMap
  !@bindingSpecificationMap outBindingSpecificationMap
{
  outBindingSpecificationMap = {}
  for () in inBindingSpecificationListMap do
    @outletBindingSpecificationModelList outletBindingSpecificationModelList = {}
    for () in mOutletClassBindingSpecificationModelList do
      [inUnifiedTypeMap searchKey !mModelTypeName ?let @typeKind type ?*]
      outletBindingSpecificationModelList += !type !mModelShouldBeWritableProperty
    end
    @controllerBindingOptionDecoratedList controllerBindingOptionDecoratedList = {}
    for () in mBindingOptionList do
      [inUnifiedTypeMap searchKey !mOptionTypeName ?let @typeKind type ?*]
      controllerBindingOptionDecoratedList += !type !mOptionName
    end
  #--- Insert in binding map
    @outletBindingSpecificationMap bindingMap
    @lstring outletSuperClassName
    if [outBindingSpecificationMap hasKey !mOutletClassName.string] then
      [!?outBindingSpecificationMap removeKey !mOutletClassName ?outletSuperClassName ?bindingMap]
    else
      bindingMap = {}
      [inOutletClassMap searchKey !mOutletClassName ?outletSuperClassName ?6*]
    end
    [!?bindingMap insertKey
      !mBindingName
      !outletBindingSpecificationModelList
      !controllerBindingOptionDecoratedList
    ]
    [!?outBindingSpecificationMap insertKey !mOutletClassName !outletSuperClassName !bindingMap]
  end
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
