//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
%
if TRANSIENT then
  %//   Transient property class %!CLASS_NAME%\n%
else
  %//   Property class %!CLASS_NAME%\n%
end
%//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

%
if TRANSIENT then
  %typealias EBReadOnlyProperty_%!CLASS_NAME%       = EBObservableProperty <%!CLASS_NAME%>\n%
  %typealias EBTransientProperty_%!CLASS_NAME%      = EBGenericTransientProperty <%!CLASS_NAME%>\n%
  %typealias EBReadOnlyPropertyArray_%!CLASS_NAME%  = EBObservableProperty <[%!CLASS_NAME%]>\n%
  %typealias EBTransientPropertyArray_%!CLASS_NAME% = EBGenericTransientProperty <[%!CLASS_NAME%]>\n%
else
  %typealias EBReadOnlyProperty_%!CLASS_NAME%    = EBObservableProperty <%!CLASS_NAME%>\n%
  %typealias EBTransientProperty_%!CLASS_NAME%   = EBGenericTransientProperty <%!CLASS_NAME%>\n%
  %typealias EBReadWriteProperty_%!CLASS_NAME%   = EBObservableMutableProperty <%!CLASS_NAME%>\n%
  %typealias EBComputedProperty_%!CLASS_NAME%    = EBGenericComputedProperty <%!CLASS_NAME%>\n%
  %typealias EBStoredProperty_%!CLASS_NAME%      = EBGenericStoredProperty <%!CLASS_NAME%>\n%
  %typealias EBPreferencesProperty_%!CLASS_NAME% = EBGenericPreferenceProperty <%!CLASS_NAME%>\n%
end
%
%
if COMPARABLE then
%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func compare_%!CLASS_NAME%_properties (_ left : EBReadOnlyProperty_%!CLASS_NAME%, _ right : EBReadOnlyProperty_%!CLASS_NAME%) -> ComparisonResult {
  switch left.prop {
  case .empty :
    switch right.prop {
    case .empty :
      return .orderedSame
    default:
      return .orderedAscending
    }
  case .multiple :
    switch right.prop {
    case .empty :
      return .OrderedDescending
    case .multiple :
      return .OrderedSame
   case .single (_) :
      return .OrderedAscending
   }
 case .single (let currentValue) :
    switch right.prop {
    case .empty, .multiple :
      return .orderedDescending
    case .single (let otherValue) :
      if currentValue < otherValue {
        return .orderedAscending
      }else if currentValue > otherValue {
        return .orderedDescending
      }else{
        return .orderedSame
      }
    }
  }
}
%
end
%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
