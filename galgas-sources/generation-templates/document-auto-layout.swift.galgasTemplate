//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(%!DOCUMENT_CLASS_NAME%) class %!DOCUMENT_CLASS_NAME% : %!DOCUMENT_SUPER_CLASS_NAME% {
  
%
for (mProperty) in DOCUMENT_PROPERTY_LIST do
  ![mProperty propertyDeclarationCode !false ![@stringset emptySet]]
end
%  //····················································································································
  //    Outlets
  //····················································································································

%
for (lkey autoLayoutOutletTypeName outletIsArray) in AUTO_LAYOUT_OUTLET_MAP do
  if outletIsArray then
    %  final var %!lkey.string% = EBWeakReferenceArray <AutoLayout%!autoLayoutOutletTypeName%> ()\n%
  else
    %  weak final var %!lkey.string% : AutoLayout%!autoLayoutOutletTypeName%? = nil\n%
  end
end
%
  //····················································································································
  //    Outlets
  //····················································································································

%
for (lkey mOutletTypeName) in OUTLET_GENERATION_MAP do
%  @IBOutlet final var %!lkey.string% : %!mOutletTypeName%? = nil\n%
end
%
  //····················································································································
  //    Multiple bindings controllers
  //····················································································································

%for (mOutletName mBindingName mBoundObjectExpression) in MULTIPLE_BINDING_GENERATION_LIST do
  %//  final var mController_%!mOutletName%_%!mBindingName% : MultipleBindingController_%!mBindingName%? = nil\n%
end
%
  //····················································································································
  //    displayName
  //····················································································································

  override var displayName : String? {
    get {
      return super.displayName
    }
    set {
      super.displayName = newValue
      self.documentFileName_property.observedObjectDidChange ()
    }
  }

  //····················································································································
  //    rootEntityClassName
  //····················································································································

  override final func rootEntityClassName () -> String {
    return "%!ROOT_ENTITY_NAME%"
  }

  //····················································································································
  //    rootObject
  //····················································································································

  final var rootObject : %!ROOT_ENTITY_NAME% { return self.mRootObject as! %!ROOT_ENTITY_NAME% }

%
for (mViewName mView) in VIEW_GENERATION_LIST do
  %  //····················································································································\n%
  %  //    VIEW %!mViewName%\n%
  %  //····················································································································\n\n%
  ![mView generateViewBuilder !prefs: false !mViewName]
end
for (mInstruction) in IMPLICIT_VIEW_GENERATION_FUNCTION_LIST do (idx)
  %  //····················································································································\n%
  %  //    IMPLICIT VIEW %![idx string]%\n%
  %  //····················································································································\n\n%
%  private final func computeImplicitView_%![idx string]% () -> NSView {\n%
![mInstruction generateViewInstruction !prefs: false !"view" !"    "]
%    return view\n%
%  }\n\n%
end
%  //····················································································································
  //    Build User Interface
  //····················································································································

  override func ebBuildUserInterface () {
  //--------------------------- Read documentFileName model
    self.documentFileName_property.mReadModelFunction = { [weak self] in
      if let r = self?.displayName {
        return .single (r)
      }else{
        return .single ("")
      }
    }
  //--- Build window content view
    self.configureProperties ()
    let mainView = self.%!MAIN_VIEW_NAME% ()
  //--- Call outlet linkers\n%
     for (mLinkerName mOutletNameAndTypeNameList) in AUTO_LAYOUT_LINKER_LIST do
     %    self.linker_%!mLinkerName% (%
       for (mValue0 mValue1) in mOutletNameAndTypeNameList
       do %self.% !mValue0
       between %, %
       end
     %)\n%
     end
%  //--- Assign main view to window
    self.windowForSheet?.contentView = AutoLayoutWindowContentView (view: mainView)
  }

  //····················································································································
  //    configureProperties
  //····················································································································

  final private func configureProperties () {
%
for (mProperty) in DOCUMENT_PROPERTY_LIST do
  ![mProperty configurationCode !false]
%
%end
%  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

