//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Base Selection Controller %!OWNER_NAME% %!SELECTION_CONTROLLER_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor final class SelectionController_%!OWNER_NAME%_%!SELECTION_CONTROLLER_NAME% {

  //····················································································································

  init () {
    noteObjectAllocation (self)
  }

  //····················································································································

  deinit {
    noteObjectDeallocation (self)
  }

%for (lkey mKind mActionMap mIsOverriding) in SELECTION_OBSERVABLE_PROPERTY_MAP do
%  //····················································································································\n%
%  //   Selection observable property: %!lkey.string%\n%
%  //····················································································································\n\n%
  if not [mKind isEntityType] then
    if [mKind isTransient] then
      %  var %!lkey.string%_property = EBTransientProperty_%![mKind swiftTypeName]% ()\n\n%
    else
      %  var %!lkey.string%_property = EBComputedProperty_%![mKind swiftTypeName]% ()\n\n%
    end
  end
end
%  //····················································································································
  //   BIND SELECTION
  //····················································································································

  private weak var mModel : ReadOnlyArrayOf_%!ELEMENT_TYPE_NAME%? = nil // SHOULD BE WEAK

  //····················································································································

  final func bind_selection (model : ReadOnlyArrayOf_%!ELEMENT_TYPE_NAME%) {
    self.mModel = model
%for (lkey mKind mActionMap mIsOverriding) in SELECTION_OBSERVABLE_PROPERTY_MAP do
  if not [mKind isEntityType] then
    %    self.bind_property_%!lkey.string% (model: model)\n%
  end
end
%  }

  //····················································································································
  //   UNBIND SELECTION
  //····················································································································

  /* final func unbind_selection () {
%
  for (lkey mKind mActionMap mIsOverriding) in SELECTION_OBSERVABLE_PROPERTY_MAP do
    if not [mKind isEntityType] then
      %  //--- %!lkey.string%\n%
      %    self.%!lkey.string%_property.mReadModelFunction = nil \n%
      if not [mKind isTransient] then
        %    self.%!lkey.string%_property.mWriteModelFunction = nil \n%
       end
      %    self.mModel?.toMany_%!lkey.string%_StopsBeingObserved (by: self.%!lkey.string%_property)\n%
    end
  end
%  //---
    self.mModel = nil
  } */

%for (lkey mKind mActionMap mIsOverriding) in SELECTION_OBSERVABLE_PROPERTY_MAP do
if not [mKind isEntityType] then
  %  //···················································································································*\n\n%
  %  private final func bind_property_%!lkey.string% (model : ReadOnlyArrayOf_%!ELEMENT_TYPE_NAME%) {\n%
  %    model.toMany_%!lkey.string%_StartsToBeObserved (by: self.%!lkey.string%_property)\n%
  %    self.%!lkey.string%_property.mReadModelFunction = { [weak self] in\n%
  %      if let model = self?.mModel {\n%
  %        switch model.selection {\n%
  %        case .empty :\n%
  %          return .empty\n%
  %        case .multiple :\n%
  %          return .multiple\n%
  %        case .single (let v) :\n%
  %          var s = Set <%![mKind swiftTypeName]%> ()\n%
  %          var isMultipleSelection = false\n%
  %          for object in v {\n%
  %            switch object.%!lkey.string%_property.selection {\n%
  %            case .empty :\n%
  %              return .empty\n%
  %            case .multiple :\n%
  %              isMultipleSelection = true\n%
  %            case .single (let vProp) :\n%
  %              s.insert (vProp)\n%
  %            }\n%
  %          }\n%
  %          if isMultipleSelection {\n%
  %            return .multiple\n%
  %          }else if s.count == 0 {\n%
  %            return .empty\n%
  %          }else if s.count == 1 {\n%
  %            return .single (s.first!)\n%
  %          }else{\n%
  %            return .multiple\n%
  %          }\n%
  %        }\n%
  %      }else{\n%
  %        return .empty\n%
  %      }\n%
  %    }\n%
if not [mKind isTransient] then
%    self.%!lkey.string%_property.mWriteModelFunction = { [weak self] (inValue : %![mKind swiftTypeName]%) in\n%
%      if let model = self?.mModel {\n%
%        switch model.selection {\n%
%        case .empty, .multiple :\n%
%          break\n%
%        case .single (let v) :\n%
%          for object in v {\n%
%            object.%!lkey.string%_property.setProp (inValue)\n%
%          }\n%
%        }\n%
%      }\n%
%    }\n%
end
%  }\n\n%
end
end%

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

