#-----------------------------------------------------------------------------------------------------------------------
#   AST   
#-----------------------------------------------------------------------------------------------------------------------

abstract class @abstractDefaultValue {
}

#·······················································································································

class @boolAsDefaultValue : @abstractDefaultValue {
  public var @lbool mValue
}

#·······················································································································

class @doubleAsDefaultValue : @abstractDefaultValue {
  public var @ldouble mValue
}

#·······················································································································

class @integerAsDefaultValue : @abstractDefaultValue {
  public var @luint mValue
  public var @bool mNegative
}

#·······················································································································

class @stringAsDefaultValue : @abstractDefaultValue {
  public var @lstring mValue
}

#·······················································································································

class @identifierAsDefaultValue : @abstractDefaultValue {
  public var @lstring mValue
}

#·······················································································································

class @prefsAsDefaultValue : @abstractDefaultValue {
  public var @lstring mPrefPropertyName
}

#-----------------------------------------------------------------------------------------------------------------------
#   SYNTAX
#-----------------------------------------------------------------------------------------------------------------------

syntax extension easyBindings_syntax {

  #·····················································································································
  
   rule <explicit_value> (!@abstractDefaultValue outDefaultValue) {
    select
      $yes$
      outDefaultValue = @boolAsDefaultValue (!.new (!true ,!.here))
    or
      $no$
      outDefaultValue = @boolAsDefaultValue (!.new (!false ,!.here))
    or
      $literal_integer$ (?let @luint integerValue)
      outDefaultValue = @integerAsDefaultValue (!integerValue ,!false)
    or
      $-$
      $literal_integer$ (?let @luint integerValue)
      outDefaultValue = @integerAsDefaultValue (!integerValue ,!true)
    or
      $literal_double$ (?let @ldouble doubleValue ?*)
      outDefaultValue = @doubleAsDefaultValue (!doubleValue)
    or
      $literal_string$ (?let @lstring stringValue)
      outDefaultValue = @stringAsDefaultValue (!stringValue)
    or
      $identifier$ (?let @lstring stringValue)
      outDefaultValue = @identifierAsDefaultValue (!stringValue)
    or
      $prefs$
      $.$
      $identifier$ (?let name)
      outDefaultValue = @prefsAsDefaultValue (!name)
    end
  }

  #·····················································································································

}

#-----------------------------------------------------------------------------------------------------------------------
#   SEMANTICS                             
#-----------------------------------------------------------------------------------------------------------------------

abstract proc @abstractDefaultValue.analyzeDefaultValueType (
  ?let @typeKindList inAttributeActualTypeList
  ?let @propertyMap inPreferencesPropertyMap
  !@string outSwiftDefaultValueAsString)

#·······················································································································

proc @abstractDefaultValue.enterDefaultValuePrecedence(
   ?let @lstring unused inNode
   ?!@declarationPrecedenceGraph unused ioGraph) {
}

#·······················································································································
  
override proc @boolAsDefaultValue.analyzeDefaultValueType (
  ?let @typeKindList inAttributeActualTypeList
  ?let @propertyMap unused inPreferencesPropertyMap
  !@string outSwiftDefaultValueAsString)
{
  outSwiftDefaultValueAsString = ""
  var @bool found = false
  for (mType) in  inAttributeActualTypeList while not found do
    switch mType
    case boolType :
      outSwiftDefaultValueAsString = if self.mValue.bool then "true" else "false" end
      found = true
    case integerType, uint32Type, dataType, dateType, doubleType,
         stringType, fontType, colorType, bezierPathType, bezierPathArrayType :
    case entityType (2*) :
    case classType (*) :
    case enumType (3*) :
    case transientPropertyExternType (*) :
    end
  end
  if not found then
    error self.mValue
    : "only a boolean attribute can be initialized by YES or NO"  
  end
}

#·······················································································································
  
override proc @integerAsDefaultValue.analyzeDefaultValueType (
  ?let @typeKindList inAttributeActualTypeList
  ?let @propertyMap unused inPreferencesPropertyMap
  !@string outSwiftDefaultValueAsString)
{
  outSwiftDefaultValueAsString = ""
  var @bool found = false
  for (mType) in  inAttributeActualTypeList while not found do
    switch mType
    case integerType :
      outSwiftDefaultValueAsString = if self.mNegative then "-" else "" end + self.mValue.uint.string ()
      found = true
    case uint32Type :
      if self.mNegative then
        error self.mValue : "Uint32 value should be ≥ 0"
      end
      outSwiftDefaultValueAsString = self.mValue.uint.string ()
      found = true
    case fontType :
      outSwiftDefaultValueAsString = "NSFont.systemFont (ofSize: " + self.mValue.uint + ".0)"
      found = true
    case boolType, dateType, dataType, doubleType, stringType, colorType, bezierPathType, bezierPathArrayType :
    case entityType (2*) :
    case enumType (3*) :
    case classType (*) :
    case transientPropertyExternType (*) :
    end
  end
  if not found then
    error self.mValue
    : "only an integer attribute can be initialized by an integer constant"  
  end
}

#·······················································································································
  
override proc @doubleAsDefaultValue.analyzeDefaultValueType (
  ?let @typeKindList inAttributeActualTypeList
  ?let @propertyMap unused inPreferencesPropertyMap
  !@string outSwiftDefaultValueAsString)
{
  outSwiftDefaultValueAsString = ""
  var @bool found = false
  for (mType) in  inAttributeActualTypeList while not found do
    switch mType
    case doubleType :
      outSwiftDefaultValueAsString = self.mValue.double.string ()
      found = true
    case boolType, dateType, dataType, integerType, uint32Type,
         stringType, fontType, colorType, bezierPathType, bezierPathArrayType :
    case entityType (2*) :
    case enumType (3*) :
    case classType (*) :
    case transientPropertyExternType (*) :
    end
  end
  if not found then
    error self.mValue
    : "only a double attribute can be initialized by a floating point constant"  
  end
}

#·······················································································································
  
override proc @stringAsDefaultValue.analyzeDefaultValueType (
  ?let @typeKindList inAttributeActualTypeList
  ?let @propertyMap unused inPreferencesPropertyMap
  !@string outSwiftDefaultValueAsString)
{
  outSwiftDefaultValueAsString = ""
  var @bool found = false
  for (mType) in  inAttributeActualTypeList while not found do
    switch mType
    case stringType :
      outSwiftDefaultValueAsString = "\""+ self.mValue.string + "\""
      found = true
    case boolType, dateType, dataType, integerType, uint32Type, doubleType,
         fontType, colorType, bezierPathType, bezierPathArrayType :
    case entityType (2*) :
    case enumType (3*) :
    case classType (*) :
    case transientPropertyExternType (*) :
    end
  end
  if not found then
    error self.mValue
    : "only a string attribute can be initialized by a string constant"  
  end
}

#·······················································································································

func %once predefinedDates() -> @stringset {
  result = {}
  result += !"now"
  result += !"distantPast"
}

#·······················································································································

func %once predefinedColors() -> @stringset {
  result = {}
  result += !"black"
  result += !"blue"
  result += !"brown"
  result += !"clear"
  result += !"control"
  result += !"controlDarkShadow"
  result += !"controlHighlight"
  result += !"controlLightHighlight"
  result += !"controlShadow"
  result += !"controlText"
  result += !"cyan"
  result += !"darkGray"
  result += !"disabledControlText"
  result += !"gray"
  result += !"green"
  result += !"grid"
  result += !"header"
  result += !"headerText"
  result += !"highlight"
  result += !"keyboardFocusIndicator"
  result += !"knob"
  result += !"lightGray"
  result += !"magenta"
  result += !"orange"
  result += !"purple"
  result += !"red"
  result += !"scrollBar"
  result += !"selectedControl"
  result += !"selectedControlText"
  result += !"selectedKnob"
  result += !"selectedMenuItem"
  result += !"selectedMenuItemText"
  result += !"selectedTextBackground"
  result += !"selectedText"
  result += !"shadow"
  result += !"textBackground"
  result += !"white"
  result += !"windowBackground"
  result += !"windowFrame"
  result += !"windowFrameText"
  result += !"yellow"
}
#·······················································································································
  
override proc @identifierAsDefaultValue.analyzeDefaultValueType (
  ?let @typeKindList inAttributeActualTypeList
  ?let @propertyMap unused inPreferencesPropertyMap
  !@string outSwiftDefaultValueAsString)
{
  outSwiftDefaultValueAsString = ""
  var @bool found = false
  for (mType) in inAttributeActualTypeList while not found do
    switch mType 
    case dateType :
      found = true
      if predefinedDates ().hasKey (self.mValue.string) then
        if self.mValue.string == "now" then
          outSwiftDefaultValueAsString = "Date ()"
        elsif self.mValue.string == "distantPast" then
          outSwiftDefaultValueAsString = "Date.distantPast"
        else
          error self.mValue : "unknown predefined date" 
        end 
      else
        error self.mValue : "unknown predefined date"  
      end
    case bezierPathType :
      found = true
      if self.mValue.string == "empty" then
        outSwiftDefaultValueAsString = "NSBezierPath ()"
      else
        error self.mValue : "only 'empty' is accepted as default NSBezierPath"  
      end
    case bezierPathArrayType :
      found = true
      if self.mValue.string == "empty" then
        outSwiftDefaultValueAsString = "BezierPathArray ()"
      else
        error self.mValue : "only 'empty' is accepted as default BezierPathArray"  
      end
    case enumType (@string enumTypeName @enumConstantMap constantMap *
    ) :
      found = true
      if constantMap.hasKey (self.mValue.string) then
        outSwiftDefaultValueAsString = enumTypeName + "." + self.mValue.string
      else
        error self.mValue
        : "the '" + enumTypeName + "' enumeration does not define '" + self.mValue + "' constant"
        spoil outSwiftDefaultValueAsString  
      end
    case entityType (2*) :
      error self.mValue : "invalid entity type"  
    case classType (*) :
      error self.mValue : "invalid class type"  
    case boolType :
      error self.mValue : "invalid bool type"  
    case dataType :
      found = true
      if self.mValue.string == "empty" then
        outSwiftDefaultValueAsString = "Data ()"
      else
        error self.mValue : "only 'empty' is accepted as default Data"  
      end
    case doubleType :
      error self.mValue : "invalid double type"  
    case integerType :
      error self.mValue : "invalid integer type"  
    case uint32Type :
      error self.mValue : "invalid UInt32 type"  
    case stringType :
      error self.mValue : "invalid string type"  
    case fontType :
      error self.mValue : "invalid font type"
    case colorType :
      if predefinedColors ().hasKey (self.mValue.string) then
        outSwiftDefaultValueAsString = "NSColor." + self.mValue.string
        found = true
      else
        error self.mValue : "unknown predefined color"  
      end
    case transientPropertyExternType (*) :
      error self.mValue : "invalid image type"  
    end
  end
  if not found then
    error self.mValue
    : "unknow type for this identifier"  
  end
}

#·······················································································································
 
override proc @prefsAsDefaultValue.analyzeDefaultValueType (
  ?let @typeKindList inAttributeActualTypeList
  ?let @propertyMap inPreferencesPropertyMap
  !@string outSwiftDefaultValueAsString)
{
  [inPreferencesPropertyMap searchKey !self.mPrefPropertyName ?let @propertyKind kind ?2*]
  switch kind
  case property (@typeKind type *) :
    var found = false
    for (t) in inAttributeActualTypeList while not found do
      found = type == t
    end
    if not found then
      error self.mPrefPropertyName : "the atomic property type is not compatible"
    end
  case toMany (4*) :
    error self.mPrefPropertyName : "an atomic property is required here"
  case toOne (5*) :
    error self.mPrefPropertyName : "an atomic property is required here"
  case arrayController (2*) :
    error self.mPrefPropertyName : "an atomic property is required here"
  case selectionController (*) :
    error self.mPrefPropertyName : "an atomic property is required here"
  end
  outSwiftDefaultValueAsString = "preferences_" + self.mPrefPropertyName
}

#·······················································································································

override proc @prefsAsDefaultValue.enterDefaultValuePrecedence(
   ?let @lstring inNode
   ?!@declarationPrecedenceGraph ioGraph)
{
  let p = @lstring (!preferencesName () + " " + self.mPrefPropertyName.string ,!self.mPrefPropertyName.location)
  [!?ioGraph addEdge !inNode !p]
}

#-----------------------------------------------------------------------------------------------------------------------
