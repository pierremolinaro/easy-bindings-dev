//----------------------------------------------------------------------------------------------------------------------
#   AST   
//----------------------------------------------------------------------------------------------------------------------

list @simpleStoredPropertyList {
  public var @lstring mPropertyTypeName
  public var @lstring mPropertyName
  public var @abstractDefaultValue mDefaultValue
}

#·······················································································································

class @atomicPropertyDeclarationAST : @abstractDeclarationAST {
  public var @lstring mPropertyTypeName
  public var @lstring mPropertyName
  public var @abstractDefaultValue mDefaultValue
  public var @bool mGenerateResetMethod
  public let @bool mGenerateDirectRead
  public let @bool mGenerateDirectAccess
}

#·······················································································································

override proc @atomicPropertyDeclarationAST.enterInPrecedenceGraph (?!@declarationPrecedenceGraph ioGraph) {
  let node = @lstring (self.mClassName.string + " " + self.mPropertyName, self.mPropertyName.location)
  !?ioGraph.addNode (node, self)
  !?ioGraph.addEdge (node, self.mClassName)
  !?ioGraph.addEdge (node, self.mPropertyTypeName)
  self.mDefaultValue.enterDefaultValuePrecedence (node, !?ioGraph)
}

#·······················································································································

override func @atomicPropertyDeclarationAST.nodeKey() -> @lstring {
  result = @lstring (self.mClassName.string + " " + self.mPropertyName, self.mPropertyName.location)
}

//----------------------------------------------------------------------------------------------------------------------
#   SYNTAX
//----------------------------------------------------------------------------------------------------------------------

syntax extension easyBindings_syntax {

  #·····················································································································
  
  rule <simple_stored_declaration>(
    let @lstring inClassName,
    ?!@simpleStoredPropertyList ioAttributeList,
    ?!@stringset ioSignatureList,
    ?!@astDeclarationStruct ioDeclarationAST)
  {
    $property$
    var usedForSignature = false
    var generateResetMethod = false
    var generateDirectRead = false
    var generateDirectAccess = false
    repeat
    while
      $@attribute$ (?let attributeName)
      if attributeName.string == "signature" then
        if usedForSignature then
          error attributeName : "duplicated attribute" fixit ( %remove )
        end
        usedForSignature = true
      elsif attributeName.string == "generateResetMethod" then
        if generateResetMethod then
          error attributeName : "duplicated attribute" fixit ( %remove )
        end
        generateResetMethod = true
      elsif attributeName.string == "generateDirectRead" then
        if generateDirectRead then
          error attributeName : "duplicated attribute" fixit ( %remove )
        end
        generateDirectRead = true
      elsif attributeName.string == "generateDirectAccess" then
        if generateDirectAccess then
          error attributeName : "duplicated attribute" fixit ( %remove )
        end
        generateDirectAccess = true
      else
        error attributeName : "unknow attribute" fixit (
          %replaceBy "@signature", %replaceBy "@generateResetMethod",
          %replaceBy "@generateDirectRead", %replaceBy "@generateDirectAccess"
        )
      end
    end
    if generateDirectAccess && generateDirectRead then
      error .here : "@generateDirectAccess implies @generateDirectRead"
    end
    $Identifier$ (?let @lstring attributeTypeName)
    $identifier$ (?let @lstring attributeName)
    if usedForSignature then
      !?ioSignatureList.insert (attributeName.string)
    end
    $default$
    <explicit_value> (?let @abstractDefaultValue defaultValue)
    $;$
    !?ioDeclarationAST.mUnifiedDeclarationList.append (@atomicPropertyDeclarationAST.init(
      inClassName,
      attributeTypeName,
      attributeName,
      defaultValue,
      generateResetMethod,
      generateDirectRead,
      generateDirectAccess
    )
    )
    !?ioAttributeList.append (
      !attributeTypeName,
      !attributeName,
      !defaultValue
    )
  }

  #·····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
#   CLASS AND PROPERTY SEMANTIC ANALYSIS                       
//----------------------------------------------------------------------------------------------------------------------

override proc @atomicPropertyDeclarationAST.firstAnalysisPhase (
       ?!@semanticContext ioSemanticContext,
       ?!@generationStruct unused ioGeneration) {
  with self.mClassName in !?ioSemanticContext.mClassMap 
    %errorMessage searchKey
  do
    ioSemanticContext.mClassMap.searchKey (self.mPropertyTypeName, ?let classKind, ?3*)
    ioSemanticContext.mClassMap.searchKey (
      .init (preferencesName (), .nowhere),
      ?*,
      ?let preferencesPropertyMap,
      ?2*
    )
    switch classKind
    case prefs :
      error self.mPropertyTypeName : "an atomic class is required here"
    case atomic (kind) :
      !?mPropertyMap.insertKey (self.mPropertyName, .property (!type: kind, !accessibility: .stored), [], false)
    //-- Analyze default value
      self.mDefaultValue.analyzeDefaultValueType ([kind], preferencesPropertyMap, ?let @string swiftDefaultValueAsString)
    //-- Code Generation
      !?mPropertyGenerationList.append (@atomicPropertyGeneration (
        self.mPropertyName.string,
        self.mGenerateResetMethod,
        self.mGenerateDirectRead,
        self.mGenerateDirectAccess,
        kind,
        false,
        swiftDefaultValueAsString,
        self.mClassName.string == preferencesName ()
      )
      )
    case document (*) :
      error self.mPropertyTypeName : "an atomic class is required here"
    case entity (4*) :
      error self.mPropertyTypeName : "an atomic class is required here"
    end
  end
}

//----------------------------------------------------------------------------------------------------------------------
#   CODE GENERATION                       
//----------------------------------------------------------------------------------------------------------------------

class @atomicPropertyGeneration : @propertyGeneration {
  public let @bool mGenerateResetMethod
  public let @bool mGenerateDirectRead
  public let @bool mGenerateDirectAccess
  public let @typeKind mType
  public let @bool mIsProxy
  public let @string mDefaultValueInSwift
  public let @bool mInPreferences
}

#·······················································································································

list @atomicPropertyGenerationList {
  public var @atomicPropertyGeneration mProperty
}

#·······················································································································

override func @atomicPropertyGeneration.prefKeyDefinitionCode() -> @string {
  result = "@MainActor let Preferences_" + self.mPropertyName + " = \"Preferences:" + self.mPropertyName + "\"\n"
}

#·······················································································································

override func @atomicPropertyGeneration.declarationInSelectionControllerCode() -> @string {
  result  = "  //" + @string.stringWithSequenceOfCharacters  ('·', 96) + "\n"
  result += "  //   Selection observable property: " + self.mPropertyName + "\n"
  result += "  //" + @string.stringWithSequenceOfCharacters  ('·', 96) + "\n\n"
  result += "  final let " + self.mPropertyName + "_property = EBComputedProperty_" + self.mType.swiftTypeName + " ()\n\n"
}

#·······················································································································

override func @atomicPropertyGeneration.bindPropertyInSelectionController() -> @string {
  result  = "  //" + @string.stringWithSequenceOfCharacters  ('·', 96) + "\n\n"
  result += "  private final func bind_property_" + self.mPropertyName + " () {\n"
  result += "    self.selectedArray_property.toMany_" + self.mPropertyName + "_StartsBeingObserved (by: self." + self.mPropertyName + "_property)\n"
  result += "    self." + self.mPropertyName + "_property.mReadModelFunction = { [weak self] in\n"
  result += "      if let model = self?.selectedArray_property {\n"
  result += "        switch model.selection {\n"
  result += "        case .empty :\n"
  result += "          return .empty\n"
  result += "        case .multiple :\n"
  result += "          return .multiple\n"
  result += "        case .single (let v) :\n"
  result += "          var s = Set <" + self.mType.swiftTypeName + "> ()\n"
  result += "          var isMultipleSelection = false\n"
  result += "          for object in v {\n"
  result += "            switch object." + self.mPropertyName + "_property.selection {\n"
  result += "            case .empty :\n"
  result += "              return .empty\n"
  result += "            case .multiple :\n"
  result += "              isMultipleSelection = true\n"
  result += "            case .single (let vProp) :\n"
  result += "              s.insert (vProp)\n"
  result += "            }\n"
  result += "          }\n"
  result += "          if isMultipleSelection {\n"
  result += "            return .multiple\n"
  result += "          }else if s.count == 0 {\n"
  result += "            return .empty\n"
  result += "          }else if s.count == 1 {\n"
  result += "            return .single (s.first!)\n"
  result += "          }else{\n"
  result += "            return .multiple\n"
  result += "          }\n"
  result += "        }\n"
  result += "      }else{\n"
  result += "        return .empty\n"
  result += "      }\n"
  result += "    }\n"

  result += "    self." + self.mPropertyName + "_property.mWriteModelFunction = { [weak self] (inValue : " + self.mType.swiftTypeName + ") in\n"
  result += "      if let model = self?.selectedArray_property {\n"
  result += "        switch model.selection {\n"
  result += "        case .empty, .multiple :\n"
  result += "          break\n"
  result += "        case .single (let v) :\n"
  result += "          for object in v {\n"
  result += "            object." + self.mPropertyName + "_property.setProp (inValue)\n"
  result += "          }\n"
  result += "        }\n"
  result += "      }\n"
  result += "    }\n"
  result += "  }\n"
}

#·······················································································································

override func @atomicPropertyGeneration.propertyDeclarationCode (
   let @bool unused inPreferences,
   let @bool inGenerationDirectAccess,
   let @stringset unused inOverriddenTransients) -> @string
{
  if self.mInPreferences then
    result  = "//" + @string.stringWithSequenceOfCharacters  ('·', 96) + "\n"
    result += "//   Atomic property: " + self.mPropertyName + "\n"
    result += "//" + @string.stringWithSequenceOfCharacters  ('·', 96) + "\n\n"
    result += "@MainActor let preferences_" + self.mPropertyName + "_property = EBPreferenceProperty <" + self.mType.swiftTypeName
    result += "> (defaultValue: " + self.mDefaultValueInSwift + ", prefKey: Preferences_" + self.mPropertyName  + ")\n\n"
  else
    result  = "  //" + @string.stringWithSequenceOfCharacters  ('·', 96) + "\n"
    result += "  //   Atomic property: " + self.mPropertyName + "\n"
    result += "  //" + @string.stringWithSequenceOfCharacters  ('·', 96) + "\n\n"
    result += "  final let " + self.mPropertyName + "_property : EBStoredProperty_" + self.mType.swiftTypeName + "\n\n"
    if self.mGenerateResetMethod then
      result += "  //" + @string.stringWithSequenceOfCharacters  ('·', 96) + "\n\n"
      result += "  final func reset_" + self.mPropertyName + "_toDefaultValue () {\n"
      result += "    self." + self.mPropertyName + "_property.setProp (" + self.mDefaultValueInSwift + ")\n"
      result += "  }\n\n"
    end
    let generateAccess = inGenerationDirectAccess || self.mGenerateDirectRead || self.mGenerateDirectAccess
    if generateAccess then
      result += "  //" + @string.stringWithSequenceOfCharacters  ('·', 96) + "\n\n"
      result += "  final var " + self.mPropertyName + " : " + self.mType.swiftTypeName + " {\n"
      result += "    get { return self." + self.mPropertyName + "_property.propval }\n"
      if self.mGenerateDirectAccess then
        result += "    set { self." + self.mPropertyName + "_property.setProp (newValue) }\n"
      end
      result += "  }\n\n"
    end
  end
}

#·······················································································································

override func @atomicPropertyGeneration.initCode() -> @string {
  result  = "    self." + self.mPropertyName + "_property = EBStoredProperty_" + self.mType.swiftTypeName
  result += " (defaultValue: " + self.mDefaultValueInSwift + ", undoManager: inUndoManager, key: \"" 
  result += self.mPropertyName + "\")\n"
}

#·······················································································································

override func @atomicPropertyGeneration.configurationCode (let @bool unused inPreferences) -> @string {
  result = ""
}

//----------------------------------------------------------------------------------------------------------------------
