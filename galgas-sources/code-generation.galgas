#   SEMANTIC TYPES                                                                                                     *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

struct @structForGeneration {
  @transientDefinitionListForGeneration mTransientListForGeneration
  @actionListForGeneration mActionListForGeneration
  @preferencesForGeneration mPreferencesForGeneration
  @documentListForGeneration mDocumentListForGeneration
  @entityListForGeneration mEntityListForGeneration
  @enumListForGeneration mEnumListForGeneration
  @stringset mNeededOutletClasses
  @arrayControllerForGeneration mAllArrayControllerForGeneration
  @validationStubRoutineListForGeneration mValidationStubRoutineListForGeneration
  @selectionControllerForGeneration mSelectionControllerListForGeneration
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   CODE GENERATION                                                                                                    *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

proc generateCode
  ?let @string inXcodeProjectString
  ?let @structForGeneration inGeneration
  ?let @string inSourceFile
{
  let outputDirectory = [inSourceFile stringByDeletingLastPathComponent]
  let projectName = [[inSourceFile lastPathComponent] stringByDeletingPathExtension]
  let fileOutputDirectory = outputDirectory + "/" + projectName
  @stringset generatedFileSet = {}
  generateTransients (
    !fileOutputDirectory
    !inGeneration.mTransientListForGeneration
    !?generatedFileSet
  )
  generateActions (
    !fileOutputDirectory
    !inGeneration.mActionListForGeneration
    !?generatedFileSet
  )
  generatePreferences (
    !inGeneration.mPreferencesForGeneration
    !fileOutputDirectory
    !?generatedFileSet
  )
  generateOutletClasses (
    !inGeneration.mNeededOutletClasses
    !fileOutputDirectory
    !?generatedFileSet
  )
  generateEntities (
    !inGeneration.mEntityListForGeneration
    !fileOutputDirectory
    !?generatedFileSet
  )
  generateEnums (
    !inGeneration.mEnumListForGeneration
    !fileOutputDirectory
    !?generatedFileSet
  )
  generateDocuments (
    !inGeneration.mDocumentListForGeneration
    !fileOutputDirectory
    !?generatedFileSet
  )
  generateArrayControllers (
    !inGeneration.mAllArrayControllerForGeneration
    !fileOutputDirectory
    !?generatedFileSet
  )
  generateSelectionControllers (
    !inGeneration.mSelectionControllerListForGeneration
    !fileOutputDirectory
    !?generatedFileSet
  )
  generateSwiftApplicationFiles (
    !fileOutputDirectory
    ![inGeneration.mEntityListForGeneration length] > 0
    !?generatedFileSet
  )
  generateValidationRoutineStubs (
    !fileOutputDirectory
    !inGeneration.mValidationStubRoutineListForGeneration
    !?generatedFileSet
  )
  generateXcodeProject (
    !outputDirectory
    !inXcodeProjectString
    !generatedFileSet
    !projectName
  )
  generateTestFile (
    !inXcodeProjectString
    !projectName
    !inGeneration.mPreferencesForGeneration.mMainXibDescriptorList
    !outputDirectory
  )
}

#......................................................................................................................*

filewrapper swift_sources in "../generation-templates/swift-sources" {
  "xib", "swift"
}{
}{
}

#......................................................................................................................*

private proc generateSwiftApplicationFiles
  ?let @string inOutputDirectory
  ?let @bool inHasEntities
  ?!@stringset ioGeneratedFileSet
{
  @stringlist swiftFiles = {
    !"main",
    !"PMAllocationDebug",
    !"easy-bindings-utilities",
    !"standard-properties",
    !"generic-bindings",
    !"application"
  }
  if inHasEntities then
    swiftFiles += !"PMManagedObject"
    swiftFiles += !"PMManagedDocument"
    swiftFiles += !"PMUndoManager"
    swiftFiles += !"PMDataScanner"
  end
  @stringlist xibFiles = {!"PMAllocationDebug"}
  var fw = [filewrapper swift_sources]
  for (@string s) in swiftFiles do
    let contents = [fw textFileContentsAtPath !s + ".swift"]
    let fileName = s + ".swift"
    ioGeneratedFileSet += !fileName
    [@string generateFile
      !inOutputDirectory
      !fileName
      !contents
    ]
  end
  for (@string s) in xibFiles do
    let contents = [fw textFileContentsAtPath !s + ".xib"]
    let fileName = s + ".xib"
    ioGeneratedFileSet += !fileName
    [@string generateFile
      !inOutputDirectory
      !fileName
      !contents
    ]
  end
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
