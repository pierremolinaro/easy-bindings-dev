#-----------------------------------------------------------------------------------------------------------------------
#   SEMANTIC TYPES
#-----------------------------------------------------------------------------------------------------------------------

list @transientExternTypeList {
  @string mTypeName
  @bool mIsClass
}

#·······················································································································

abstract class @abstractFileGeneration {
}

#·······················································································································

abstract method @abstractFileGeneration generateCode
    ?let @string inOutputDirectory
    ?!@stringset ioGeneratedFileSet

#·······················································································································

list @fileGenerationList {
  @abstractFileGeneration mFileGeneration
}

#·······················································································································

struct @generationStruct {
  @validationStubRoutineListForGeneration mValidationStubRoutineListForGeneration
  @fileGenerationList mFileGenerationList
  @entityListForGeneratingEBManagedObjectContext mEntityListForGeneration
  @bool mGenerateEBManagedDocumentSwift
  @stringset mNeededOutletClasses
  @mainXibDescriptorList mMainXibDescriptorList


  @selectionControllerForGeneration mSelectionControllerListForGeneration
  @stringlist mPropertyClassList
  @transientExternTypeList mTransientPropertyTypeList
}

#-----------------------------------------------------------------------------------------------------------------------
#   CODE GENERATION
#-----------------------------------------------------------------------------------------------------------------------

proc generateCode
  ?let @string inXcodeProjectString
  ?let @generationStruct inGeneration
  ?let @string inSourceFile
{
  let outputDirectory = [inSourceFile stringByDeletingLastPathComponent]
  let projectName = [[inSourceFile lastPathComponent] stringByDeletingPathExtension]
  let fileOutputDirectory = outputDirectory + "/" + projectName
  @stringset generatedFileSet = {}
  for (fileGeneration) in inGeneration.mFileGenerationList do
    [fileGeneration generateCode !fileOutputDirectory !?generatedFileSet]
  end
  generateOutletClasses (
    !inGeneration.mNeededOutletClasses
    !fileOutputDirectory
    !?generatedFileSet
  )
  generateEBManagedObjectContext (
    !inGeneration.mEntityListForGeneration
    !fileOutputDirectory
    !?generatedFileSet
  )
  if inGeneration.mGenerateEBManagedDocumentSwift then
    generateEBManagedDocumentSwift (!fileOutputDirectory !?generatedFileSet)
  end
  generateSelectionControllers (
    !inGeneration.mSelectionControllerListForGeneration
    !fileOutputDirectory
    !?generatedFileSet
  )
  generateSwiftApplicationFiles (
    !fileOutputDirectory
    ![inGeneration.mEntityListForGeneration length] > 0
    !?generatedFileSet
  )
  generateValidationRoutineStubs (
    !fileOutputDirectory
    !inGeneration.mValidationStubRoutineListForGeneration
    !?generatedFileSet
  )
  generateStandardProperties (
    !fileOutputDirectory
    !inGeneration.mPropertyClassList
    !inGeneration.mTransientPropertyTypeList
    !?generatedFileSet
  )
  generateXcodeProject (
    !outputDirectory
    !inXcodeProjectString
    !generatedFileSet
    !projectName
  )
  generateTestFile (
    !inXcodeProjectString
    !projectName
    !inGeneration.mMainXibDescriptorList
    !outputDirectory
  )
}

#·······················································································································

filewrapper swift_sources in "../generation-templates/swift-sources" {
  "xib", "swift"
}{
}{
}

#·······················································································································

private proc generateSwiftApplicationFiles
  ?let @string inOutputDirectory
  ?let @bool inHasEntities
  ?!@stringset ioGeneratedFileSet
{
  @stringlist swiftFiles = {
    !"main",
    !"EBAllocationDebug",
    !"EBUndoManager",
    !"property-explorer",
    !"EBSignatureObserverProtocol",
    !"EBWeakEventSet",
    !"EBModelNotifierEvent",
    !"EBAbstractProperty",
    !"EBObserver",
    !"func-presentErrorWindow",
    !"func-checkOutletConnection",
    !"ReadOnlyAbstractGenericRelationshipProperty",
    !"ReadOnlyAbstractArrayProperty",
    !"ReadOnlyAbstractObjectProperty",
    !"EBSimpleController",
    !"EBTableCellView",
    !"EBTransientClassProperty",
    !"EBPreferencesClassProperty",
    !"EBStoredClassProperty",
    !"EBPropertyClassProxy",
    !"EBReadWriteClassProperty",
    !"EBReadOnlyClassProperty",
    !"ClassPropertyProtocol",
    !"BezierPathArray",
    !"extension-Data-ValuePropertyProtocol",
    !"extension-NSFont-ClassPropertyProtocol",
    !"extension-Date-ValuePropertyProtocol",
    !"extension-NSColor-ClassPropertyProtocol",
    !"extension-Bool-ValuePropertyProtocol",
    !"extension-Double-ValuePropertyProtocol",
    !"extension-NSBezierPath-ClassPropertyProtocol",
    !"EBValidationResult",
    !"EBUserClassNameProtocol",
    !"EBObject",
    !"extension-Int-ValuePropertyProtocol",
    !"extension-UInt32-ValuePropertyProtocol",
    !"extension-String-ValuePropertyProtocol",
    !"EBTransientEnumProperty",
    !"EBStoredEnumProperty",
    !"EBPropertyEnumProxy",
    !"EBReadWriteEnumProperty",
    !"EBReadOnlyEnumProperty",
    !"EBAbstractEnumProperty",
    !"EnumPropertyProtocol",
    !"EBEnumProtocol",
    !"EBTransientValueProperty",
    !"EBPreferencesValueProperty",
    !"EBStoredValueProperty",
    !"EBPropertyValueProxy",
    !"EBReadWriteValueProperty",
    !"EBReadOnlyValueProperty",
    !"ValuePropertyProtocol",
    !"extension-Data-Comparable",
    !"PropertyKind",
    !"EBSelection",
    !"func-defaultValidationFunction",
    !"multiple-binding-controllers",
    !"Application",
    !"model-events",
    !"outlet-events",
    !"file-format-binary",
    !"file-metadata-binary-format",
    !"file-format-text-utilities",
    !"file-metadata-get",
    !"file-format-text",
    !"file-metadata-text-format",
    !"file-format-utilities",
    !"file-operations-facade"
  }
  if inHasEntities then
    swiftFiles += !"EBManagedObject"
    swiftFiles += !"EBDataScanner"
    swiftFiles += !"EBGraphicManagedObject"
    swiftFiles += !"buildPDFimage"
  #--- EBGraphicView
    swiftFiles += !"EBScrollView-dragging-destination"
    swiftFiles += !"EBScrollView-placards"
    swiftFiles += !"EBScrollView"
    swiftFiles += !"EBFocusRingView"
    swiftFiles += !"EBGraphicView"
#    swiftFiles += !"EBGraphicView-binding-control-key-hilite-diameter"
    swiftFiles += !"EBGraphicView-binding-arrowKeyMagnitude"
    swiftFiles += !"EBGraphicView-binding-backColor"
    swiftFiles += !"EBGraphicView-binding-gridCrossColor"
    swiftFiles += !"EBGraphicView-binding-gridDisplayFactor"
    swiftFiles += !"EBGraphicView-binding-gridLineColor"
    swiftFiles += !"EBGraphicView-binding-gridStep"
    swiftFiles += !"EBGraphicView-binding-gridStyle"
    swiftFiles += !"EBGraphicView-binding-horizontalFlip"
    swiftFiles += !"EBGraphicView-binding-mouseGrid"
    swiftFiles += !"EBGraphicView-binding-overObjectsDisplay"
    swiftFiles += !"EBGraphicView-binding-shiftArrowKeyMagnitude"
    swiftFiles += !"EBGraphicView-binding-underObjectsDisplay"
    swiftFiles += !"EBGraphicView-binding-verticalFlip"
    swiftFiles += !"EBGraphicView-binding-xPlacardUnit"
    swiftFiles += !"EBGraphicView-binding-yPlacardUnit"
    swiftFiles += !"EBGraphicView-binding-zoom"
    swiftFiles += !"EBGraphicView-dragging-source"
    swiftFiles += !"EBGraphicView-draw"
    swiftFiles += !"EBGraphicView-guide"
    swiftFiles += !"EBGraphicView-issue"
    swiftFiles += !"EBGraphicView-key-down"
    swiftFiles += !"EBGraphicView-magnify-and-zoom"
    swiftFiles += !"EBGraphicView-menu-actions"
    swiftFiles += !"EBGraphicView-mouse-down-behaviours"
    swiftFiles += !"EBGraphicView-mouse-moved-exited"
    swiftFiles += !"EBGraphicView-mouse"
    swiftFiles += !"EBGraphicView-move-to-superview"
    swiftFiles += !"EBGraphicView-placards"
    swiftFiles += !"EBGraphicView-tool-tips"
    swiftFiles += !"EBGraphicView-tracking-areas"
    swiftFiles += !"EBGraphicViewControllerProtocol"
    swiftFiles += !"EBGraphicViewScaleProvider"
    swiftFiles += !"NSControl-extension-enable-binding"
  #--- Extensions
    swiftFiles += !"extension-CGPoint-NSPoint"
    swiftFiles += !"extension-CGRect-NSRect"
    swiftFiles += !"extension-CGSize-NSSize"
    swiftFiles += !"extension-Data"
    swiftFiles += !"extension-NSBezierPath"
    swiftFiles += !"extension-NSObject"
    swiftFiles += !"extension-NSTextView"
    swiftFiles += !"extension-String"
    swiftFiles += !"extension-UInt32"
 #--- Shapes
    swiftFiles += !"EBBezierPath"
    swiftFiles += !"EBLinePath"
    swiftFiles += !"EBShape"
  end
  @stringlist xibFiles = {!"EBAllocationDebug"}
  let fw = [filewrapper swift_sources]
  for (@string s) in swiftFiles do
    let fileName = s + ".swift"
    let contents = [fw textFileContentsAtPath !fileName]
    ioGeneratedFileSet += !fileName
    [@string generateFile
      !inOutputDirectory
      !fileName
      !contents
    ]
  end
  for (@string s) in xibFiles do
    let contents = [fw textFileContentsAtPath !s + ".xib"]
    let fileName = s + ".xib"
    ioGeneratedFileSet += !fileName
    [@string generateFile
      !inOutputDirectory
      !fileName
      !contents
    ]
  end
}

#·······················································································································

filewrapper standard_properties in "../generation-templates/standard-properties" {
}{
}{
  template stub "standard-properties-stub.swift.galgasTemplate"

  template scalarProperty "scalar-standard-property.swift.galgasTemplate"
    ?@string TYPE
    ?@bool TRANSIENT
    ?@string COMPARISON_METHOD

  template classProperty "class-standard-property.swift.galgasTemplate"
    ?@string CLASS_NAME
    ?@bool COMPARABLE
    ?@bool TRANSIENT
}

#·······················································································································

private proc generateStandardProperties
  ?let @string inOutputDirectory
  ?let @stringlist inPropertyClassList
  ?let @transientExternTypeList inTransientPropertyExternTypeList
  ?!@stringset ioGeneratedFileSet
{
  var contents = [filewrapper standard_properties.stub]
#--- Add scalar property types
  contents += [filewrapper standard_properties.scalarProperty !"UInt32" !false !""]
  contents += [filewrapper standard_properties.scalarProperty !"Int"    !false !""]
  contents += [filewrapper standard_properties.scalarProperty !"Bool"   !false !""]
  contents += [filewrapper standard_properties.scalarProperty !"Double" !false !""]
  contents += [filewrapper standard_properties.scalarProperty !"String" !false !"localizedStandardCompare"]
  contents += [filewrapper standard_properties.scalarProperty !"Data"   !false !""]
  contents += [filewrapper standard_properties.scalarProperty !"Date"   !false !""]
  contents += [filewrapper standard_properties.scalarProperty !"BezierPathArray" !false !""]
#--- Add class property types
  for (propertyClass) in inPropertyClassList do
    contents += [filewrapper standard_properties.classProperty !propertyClass !false !false]
  end
  for (propertyType isClass) in inTransientPropertyExternTypeList do
    if isClass then
      contents += [filewrapper standard_properties.classProperty !propertyType !false !true]
    else
      contents += [filewrapper standard_properties.scalarProperty !propertyType !true !""]
    end
  end
  contents += [filewrapper standard_properties.classProperty !"NSBezierPath" !false !false]
  contents += [filewrapper standard_properties.classProperty !"NSFont"  !false !false]
  contents += [filewrapper standard_properties.classProperty !"NSColor" !false !false]
#--- Generate file
  let fileName = "standard-properties.swift"
  ioGeneratedFileSet += !fileName
  [@string generateFile
    !inOutputDirectory
    !fileName
    !contents
  ]
}

#-----------------------------------------------------------------------------------------------------------------------
