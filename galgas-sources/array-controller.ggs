#-----------------------------------------------------------------------------------------------------------------------
#   AST
#-----------------------------------------------------------------------------------------------------------------------

class @arrayControllerDeclarationAST : @abstractDeclarationAST {
  public var @lstring mControllerName
  public var @arrayControllerBoundModelAST mModel
  public var @lstring mToManyPropertyName
}

#·······················································································································

list @arrayControllerBindingListAST {
  public var @lstring mControllerName
  public var @multipleBindingDescriptor mHiddenSelectionViewBindingDescriptor
}

#·······················································································································

enum @arrayControllerBoundModelAST {
  case rootToManyRelationship (@lstring rootEntityName)
  case selfToManyRelationship
}

#·······················································································································

override proc @arrayControllerDeclarationAST.enterInPrecedenceGraph (?!@declarationPrecedenceGraph ioGraph) {
  let node = @lstring (!self.mClassName.string + " " + self.mControllerName !self.mControllerName.location)
  [!?ioGraph addNode !node !self]
  [!?ioGraph addEdge !node !self.mClassName]
  switch self.mModel 
  case rootToManyRelationship (@lstring rootEntityName) :
    if rootEntityName.string != "" then
      [!?ioGraph addEdge !node !.new (!rootEntityName.string + " " + self.mToManyPropertyName !self.mToManyPropertyName.location)]
    end
  case selfToManyRelationship :
    [!?ioGraph addEdge !node !.new (!self.mClassName.string + " " + self.mToManyPropertyName !self.mToManyPropertyName.location)]
  end
}

#·······················································································································

override func @arrayControllerDeclarationAST.nodeKey() -> @lstring {
  result = @lstring (!self.mClassName.string + " " + self.mControllerName !self.mControllerName.location)
}

#-----------------------------------------------------------------------------------------------------------------------
#   SYNTAX
#-----------------------------------------------------------------------------------------------------------------------

syntax extension easyBindings_syntax {

  #·····················································································································
  
  rule <controller_declaration>(
            ?let @lstring inCurrentEntity
            ?let @lstring inRootEntity
            ?!@arrayControllerBindingListAST ioArrayControllerBindingListAST
            ?!@astDeclarationStruct ioDeclarationAST)
  {
    $arrayController$
    $controllerName$ (?let @lstring controllerName)
  #--- Model
    let @arrayControllerBoundModelAST model
    $:$
    select
      $root$
      model = .rootToManyRelationship (!rootEntityName: inRootEntity)
    or
      $self$
      model = .selfToManyRelationship
    end
    $.$
    $identifier$ (?let @lstring relationshipName)
  #--- Hidden binding ?
    select
    or
      $hidden$
       <booleanMultipleBindingExpression> (?let @abstractBooleanMultipleBindingExpressionAST bindingExpression)
      let hiddenSelectionViewBindingDescriptor = @multipleBindingDescriptor.binding (!expression:bindingExpression)
      ioArrayControllerBindingListAST += 
        !controllerName
        !hiddenSelectionViewBindingDescriptor
    end
    $;$
    ioDeclarationAST.mUnifiedDeclarationList += !@arrayControllerDeclarationAST (
      !inCurrentEntity
      !controllerName
      !model
      !relationshipName
    )
  }
  
  #·····················································································································

}

#-----------------------------------------------------------------------------------------------------------------------
#   CLASS AND PROPERTY SEMANTIC ANALYSIS                       
#-----------------------------------------------------------------------------------------------------------------------

override proc @arrayControllerDeclarationAST.firstAnalysisPhase (
       ?!@semanticContext ioSemanticContext
       ?!@generationStruct unused ioGeneration)
{
  with self.mClassName in !?ioSemanticContext.mClassMap 
    error message searchKey
  do
    let @actionMap controllerActions = {!["add" nowhere], !["remove" nowhere] }
    switch self.mModel
    case rootToManyRelationship (@lstring rootEntityName) :
      [ioSemanticContext.mClassMap searchKey !rootEntityName ?* ?let rootProperties ?2*]
      [rootProperties searchKey !self.mToManyPropertyName ?let classKind ?2*]
      switch classKind
      case property (2*) :
        error rootEntityName : "a toMany relationship is required here"
      case toMany (typeName * graphic *) :
        let kind = @propertyKind.arrayController (
          !typeName: typeName
          !graphic: graphic
        )
        [!?mPropertyMap insertKey !self.mControllerName !kind !controllerActions !false]
    #--- Code Generation
      mPropertyGenerationList += !@arrayControllerPropertyGeneration (
        !self.mControllerName.string
        !"rootObject." + self.mToManyPropertyName
        !self.mClassName
      )
      case toOne (5*) :
        error rootEntityName : "a toMany relationship is required here"
      case arrayController (2*) :
        error rootEntityName : "a toMany relationship is required here"
      case selectionController (*) :
        error rootEntityName : "a toMany relationship is required here"
      end
    case selfToManyRelationship :
      [mPropertyMap searchKey !self.mToManyPropertyName ?let classKind ?2*]
      switch classKind
      case property (2*) :
        error self.mToManyPropertyName : "a toMany relationship is required here"
      case toMany (typeName * graphic *) :
        let kind = @propertyKind.arrayController (
          !typeName: typeName
          !graphic: graphic
        )
        [!?mPropertyMap insertKey !self.mControllerName !kind !controllerActions !false]
    #--- Code Generation
      mPropertyGenerationList += !@arrayControllerPropertyGeneration (
        !self.mControllerName.string
        !self.mToManyPropertyName
        !self.mClassName
      )
      case toOne (5*) :
        error self.mToManyPropertyName : "a toMany relationship is required here"
      case arrayController (2*) :
        error self.mToManyPropertyName : "a toMany relationship is required here"
      case selectionController (*) :
        error self.mToManyPropertyName : "a toMany relationship is required here"
      end
    end
  end
}

#-----------------------------------------------------------------------------------------------------------------------
#   SECOND ANALYSIS PHASE
#-----------------------------------------------------------------------------------------------------------------------

override proc @arrayControllerDeclarationAST.thirdAnalysisPhase(
       ?!@semanticContext ioSemanticContext
       ?!@generationStruct ioGeneration)
{
  let @propertyMap boundModelPropertyMap
  switch self.mModel
  case rootToManyRelationship (@lstring rootEntityName) :
    [ioSemanticContext.mClassMap searchKey
       !rootEntityName
       ?*
       ?boundModelPropertyMap 
       ?2*
    ]
  case selfToManyRelationship :
    [ioSemanticContext.mClassMap searchKey
       !self.mClassName
       ?*
       ?boundModelPropertyMap 
       ?2*
     ]  
  end
  [boundModelPropertyMap searchKey
     !self.mToManyPropertyName
     ?let boundModelClassKind
     ?2*
  ]
#------------------------------------------------------------ Check colum bound models
  let @arrayControllerModelKind arrayControllerModelKind
  let @bool graphic
  let @string elementTypeName
  switch boundModelClassKind
  case property (2*) :
    error self.mToManyPropertyName
      : "a toMany property is required here"
      : graphic, arrayControllerModelKind, elementTypeName
  case toMany (typeName accessibility isGraphic *) :
    elementTypeName = typeName
    graphic = isGraphic
    arrayControllerModelKind = if [accessibility isTransient]
      then .transientArray
      else .entityArray
    end
    [ioSemanticContext.mClassMap searchKey !typeName ?* ?3*]
  case toOne (5*) :
    error self.mToManyPropertyName
      : "a toMany property is required here"
      : graphic, arrayControllerModelKind, elementTypeName
  case arrayController (2*) :
    error self.mToManyPropertyName
      : "a toMany property is required here"
      : graphic, arrayControllerModelKind, elementTypeName
  case selectionController (*) :
    error self.mToManyPropertyName
      : "a toMany property is required here"
      : graphic, arrayControllerModelKind, elementTypeName
  end
#---
  ioGeneration.mFileGenerationList += !@arrayControllerGeneration (
    !self.mClassName
    !self.mControllerName
    !"ReadWriteArrayOf_" + elementTypeName
    !arrayControllerModelKind
    !elementTypeName
    !graphic
  )
}


#-----------------------------------------------------------------------------------------------------------------------
#   CODE GENERATION                       
#-----------------------------------------------------------------------------------------------------------------------

class @arrayControllerPropertyGeneration : @propertyGeneration {
  public var @string mModelString
  public var @string mOwnerName
}

#·······················································································································

override func @arrayControllerPropertyGeneration.propertyDeclarationCode (?let @bool inPreferences
                                                            ?let @stringset unused inOverriddenTransients) -> @string {
  if inPreferences then
    result  = "//" + @string.stringWithSequenceOfCharacters  (!'·' !116) + "\n"
    result += "//   Array controller: " + self.mPropertyName + "\n"
    result += "//" + @string.stringWithSequenceOfCharacters  (!'·' !116) + "\n\n"
    result += "@MainAction let preferences_" + self.mPropertyName + " = Controller_" + self.mOwnerName + "_" + self.mPropertyName + " ()\n\n"
  else
    result  = "  //" + @string.stringWithSequenceOfCharacters  (!'·' !116) + "\n"
    result += "  //   Array controller: " + self.mPropertyName + "\n"
    result += "  //" + @string.stringWithSequenceOfCharacters  (!'·' !116) + "\n\n"
    result += "  final var " + self.mPropertyName + " = Controller_" + self.mOwnerName + "_" + self.mPropertyName + " ()\n\n"
  end
}

#·······················································································································

override func @arrayControllerPropertyGeneration.initCode() -> @string {
  result = ""
}

#·······················································································································

override func @arrayControllerPropertyGeneration.configurationCode (?let @bool unused inPreferences) -> @string {
  result  = "  //--- Array controller property: " + self.mPropertyName + "\n"
  result += "    self." + self.mPropertyName + ".bind_model (self." + self.mModelString + "_property, self.undoManager)\n"
}

#·······················································································································

override func @arrayControllerPropertyGeneration.populateExplorerWindowCode() -> @string {
  result  = "    //--- Array controller property: " + self.mPropertyName + "\n"
  result += "      self." + self.mPropertyName + ".addExplorer (name: \"" + self.mPropertyName + "\", y:&y, view:view)\n"
}

#-----------------------------------------------------------------------------------------------------------------------
#   GENERATION TYPES
#-----------------------------------------------------------------------------------------------------------------------

enum @arrayControllerModelKind {
  case entityArray
  case transientArray
}

#-----------------------------------------------------------------------------------------------------------------------

class @arrayControllerGeneration : @abstractFileGeneration {
  public var @string mOwnerName # document name, prefs name, ...
  public var @lstring mControllerName
  public var @string mModelTypeName
  public var @arrayControllerModelKind mArrayControllerModelKind
  public var @string mElementTypeName
  public var @bool mElementTypeIsGraphic
}

#·······················································································································

private filewrapper arrayControllerGenerationTemplate in "../generation-templates/controllers" {
}{
}{
  template arrayControllerImplementationInSwift "array-controller.swift.galgasTemplate"
    ?@string OWNER_NAME
    ?@string ARRAY_CONTROLLER_NAME
    ?@arrayControllerModelKind MODEL_KIND
    ?@string MODEL_TYPE_NAME
    ?@string ELEMENT_TYPE_NAME
    ?@bool ELEMENT_TYPE_IS_GRAPHIC
}

#-----------------------------------------------------------------------------------------------------------------------
#   GENERATION
#-----------------------------------------------------------------------------------------------------------------------

override proc @arrayControllerGeneration.generateCode(
    ?let @string inOutputDirectory
    ?toOne: @stringset unused inToOneEntities
    ?toMany: @stringset unused inToManyEntities
    ?generateClass_PreferencesArrayOf: @stringset unused inGenerateClass_PreferencesArrayOf
    ?!@stringset unused ioGeneratedFileSet)
{
#--- Build observed property set (for sorting and filtering)
  let s = [filewrapper arrayControllerGenerationTemplate.arrayControllerImplementationInSwift
    !self.mOwnerName
    !self.mControllerName
    !self.mArrayControllerModelKind
    !self.mModelTypeName
    !self.mElementTypeName
    !self.mElementTypeIsGraphic
  ]
  [@string generateFile
    !inOutputDirectory
    !"controller-array-" + self.mOwnerName + "-" +  self.mControllerName + ".swift"
    !s
  ]
}

#-----------------------------------------------------------------------------------------------------------------------
