#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @proxyDeclarationEX : @abstractSecondaryProperty {
  @lstring mProxyName
  @lstring mControllerName
  @lstring mPropertyName
}

#·······················································································································

class @proxyDeclarationAST : @abstractDeclarationAST {
  @lstring mProxyName
  @lstring mControllerName
  @lstring mPropertyName
}

#·······················································································································

override method @proxyDeclarationAST enterInPrecedenceGraph ?!@declarationPrecedenceGraph ioGraph {
  let node = @lstring.new {!mClassName.string + " " + mProxyName !mProxyName.location}
  [!?ioGraph addNode !node !self]
  [!?ioGraph addEdge !node !.new {!mClassName.string + " " + mControllerName !mControllerName.location}]
}

#·······················································································································

override getter @proxyDeclarationAST lkey -> @lstring {
  result = @lstring.new {!mClassName.string + " " + mProxyName !mProxyName.location}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension easyBindings_syntax {

  #·····················································································································
  
  rule <controller_declaration>
            ?let @lstring inCurrentEntity
            ?let @lstring unused inRootEntity
            ?!@secondaryPropertyList ioSecondaryPropertyList
            ?!@astDeclarationStruct ioDeclarationAST
  {
    $proxy$
    $identifier$ ?let @lstring proxyName
    @arrayControllerAttributListAST arrayControllerAttributListAST = {}
    $:$
    $self$
    $.$
    $identifier$ ?let @lstring controllerName
    $.$
    $identifier$ ?let @lstring propertyName
    $;$
    ioSecondaryPropertyList += !@proxyDeclarationEX.new {
      !proxyName
      !controllerName
      !propertyName
    }
    ioDeclarationAST.mUnifiedDeclarationList += !@proxyDeclarationAST.new {
      !inCurrentEntity
      !proxyName
      !controllerName
      !propertyName
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   CLASS AND PROPERTY SEMANTIC ANALYSIS                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @proxyDeclarationAST firstAnalysisPhase
       ?!@semanticContext ioSemanticContext
       ?!@generationStruct unused ioGeneration
{
  with mClassName in !?ioSemanticContext.mClassMap 
    error message searchKey
  do
    [mPropertyMap searchKey !mControllerName ?let classKind ?*]
    switch classKind
    case property (2*) :
      error mControllerName : "an array controller is required here"
    case toMany (4*) :
      error mControllerName : "an array controller is required here"
    case toOne (3*) :
      error mControllerName : "an array controller is required here"
    case arrayController (typeName 2*) :
      [ioSemanticContext.mClassMap searchKey !typeName ?* ?let propertyMap ?2*]
      [propertyMap searchKey !mPropertyName ?2*]
    case selectionController (*) :
      error mControllerName : "an array controller is required here"
    end
  end
}







#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @proxyDeclarationEX typeInventory
  ?!@unifiedTypeMap unused ioUnifiedTypeMap
{
}

#·······················································································································

override method @proxyDeclarationEX tryToDefineSecondaryProperty
  ?!@semanticContextEX ioSemanticContext
  ?let @observablePropertyMap unused inRootObservableProperties
  ?!@observablePropertyMap ioObservableProperties
  ?!@secondaryPropertyList ioUnsolvedProperties
  ?!@simpleStoredPropertyListForGenerationEX ioSimpleStoredPropertyListForGeneration
{
  if [ioObservableProperties hasKey !mControllerName] then
    [ioObservableProperties searchKey
      !mControllerName
      ?let kind
      ?3*
    ]
    switch kind 
    case property (2*) :
      error mControllerName : "an array controller is required here"
    case toMany (4*) :
      error mControllerName : "an array controller is required here"
    case toOne (3*) :
      error mControllerName : "an array controller is required here"
    case arrayController (entityName 2*) :
      [ioSemanticContext.mEntityObservablePropertyMap searchKey
        !entityName
        ?let observablePropertyMap
        ?*
      ]
      [observablePropertyMap searchKey
        !mPropertyName
        ?let kind
        ?3*
      ]
      switch kind 
      case property (type *) :
        [!?ioObservableProperties insertKey
          !mProxyName
          !.property {!type: type !accessibility: .proxy}
          !""
          !{}
          !false
        ]
      #--- Code Generation
        ioSimpleStoredPropertyListForGeneration +=
          !type
          !mPropertyName.string
          !true
          !""
          !false
      case toMany (typeName * graphic isEntity) :
        [!?ioObservableProperties insertKey
          !mProxyName
          !.toMany {!typeName: typeName !accessibility: .proxy !graphic: graphic !isEntity: isEntity}
          !""
          !{}
          !false
        ]
      case toOne (3*) :
        error mPropertyName : "<<toOne property>>" 
      case arrayController (3*) :
        error mPropertyName : "a property is required here"
      case selectionController (*) :
        error mPropertyName : "a property is required here"
      end
    case selectionController (*) :
      error mControllerName : "an array controller is required here"
    end  
  else
    ioUnsolvedProperties += !self
  end
}

#·······················································································································

override method @proxyDeclarationEX secondaryPropertySemanticAnalysisEX
  ?let @string unused inOwnerName
  ?let @string unused inRootEntityName
  ?let @observablePropertyMap unused inRootObservableProperties
  ?let @semanticContextEX unused inSemanticContext
  ?let @observablePropertyMap unused inObservableProperties
  ?!@selectionControllerForGeneration unused ioSelectionControllerForGeneration
  ?!@stringset unused ioNeededOutletClasses
{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
