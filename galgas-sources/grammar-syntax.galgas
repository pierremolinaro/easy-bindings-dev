#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   GRAMMAR                                                                                                            *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

grammar easyBindings_grammar "LL1" {
  syntax easyBindings_syntax
  <start_symbol>
    ?userDefined:let @bool inIsUserDefined
    ?!@astDeclarationStruct ioDeclarationAST
    !@location outEndOfFile
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   AST                                                                                                                *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

abstract class @astDeclaration {
  @bool mUserDefined
}

#......................................................................................................................*

list @astDeclarationList {
  @astDeclaration mDeclaration
}

#......................................................................................................................*

struct @astDeclarationStruct {
  @astDeclarationList mDeclarationList
  @outletClassDeclarationList mOutletClassDeclarationList
  @bindingSpecificationListMap mBindingSpecificationListMap
}

#......................................................................................................................*

abstract class @abstractItem {
}

#......................................................................................................................*

list @itemList {
  @abstractItem mItem
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   SYNTAX                                                                                                             *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

syntax easyBindings_syntax (easyBindings_lexique) {

  #....................................................................................................................*
  
  rule <start_symbol>
    ?userDefined:let @bool inIsUserDefined
    ?!@astDeclarationStruct ioDeclarationAST
    !@location outEndOfFile
  {
    repeat
    while
      $include$
      $literal_string$ ?var @lstring filePath
      $;$
      let sourceFile = @lstring.new {
        ![filePath.string absolutePathFromPath ![@string.stringWithSourceFilePath stringByDeletingLastPathComponent]]
        !filePath.location
      }
      grammar easyBindings_grammar in sourceFile
        !userDefined:inIsUserDefined
        !?ioDeclarationAST
        ?*
    while
      <enum_declaration> !inIsUserDefined !?ioDeclarationAST
    while
      <entity_declaration>  !inIsUserDefined  !?ioDeclarationAST
    while
      <preferences_declaration> !inIsUserDefined !?ioDeclarationAST
    while
      <document_declaration> !inIsUserDefined !?ioDeclarationAST
    while
      <outlet_class_declaration> !inIsUserDefined !?ioDeclarationAST.mOutletClassDeclarationList
    while
      <binding_specification> !inIsUserDefined !?ioDeclarationAST.mBindingSpecificationListMap
    end
    outEndOfFile = @location.here
  }

  #....................................................................................................................*

}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#    TYPE INVENTORY                                                                                                    *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

abstract method @abstractItem typeInventory
  ?@string inDependencyGraphPrefix # i.e. prefs.preferencesName.
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ?!@transientDependencyGraph ioTransientDependencyGraph

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#    SEMANTIC ANALYSIS                                                                                                 *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

abstract method @abstractItem buildObservablePropertyMap
  ?let @unifiedTypeMap inUnifiedTypeMap
  ?!@observablePropertyMap ioObservableProperties

#......................................................................................................................*

abstract method @abstractItem semanticAnalysis
  ?let @string inOwnerName
  ?let @observablePropertyMap inRootObservableProperties
  ?let @semanticContext inSemanticContext
  ?let @observablePropertyMap inObservableProperties
  ?let @arrayControllerMap inArrayControllerMap
  ?!@transientDefinitionListForGeneration ioTransientDefinitionListForGeneration

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
