#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#  AST                                                                                                                 *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

list @observablePropertyList {
  @abstractObservablePropertyAST mObservableProperty
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

list @regularBindingList {
  @lstring mBindingName
  @observablePropertyList mObservablePropertyList
  @bindingOptionList mBindingOptionList
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

list @outletDeclarationList {
  @lstring mOutletType
  @lstring mOutletName
  @runActionDescriptor mRunDescriptor
  @enabledBindingDescriptor mEnabledBindingDescriptor
  @regularBindingList mRegularBindingList
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#  SYNTAX                                                                                                              *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

syntax extension easyBindings_syntax {

  rule <outlet_declaration>
    ?!@outletDeclarationList ioOutletDeclarationList
  {
    $outlet$
    $Identifier$ ?let outletTypeName
    $identifier$ ?let outletName
  #--- Run
    var runActionDescriptor = @runActionDescriptor.noAction 
    var enabledBindingDescriptor = @enabledBindingDescriptor.noEnabledBinding
    @regularBindingList regularBindingList = {}
    repeat
    while
      $run$
      if runActionDescriptor != @runActionDescriptor.noAction then
        error @location.here : "duplicated $run binding"
      end
      @lstring runTargetName
      select
        $self$
        runTargetName = @lstring.new {!"self" !.here}
      or
        $identifier$ ?runTargetName
      end
      $.$
      $identifier$ ?let @lstring runActionName
      runActionDescriptor = @runActionDescriptor. action { !target:runTargetName !action:runActionName}
  #--- Enabled
    while
      $enabled$
      if enabledBindingDescriptor != @enabledBindingDescriptor. noEnabledBinding then
        error @location.here : "duplicated $enabled binding"
      end
      <booleanMultipleBindingExpression> ?let @abstractBooleanMultipleBindingExpressionAST bindingExpression
      enabledBindingDescriptor = @enabledBindingDescriptor.enabledBinding {!expression:bindingExpression}
  #--- Regular binding
    while
      $bindingName$ ?let @lstring bindingName
      @observablePropertyList observablePropertyList = {}
      repeat
        <observable_property> ?let @abstractObservablePropertyAST observableProperty
        observablePropertyList += !observableProperty
      while
        $,$
      end
      <binding_option_list> ?let bindingOptions
      regularBindingList +=
        !bindingName
        !observablePropertyList
        !bindingOptions
    end
  #---
    $;$
    ioOutletDeclarationList +=
      !outletTypeName
      !outletName
      !runActionDescriptor
      !enabledBindingDescriptor
      !regularBindingList
  }
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#  SEMANTICS                                                                                                           *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

list @outletBindingModelList {
  @unifiedTypeMap-proxy mModelTypeProxy
  @bool mModelIsTransient
  @location mErrorLocation
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

proc analyzeOutlets
  ?let @unifiedTypeMap inUnifiedTypeMap
  ?let @outletClassMap inOutletClassMap
  ?let @bindingSpecificationMap inBindingSpecificationMap
  ?let @lstring inTypeName
  ?let @typeKind unused inTypeKind
  ?let @unifiedTypeMap-proxy unused inSuperType
  ?let @unifiedTypeMap-proxy inRootEntityType
  ?let @decoratedAttributeMap unused decoratedAttributeMap
  ?let @decoratedTransientMap unused decoratedTransientMap
  ?let @decoratedOutletMap decoratedOutletMap
  ?let @decoratedObservablePropertyMap inCurrentObservablePropertyMap
  ?let @decoratedEntityRelationshipMap unused inCurrentRelationshipMap
  ?let @decoratedObservablePropertyMap unused inAllObservablePropertyMap
  ?let @actionMap inActionMap
  ?let @lstringlist unused inEnumConstantList
  ?let @enumConstantMap unused inEnumConstantMap
  ?let @arrayControllerMap inArrayControllerMap
  ?!@structForGeneration ioGeneration
  !@regularBindingsGenerationList outRegularBindingsGenerationList
  !@multipleBindingGenerationList outMultipleBindingGenerationList
  !@targetActionList outTargetActionList
{
#-------------------------------------------- Outlets
  outRegularBindingsGenerationList = {}
  outTargetActionList = {}
  outMultipleBindingGenerationList = {}
  for () outlet_ in decoratedOutletMap do
    [inOutletClassMap searchKey !outlet_mOutletTypeName ?let @bool handlesRunAction]
    ioGeneration.mNeededOutletClasses += !outlet_mOutletTypeName.string
  #--- run
    switch outlet_mRunActionDescriptor
    case noAction :
    case action (@lstring target @lstring action) :
      if not handlesRunAction then
        error outlet_mOutletTypeName : "the '" + outlet_mOutletTypeName + "' type does not handle run action"
      elsif target.string == "self" then
        [inActionMap searchKey !action]
        outTargetActionList += !outlet_lkey.string !"self" !action.string
      else # It is a controller
        [inArrayControllerMap searchKey !target ?3* ?let @actionMap arrayControllerActionMap ?3*]
        [arrayControllerActionMap searchKey !action]
        outTargetActionList += !outlet_lkey.string !target.string !action.string
      end
    end
  #--- Enabled
    switch outlet_mEnabledBindingDescriptor
    case noEnabledBinding :
    case enabledBinding (@abstractBooleanMultipleBindingExpressionAST expression) :
      [expression analyzeExpressionForEnabledBinding
        !inTypeName.string
        !inUnifiedTypeMap
        !inArrayControllerMap
        !inCurrentObservablePropertyMap
        !inRootEntityType
        ?let @abstractBooleanMultipleBindingExpressionForGeneration enableExpression
      ]
      outMultipleBindingGenerationList +=
        !outlet_lkey.string
        !"enabled"
        !enableExpression
    end
  #--- Regular bindings
    for () in outlet_mRegularBindingList do
    #--- Analyse model
      var @outletBindingModelList boundPropertyTypeList = {}
      var @stringlist boundObjectNameList = {}
      for () in mObservablePropertyList do
        [mObservableProperty analyzeBoundObservablePropertyForSimpleBinding
          !inUnifiedTypeMap
          !inArrayControllerMap
          !inTypeName.string
          !inCurrentObservablePropertyMap
          !inRootEntityType
          !?boundPropertyTypeList
          !?boundObjectNameList
        ]
      end
    #--- Analyze outlet binding
      [inBindingSpecificationMap searchKey !outlet_mOutletTypeName ?let @outletBindingSpecificationMap bindingMap]
      [bindingMap searchKey
        !mBindingName
        ?let @outletBindingSpecificationModelList outletBindingSpecificationModelList
        ?let @controllerBindingOptionDecoratedList controllerBindingOptionDecoratedList
      ]
      if [boundPropertyTypeList length] != [outletBindingSpecificationModelList length] then
        error mBindingName : [[outletBindingSpecificationModelList length] string] + " model(s) required for this binding"
      else
        for () required_ in outletBindingSpecificationModelList, () found_ in boundPropertyTypeList do
          if required_mModelShouldBeWritableProperty && found_mModelIsTransient then
            error found_mErrorLocation : "the model is transient and the binding requires an writable model"
          end
          if [required_mModelTypeProxy typeNameForBindingTypeCheck] != [found_mModelTypeProxy typeNameForBindingTypeCheck] then
            error found_mErrorLocation : "the model type should be " + [required_mModelTypeProxy typeNameForBindingTypeCheck]
          end
        end
      end
    #--- Check options
      var bindingOptionString = ""
      if [controllerBindingOptionDecoratedList length] != [mBindingOptionList length] then
        @string s
        if [controllerBindingOptionDecoratedList length] == 0 then
          s = "this binding has no option"
        else 
          s = "this binding requires the following options:"
          for () in controllerBindingOptionDecoratedList do
            s += "\n  - " + mOptionName + " : " + [mOptionType key]
          end
        end
        error mBindingName : s
      else
        for () controller_ in controllerBindingOptionDecoratedList, () binding_ in mBindingOptionList do
          if controller_mOptionName.string != binding_mOptionName.string then
            error binding_mOptionName : "the option name should be '" + controller_mOptionName + "'"
          end
          [binding_mOptionValue analyzeDefaultValueType 
            !{!controller_mOptionType}
            ?let @string optionValueAsString
          ]
          bindingOptionString += ", " + controller_mOptionName.string + ":" + optionValueAsString
        end
      end
    #--- Generate binding
      outRegularBindingsGenerationList +=
        !outlet_lkey.string
        !mBindingName.string
        !boundObjectNameList
        !bindingOptionString
    end
  end
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
# analyzeBoundObservablePropertyForSimpleBinding                                                                       *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

#! analyzeBoundObservablePropertyForSimpleBinding

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

abstract method @abstractObservablePropertyAST analyzeBoundObservablePropertyForSimpleBinding
  ?let @unifiedTypeMap inUnifiedTypeMap
  ?let @arrayControllerMap inArrayControllerMap
  ?let @string inCurrentTypeName
  ?let @decoratedObservablePropertyMap inObservablePropertyMap
  ?let @unifiedTypeMap-proxy inRootEntityType
  ?!@outletBindingModelList ioBoundPropertyTypeList
  ?!@stringlist ioBoundObjectNameList

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

override method @selfObservablePropertyAST analyzeBoundObservablePropertyForSimpleBinding
  ?let @unifiedTypeMap unused inUnifiedTypeMap
  ?let @arrayControllerMap unused inArrayControllerMap
  ?let @string unused inCurrentTypeName
  ?let @decoratedObservablePropertyMap inObservablePropertyMap
  ?let @unifiedTypeMap-proxy unused inRootEntityType
  ?!@outletBindingModelList ioBoundPropertyTypeList
  ?!@stringlist ioBoundObjectNameList
{
  [inObservablePropertyMap searchKey
    !mSelfObservablePropertyName
    ?let @unifiedTypeMap-proxy propertyType
    ?let modelIsTransient
    ?* #?@lstring propertySignature
    ?let @bool isCollection
  ]
  if isCollection then
    error mSelfObservablePropertyName : "the observable property should not be a collection"
  end
  ioBoundPropertyTypeList += !propertyType !modelIsTransient !mSelfObservablePropertyName.location
  ioBoundObjectNameList += !"self." + mSelfObservablePropertyName
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

override method @rootObservablePropertyAST analyzeBoundObservablePropertyForSimpleBinding
  ?let @unifiedTypeMap inUnifiedTypeMap
  ?let @arrayControllerMap unused inArrayControllerMap
  ?let @string unused inCurrentTypeName
  ?let @decoratedObservablePropertyMap unused inObservablePropertyMap
  ?let @unifiedTypeMap-proxy inRootEntityType
  ?!@outletBindingModelList ioBoundPropertyTypeList
  ?!@stringlist ioBoundObjectNameList
{
  [[inRootEntityType mObservablePropertyMap] searchKey
    !mRootObservablePropertyName
    ?let @unifiedTypeMap-proxy propertyType
    ?let modelIsTransient
    ?* #?@lstring propertySignature
    ?let @bool isCollection
  ]
  if isCollection & not mNamesCountOption then
    error mRootObservablePropertyName : "the observable property should not be a collection"
  elsif mNamesCountOption & not isCollection then
    error mRootObservablePropertyName : "the observable property should be a collection"
  end
  if mNamesCountOption then
    ioBoundObjectNameList += !"rootObject." + mRootObservablePropertyName + ".count"  
    ioBoundPropertyTypeList +=
      !@unifiedTypeMap-proxy.searchKey { !inUnifiedTypeMap !["Integer" nowhere]}
      !true # Model is transient
      !mRootObservablePropertyName.location
  else
    ioBoundObjectNameList += !"rootObject." + mRootObservablePropertyName
    ioBoundPropertyTypeList += !propertyType !modelIsTransient !mRootObservablePropertyName.location
  end
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

override method @preferenceObservablePropertyAST analyzeBoundObservablePropertyForSimpleBinding
  ?let @unifiedTypeMap inUnifiedTypeMap
  ?let @arrayControllerMap unused inArrayControllerMap
  ?let @string unused inCurrentTypeName
  ?let @decoratedObservablePropertyMap unused inObservablePropertyMap
  ?let @unifiedTypeMap-proxy unused inRootEntityType
  ?!@outletBindingModelList ioBoundPropertyTypeList
  ?!@stringlist ioBoundObjectNameList
{
#--- Get preference type
  [inUnifiedTypeMap searchKey
    !mPreferenceName
    ?let @typeKind typeKind
    ?5*
    ?let @decoratedObservablePropertyMap observablePropertyMap
    ?5*
  ]
  if typeKind != @typeKind. preferencesType then
    error mPreferenceName : "there is no '" + mPreferenceName + "' preferences"
  end
#---    
  [observablePropertyMap searchKey
    !mPreferenceObservablePropertyName
    ?let @unifiedTypeMap-proxy propertyType
    ?let modelIsTransient
    ?* #?@lstring propertySignature
    ?let @bool isCollection
  ]
  if isCollection then
    error mPreferenceObservablePropertyName : "the observable property should not be a collection"
  end
  ioBoundPropertyTypeList += !propertyType !modelIsTransient !mPreferenceObservablePropertyName.location
  ioBoundObjectNameList += !"g_" + mPreferenceName + "!." + mPreferenceObservablePropertyName
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

override method @arrayControllerObservablePropertyAST analyzeBoundObservablePropertyForSimpleBinding
  ?let @unifiedTypeMap unused inUnifiedTypeMap
  ?let @arrayControllerMap inArrayControllerMap
  ?let @string unused inCurrentTypeName
  ?let @decoratedObservablePropertyMap unused inObservablePropertyMap
  ?let @unifiedTypeMap-proxy unused inRootEntityType
  ?!@outletBindingModelList ioBoundPropertyTypeList
  ?!@stringlist ioBoundObjectNameList
{
#--- Get preference type
  [inArrayControllerMap searchKey
    !mArrayControllerName
    ?* # let @abstractObservablePropertyAST boundModel
    ?3*
    ?let @decoratedObservablePropertyMap arrayControllerObservablePropertyMap
    ?2*
  ]
#---    
  [arrayControllerObservablePropertyMap searchKey
    !mArrayControllerObservablePropertyName
    ?let @unifiedTypeMap-proxy propertyType
    ?let modelIsTransient
    ?* #?@lstring propertySignature
    ?let @bool isCollection
  ]
  if isCollection then
    error mArrayControllerObservablePropertyName : "the observable property should not be a collection"
  end
  ioBoundPropertyTypeList += !propertyType !modelIsTransient !mArrayControllerName.location
  ioBoundObjectNameList += !mArrayControllerName.string
}

#----------------------------------------------------------------------------*
# analyzeExpressionForEnabledBinding                                         *
#----------------------------------------------------------------------------*

#! analyzeExpressionForEnabledBinding

#----------------------------------------------------------------------------*

abstract method @abstractBooleanMultipleBindingExpressionAST analyzeExpressionForEnabledBinding
  ?let @string inSelfTypeName
  ?let @unifiedTypeMap inUnifiedTypeMap
  ?let @arrayControllerMap inArrayControllerMap
  ?let @decoratedObservablePropertyMap inCurrentObservablePropertyMap
  ?let @unifiedTypeMap-proxy inRootEntityType
  !@abstractBooleanMultipleBindingExpressionForGeneration outEnableExpression

#----------------------------------------------------------------------------*

override method @observablePropertyAsEnableBindingExpressionAST analyzeExpressionForEnabledBinding
  ?let @string inSelfTypeName
  ?let @unifiedTypeMap inUnifiedTypeMap
  ?let @arrayControllerMap inArrayControllerMap
  ?let @decoratedObservablePropertyMap inCurrentObservablePropertyMap
  ?let @unifiedTypeMap-proxy inRootEntityType
  !@abstractBooleanMultipleBindingExpressionForGeneration outEnableExpression
{
  [mProperty analyzeBoundObservablePropertyForEnabledBinding
    !inSelfTypeName
    !inUnifiedTypeMap
    !inArrayControllerMap
    !inCurrentObservablePropertyMap
    !inRootEntityType
    ?outEnableExpression
  ]
}

#----------------------------------------------------------------------------*

override method @negateBooleanMultipleBindingExpressionAST analyzeExpressionForEnabledBinding
  ?let @string inSelfTypeName
  ?let @unifiedTypeMap inUnifiedTypeMap
  ?let @arrayControllerMap inArrayControllerMap
  ?let @decoratedObservablePropertyMap inCurrentObservablePropertyMap
  ?let @unifiedTypeMap-proxy inRootEntityType
  !@abstractBooleanMultipleBindingExpressionForGeneration outEnableExpression {
  [mBinding analyzeExpressionForEnabledBinding
    !inSelfTypeName
    !inUnifiedTypeMap
    !inArrayControllerMap
    !inCurrentObservablePropertyMap
    !inRootEntityType
    ?var @abstractBooleanMultipleBindingExpressionForGeneration expression
  ]
  outEnableExpression = @negateBooleanMultipleBindingExpressionForGeneration.new {!expression}
}

#----------------------------------------------------------------------------*

override method @orBooleanMultipleBindingExpressionAST analyzeExpressionForEnabledBinding
  ?let @string inSelfTypeName
  ?let @unifiedTypeMap inUnifiedTypeMap
  ?let @arrayControllerMap inArrayControllerMap
  ?let @decoratedObservablePropertyMap inCurrentObservablePropertyMap
  ?let @unifiedTypeMap-proxy inRootEntityType
  !@abstractBooleanMultipleBindingExpressionForGeneration outEnableExpression
 {
  [mLeftBinding analyzeExpressionForEnabledBinding
    !inSelfTypeName
    !inUnifiedTypeMap
    !inArrayControllerMap
    !inCurrentObservablePropertyMap
    !inRootEntityType
    ?var @abstractBooleanMultipleBindingExpressionForGeneration leftExpression
  ]
  [mRightBinding analyzeExpressionForEnabledBinding
    !inSelfTypeName
    !inUnifiedTypeMap
    !inArrayControllerMap
    !inCurrentObservablePropertyMap
    !inRootEntityType
    ?var @abstractBooleanMultipleBindingExpressionForGeneration rightExpression
  ]
  outEnableExpression = @orBooleanMultipleBindingExpressionForGeneration. new {!leftExpression !rightExpression}
}

#----------------------------------------------------------------------------*

override method @andBooleanMultipleBindingExpressionAST analyzeExpressionForEnabledBinding
  ?let @string inSelfTypeName
  ?let @unifiedTypeMap inUnifiedTypeMap
  ?let @arrayControllerMap inArrayControllerMap
  ?let @decoratedObservablePropertyMap inCurrentObservablePropertyMap
  ?let @unifiedTypeMap-proxy inRootEntityType
  !@abstractBooleanMultipleBindingExpressionForGeneration outEnableExpression
{
  [mLeftBinding analyzeExpressionForEnabledBinding
    !inSelfTypeName
    !inUnifiedTypeMap
    !inArrayControllerMap
    !inCurrentObservablePropertyMap
    !inRootEntityType
    ?var @abstractBooleanMultipleBindingExpressionForGeneration leftExpression
  ]
  [mRightBinding analyzeExpressionForEnabledBinding
    !inSelfTypeName
    !inUnifiedTypeMap
    !inArrayControllerMap
    !inCurrentObservablePropertyMap
    !inRootEntityType
    ?var @abstractBooleanMultipleBindingExpressionForGeneration rightExpression
  ]
  outEnableExpression = @andBooleanMultipleBindingExpressionForGeneration. new {!leftExpression !rightExpression}
}

#----------------------------------------------------------------------------------------------------------------------*
#   GENERATION                                                                                                         *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

list @regularBindingsGenerationList {
  @string mOutletName
  @string mBindingName
  @stringlist mBoundObjectStringList
  @string mBindingOptionsString
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

list @multipleBindingGenerationList {
  @string mOutletName
  @string mBindingName
  @abstractBooleanMultipleBindingExpressionForGeneration mBoundObjectExpression
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

