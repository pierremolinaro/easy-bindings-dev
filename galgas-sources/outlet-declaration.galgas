#-----------------------------------------------------------------------------------------------------------------------
#  AST    
#-----------------------------------------------------------------------------------------------------------------------

list @bindingOptionList {
  @lstring mOptionName
  @abstractDefaultValue mOptionValue
}

#·······················································································································

enum @tableValueBinding {
  case noTableValueBinding
  case tableValueBinding (@lstring controllerName)
}

#·······················································································································

enum @graphicController {
  case none
  case defined (@lstring controller @lstring propertyName)
}

#·······················································································································

list @outletDeclarationList {
  @lstring mOutletTypeName
  @lstring mOutletName
  @tableValueBinding mTableValueBindingDescriptor
  @runActionDescriptor mRunDescriptor
  @multipleBindingDescriptor mEnabledBindingDescriptor
  @multipleBindingDescriptor mHiddenBindingDescriptor
  @regularBindingList mRegularBindingList
  @graphicController mGraphicController
}

#-----------------------------------------------------------------------------------------------------------------------
#  SYNTAX 
#-----------------------------------------------------------------------------------------------------------------------

syntax extension easyBindings_syntax {

#·······················································································································

  rule <outlet_declaration> ?!@outletDeclarationList ioOutletDeclarationList {
    $outlet$
    $Identifier$ ?let outletTypeName
    $identifier$ ?let outletName
    var tableValueBinding = @tableValueBinding.noTableValueBinding 
    var runActionDescriptor = @runActionDescriptor.noAction 
    var enabledBindingDescriptor = @multipleBindingDescriptor.noBinding
    var hiddenBindingDescriptor = @multipleBindingDescriptor.noBinding
    var graphicController = @graphicController.none
    @regularBindingList regularBindingList = {}
    repeat
    while
      $tableValue$
      if tableValueBinding != .noTableValueBinding then
        error .here : "duplicated $tableValue binding"
      end
      $controllerName$ ?let @lstring controllerName
      tableValueBinding = .tableValueBinding {!controllerName:controllerName}
    while
      $run$
      if runActionDescriptor != .noAction then
        error .here : "duplicated $run binding"
      end
      @lstring runTargetName
      select
        runTargetName = @lstring.new {!"self" !.here}
      or
        $controllerName$ ?runTargetName
        $.$
      end
      $identifier$ ?let @lstring runActionName
      runActionDescriptor = .action {!target:runTargetName !action:runActionName}
  #--- Enabled
    while
      $enabled$
      if enabledBindingDescriptor != .noBinding then
        error .here : "duplicated $enabled binding"
      end
      <booleanMultipleBindingExpression> ?let @abstractBooleanMultipleBindingExpressionAST bindingExpression
      enabledBindingDescriptor = .binding {!expression:bindingExpression}
  #--- Hidden
    while
      $hidden$
      if hiddenBindingDescriptor != .noBinding then
        error .here : "duplicated $hidden binding"
      end
      <booleanMultipleBindingExpression> ?let @abstractBooleanMultipleBindingExpressionAST bindingExpression
      hiddenBindingDescriptor = .binding {!expression:bindingExpression}
  #--- Regular binding
    while
      $bindingName$ ?let @lstring bindingName
      @observablePropertyList observablePropertyList = {}
      repeat
        <observable_property> ?let @observablePropertyAST observableProperty
        observablePropertyList += !observableProperty
      while
        $,$
      end
      <binding_option_list> ?let bindingOptions
      regularBindingList +=
        !bindingName
        !observablePropertyList
        !bindingOptions
  #--- Graphic controller binding
    while
      $graphicController$
      $controllerName$ ?let @lstring graphicControllerName
      @lstring propertyName
      select
        propertyName = ["" here]
      or
        $.$
        $identifier$ ?propertyName
      end
      if [graphicController isNone] then
        graphicController = .defined {!controller:graphicControllerName !propertyName: propertyName}
      else
        error graphicControllerName : "binding already defined" ;
      end   
    end
  #---
    $;$
    ioOutletDeclarationList +=
      !outletTypeName
      !outletName
      !tableValueBinding
      !runActionDescriptor
      !enabledBindingDescriptor
      !hiddenBindingDescriptor
      !regularBindingList
      !graphicController
  }
  
  #·······················································································································

}

#-----------------------------------------------------------------------------------------------------------------------
#  SEMANTICS                              
#-----------------------------------------------------------------------------------------------------------------------

list @outletBindingModelList {
  @propertyKind mKind
  @location mErrorLocation
}

#·······················································································································

list @tableViewBindingGenerationList {
  @string mTableValueBindingOutletName
  @string mTableValueBindingControllerName
}

#·······················································································································

list @ebViewGraphicControllerBindingGenerationList {
  @string mEBViewOutletName
  @string mArrayControllerControllerName
}

#·······················································································································

proc analyzeOutlets
  ?let @propertyMap inRootObservablePropertyMap
  ?let @propertyMap inPreferencesPropertyMap
  ?let @string unused inRootEntityName
  ?let @semanticContext inSemanticContext
  ?let @outletDeclarationList inOutletDeclarationList
  ?let @propertyMap inObservablePropertyMap
  ?let @actionMap inActionMap
  ?let @string inReceiverSwiftTypeName
  ?!@generationStruct ioGeneration
  !@regularBindingsGenerationList outRegularBindingsGenerationList
  !@multipleBindingGenerationList outMultipleBindingGenerationList
  !@actionBindingListForGeneration outTargetActionList
  !@decoratedOutletMap outletMap
  !@tableViewBindingGenerationList outTableViewBindingGenerationList
  !@ebViewGraphicControllerBindingGenerationList outEBViewGraphicControllerBindingGenerationList
{
  outRegularBindingsGenerationList = {}
  outTargetActionList = {}
  outMultipleBindingGenerationList = {}
  outletMap = {}
  outTableViewBindingGenerationList = {}
  outEBViewGraphicControllerBindingGenerationList = {}
  for () outlet_ in inOutletDeclarationList do
    [!?outletMap insertKey !outlet_mOutletName !outlet_mOutletTypeName.string]
    [inSemanticContext.mOutletClassMap searchKey
      !outlet_mOutletTypeName
      ?*
      ?let @bool handlesRunAction
      ?let @bool handlesTableViewBinding
      ?let @bool handlesEnabledBinding
      ?let @bool handlesHiddenBinding
      ?let @bool handleGraphicControllerBinding
      ?let @bool outletClassIsUserDefined
    ]
    if not outletClassIsUserDefined then
      ioGeneration.mNeededOutletClasses += !outlet_mOutletTypeName.string
    end
  #--- $graphicController
    switch outlet_mGraphicController
    case none :
    case defined (@lstring controllerName @lstring propertyName) :
      if not handleGraphicControllerBinding then
        error outlet_mOutletTypeName : "the '" + outlet_mOutletTypeName + "' type does not handle the $graphicController binding"
      else
        [inObservablePropertyMap searchKey
          !controllerName
          ?let @propertyKind kind
          ?2*
        ]
        switch kind 
        case property (2*) :
          error controllerName : "the bound model should be an array controller"
        case toMany (4*) :
          error controllerName : "the bound model should be an array controller"
        case toOne (4*) :
          error controllerName : "the bound model should be an array controller"
        case arrayController (entityName graphic) :
          if propertyName.string == "" then
            if not graphic then
              error controllerName : "the controlled entity (" + entityName + ") should be a graphic entity"
            end
          else
            [inSemanticContext.mClassMap searchKey
              !entityName
              ?*
              ?let observablePropertyMap
              ?2*
            ]
            [observablePropertyMap searchKey !propertyName ?let propertyKind ?2*]
            switch propertyKind 
            case property (2*) :
              error controllerName : "the bound model should be a toMany property"
            case toMany (kEntityName * isGraphic *) :
              if not isGraphic then
                error controllerName : "the controlled entity (" + kEntityName + ") should be a graphic entity"
              end
            case toOne (4*) :
              error controllerName : "the bound model should be a toMany property"
            case arrayController (2*) :
              error controllerName : "the bound model should be a toMany property"
            case selectionController (*) :
              error controllerName : "the bound model should be a toMany property"
            end
         end
        case selectionController (*) :
          error controllerName : "the bound model should be an array controller"
        end
        outEBViewGraphicControllerBindingGenerationList += !outlet_mOutletName.string !controllerName.string
      end
    end
  #--- $tableView
    switch outlet_mTableValueBindingDescriptor
    case noTableValueBinding :
    case tableValueBinding (@lstring controllerName) :
      if not handlesTableViewBinding then
        error outlet_mOutletTypeName : "the '" + outlet_mOutletTypeName + "' type does not handle the $tableView binding"
      else
        [inObservablePropertyMap searchKey
          !controllerName
          ?let @propertyKind unused kind
          ?2*
        ]
        if not [kind isArrayController] then
          error controllerName : "the bound model should be an array controller"
        end
        outTableViewBindingGenerationList += !outlet_mOutletName.string !controllerName.string
      end
    end
  #--- $run
    switch outlet_mRunDescriptor
    case noAction :
    case action (@lstring target @lstring action) :
      if not handlesRunAction then
        error outlet_mOutletTypeName : "the '" + outlet_mOutletTypeName + "' type does not handle run action"
      elsif target.string == "self" then
        [inActionMap searchKey !action]
        outTargetActionList +=
          !outlet_mOutletName.string
          !"self"
          !action.string
          !inReceiverSwiftTypeName
      else # It is a controller
        [inObservablePropertyMap searchKey
          !target
          ?*
          ?let @actionMap controllerActionMap
          ?*
        ]
        [controllerActionMap searchKey !action]
        outTargetActionList +=
          !outlet_mOutletName.string
          !target.string
          !action.string
          !"Controller_" + inReceiverSwiftTypeName + "_" + target
      end
    end
  #--- Enabled
    switch outlet_mEnabledBindingDescriptor
    case noBinding :
    case binding (@abstractBooleanMultipleBindingExpressionAST expression) :
      [expression analyzeExpressionForMultipleBinding
        !inRootObservablePropertyMap
        !inSemanticContext
        !inObservablePropertyMap
        ?let @abstractBooleanMultipleBindingExpressionForGeneration enableExpression
        ?let @typeKind type
        ?let @location errorLocation
      ]
      if not handlesEnabledBinding then
        error errorLocation : "cet outlet n'accepte pas le binding $enabled"
      end
      if not [type isBoolType] then
        error errorLocation : "expression is not boolean"
      end
      outMultipleBindingGenerationList +=
        !outlet_mOutletName.string
        !"enabled"
        !enableExpression
    end
  #--- Hidden
    switch outlet_mHiddenBindingDescriptor
    case noBinding :
    case binding (@abstractBooleanMultipleBindingExpressionAST expression) :
      [expression analyzeExpressionForMultipleBinding
        !inRootObservablePropertyMap
        !inSemanticContext
        !inObservablePropertyMap
        ?let @abstractBooleanMultipleBindingExpressionForGeneration hiddenExpression
        ?let @typeKind type
        ?let @location errorLocation
      ]
      if not [type isBoolType] then
        error errorLocation : "expression is not boolean"
      end
      if not handlesHiddenBinding then
        error errorLocation : "cet outlet n'accepte pas le binding $hidden"
      end
      outMultipleBindingGenerationList +=
        !outlet_mOutletName.string
        !"hidden"
        !hiddenExpression
    end
  #---------------------------------- Regular bindings
    analyzeRegularBinding (
      !inRootObservablePropertyMap
      !inPreferencesPropertyMap
      !inSemanticContext
      !inObservablePropertyMap
      !outlet_mOutletTypeName
      !outlet_mOutletName.string
      !outlet_mRegularBindingList
      !"self"
      !?outRegularBindingsGenerationList
    )
  end
}

#·······················································································································

proc analyzeRegularBinding
  ?let @propertyMap inRootPropertyMap
  ?let @propertyMap inPreferencesPropertyMap
  ?let @semanticContext inSemanticContext
  ?let @propertyMap inBoundModelPropertyMap
  ?let @lstring inOutletTypeName
  ?let @string inOutletName
  ?let @regularBindingList inRegularBindingList
  ?let @string inSelfSwiftName
  ?!@regularBindingsGenerationList ioRegularBindingsGenerationList
{
  for () in inRegularBindingList do
  #--- Analyze model
    @outletBindingModelList boundModelTypeList = {}
    @boundObjectList boundModelListForGeneration = {}
    for () in mObservablePropertyList do
      [mObservableProperty analyzeObservableProperty
        !inRootPropertyMap
        !inSemanticContext
        !inBoundModelPropertyMap
        ?@propertyKind kind
        ?let @string unused swiftTypeStringForTransientFunctionArgument
      ]
      switch kind
      case property (2*) : # Ok
      case toMany (4*) :
        error [mObservableProperty location]:"a toMany property cannot be bound"
      case toOne (4*) :
        error [mObservableProperty location]:"a toOne property cannot be bound"
      case arrayController (2*) :
        error [mObservableProperty location]:"an array controller cannot be bound"
      case selectionController (*) :
        error [mObservableProperty location]:"a selection controller cannot be bound"
      end
      boundModelListForGeneration += ![mObservableProperty modelStringForSelf !inSelfSwiftName] !kind
      boundModelTypeList += !kind ![mObservableProperty location]
    end
  #--- Analyze outlet binding
    @outletBindingSpecificationModelList outletBindingSpecificationModelList = {}
    @controllerBindingOptionDecoratedList controllerBindingOptionDecoratedList = {}
    var outletTypeName = inOutletTypeName
    var continues = true
    loop ([inSemanticContext.mBindingSpecificationMap count] + 1) while (outletTypeName.string != "") & continues do
      continues = false
      [inSemanticContext.mBindingSpecificationMap searchKey
        !outletTypeName
        ?let superOutletClassName
        ?let @outletBindingSpecificationMap bindingMap
      ]
      if [bindingMap hasKey !mBindingName.string] then
        [bindingMap searchKey
          !mBindingName
          ?outletBindingSpecificationModelList
          ?controllerBindingOptionDecoratedList
        ]
      else
        continues = true
        outletTypeName = superOutletClassName
      end
    end
    if continues then
      error mBindingName : "this binding is not defined"
    elsif [boundModelTypeList length] != [outletBindingSpecificationModelList length] then
      error mBindingName
      : [[outletBindingSpecificationModelList length] string]
        + " model(s) required for this binding (found: "
        + [boundModelTypeList length] + ")"
    else
      for () required_ in outletBindingSpecificationModelList, () found_ in boundModelTypeList do
        if required_mModelShouldBeWritableProperty && [found_mKind isTransient] then
          error found_mErrorLocation : "the model is transient and the binding requires an writable model"
        end
        if [required_mModelType isEnumType] && [found_mKind isEnumType] then # Ok
        elsif [required_mModelType swiftTypeName] != [found_mKind swiftTypeName] then
          error found_mErrorLocation : "the model type should be " + [required_mModelType swiftTypeName]
        end
      end
    end
  #--- Check options
    var bindingOptionString = ""
    if [controllerBindingOptionDecoratedList length] != [mBindingOptionList length] then
      @string s
      if [controllerBindingOptionDecoratedList length] == 0 then
        s = "this binding has no option"
      else 
        s = "this binding requires the following options:"
        for () in controllerBindingOptionDecoratedList do
          s += "\n  - " + mOptionName + " : " + [mOptionType swiftTypeName]
        end
      end
      error mBindingName : s
    else
      for () controller_ in controllerBindingOptionDecoratedList, () binding_ in mBindingOptionList do
        if controller_mOptionName.string != binding_mOptionName.string then
          error binding_mOptionName : "the option name should be '" + controller_mOptionName + "'"
        end
        [binding_mOptionValue analyzeDefaultValueType 
          !{!controller_mOptionType}
          !inPreferencesPropertyMap
          ?let @string optionValueAsString
        ]
        bindingOptionString += ", " + controller_mOptionName.string + ":" + optionValueAsString
      end
    end
  #--- Generate binding
    ioRegularBindingsGenerationList +=
      !inOutletName
      !mBindingName.string
      !boundModelListForGeneration
      !bindingOptionString
  end
}

#----------------------------------------------------------------------------------------------------------------------*
#   GENERATION TYPES                      
#-----------------------------------------------------------------------------------------------------------------------

list @boundObjectList {
  @string mBoundObjectString
  @propertyKind mKind
}

#·······················································································································

list @regularBindingsGenerationList {
  @string mOutletName
  @string mBindingName
  @boundObjectList mBoundObjectList
  @string mBindingOptionsString
}

#·······················································································································

list @actionBindingListForGeneration {
  @string mOutletName
  @string mTargetName
  @string mActionName
  @string mTargetTypeName
}

#·······················································································································

map @decoratedOutletMap {
  @string mOutletTypeName
  insert insertKey error message "the '%K' outlet is already declared"
  search searchKey error message "the '%K' outlet is not declared"
}

#-----------------------------------------------------------------------------------------------------------------------
