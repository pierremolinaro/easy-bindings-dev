#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST   
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @selectionControllerDeclaration : @abstractSecondaryProperty {
  @lstring mSelectionControllerName
  @lstring mModelControllerName
  @lstring mModelControllerPropertyName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension easyBindings_syntax {

  #·····················································································································
  
  rule <controller_declaration> ?!@secondaryPropertyList ioSecondaryPropertyList {
    $selectionController$
    $identifier$ ?let @lstring selectionControllerName
    $:$
    @lstring modelControllerName
    select
      $self$
      modelControllerName = ["self" here]
    or
      $identifier$ ?modelControllerName
    end
    $.$
    $identifier$ ?let @lstring propertyName
    $;$
    ioSecondaryPropertyList += !@selectionControllerDeclaration.new {
      !selectionControllerName
      !modelControllerName
      !propertyName
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @selectionControllerDeclaration typeInventory
  ?!@unifiedTypeMap unused ioUnifiedTypeMap
{
}

#·······················································································································

override method @selectionControllerDeclaration tryToDefineSecondaryProperty
  ?!@semanticContext unused ioSemanticContext
  ?let @observablePropertyMap unused inRootObservableProperties
  ?!@observablePropertyMap ioObservableProperties
  ?!@secondaryPropertyList ioUnsolvedProperties
  ?!@simpleStoredPropertyListForGeneration unused ioSimpleStoredPropertyListForGeneration
{
  if mModelControllerName.string == "self" then
    [ioObservableProperties searchKey
      !mModelControllerPropertyName
      ?let kind
      ?3*
    ]
  #--- Check type
    @string entityName
    switch kind
    case property (2*) :
      error mModelControllerPropertyName : "the model should be a collection of entities" : entityName
    case toMany (* @lstring typeName 2*) :
      entityName = typeName
    case toOne (4*) :
      error mModelControllerPropertyName : "the model should be a collection of entities" : entityName
    case arrayController (3*) :
      error mModelControllerPropertyName : "the model should be a collection of entities" : entityName
    case selectionController (2*) :
      error mModelControllerPropertyName : "the model should be a collection of entities" : entityName
    end
  #--- Store selection controller
    [!?ioObservableProperties insertKey
      !mSelectionControllerName
      !.selectionController {!type: [kind propertyType] !typeName:entityName}
      !"" # No inverse relationship
      !{} # No action
      !false
    ]
  elsif [ioObservableProperties hasKey !mModelControllerName.string] then
  #--- Get model controller
    [ioObservableProperties searchKey
      !mModelControllerName
      ?let kind
      ?3*
    ]
    @string entityName
    switch kind
    case property (2*) :
      error mModelControllerName : "the model should be an array controller" : entityName
    case toMany (4*) :
      error mModelControllerName : "the model should be an array controller" : entityName
    case toOne (4*) :
      error mModelControllerName : "the model should be an array controller" : entityName
    case arrayController (* typeName *) :
      entityName = typeName
    case selectionController (2*) :
      error mModelControllerName : "the model should be an array controller" : entityName
    end
  #--- Store selection controller
    [!?ioObservableProperties insertKey
      !mSelectionControllerName
      !.selectionController {!type: [kind propertyType] !typeName:entityName}
      !"" # No inverse relationship
      !{} # No action
      !false
    ]  
  else
    ioUnsolvedProperties += !self
  end
}

#·······················································································································

override method @selectionControllerDeclaration secondaryPropertySemanticAnalysis
  ?let @string inOwnerName
  ?let @string unused inRootEntityName
  ?let @observablePropertyMap unused inRootObservableProperties
  ?let @semanticContext inSemanticContext
  ?let @observablePropertyMap inObservableProperties
  ?!@transientDefinitionListForGeneration unused ioTransientDefinitionListForGeneration
  ?!@arrayControllerForGeneration unused ioArrayControllerForGeneration
  ?!@selectionControllerForGeneration ioSelectionControllerForGeneration
  ?!@stringset unused ioNeededOutletClasses
{
#--- Get model controller
  @string selectionEntityName
  @observablePropertyMap selectionObservablePropertyMap
  if mModelControllerName.string == "self" then
    [inObservableProperties searchKey
      !mModelControllerPropertyName
      ?let kind
      ?3*
    ]
    switch kind
    case property (2*) :
      error mModelControllerPropertyName : "the property should be a collection of entities" : selectionEntityName
    case toMany (* typeName 2*) :
      selectionEntityName = typeName
    case toOne (4*) :
      error mModelControllerPropertyName : "the property should be a collection of entities" : selectionEntityName
    case arrayController (3*) :
      error mModelControllerPropertyName : "the property should be a collection of entities" : selectionEntityName
    case selectionController (2*) :
      error mModelControllerPropertyName : "the property should be a collection of entities" : selectionEntityName
    end
  #--- Find root entity observable properties
    [inSemanticContext.mEntityObservablePropertyMap searchKey
      !.new {!selectionEntityName !mSelectionControllerName.location}
      ?selectionObservablePropertyMap
      ?*
    ]
  else
    [inObservableProperties searchKey
      !mModelControllerName
      ?let kind
      ?3*
    ]
    switch kind
    case property (2*) :
      error mModelControllerName : "the model should be an array controller" : selectionEntityName
    case toMany (4*) :
      error mModelControllerName : "the model should be an array controller" : selectionEntityName
    case toOne (4*) :
      error mModelControllerName : "the model should be an array controller" : selectionEntityName
    case arrayController (* typeName *) :
      selectionEntityName = typeName
    case selectionController (2*) :
      error mModelControllerName : "the model should be an array controller" : selectionEntityName
    end
  #--- Find root entity observable properties
    [inSemanticContext.mEntityObservablePropertyMap searchKey
      !.new {!selectionEntityName !mSelectionControllerName.location}
      ?selectionObservablePropertyMap
      ?*
    ]
  end
#--- Generation
  ioSelectionControllerForGeneration +=
    !inOwnerName
    !mSelectionControllerName.string
    !mModelControllerName.string
    !mModelControllerPropertyName.string
    !selectionEntityName
    !selectionObservablePropertyMap
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   GENERATION TYPES                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @selectionControllerForGeneration {
  @string mOwnerName # document name, prefs name, ...
  @string mSelectionControllerName
  @string mBoundControllerName
  @string mBoundControllerPropertyName
  @string mSelectionTypeName
  @observablePropertyMap mSelectionObservablePropertyMap
}

#·······················································································································

private filewrapper selectionControllerGenerationTemplate in "../generation-templates/controllers" {
}{
}{
  template selectionControllerImplementation "selection-controller.swift.galgasTemplate"
    ?@string OWNER_NAME
    ?@string SELECTION_CONTROLLER_NAME
    ?@string ELEMENT_TYPE_NAME
    ?@observablePropertyMap SELECTION_OBSERVABLE_PROPERTY_MAP
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   GENERATION                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc generateSelectionControllers
  ?let @selectionControllerForGeneration inArrayControllerListForGeneration
  ?let @string inOutputDirectory
  ?!@stringset ioGeneratedFileSet
{
  for () in inArrayControllerListForGeneration do
    let s = [filewrapper selectionControllerGenerationTemplate.selectionControllerImplementation
      !mOwnerName
      !mSelectionControllerName
      !mSelectionTypeName
      !mSelectionObservablePropertyMap
    ]
    let fileName = "selectionController-" + mOwnerName + "-" +  mSelectionControllerName + ".swift"
    ioGeneratedFileSet += !fileName
    [@string generateFile
      !inOutputDirectory
      !fileName
      !s
    ]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
