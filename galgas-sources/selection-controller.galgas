#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST   
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @selectionControllerDeclarationAST : @abstractDeclarationAST {
  @lstring mSelectionControllerName
  @lstring mModelControllerName
  @lstring mModelControllerPropertyName
  @lstring mSelectionEntityName
}

#·······················································································································

override method @selectionControllerDeclarationAST enterInPrecedenceGraph ?!@declarationPrecedenceGraph ioGraph {
  let node = @lstring.new {!mClassName.string + " " + mSelectionControllerName !mSelectionControllerName.location}
  [!?ioGraph addNode !node !self]
  [!?ioGraph addEdge !node !.new {!mClassName.string + " " + mModelControllerName !mModelControllerName.location}]
}

#·······················································································································

override getter @selectionControllerDeclarationAST nodeKey -> @lstring {
  result = @lstring.new {!mClassName.string + " " + mSelectionControllerName !mSelectionControllerName.location}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension easyBindings_syntax {

  #·····················································································································
  
  rule <controller_declaration>
            ?let @lstring inCurrentEntity
            ?let @lstring unused inRootEntity
            ?!@astDeclarationStruct ioDeclarationAST
  {
    $selectionController$
    $Identifier$ ?let @lstring selectionEntityName
    $controllerName$ ?let @lstring selectionControllerName
    $:$
    $controllerName$ ?let modelControllerName
    $.$
    $identifier$ ?let @lstring propertyName
    $;$
    ioDeclarationAST.mUnifiedDeclarationList += !@selectionControllerDeclarationAST.new {
      !inCurrentEntity
      !selectionControllerName
      !modelControllerName
      !propertyName
      !selectionEntityName
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @selectionControllerDeclarationAST firstAnalysisPhase
       ?!@semanticContext ioSemanticContext
       ?!@generationStruct unused ioGeneration
{
  with mClassName in !?ioSemanticContext.mClassMap 
    error message searchKey
  do
    [mPropertyMap searchKey !mModelControllerName ?let propertyKind ?2*]
    switch propertyKind
    case property (2*) :
      error mModelControllerName : "an array controller is required here"
    case toMany (4*) :
      error mModelControllerName : "an array controller is required here"
    case toOne (4*) :
      error mModelControllerName : "an array controller is required here"
    case selectionController (*) :
      error mModelControllerName : "an array controller is required here"
    case arrayController (2*) :
      if mModelControllerPropertyName.string != "selectedArray" then
        error mModelControllerPropertyName : "'selectedArray' is required here"
      end
      let kind = @propertyKind.selectionController {!typeName: mSelectionEntityName}
      [!?mPropertyMap insertKey !mSelectionControllerName !kind !{} !false]
      mPropertyGenerationList += !@selectionControllerPropertyGeneration.new {
        !mSelectionControllerName.string
        !mClassName
        !mModelControllerName.string
        !mModelControllerPropertyName.string
      }
    end
  end
}

#·······················································································································

override method @selectionControllerDeclarationAST fourthAnalysisPhase
       ?!@semanticContext ioSemanticContext
       ?!@generationStruct ioGeneration
{
  [ioSemanticContext.mClassMap searchKey !mClassName ?let superClassKind ?let propertyMap ?2*]
  [propertyMap searchKey !mModelControllerName ?let propertyKind ?2*]
   switch propertyKind
   case property (2*) :
   case toMany (4*) :
   case toOne (4*) :
   case selectionController (*) :
   case arrayController (typeName *) :
     [ioSemanticContext.mClassMap searchKey
       !mSelectionEntityName
       ?*
       ?let selectionObservablePropertyMap
       ?*
       ?let selectionGenerationList
     ]
     ioGeneration.mSelectionControllerListForGeneration +=
       !mClassName
       !mSelectionControllerName.string
       !mModelControllerName.string
       !mModelControllerPropertyName.string
       !typeName
       !mSelectionEntityName.string
       !selectionObservablePropertyMap
       !selectionGenerationList
     var testedTypeName = mSelectionEntityName.string
     loop (@uint.max) while (typeName.string != testedTypeName) & (testedTypeName != "") do
       if typeName.string != mSelectionEntityName.string then
         switch superClassKind
         case prefs :
           testedTypeName = ""
         case atomic (*) :
           testedTypeName = ""
         case document (*) :
           testedTypeName = ""
         case entity (@string superOfSuperEntity 2*) :
            testedTypeName = superOfSuperEntity
            if testedTypeName == "" then
              error mSelectionEntityName : "This entity is not descendant of " + typeName
            end
         end
       end
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   CODE GENERATION                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @selectionControllerPropertyGeneration : @propertyGeneration {
  @string mOwnerName
  @string mModelControllerName
  @string mModelControllerPropertyName
}

#·······················································································································

override getter @selectionControllerPropertyGeneration propertyDeclarationCode ?let @stringset unused inOverriddenTransients -> @string {
  result  = "  //" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n"
  result += "  //   Selection controller: " + mPropertyName + "\n"
  result += "  //" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n\n"
  result += "  var " + mPropertyName + " = SelectionController_" + mOwnerName + "_" + mPropertyName + " ()\n\n"
}

#·······················································································································

override getter @selectionControllerPropertyGeneration configurationCode -> @string {
  result  = "  //--- Selection controller property: " + mPropertyName + "\n"
  result += "    self." + mPropertyName + ".bind_selection (model: self." + mModelControllerName
    + "." + mModelControllerPropertyName + "_property, file: #file, line: #line)\n"
}

#·······················································································································

override getter @selectionControllerPropertyGeneration populateExplorerWindowCode -> @string {
  result  = "  //--- Selection controller property: " + mPropertyName + "\n"
  result += "    self." + mPropertyName + ".addExplorer (name: \"" + mPropertyName + "\", y:&y, view:view)\n"
}

#·······················································································································

override getter @selectionControllerPropertyGeneration terminationCode -> @string {
  result  = "  //--- Selection controller property: " + mPropertyName + "\n"
  result += "    self." + mPropertyName + ".unbind_selection ()\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   GENERATION TYPES                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @selectionControllerForGeneration {
  @string mOwnerName # document name, prefs name, ...
  @string mSelectionControllerName
  @string mBoundControllerName
  @string mBoundControllerPropertyName
  @string mBaseTypeName
  @string mSelectionTypeName
  @propertyMap mSelectionObservablePropertyMap
  @propertyGenerationList mPropertyGenerationList
}

#·······················································································································

private filewrapper selectionControllerGenerationTemplate in "../generation-templates/controllers" {
}{
}{
  template baseSelectionControllerImplementation "base-selection-controller.swift.galgasTemplate"
    ?@string OWNER_NAME
    ?@string SELECTION_CONTROLLER_NAME
    ?@string ELEMENT_TYPE_NAME
    ?@propertyMap SELECTION_OBSERVABLE_PROPERTY_MAP

  template derivedSelectionControllerImplementation "derived-selection-controller.swift.galgasTemplate"
    ?@string OWNER_NAME
    ?@string SELECTION_CONTROLLER_NAME
    ?@string BASE_ELEMENT_TYPE_NAME
    ?@string DERIVED_ELEMENT_TYPE_NAME
    ?@propertyGenerationList PROPERTY_GENERATION_LIST
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   GENERATION                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc generateSelectionControllers
  ?let @selectionControllerForGeneration inArrayControllerListForGeneration
  ?let @string inOutputDirectory
  ?!@stringset ioGeneratedFileSet
{
  for () in inArrayControllerListForGeneration do
    if mBaseTypeName == mSelectionTypeName then
      let s = [filewrapper selectionControllerGenerationTemplate.baseSelectionControllerImplementation
        !mOwnerName
        !mSelectionControllerName
        !mBaseTypeName
        !mSelectionObservablePropertyMap
      ]
      let fileName = "selectionController-" + mOwnerName + "-" +  mSelectionControllerName + ".swift"
      ioGeneratedFileSet += !fileName
      [@string generateFile
        !inOutputDirectory
        !fileName
        !s
      ]
    else
      let s = [filewrapper selectionControllerGenerationTemplate.derivedSelectionControllerImplementation
        !mOwnerName
        !mSelectionControllerName
        !mBaseTypeName
        !mSelectionTypeName
#        !mSelectionObservablePropertyMap
        !mPropertyGenerationList
      ]
      let fileName = "selectionController-" + mOwnerName + "-" +  mSelectionControllerName + ".swift"
      ioGeneratedFileSet += !fileName
      [@string generateFile
        !inOutputDirectory
        !fileName
        !s
      ]
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
