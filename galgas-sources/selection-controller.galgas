#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST   
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @selectionControllerDeclarationAST : @abstractDeclarationAST {
  @lstring mSelectionControllerName
  @lstring mModelControllerName
  @lstring mModelControllerPropertyName
}

#·······················································································································

override method @selectionControllerDeclarationAST enterInPrecedenceGraph ?!@declarationPrecedenceGraph ioGraph {
  let node = @lstring.new {!mClassName.string + " " + mSelectionControllerName !mSelectionControllerName.location}
  [!?ioGraph addNode !node !self]
  [!?ioGraph addEdge !node !.new {!mClassName.string + " " + mModelControllerName !mModelControllerName.location}]
}

#·······················································································································

override getter @selectionControllerDeclarationAST lkey -> @lstring {
  result = @lstring.new {!mClassName.string + " " + mSelectionControllerName !mSelectionControllerName.location}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension easyBindings_syntax {

  #·····················································································································
  
  rule <controller_declaration>
            ?let @lstring inCurrentEntity
            ?let @lstring unused inRootEntity
            ?!@astDeclarationStruct ioDeclarationAST
  {
    $selectionController$
    $identifier$ ?let @lstring selectionControllerName
    $:$
    $self$
    $.$
    $identifier$ ?let modelControllerName
    $.$
    $identifier$ ?let @lstring propertyName
    $;$
    ioDeclarationAST.mUnifiedDeclarationList += !@selectionControllerDeclarationAST.new {
      !inCurrentEntity
      !selectionControllerName
      !modelControllerName
      !propertyName
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @selectionControllerDeclarationAST firstAnalysisPhase
       ?!@semanticContext ioSemanticContext
       ?!@generationStruct unused ioGeneration
{
  with mClassName in !?ioSemanticContext.mClassMap 
    error message searchKey
  do
    [mPropertyMap searchKey !mModelControllerName ?let classKind ?*]
    switch classKind
    case property (2*) :
      error mModelControllerName : "an array controller is required here"
    case toMany (4*) :
      error mModelControllerName : "an array controller is required here"
    case toOne (3*) :
      error mModelControllerName : "an array controller is required here"
    case arrayController (typeName 2*) :
      if mModelControllerPropertyName.string != "selectedArray" then
        error mModelControllerPropertyName : "'selectedArray' is required here"
      end
      let kind = @propertyKind.selectionController {
        !typeName: typeName
      }
      [!?mPropertyMap insertKey !mSelectionControllerName !kind !{}]
      mPropertyGenerationList += !@selectionControllerPropertyGeneration.new {
        !mSelectionControllerName.string
        !mClassName
        !mModelControllerName.string
        !mModelControllerPropertyName.string
      }
    case selectionController (*) :
      error mModelControllerName : "an array controller is required here"
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#override method @selectionControllerDeclarationAST secondAnalysisPhase
#       ?!@semanticContext ioSemanticContext
#       ?!@generationStruct unused ioGeneration
#{
#
#}
#
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   CODE GENERATION                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @selectionControllerPropertyGeneration : @propertyGeneration {
  @string mOwnerName
  @string mModelControllerName
  @string mModelControllerPropertyName
}

#·······················································································································

override getter @selectionControllerPropertyGeneration declarationCode -> @string {
  result  = "  //" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n"
  result += "  //   Selection controller: " + mPropertyName + "\n"
  result += "  //" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n\n"
  result += "  var " + mPropertyName + " = SelectionController_" + mOwnerName + "_" + mPropertyName + " ()\n\n"
}

#·······················································································································

override getter @selectionControllerPropertyGeneration configurationCode -> @string {
  result  = "  //--- Selection controller property: " + mPropertyName + "\n"
  result += "    self." + mPropertyName + ".bind_selection (model: self." + mModelControllerName
    + "." + mModelControllerPropertyName + "_property, file: #file, line: #line)\n"
}

#·······················································································································

override getter @selectionControllerPropertyGeneration populateExplorerWindowCode -> @string {
  result  = "  //--- Selection controller property: " + mPropertyName + "\n"
  result += "    self." + mPropertyName + ".addExplorer (name: \"" + mPropertyName + "\", y:&y, view:view)\n"
}

#·······················································································································

override getter @selectionControllerPropertyGeneration terminationCode -> @string {
  result  = "  //--- Selection controller property: " + mPropertyName + "\n"
  result += "    self." + mPropertyName + ".unbind_selection ()\n"
}
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   GENERATION TYPES                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @selectionControllerForGeneration {
  @string mOwnerName # document name, prefs name, ...
  @string mSelectionControllerName
  @string mBoundControllerName
  @string mBoundControllerPropertyName
  @string mSelectionTypeName
  @observablePropertyMap mSelectionObservablePropertyMap
}

#·······················································································································

private filewrapper selectionControllerGenerationTemplate in "../generation-templates/controllers" {
}{
}{
  template selectionControllerImplementation "selection-controller.swift.galgasTemplate"
    ?@string OWNER_NAME
    ?@string SELECTION_CONTROLLER_NAME
    ?@string ELEMENT_TYPE_NAME
    ?@observablePropertyMap SELECTION_OBSERVABLE_PROPERTY_MAP
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   GENERATION                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc generateSelectionControllers
  ?let @selectionControllerForGeneration inArrayControllerListForGeneration
  ?let @string inOutputDirectory
  ?!@stringset ioGeneratedFileSet
{
  for () in inArrayControllerListForGeneration do
    let s = [filewrapper selectionControllerGenerationTemplate.selectionControllerImplementation
      !mOwnerName
      !mSelectionControllerName
      !mSelectionTypeName
      !mSelectionObservablePropertyMap
    ]
    let fileName = "selectionController-" + mOwnerName + "-" +  mSelectionControllerName + ".swift"
    ioGeneratedFileSet += !fileName
    [@string generateFile
      !inOutputDirectory
      !fileName
      !s
    ]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
