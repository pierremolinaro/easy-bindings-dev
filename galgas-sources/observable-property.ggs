//----------------------------------------------------------------------------------------------------------------------
#  AST    
//----------------------------------------------------------------------------------------------------------------------

enum @observablePropertyAST {
  case rootProperty (@lstring propertyName)
  case rootPropertyWithOption (@lstring propertyName, @lstring optionName)
  case rootPropertyRelationship (@lstring relationshipName, @lstring propertyName)
  case rootPropertyNone (@lstring relationshipName)
  case selfWithoutProperty (@location issueLocation)
  case selfProperty (@lstring propertyName)
  case selfPropertyWithOption (@lstring propertyName, @lstring optionName)
  case selfPropertyArray (@lstring propertyName, @lstring elementPropertyName)
  case selfPropertyObject (@lstring propertyName, @lstring elementPropertyName)
  case selfPropertyNone (@lstring propertyName)
  case prefsProperty (@lstring propertyName)
  case prefsPropertyWithOption (@lstring propertyName, @lstring optionName)
  case selfControllerProperty (@lstring controllerName, @lstring propertyName)
  case selfControllerSecondaryProperty (@lstring controllerName, @lstring propertyName, @lstring secondaryPropertyName)
  case selfControllerAllProperties (@lstring controllerName, @lstring propertyName, @lstring secondaryPropertyName)
  case selfControllerOneProperty (@lstring controllerName, @lstring propertyName)
  case signatureProperty (@location location)
  case versionProperty (@location location)
  case versionShouldChangeProperty (@location location)
  case superProperty (@lstring superEntityName, @lstring propertyName)
  case superPropertyWithDefaultValue (@lstring superEntityName, @lstring propertyName, @abstractDefaultValue defaultValue)
}

#·······················································································································

list @observablePropertyList {
  public var @observablePropertyAST mObservableProperty
}

//----------------------------------------------------------------------------------------------------------------------
#  SYNTAX 
//----------------------------------------------------------------------------------------------------------------------

syntax extension easyBindings_syntax {

  rule <observable_property>(
    !@observablePropertyAST outObservablePropertyAST)
  {
    select
      $root$
      $.$
      $identifier$ (?let propertyName)
      select
        outObservablePropertyAST = .rootProperty (!propertyName:propertyName)
      or
        $.$
        select
          $identifier$ (?let optionName)
          outObservablePropertyAST = .rootPropertyWithOption (!propertyName:propertyName, !optionName:optionName)
        or
          $all$
          $.$
          $identifier$ (?let observablePropertyName)
          outObservablePropertyAST = .rootPropertyRelationship (
            !relationshipName:propertyName, !propertyName:observablePropertyName
          )
        or
          $none$
          outObservablePropertyAST = .rootPropertyNone (!relationshipName:propertyName)
        end
      end
    or
      $self$
      select
        outObservablePropertyAST = .selfWithoutProperty (!issueLocation: .here)
      or
        $.$
        $identifier$ (?let propertyName)
        select
          outObservablePropertyAST = .selfProperty (!propertyName:propertyName)
        or
          $.$
          select
            $all$
            $.$
            $identifier$ (?let elementPropertyName)
            outObservablePropertyAST = .selfPropertyArray (
              !propertyName:propertyName,
              !elementPropertyName:elementPropertyName
            )
          or
            $one$
            $.$
            $identifier$ (?let elementPropertyName)
            outObservablePropertyAST = .selfPropertyObject (
              !propertyName:propertyName,
              !elementPropertyName:elementPropertyName
            )
          or
            $none$
            outObservablePropertyAST = .selfPropertyNone (!propertyName:propertyName)
          or
            $identifier$ (?let optionName)
            outObservablePropertyAST = .selfPropertyWithOption (!propertyName:propertyName, !optionName:optionName)
          end
        end
      end
    or
      $prefs$
      $.$
      $identifier$ (?let propertyName)
      select
        outObservablePropertyAST = .prefsProperty (!propertyName:propertyName)
      or
        $.$
        $identifier$ (?let optionName)
        outObservablePropertyAST = .prefsPropertyWithOption (!propertyName:propertyName, !optionName:optionName)
      end
    or
      $controllerName$ (?let controllerName)
      $.$
      select
        $one$
        $.$
        $identifier$ (?let propertyName)
        outObservablePropertyAST = .selfControllerOneProperty (!controllerName:controllerName, !propertyName:propertyName)
      or
        $identifier$ (?let propertyName)
        select
          outObservablePropertyAST = .selfControllerProperty (!controllerName:controllerName, !propertyName:propertyName)
        or
          $.$
          $identifier$ (?let secondaryPropertyName)
          outObservablePropertyAST = .selfControllerSecondaryProperty (
            !controllerName:controllerName,
            !propertyName:propertyName,
            !secondaryPropertyName:secondaryPropertyName
          )
        or
          $.$
          $all$
          $.$
          $identifier$ (?let secondaryPropertyName)
          outObservablePropertyAST = .selfControllerAllProperties (
            !controllerName: controllerName,
            !propertyName: propertyName,
            !secondaryPropertyName: secondaryPropertyName
          )
        end
      end
    or
      $signature$
      outObservablePropertyAST = .signatureProperty (!location:.here)
    or
      $version$
      outObservablePropertyAST = .versionProperty (!location:.here)
    or
      $versionShouldChange$
      outObservablePropertyAST = .versionShouldChangeProperty (!location:.here)
    or
      $super$
      $.$
      $Identifier$ (?let superEntityName)
      $.$
      $identifier$ (?let propertyName)
      select
        outObservablePropertyAST = .superProperty (
          !superEntityName: superEntityName,
          !propertyName: propertyName
        )
      or
        $default$
        <explicit_value> (?let @abstractDefaultValue defaultValue)
        outObservablePropertyAST = .superPropertyWithDefaultValue (
          !superEntityName: superEntityName,
          !propertyName: propertyName,
          !defaultValue: defaultValue
        )
      end
    end
  }

  //-------------------------------------------------------------------------------------------------------------------*

}
   
//----------------------------------------------------------------------------------------------------------------------
#  SEMANTICS                              
//----------------------------------------------------------------------------------------------------------------------

func @observablePropertyAST.modelStringForSelf (let @string inSelf) -> @string outResult {
  switch self
  case rootProperty (@lstring propertyName) :
    outResult = inSelf + "rootObject." + propertyName + "_property"
  case rootPropertyNone (@lstring propertyName) :
    outResult = inSelf + "rootObject." + propertyName + "_none"
  case rootPropertyWithOption (@lstring propertyName, @lstring optionName) :
    outResult = inSelf + "rootObject." + propertyName + "_property" + "." + optionName + "_property"
  case rootPropertyRelationship (@lstring relationshipName, *) :
    outResult = inSelf + "rootObject." + relationshipName + "_property"
  case selfWithoutProperty (*) :
    outResult = inSelf + "objectIndex"
  case selfProperty (@lstring propertyName) :
    outResult = inSelf + propertyName + "_property"
  case selfPropertyWithOption (@lstring propertyName, @lstring optionName) :
    outResult = inSelf + propertyName + "_property" + "." + optionName + "_property"
  case selfPropertyArray (@lstring propertyName, @lstring unused elementPropertyName) :
    outResult = inSelf + propertyName + "_property"
  case selfPropertyObject (@lstring propertyName, @lstring elementPropertyName) :
    outResult = inSelf + propertyName + "_property." + elementPropertyName + "_property"
  case selfPropertyNone (@lstring propertyName) :
    outResult = inSelf + propertyName + "_none"
  case prefsProperty (@lstring propertyName) :
    outResult = "preferences_" + propertyName + "_property"
  case prefsPropertyWithOption (@lstring propertyName, @lstring optionName) :
    outResult = "preferences_" + propertyName + "_property" + "." + optionName + "_property"
  case selfControllerProperty (@lstring controllerName, @lstring propertyName) :
    outResult = inSelf + controllerName + "." + propertyName + "_property"
  case selfControllerSecondaryProperty (@lstring controllerName, @lstring propertyName, @lstring secondaryPropertyName) :
    outResult = inSelf + controllerName + "." + propertyName + "_property" + "." + secondaryPropertyName + "_property"
  case selfControllerAllProperties (@lstring controllerName, @lstring propertyName, *) :
    outResult = inSelf + controllerName + "." + propertyName + "_property"
  case selfControllerOneProperty (@lstring controllerName, @lstring propertyName) :
    outResult = inSelf + controllerName + "." + propertyName + "_property"
  case signatureProperty (*) :
    outResult = "self.signatureObserver_property"
  case versionProperty (*) :
    outResult = "self.versionObserver_property"
  case versionShouldChangeProperty (*) :
    outResult = "self.versionShouldChangeObserver_property"
  case superProperty (*, @lstring propertyName) :
    outResult = inSelf + propertyName + "_property"
  case superPropertyWithDefaultValue (*, @lstring propertyName, *) :
    outResult = inSelf + propertyName + "_property"
  end  
}

//----------------------------------------------------------------------------------------------------------------------

func @observablePropertyAST.modelStringFunctionArgument() -> @string outResult {
  switch self
  case rootProperty (@lstring propertyName) :
    outResult = "root_" + propertyName 
  case rootPropertyNone (@lstring propertyName) :
    outResult = "root_" + propertyName + "_none"
  case rootPropertyWithOption (@lstring propertyName, @lstring optionName) :
    outResult = "root_" + propertyName + "_" + optionName
  case rootPropertyRelationship (@lstring relationshipName, @lstring elementPropertyName) :
    outResult = "root_" + relationshipName + "_" + elementPropertyName
  case selfWithoutProperty (*) :
    outResult = "self_address"
  case selfProperty (@lstring propertyName) :
    outResult = "self_" + propertyName
  case selfPropertyWithOption (@lstring propertyName, @lstring optionName) :
    outResult = "self_" + propertyName + "_" + optionName
  case selfPropertyArray (@lstring propertyName, @lstring elementPropertyName) :
    outResult = "self_" + propertyName + "_" + elementPropertyName
  case selfPropertyObject (@lstring propertyName, @lstring elementPropertyName) :
    outResult = "self_" + propertyName + "_" + elementPropertyName
  case selfPropertyNone (@lstring propertyName) :
    outResult = "self_" + propertyName + "_none"
  case prefsProperty (@lstring propertyName) :
    outResult = "prefs_" + propertyName
  case prefsPropertyWithOption (@lstring propertyName, @lstring optionName) :
    outResult = "prefs_" + propertyName + "_" + optionName
  case selfControllerProperty (@lstring controllerName, @lstring propertyName) :
    outResult = "self_" + controllerName + "_" + propertyName
  case selfControllerSecondaryProperty (@lstring controllerName, @lstring propertyName, @lstring secondaryPropertyName) :
    outResult = "self_" + controllerName + "_" + propertyName + "_" + secondaryPropertyName
  case selfControllerAllProperties (@lstring controllerName, @lstring propertyName, @lstring secondaryPropertyName) :
    outResult = "self_" + controllerName + "_" + propertyName + "_all_" + secondaryPropertyName
  case selfControllerOneProperty (@lstring controllerName, @lstring propertyName) :
    outResult = "self_" + controllerName + "_" + propertyName + "_all_<<2>>"
  case signatureProperty (*) :
    outResult = "self_signatureObserver"
  case versionProperty (*) :
    outResult = "self_versionObserver"
  case versionShouldChangeProperty (*) :
    outResult = "self_versionShouldChangeObserver"
  case superProperty (@lstring superEntityName, @lstring propertyName) :
    outResult = "self_" + superEntityName + "_" + propertyName
  case superPropertyWithDefaultValue (@lstring superEntityName, @lstring propertyName, *) :
    outResult = "self_" + superEntityName + "_" + propertyName
  end  
}

#·······················································································································

func @observablePropertyAST.needs_unwSelf (let @bool inPreferences) -> @bool outResult {
  switch self
  case rootProperty (*) :
    outResult = true
  case rootPropertyNone (*) :
    outResult = true
  case rootPropertyWithOption (2*) :
    outResult = true
  case rootPropertyRelationship (2*) :
    outResult = true
  case selfWithoutProperty (*) :
    outResult = true
  case selfProperty (*) :
    outResult = not inPreferences
  case selfPropertyWithOption (2*) :
    outResult = not inPreferences
  case selfPropertyArray (2*) :
    outResult = not inPreferences
  case selfPropertyObject (2*) :
    outResult = not inPreferences
  case selfPropertyNone (*) :
    outResult = not inPreferences
  case prefsProperty (*) :
    outResult = false
  case prefsPropertyWithOption (2*) :
    outResult = false
  case selfControllerProperty (2*) :
    outResult = true
  case selfControllerSecondaryProperty (3*) :
    outResult = true
  case selfControllerAllProperties (3*) :
    outResult = true
  case selfControllerOneProperty (2*) :
    outResult = true
  case signatureProperty (*) :
    outResult = true
  case versionProperty (*) :
    outResult = true
  case versionShouldChangeProperty (*) :
    outResult = true
  case superProperty (2*) :
    outResult = true
  case superPropertyWithDefaultValue (3*) :
    outResult = true
  end  
}

#·······················································································································

func @observablePropertyAST.location() -> @location outResult {
  switch self
  case rootProperty (@lstring propertyName) :
    outResult = propertyName.location
  case rootPropertyNone (@lstring propertyName) :
    outResult = propertyName.location
  case rootPropertyWithOption (*, @lstring optionName) :
    outResult = optionName.location
  case rootPropertyRelationship (*, @lstring propertyName) :
    outResult = propertyName.location
  case selfWithoutProperty (issueLocation) :
    outResult = issueLocation
  case selfProperty (@lstring propertyName) :
    outResult = propertyName.location
  case selfPropertyWithOption (@lstring propertyName, *) :
    outResult = propertyName.location
  case selfPropertyArray (@lstring propertyName, *) :
    outResult = propertyName.location
  case selfPropertyObject (@lstring propertyName, *) :
    outResult = propertyName.location
  case selfPropertyNone (@lstring propertyName) :
    outResult = propertyName.location
  case prefsProperty (@lstring propertyName) :
    outResult = propertyName.location
  case prefsPropertyWithOption (@lstring propertyName, *) :
    outResult = propertyName.location
  case selfControllerProperty (*, @lstring propertyName) :
    outResult = propertyName.location
  case selfControllerSecondaryProperty (2*, @lstring secondaryPropertyName) :
    outResult = secondaryPropertyName.location
  case selfControllerAllProperties (2*, @lstring secondaryPropertyName) :
    outResult = secondaryPropertyName.location
  case selfControllerOneProperty (*, @lstring propertyName) :
    outResult = propertyName.location
  case signatureProperty (@location location) :
    outResult = location
  case versionProperty (@location location) :
    outResult = location
  case versionShouldChangeProperty (@location location) :
    outResult = location
  case superProperty (*, @lstring propertyName) :
    outResult = propertyName.location
  case superPropertyWithDefaultValue (*, @lstring propertyName, *) :
    outResult = propertyName.location
  end  
}

//----------------------------------------------------------------------------------------------------------------------

proc @observablePropertyAST.analyzeObservableProperty(
  let @propertyMap inRootPropertyMap,
  let @semanticContext inSemanticContext,
  let @propertyMap inBoundModelPropertyMap,
  !@propertyKind outKind,
  !@string outSwiftTypeStringForTransientFunctionArgument,
  !@string outDefaultValue) # Empty string -> no default value
{
  outDefaultValue = "" # No default value
  switch self
  case versionShouldChangeProperty (*) :
    let type = @typeKind.boolType
    outKind = .property (!type: type, !accessibility: .transient (!isAbstract: false))
    outSwiftTypeStringForTransientFunctionArgument = type.swiftTypeName
  case versionProperty (*) :
    let type = @typeKind.integerType
    outKind = .property (!type: type, !accessibility: .transient (!isAbstract: false))
    outSwiftTypeStringForTransientFunctionArgument = type.swiftTypeName
  case signatureProperty (*) :
    let type = @typeKind.integerType
    outKind = .property (!type: type, !accessibility: .transient (!isAbstract: false))
    outSwiftTypeStringForTransientFunctionArgument = type.swiftTypeName
  case rootProperty (@lstring propertyName) :
    inRootPropertyMap.searchKey
      (propertyName,
      ?outKind,
      ?2*
    )
    outSwiftTypeStringForTransientFunctionArgument = outKind.swiftTypeName
  case rootPropertyNone (@lstring relationshipName) :
    inRootPropertyMap.searchKey
      (relationshipName,
      ?let kind,
      ?2*
    )
    switch kind
    case property (2*) :
      error relationshipName : "a property does not accept 'none'" spoil (outKind)
    case toMany (4*) :
      error relationshipName : "an array property does not accept 'none'" spoil (outKind)
    case toOne (5*) :
      outKind = .property (!type: .boolType, !accessibility: .transient (!isAbstract: false))
    case arrayController (2*) :
      error relationshipName : "an array controller does not accept 'none'" spoil (outKind)
    case selectionController (*) :
      error relationshipName : "a selection controller does not accept 'none'" spoil (outKind)
    end
    outSwiftTypeStringForTransientFunctionArgument = outKind.swiftTypeName
  case rootPropertyWithOption (@lstring propertyName, @lstring optionName) :
    inRootPropertyMap.searchKey
      (propertyName,
      ?let kind,
      ?2*
    )
    switch kind
    case property (2*) :
      error propertyName : "a property does not accept any option" spoil (outKind)
    case toMany (4*) :
      if optionName.string == "count" then
        outKind = .property (!type: .integerType, !accessibility: .transient (!isAbstract: false))
      else
        error optionName : "unknown option (accepted : 'count')" spoil (outKind)
      end
    case toOne (5*) :
      error propertyName : "a toOne property does not accept any option" spoil (outKind)
    case arrayController (2*) :
      if optionName.string == "count" then
        outKind = .property (!type: .integerType, !accessibility: .transient (!isAbstract: false))
      elsif optionName.string == "empty" then
        outKind = .property (!type: .boolType, !accessibility: .transient (!isAbstract: false))
      else
        error optionName : "unknown option (accepted : 'count', 'empty')" spoil (outKind)
      end
    case selectionController (*) :
      error propertyName : "a selection controller does not accept any option" spoil (outKind)
    end
    outSwiftTypeStringForTransientFunctionArgument = outKind.swiftTypeName
  case rootPropertyRelationship (@lstring relationshipName, @lstring propertyName) : # root.xxx.all.xxx
    inRootPropertyMap.searchKey
      (relationshipName,
      ?let kind,
      ?2*
    )
    switch kind
    case property (2*) :
      error relationshipName : "a property does not accept 'all'" spoil (outKind)
    case toMany (typeName, 3*) : # Ok
      inSemanticContext.mClassMap.searchKey (.init (typeName, relationshipName.location), ?*, ?let observablePropertyMap, ?2*)
      observablePropertyMap.searchKey
        (propertyName,
        ?outKind,
        ?2*
      )
    case toOne (5*) :
      error relationshipName : "a toOne property does not accept 'all'" spoil (outKind)
    case arrayController (2*) :
      error relationshipName : "an array controller does not accept 'all'" spoil (outKind)
    case selectionController (*) :
      error relationshipName : "an array controller does not accept 'all'" spoil (outKind)
    end
    outSwiftTypeStringForTransientFunctionArgument = "[" + kind.swiftTypeName + "_" + propertyName + "]"
  case selfProperty (@lstring propertyName) :
    inBoundModelPropertyMap.searchKey
      (propertyName,
      ?outKind,
      ?2*
    )
    switch outKind
    case property (2*) :
      outSwiftTypeStringForTransientFunctionArgument = outKind.swiftTypeName
    case toMany (4*) :
      outSwiftTypeStringForTransientFunctionArgument = "[AnyObject]"
    case toOne (5*) :
      outSwiftTypeStringForTransientFunctionArgument = "AnyObject?"
    case arrayController (2*) :
      error propertyName : "an array controller cannot be observed" spoil (outSwiftTypeStringForTransientFunctionArgument)
    case selectionController (*) :
      error propertyName : "a selection controller cannot be observed" spoil (outSwiftTypeStringForTransientFunctionArgument)
    end
  case selfWithoutProperty (*) :
    outSwiftTypeStringForTransientFunctionArgument = "Int"
    outKind = .property (!type: .integerType, !accessibility: .transient (!isAbstract: false))
  case selfPropertyWithOption (@lstring propertyName, @lstring optionName) :
    inBoundModelPropertyMap.searchKey
      (propertyName,
      ?let kind,
      ?2*
    )
    switch kind
    case property (2*) :
      error propertyName : "an atomic property accepts no option" spoil (outKind)
    case toMany (4*) :
      if optionName.string == "count" then
        outKind = .property (!type: .integerType, !accessibility: .transient (!isAbstract: false))
      else
        error optionName : "unknown option (accepted : 'count')" spoil (outKind)
      end
    case toOne (5*) :
      error propertyName : "a toOne property accepts no option" spoil (outKind)
    case arrayController (2*) :
      if optionName.string == "count" then
        outKind = .property (!type: .integerType, !accessibility: .transient (!isAbstract: false))
      elsif optionName.string == "empty" then
        outKind = .property (!type: .boolType, !accessibility: .transient (!isAbstract: false))
      else
        error optionName : "unknown option (accepted : 'count', 'empty')" spoil (outKind)
      end
    case selectionController (*) :
      error propertyName : "a selection controller accepts no option" spoil (outKind)
    end
    outSwiftTypeStringForTransientFunctionArgument = outKind.swiftTypeName
  case selfPropertyArray (@lstring propertyName, @lstring elementPropertyName) : # self.xxx.all.xxx
    inBoundModelPropertyMap.searchKey
      (propertyName,
      ?let kind,
      ?2*
    )
    switch kind
    case property (2*) :
      error propertyName : "an atomic property accepts no option" spoil (outKind)
    case toMany (typeName, 3*) :
      inSemanticContext.mClassMap.searchKey (typeName, ?*, ?let observablePropertyMap, ?2*)
      observablePropertyMap.searchKey
        (elementPropertyName,
        ?outKind,
        ?2*
      )
    case toOne (5*) :
      error propertyName : "a toOne property accepts no option" spoil (outKind)
    case arrayController (2*) :
      error propertyName : "an array controller accepts no option" spoil (outKind)
    case selectionController (*) :
      error propertyName : "a selection controller accepts no option" spoil (outKind)
    end
    outSwiftTypeStringForTransientFunctionArgument = "[" + kind.swiftTypeName
       + "_" + elementPropertyName + "]"
  case selfPropertyObject (@lstring propertyName, @lstring elementPropertyName) : # self.xxx.one.xxx
    inBoundModelPropertyMap.searchKey
      (propertyName,
      ?let kind,
      ?2*
    )
    switch kind
    case property (2*) :
      error propertyName : "an atomic property does not accept 'one'" spoil (outKind)
    case toMany (4*) :
      error propertyName : "a toOne property does not accept 'one'" spoil (outKind)
    case toOne (typeName, 4*) :
      inSemanticContext.mClassMap.searchKey (typeName, ?*, ?let observablePropertyMap, ?2*)
      observablePropertyMap.searchKey
        (elementPropertyName,
        ?outKind,
        ?2*
      )
    case arrayController (2*) :
      error propertyName : "an array controller does not accept 'one'" spoil (outKind)
    case selectionController (*) :
      error propertyName : "a selection controller does not accept 'one'" spoil (outKind)
    end
    outSwiftTypeStringForTransientFunctionArgument = outKind.swiftTypeName + "?"
  case selfPropertyNone (@lstring propertyName) : # self.xxx.none
    inBoundModelPropertyMap.searchKey
      (propertyName,
      ?let kind,
      ?2*
    )
    switch kind
    case property (2*) :
      error propertyName : "an atomic property does not accept 'none'" spoil (outKind)
    case toMany (4*) :
      error propertyName : "a toOne property does not accept 'none'" spoil (outKind)
    case toOne (5*) :
      outKind = .property (!type: .boolType, !accessibility: .transient (!isAbstract: false))
    case arrayController (2*) :
      error propertyName : "an array controller does not accept 'none'" spoil (outKind)
    case selectionController (*) :
      error propertyName : "a selection controller does not accept 'none'" spoil (outKind)
    end
    outSwiftTypeStringForTransientFunctionArgument = outKind.swiftTypeName
  case prefsProperty (@lstring propertyName) :
    inSemanticContext.mClassMap.searchKey (.init (preferencesName (), .nowhere), ?*, ?let observablePropertyMap, ?2*)
    observablePropertyMap.searchKey
      (propertyName,
      ?outKind,
      ?2*
    )
    outSwiftTypeStringForTransientFunctionArgument = outKind.swiftTypeName
  case prefsPropertyWithOption (@lstring propertyName, @lstring optionName) :
    inSemanticContext.mClassMap.searchKey (.init (preferencesName (), .nowhere), ?*, ?let observablePropertyMap, ?2*)
    observablePropertyMap.searchKey
      (propertyName,
      ?let kind,
      ?2*
    )
    switch kind
    case property (2*) :
      error propertyName : "a property does not accept any option" spoil (outKind)
    case toMany (4*) :
      error propertyName : "a toMany property does not accept any option" spoil (outKind)
    case toOne (5*) :
      error propertyName : "a toOne property does not accept any option" spoil (outKind)
    case arrayController (2*) :
      if optionName.string == "count" then
        outKind = .property (!type: .integerType, !accessibility: .transient (!isAbstract: false))
      elsif optionName.string == "empty" then
        outKind = .property (!type: .boolType, !accessibility: .transient (!isAbstract: false))
      else
        error optionName : "unknown option (accepted : 'count', 'empty')" spoil (outKind)
      end
    case selectionController (*) :
      error propertyName : "a selection controller does not accept any option" spoil (outKind)
    end
    outSwiftTypeStringForTransientFunctionArgument = outKind.swiftTypeName
  case selfControllerProperty (@lstring controllerName, @lstring propertyName) :
    inBoundModelPropertyMap.searchKey
      (controllerName,
      ?let @propertyKind propertyKind,
      ?2*
    )
    switch propertyKind
    case property (2*) :
      error propertyName : "a property does not accept any option" spoil (outKind)
    case toMany (4*) :
      error propertyName : "a toMany property does not accept any option" spoil (outKind)
    case toOne (5*) :
      error propertyName : "a toOne property does not accept any option" spoil (outKind)
    case arrayController (typeName, graphic) :
      if (propertyName.string == "sortedArray") || (propertyName.string == "selectedArray") then
        outKind = .toMany (
          !typeName: typeName,
          !accessibility: .transient (!isAbstract: false),
          !graphic: graphic,
          !optionKind: .none
        )
      else
        error propertyName
          : "unknown option (accepted : 'sortedArray' or 'selectedArray')"
          spoil (outKind)
          fixit ( %replaceBy "sortedArray", %replaceBy "selectedArray" )
      end
    case selectionController (entityName) :
      inSemanticContext.mClassMap.searchKey (
        .init (entityName, controllerName.location),
        ?*,
        ?let observablePropertyMap,
        ?2*
      )
      observablePropertyMap.searchKey (propertyName, ?outKind, ?2*)
    end
    outSwiftTypeStringForTransientFunctionArgument = outKind.swiftTypeName
  case selfControllerSecondaryProperty (@lstring controllerName, @lstring propertyName, @lstring secondaryPropertyName) :
    inBoundModelPropertyMap.searchKey (controllerName, ?3*)
    if (propertyName.string == "sortedArray") && (secondaryPropertyName.string == "count") then
      outKind = .property (!type: .integerType, !accessibility: .transient (!isAbstract: false))
    elsif (propertyName.string == "selectedArray") && (secondaryPropertyName.string == "count") then
      outKind = .property (!type: .integerType, !accessibility: .transient (!isAbstract: false))
    else
      error propertyName : "unknown option" spoil (outKind) fixit ( %replaceBy "sortedArray", %replaceBy "selectedArray" )
    end
    outSwiftTypeStringForTransientFunctionArgument = outKind.swiftTypeName
  case selfControllerOneProperty (@lstring controllerName, @lstring propertyName) :
    inBoundModelPropertyMap.searchKey (controllerName, ?let @propertyKind propertyKind, ?2*)
    let @string controllerTypeName = ""
    switch propertyKind
    case arrayController (2*) :
      error controllerName : "an array controller does not support 'one'"
    case selectionController (*) :
      error controllerName : "a selection controller does not support 'one'"
    case property (2*) :
      error controllerName : "a property does not support 'one'"
    case toMany (4*) :
      error controllerName : "a toMany relationship does not support 'one'"
    case toOne (5*) :
      error controllerName : "a toOne relationship does not support 'one'"
    end
    inSemanticContext.mClassMap.searchKey (
      .init (controllerTypeName, controllerName.location),
      ?*,
      ?let observablePropertyMap,
      ?2*
    )
   observablePropertyMap.searchKey (propertyName, ?outKind, ?2*)
    outSwiftTypeStringForTransientFunctionArgument = controllerTypeName + "?<<8>>"
  case selfControllerAllProperties (@lstring controllerName, @lstring propertyName, @lstring secondaryPropertyName) :
    inBoundModelPropertyMap.searchKey (controllerName, ?let @propertyKind propertyKind, ?2*)
    if propertyName.string != "selectedArray" then
      error propertyName : "unknown property"
        spoil (outKind, outSwiftTypeStringForTransientFunctionArgument)
        fixit ( %replaceBy "selectedArray" )
    else
      outKind = .property (!type: .integerType, !accessibility: .transient (!isAbstract: false))
      switch propertyKind
      case property (2*) :
        error propertyName
          : "a property does not accept any option"
          spoil (outKind, outSwiftTypeStringForTransientFunctionArgument)
      case toMany (4*) :
        error propertyName
         : "a toMany property does not accept any option" 
         spoil (outKind, outSwiftTypeStringForTransientFunctionArgument)
      case toOne (5*) :
        error propertyName
          : "a toOne property does not accept any option"
          spoil (outKind, outSwiftTypeStringForTransientFunctionArgument)
      case arrayController (typeName, *) :
         inSemanticContext.mClassMap.searchKey (
          .init (typeName, controllerName.location),
          ?*,
          ?let observablePropertyMap,
          ?2*
        )
        observablePropertyMap.searchKey (secondaryPropertyName, ?outKind,?2*)
        outSwiftTypeStringForTransientFunctionArgument = "[" + typeName + "_" + secondaryPropertyName + "]"
      case selectionController (entityName) :
        inSemanticContext.mClassMap.searchKey (
          .init (entityName, controllerName.location),
          ?*,
          ?let observablePropertyMap,
          ?2*
        )
        observablePropertyMap.searchKey (secondaryPropertyName, ?outKind, ?2*)
         outSwiftTypeStringForTransientFunctionArgument = "[" + entityName + "_" + secondaryPropertyName + "]"
     end
    end
  case superProperty (*, @lstring propertyName) :
    inBoundModelPropertyMap.searchKey
      (propertyName,
      ?outKind,
      ?2*
    )
    switch outKind
    case property (2*) :
      outSwiftTypeStringForTransientFunctionArgument = outKind.swiftTypeName
    case toMany (4*) :
      outSwiftTypeStringForTransientFunctionArgument = "[AnyObject]"
    case toOne (5*) :
      outSwiftTypeStringForTransientFunctionArgument = "AnyObject?"
    case arrayController (2*) :
      error propertyName : "an array controller cannot be observed" spoil (outSwiftTypeStringForTransientFunctionArgument)
    case selectionController (*) :
      error propertyName : "a selection controller cannot be observed" spoil (outSwiftTypeStringForTransientFunctionArgument)
    end
  case superPropertyWithDefaultValue (*, @lstring propertyName, defaultValue) :
    inBoundModelPropertyMap.searchKey
      (propertyName,
      ?outKind,
      ?2*
    )
    switch outKind
    case property (propertyType, *) :
      outSwiftTypeStringForTransientFunctionArgument = outKind.swiftTypeName
      inSemanticContext.mClassMap.searchKey (.init (preferencesName (), .nowhere), ?*, ?let preferencesPropertyMap, ?2*)
      defaultValue.analyzeDefaultValueType (
        [.init (propertyType)],
        preferencesPropertyMap,
        ?outDefaultValue
      )
    case toMany (4*) :
      outSwiftTypeStringForTransientFunctionArgument = "[AnyObject]"
    case toOne (5*) :
      outSwiftTypeStringForTransientFunctionArgument = "AnyObject?"
    case arrayController (2*) :
      error propertyName : "an array controller cannot be observed" spoil (outSwiftTypeStringForTransientFunctionArgument)
    case selectionController (*) :
      error propertyName : "a selection controller cannot be observed" spoil (outSwiftTypeStringForTransientFunctionArgument)
    end
  end  
}

//----------------------------------------------------------------------------------------------------------------------

