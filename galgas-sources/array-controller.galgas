#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @arrayControllerBoundColumnListAST {
  @lstring mColumnName
  @lstring mColumnOutletTypeName
  @columnBindingAST mColumnBindingAST
  @lstring mSortPropertyName
}

#·······················································································································

struct @columnBindingAST {
  @lstring mRunActionName # Empty string if no run binding
  @multipleBindingDescriptor mEnabledBindingDescriptor
  @multipleBindingDescriptor mHiddenBindingDescriptor
  @regularBindingList mRegularBindingList
}

#·······················································································································

list @arrayControllerAttributListAST {
  @lstring mAttributeName
  @abstractDefaultValue mAttributeValue
}

#·······················································································································

enum @arrayControllerModel {
  case toMany (@bool isRoot @lstring collectionPropertyName)
  case controller (@bool isRoot @lstring controllerName @lstring propertyName)
}

#·······················································································································

class @arrayControllerDeclaration : @abstractSecondaryProperty {
  @lstring mControllerName
  @bool mIsRoot
  @lstring mToManyPropertyName
  @lstringlist mFilterProperties
  @arrayControllerBoundColumnListAST mArrayControllerBoundColumnListAST
  @arrayControllerAttributListAST mArrayControllerAttributListAST
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension easyBindings_syntax {

  #·····················································································································
  
  rule <controller_declaration>
    ?!@secondaryPropertyList ioSecondaryPropertyList
  {
    $arrayController$
    $identifier$ ?let @lstring controllerName
    @arrayControllerAttributListAST arrayControllerAttributListAST = {}
    ${$
    repeat
      $identifier$ ?let @lstring attributeName
      $:$
      <explicit_value> ?let @abstractDefaultValue attributeValue
      arrayControllerAttributListAST += !attributeName !attributeValue
    while
      $,$
    end
    $}$
  #--- Model
    @bool isRoot
    select
      $root$
      isRoot = true
    or
      $self$
      isRoot = false
    end
    $.$
    $identifier$ ?let @lstring relationshipName
    @lstringlist filterProperties = {}
    select
    or
      $filter$
      repeat
        $identifier$ ?let @lstring filterProperty
        filterProperties += !filterProperty
      while
        $,$
      end
    end
    @arrayControllerBoundColumnListAST arrayControllerBoundColumnListAST = {}
    select
      $;$
    or
      ${$
      repeat
      while
        $column$
        $literal_string$ ?let columnName
        @lstring sortPropertyName
        select
          sortPropertyName = ["" nowhere]
        or
          $sort$
          $identifier$ ?sortPropertyName
        end
        $Identifier$ ?let columnOutletTypeName
        <column_bindings> ?let @columnBindingAST columnBindingAST
        arrayControllerBoundColumnListAST +=
          !columnName
          !columnOutletTypeName
          !columnBindingAST
          !sortPropertyName
      end
      $}$
    end
    ioSecondaryPropertyList += !@arrayControllerDeclaration.new {
      !controllerName
      !isRoot
      !relationshipName
      !filterProperties
      !arrayControllerBoundColumnListAST
      !arrayControllerAttributListAST
    }
  }

#·······················································································································

  rule <column_bindings> !@columnBindingAST outColumnBindingAST {
    @lstring runActionDescriptor = ["" nowhere]
    var enabledBindingDescriptor = @multipleBindingDescriptor.noBinding
    var hiddenBindingDescriptor = @multipleBindingDescriptor.noBinding
    @regularBindingList regularBindingList = {}
    repeat
    while
      $run$
      if runActionDescriptor.string != "" then
        error .here : "duplicated $run binding"
      end
      $self$
      $.$
      $identifier$ ?runActionDescriptor
  #--- Enabled
    while
      $enabled$
      if enabledBindingDescriptor != .noBinding then
        error .here : "duplicated $enabled binding"
      end
      <booleanMultipleBindingExpression> ?let @abstractBooleanMultipleBindingExpressionAST bindingExpression
      enabledBindingDescriptor = .binding {!expression:bindingExpression}
  #--- Hidden
    while
      $hidden$
      if hiddenBindingDescriptor != .noBinding then
        error .here : "duplicated $hidden binding"
      end
      <booleanMultipleBindingExpression> ?let @abstractBooleanMultipleBindingExpressionAST bindingExpression
      hiddenBindingDescriptor = .binding {!expression:bindingExpression}
  #--- Regular binding
    while
      $bindingName$ ?let @lstring bindingName
      @observablePropertyList observablePropertyList = {}
      repeat
        <observable_property> ?let @observablePropertyAST observableProperty
        observablePropertyList += !observableProperty
      while
        $,$
      end
      <binding_option_list> ?let bindingOptions
      regularBindingList +=
        !bindingName
        !observablePropertyList
        !bindingOptions
    end
  #---
    outColumnBindingAST = @columnBindingAST.new {
      !runActionDescriptor
      !enabledBindingDescriptor
      !hiddenBindingDescriptor
      !regularBindingList
    }
  }
  
  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @arrayControllerDeclaration typeInventory
  ?!@unifiedTypeMap unused ioUnifiedTypeMap
{
}

#·······················································································································

override method @arrayControllerDeclaration tryToDefineSecondaryProperty
  ?!@semanticContext unused ioSemanticContext
  ?let @observablePropertyMap inRootObservableProperties
  ?!@observablePropertyMap ioObservableProperties
  ?!@secondaryPropertyList ioUnsolvedProperties
  ?!@simpleStoredPropertyListForGeneration unused ioSimpleStoredPropertyListForGeneration
{
  let observablePropertyMap = if mIsRoot then inRootObservableProperties else ioObservableProperties end
  if [observablePropertyMap hasKey !mToManyPropertyName.string] then
    [observablePropertyMap searchKey
      !mToManyPropertyName
      ?let kind
      ?3*
    ]
    @actionMap controllerActions = {}
    @propertyKind arrayControllerKind
    switch kind 
    case property (2*) :
      error mToManyPropertyName : "an atomic property is not a collection" : arrayControllerKind
    case toMany (type typeName * graphic) :
      arrayControllerKind = .arrayController {!type: type !typeName: typeName !graphic: graphic}
      [!?controllerActions insertKey !["add" nowhere]]
      [!?controllerActions insertKey !["remove" nowhere]]
    case toOne (4*) :
      error mToManyPropertyName : "a toOne property is not a collection" : arrayControllerKind
    case arrayController (3*) :
      error mToManyPropertyName : "Array Controller ????" : arrayControllerKind
    case selectionController (2*) :
      error mToManyPropertyName : "Selection Controller ????" : arrayControllerKind
     end
    [!?ioObservableProperties insertKey
      !mControllerName
      !arrayControllerKind
      !""
      !controllerActions
      !false
    ]
  else
    ioUnsolvedProperties += !self
  end
}

#·······················································································································

override method @arrayControllerDeclaration secondaryPropertySemanticAnalysis
  ?let @string inOwnerName
  ?let @string unused inRootEntityName
  ?let @observablePropertyMap inRootObservableProperties
  ?let @semanticContext inSemanticContext
  ?let @observablePropertyMap inObservableProperties
  ?!@transientDefinitionListForGeneration unused ioTransientDefinitionListForGeneration
  ?!@arrayControllerForGeneration ioArrayControllerForGeneration
  ?!@selectionControllerForGeneration unused ioSelectionControllerForGeneration
  ?!@stringset ioNeededOutletClasses
{
#------------------------------------------------------------ Check array controller attributes
  let attributes = @stringset {!"allowsEmptySelection", !"allowsMultipleSelection"}
  let allowedTypes = @typeKindList {!.boolType}
  @stringset definedAttributes = {}
  @2stringlist attributeListForGeneration = {}
  for (name value) in mArrayControllerAttributListAST do
    if not [attributes hasKey !name.string] then
      error name : "unknown attribute"
    elsif [definedAttributes hasKey !name.string] then
      error name : "attribute multiply defined"
    else
      definedAttributes += !name.string
    end
    [value analyzeDefaultValueType !allowedTypes ?let valueAsString]
    attributeListForGeneration += !name.string !valueAsString
  end
  for s in attributes do
    if not [definedAttributes hasKey !s] then
      error mControllerName : "attribute '" + s + "' not defined"
    end
  end
#------
  let observablePropertyMap = if mIsRoot then inRootObservableProperties else inObservableProperties end
  [observablePropertyMap searchKey
    !mToManyPropertyName
    ?let kind
    ?*
    ?let actionMap
    ?*
  ]
  @string entityName
  @arrayControllerModelKind modelKind
  @bool entityTypeIsGraphic
  switch kind 
  case property (2*) :
    error mToManyPropertyName : "a to many property is required here" : entityName, entityTypeIsGraphic, modelKind
  case toMany (* typeName accessibility graphic) :
    entityName = typeName
    entityTypeIsGraphic = graphic
    modelKind = if [accessibility isTransient] then .transientArray else  if [[kind propertyType] isEntityType] then .entityArray else .classArray end end
  case toOne (4*) :
    error mToManyPropertyName : "a to many property is required here" : entityName, entityTypeIsGraphic, modelKind
  case arrayController (3*) :
    error mToManyPropertyName : "a to many property is required here" : entityName, entityTypeIsGraphic, modelKind
  case selectionController (2*) :
    error mToManyPropertyName : "a to many property is required here" : entityName, entityTypeIsGraphic, modelKind
  end
#------------------------------------------------------------ Check colum bound models
# (TODO : get also super entity observable property)
  [inSemanticContext.mEntityObservablePropertyMap searchKey
    ![entityName nowhere]
    ?let @observablePropertyMap boundModelObservablePropertyMap
    ?*
  ]
  @arrayControllerBoundColumnListForGeneration arrayControllerBoundColumnListForGeneration = {}
  @arrayControllerSortedColumnListForGeneration arrayControllerSortedColumnListForGeneration = {}
  for () in mArrayControllerBoundColumnListAST do
  #-------- Run action ? Check action is declared
    if mColumnBindingAST.mRunActionName.string != "" then
      [actionMap searchKey !mColumnBindingAST.mRunActionName]
    end
  #-------- Simple bindings
    @regularBindingsGenerationList regularBindingsGenerationList = {}
    analyzeRegularBinding (
      !{} # No root observable property map
      !inSemanticContext
      !boundModelObservablePropertyMap
      !mColumnOutletTypeName
      !"<<not used>>"
      !mColumnBindingAST.mRegularBindingList
      !"object"
      !?regularBindingsGenerationList
    )
  #-------- Sort property
    if mSortPropertyName.string != "" then
      [boundModelObservablePropertyMap searchKey
        !mSortPropertyName
        ?let sortPropertyKind
        ?3*
      ]
      let sortPropertyType = [sortPropertyKind propertyType]
      if not [sortPropertyType isComparable] then
        error mSortPropertyName : "this property is not comparable"
      end 
      arrayControllerSortedColumnListForGeneration +=    
        !mColumnName.string
        !sortPropertyType
        !mSortPropertyName.string
    end
  #-------- Binding generation
    arrayControllerBoundColumnListForGeneration +=
      !mColumnName.string
      !mColumnOutletTypeName.string
      !mColumnBindingAST.mRunActionName.string
      !regularBindingsGenerationList
    ioNeededOutletClasses += !mColumnOutletTypeName.string
  end
#------------------------------------------------------------ Check filter properties
  @arrayControllerFilterListForGeneration arrayControllerFilterListForGeneration = {}
  for (filterPropertyName) in mFilterProperties do
    [boundModelObservablePropertyMap searchKey
      !filterPropertyName
      ?let @propertyKind columnKind
      ?3*
    ]
    arrayControllerFilterListForGeneration += !filterPropertyName.string ![columnKind propertyType]
  end
  let modelString = if mIsRoot
    then "self.rootObject." + mToManyPropertyName + "_property"
    else "self." + mToManyPropertyName + "_property"
  end
#---
  ioArrayControllerForGeneration +=
    !inOwnerName
    !mControllerName
    !arrayControllerFilterListForGeneration
    !modelString
    !arrayControllerBoundColumnListForGeneration
    !arrayControllerSortedColumnListForGeneration
    !"ReadWriteArrayOf_" + [kind swiftTypeName]
    !modelKind
    ![kind swiftTypeName]
    !entityTypeIsGraphic
    !attributeListForGeneration
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   GENERATION TYPES
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @arrayControllerModelKind {
  case entityArray
  case classArray
  case transientArray
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @arrayControllerForGeneration {
  @string mOwnerName # document name, prefs name, ...
  @lstring mControllerName
  @arrayControllerFilterListForGeneration mArrayControllerFilterListForGeneration
  @string mModelString
  @arrayControllerBoundColumnListForGeneration mArrayControllerBoundColumnListForGeneration
  @arrayControllerSortedColumnListForGeneration mArrayControllerSortedColumnListForGeneration
  @string mModelTypeName
  @arrayControllerModelKind mArrayControllerModelKind
  @string mElementTypeName
  @bool mElementTypeIsGraphic
  @2stringlist mAttributeListForGeneration
}

#·······················································································································

list @arrayControllerFilterListForGeneration {
  @string mFilterPropertyName
  @typeKind mFilterPropertyType
}

#·······················································································································

list @arrayControllerBoundColumnListForGeneration {
  @string mColumnName
  @string mColumnOutletTypeName
  @string mRunAction # Empty string if no action
  @regularBindingsGenerationList mRegularBindingsGenerationList
}

#·······················································································································

list @arrayControllerSortedColumnListForGeneration {
  @string mColumnName
  @typeKind mSortPropertyType
  @string mObservablePropertyForSorting
}

#·······················································································································

getter @arrayControllerFilterListForGeneration filterCode ?let @string inFilterFunction -> @string outResult {
  var filterProperties = self
  [!?filterProperties popFirst ?let firstFilterProperty ?*]
  @string indent = "            "
  outResult  = indent + "switch object." + firstFilterProperty + "_property_selection {\n"
  outResult += indent + "case .empty :\n"
  outResult += indent + "  return .empty\n"
  outResult += indent + "case .multiple :\n"
  outResult += indent + "  isMultiple = true\n"
  outResult += indent + "case .single (let v1) :\n"
  @uint idx = 2
  @string args = ""
  @string blockEnd = indent + "}\n"
  for () in filterProperties do
    indent += "  "
    outResult += indent + "switch object." + mFilterPropertyName + "_property_selection {\n"
    outResult += indent + "case .empty :\n"
    outResult += indent + "  return .empty\n"
    outResult += indent + "case .multiple :\n"
    outResult += indent + "  isMultiple = true\n"
    outResult += indent + "case .single (let v" + idx + ") :\n"
    blockEnd = indent + "}\n" + blockEnd
    args += ", v" + idx
    idx ++
  end
  indent += "  "
  outResult += indent + "if " + inFilterFunction + " (v1" + args + ") {\n"
  outResult += indent + "  filteredArray.append (object)\n"
  outResult += indent + "}\n"
  outResult += blockEnd
}

#·······················································································································

private filewrapper collectionControllerGenerationTemplate in "../generation-templates/controllers" {
}{
}{
  template arrayControllerImplementationInSwift "array-controller.swift.galgasTemplate"
    ?@string OWNER_NAME
    ?@string ARRAY_CONTROLLER_NAME
    ?@arrayControllerFilterListForGeneration FILTER_PROPERTIES
    ?@string MODEL_STRING
    ?@arrayControllerModelKind MODEL_KIND
    ?@string MODEL_TYPE_NAME
    ?@arrayControllerBoundColumnListForGeneration BOUND_COLUMNS
    ?@arrayControllerSortedColumnListForGeneration SORTED_COLUMNS
    ?@string ELEMENT_TYPE_NAME
    ?@bool ELEMENT_TYPE_IS_GRAPHIC
    ?@stringset OBSERVED_PROPERTIES_FOR_SORTING_AND_FILERING
    ?@2stringlist ATTRIBUTE_VALUES

  template filterFunction "array-controller-filter-function.swift.galgasTemplate"
    ?@string OWNER_NAME
    ?@string ARRAY_CONTROLLER_NAME
    ?@arrayControllerFilterListForGeneration FILTER_PROPERTIES
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc generateArrayControllers
  ?let @arrayControllerForGeneration inArrayControllerListForGeneration
  ?let @string inOutputDirectory
  ?!@stringset ioGeneratedFileSet
{
  for () in inArrayControllerListForGeneration do
  #--- Build observed property set (for sorting and filtering)
    @stringset observedProperties = {}
    for () in mArrayControllerSortedColumnListForGeneration do
      observedProperties += !mObservablePropertyForSorting
    end
    for () in mArrayControllerFilterListForGeneration do
      observedProperties += !mFilterPropertyName
    end
    let s = [filewrapper collectionControllerGenerationTemplate.arrayControllerImplementationInSwift
      !mOwnerName
      !mControllerName
      !mArrayControllerFilterListForGeneration
      !mModelString
      !mArrayControllerModelKind
      !mModelTypeName
      !mArrayControllerBoundColumnListForGeneration
      !mArrayControllerSortedColumnListForGeneration
      !mElementTypeName
      !mElementTypeIsGraphic
      !observedProperties
      !mAttributeListForGeneration
    ]
    [@string generateFile
      !inOutputDirectory
      !"arrayController-" + mOwnerName + "-" +  mControllerName + ".swift"
      !s
    ]
    if [mArrayControllerFilterListForGeneration length] > 0 then
    let s = [filewrapper collectionControllerGenerationTemplate.filterFunction
      !mOwnerName
      !mControllerName
      !mArrayControllerFilterListForGeneration
    ]
    let fileName = "arrayControllerFilter-" + mOwnerName + "-" +  mControllerName + ".swift"
    ioGeneratedFileSet += !fileName
    [@string generateFileWithPattern
      !startPath:inOutputDirectory
      !fileName:fileName
      !lineComment:"//"
      !header:""
      !defaultUserZone1:"\n\n" # Defaut user zone1
      !generatedZone2:s
      !defaultUserZone2:"  return WHAT ?\n" # Defaut user zone2
      !generatedZone3:"}\n\n//" + ["" stringByRightPadding !117 !'—'] + "\n"
      !makeExecutable:false
    ]
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
