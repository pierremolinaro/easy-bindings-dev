#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @arrayControllerDeclarationAST : @abstractDeclarationAST {
  @lstring mControllerName
  @arrayControllerBoundModelAST mModel
  @lstring mToManyPropertyName
}

#·······················································································································

enum @arrayControllerBoundModelAST {
  case rootToManyRelationship (@lstring rootEntityName)
  case selfObjectControllerToManyRelationship (@lstring objectControllerName)
  case selfToManyRelationship
}

#·······················································································································

override method @arrayControllerDeclarationAST enterInPrecedenceGraph ?!@declarationPrecedenceGraph ioGraph {
  let node = @lstring.new {!mClassName.string + " " + mControllerName !mControllerName.location}
  [!?ioGraph addNode !node !self]
  [!?ioGraph addEdge !node !mClassName]
  switch mModel 
  case rootToManyRelationship (@lstring rootEntityName) :
    if rootEntityName.string != "" then
      [!?ioGraph addEdge !node !.new {!rootEntityName.string + " " + mToManyPropertyName !mToManyPropertyName.location}]
    end
  case selfToManyRelationship :
    [!?ioGraph addEdge !node !.new {!mClassName.string + " " + mToManyPropertyName !mToManyPropertyName.location}]
  case selfObjectControllerToManyRelationship (@lstring objectControllerName) :
    [!?ioGraph addEdge !node !.new {!mClassName.string + " " + objectControllerName !mToManyPropertyName.location}]
  end
}

#·······················································································································

override getter @arrayControllerDeclarationAST lkey -> @lstring {
  result = @lstring.new {!mClassName.string + " " + mControllerName !mControllerName.location}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension easyBindings_syntax {

  #·····················································································································
  
  rule <controller_declaration>
            ?let @lstring inCurrentEntity
            ?let @lstring inRootEntity
            ?!@astDeclarationStruct ioDeclarationAST
  {
    $arrayController$
    $identifier$ ?let @lstring controllerName
  #--- Model
    @arrayControllerBoundModelAST model
    $:$
    select
      $identifier$ ?let @lstring objectControllerName
      model = .selfObjectControllerToManyRelationship {!objectControllerName: objectControllerName}
    or
      $root$
      model = .rootToManyRelationship {!rootEntityName: inRootEntity}
    or
      $self$
      model = .selfToManyRelationship
    end
    $.$
    $identifier$ ?let @lstring relationshipName
    $;$
    ioDeclarationAST.mUnifiedDeclarationList += !@arrayControllerDeclarationAST.new {
      !inCurrentEntity
      !controllerName
      !model
      !relationshipName
    }
  }
  
  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   CLASS AND PROPERTY SEMANTIC ANALYSIS                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @arrayControllerDeclarationAST firstAnalysisPhase 
       ?!@semanticContext ioSemanticContext
       ?!@generationStruct unused ioGeneration
{
  with mClassName in !?ioSemanticContext.mClassMap 
    error message searchKey
  do
    let @actionMap controllerActions = {!["add" nowhere], !["remove" nowhere] }
    switch mModel
    case rootToManyRelationship (@lstring rootEntityName) :
      [ioSemanticContext.mClassMap searchKey !rootEntityName ?* ?let rootProperties ?2*]
      [rootProperties searchKey !mToManyPropertyName ?let classKind ?*]
      switch classKind
      case property (2*) :
        error rootEntityName : "a toMany relationship is required here"
      case toMany (typeName * graphic *) :
        let kind = @propertyKind.arrayController {
          !typeName: typeName
          !graphic: graphic
        }
        [!?mPropertyMap insertKey !mControllerName !kind !controllerActions]
    #--- Code Generation
      mPropertyGenerationList += !@arrayControllerPropertyGeneration.new {
        !mControllerName.string
        !"rootObject." + mToManyPropertyName
        !mClassName
      }
      case toOne (4*) :
        error rootEntityName : "a toMany relationship is required here"
      case arrayController (2*) :
        error rootEntityName : "a toMany relationship is required here"
      case objectController (2*) :
        error rootEntityName : "a toMany relationship is required here"
      case selectionController (*) :
        error rootEntityName : "a toMany relationship is required here"
      end
    case selfToManyRelationship :
      [mPropertyMap searchKey !mToManyPropertyName ?let classKind ?*]
      switch classKind
      case property (2*) :
        error mToManyPropertyName : "a toMany relationship is required here"
      case toMany (typeName * graphic *) :
        let kind = @propertyKind.arrayController {
          !typeName: typeName
          !graphic: graphic
        }
        [!?mPropertyMap insertKey !mControllerName !kind !controllerActions]
    #--- Code Generation
      mPropertyGenerationList += !@arrayControllerPropertyGeneration.new {
        !mControllerName.string
        !mToManyPropertyName
        !mClassName
      }
      case toOne (4*) :
        error mToManyPropertyName : "a toMany relationship is required here"
      case arrayController (2*) :
        error mToManyPropertyName : "a toMany relationship is required here"
      case objectController (2*) :
        error mToManyPropertyName : "a toMany relationship is required here"
      case selectionController (*) :
        error mToManyPropertyName : "a toMany relationship is required here"
      end
    case selfObjectControllerToManyRelationship (@lstring objectControllerName) :
      [mPropertyMap searchKey !objectControllerName ?let classKind ?*]
      switch classKind
      case property (2*) :
        error mToManyPropertyName : "an object controller is required here"
      case toMany (4*) :
        error mToManyPropertyName : "an object controller is required here"
      case toOne (4*) :
        error mToManyPropertyName : "an object controller is required here"
      case arrayController (2*) :
        error mToManyPropertyName : "an object controller is required here"
      case objectController (@lstring typeName2 *) :
        [ioSemanticContext.mClassMap searchKey !typeName2 ?* ?let rootProperties ?2*]
        [rootProperties searchKey !mToManyPropertyName ?let classKind ?*]
        switch classKind
        case property (2*) :
          error mToManyPropertyName : "a toMany relationship is required here"
        case toMany (typeName * graphic *) :
          let kind = @propertyKind.arrayController {
            !typeName: typeName
            !graphic: graphic
          }
          [!?mPropertyMap insertKey !mControllerName !kind !controllerActions]
        #--- Code Generation
          mPropertyGenerationList += !@arrayControllerPropertyGeneration.new {
            !mControllerName.string
            !objectControllerName.string + "." + mToManyPropertyName
            !mClassName
          }
        case toOne (4*) :
          error mToManyPropertyName : "a toMany relationship is required here"
        case arrayController (2*) :
          error mToManyPropertyName : "a toMany relationship is required here"
        case objectController (2*) :
          error mToManyPropertyName : "a toMany relationship is required here"
        case selectionController (*) :
          error mToManyPropertyName : "a toMany relationship is required here"
        end

      case selectionController (*) :
        error mToManyPropertyName : "an object controller is required here"
      end
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SECOND ANALYSIS PHASE
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @arrayControllerDeclarationAST secondAnalysisPhase
       ?!@semanticContext ioSemanticContext
       ?!@generationStruct ioGeneration
{
  @propertyMap boundModelPropertyMap
  switch mModel
  case rootToManyRelationship (@lstring rootEntityName) :
    [ioSemanticContext.mClassMap searchKey
       !rootEntityName
       ?*
       ?boundModelPropertyMap 
       ?2*
    ]
  case selfToManyRelationship :
    [ioSemanticContext.mClassMap searchKey
       !mClassName
       ?*
       ?boundModelPropertyMap 
       ?2*
     ]  
  case selfObjectControllerToManyRelationship (@lstring objectControllerName) :
    [ioSemanticContext.mClassMap searchKey
       !mClassName
       ?*
       ?let propertyMap 
       ?2*
    ]  
    [propertyMap searchKey !objectControllerName ?let boundModelClassKind ?*]
    if [boundModelClassKind isObjectController] then
      [boundModelClassKind objectController ?typeName: let objectControllerTypeName ?1*]
      [ioSemanticContext.mClassMap searchKey
       !objectControllerTypeName
       ?*
       ?boundModelPropertyMap 
       ?2*
      ]  
    else
      error objectControllerName : "an object controller is required here" : boundModelPropertyMap
    end
  end
  [boundModelPropertyMap searchKey
     !mToManyPropertyName
     ?let boundModelClassKind
     ?*
  ]
#------------------------------------------------------------ Check colum bound models
  @actionMap actionMap
  @propertyMap propertyMap
  @arrayControllerModelKind arrayControllerModelKind
  @bool graphic
  @string elementTypeName
  switch boundModelClassKind
  case property (2*) :
    error mToManyPropertyName
      : "a toMany property is required here"
      : graphic, arrayControllerModelKind, propertyMap, actionMap, elementTypeName
  case toMany (typeName accessibility isGraphic *) :
    elementTypeName = typeName
    graphic = isGraphic
    arrayControllerModelKind = if [accessibility isTransient]
      then .transientArray
      else .entityArray
    end
    [ioSemanticContext.mClassMap searchKey !typeName ?* ?propertyMap ?actionMap ?*]
  case toOne (4*) :
    error mToManyPropertyName
      : "a toMany property is required here"
      : graphic, arrayControllerModelKind, propertyMap, actionMap, elementTypeName
  case arrayController (2*) :
    error mToManyPropertyName
      : "a toMany property is required here"
      : graphic, arrayControllerModelKind, propertyMap, actionMap, elementTypeName
  case objectController (2*) :
    error mToManyPropertyName
      : "a toMany property is required here"
      : graphic, arrayControllerModelKind, propertyMap, actionMap, elementTypeName
  case selectionController (*) :
    error mToManyPropertyName
      : "a toMany property is required here"
      : graphic, arrayControllerModelKind, propertyMap, actionMap, elementTypeName
  end
#---
  ioGeneration.mFileGenerationList += !@arrayControllerGeneration.new {
    !mClassName
    !mControllerName
    !"ReadWriteArrayOf_" + elementTypeName
    !arrayControllerModelKind
    !elementTypeName
    !graphic
  }
}


#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   CODE GENERATION                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @arrayControllerPropertyGeneration : @propertyGeneration {
  @string mModelString
  @string mOwnerName
}

#·······················································································································

override getter @arrayControllerPropertyGeneration propertyDeclarationCode ?let @stringset unused inOverriddenTransients -> @string {
  result  = "  //" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n"
  result += "  //   Array controller: " + mPropertyName + "\n"
  result += "  //" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n\n"
  result += "  var " + mPropertyName + " = Controller_" + mOwnerName + "_" + mPropertyName + " ()\n\n"
}

#·······················································································································

override getter @arrayControllerPropertyGeneration configurationCode -> @string {
  result  = "  //--- Array controller property: " + mPropertyName + "\n"
  result += "    self." + mPropertyName + ".bind_model (self." + mModelString + "_property)\n"
}

#·······················································································································

override getter @arrayControllerPropertyGeneration populateExplorerWindowCode -> @string {
  result  = "  //--- Array controller property: " + mPropertyName + "\n"
  result += "    self." + mPropertyName + ".addExplorer (name: \"" + mPropertyName + "\", y:&y, view:view)\n"
}

#·······················································································································

override getter @arrayControllerPropertyGeneration terminationCode -> @string {
  result  = "  //--- Array controller property: " + mPropertyName + "\n"
  result += "    self." + mPropertyName + ".unbind_model ()\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   GENERATION TYPES
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @arrayControllerModelKind {
  case entityArray
  case transientArray
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @arrayControllerGeneration : @abstractFileGeneration {
  @string mOwnerName # document name, prefs name, ...
  @lstring mControllerName
  @string mModelTypeName
  @arrayControllerModelKind mArrayControllerModelKind
  @string mElementTypeName
  @bool mElementTypeIsGraphic
}

#·······················································································································

private filewrapper arrayControllerGenerationTemplate in "../generation-templates/controllers" {
}{
}{
  template arrayControllerImplementationInSwift "array-controller.swift.galgasTemplate"
    ?@string OWNER_NAME
    ?@string ARRAY_CONTROLLER_NAME
    ?@arrayControllerModelKind MODEL_KIND
    ?@string MODEL_TYPE_NAME
    ?@string ELEMENT_TYPE_NAME
    ?@bool ELEMENT_TYPE_IS_GRAPHIC
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @arrayControllerGeneration generateCode
    ?let @string inOutputDirectory
    ?!@stringset unused ioGeneratedFileSet
{
#--- Build observed property set (for sorting and filtering)
  let s = [filewrapper arrayControllerGenerationTemplate.arrayControllerImplementationInSwift
    !mOwnerName
    !mControllerName
    !mArrayControllerModelKind
    !mModelTypeName
    !mElementTypeName
    !mElementTypeIsGraphic
  ]
  [@string generateFile
    !inOutputDirectory
    !"controller-array-" + mOwnerName + "-" +  mControllerName + ".swift"
    !s
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
