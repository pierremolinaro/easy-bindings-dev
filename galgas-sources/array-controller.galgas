#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   AST                                                                                                                *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

list @arrayControllerBoundColumnListAST {
  @lstring mColumnName
  @lstring mColumnOutletTypeName
  @columnBindingAST mColumnBindingAST
  @lstring mSortPropertyName
}

#·······················································································································

struct @columnBindingAST {
  @lstring mRunActionName # Empty string if no run binding
  @multipleBindingDescriptor mEnabledBindingDescriptor
  @multipleBindingDescriptor mHiddenBindingDescriptor
  @regularBindingList mRegularBindingList
}

#·······················································································································

list @arrayControllerAttributListAST {
  @lstring mAttributeName
  @abstractDefaultValue mAttributeValue
}

#·······················································································································

enum @arrayControllerModel {
  case rootToManyRelationship (@lstring rootRelationshipName)
  case selfCollection (@lstring collectionPropertyName)
  case controllerArray (@lstring controllerName @lstring propertyName)
}

#·······················································································································

class @arrayControllerDeclaration : @abstractSecondaryProperty {
  @lstring mControllerName
  @arrayControllerModel mArrayControllerModel
  @lstringlist mFilterProperties
  @arrayControllerBoundColumnListAST mArrayControllerBoundColumnListAST
  @arrayControllerAttributListAST mArrayControllerAttributListAST
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   SYNTAX                                                                                                             *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

syntax extension easyBindings_syntax {

  #·····················································································································
  
  rule <array_controller_declaration>
    ?!@secondaryPropertyList ioSecondaryPropertyList
  {
    $arrayController$
    $identifier$ ?let @lstring controllerName
    @arrayControllerAttributListAST arrayControllerAttributListAST = {}
    ${$
    repeat
      $identifier$ ?let @lstring attributeName
      $:$
      <explicit_value> ?let @abstractDefaultValue attributeValue
      arrayControllerAttributListAST += !attributeName !attributeValue
    while
      $,$
    end
    $}$
  #--- Model
    @arrayControllerModel arrayControllerModel
    select
      $root$
      $.$
      $identifier$ ?let @lstring relationshipName
      arrayControllerModel = .rootToManyRelationship {!rootRelationshipName:relationshipName}
    or
      $self$
      $.$
      $identifier$ ?let @lstring storedPropertyName
      arrayControllerModel = .selfCollection {!collectionPropertyName:storedPropertyName}
    or
      $identifier$ ?let @lstring controllerName
      $.$
      $identifier$ ?let @lstring propertyName
      arrayControllerModel = .controllerArray {!controllerName:controllerName !propertyName:propertyName}
    end
    @lstringlist filterProperties = {}
    select
    or
      $filter$
      repeat
        $identifier$ ?let @lstring filterProperty
        filterProperties += !filterProperty
      while
        $,$
      end
    end
    ${$
    @arrayControllerBoundColumnListAST arrayControllerBoundColumnListAST = {}
    repeat
    while
      $column$
      $literal_string$ ?let columnName
      @lstring sortPropertyName
      select
        sortPropertyName = ["" nowhere]
      or
        $sort$
        $identifier$ ?sortPropertyName
      end
      $Identifier$ ?let columnOutletTypeName
      <column_bindings> ?let @columnBindingAST columnBindingAST
      arrayControllerBoundColumnListAST +=
        !columnName
        !columnOutletTypeName
        !columnBindingAST
        !sortPropertyName
    end
    $}$
    ioSecondaryPropertyList += !@arrayControllerDeclaration.new {
      !controllerName
      !arrayControllerModel
      !filterProperties
      !arrayControllerBoundColumnListAST
      !arrayControllerAttributListAST
    }
  }

#·······················································································································

  rule <column_bindings> !@columnBindingAST outColumnBindingAST {
    @lstring runActionDescriptor = ["" nowhere]
    var enabledBindingDescriptor = @multipleBindingDescriptor.noBinding
    var hiddenBindingDescriptor = @multipleBindingDescriptor.noBinding
    @regularBindingList regularBindingList = {}
    repeat
    while
      $run$
      if runActionDescriptor.string != "" then
        error .here : "duplicated $run binding"
      end
      $self$
      $.$
      $identifier$ ?runActionDescriptor
  #--- Enabled
    while
      $enabled$
      if enabledBindingDescriptor != .noBinding then
        error .here : "duplicated $enabled binding"
      end
      <booleanMultipleBindingExpression> ?let @abstractBooleanMultipleBindingExpressionAST bindingExpression
      enabledBindingDescriptor = .binding {!expression:bindingExpression}
  #--- Hidden
    while
      $hidden$
      if hiddenBindingDescriptor != .noBinding then
        error .here : "duplicated $hidden binding"
      end
      <booleanMultipleBindingExpression> ?let @abstractBooleanMultipleBindingExpressionAST bindingExpression
      hiddenBindingDescriptor = .binding {!expression:bindingExpression}
  #--- Regular binding
    while
      $bindingName$ ?let @lstring bindingName
      @observablePropertyList observablePropertyList = {}
      repeat
        <observable_property> ?let @observablePropertyAST observableProperty
        observablePropertyList += !observableProperty
      while
        $,$
      end
      <binding_option_list> ?let bindingOptions
      regularBindingList +=
        !bindingName
        !observablePropertyList
        !bindingOptions
    end
  #---
    outColumnBindingAST = @columnBindingAST.new {
      !runActionDescriptor
      !enabledBindingDescriptor
      !hiddenBindingDescriptor
      !regularBindingList
    }
  }
  
  #·····················································································································

}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   SEMANTIC ANALYSIS                                                                                                  *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

override method @arrayControllerDeclaration typeInventory
  ?!@unifiedTypeMap unused ioUnifiedTypeMap
{
}

#·······················································································································

override method @arrayControllerDeclaration tryToSolveSecondaryProperty
  ?!@semanticContext unused ioSemanticContext
  ?let @observablePropertyMap inRootObservableProperties
  ?!@observablePropertyMap ioObservableProperties
  ?!@secondaryPropertyList ioUnsolvedProperties
{
  @bool solved
  switch mArrayControllerModel
  case selfCollection (@lstring storedPropertyName) :
    solved = [ioObservableProperties hasKey !storedPropertyName.string]
    if solved then
      [ioObservableProperties searchKey
        !storedPropertyName
        ?let type
        ?let kind
        ?let multiplicity
        ?2*
      ]
      @actionMap controllerActions = {}
      if kind == .stored then
        [!?controllerActions insertKey !["add" nowhere]]
        [!?controllerActions insertKey !["remove" nowhere]]
      end
      [!?ioObservableProperties insertKey
        !mControllerName
        !type
        !.arrayController
        !multiplicity
        !""
        !controllerActions
      ]
    end
  case rootToManyRelationship (@lstring relationshipName) :
    solved = [inRootObservableProperties hasKey !relationshipName.string]
    if solved then
      [inRootObservableProperties searchKey
        !relationshipName
        ?let type
        ?let kind
        ?let multiplicity
        ?2*
      ]
      @actionMap controllerActions = {}
      if kind == .stored then
        [!?controllerActions insertKey !["add" nowhere]]
        [!?controllerActions insertKey !["remove" nowhere]]
      end
      [!?ioObservableProperties insertKey
        !mControllerName
        !type
        !.arrayController
        !multiplicity
        !""
        !controllerActions
      ]
    end
  case controllerArray (@lstring controllerName @lstring unused propertyName) :
    solved = [ioObservableProperties hasKey !controllerName.string]
    if solved then
      [ioObservableProperties searchKey
        !controllerName
        ?let type
        ?let kind
        ?let multiplicity
        ?2*
      ]
      @actionMap controllerActions = {}
      if kind == .stored then
        [!?controllerActions insertKey !["add" nowhere]]
        [!?controllerActions insertKey !["remove" nowhere]]
      end
      [!?ioObservableProperties insertKey
        !mControllerName
        !type
        !.arrayController
        !multiplicity
        !""
        !controllerActions
      ]
    end
  end
  if not solved then
    ioUnsolvedProperties += !self
  end
}

#·······················································································································

override method @arrayControllerDeclaration secondaryPropertySemanticAnalysis
  ?let @string inOwnerName
  ?let @string inRootEntityName
  ?let @observablePropertyMap inRootObservableProperties
  ?let @semanticContext inSemanticContext
  ?let @observablePropertyMap inObservableProperties
  ?!@transientDefinitionListForGeneration unused ioTransientDefinitionListForGeneration
#  ?!@copyTransientDefinitionListForGeneration unused ioCopyTransientDefinitionListForGeneration
  ?!@arrayControllerForGeneration ioArrayControllerForGeneration
  ?!@selectionControllerForGeneration unused ioSelectionControllerForGeneration
  ?!@customObjectControllerForGeneration unused ioCustomObjectControllerDeclaration
  ?!@stringset ioNeededOutletClasses
{
#------------------------------------------------------------ Check array controller attributes
  let attributes = @stringset {!"allowsEmptySelection", !"allowsMultipleSelection"}
  let allowedTypes = @typeKindList {!.boolType}
  @stringset definedAttributes = {}
  @2stringlist attributeListForGeneration = {}
  for (name value) in mArrayControllerAttributListAST do
    if not [attributes hasKey !name.string] then
      error name : "unknown attribute"
    elsif [definedAttributes hasKey !name.string] then
      error name : "attribute multiply defined"
    else
      definedAttributes += !name.string
    end
    [value analyzeDefaultValueType !allowedTypes ?let valueAsString]
    attributeListForGeneration += !name.string !valueAsString
  end
  for s in attributes do
    if not [definedAttributes hasKey !s] then
      error mControllerName : "attribute '" + s + "' not defined"
    end
  end
#------
  @typeKind modelType
  @propertyKind kind
  @location errorLocation
  @arrayControllerModelKind modelKind
  @string entityName
  @actionMap actionMap
  switch mArrayControllerModel
  case selfCollection (@lstring storedPropertyName) :
    errorLocation = storedPropertyName.location
    [inObservableProperties searchKey
      !storedPropertyName
      ?modelType
      ?kind
      ?let @propertyMultiplicity multiplicity
      ?*
      ?actionMap
    ]
    modelKind = if [kind isStored] then .storedArrayModel else .transientModel end
  #------------------------------------------------------------ Check bound model is a collection
    if multiplicity != .collection then
      error errorLocation : "the bound property should be a collection"
    end
  #------------------------------------------------------------ Check bound model type is an entity
    switch modelType
    case boolType, dateType, doubleType, integerType, stringType, fontType :
      error errorLocation : "the model should be a tomany relationship" : entityName
    case enumType (* *) :
      error errorLocation : "the model should be a tomany relationship" : entityName
    case propertyClassType (**) :
      error errorLocation : "the model should be a tomany relationship" : entityName
    case transientPropertyClassType (*) :
      error errorLocation : "the model should be a tomany relationship" : entityName
    case classType (@string kClassTypeName) :
      entityName = kClassTypeName
    case entityType (*) :
      error errorLocation : "the model should be a stored class array" : entityName
    end
  case rootToManyRelationship (@lstring relationshipName) :
    errorLocation = relationshipName.location
    modelKind = .relationshipModel
    [inRootObservableProperties searchKey
      !relationshipName
      ?modelType
      ?kind
      ?let @propertyMultiplicity multiplicity
      ?*
      ?actionMap
    ]
  #------------------------------------------------------------ Check bound model is a collection
    if multiplicity != .collection then
      error errorLocation : "the bound property should be a collection"
    end
  #------------------------------------------------------------ Check bound model type is an entity
    switch modelType
    case boolType, dateType, doubleType, integerType, stringType, fontType :
      error errorLocation : "the model should be a tomany relationship" : entityName
    case enumType (* *) :
      error errorLocation : "the model should be a tomany relationship" : entityName
    case classType (*) :
      error errorLocation : "the model should be a tomany relationship" : entityName
    case propertyClassType (**) :
      error errorLocation : "the model should be a tomany relationship" : entityName
    case transientPropertyClassType (*) :
      error errorLocation : "the model should be a tomany relationship" : entityName
    case entityType (@string kEntityName) :
      entityName = kEntityName
    end
  case controllerArray (@lstring controllerName @lstring propertyName) :
    errorLocation = propertyName.location
    modelKind = .transientModel
    [inObservableProperties searchKey
      !controllerName
      ?modelType
      ?kind
      ?2*
      ?actionMap
    ]
    if (propertyName.string != "sortedArray") && (propertyName.string != "selectedArray") then
      error errorLocation : "'sortedArray' or 'selectedArray' are required here"
    end
  #------------------------------------------------------------ Check bound model type is an entity
    switch modelType
    case boolType, dateType, doubleType, integerType, stringType, fontType :
      error errorLocation : "the model should be a tomany relationship" : entityName
    case enumType (* *) :
      error errorLocation : "the model should be a tomany relationship" : entityName
    case classType (*) :
      error errorLocation : "the model should be a tomany relationship" : entityName
    case propertyClassType (**) :
      error errorLocation : "the model should be a tomany relationship" : entityName
    case transientPropertyClassType (*) :
      error errorLocation : "the model should be a tomany relationship" : entityName
    case entityType (@string kEntityName) :
      entityName = kEntityName
    end
  end
#------------------------------------------------------------ Check colum bound models
# (TODO : get also super entity observable property)
  [inSemanticContext.mEntityObservablePropertyMap searchKey
    ![entityName nowhere]
    ?let @observablePropertyMap boundModelObservablePropertyMap
  ]
  @arrayControllerBoundColumnListForGeneration arrayControllerBoundColumnListForGeneration = {}
  @arrayControllerSortedColumnListForGeneration arrayControllerSortedColumnListForGeneration = {}
  for () in mArrayControllerBoundColumnListAST do
  #-------- Run action ? Check action is declared
    if mColumnBindingAST.mRunActionName.string != "" then
      [actionMap searchKey !mColumnBindingAST.mRunActionName]
    end
  #-------- Simple bindings
    @regularBindingsGenerationList regularBindingsGenerationList = {}
    analyzeRegularBinding (
      !{} # No root observable property map
      !inSemanticContext
      !boundModelObservablePropertyMap
      !mColumnOutletTypeName
      !"<<not used>>"
      !mColumnBindingAST.mRegularBindingList
      !"object"
      !?regularBindingsGenerationList
    )
  #-------- Sort property
    if mSortPropertyName.string != "" then
      [boundModelObservablePropertyMap searchKey
        !mSortPropertyName
        ?let sortPropertyType
        ?4*
      ]
      if not [sortPropertyType isComparable] then
        error mSortPropertyName : "this property is not comparable"
      end 
      arrayControllerSortedColumnListForGeneration +=    
        !mColumnName.string
        !sortPropertyType
        !mSortPropertyName.string
    end
  #-------- Binding generation
    arrayControllerBoundColumnListForGeneration +=
      !mColumnName.string
      !mColumnOutletTypeName.string
      !mColumnBindingAST.mRunActionName.string
      !regularBindingsGenerationList
    ioNeededOutletClasses += !mColumnOutletTypeName.string
  end
#------------------------------------------------------------ Check filter properties
  @arrayControllerFilterListForGeneration arrayControllerFilterListForGeneration = {}
  for (filterPropertyName) in mFilterProperties do
    [boundModelObservablePropertyMap searchKey
      !filterPropertyName
      ?let @typeKind filterType
      ?let @propertyKind unused columnKind
      ?let @propertyMultiplicity filterMultiplicity
      ?let @string unused inverseRelationshipName # "" if not a relationship
      ?*
    ]
    if filterMultiplicity == .collection then
      error filterPropertyName : "the filter property should not be a collection"
    end
    arrayControllerFilterListForGeneration += !filterPropertyName.string !filterType
  end%for
#---
  ioArrayControllerForGeneration +=
    !inOwnerName
    !mControllerName.string
    !arrayControllerFilterListForGeneration
    ![mArrayControllerModel modelString]
    !arrayControllerBoundColumnListForGeneration
    !arrayControllerSortedColumnListForGeneration
    ![mArrayControllerModel modelTypeName !inRootEntityName !inObservableProperties]
    ![mArrayControllerModel modelTypeName2 !inRootEntityName !inObservableProperties]
    !modelKind
    ![modelType swiftTypeName]
    !attributeListForGeneration
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   GENERATION TYPES                                                                                                   *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

enum @arrayControllerModelKind {
  case relationshipModel
  case storedArrayModel
  case transientModel
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

list @arrayControllerForGeneration {
  @string mOwnerName # document name, prefs name, ...
  @string mControllerName
  @arrayControllerFilterListForGeneration mArrayControllerFilterListForGeneration
  @string mModelString
  @arrayControllerBoundColumnListForGeneration mArrayControllerBoundColumnListForGeneration
  @arrayControllerSortedColumnListForGeneration mArrayControllerSortedColumnListForGeneration
  @string mModelTypeName
  @string mModelTypeName2
  @arrayControllerModelKind mModelKind
  @string mElementTypeName
  @2stringlist mAttributeListForGeneration
}

#·······················································································································

getter @arrayControllerModel modelString -> @string outResult {
  switch self
  case selfCollection (@lstring storedPropertyName) :
    outResult = "self." + storedPropertyName
  case rootToManyRelationship (@lstring rootRelationshipName) :
    outResult = "rootObject." + rootRelationshipName
  case controllerArray (@lstring controllerName @lstring propertyName) :
    outResult = controllerName.string + "." + propertyName
  end
}

#·······················································································································

getter @arrayControllerModel modelTypeName
  ?let @string inRootEntityName
  ?let @observablePropertyMap inObservablePropertyMap
   -> @string outResult
{
  switch self
  case selfCollection (@lstring storedPropertyName) :
    outResult = "Ligne328_" + inRootEntityName + "_" + storedPropertyName
  case rootToManyRelationship (@lstring rootRelationshipName) :
    outResult = "ToManyRelationship_" + inRootEntityName + "_" + rootRelationshipName
  case controllerArray (@lstring controllerName *) :
    [inObservablePropertyMap searchKey
      !controllerName
      ?let modelType
      ?4*
    ]
    outResult = "TransientArrayOf_" + [modelType swiftTypeName] # ReadOnlyArrayOf_%!ELEMENT_TYPE_NAME%?
  end
}

#·······················································································································

getter @arrayControllerModel modelTypeName2
  ?let @string inRootEntityName
  ?let @observablePropertyMap inObservablePropertyMap
   -> @string outResult
{
  switch self
  case selfCollection (@lstring storedProprtyName) :
    [inObservablePropertyMap searchKey
      !storedProprtyName
      ?let modelType
      ?let @propertyKind kind
      ?3*
    ]
    switch kind
    case stored :
      outResult = "EBClassArray_" + [modelType swiftTypeName]
    case transient :
      outResult = "ReadOnlyArrayOf_" + [modelType swiftTypeName]
    case arrayController :
      outResult = "<< arrayController >>"
    case selectionController :
      outResult = "<< selectionController >>"
    end
  case rootToManyRelationship (@lstring rootRelationshipName) :
    outResult = "ToManyRelationship_" + inRootEntityName + "_" + rootRelationshipName
  case controllerArray (@lstring controllerName *) :
    [inObservablePropertyMap searchKey
      !controllerName
      ?let modelType
      ?4*
    ]
    outResult = "ReadOnlyArrayOf_" + [modelType swiftTypeName] # ReadOnlyArrayOf_%!ELEMENT_TYPE_NAME%?
  end
}

#·······················································································································

list @arrayControllerFilterListForGeneration {
  @string mFilterPropertyName
  @typeKind mFilterPropertyType
}

#·······················································································································

list @arrayControllerBoundColumnListForGeneration {
  @string mColumnName
  @string mColumnOutletTypeName
  @string mRunAction # Empty string if no action
  @regularBindingsGenerationList mRegularBindingsGenerationList
}

#·······················································································································

list @arrayControllerSortedColumnListForGeneration {
  @string mColumnName
  @typeKind mSortPropertyType
  @string mObservablePropertyForSorting
}

#·······················································································································

getter @arrayControllerFilterListForGeneration filterCode ?let @string inFilterFunction -> @string outResult {
  var filterProperties = self
  [!?filterProperties popFirst ?let firstFilterProperty ?*]
  @string indent = "            "
  outResult  = indent + "switch object." +firstFilterProperty + ".prop {\n"
  outResult += indent + "case .noSelection :\n"
  outResult += indent + "  return .noSelection\n"
  outResult += indent + "case .multipleSelection :\n"
  outResult += indent + "  isMultiple = true\n"
  outResult += indent + "case .singleSelection (let v1) :\n"
  @uint idx = 2
  @string args = ""
  @string blockEnd = indent + "}\n"
  for () in filterProperties do
    indent += "  "
    outResult += indent + "switch object." + mFilterPropertyName + ".prop {\n"
    outResult += indent + "case .noSelection :\n"
    outResult += indent + "  return .noSelection\n"
    outResult += indent + "case .multipleSelection :\n"
    outResult += indent + "  isMultiple = true\n"
    outResult += indent + "case .singleSelection (let v" + idx + ") :\n"
    blockEnd = indent + "}\n" + blockEnd
    args += ", v" + idx
    idx ++
  end
  indent += "  "
  outResult += indent + "if " + inFilterFunction + " (v1" + args + ") {\n"
  outResult += indent + "  filteredArray.append (object)\n"
  outResult += indent + "}\n"
  outResult += blockEnd
}

#·······················································································································

private filewrapper collectionControllerGenerationTemplate in "../generation-templates/controllers" {
}{
}{
  template arrayControllerImplementationInSwift "array-controller.swift.galgasTemplate"
    ?@string OWNER_NAME
    ?@string ARRAY_CONTROLLER_NAME
    ?@arrayControllerFilterListForGeneration FILTER_PROPERTIES
    ?@string MODEL_STRING
    ?@arrayControllerModelKind MODEL_KIND
    ?@string MODEL_TYPE_NAME
    ?@string MODEL_TYPE_NAME_2
    ?@arrayControllerBoundColumnListForGeneration BOUND_COLUMNS
    ?@arrayControllerSortedColumnListForGeneration SORTED_COLUMNS
    ?@string ELEMENT_TYPE_NAME
    ?@stringset OBSERVED_PROPERTIES_FOR_SORTING_AND_FILERING
    ?@2stringlist ATTRIBUTE_VALUES

  template filterFunction "array-controller-filter-function.swift.galgasTemplate"
    ?@string OWNER_NAME
    ?@string ARRAY_CONTROLLER_NAME
    ?@arrayControllerFilterListForGeneration FILTER_PROPERTIES
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   GENERATION                                                                                                         *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

proc generateArrayControllers
  ?let @arrayControllerForGeneration inArrayControllerListForGeneration
  ?let @string inOutputDirectory
  ?!@stringset ioGeneratedFileSet
{
  for () in inArrayControllerListForGeneration do
  #--- Build observed property set (for sorting and filtering)
    @stringset observedProperties = {}
    for () in mArrayControllerSortedColumnListForGeneration do
      observedProperties += !mObservablePropertyForSorting
    end
    for () in mArrayControllerFilterListForGeneration do
      observedProperties += !mFilterPropertyName
    end
    let s = [filewrapper collectionControllerGenerationTemplate.arrayControllerImplementationInSwift
      !mOwnerName
      !mControllerName
      !mArrayControllerFilterListForGeneration
      !mModelString
      !mModelKind
      !mModelTypeName
      !mModelTypeName2
      !mArrayControllerBoundColumnListForGeneration
      !mArrayControllerSortedColumnListForGeneration
      !mElementTypeName
      !observedProperties
      !mAttributeListForGeneration
    ]
    [@string generateFile
      !inOutputDirectory
      !"arrayController-" + mOwnerName + "-" +  mControllerName + ".swift"
      !s
    ]
    if [mArrayControllerFilterListForGeneration length] > 0 then
    let s = [filewrapper collectionControllerGenerationTemplate.filterFunction
      !mOwnerName
      !mControllerName
      !mArrayControllerFilterListForGeneration
    ]
    let fileName = "arrayControllerFilter-" + mOwnerName + "-" +  mControllerName + ".swift"
    ioGeneratedFileSet += !fileName
    [@string generateFileWithPattern
      !startPath:inOutputDirectory
      !fileName:fileName
      !lineComment:"//"
      !header:""
      !defaultUserZone1:"\n\n" # Defaut user zone1
      !generatedZone2:s
      !defaultUserZone2:"  return WHAT ?\n" # Defaut user zone2
      !generatedZone3:"}\n\n//" + ["" stringByRightPadding !117 !'—'] + "\n"
      !makeExecutable:false
    ]
    end
  end
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
