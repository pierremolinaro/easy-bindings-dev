#-----------------------------------------------------------------------------------------------------------------------
#   AST
#-----------------------------------------------------------------------------------------------------------------------

shared class @arrayControllerDeclarationAST : @abstractDeclarationAST {
  @lstring mControllerName
  @arrayControllerBoundModelAST mModel
  @lstring mToManyPropertyName
}

#·······················································································································

list @arrayControllerBindingListAST {
  @lstring mControllerName
  @multipleBindingDescriptor mHiddenSelectionViewBindingDescriptor
}

#·······················································································································

enum @arrayControllerBoundModelAST {
  case rootToManyRelationship (@lstring rootEntityName)
  case selfToManyRelationship
}

#·······················································································································

override method @arrayControllerDeclarationAST enterInPrecedenceGraph ?!@declarationPrecedenceGraph ioGraph {
  let node = @lstring.new {!self.mClassName.string + " " + self.mControllerName !self.mControllerName.location}
  [!?ioGraph addNode !node !self]
  [!?ioGraph addEdge !node !self.mClassName]
  switch self.mModel 
  case rootToManyRelationship (@lstring rootEntityName) :
    if rootEntityName.string != "" then
      [!?ioGraph addEdge !node !.new {!rootEntityName.string + " " + self.mToManyPropertyName !self.mToManyPropertyName.location}]
    end
  case selfToManyRelationship :
    [!?ioGraph addEdge !node !.new {!self.mClassName.string + " " + self.mToManyPropertyName !self.mToManyPropertyName.location}]
  end
}

#·······················································································································

override getter @arrayControllerDeclarationAST nodeKey -> @lstring {
  result = @lstring.new {!self.mClassName.string + " " + self.mControllerName !self.mControllerName.location}
}

#-----------------------------------------------------------------------------------------------------------------------
#   SYNTAX
#-----------------------------------------------------------------------------------------------------------------------

syntax extension easyBindings_syntax {

  #·····················································································································
  
  rule <controller_declaration>
            ?autoLayout: @bool unused inAutoLayout
            ?let @lstring inCurrentEntity
            ?let @lstring inRootEntity
            ?!@arrayControllerBindingListAST ioArrayControllerBindingListAST
            ?!@astDeclarationStruct ioDeclarationAST
  {
    $arrayController$
    $controllerName$ ?let @lstring controllerName
  #--- Model
    @arrayControllerBoundModelAST model
    $:$
    select
      $root$
      model = .rootToManyRelationship {!rootEntityName: inRootEntity}
    or
      $self$
      model = .selfToManyRelationship
    end
    $.$
    $identifier$ ?let @lstring relationshipName
  #--- Hidden binding ?
    select
    or
      $hidden$
       <booleanMultipleBindingExpression> ?let @abstractBooleanMultipleBindingExpressionAST bindingExpression
      let hiddenSelectionViewBindingDescriptor = @multipleBindingDescriptor.binding {!expression:bindingExpression}
      ioArrayControllerBindingListAST += 
        !controllerName
        !hiddenSelectionViewBindingDescriptor
    end
    $;$
    ioDeclarationAST.mUnifiedDeclarationList += !@arrayControllerDeclarationAST.new {
      !inCurrentEntity
      !controllerName
      !model
      !relationshipName
    }
  }
  
  #·····················································································································

}

#-----------------------------------------------------------------------------------------------------------------------
#   CLASS AND PROPERTY SEMANTIC ANALYSIS                       
#-----------------------------------------------------------------------------------------------------------------------

override method @arrayControllerDeclarationAST firstAnalysisPhase 
       ?!@semanticContext ioSemanticContext
       ?!@generationStruct unused ioGeneration
{
  with self.mClassName in !?ioSemanticContext.mClassMap 
    error message searchKey
  do
    let @actionMap controllerActions = {!["add" nowhere], !["remove" nowhere] }
    switch self.mModel
    case rootToManyRelationship (@lstring rootEntityName) :
      [ioSemanticContext.mClassMap searchKey !rootEntityName ?* ?let rootProperties ?2*]
      [rootProperties searchKey !self.mToManyPropertyName ?let classKind ?2*]
      switch classKind
      case property (2*) :
        error rootEntityName : "a toMany relationship is required here"
      case toMany (typeName * graphic *) :
        let kind = @propertyKind.arrayController {
          !typeName: typeName
          !graphic: graphic
        }
        [!?mPropertyMap insertKey !self.mControllerName !kind !controllerActions !false]
    #--- Code Generation
      mPropertyGenerationList += !@arrayControllerPropertyGeneration.new {
        !self.mControllerName.string
        !"rootObject." + self.mToManyPropertyName
        !self.mClassName
      }
      case toOne (4*) :
        error rootEntityName : "a toMany relationship is required here"
      case arrayController (2*) :
        error rootEntityName : "a toMany relationship is required here"
      case selectionController (*) :
        error rootEntityName : "a toMany relationship is required here"
      end
    case selfToManyRelationship :
      [mPropertyMap searchKey !self.mToManyPropertyName ?let classKind ?2*]
      switch classKind
      case property (2*) :
        error self.mToManyPropertyName : "a toMany relationship is required here"
      case toMany (typeName * graphic *) :
        let kind = @propertyKind.arrayController {
          !typeName: typeName
          !graphic: graphic
        }
        [!?mPropertyMap insertKey !self.mControllerName !kind !controllerActions !false]
    #--- Code Generation
      mPropertyGenerationList += !@arrayControllerPropertyGeneration.new {
        !self.mControllerName.string
        !self.mToManyPropertyName
        !self.mClassName
      }
      case toOne (4*) :
        error self.mToManyPropertyName : "a toMany relationship is required here"
      case arrayController (2*) :
        error self.mToManyPropertyName : "a toMany relationship is required here"
      case selectionController (*) :
        error self.mToManyPropertyName : "a toMany relationship is required here"
      end
    end
  end
}

#-----------------------------------------------------------------------------------------------------------------------
#   SECOND ANALYSIS PHASE
#-----------------------------------------------------------------------------------------------------------------------

override method @arrayControllerDeclarationAST thirdAnalysisPhase
       ?!@semanticContext ioSemanticContext
       ?!@generationStruct ioGeneration
{
  @propertyMap boundModelPropertyMap
  switch self.mModel
  case rootToManyRelationship (@lstring rootEntityName) :
    [ioSemanticContext.mClassMap searchKey
       !rootEntityName
       ?*
       ?boundModelPropertyMap 
       ?2*
    ]
  case selfToManyRelationship :
    [ioSemanticContext.mClassMap searchKey
       !self.mClassName
       ?*
       ?boundModelPropertyMap 
       ?2*
     ]  
  end
  [boundModelPropertyMap searchKey
     !self.mToManyPropertyName
     ?let boundModelClassKind
     ?2*
  ]
#------------------------------------------------------------ Check colum bound models
  @actionMap actionMap
  @propertyMap propertyMap
  @arrayControllerModelKind arrayControllerModelKind
  @bool graphic
  @string elementTypeName
  switch boundModelClassKind
  case property (2*) :
    error self.mToManyPropertyName
      : "a toMany property is required here"
      : graphic, arrayControllerModelKind, propertyMap, actionMap, elementTypeName
  case toMany (typeName accessibility isGraphic *) :
    elementTypeName = typeName
    graphic = isGraphic
    arrayControllerModelKind = if [accessibility isTransient]
      then .transientArray
      else .entityArray
    end
    [ioSemanticContext.mClassMap searchKey !typeName ?* ?propertyMap ?actionMap ?*]
  case toOne (4*) :
    error self.mToManyPropertyName
      : "a toMany property is required here"
      : graphic, arrayControllerModelKind, propertyMap, actionMap, elementTypeName
  case arrayController (2*) :
    error self.mToManyPropertyName
      : "a toMany property is required here"
      : graphic, arrayControllerModelKind, propertyMap, actionMap, elementTypeName
  case selectionController (*) :
    error self.mToManyPropertyName
      : "a toMany property is required here"
      : graphic, arrayControllerModelKind, propertyMap, actionMap, elementTypeName
  end
#---
  ioGeneration.mFileGenerationList += !@arrayControllerGeneration.new {
    !self.mClassName
    !self.mControllerName
    !"ReadWriteArrayOf_" + elementTypeName
    !arrayControllerModelKind
    !elementTypeName
    !graphic
  }
}


#-----------------------------------------------------------------------------------------------------------------------
#   CODE GENERATION                       
#-----------------------------------------------------------------------------------------------------------------------

shared class @arrayControllerPropertyGeneration : @propertyGeneration {
  @string mModelString
  @string mOwnerName
}

#·······················································································································

override getter @arrayControllerPropertyGeneration propertyDeclarationCode
   ?let @bool inPreferences
   ?let @stringset unused inOverriddenTransients -> @string
{
  if inPreferences then
    result  = "//" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n"
    result += "//   Array controller: " + self.mPropertyName + "\n"
    result += "//" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n\n"
    result += "  var preferences_" + self.mPropertyName + " = Controller_" + self.mOwnerName + "_" + self.mPropertyName + " ()\n\n"
  else
    result  = "  //" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n"
    result += "  //   Array controller: " + self.mPropertyName + "\n"
    result += "  //" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n\n"
    result += "  var " + self.mPropertyName + " = Controller_" + self.mOwnerName + "_" + self.mPropertyName + " ()\n\n"
  end
}

#·······················································································································

override getter @arrayControllerPropertyGeneration initCode -> @string {
  result = ""
}

#·······················································································································

override getter @arrayControllerPropertyGeneration configurationCode ?let @bool unused inPreferences -> @string {
  result  = "  //--- Array controller property: " + self.mPropertyName + "\n"
  result += "    self." + self.mPropertyName + ".bind_model (self." + self.mModelString + "_property, self.ebUndoManager)\n"
}

#·······················································································································

override getter @arrayControllerPropertyGeneration populateExplorerWindowCode -> @string {
  result  = "    //--- Array controller property: " + self.mPropertyName + "\n"
  result += "      self." + self.mPropertyName + ".addExplorer (name: \"" + self.mPropertyName + "\", y:&y, view:view)\n"
}

#·······················································································································

override getter @arrayControllerPropertyGeneration terminationCode ?let @bool inPreferences -> @string {
  let prefix = if inPreferences then "preferences_" else "self." end
  result  = "  //--- Array controller property: " + self.mPropertyName + "\n"
  result += "    " + prefix + self.mPropertyName + ".unbind_model ()\n"
}

#-----------------------------------------------------------------------------------------------------------------------
#   GENERATION TYPES
#-----------------------------------------------------------------------------------------------------------------------

enum @arrayControllerModelKind {
  case entityArray
  case transientArray
}

#-----------------------------------------------------------------------------------------------------------------------

shared class @arrayControllerGeneration : @abstractFileGeneration {
  @string mOwnerName # document name, prefs name, ...
  @lstring mControllerName
  @string mModelTypeName
  @arrayControllerModelKind mArrayControllerModelKind
  @string mElementTypeName
  @bool mElementTypeIsGraphic
}

#·······················································································································

private filewrapper arrayControllerGenerationTemplate in "../generation-templates/controllers" {
}{
}{
  template arrayControllerImplementationInSwift "array-controller.swift.galgasTemplate"
    ?@string OWNER_NAME
    ?@string ARRAY_CONTROLLER_NAME
    ?@arrayControllerModelKind MODEL_KIND
    ?@string MODEL_TYPE_NAME
    ?@string ELEMENT_TYPE_NAME
    ?@bool ELEMENT_TYPE_IS_GRAPHIC
}

#-----------------------------------------------------------------------------------------------------------------------
#   GENERATION
#-----------------------------------------------------------------------------------------------------------------------

override method @arrayControllerGeneration generateCode
    ?let @string inOutputDirectory
    ?!@stringset unused ioGeneratedFileSet
{
#--- Build observed property set (for sorting and filtering)
  let s = [filewrapper arrayControllerGenerationTemplate.arrayControllerImplementationInSwift
    !self.mOwnerName
    !self.mControllerName
    !self.mArrayControllerModelKind
    !self.mModelTypeName
    !self.mElementTypeName
    !self.mElementTypeIsGraphic
  ]
  [@string generateFile
    !inOutputDirectory
    !"controller-array-" + self.mOwnerName + "-" +  self.mControllerName + ".swift"
    !s
  ]
}

#-----------------------------------------------------------------------------------------------------------------------
