#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @arrayControllerBoundColumnListAST {
  @lstring mColumnName
  @lstring mColumnOutletTypeName
  @columnBindingAST mColumnBindingAST
  @lstring mSortPropertyName
}

#·······················································································································

struct @columnBindingAST {
  @lstring mRunActionName # Empty string if no run binding
  @multipleBindingDescriptor mEnabledBindingDescriptor
  @multipleBindingDescriptor mHiddenBindingDescriptor
  @regularBindingList mRegularBindingList
}

#·······················································································································

list @arrayControllerAttributListAST {
  @lstring mAttributeName
  @abstractDefaultValue mAttributeValue
}

#·······················································································································

enum @arrayControllerModel {
  case toMany (@bool isRoot @lstring collectionPropertyName)
  case controller (@bool isRoot @lstring controllerName @lstring propertyName)
}

#·······················································································································

class @arrayControllerDeclaration : @abstractSecondaryProperty {
  @lstring mControllerName
  @arrayControllerModel mArrayControllerModel
  @lstringlist mFilterProperties
  @arrayControllerBoundColumnListAST mArrayControllerBoundColumnListAST
  @arrayControllerAttributListAST mArrayControllerAttributListAST
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension easyBindings_syntax {

  #·····················································································································
  
  rule <controller_declaration>
    ?!@secondaryPropertyList ioSecondaryPropertyList
  {
    $arrayController$
    $identifier$ ?let @lstring controllerName
    @arrayControllerAttributListAST arrayControllerAttributListAST = {}
    ${$
    repeat
      $identifier$ ?let @lstring attributeName
      $:$
      <explicit_value> ?let @abstractDefaultValue attributeValue
      arrayControllerAttributListAST += !attributeName !attributeValue
    while
      $,$
    end
    $}$
  #--- Model
    @arrayControllerModel arrayControllerModel
    select
      $root$
      $.$
      $identifier$ ?let @lstring relationshipName
      arrayControllerModel = .toMany {!isRoot: true !collectionPropertyName:relationshipName}
    or
      $self$
      $.$
      $identifier$ ?let @lstring storedPropertyName
      arrayControllerModel = .toMany {!isRoot: false !collectionPropertyName:storedPropertyName}
    or
      $self$
      $.$
      $identifier$ ?let @lstring controllerName
      $.$
      $identifier$ ?let @lstring propertyName
      arrayControllerModel = .controller {!isRoot: false !controllerName:controllerName !propertyName:propertyName}
    or
      $root$
      $.$
      $identifier$ ?let @lstring controllerName
      $.$
      $identifier$ ?let @lstring propertyName
      arrayControllerModel = .controller {!isRoot: true !controllerName:controllerName !propertyName:propertyName}
    end
    @lstringlist filterProperties = {}
    select
    or
      $filter$
      repeat
        $identifier$ ?let @lstring filterProperty
        filterProperties += !filterProperty
      while
        $,$
      end
    end
    @arrayControllerBoundColumnListAST arrayControllerBoundColumnListAST = {}
    select
      $;$
    or
      ${$
      repeat
      while
        $column$
        $literal_string$ ?let columnName
        @lstring sortPropertyName
        select
          sortPropertyName = ["" nowhere]
        or
          $sort$
          $identifier$ ?sortPropertyName
        end
        $Identifier$ ?let columnOutletTypeName
        <column_bindings> ?let @columnBindingAST columnBindingAST
        arrayControllerBoundColumnListAST +=
          !columnName
          !columnOutletTypeName
          !columnBindingAST
          !sortPropertyName
      end
      $}$
    end
    ioSecondaryPropertyList += !@arrayControllerDeclaration.new {
      !controllerName
      !arrayControllerModel
      !filterProperties
      !arrayControllerBoundColumnListAST
      !arrayControllerAttributListAST
    }
  }

#·······················································································································

  rule <column_bindings> !@columnBindingAST outColumnBindingAST {
    @lstring runActionDescriptor = ["" nowhere]
    var enabledBindingDescriptor = @multipleBindingDescriptor.noBinding
    var hiddenBindingDescriptor = @multipleBindingDescriptor.noBinding
    @regularBindingList regularBindingList = {}
    repeat
    while
      $run$
      if runActionDescriptor.string != "" then
        error .here : "duplicated $run binding"
      end
      $self$
      $.$
      $identifier$ ?runActionDescriptor
  #--- Enabled
    while
      $enabled$
      if enabledBindingDescriptor != .noBinding then
        error .here : "duplicated $enabled binding"
      end
      <booleanMultipleBindingExpression> ?let @abstractBooleanMultipleBindingExpressionAST bindingExpression
      enabledBindingDescriptor = .binding {!expression:bindingExpression}
  #--- Hidden
    while
      $hidden$
      if hiddenBindingDescriptor != .noBinding then
        error .here : "duplicated $hidden binding"
      end
      <booleanMultipleBindingExpression> ?let @abstractBooleanMultipleBindingExpressionAST bindingExpression
      hiddenBindingDescriptor = .binding {!expression:bindingExpression}
  #--- Regular binding
    while
      $bindingName$ ?let @lstring bindingName
      @observablePropertyList observablePropertyList = {}
      repeat
        <observable_property> ?let @observablePropertyAST observableProperty
        observablePropertyList += !observableProperty
      while
        $,$
      end
      <binding_option_list> ?let bindingOptions
      regularBindingList +=
        !bindingName
        !observablePropertyList
        !bindingOptions
    end
  #---
    outColumnBindingAST = @columnBindingAST.new {
      !runActionDescriptor
      !enabledBindingDescriptor
      !hiddenBindingDescriptor
      !regularBindingList
    }
  }
  
  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @arrayControllerDeclaration typeInventory
  ?!@unifiedTypeMap unused ioUnifiedTypeMap
{
}

#·······················································································································

override method @arrayControllerDeclaration tryToSolveSecondaryProperty
  ?!@semanticContext unused ioSemanticContext
  ?let @observablePropertyMap inRootObservableProperties
  ?!@observablePropertyMap ioObservableProperties
  ?!@secondaryPropertyList ioUnsolvedProperties
{
  @bool solved
  switch mArrayControllerModel
  case toMany (@bool isRoot @lstring storedPropertyName) :
    let observablePropertyMap = if isRoot then inRootObservableProperties else ioObservableProperties end
    solved = [observablePropertyMap hasKey !storedPropertyName.string]
    if solved then
      [observablePropertyMap searchKey
        !storedPropertyName
        ?let kind
        ?3*
      ]
      @actionMap controllerActions = {}
      @propertyKind arrayControllerKind
      switch kind 
      case property (2*) :
        error storedPropertyName : "an atomic property is not a collection" : arrayControllerKind
      case toMany (type typeName * graphic) :
        arrayControllerKind = .arrayController {!type: type !typeName: typeName !graphic: graphic}
        [!?controllerActions insertKey !["add" nowhere]]
        [!?controllerActions insertKey !["remove" nowhere]]
      case toOne (4*) :
        error storedPropertyName : "a toOne property is not a collection" : arrayControllerKind
      case arrayController (3*) :
        error storedPropertyName : "Array Controller ????" : arrayControllerKind
      case selectionController (2*) :
        error storedPropertyName : "Selection Controller ????" : arrayControllerKind
       end
      [!?ioObservableProperties insertKey
        !mControllerName
        !arrayControllerKind
        !""
        !controllerActions
        !false
      ]
    end
  case controller (@bool isRoot @lstring controllerName @lstring propertyName) :
    let observablePropertyMap = if isRoot then inRootObservableProperties else ioObservableProperties end
    solved = [observablePropertyMap hasKey !controllerName.string]
    if solved then
      [observablePropertyMap searchKey
        !controllerName
        ?let kind
        ?3*
      ]
      switch kind 
      case property (2*) :
        error controllerName : "an array controller is required here"
      case toMany (4*) :
        error controllerName : "an array controller is required here"
      case toOne (4*) :
        error controllerName : "an array controller is required here"
      case arrayController (entityType entityName graphic) :
        if propertyName.string == "selectedArray" then
          [!?ioObservableProperties insertKey
            !mControllerName
            !.arrayController {!type: entityType !typeName: entityName !graphic: graphic}
            !""
            !{}
            !false
          ]
        else
          error propertyName : "only the 'selectedArray' property is accepted here"
        end
      case selectionController (2*) :
        error controllerName : "an array controller is required here"
      end
    end
  end
  if not solved then
    ioUnsolvedProperties += !self
  end
}

#·······················································································································

override method @arrayControllerDeclaration secondaryPropertySemanticAnalysis
  ?let @string inOwnerName
  ?let @string unused inRootEntityName
  ?let @observablePropertyMap inRootObservableProperties
  ?let @semanticContext inSemanticContext
  ?let @observablePropertyMap inObservableProperties
  ?!@transientDefinitionListForGeneration unused ioTransientDefinitionListForGeneration
  ?!@arrayControllerForGeneration ioArrayControllerForGeneration
  ?!@selectionControllerForGeneration unused ioSelectionControllerForGeneration
  ?!@stringset ioNeededOutletClasses
{
#------------------------------------------------------------ Check array controller attributes
  let attributes = @stringset {!"allowsEmptySelection", !"allowsMultipleSelection"}
  let allowedTypes = @typeKindList {!.boolType}
  @stringset definedAttributes = {}
  @2stringlist attributeListForGeneration = {}
  for (name value) in mArrayControllerAttributListAST do
    if not [attributes hasKey !name.string] then
      error name : "unknown attribute"
    elsif [definedAttributes hasKey !name.string] then
      error name : "attribute multiply defined"
    else
      definedAttributes += !name.string
    end
    [value analyzeDefaultValueType !allowedTypes ?let valueAsString]
    attributeListForGeneration += !name.string !valueAsString
  end
  for s in attributes do
    if not [definedAttributes hasKey !s] then
      error mControllerName : "attribute '" + s + "' not defined"
    end
  end
#------
  @typeKind modelType
  @propertyKind kind
  @string elementSwiftTypeName
  @location errorLocation
  @arrayControllerModelKind modelKind
  @string entityName
  @bool entityTypeIsGraphic
  @actionMap actionMap
  switch mArrayControllerModel
  case toMany (@bool isRoot @lstring storedToManyPropertyName) :
    let observablePropertyMap = if isRoot then inRootObservableProperties else inObservableProperties end
    errorLocation = storedToManyPropertyName.location
    [observablePropertyMap searchKey
      !storedToManyPropertyName
      ?kind
      ?*
      ?actionMap
      ?*
    ]
    switch kind 
    case property (2*) :
      error storedToManyPropertyName : "a to many property is required here" : entityName, entityTypeIsGraphic, modelKind
    case toMany (* typeName readOnly graphic) :
      entityName = typeName
      entityTypeIsGraphic = graphic
      modelKind = if readOnly then .transientArray else  if [[kind type] isEntityType] then .entityArray else .classArray end end
    case toOne (4*) :
      error storedToManyPropertyName : "a to many property is required here" : entityName, entityTypeIsGraphic, modelKind
    case arrayController (3*) :
      error storedToManyPropertyName : "a to many property is required here" : entityName, entityTypeIsGraphic, modelKind
    case selectionController (2*) :
      error storedToManyPropertyName : "a to many property is required here" : entityName, entityTypeIsGraphic, modelKind
    end
    elementSwiftTypeName = [[kind type] swiftTypeName]
    modelType = [kind type]
  case controller (@bool isRoot @lstring controllerName @lstring propertyName) :
    let observablePropertyMap = if isRoot then inRootObservableProperties else inObservableProperties end
    errorLocation = propertyName.location
    modelKind = .transientArray
    [observablePropertyMap searchKey
      !controllerName
      ?kind
      ?*
      ?actionMap
      ?*
    ]
    elementSwiftTypeName = [[kind type] swiftTypeName]
    switch kind 
    case property (2*) :
      error controllerName : "an array controller is required here" : entityName, entityTypeIsGraphic
    case toMany (4*) :
      error controllerName : "an array controller is required here" : entityName, entityTypeIsGraphic
    case toOne (4*) :
      error controllerName : "an array controller is required here" : entityName, entityTypeIsGraphic
    case arrayController (* kEntityName isGraphic) :
      entityName = kEntityName
      entityTypeIsGraphic = isGraphic
    case selectionController (2*) :
      error controllerName : "an array controller is required here" : entityName, entityTypeIsGraphic
    end
    if (propertyName.string != "sortedArray") && (propertyName.string != "selectedArray") then
      error errorLocation : "'sortedArray' or 'selectedArray' are required here"
    end
    modelType = [kind type]
  end
#------------------------------------------------------------ Check colum bound models
# (TODO : get also super entity observable property)
  [inSemanticContext.mEntityObservablePropertyMap searchKey
    ![entityName nowhere]
    ?let @observablePropertyMap boundModelObservablePropertyMap
    ?*
  ]
  @arrayControllerBoundColumnListForGeneration arrayControllerBoundColumnListForGeneration = {}
  @arrayControllerSortedColumnListForGeneration arrayControllerSortedColumnListForGeneration = {}
  for () in mArrayControllerBoundColumnListAST do
  #-------- Run action ? Check action is declared
    if mColumnBindingAST.mRunActionName.string != "" then
      [actionMap searchKey !mColumnBindingAST.mRunActionName]
    end
  #-------- Simple bindings
    @regularBindingsGenerationList regularBindingsGenerationList = {}
    analyzeRegularBinding (
      !{} # No root observable property map
      !inSemanticContext
      !boundModelObservablePropertyMap
      !mColumnOutletTypeName
      !"<<not used>>"
      !mColumnBindingAST.mRegularBindingList
      !"object"
      !?regularBindingsGenerationList
    )
  #-------- Sort property
    if mSortPropertyName.string != "" then
      [boundModelObservablePropertyMap searchKey
        !mSortPropertyName
        ?let sortPropertyKind
        ?3*
      ]
      let sortPropertyType = [sortPropertyKind type]
      if not [sortPropertyType isComparable] then
        error mSortPropertyName : "this property is not comparable"
      end 
      arrayControllerSortedColumnListForGeneration +=    
        !mColumnName.string
        !sortPropertyType
        !mSortPropertyName.string
    end
  #-------- Binding generation
    arrayControllerBoundColumnListForGeneration +=
      !mColumnName.string
      !mColumnOutletTypeName.string
      !mColumnBindingAST.mRunActionName.string
      !regularBindingsGenerationList
    ioNeededOutletClasses += !mColumnOutletTypeName.string
  end
#------------------------------------------------------------ Check filter properties
  @arrayControllerFilterListForGeneration arrayControllerFilterListForGeneration = {}
  for (filterPropertyName) in mFilterProperties do
    [boundModelObservablePropertyMap searchKey
      !filterPropertyName
      ?let @propertyKind columnKind
      ?3*
    ]
    arrayControllerFilterListForGeneration += !filterPropertyName.string ![columnKind type]
  end
#---
  ioArrayControllerForGeneration +=
    !inOwnerName
    !mControllerName
    !arrayControllerFilterListForGeneration
    ![mArrayControllerModel modelString]
    !arrayControllerBoundColumnListForGeneration
    !arrayControllerSortedColumnListForGeneration
    ![mArrayControllerModel modelTypeName !elementSwiftTypeName]
    !modelKind
    ![modelType swiftTypeName]
    !entityTypeIsGraphic
    !attributeListForGeneration
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   GENERATION TYPES
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @arrayControllerModelKind {
  case entityArray
  case classArray
  case transientArray
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @arrayControllerForGeneration {
  @string mOwnerName # document name, prefs name, ...
  @lstring mControllerName
  @arrayControllerFilterListForGeneration mArrayControllerFilterListForGeneration
  @string mModelString
  @arrayControllerBoundColumnListForGeneration mArrayControllerBoundColumnListForGeneration
  @arrayControllerSortedColumnListForGeneration mArrayControllerSortedColumnListForGeneration
  @string mModelTypeName
  @arrayControllerModelKind mModelKind
  @string mElementTypeName
  @bool mElementTypeIsGraphic
  @2stringlist mAttributeListForGeneration
}

#·······················································································································

getter @arrayControllerModel modelString -> @string outResult {
  switch self
  case toMany (@bool isRoot @lstring storedPropertyName) :
    if isRoot then
      outResult = "self.rootObject." + storedPropertyName + "_property"
    else
      outResult = "self." + storedPropertyName + "_property"
    end
  case controller (@bool isRoot @lstring controllerName @lstring propertyName) :
    outResult = if isRoot then "self.rootObject." else "self." end
    outResult += controllerName.string + "." + propertyName + "_property"
  end
}

#·······················································································································

getter @arrayControllerModel modelTypeName
  ?let @string inElementSwiftTypeName
   -> @string outResult
{
  switch self
  case toMany (2*) :
    outResult = "ReadWriteArrayOf_" + inElementSwiftTypeName
  case controller (3*) :
    outResult = "ReadOnlyArrayOf_" + inElementSwiftTypeName
  end
}

#·······················································································································

list @arrayControllerFilterListForGeneration {
  @string mFilterPropertyName
  @typeKind mFilterPropertyType
}

#·······················································································································

list @arrayControllerBoundColumnListForGeneration {
  @string mColumnName
  @string mColumnOutletTypeName
  @string mRunAction # Empty string if no action
  @regularBindingsGenerationList mRegularBindingsGenerationList
}

#·······················································································································

list @arrayControllerSortedColumnListForGeneration {
  @string mColumnName
  @typeKind mSortPropertyType
  @string mObservablePropertyForSorting
}

#·······················································································································

getter @arrayControllerFilterListForGeneration filterCode ?let @string inFilterFunction -> @string outResult {
  var filterProperties = self
  [!?filterProperties popFirst ?let firstFilterProperty ?*]
  @string indent = "            "
  outResult  = indent + "switch object." + firstFilterProperty + "_property_selection {\n"
  outResult += indent + "case .empty :\n"
  outResult += indent + "  return .empty\n"
  outResult += indent + "case .multiple :\n"
  outResult += indent + "  isMultiple = true\n"
  outResult += indent + "case .single (let v1) :\n"
  @uint idx = 2
  @string args = ""
  @string blockEnd = indent + "}\n"
  for () in filterProperties do
    indent += "  "
    outResult += indent + "switch object." + mFilterPropertyName + "_property_selection {\n"
    outResult += indent + "case .empty :\n"
    outResult += indent + "  return .empty\n"
    outResult += indent + "case .multiple :\n"
    outResult += indent + "  isMultiple = true\n"
    outResult += indent + "case .single (let v" + idx + ") :\n"
    blockEnd = indent + "}\n" + blockEnd
    args += ", v" + idx
    idx ++
  end
  indent += "  "
  outResult += indent + "if " + inFilterFunction + " (v1" + args + ") {\n"
  outResult += indent + "  filteredArray.append (object)\n"
  outResult += indent + "}\n"
  outResult += blockEnd
}

#·······················································································································

private filewrapper collectionControllerGenerationTemplate in "../generation-templates/controllers" {
}{
}{
  template arrayControllerImplementationInSwift "array-controller.swift.galgasTemplate"
    ?@string OWNER_NAME
    ?@string ARRAY_CONTROLLER_NAME
    ?@arrayControllerFilterListForGeneration FILTER_PROPERTIES
    ?@string MODEL_STRING
    ?@arrayControllerModelKind MODEL_KIND
    ?@string MODEL_TYPE_NAME
    ?@arrayControllerBoundColumnListForGeneration BOUND_COLUMNS
    ?@arrayControllerSortedColumnListForGeneration SORTED_COLUMNS
    ?@string ELEMENT_TYPE_NAME
    ?@bool ELEMENT_TYPE_IS_GRAPHIC
    ?@stringset OBSERVED_PROPERTIES_FOR_SORTING_AND_FILERING
    ?@2stringlist ATTRIBUTE_VALUES

  template filterFunction "array-controller-filter-function.swift.galgasTemplate"
    ?@string OWNER_NAME
    ?@string ARRAY_CONTROLLER_NAME
    ?@arrayControllerFilterListForGeneration FILTER_PROPERTIES
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc generateArrayControllers
  ?let @arrayControllerForGeneration inArrayControllerListForGeneration
  ?let @string inOutputDirectory
  ?!@stringset ioGeneratedFileSet
{
  for () in inArrayControllerListForGeneration do
  #--- Build observed property set (for sorting and filtering)
    @stringset observedProperties = {}
    for () in mArrayControllerSortedColumnListForGeneration do
      observedProperties += !mObservablePropertyForSorting
    end
    for () in mArrayControllerFilterListForGeneration do
      observedProperties += !mFilterPropertyName
    end
    let s = [filewrapper collectionControllerGenerationTemplate.arrayControllerImplementationInSwift
      !mOwnerName
      !mControllerName
      !mArrayControllerFilterListForGeneration
      !mModelString
      !mModelKind
      !mModelTypeName
      !mArrayControllerBoundColumnListForGeneration
      !mArrayControllerSortedColumnListForGeneration
      !mElementTypeName
      !mElementTypeIsGraphic
      !observedProperties
      !mAttributeListForGeneration
    ]
    [@string generateFile
      !inOutputDirectory
      !"arrayController-" + mOwnerName + "-" +  mControllerName + ".swift"
      !s
    ]
    if [mArrayControllerFilterListForGeneration length] > 0 then
    let s = [filewrapper collectionControllerGenerationTemplate.filterFunction
      !mOwnerName
      !mControllerName
      !mArrayControllerFilterListForGeneration
    ]
    let fileName = "arrayControllerFilter-" + mOwnerName + "-" +  mControllerName + ".swift"
    ioGeneratedFileSet += !fileName
    [@string generateFileWithPattern
      !startPath:inOutputDirectory
      !fileName:fileName
      !lineComment:"//"
      !header:""
      !defaultUserZone1:"\n\n" # Defaut user zone1
      !generatedZone2:s
      !defaultUserZone2:"  return WHAT ?\n" # Defaut user zone2
      !generatedZone3:"}\n\n//" + ["" stringByRightPadding !117 !'—'] + "\n"
      !makeExecutable:false
    ]
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
