#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST   
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @typeKind typeName -> @string {
  switch self
  case boolType :
    result = "Bool"
  case integerType :
    result = "Int"
  case doubleType :
    result = "Double"
  case stringType :
    result = "String"
  case dateType :
    result = "Date"
  case fontType :
    result = "NSFont"
  case colorType :
    result = "NSColor"
  case enumType (typeName *) :
    result = typeName
  case entityType (typeName *) :
    result = typeName
  case classType (typeName) :
    result = typeName
  case transientPropertyExternType (typeName) :
    result = typeName
  end
}

getter @typeKind isComparable -> @bool outResult {
  switch self
  case boolType, integerType, doubleType, stringType, dateType :
    outResult = true
  case fontType, colorType :
    outResult = false
  case enumType (* *) :
    outResult = false
  case entityType (2*) :
    outResult = false
  case classType (*) :
    outResult = false
  case transientPropertyExternType (*) :
    outResult = false
  end
}

#·······················································································································

getter @typeKind isGraphic -> @bool outResult {
  switch self
  case boolType, integerType, doubleType, stringType, dateType :
    outResult = false
  case fontType, colorType :
    outResult = false
  case enumType (* *) :
    outResult = false
  case entityType (* isGraphic) :
    outResult = isGraphic
  case classType (*) :
    outResult = false
  case transientPropertyExternType (*) :
    outResult = false
  end
}

#·······················································································································

list @typeKindList {
  @typeKind mType
}

#·······················································································································

getter @propertyKind typeName -> @string {
  switch self
  case property (type *) :
    result = [type typeName]
  case toMany (typeName 3*) :
    result = typeName
  case toOne (typeName 2*) :
    result = typeName
  case arrayController (typeName 2*) :
    result = typeName
  case selectionController (typeName) :
    result = typeName
  end
}

#·······················································································································

getter @propertyKind swiftTypeName -> @string {
  switch self
  case property (type *) :
    result = [type swiftTypeName]
  case toMany (typeName 3*) :
    result = typeName
  case toOne (typeName 2*) :
    result = typeName
  case arrayController (typeName 2*) :
    result = typeName
  case selectionController (typeName) :
    result = typeName
  end
}

#·······················································································································

getter @typeKind swiftTypeName -> @string outResult {
  switch self
  case integerType : outResult = "Int"
  case stringType : outResult = "String"
  case boolType : outResult = "Bool"
  case dateType : outResult = "Date"
  case doubleType : outResult = "Double"
  case fontType : outResult = "NSFont"
  case colorType : outResult = "NSColor"
  case entityType (@string entityName *) : outResult = entityName
  case enumType (@string enumTypeName *) : outResult = enumTypeName
  case classType (@string classTypeName) : outResult = classTypeName
  case transientPropertyExternType (@string classTypeName) : outResult = classTypeName
  end
}

#·······················································································································

getter @propertyKind isTransient -> @bool {
  switch self
  case property (* accessibility) : result = [accessibility isTransient]
  case toMany (* accessibility 2*) : result = [accessibility isTransient]
  case toOne (* accessibility *) : result = [accessibility isTransient]
  case arrayController (3*) : result = false
  case selectionController (*) : result = false
  end
}

#·······················································································································

getter @propertyKind isComparable -> @bool {
  switch self
  case property (type *) : result = [type isComparable]
  case toMany (4*) : result = false
  case toOne (3*) : result = false
  case arrayController (3*) : result = false
  case selectionController (*) : result = false
  end
}

#·······················································································································

getter @propertyKind isEntityType -> @bool {
  switch self
  case property (2*) : result = false
  case toMany (3* isEntity) : result = isEntity
  case toOne (3*) : result = true
  case arrayController (3*) : result = false
  case selectionController (*) : result = false
  end
}

#·······················································································································

getter @propertyKind isEnumType -> @bool {
  switch self
  case property (type *) : result = [type isEnumType]
  case toMany (4*) : result = false
  case toOne (3*) : result = false
  case arrayController (3*) : result = false
  case selectionController (*) : result = false
  end
}

#·······················································································································

enum @propertyMultiplicity {
  case single
  case collection
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

