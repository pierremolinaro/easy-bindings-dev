#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST   
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @typeKind isComparable -> @bool outResult {
  switch self
  case boolType, integerType, doubleType, stringType, dateType :
    outResult = true
  case fontType, colorType :
    outResult = false
  case enumType (* *) :
    outResult = false
  case entityType (2*) :
    outResult = false
  case classType (*) :
    outResult = false
  case transientPropertyExternType (*) :
    outResult = false
  end
}

#·······················································································································

getter @typeKind isGraphic -> @bool outResult {
  switch self
  case boolType, integerType, doubleType, stringType, dateType :
    outResult = false
  case fontType, colorType :
    outResult = false
  case enumType (* *) :
    outResult = false
  case entityType (* isGraphic) :
    outResult = isGraphic
  case classType (*) :
    outResult = false
  case transientPropertyExternType (*) :
    outResult = false
  end
}

#·······················································································································

shared map @unifiedTypeMap {
  insert insertKey error message "the '%K' type is already declared"
  search searchKey error message "the '%K' type is not declared"
  @typeKind mTypeKind
  @actionMap mActionMap
}

#·······················································································································

list @typeKindList {
  @typeKind mType
}

#·······················································································································

method @astDeclaration typeInventory ?!@unifiedTypeMap unused ioUnifiedTypeMap {}

#·······················································································································

getter @propertyKind swiftTypeName -> @string {
  switch self
  case property (type *) :
    result = [type swiftTypeName]
  case toMany (typeName 3*) :
    result = typeName
  case toOne (typeName 2*) :
    result = typeName
  case arrayController (typeName 2*) :
    result = typeName
  case selectionController (typeName) :
    result = typeName
  end
}

#·······················································································································

getter @typeKind swiftTypeName -> @string outResult {
  switch self
  case integerType : outResult = "Int"
  case stringType : outResult = "String"
  case boolType : outResult = "Bool"
  case dateType : outResult = "Date"
  case doubleType : outResult = "Double"
  case fontType : outResult = "NSFont"
  case colorType : outResult = "NSColor"
  case entityType (@string entityName *) : outResult = entityName
  case enumType (@string enumTypeName *) : outResult = enumTypeName
  case classType (@string classTypeName) : outResult = classTypeName
  case transientPropertyExternType (@string classTypeName) : outResult = classTypeName
  end
}

#·······················································································································

getter @propertyKind isTransient -> @bool {
  switch self
  case property (* accessibility) : result = [accessibility isTransient]
  case toMany (* accessibility 2*) : result = [accessibility isTransient]
  case toOne (* accessibility *) : result = [accessibility isTransient]
  case arrayController (3*) : result = false
  case selectionController (*) : result = false
  end
}

#·······················································································································

getter @propertyKind isComparable -> @bool {
  switch self
  case property (type *) : result = [type isComparable]
  case toMany (4*) : result = false
  case toOne (3*) : result = false
  case arrayController (3*) : result = false
  case selectionController (*) : result = false
  end
}

#·······················································································································

getter @propertyKind isEntityType -> @bool {
  switch self
  case property (2*) : result = false
  case toMany (3* isEntity) : result = isEntity
  case toOne (3*) : result = true
  case arrayController (3*) : result = false
  case selectionController (*) : result = false
  end
}

#·······················································································································

getter @propertyKind isEnumType -> @bool {
  switch self
  case property (type *) : result = [type isEnumType]
  case toMany (4*) : result = false
  case toOne (3*) : result = false
  case arrayController (3*) : result = false
  case selectionController (*) : result = false
  end
}

#·······················································································································

enum @propertyMultiplicity {
  case single
  case collection
}

#·······················································································································

map @observablePropertyMap {
  @propertyKind mKind
  @string mInverseRelationshipName # "" if not a relationship
  @actionMap mActionMap
  @bool mCascade
  insert insertKey error message "the '%K' property is already declared"
  search searchKey error message "the '%K' property is not declared"
  search searchForInverseRelationship error message "the destination entity does not define the '%K' relationship"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   TYPE INVENTORY                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc typeInventory
  ?let @astDeclarationListEX inDeclarationList
  !@unifiedTypeMap outUnifiedTypeMap
{
  outUnifiedTypeMap = .emptyMap
#------------------------ Add predefined types
  [!?outUnifiedTypeMap insertKey !["Double" nowhere] !.doubleType !{}]
  [!?outUnifiedTypeMap insertKey !["String" nowhere] !.stringType !{}]
  [!?outUnifiedTypeMap insertKey !["Int" nowhere]    !.integerType !{}]
  [!?outUnifiedTypeMap insertKey !["Bool" nowhere]   !.boolType !{}]

  [!?outUnifiedTypeMap insertKey !["NSColor" nowhere]   !.colorType !{}]
  [!?outUnifiedTypeMap insertKey !["NSFont" nowhere]   !.fontType !{}]
  [!?outUnifiedTypeMap insertKey !["Date" nowhere]   !.dateType !{}]

  [!?outUnifiedTypeMap insertKey !["enum" nowhere]   !.enumType {!enumTypeName:"" !constantMap:{}} !{}]
#------------------------ Add user defined types and compute transient dependancy graph
  for () in inDeclarationList do
    [mDeclaration typeInventory !?outUnifiedTypeMap]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

