#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST   
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @typeKind {
  case boolType 
  case integerType 
  case doubleType
  case stringType 
  case dateType
  case fontType
  case colorType
  case enumType (@string enumTypeName @enumConstantMap constantMap)
  case entityType (@string entityName @bool graphic)
  case classType (@string className)
  case transientPropertyExternType (@string externTypeName)
}

#·······················································································································

enum @propertyKind {
  case property (@typeKind type @bool readOnly)
  case toMany (@typeKind type @lstring typeName @bool readOnly @bool graphic)
  case toOne (@typeKind type @lstring typeName @bool readOnly @bool graphic)
  case arrayController (@typeKind type @lstring typeName @bool graphic)
  case selectionController (@typeKind type @string typeName)
}

#·······················································································································

getter @typeKind isComparable -> @bool outResult {
  switch self
  case boolType, integerType, doubleType, stringType, dateType :
    outResult = true
  case fontType, colorType :
    outResult = false
  case enumType (* *) :
    outResult = false
  case entityType (2*) :
    outResult = false
  case classType (*) :
    outResult = false
  case transientPropertyExternType (*) :
    outResult = false
  end
}

#·······················································································································

getter @typeKind isGraphic -> @bool outResult {
  switch self
  case boolType, integerType, doubleType, stringType, dateType :
    outResult = false
  case fontType, colorType :
    outResult = false
  case enumType (* *) :
    outResult = false
  case entityType (* isGraphic) :
    outResult = isGraphic
  case classType (*) :
    outResult = false
  case transientPropertyExternType (*) :
    outResult = false
  end
}

#·······················································································································

shared map @unifiedTypeMap {
  insert insertKey error message "the '%K' type is already declared"
  search searchKey error message "the '%K' type is not declared"
  @typeKind mTypeKind
  @actionMap mActionMap
}

#·······················································································································

list @typeKindList {
  @typeKind mType
}

#·······················································································································

abstract method @astDeclaration typeInventory
  ?!@unifiedTypeMap ioUnifiedTypeMap

#·······················································································································

getter @propertyKind type -> @typeKind {
  switch self
  case property (type *) : result = type
  case toMany (type 3*) : result = type
  case toOne (type 3*) : result = type
  case arrayController (type 2*) : result = type
  case selectionController (type *) : result = type
  end
}

#·······················································································································

getter @propertyKind isTransient -> @bool {
  switch self
  case property (* readOnly) : result = readOnly
  case toMany (2* readOnly *) : result = readOnly
  case toOne (2* readOnly *) : result = readOnly
  case arrayController (3*) : result = false
  case selectionController (2*) : result = false
  end
}

#·······················································································································

enum @propertyMultiplicity {
  case single
  case collection
}

#·······················································································································

map @observablePropertyMap {
  @propertyKind mKind
  @string mInverseRelationshipName # "" if not a relationship
  @actionMap mActionMap
  @bool mCascade
  insert insertKey error message "the '%K' property is already declared"
  search searchKey error message "the '%K' property is not declared"
  search searchForInverseRelationship error message "the destination entity does not define the '%K' relationship"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   TYPE INVENTORY                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc typeInventory
  ?let @lstring inSourceFile
  ?let @astDeclarationList inDeclarationList
  !@unifiedTypeMap outUnifiedTypeMap
{
  outUnifiedTypeMap = .emptyMap
#------------------------ Add predefined types
  [!?outUnifiedTypeMap insertKey !["Double" nowhere] !.doubleType !{}]
  [!?outUnifiedTypeMap insertKey !["String" nowhere] !.stringType !{}]
  [!?outUnifiedTypeMap insertKey !["Int" nowhere]    !.integerType !{}]
  [!?outUnifiedTypeMap insertKey !["Bool" nowhere]   !.boolType !{}]

  [!?outUnifiedTypeMap insertKey !["NSColor" nowhere]   !.colorType !{}]
  [!?outUnifiedTypeMap insertKey !["NSFont" nowhere]   !.fontType !{}]
  [!?outUnifiedTypeMap insertKey !["Date" nowhere]   !.dateType !{}]

  [!?outUnifiedTypeMap insertKey !["enum" nowhere]   !.enumType {!enumTypeName:"" !constantMap:{}} !{}]
#------------------------ Add user defined types and compute transient dependancy graph
  for () in inDeclarationList do
    [mDeclaration typeInventory !?outUnifiedTypeMap]
  end
#------------------------ dot files
  if [option easyBindings_options.outputClassDependencyGraph value] then
    let s = [outUnifiedTypeMap edgeGraphvizRepresentation]
    let path = inSourceFile.string + ".typeDependancy.dot"
    [s writeToFileWhenDifferentContents !path ?*]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  TYPE GETTERS                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @typeKind swiftTypeName -> @string outResult {
  switch self
  case integerType : outResult = "Int"
  case stringType : outResult = "String"
  case boolType : outResult = "Bool"
  case dateType : outResult = "Date"
  case doubleType : outResult = "Double"
  case fontType : outResult = "NSFont"
  case colorType : outResult = "NSColor"
  case entityType (@string entityName *) : outResult = entityName
  case enumType (@string enumTypeName *) : outResult = enumTypeName
  case classType (@string classTypeName) : outResult = classTypeName
  case transientPropertyExternType (@string classTypeName) : outResult = classTypeName
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

