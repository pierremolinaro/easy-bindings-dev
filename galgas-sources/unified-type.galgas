#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   AST                                                                                                                *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

enum @typeKind {
  case boolType 
  case integerType 
  case doubleType
  case stringType 
  case colorType 
  case imageType 
  case dateType
  case fontType
  case enumType (@string enumTypeName @enumConstantMap constantMap)
  case entityType (@string entityName)
  case classType (@string className)
}

#......................................................................................................................*

getter @typeKind defaultSwiftTypeValueAsString -> @string outResult {
  switch self
  case boolType : outResult = "false"
  case integerType : outResult = "0"
  case doubleType : outResult = "0.0"
  case stringType : outResult = "\"\"" 
  case colorType : outResult = "NSColor.blackColor ()"
  case imageType : outResult = "NSImage (named:\"NSImageNameApplicationIcon\")"
  case dateType : outResult = "NSDate ()"
  case fontType : outResult = "NSFont (boldSystemFontOfSize:0.0)"
  case enumType (@string enumTypeName @enumConstantMap constantMap) :
    outResult = enumTypeName + "." + [[constantMap keyList] mValueAtIndex !0]
  case entityType (*) :
    outResult = "<<invalid defaultSwiftTypeValueAsString for entity>>"
  case classType (*) :
    outResult = "<<invalid defaultSwiftTypeValueAsString for class>>"
  end
}

#......................................................................................................................*

sharedmap @unifiedTypeMap {
  insert insertKey error message "the '%K' type is already declared"
  search searchKey error message "the '%K' type is not declared"
  @typeKind mTypeKind
  @actionMap mActionMap
}

#......................................................................................................................*

list @typeKindList {
  @typeKind mType
}

#......................................................................................................................*

abstract method @astDeclaration typeInventory
  ?!@unifiedTypeMap ioUnifiedTypeMap

#......................................................................................................................*

enum @propertyKind {
  case stored
  case transient
  case arrayController
  case selectionController
}

#......................................................................................................................*

enum @propertyMultiplicity {
  case single
  case collection
}

#......................................................................................................................*

map @observablePropertyMap {
  @typeKind mType
  @propertyKind mKind
  @propertyMultiplicity mMultiplicity
  @string mInverseRelationshipName # "" if not a relationship
  @actionMap mActionMap
  insert insertKey error message "the '%K' property is already declared"
  search searchKey error message "the '%K' property is not declared"
  search searchForInverseRelationship error message "the destination entity does not define the '%K' relationship"
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   TYPE INVENTORY                                                                                                     *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

proc typeInventory
  ?let @lstring inSourceFile
  ?let @astDeclarationList inDeclarationList
  !@unifiedTypeMap outUnifiedTypeMap
{
  outUnifiedTypeMap = .emptyMap
#------------------------ Add predefined types
  [!?outUnifiedTypeMap insertKey !["Double" nowhere] !.doubleType !{}]
  [!?outUnifiedTypeMap insertKey !["Font" nowhere] !.fontType !{}]
  [!?outUnifiedTypeMap insertKey !["String" nowhere] !.stringType !{}]
  [!?outUnifiedTypeMap insertKey !["Image" nowhere] !.imageType !{}]
  [!?outUnifiedTypeMap insertKey !["Color" nowhere] !.colorType !{}]
  [!?outUnifiedTypeMap insertKey !["Date" nowhere] !.dateType !{}]
  [!?outUnifiedTypeMap insertKey !["Int" nowhere] !.integerType !{}]
  [!?outUnifiedTypeMap insertKey !["Bool" nowhere] !.boolType !{}]
  [!?outUnifiedTypeMap insertKey !["enum" nowhere] !.enumType {!enumTypeName:"" !constantMap:{}} !{}]
#------------------------ Add user defined types and compute transient dependancy graph
  for () in inDeclarationList do
    [mDeclaration typeInventory !?outUnifiedTypeMap]
  end
#------------------------ dot files
  if [option easyBindings_options.outputClassDependencyGraph value] then
    let s = [outUnifiedTypeMap edgeGraphvizRepresentation]
    let path = inSourceFile.string + ".typeDependancy.dot"
    [s writeToFileWhenDifferentContents !path ?*]
  end
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#  TYPE GETTERS                                                                                                        *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

getter @typeKind swiftTypeName -> @string outResult {
  switch self
  case stringType : outResult = "String"
  case boolType : outResult = "Bool"
  case colorType : outResult = "NSColor"
  case dateType : outResult = "NSDate"
  case doubleType : outResult = "Double"
  case fontType : outResult = "NSFont"
  case imageType : outResult = "NSImage"
  case entityType (@string entityName) : outResult = entityName
  case enumType (@string enumTypeName *) : outResult = enumTypeName
  case classType (@string classTypeName) : outResult = classTypeName
  case integerType : outResult = "Int"
  end
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

