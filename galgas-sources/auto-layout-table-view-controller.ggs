#-----------------------------------------------------------------------------------------------------------------------
#   AST
#-----------------------------------------------------------------------------------------------------------------------

list @autoLayoutTableViewControllerBoundColumnListAST {
  public let @bool mEditable
  public let @lstring mPropertyName
  public let @astAutoLayoutViewInstructionParameterList mColumnParameterListAST
  public let @lstring mSortPropertyName
}

#·······················································································································

list @autoLayoutTableViewControllerAttributListAST {
  public let @lstring mAttributeName
  public let @abstractDefaultValue mAttributeValue
}

#·······················································································································

class @autoLayoutTableViewControllerDeclarationAST : @abstractDeclarationAST {
  public let @lstring mControllerName
  public let @bool mIsRoot
  public let @lstring mRootEntityName
  public let @lstring mToManyPropertyName
  public let @autoLayoutTableViewControllerBoundColumnListAST mTableViewControllerBoundColumnListAST
  public let @autoLayoutTableViewControllerAttributListAST mTableViewControllerAttributListAST
}

#·······················································································································

override proc @autoLayoutTableViewControllerDeclarationAST.enterInPrecedenceGraph (?!@declarationPrecedenceGraph ioGraph) {
  let node = @lstring (!self.mClassName.string + " " + self.mControllerName !self.mControllerName.location)
  [!?ioGraph addNode !node !self]
  [!?ioGraph addEdge !node !self.mClassName]
  if not self.mIsRoot then
    [!?ioGraph addEdge !node !.new (!self.mClassName.string + " " + self.mToManyPropertyName !self.mToManyPropertyName.location)]
  elsif self.mRootEntityName.string != "" then
    [!?ioGraph addEdge !node !.new (!self.mRootEntityName.string + " " + self.mToManyPropertyName !self.mToManyPropertyName.location)]
  end
}

#·······················································································································

override func @autoLayoutTableViewControllerDeclarationAST.nodeKey() -> @lstring {
  result = @lstring (!self.mClassName.string + " " + self.mControllerName !self.mControllerName.location)
}

#-----------------------------------------------------------------------------------------------------------------------
#   SYNTAX
#-----------------------------------------------------------------------------------------------------------------------

syntax extension easyBindings_syntax {

  #·····················································································································
  
  rule <controller_declaration>(
            ?let @lstring inCurrentEntity
            ?let @lstring inRootEntity
            ?!@arrayControllerBindingListAST unused ioArrayControllerBindingListAST
            ?!@astDeclarationStruct ioDeclarationAST)
  {
    $tableViewController$
    $controllerName$ (?let @lstring controllerName)
    var @autoLayoutTableViewControllerAttributListAST arrayControllerAttributListAST = {}
    $($
    repeat
      $identifier$ (?let @lstring attributeName)
      $:$
      <explicit_value> (?let @abstractDefaultValue attributeValue)
      arrayControllerAttributListAST += !attributeName !attributeValue
    while
      $,$
    end
    $)$
  #--- Model
    let @bool isRoot
    select
      $root$
      isRoot = true
    or
      $self$
      isRoot = false
    end
    $.$
    $identifier$ (?let @lstring relationshipName)
    var @autoLayoutTableViewControllerBoundColumnListAST arrayControllerBoundColumnListAST = {}
    select
      $;$
    or
      ${$
      repeat
      while
        let @bool editableColumn
        select
          $column$
          editableColumn = false
        or
          $editableColumn$
          editableColumn = true
        end
        $identifier$ (?let propertyName)
        <view_actual_parameter_list> (!?* ?let columnParameterListAST) #§
        let @lstring sortPropertyName
        select
          sortPropertyName = ["" nowhere]
        or
          $sortkey$
          $identifier$ (?sortPropertyName)
        end
        arrayControllerBoundColumnListAST +=
          !editableColumn
          !propertyName
          !columnParameterListAST
          !sortPropertyName
      end
      $}$
    end
    ioDeclarationAST.mUnifiedDeclarationList += !@autoLayoutTableViewControllerDeclarationAST (
      !inCurrentEntity
      !controllerName
      !isRoot
      !inRootEntity
      !relationshipName
      !arrayControllerBoundColumnListAST
      !arrayControllerAttributListAST
    )
  }

  #·····················································································································

}

#-----------------------------------------------------------------------------------------------------------------------
#   CLASS AND PROPERTY SEMANTIC ANALYSIS                       
#-----------------------------------------------------------------------------------------------------------------------

override proc @autoLayoutTableViewControllerDeclarationAST.firstAnalysisPhase (
       ?!@semanticContext ioSemanticContext
       ?!@generationStruct unused ioGeneration)
{
  with self.mClassName in !?ioSemanticContext.mClassMap 
    error message searchKey
  do
    let @actionMap controllerActions = {!["add" nowhere], !["remove" nowhere] }
    if self.mIsRoot then
      [ioSemanticContext.mClassMap searchKey !self.mRootEntityName ?* ?let rootProperties ?2*]
      [rootProperties searchKey !self.mToManyPropertyName ?let classKind ?2*]
      switch classKind
      case property (2*) :
        error self.mRootEntityName : "a toMany relationship is required here"
      case toMany (typeName * graphic *) :
        let kind = @propertyKind.arrayController (
          !typeName: typeName
          !graphic: graphic
        )
        [!?mPropertyMap insertKey !self.mControllerName !kind !controllerActions !false]
    #--- Code Generation
      mPropertyGenerationList += !@autoLayoutTableViewControllerPropertyGeneration (
        !self.mControllerName.string
        !"rootObject." + self.mToManyPropertyName
        !self.mClassName
      )
      case toOne (5*) :
        error self.mRootEntityName : "a toMany relationship is required here"
      case arrayController (2*) :
        error self.mRootEntityName : "a toMany relationship is required here"
      case selectionController (*) :
        error self.mRootEntityName : "a toMany relationship is required here"
      end
    else
      [mPropertyMap searchKey !self.mToManyPropertyName ?let classKind ?2*]
      switch classKind
      case property (2*) :
        error self.mRootEntityName : "a toMany relationship is required here"
      case toMany (typeName * graphic *) :
        let kind = @propertyKind.arrayController (
          !typeName: typeName
          !graphic: graphic
        )
        [!?mPropertyMap insertKey !self.mControllerName !kind !controllerActions !false]
    #--- Code Generation
      mPropertyGenerationList += !@autoLayoutTableViewControllerPropertyGeneration (
        !self.mControllerName.string
        !self.mToManyPropertyName
        !self.mClassName
      )
      case toOne (5*) :
        error self.mRootEntityName : "a toMany relationship is required here"
      case arrayController (2*) :
        error self.mRootEntityName : "a toMany relationship is required here"
      case selectionController (*) :
        error self.mRootEntityName : "a toMany relationship is required here"
      end
    end
  end
}

#-----------------------------------------------------------------------------------------------------------------------
#   SECOND ANALYSIS PHASE
#-----------------------------------------------------------------------------------------------------------------------

override proc @autoLayoutTableViewControllerDeclarationAST.thirdAnalysisPhase(
       ?!@semanticContext ioSemanticContext
       ?!@generationStruct ioGeneration)
{
  [ioSemanticContext.mClassMap searchKey
    !.new (!preferencesName () !.nowhere)
    ?*
    ?let preferencesPropertyMap
    ?2*
  ]
#------------------------------------------------------------ Check array controller attributes
  let attributes = @stringset {!"allowsEmptySelection", !"allowsMultipleSelection"}
  let allowedTypes = @typeKindList {!.boolType}
  var @stringset definedAttributes = {}
  var @2stringlist attributeListForGeneration = {}
  for (name value) in self.mTableViewControllerAttributListAST do
    if not [attributes hasKey !name.string] then
      error name : "unknown attribute"
    elsif [definedAttributes hasKey !name.string] then
      error name : "attribute multiply defined"
    else
      definedAttributes += !name.string
    end
    [value analyzeDefaultValueType !allowedTypes !preferencesPropertyMap ?let valueAsString]
    attributeListForGeneration += !name.string !valueAsString
  end
  for s in attributes do
    if not [definedAttributes hasKey !s] then
      error self.mControllerName : "attribute '" + s + "' not defined"
    end
  end
#------
  let @propertyMap boundModelPropertyMap
  if self.mIsRoot then
    [ioSemanticContext.mClassMap searchKey
       !self.mRootEntityName
       ?*
       ?boundModelPropertyMap 
       ?2*
     ]
  else
    [ioSemanticContext.mClassMap searchKey
       !self.mClassName
       ?*
       ?boundModelPropertyMap 
       ?2*
     ]  
  end
  [boundModelPropertyMap searchKey
     !self.mToManyPropertyName
     ?let @propertyKind boundModelClassKind
     ?2*
  ]
#------------------------------------------------------------ Check colum bound models
  let @propertyMap propertyMap
  let @autoLayoutTableViewControllerModelKind arrayControllerModelKind
  let @bool graphic
  let @string elementTypeName
  switch boundModelClassKind
  case property (2*) :
    error self.mToManyPropertyName
      : "a toMany property is required here"
      spoil graphic, arrayControllerModelKind, propertyMap, elementTypeName
  case toMany (typeName accessibility isGraphic *) :
    elementTypeName = typeName
    graphic = isGraphic
    arrayControllerModelKind = if [accessibility isTransient]
      then .transientArray
      else .entityArray
    end
    [ioSemanticContext.mClassMap searchKey !typeName ?* ?propertyMap ?* ?*]
  case toOne (5*) :
    error self.mToManyPropertyName
      : "a toMany property is required here"
      spoil graphic, arrayControllerModelKind, propertyMap, elementTypeName
  case arrayController (2*) :
    error self.mToManyPropertyName
      : "a toMany property is required here"
      spoil graphic, arrayControllerModelKind, propertyMap, elementTypeName
  case selectionController (*) :
    error self.mToManyPropertyName
      : "a toMany property is required here"
      spoil graphic, arrayControllerModelKind, propertyMap, elementTypeName
  end
  var @autoLayoutTableViewControllerBoundColumnListForGeneration arrayControllerBoundColumnListForGeneration = {}
  var @autoLayoutTableViewControllerSortedColumnListForGeneration arrayControllerSortedColumnListForGeneration = {}
  for (editable propertyName columnParameterList sortPropertyName) in self.mTableViewControllerBoundColumnListAST do
  #-------- Run action ? Check action is declared
#    if columnBindings.mRunActionName.string != "" then
#      [actionMap searchKey !columnBindings.mRunActionName]
#    end
  #-------- Simple bindings
#    [ioSemanticContext.mClassMap searchKey
#      !.new {!preferencesName () !.nowhere}
#      ?*
#      ?let preferencesPropertyMap
#      ?2*
#    ]
#    @regularBindingsGenerationList regularBindingsGenerationList = {}
#    analyzeRegularBinding (
#      !{} # No root observable property map
#      !preferencesPropertyMap
#      !ioSemanticContext
#      !propertyMap
#      !columnOutletTypeName
#      !"<<not used>>"
#      !columnBindings.mRegularBindingList
#      !"object."
#      !?regularBindingsGenerationList
#    )
  #-------- Arguments
    var @autoLayoutClassParameterList formalArgumentList = {}
    formalArgumentList += !["title" nowhere] !.typeString
    formalArgumentList += !["minWidth" nowhere] !.typeInt
    formalArgumentList += !["maxWidth" nowhere] !.typeInt
    formalArgumentList += !["headerAlignment" nowhere] !.typeEnum (!name: ["TextAlignment" nowhere])
    formalArgumentList += !["contentAlignment" nowhere] !.typeEnum (!name: ["TextAlignment" nowhere])
    var @2stringlist actualParameterList = {}
    if [formalArgumentList length] != [columnParameterList length] then
      error propertyName : [[columnParameterList length] string] + " parameter(s), " + [formalArgumentList length] + " required"
    else
      for (formalName formalType) in formalArgumentList, (actualName actualType actualParameter) in columnParameterList do
        if formalName.string != actualName.string then
          error actualName : "required argument name: " + formalName
        end
        if let [formalType typeEnum ?name: let enumTypeName], let [actualType typeEnum ?name: let constantName] then
          [ioSemanticContext.mClassMap searchKey !enumTypeName ?let typeKind ?3*]
          if let [typeKind atomic ?kind: let classKind], let [classKind enumType ?1* ?constantMap: let constantMap ?1*] then
            [constantMap searchKey !constantName ?*]
          else
            error enumTypeName : "this type name is not an enum"
          end
        elsif actualType != formalType then
          error actualName : "the formal parameter requires " + formalType + ", actual parameter is " + actualType
        end
        if let [actualParameter string ?value:let stringValue] then
          actualParameterList += !formalName.string !stringValue
        else
          error actualName :"parameter value is not string convertible"
        end
      end
    end
  #--- Sorted ?
    if sortPropertyName.string != "" then
      [propertyMap searchKey
        !sortPropertyName
        ?let sortPropertyKind
        ?2*
      ]
      if not [sortPropertyKind isComparable] then
        error sortPropertyName : "this property is not comparable"
      end 
      arrayControllerSortedColumnListForGeneration +=    
        !propertyName.string
        !sortPropertyKind
        !sortPropertyName.string
    end
  #-------- Column generation
    [propertyMap searchKey
      !propertyName
      ?let propertyKind
      ?2*
    ]
    arrayControllerBoundColumnListForGeneration +=
      !editable
      !sortPropertyName.string
      !propertyName.string
      ![propertyKind swiftTypeName] # columnOutletTypeName.string
      !"" # columnBindings.mRunActionName.string
      !actualParameterList
  #--- Outlet class is needed ?
#    [ioSemanticContext.mOutletClassMap searchKey !columnOutletTypeName ?6* ?let outletClassIsUserDefined]
#    if not outletClassIsUserDefined then
#      ioGeneration.mNeededOutletClasses += !columnOutletTypeName.string
#    end
  end
  let modelString = if self.mIsRoot
    then "self.rootObject." + self.mToManyPropertyName + "_property"
    else "self." + self.mToManyPropertyName + "_property"
  end
#---
  ioGeneration.mFileGenerationList += !@autoLayoutTableViewControllerGeneration (
    !self.mClassName
    !self.mControllerName
    !modelString
    !arrayControllerBoundColumnListForGeneration
    !arrayControllerSortedColumnListForGeneration
    !"ReadWriteArrayOf_" + elementTypeName
    !arrayControllerModelKind
    !elementTypeName
    !graphic
    !attributeListForGeneration
  )
  ioGeneration.mGenerateClass_StoredArrayOf_ += !elementTypeName
  ioGeneration.mGenerateClass_TransientArrayOf_ += !elementTypeName
}


#-----------------------------------------------------------------------------------------------------------------------
#   CODE GENERATION                       
#-----------------------------------------------------------------------------------------------------------------------

class @autoLayoutTableViewControllerPropertyGeneration : @propertyGeneration {
  public let @string mModelString
  public let @string mOwnerName
}

#·······················································································································

override func @autoLayoutTableViewControllerPropertyGeneration.propertyDeclarationCode(
   ?let @bool inPreferences
   ?let @stringset unused inOverriddenTransients) -> @string
{
  if inPreferences then
    result  = "//" + @string.stringWithSequenceOfCharacters  (!'·' !116) + "\n"
    result += "//   Table View controller: " + self.mPropertyName + "\n"
    result += "//" + @string.stringWithSequenceOfCharacters  (!'·' !116) + "\n\n"
    result += "@MainActor let preferences_" + self.mPropertyName + " = Controller_" + self.mOwnerName + "_" + self.mPropertyName + " ()\n\n"
  else
    result  = "  //" + @string.stringWithSequenceOfCharacters  (!'·' !116) + "\n"
    result += "  //   Array controller: " + self.mPropertyName + "\n"
    result += "  //" + @string.stringWithSequenceOfCharacters  (!'·' !116) + "\n\n"
    result += "  final var " + self.mPropertyName + " = Controller_" + self.mOwnerName + "_" + self.mPropertyName + " ()\n\n"
  end
}

#·······················································································································

override func @autoLayoutTableViewControllerPropertyGeneration.configurationCode (?let @bool inPreferences) -> @string {
  let prefix = if inPreferences then "preferences_" else "self." end
  result  = "  //--- Array controller property: " + self.mPropertyName + "\n"
  result += "    " + prefix + self.mPropertyName + ".bind_model (" + prefix + self.mModelString + "_property, self.undoManager)\n"
}

#·······················································································································

override func @autoLayoutTableViewControllerPropertyGeneration.initCode() -> @string {
  result  = ""
}

#·······················································································································

override func @autoLayoutTableViewControllerPropertyGeneration.populateExplorerWindowCode() -> @string {
  result  = "    //--- Array controller property: " + self.mPropertyName + "\n"
  result += "      self." + self.mPropertyName + ".addExplorer (name: \"" + self.mPropertyName + "\", y:&y, view:view)\n"
}

#-----------------------------------------------------------------------------------------------------------------------
#   GENERATION TYPES
#-----------------------------------------------------------------------------------------------------------------------

enum @autoLayoutTableViewControllerModelKind {
  case entityArray

  case transientArray
}

#-----------------------------------------------------------------------------------------------------------------------

class @autoLayoutTableViewControllerGeneration : @abstractFileGeneration {
  public let @string mOwnerName # document name, prefs name, ...
  public let @lstring mControllerName
  public let @string mModelString
  public let @autoLayoutTableViewControllerBoundColumnListForGeneration mTableViewControllerBoundColumnListForGeneration
  public let @autoLayoutTableViewControllerSortedColumnListForGeneration mTableViewControllerSortedColumnListForGeneration
  public let @string mModelTypeName
  public let @autoLayoutTableViewControllerModelKind mTableViewControllerModelKind
  public let @string mElementTypeName
  public let @bool mElementTypeIsGraphic
  public let @2stringlist mAttributeListForGeneration
}

#·······················································································································

list @autoLayoutTableViewControllerBoundColumnListForGeneration {
  public let @bool mEditable
  public let @string mSortPropertyName
  public let @string mDisplayedPropertyName
  public let @string mColumnObjectTypeName
  public let @string mRunAction # Empty string if no action
  public let @2stringlist mActualParameterList
}

#·······················································································································

list @autoLayoutTableViewControllerSortedColumnListForGeneration {
  public let @string mColumnName
  public let @propertyKind mSortPropertyKind
  public let @string mObservablePropertyForSorting
}

#·······················································································································

private filewrapper autoLayoutTableViewControllerGenerationTemplate in "generation-templates/controllers" {
}{
}{
  template autoLayoutTableViewControllerImplementation "auto-layout-table-view-controller.swift.galgasTemplate"
    ?@string OWNER_NAME
    ?@string TABLE_VIEW_CONTROLLER_NAME
    ?@string MODEL_STRING
    ?@autoLayoutTableViewControllerModelKind MODEL_KIND
    ?@string MODEL_TYPE_NAME
    ?@autoLayoutTableViewControllerBoundColumnListForGeneration BOUND_COLUMNS
    ?@autoLayoutTableViewControllerSortedColumnListForGeneration SORTED_COLUMNS
    ?@string ELEMENT_TYPE_NAME
    ?@stringset OBSERVED_PROPERTIES_FOR_SORTING
    ?@2stringlist ATTRIBUTE_VALUES
}

#-----------------------------------------------------------------------------------------------------------------------
#   GENERATION
#-----------------------------------------------------------------------------------------------------------------------

override proc @autoLayoutTableViewControllerGeneration.generateCode(
    ?let @string inOutputDirectory
    ?let @generationStruct unused inGenerationStruct
    ?!@stringset unused ioGeneratedFileSet) {
#--- Build observed property set (for sorting and filtering)
  var @stringset observedProperties = {}
  for (* * mObservablePropertyForSorting) in self.mTableViewControllerSortedColumnListForGeneration do
    observedProperties += !mObservablePropertyForSorting
  end
  let s = [filewrapper autoLayoutTableViewControllerGenerationTemplate.autoLayoutTableViewControllerImplementation
    !self.mOwnerName
    !self.mControllerName
    !self.mModelString
    !self.mTableViewControllerModelKind
    !self.mModelTypeName
    !self.mTableViewControllerBoundColumnListForGeneration
    !self.mTableViewControllerSortedColumnListForGeneration
    !self.mElementTypeName
    !observedProperties
    !self.mAttributeListForGeneration
  ]
  [@string generateFile
    !inOutputDirectory
    !"controller-table-view-" + self.mOwnerName + "-" +  self.mControllerName + ".swift"
    !s
  ]
}

#-----------------------------------------------------------------------------------------------------------------------
