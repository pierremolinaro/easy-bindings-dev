#-----------------------------------------------------------------------------------------------------------------------
#   AST
#-----------------------------------------------------------------------------------------------------------------------

refclass @xibDocumentDeclarationAST : @abstractDeclarationAST {
  public var @lstring mRootEntityName
  public var @outletDeclarationList mOutletDeclarationList
  public var @lstringlist mActionDeclarationList
  public var @arrayControllerBindingListAST mArrayControllerBindingListAST
}

#·······················································································································

override method @xibDocumentDeclarationAST enterInPrecedenceGraph ?!@declarationPrecedenceGraph ioGraph {
  [!?ioGraph addNode !self.mClassName !self]
  [!?ioGraph addEdge !self.mClassName !self.mRootEntityName]
}

#·······················································································································

override getter @xibDocumentDeclarationAST nodeKey -> @lstring {
  result = self.mClassName
}

#-----------------------------------------------------------------------------------------------------------------------
#   SYNTAX
#-----------------------------------------------------------------------------------------------------------------------

syntax extension easyBindings_syntax {

  #·····················································································································
  
  rule <document_declaration> ?!@astDeclarationStruct ioDeclarationAST {
    $xibdocument$
    $Identifier$ ?let @lstring documentName
    $root$
    $Identifier$ ?let @lstring rootEntityName
    ${$
    var @outletDeclarationList outletDeclarationList = {}
    var @regularBindingList bindingList = {}
    var @lstringlist actionDeclarationList = {}
    var @stringset signatureList = {}
    var @arrayControllerBindingListAST arrayControllerBindingListAST = {}
    repeat
    while
      <action_declaration> !?actionDeclarationList
    while
      <transient_declaration> !documentName !rootEntityName !?ioDeclarationAST
    while
      <outlet_declaration> !?outletDeclarationList
    while
      <controller_declaration> !autoLayout: false !documentName !rootEntityName !?arrayControllerBindingListAST !?ioDeclarationAST
    end
    $}$
    ioDeclarationAST.mUnifiedDeclarationList += !@xibDocumentDeclarationAST.new {
      !documentName
      !rootEntityName
      !outletDeclarationList
      !actionDeclarationList
      !arrayControllerBindingListAST
    }
    ioDeclarationAST.mUnifiedDeclarationList += !@transientDeclarationAST.new {
      !documentName
      !rootEntityName
      !["String" here]
      !["documentFileName" here]
      !{}
      !false
    }
  }

  #·····················································································································

}

#-----------------------------------------------------------------------------------------------------------------------
#   CLASS AND PROPERTY SEMANTIC ANALYSIS                       
#-----------------------------------------------------------------------------------------------------------------------

override method @xibDocumentDeclarationAST firstAnalysisPhase
       ?!@semanticContext ioSemanticContext
       ?!@generationStruct ioGeneration
{
  buildActionMap (!self.mActionDeclarationList ?let @actionMap actionMap)
  [!?ioSemanticContext.mClassMap insertKey
    !self.mClassName
    !.document {!rootEntityName: self.mRootEntityName}
    !{}
    !actionMap
    !{}
  ]
  for (lkey) in actionMap do
    ioGeneration.mFileGenerationList += !@actionFileGeneration.new {
      !self.mClassName.string
      !lkey.string
    }
  end
}

#·······················································································································

override method @xibDocumentDeclarationAST fourthAnalysisPhase
       ?!@semanticContext ioSemanticContext
       ?!@generationStruct ioGeneration
{
  [ioSemanticContext.mClassMap searchKey
    !.new {!preferencesName () !.nowhere}
    ?*
    ?let preferencesPropertyMap
    ?2*
  ]
#--- Get document property map
  [ioSemanticContext.mClassMap searchKey
    !.new {!self.mClassName !.nowhere}
    ?*
    ?let documentPropertyMap
    ?let documentActionMap
    ?let documentPropertyGenerationList
  ]
#--- Get root entity property map
  [ioSemanticContext.mClassMap searchKey
    !self.mRootEntityName
    ?*
    ?let rootPropertyMap
    ?let unused rootActionMap
    ?let unused rootPropertyGenerationList
  ]
#--- Analyze outlets and bindings
  analyzeOutlets (
    !false
    !rootPropertyMap
    !preferencesPropertyMap
    !self.mRootEntityName.string
    !ioSemanticContext
    !self.mOutletDeclarationList
    !documentPropertyMap
    !documentActionMap
    !self.mClassName
    !?ioGeneration
    ?let @regularBindingsGenerationList regularBindingsGenerationList
    ?@multipleBindingGenerationList multipleBindingGenerationList
    ?let @actionBindingListForGeneration actionBindingListForGeneration
    ?let @decoratedOutletMap outletMap
    ?let @tableViewBindingGenerationList tableViewBindingGenerationList
    ?let @ebViewGraphicControllerBindingGenerationList ebViewGraphicControllerBindingGenerationList
  )
#--- Analyze controller bindings
  for (controllerName hiddenBinding) in self.mArrayControllerBindingListAST do
  #--- Hidden
    switch hiddenBinding
    case noBinding :
    case binding (@abstractBooleanMultipleBindingExpressionAST expression) :
      [expression analyzeExpressionForMultipleBinding
        !false
        !rootPropertyMap
        !ioSemanticContext
        !documentPropertyMap
        ?let @abstractBooleanMultipleBindingExpressionForGeneration hiddenExpression
        ?let @typeKind type
        ?let @location errorLocation
      ]
      if not [type isBoolType] then
        error errorLocation : "expression is not boolean"
      end
      multipleBindingGenerationList +=
        !controllerName.string
        !"hidden"
        !hiddenExpression
    end
  end
#--- Code generation
  ioGeneration.mGenerateEBManagedXibDocumentSwift = true
#---
  ioGeneration.mFileGenerationList += !@xibDocumentFileGeneration.new {
    !self.mClassName.string
    !self.mRootEntityName.string
    !documentPropertyGenerationList
    !outletMap
    !actionBindingListForGeneration
    !regularBindingsGenerationList
    !multipleBindingGenerationList
    !tableViewBindingGenerationList
    !ebViewGraphicControllerBindingGenerationList
  }
}



#-----------------------------------------------------------------------------------------------------------------------
#   GENERATION                            
#-----------------------------------------------------------------------------------------------------------------------

refclass @xibDocumentFileGeneration : @abstractFileGeneration {
  public var @string mDocumentName
  public var @string mRootEntityName
  public var @propertyGenerationList mDocumentPropertyGenearionList
  public var @decoratedOutletMap mOutletMap
  public var @actionBindingListForGeneration mTargetActionList 
  public var @regularBindingsGenerationList mRegularBindingsGenerationList 
  public var @multipleBindingGenerationList multipleBindingGenerationList
  public var @tableViewBindingGenerationList mTableViewBindingGenerationList
  public var @ebViewGraphicControllerBindingGenerationList mEBViewBindingGenerationList
}

#·······················································································································

override method @xibDocumentFileGeneration generateCode
    ?let @string inOutputDirectory
    ?!@stringset ioGeneratedFileSet
{
  let s = [filewrapper xibDocumentGenerationTemplate.documentImplementation
    !self.mDocumentName
    !self.mRootEntityName
    !self.mDocumentPropertyGenearionList
    !self.mOutletMap
    !self.mTargetActionList
    !self.mRegularBindingsGenerationList
    !self.multipleBindingGenerationList
    !self.mTableViewBindingGenerationList
    !self.mEBViewBindingGenerationList
  ]
  let fileName = self.mDocumentName + ".swift"
  ioGeneratedFileSet += !fileName
  [@string generateFile
    !inOutputDirectory
    !fileName
    !s
  ]
}

#·······················································································································

private filewrapper xibDocumentGenerationTemplate in "../generation-templates" {
}{
}{
  template documentImplementation "document-xib.swift.galgasTemplate"
    ?@string DOCUMENT_NAME
    ?@string ROOT_ENTITY_NAME
    ?@propertyGenerationList DOCUMENT_PROPERTY_LIST
    ?@decoratedOutletMap OUTLET_GENERATION_MAP
    ?@actionBindingListForGeneration TARGET_ACTION_LIST
    ?@regularBindingsGenerationList REGULAR_BINDINGS_GENERATION_LIST 
    ?@multipleBindingGenerationList MULTIPLE_BINDING_GENERATION_LIST
    ?@tableViewBindingGenerationList TABLE_VALUE_BINDING_GENERATION_LIST
    ?@ebViewGraphicControllerBindingGenerationList EB_VIEW_GRAPHIC_CONTROLLER_BINDING_GENERATION_LIST
}

#-----------------------------------------------------------------------------------------------------------------------

proc generateEBManagedXibDocumentSwift
  ?let @string inOutputDirectory
  ?!@stringset ioGeneratedFileSet
{
  let fileName = "EBManagedXibDocument.swift"
  var fw = [filewrapper swift_sources]
  let contents = [fw textFileContentsAtPath !fileName]
  ioGeneratedFileSet += !fileName
  [@string generateFile
    !inOutputDirectory
    !fileName
    !contents
  ]
}

#-----------------------------------------------------------------------------------------------------------------------
