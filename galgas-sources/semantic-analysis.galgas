#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC TYPES                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @classKind {
  case prefs
  case atomic (@typeKind kind)
  case document (@lstring rootEntityName)
  case entity (@string superEntityName @bool isGraphic @bool isAbstract)
}

#·······················································································································

abstract class @propertyGeneration {
  @string mPropertyName
}

#·······················································································································

getter @propertyGeneration prefKeyDefinitionCode -> @string { result = "" }

#·······················································································································

abstract getter @propertyGeneration declarationCode ?let @stringset inOverriddenTransients -> @string

#·······················································································································

abstract getter @propertyGeneration configurationCode -> @string

#·······················································································································

getter @propertyGeneration terminationCode -> @string { result = "" }

#·······················································································································

getter @propertyGeneration setupAtomicPropertyFromDictionaryCode -> @string { result = "" }

#·······················································································································

getter @propertyGeneration setupRelationshipFromDictionaryCode -> @string { result = "" }

#·······················································································································

getter @propertyGeneration saveIntoDictionaryCode -> @string { result = "" }

#·······················································································································

getter @propertyGeneration objectAccessibilityCode -> @string { result = "" }

#·······················································································································

getter @propertyGeneration populateExplorerWindowCode -> @string { result = "" }

#·······················································································································

getter @propertyGeneration clearObjectExplorerCode -> @string { result = "" }

#·······················································································································

getter @propertyGeneration resetToManyRelationships -> @string { result = "" }

#·······················································································································

list @propertyGenerationList {
  @propertyGeneration mProperty
}

#·······················································································································

map @classMap {
  @classKind mClassKind
  @propertyMap mPropertyMap
  @actionMap mActionMap
  @propertyGenerationList mPropertyGenerationList
  insert insertKey error message "the '%K' class is already declared in %L"
  search searchKey error message "there is no '%K' class"
}

#·······················································································································

enum @propertyAccessibility {
  case stored
  case proxy
  case transient (@bool isAbstract)
}

#·······················································································································

enum @typeKind {
  case boolType 
  case integerType 
  case doubleType
  case stringType 
  case dateType
  case fontType
  case colorType
  case enumType (@string enumTypeName @enumConstantMap constantMap)
  case entityType (@string entityName @bool graphic)
  case classType (@string className)
  case transientPropertyExternType (@string externTypeName)
}

#·······················································································································

enum @propertyKind {
  case property (@typeKind type @propertyAccessibility accessibility)
  case toMany (@lstring typeName @propertyAccessibility accessibility @bool graphic @bool isEntity)
  case toOne (@lstring typeName @propertyAccessibility accessibility @bool graphic)
  case arrayController (@lstring typeName @bool graphic @bool isEntity)
  case selectionController (@string typeName)
}

#·······················································································································

map @propertyMap {
  @propertyKind mKind
  @actionMap mActionMap
  insert insertKey error message "the '%K' property is already declared in %L"
  search searchKey error message "there is no '%K' property"
}

#·······················································································································

getter @propertyMap-element isAbstract -> @bool {
  result = false
  if [mKind isProperty] then
    [mKind property ?1* ?accessibility:let @propertyAccessibility accessibility]
    if [accessibility isTransient] then
      [accessibility transient ?isAbstract: let ab]
      result = ab
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
