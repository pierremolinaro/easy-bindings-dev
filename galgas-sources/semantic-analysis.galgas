#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   SEMANTIC TYPES                                                                                                     *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

abstract method @astDeclaration buildObservablePropertyMapsFromStoredProperties
  ?let @unifiedTypeMap inUnifiedTypeMap
  ?!@semanticContext ioSemanticContext

#·······················································································································

abstract method @astDeclaration semanticAnalysis
  ?let @semanticContext inSemanticContext
  ?!@structForGeneration ioGeneration

#·······················································································································

list @secondaryDeclarationListWorkingList {
  @astDeclaration mDeclaration
  @secondaryPropertyList mSecondaryPropertyList
}

#·······················································································································

abstract method @astDeclaration buildInitialSecondaryPropertyListMap
  ?!@secondaryDeclarationListWorkingList ioSecondaryDeclarationListWorkingList
  ?!@uint ioSecondaryDeclarationCount

#·······················································································································

abstract method @astDeclaration solveSecondaryProperty
  ?!@semanticContext ioSemanticContext
  ?let @unifiedTypeMap inUnifiedTypeMap
  ?let @secondaryPropertyList inPropertiesToSolve
  !@secondaryPropertyList outUnsolvedProperties

#·······················································································································

abstract method @abstractSecondaryProperty tryToSolveSecondaryProperty
  ?!@semanticContext ioSemanticContext
  ?let @observablePropertyMap inRootObservableProperties
  ?!@observablePropertyMap ioObservableProperties
  ?!@secondaryPropertyList ioUnsolvedProperties

#·······················································································································

struct @semanticContext {
  @unifiedTypeMap mUnifiedTypeMap
  @outletClassMap mOutletClassMap
  @bindingSpecificationMap mBindingSpecificationMap
  @observablePropertyMap mPreferencesObservablePropertyMap
  @documentObservablePropertyMap mDocumentObservablePropertyMap
  @entityObservablePropertyMap mEntityObservablePropertyMap
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   SEMANTIC ANALYSIS                                                                                                  *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

proc semanticAnalysis
  ?let @unifiedTypeMap inUnifiedTypeMap
  ?let @string inSourceFile
  ?let @astDeclarationStruct inAstDeclarationStruct
  !@structForGeneration outGeneration
{
#--- Build outlet class map
  [inAstDeclarationStruct.mOutletClassDeclarationList buildOutletClassMap ?let @outletClassMap outletClassMap]
#--- Build binding specification map
  buildBindingSpecificationMap (
    !inUnifiedTypeMap
    !inAstDeclarationStruct.mBindingSpecificationListMap
    ?let @bindingSpecificationMap bindingSpecificationMap
  )
#--- Semantic context
  @semanticContext semanticContext = .new {
    !inUnifiedTypeMap
    !outletClassMap
    !bindingSpecificationMap
    !{}
    !{}
    !{}
  }
#--- Build observable property maps from stored properties
  for () in inAstDeclarationStruct.mDeclarationList do
    [mDeclaration buildObservablePropertyMapsFromStoredProperties
      !inUnifiedTypeMap
      !?semanticContext
    ]  
  end
  [inAstDeclarationStruct.mPreferences buildObservablePropertyMapsFromStoredProperties
    !inUnifiedTypeMap
    !?semanticContext
  ]
#--- Building initial secondary property maps
  @secondaryPropertyList preferencesSecondaryPropertyList = inAstDeclarationStruct.mPreferences.mSecondaryPropertyList
  @secondaryDeclarationListWorkingList secondaryDeclarationListWorkingList = {}
  @uint secondaryDeclarationCount = [preferencesSecondaryPropertyList length] + 1 ;
  for () in inAstDeclarationStruct.mDeclarationList do
    [mDeclaration buildInitialSecondaryPropertyListMap !?secondaryDeclarationListWorkingList !?secondaryDeclarationCount]
  end
#--- Iterate for building observable property maps
  @bool continue = true
  loop (secondaryDeclarationCount) while continue do
    [inAstDeclarationStruct.mPreferences solveSecondaryProperty
      !?semanticContext
      !inUnifiedTypeMap
      !preferencesSecondaryPropertyList
      ?let @secondaryPropertyList newPreferencesSecondaryPropertyList
    ]
    @secondaryDeclarationListWorkingList newSecondaryDeclarationListWorkingList = {}
    for (declaration aList) in secondaryDeclarationListWorkingList do
      [declaration solveSecondaryProperty
        !?semanticContext
        !inUnifiedTypeMap
        !aList
        ?@secondaryPropertyList unsolvedProperties
      ]
      newSecondaryDeclarationListWorkingList += !declaration !unsolvedProperties
    end
    continue = 
      (newSecondaryDeclarationListWorkingList != secondaryDeclarationListWorkingList)
    ||
      (preferencesSecondaryPropertyList != newPreferencesSecondaryPropertyList)
    secondaryDeclarationListWorkingList = newSecondaryDeclarationListWorkingList
    preferencesSecondaryPropertyList = newPreferencesSecondaryPropertyList
  end
#--- Semantic analysis of declarations
  outGeneration = .default
  for () in inAstDeclarationStruct.mDeclarationList do
    [mDeclaration semanticAnalysis
      !semanticContext
      !?outGeneration
    ]  
  end
  [inAstDeclarationStruct.mPreferences semanticAnalysis
    !inAstDeclarationStruct.mPreferences.mExternSwiftFunctionList
    !semanticContext
    !?outGeneration
  ]
#----------------------------------------- Output a binding description in latex
  if [option easyBindings_options.latexBindingDescription value] then
    var s = ""
    for () class_ in semanticContext.mOutletClassMap do
      s += "\\sectionLabel{Classe \\texttt{" + class_lkey + "}}{outletClass" +class_lkey + "}\\index{" + class_lkey + "}\n\n"
      if class_mHandleEnabledBinding || class_mHandlesRunAction || class_mHandlesTableValueBinding then
        s += "\\subsection{Bindings spéciaux}\n\n"
        if class_mHandleEnabledBinding then
          s += "Cette classe définit le binding \\$enabled.\\index{\\$enabled!" + class_lkey + "}\n\n"    
        end
        if class_mHandlesRunAction then
          s += "Cette classe définit le binding \\$run.\\index{\\$run!" + class_lkey + "}\n\n"    
        end
        if class_mHandlesTableValueBinding then
          s += "Cette classe définit le binding \\$tableValue.\\index{\\$tableValue!" + class_lkey + "}\n\n"    
        end
      end
      if [semanticContext.mBindingSpecificationMap hasKey !class_lkey.string] then
        for () binding_ in [semanticContext.mBindingSpecificationMap mBindingMapForKey !class_lkey.string] do
          s += "\\subsection{Binding \\texttt{\\$" + binding_lkey + "}}\\index{\\$" + binding_lkey + "!" + class_lkey + "}\n\n"
          s += "\\subsubsection{Type du modèle}\n\n"
          s += "\\begin{tabular}{|l|l|}\n"
          s += "\\hline\n"
          s += "\\textbf{Type du modèle} & \\textbf{Modèle modifiable via le binding}\\\\\n"
          s += "\\hline\n"
          for () in binding_mOutletBindingSpecificationModelList do
            s += [mModelType swiftTypeName] + " & " + if mModelShouldBeWritableProperty then "Oui" else "Non" end + "\\\\\n"
            s += "\\hline\n"
          end
          s += "\\end{tabular}\n"
          s += "\\subsubsection{Options}\n\n"
          if [binding_mControllerBindingOptionList length] == 0 then
            s += "Ce binding n'a pas d'option.\n\n"
          else
            s += "\\begin{tabular}{|l|l|}\n"
            s += "\\hline\n"
            s += "\\textbf{Nom de l'option} & \\textbf{Type de l'option}\\\\\n"
            s += "\\hline\n"
            for () in binding_mControllerBindingOptionList do
              s += mOptionName.string + " & " + [mOptionType swiftTypeName] + "\\\\\n"
              s += "\\hline\n"
            end
            s += "\\end{tabular}\n"
          end
        end
      end
      s += "\n\n\n\n\n\n\n"
    end
    let latextFilePath = inSourceFile + ".bindings.tex"
    [s writeToFileWhenDifferentContents !latextFilePath ?*]
  end
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
