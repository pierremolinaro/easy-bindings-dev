#----------------------------------------------------------------------------------------------------------------------*

mutating proc @XcodeProjectDescriptor.addICNS_file(
  ?fileName:let @string inFileName,
  !fileRef:@string outFileRef) {
  !?self.getReferenceKey (?ref:outFileRef)
  self.mICNS_fileList += !outFileRef !inFileName
}

#----------------------------------------------------------------------------------------------------------------------*

mutating proc @XcodeProjectDescriptor.addTIFF_file(
  ?fileName:let @string inFileName,
  !fileRef:@string outFileRef) {
  !?self.getReferenceKey (?ref:outFileRef)
  self.mTIFF_fileList += !outFileRef !inFileName
}

#----------------------------------------------------------------------------------------------------------------------*

mutating proc @XcodeProjectDescriptor.addInfoPlistFile(
  ?fileName:let @string inFileName,
  !fileRef:@string outFileRef) {
  !?self.getReferenceKey (?ref:outFileRef)
  self.mInfoPlistFileList += !outFileRef !inFileName
}

#----------------------------------------------------------------------------------------------------------------------*

mutating proc @XcodeProjectDescriptor.addXIBFile(
  ?fileName:let @string inFileName,
  !fileRef:@string outFileRef) {
  !?self.getReferenceKey (?ref:outFileRef)
  self.mXIB_fileList += !outFileRef !inFileName
}

#----------------------------------------------------------------------------------------------------------------------*

mutating proc @XcodeProjectDescriptor.addFrameworkFile(
  ?fileName:let @string inFileName,
  !fileRef:@string outFileRef) {
  !?self.getReferenceKey (?ref:outFileRef)
  self.mFrameworkFileList += !outFileRef !inFileName
}

#----------------------------------------------------------------------------------------------------------------------*

mutating proc @XcodeProjectDescriptor.addMFile(
  ?fileName:let @string inFileName,
  !fileRef:@string outFileRef) {
  !?self.getReferenceKey (?ref:outFileRef)
  self.m_M_FileList += !outFileRef !inFileName
}

#----------------------------------------------------------------------------------------------------------------------*

mutating proc @XcodeProjectDescriptor.addSwiftFile(
  ?fileName:let @string inFileName,
  !fileRef:@string outFileRef) {
  !?self.getReferenceKey (?ref:outFileRef)
  self.m_SwiftFileList += !outFileRef !inFileName
}

#----------------------------------------------------------------------------------------------------------------------*

mutating proc @XcodeProjectDescriptor.addMMFile(
  ?fileName:let @string inFileName,
  !fileRef:@string outFileRef) {
  !?self.getReferenceKey (?ref:outFileRef)
  self.m_MM_FileList += !outFileRef !inFileName
}

#----------------------------------------------------------------------------------------------------------------------*

mutating proc @XcodeProjectDescriptor.addCppFile(
  ?fileName:let @string inFileName,
  !fileRef:@string outFileRef) {
  !?self.getReferenceKey (?ref:outFileRef)
  self.mCppFileList += !outFileRef !inFileName
}

#----------------------------------------------------------------------------------------------------------------------*

mutating proc @XcodeProjectDescriptor.addHeaderFile(
  ?fileName:let @string inFileName,
  !fileRef:@string outFileRef) {
  !?self.getReferenceKey (?ref:outFileRef)
  self.mHeaderFileList += !outFileRef !inFileName
}

#----------------------------------------------------------------------------------------------------------------------*

mutating proc @XcodeProjectDescriptor.addBuildFile(
  ?fileRef:let @string inFileReference,
  ?fileName:let @string inFileName,
  !buildRef:@string outBuildRef) {
  !?self.getReferenceKey (?ref:outBuildRef)
  self.mBuildFileList += !inFileReference !inFileName !outBuildRef
}

#----------------------------------------------------------------------------------------------------------------------*

mutating proc @XcodeProjectDescriptor.addToolTarget(
  ?targetName:let @string inTargetName,
  ?productFileName:let @string inProductFileName,
  ?sources:let @stringlist inSourceList,
  ?frameworkRefs:let @stringlist inToolFrameworksFileRefList,
  ?buildConfigurationSettingList:let @stringlist inBuildConfigurationSettingList,
  !targetRef:@string outTargetRef,
  !productFileRef:@string outProductFileRef) {
  !?self.getReferenceKey (?ref: outProductFileRef)
  !?self.getReferenceKey (?ref: let buildPhaseRef)
  !?self.getReferenceKey (?ref: outTargetRef)
  !?self.getReferenceKey (?ref: let buildConfigurationListRef)
  !?self.getReferenceKey (?ref: let buildConfigurationRef)
  !?self.getReferenceKey (?ref: let frameworkBuildRef)
  self.mToolTargetList +=
    !outTargetRef
    !inTargetName
    !outProductFileRef
    !inProductFileName
    !inSourceList
    !buildPhaseRef
    !buildConfigurationListRef
    !inBuildConfigurationSettingList
    !buildConfigurationRef
    !inToolFrameworksFileRefList
    !frameworkBuildRef
}

#----------------------------------------------------------------------------------------------------------------------*

mutating proc @XcodeProjectDescriptor.addAppTarget(
  ?targetName:let @string inTargetName,
  ?productFileName:let @string inProductFileName,
  ?sources:let @stringlist inSourceList,
  ?frameworkFileRefs:let @stringlist inFrameworksFileRefList,
  ?resourceFileRefs:let @stringlist inResourceFileBuildRefs,
  ?buildConfigurationSettingList:let @stringlist inBuildConfigurationSettingList,
  ?dependantTargetList:let @stringlist inDependentTargetRefList,
  ?productCopyList:let @2stringlist inProductCopyList,
  ?infoPList:let @string inInfoPList,
  !productFileRef:@string outProductFileRef)
{
  !?self.getReferenceKey (?ref: outProductFileRef)
  !?self.getReferenceKey (?ref: let buildPhaseRef)
  !?self.getReferenceKey (?ref: let targetRef)
  !?self.getReferenceKey (?ref: let buildConfigurationListRef)
  !?self.getReferenceKey (?ref: let buildConfigurationRef)
  !?self.getReferenceKey (?ref: let frameworkBuildRef)
  !?self.getReferenceKey (?ref: let resourceBuildRef)
  var @2stringlist dependentTargets = []
  for (ref) in inDependentTargetRefList do
    !?self.getReferenceKey (?ref: let dependencyBuildRef)
    dependentTargets += !dependencyBuildRef !ref
  end
  var @stringlist resourceFileBuildRefs = inResourceFileBuildRefs
  for (ref name) in inProductCopyList do
    !?self.addBuildFile (!fileRef:ref, !fileName:name, ?buildRef:let @string buildRef)
    resourceFileBuildRefs += !buildRef
  end
  self.mAppTargetList +=
    !targetRef
    !inTargetName
    !outProductFileRef
    !inProductFileName
    !inSourceList
    !buildPhaseRef
    !buildConfigurationListRef
    !inBuildConfigurationSettingList
    !buildConfigurationRef
    !inFrameworksFileRefList
    !frameworkBuildRef
    !dependentTargets
    !resourceBuildRef
    !resourceFileBuildRefs
    !inInfoPList
}

#----------------------------------------------------------------------------------------------------------------------*

mutating proc @XcodeProjectDescriptor.addGroup(
  ?groupName:let @string inGroupName,
  ?groupPath:let @string inGroupPath,
  ?childrenRefs:let @stringlist inChildrenRefs,
  !groupRef:@string outGroupRef) {
  if self.mDefaultConfigurationRef == "" then
    !?self.getReferenceKey (?ref: self.mDefaultConfigurationRef)
  end
  if self.mProjectBuildConfigurationRef == "" then
    !?self.getReferenceKey (?ref: self.mProjectBuildConfigurationRef)
  end
  if self.mMainGroupReference == "" then
    !?self.getReferenceKey (?ref: self.mMainGroupReference)
  end
  !?self.getReferenceKey (?ref: outGroupRef)
  self.mGroupList += !outGroupRef !inGroupName !inGroupPath !inChildrenRefs
}

#----------------------------------------------------------------------------------------------------------------------*

mutating proc @XcodeProjectDescriptor.addGroupWithFiles(
  ?groupName:let @string inGroupName,
  ?groupPath:let @string inGroupPath,
  ?fileNames:let @stringset inFileNames,
  ?!cppFileRefs:@stringlist ioCppFileBuildRefs,
  ?!mFileRefs:@stringlist ioMFileBuildRefs,
  ?!mmFileRefs:@stringlist ioMMFileBuildRefs,
  ?!swiftFileRefs:@stringlist ioSwiftFileBuildRefs,
  ?!frameworkFileRefs:@stringlist ioFrameWorkFileBuildRefs,
  ?!resourceFileRefs:@stringlist ioResourceFileBuildRefs,
  !groupRef:@string outGroupRef) {
  if self.mDefaultConfigurationRef == "" then
    !?self.getReferenceKey (?ref: self.mDefaultConfigurationRef)
  end
  if self.mProjectBuildConfigurationRef == "" then
    !?self.getReferenceKey (?ref: self.mProjectBuildConfigurationRef)
  end
  if self.mMainGroupReference == "" then
    !?self.getReferenceKey (?ref: self.mMainGroupReference)
  end
  !?self.getReferenceKey (?ref: outGroupRef)
#---
  var @stringlist childrenRefs = []
  for (f) in inFileNames do
    if f.pathExtension () == "cpp" then
      !?self.addCppFile (!fileName:f, ?fileRef:let @string cppFileRef)
      childrenRefs += !cppFileRef
      !?self.addBuildFile (!fileRef:cppFileRef, !fileName:f, ?buildRef:let @string buildRef)
      ioCppFileBuildRefs += !buildRef
    elsif f.pathExtension () == "h" then
      !?self.addHeaderFile (!fileName:f, ?fileRef:let @string headerFileRef)
      childrenRefs += !headerFileRef
    elsif f.pathExtension () == "m" then
      !?self.addMFile (!fileName:f, ?fileRef:let @string m_FileRef)
      !?self.addBuildFile (!fileRef:m_FileRef, !fileName:f, ?buildRef:let @string buildRef)
      childrenRefs += !m_FileRef
      ioMFileBuildRefs += !buildRef
    elsif f.pathExtension () == "swift" then
      !?self.addSwiftFile (!fileName:f, ?fileRef:let @string swift_FileRef)
      !?self.addBuildFile (!fileRef:swift_FileRef, !fileName:f, ?buildRef:let @string buildRef)
      childrenRefs += !swift_FileRef
      ioSwiftFileBuildRefs += !buildRef
    elsif f.pathExtension () == "mm" then
      !?self.addMMFile (!fileName:f, ?fileRef:let @string m_FileRef)
      !?self.addBuildFile (!fileRef:m_FileRef ,!fileName:f, ?buildRef:let @string buildRef)
      childrenRefs += !m_FileRef
      ioMMFileBuildRefs += !buildRef
    elsif f.pathExtension () == "framework" then
      !?self.addFrameworkFile (!fileName:f, ?fileRef:let @string framework_FileRef)
      !?self.addBuildFile (!fileRef:framework_FileRef, !fileName:f, ?buildRef:let @string buildRef)
      childrenRefs += !framework_FileRef
      ioFrameWorkFileBuildRefs += !buildRef
    elsif f.pathExtension () == "plist" then
      !?self.addInfoPlistFile (!fileName:f, ?fileRef:let @string resource_FileRef)
      childrenRefs += !resource_FileRef
    elsif f.pathExtension () == "xib" then
      !?self.addXIBFile (!fileName:f, ?fileRef:let @string resource_FileRef)
      childrenRefs += !resource_FileRef
      !?self.addBuildFile (!fileRef:resource_FileRef, !fileName:f, ?buildRef:let @string buildRef)
      ioResourceFileBuildRefs += !buildRef
    elsif f.pathExtension () == "tiff" then
      !?self.addTIFF_file (!fileName:f, ?fileRef:let @string resource_FileRef)
      childrenRefs += !resource_FileRef
      !?self.addBuildFile (!fileRef:resource_FileRef, !fileName:f, ?buildRef:let @string buildRef)
      ioResourceFileBuildRefs += !buildRef
    elsif f.pathExtension () == "icns" then
      !?self.addICNS_file (!fileName:f, ?fileRef:let @string resource_FileRef)
      childrenRefs += !resource_FileRef
      !?self.addBuildFile (!fileRef:resource_FileRef, !fileName:f, ?buildRef:let @string buildRef)
      ioResourceFileBuildRefs += !buildRef
    else
      error @location.nowhere : "unhandled extension for file '" + f + "'"
    end
  end
  self.mGroupList += !outGroupRef !inGroupName !inGroupPath !childrenRefs
}

#----------------------------------------------------------------------------------------------------------------------*

mutating proc @XcodeProjectDescriptor.placeGroupAsMainGroup(
  ?groupRef:let @string inGroupRef) {
  self.mMainGroupChildrenRefs += !inGroupRef
}

#----------------------------------------------------------------------------------------------------------------------*

mutating proc @XcodeProjectDescriptor.addSettingsToDefaultConfiguration(
  ?settingList:let @stringlist inSettingList) {
  self.mDefaultConfigurationSettingList += inSettingList
}

#----------------------------------------------------------------------------------------------------------------------*

list @XCodeGroupList {
  public var @string mGroupReference
  public var @string mGroupName
  public var @string mGroupPath
  public var @stringlist mChildrenRefs
}

#----------------------------------------------------------------------------------------------------------------------*

list @XCodeToolTargetList {
  public var @string mTargetRef
  public var @string mTargetName
  public var @string mProductFileReference
  public var @string mProductFileName
  public var @stringlist mBuildPhaseRefList
  public var @string mBuildPhaseRef
  public var @string mBuildConfigurationListRef
  public var @stringlist mBuildConfigurationSettingList
  public var @string mBuildConfigurationRef
  public var @stringlist mFrameworksFileRefList
  public var @string mFrameworkBuildPhaseRef
}

#----------------------------------------------------------------------------------------------------------------------*

list @XCodeAppTargetList {
  public var @string mTargetRef
  public var @string mTargetName
  public var @string mProductFileReference
  public var @string mProductFileName
  public var @stringlist mBuildPhaseRefList
  public var @string mBuildPhaseRef
  public var @string mBuildConfigurationListRef
  public var @stringlist mBuildConfigurationSettingList
  public var @string mBuildConfigurationRef
  public var @stringlist mFrameworksFileRefList
  public var @string mFrameworkBuildPhaseRef
  public var @2stringlist mDependentTargets
  public var @string mResourceBuildRef
  public var @stringlist mResourceFileBuildRefs
  public var @string mInfoPListFile
}

#----------------------------------------------------------------------------------------------------------------------*

list @BuildFileList {
  public var @string mFileReference
  public var @string mFileName
  public var @string mBuildReference
}

#----------------------------------------------------------------------------------------------------------------------*

mutating proc @XcodeProjectDescriptor.getReferenceKey (!ref: @string outRef) {
  if self.mProjectObjectReference == "" then
    self.mProjectObjectReference = self.mSequenceNumber.string ().md5 ().rightSubString (24)
    self.mSequenceNumber += 1
  end
  outRef = self.mSequenceNumber.string ().md5().rightSubString (24)
  self.mSequenceNumber += 1
}

#----------------------------------------------------------------------------------------------------------------------*

struct @XcodeProjectDescriptor {
  public var @uint mSequenceNumber = 0
  public var @string mMainGroupReference = ""
  public var @stringlist mMainGroupChildrenRefs = []
  public var @string mProjectObjectReference = ""
  public var @XCodeGroupList mGroupList = []
  public var @XCodeToolTargetList mToolTargetList = []
  public var @XCodeAppTargetList mAppTargetList = []
  public var @2stringlist mCppFileList = []
  public var @2stringlist m_M_FileList = []
  public var @2stringlist m_MM_FileList = []
  public var @2stringlist m_SwiftFileList = []
  public var @2stringlist mFrameworkFileList = []
  public var @2stringlist mHeaderFileList = []
  public var @BuildFileList mBuildFileList = []
#--- Default configuration
  public var @string mDefaultConfigurationRef = ""
  public var @stringlist mDefaultConfigurationSettingList = []
  public var @string mProjectBuildConfigurationRef = ""
#--- Resource files
  public var @2stringlist mInfoPlistFileList = []
  public var @2stringlist mXIB_fileList = []
  public var @2stringlist mTIFF_fileList = []
  public var @2stringlist mICNS_fileList = []
}

#----------------------------------------------------------------------------------------------------------------------*

private filewrapper xcodeProjectGenerationFilewrapper in "generation-templates/xcode-project" {
}{
}{
  template xcodeproj : "project.pbxproj.galgasTemplate" (
    @string PROJECT_REF,
    @string MAIN_GROUP_REF,
    @XCodeGroupList GROUPS,
    @stringlist MAIN_GROUP_CHILDREN_REFS,
    @XCodeToolTargetList TOOL_TARGET_LIST,
    @XCodeAppTargetList APP_TARGET_LIST,
    @2stringlist CPP_FILE_LIST,
    @2stringlist M_FILE_LIST,
    @2stringlist MM_FILE_LIST,
    @2stringlist SWIFT_FILE_LIST,
    @2stringlist FRAMEWORK_FILE_LIST,
    @2stringlist HEADER_FILE_LIST,
    @2stringlist PLIST_FILE_LIST,
    @2stringlist TIFF_FILE_LIST,
    @2stringlist ICNS_FILE_LIST,
    @2stringlist XIB_FILE_LIST,
    @BuildFileList BUILD_FILE_LIST,
    @string DEFAULT_CONFIGURATION_REF,
    @stringlist DEFAULT_CONFIGURATION_SETTING_LIST,
    @string PROJECT_BUILD_DEFAULT_CONFIGURATION_REF
  )
}

#----------------------------------------------------------------------------------------------------------------------*

proc @XcodeProjectDescriptor.generateAtPath(
  ?xcodeprojPath:let @string inPath,
  ?cacheFilePath:let @string inCacheFilePath) {
  let contents = filewrapper [xcodeProjectGenerationFilewrapper.xcodeproj:
    self.mProjectObjectReference,
    self.mMainGroupReference,
    self.mGroupList,
    self.mMainGroupChildrenRefs,
    self.mToolTargetList,
    self.mAppTargetList,
    self.mCppFileList,
    self.m_M_FileList,
    self.m_MM_FileList,
    self.m_SwiftFileList,
    self.mFrameworkFileList,
    self.mHeaderFileList,
    self.mInfoPlistFileList,
    self.mTIFF_fileList,
    self.mICNS_fileList,
    self.mXIB_fileList,
    self.mBuildFileList,
    self.mDefaultConfigurationRef,
    self.mDefaultConfigurationSettingList,
    self.mProjectBuildConfigurationRef
  ]
  let projectCoreFile = inPath + "/project.pbxproj"
  if (not projectCoreFile.fileExists ()) || (not inCacheFilePath.fileExists ()) || (@string.stringWithContentsOfFile (inCacheFilePath) != contents) then 
    [contents writeToFileWhenDifferentContents inCacheFilePath, ?*]
    [contents makeDirectoryAndWriteToFile projectCoreFile]
  end
}

#----------------------------------------------------------------------------------------------------------------------*

