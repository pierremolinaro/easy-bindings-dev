#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   AST                                                                                                                *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

class @entityDeclaration : @astDeclaration {
  @lstring mEntityName
  @lstring mSuperEntityName
  @simpleStoredPropertyList mSimpleStoredAttributeList
  @toOneRelationshipList mToOneRelationshipList
  @toManyRelationshipList mToManyRelationshipList
  @secondaryPropertyList mSecondaryPropertyList
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   SYNTAX                                                                                                             *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

syntax extension easyBindings_syntax {

  #....................................................................................................................*
  
  rule <entity_declaration>
    ?let @bool inIsUserDefined
    ?!@astDeclarationStruct ioDeclarationAST
  {
    $entity$
    $Identifier$ ?let @lstring entityName
    @lstring superEntityName
    select
      superEntityName = ["" nowhere]
    or
      $:$
      $Identifier$ ? superEntityName
    end
    ${$
    @secondaryPropertyList secondaryPropertyList = {}
    @simpleStoredPropertyList simpleStoredAttributeList = {}
    @toOneRelationshipList toOneRelationshipList = {}
    @toManyRelationshipList toManyRelationshipList = {}
    repeat
    while
      <simple_stored_declaration> !?simpleStoredAttributeList
    while
      <transient_declaration> !?secondaryPropertyList
    while
      <toMany_relationship> !?toManyRelationshipList
    while
      <toOne_relationship> !?toOneRelationshipList
    end
    $}$
    ioDeclarationAST.mDeclarationList += !@entityDeclaration.new {
      !inIsUserDefined
      !entityName
      !superEntityName
      !simpleStoredAttributeList
      !toOneRelationshipList
      !toManyRelationshipList
      !secondaryPropertyList
    }
  }

  #....................................................................................................................*

}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   TYPE INVENTORY                                                                                                     *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

override method @entityDeclaration typeInventory
  ?!@unifiedTypeMap ioUnifiedTypeMap
{
  [mSimpleStoredAttributeList typeInventory !?ioUnifiedTypeMap]
  for (item) in mSecondaryPropertyList do
    [item typeInventory
      !?ioUnifiedTypeMap
    ]
  end
  [mToOneRelationshipList typeInventory !?ioUnifiedTypeMap]
  [mToManyRelationshipList typeInventory !?ioUnifiedTypeMap]
  [!?ioUnifiedTypeMap insertKey !mEntityName !.entityType {!entityName:mEntityName.string}]
  if mSuperEntityName.string != "" then
    [@unifiedTypeMap-proxy makeProxy !?ioUnifiedTypeMap !mSuperEntityName ?*]
  end
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   SEMANTIC TYPES                                                                                                     *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

map @entityObservablePropertyMap {
  @observablePropertyMap mObservablePropertyMap
  insert insertKey error message "the '%K' document is already declared in %L"
  search searchKey error message "there is no '%K' document"
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   SEMANTIC ANALYSIS                                                                                                  *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

# Only get current entity observable properties, do not collect in super entities
override method @entityDeclaration buildObservablePropertyMapsFromStoredProperties
  ?let @unifiedTypeMap inUnifiedTypeMap
  ?!@semanticContext ioSemanticContext
{
  @observablePropertyMap observablePropertyMap = {}
#--- Analyze simple stored properties
  [mSimpleStoredAttributeList buildObservablePropertyMap
    !inUnifiedTypeMap
    !?observablePropertyMap
  ]
#--- Analyze relationships
  [mToOneRelationshipList buildObservablePropertyMap
    !inUnifiedTypeMap
    !?observablePropertyMap
  ]
  [mToManyRelationshipList buildObservablePropertyMap
    !inUnifiedTypeMap
    !?observablePropertyMap
  ]
#--- Enter in semantics context  
  [!?ioSemanticContext.mEntityObservablePropertyMap insertKey
    !mEntityName
    !observablePropertyMap
  ]
}

#......................................................................................................................*

override method @entityDeclaration buildInitialSecondaryPropertyListMap
  ?!@secondaryDeclarationListWorkingList ioSecondaryDeclarationListWorkingList
  ?!@uint ioSecondaryDeclarationCount
{
  ioSecondaryDeclarationCount = ioSecondaryDeclarationCount + [mSecondaryPropertyList length]
  ioSecondaryDeclarationListWorkingList += !self !mSecondaryPropertyList
}

#......................................................................................................................*

override method @entityDeclaration solveSecondaryProperty
  ?!@semanticContext ioSemanticContext
  ?let @unifiedTypeMap unused inUnifiedTypeMap
  ?let @secondaryPropertyList inPropertiesToSolve
  !@secondaryPropertyList outUnsolvedProperties
{
  outUnsolvedProperties = {}
  [ioSemanticContext.mEntityObservablePropertyMap searchKey
    !mEntityName
    ?@observablePropertyMap observablePropertyMap
  ]
  for (property) in inPropertiesToSolve do
    [property tryToSolveSecondaryProperty
      !?ioSemanticContext
      !{} # No root entity
      !?observablePropertyMap
      !?outUnsolvedProperties
    ]
  end
  [!?ioSemanticContext.mEntityObservablePropertyMap setMObservablePropertyMapForKey
    !observablePropertyMap
    !mEntityName.string
  ]
}

#......................................................................................................................*

override method @entityDeclaration semanticAnalysis
  ?let @semanticContext inSemanticContext
  ?!@structForGeneration ioGeneration
{
  [inSemanticContext.mEntityObservablePropertyMap searchKey
    !mEntityName
    ?let @observablePropertyMap observablePropertyMap
  ]
#--- TO DO : GET OBSERVABLE PROPERTIES FROM SUPER ENTITY
#--- Analyze simple stored properties
  [mSimpleStoredAttributeList simpleStoredPropertySemanticAnalysis
    !mEntityName.string
    !inSemanticContext.mUnifiedTypeMap
    !?ioGeneration.mValidationStubRoutineListForGeneration
    ?let @simpleStoredPropertyListForGeneration simpleStoredPropertyListForGeneration
  ]
#--- Analyze transients
  @transientDefinitionListForGeneration transientDefinitionListForGeneration = {}
  for (item) in mSecondaryPropertyList do
    [item secondaryPropertySemanticAnalysis
      !mEntityName.string
      !"" # No root entity name
      !{} # No root entity
      !inSemanticContext
      !observablePropertyMap
      !?transientDefinitionListForGeneration
      !?* # no array controller
      !?* # No selection controller
    ]
  end
  ioGeneration.mTransientListForGeneration += transientDefinitionListForGeneration
#--- Analyze toOne relationships
  [mToOneRelationshipList semanticAnalysis
    !inSemanticContext
    ?let @toOneEntityRelationshipListForGeneration toOneEntityRelationshipListForGeneration
  ]
#--- Analyze toMany relationships
  [mToManyRelationshipList semanticAnalysis
    !inSemanticContext
    ?let @toManyEntityRelationshipListForGeneration toManyEntityRelationshipListForGeneration
  ]
#--- Generation
  ioGeneration.mEntityListForGeneration +=
    !mEntityName.string
    !mSuperEntityName.string
    !simpleStoredPropertyListForGeneration
    !transientDefinitionListForGeneration
    !toOneEntityRelationshipListForGeneration
    !toManyEntityRelationshipListForGeneration
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   GENERATION TYPES                                                                                                   *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

list @entityListForGeneration {
  @string mEntityName
  @string mSuperEntityName
  @simpleStoredPropertyListForGeneration mSimpleStoredPropertyListForGeneration
  @transientDefinitionListForGeneration mDecoratedTransientListForGeneration
  @toOneEntityRelationshipListForGeneration mToOneEntityRelationshipList
  @toManyEntityRelationshipListForGeneration mToManyEntityRelationshipList
}

#......................................................................................................................*

private filewrapper entityGenerationTemplate in "../generation-templates" {
}{
}{
  template entityImplementationInSwift "entity.swift.galgasTemplate"
    ?@string ENTITY_NAME
    ?@simpleStoredPropertyListForGeneration SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION
    ?@transientDefinitionListForGeneration TRANSIENT_LIST_FOR_IMPLEMENTATION
    ?@toOneEntityRelationshipListForGeneration TO_ONE_RELATIONSHIP_LIST
    ?@toManyEntityRelationshipListForGeneration TO_MANY_RELATIONSHIP_LIST

  template managedDocument "PMManagedDocument.swift.galgasTemplate"
    ?@entityListForGeneration ENTITY_LIST
  
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   GENERATION                                                                                                         *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

proc generateEntities
  ?let @entityListForGeneration inEntityListForGeneration
  ?let @string inOutputDirectory
  ?!@stringset ioGeneratedFileSet
{
  for () in inEntityListForGeneration do
    let s = [filewrapper entityGenerationTemplate.entityImplementationInSwift
      !mEntityName
      !mSimpleStoredPropertyListForGeneration
      !mDecoratedTransientListForGeneration
      !mToOneEntityRelationshipList
      !mToManyEntityRelationshipList
    ]
    let fileName = mEntityName + ".swift"
    ioGeneratedFileSet += !fileName
    [@string generateFile
      !inOutputDirectory
      !fileName
      !s
    ]
  end
#----- 
  if [inEntityListForGeneration length] > 0 then
    let fileName = "PMManagedDocument.swift"
    ioGeneratedFileSet += !fileName
    let s = [filewrapper entityGenerationTemplate.managedDocument
      !inEntityListForGeneration
    ]
    [@string generateFile
      !inOutputDirectory
      !fileName
      !s
    ]
  end
}

#......................................................................................................................*

getter @typeKind transformForSavingInDictionary ?let @string inPropertyName -> @string outResult {
  switch self
  case boolType : outResult = "NSNumber (bool:" + inPropertyName + ".prop.0)"
  case integerType : outResult = "NSNumber (integer:" + inPropertyName + ".prop.0)"
  case doubleType : outResult = "NSNumber (double:" + inPropertyName + ".prop.0)"
  case stringType : outResult = inPropertyName + ".prop.0"
  case colorType : outResult = "NSArchiver.archivedDataWithRootObject (" + inPropertyName + ".prop.0)"
  case dateType : outResult = "NSDate"
  case enumType (* *) : outResult = "NSNumber (integer:" + inPropertyName + ".prop.rawValue)"
  case entityType (*) :
    outResult = "<entity is invalid for transformForSavingInDictionary>"
  end
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
