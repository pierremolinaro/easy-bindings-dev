#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST   
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @entityDeclarationAST : @abstractDeclarationAST {
  @bool mIsUserDefined
  @lstring mSuperEntityName
  @simpleStoredPropertyList mSimpleStoredAttributeList
  @stringset mSignatureList
  @lstringlist mActionDeclarationList
  @lstringlist mObsoleteEntityNames
  @bool mIsGraphicEntity
}

#·······················································································································

override method @entityDeclarationAST enterInPrecedenceGraph ?!@declarationPrecedenceGraph ioGraph {
  [!?ioGraph addNode !mClassName !self]
  if mSuperEntityName.string != "" then
    [!?ioGraph addEdge !mClassName !mSuperEntityName]
  end
}

#·······················································································································

override getter @entityDeclarationAST lkey -> @lstring {
  result = mClassName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension easyBindings_syntax {

  #·····················································································································
  
  rule <entity_declaration> ?let @bool inIsUserDefined ?!@astDeclarationStruct ioDeclarationAST {
    @bool graphicEntity
    select
      graphicEntity = false
    or
      $graphic$
      graphicEntity = true
    end
    $entity$
    @lstringlist obsoleteEntityNames = {}
    select
    or
      $($
      repeat
        $Identifier$ ?let @lstring obsoleteName
        obsoleteEntityNames += !obsoleteName
      while
        $,$
      end
      $)$
    end
    $Identifier$ ?let @lstring entityName
    @lstring superEntityName
    select
      superEntityName = ["" nowhere]
    or
      $:$
      $Identifier$ ? superEntityName
    end
    ${$
    @simpleStoredPropertyList simpleStoredAttributeList = {}
    @stringset signatureList = {}
    @lstringlist actionDeclarationList = {}
    repeat
    while
      <simple_stored_declaration> !entityName !?simpleStoredAttributeList !?signatureList !?ioDeclarationAST
    while
      <transient_declaration> !entityName !["" nowhere] !?ioDeclarationAST
    while
      <toMany_relationship> !entityName !?signatureList !?ioDeclarationAST
    while
      <toOne_relationship> !entityName !?ioDeclarationAST
    while
      <action_declaration> !?actionDeclarationList
    while
      <controller_declaration> !entityName !["" nowhere]  !?ioDeclarationAST
    end
    $}$
    ioDeclarationAST.mUnifiedDeclarationList += !@entityDeclarationAST.new {
      !entityName
      !inIsUserDefined
      !superEntityName
      !simpleStoredAttributeList
      !signatureList
      !actionDeclarationList
      !obsoleteEntityNames
      !graphicEntity
    }
  }
 
  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @entityDeclarationAST firstAnalysisPhase
       ?!@semanticContext ioSemanticContext
       ?!@generationStruct unused ioGeneration
{
  buildActionMap (!mActionDeclarationList ?let @actionMap actionMap)
  [!?ioSemanticContext.mClassMap insertKey
    !mClassName
    !.entity {!isGraphic: mIsGraphicEntity}
    !{}
    !actionMap
    !{}
  ]
}

#·······················································································································

override method @entityDeclarationAST thirdAnalysisPhase
       ?!@semanticContext ioSemanticContext
       ?!@generationStruct ioGeneration
{
  [ioSemanticContext.mClassMap searchKey
    !mClassName
    ?*
    ?let @propertyMap propertyMap
    ?*
    ?let @propertyGenerationList propertyGenerationList
  ]
#--- Check required transients are implemented
  @stringset transientsDeclaredInSuperEntity = {}
  if mIsGraphicEntity then
    transientsDeclaredInSuperEntity += !"selectionDisplay"
    if [propertyMap hasKey !"selectionDisplay"] then
      [propertyMap searchKey
        !["selectionDisplay" here]
        ?let @propertyKind kind
        ?*
      ]
      let errorLocation = [propertyMap locationForKey !"selectionDisplay"]
      switch kind
      case property (type accessibility) :
        if not [accessibility isTransient] then
          error errorLocation : "the 'selectionDisplay' property should be a transient"
        elsif [type swiftTypeName] != "EBShape" then
          error errorLocation : "the 'selectionDisplay' transient type should be 'EBShape'"
        end
      case toMany (4*) :
        error errorLocation : "the 'selectionDisplay' transient type should be 'EBShape'"
      case toOne (3*) :
        error errorLocation : "the 'selectionDisplay' transient type should be 'EBShape'"
      case arrayController (3*) :
        error errorLocation : "the 'selectionDisplay' transient type should be 'EBShape'"
      case selectionController (*) :
        error errorLocation : "the 'selectionDisplay' transient type should be 'EBShape'"
      end
    else
      error mClassName : "a graphic entity should declare the 'selectionDisplay' transient, with 'EBShape' type"
    end
    transientsDeclaredInSuperEntity += !"objectDisplay"
    if [propertyMap hasKey !"objectDisplay"] then
      [propertyMap searchKey
        !["objectDisplay" here]
        ?let @propertyKind kind
        ?*
      ]
      let errorLocation = [propertyMap locationForKey !"objectDisplay"]
      switch kind
      case property (type accessibility) :
        if not [accessibility isTransient] then
          error errorLocation : "the 'selectionDisplay' property should be a transient"
        elsif [type swiftTypeName] != "EBShape" then
          error errorLocation : "the 'selectionDisplay' transient type should be 'EBShape'"
        end
      case toMany (4*) :
        error errorLocation : "the 'selectionDisplay' transient type should be 'EBShape'"
      case toOne (3*) :
        error errorLocation : "the 'selectionDisplay' transient type should be 'EBShape'"
      case arrayController (3*) :
        error errorLocation : "the 'selectionDisplay' transient type should be 'EBShape'"
      case selectionController (*) :
        error errorLocation : "the 'selectionDisplay' transient type should be 'EBShape'"
      end
    else
      error mClassName : "a graphic entity should declare the 'objectDisplay' transient, with 'EBShape' type"
    end
  end
#--- Generation    
  ioGeneration.mEntityListForGeneration +=
    !mClassName.string
    !mObsoleteEntityNames
  ioGeneration.mFileGenerationList += !@entityForGeneration.new {
    !mClassName.string
    !mSuperEntityName.string
    !propertyGenerationList
#    !{} # simpleStoredPropertyListForGeneration
#    !{} # transientDefinitionListForGeneration
#    !{} # toOneEntityRelationshipListForGeneration
#    !{} # toManyEntityRelationshipListForGeneration
    !mSignatureList
    !mIsGraphicEntity
    !transientsDeclaredInSuperEntity
#    !{} # arrayControllerListForGeneration
#    !{} # selectionControllerForGeneration
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @entityForGeneration : @abstractFileGeneration {
  @string mEntityName
  @string mSuperEntityName
  @propertyGenerationList mPropertyGenerationList
  @stringset mSignatureSet
  @bool mIsGraphicEntity
  @stringset mTransientsDeclaredInSuperEntity
}

#·······················································································································

list @entityListForGeneratingEBManagedObjectContext {
  @string mEntityName
  @lstringlist mObsoleteEntityNames
}

#·······················································································································

override method @entityForGeneration generateCode
    ?let @string inOutputDirectory
    ?!@stringset ioGeneratedFileSet
{
  @atomicPropertyGenerationList atomicPropertyGenerationList = {}
  @transientPropertyGenerationList transientPropertyGenerationList = {}
  @toOnePropertyGenerationList toOnePropertyGenerationList = {}
  for (property) in mPropertyGenerationList do
    if let atomicProperty = property as @atomicPropertyGeneration then
      atomicPropertyGenerationList += !atomicProperty
    elsif let transientProperty = property as @transientPropertyGeneration then
      transientPropertyGenerationList += !transientProperty
    elsif let toOneProperty = property as @toOnePropertyGeneration then
      toOnePropertyGenerationList += !toOneProperty
    end
  end
  let s = [filewrapper entityGenerationTemplate.entityImplementationInSwift
    !mEntityName
    !mPropertyGenerationList
    !atomicPropertyGenerationList
    !transientPropertyGenerationList
    !toOnePropertyGenerationList
    ! {} # mToManyEntityRelationshipList
    !mSignatureSet
    !mIsGraphicEntity
    !mTransientsDeclaredInSuperEntity
#    !mArrayControllerForGeneration
#    !mSelectionControllerListForGeneration
  ]
  let fileName = "entity-" + mEntityName + ".swift"
  ioGeneratedFileSet += !fileName
  [@string generateFile
    !inOutputDirectory
    !fileName
    !s
  ]
}

#·······················································································································

proc generateEBManagedObjectContext
  ?let @entityListForGeneratingEBManagedObjectContext inEntityListForGeneration
  ?let @string inOutputDirectory
  ?!@stringset ioGeneratedFileSet
{
  if [inEntityListForGeneration length] > 0 then
    let fileName = "EBManagedObjectContext.swift"
    ioGeneratedFileSet += !fileName
    let s = [filewrapper entityGenerationTemplate.managedObjectContext
      !inEntityListForGeneration
    ]
    [@string generateFile
      !inOutputDirectory
      !fileName
      !s
    ]
  end
}

#·······················································································································

private filewrapper entityGenerationTemplate in "../generation-templates" {
}{
}{
  template entityImplementationInSwift "entity.swift.galgasTemplate"
    ?@string ENTITY_NAME
    ?@propertyGenerationList PROPERTY_LIST_FOR_GENERATION
    ?@atomicPropertyGenerationList SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION
    ?@transientPropertyGenerationList TRANSIENT_LIST_FOR_IMPLEMENTATION
    ?@toOnePropertyGenerationList TO_ONE_RELATIONSHIP_LIST
    ?@toManyEntityRelationshipListForGeneration TO_MANY_RELATIONSHIP_LIST
    ?@stringset SIGNATURE_SET
    ?@bool IS_GRAPHIC_ENTITY
    ?@stringset TRANSIENTS_DECLARED_IN_SUPER_ENTITY

  template managedObjectContext "EBManagedObjectContext.swift.galgasTemplate"
    ?@entityListForGeneratingEBManagedObjectContext ENTITY_LIST
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
