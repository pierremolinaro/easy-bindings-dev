#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST   
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @entityDeclarationEX : @astDeclaration {
  @lstring mEntityName
  @lstring mSuperEntityName
  @simpleStoredPropertyList mSimpleStoredAttributeList
  @toOneRelationshipListEX mToOneRelationshipList
  @toManyRelationshipListEX mToManyRelationshipList
  @secondaryPropertyList mSecondaryPropertyList
  @stringset mSignatureList
  @lstringlist mActionDeclarationList
  @lstringlist mObsoleteEntityNames
  @bool mIsGraphicEntity
}

#·······················································································································

class @entityDeclarationAST : @abstractDeclarationAST {
  @bool mIsUserDefined
  @lstring mSuperEntityName
  @simpleStoredPropertyList mSimpleStoredAttributeList
  @toOneRelationshipListEX mToOneRelationshipList
  @toManyRelationshipListEX mToManyRelationshipList
  @secondaryPropertyList mSecondaryPropertyList
  @stringset mSignatureList
  @lstringlist mActionDeclarationList
  @lstringlist mObsoleteEntityNames
  @bool mIsGraphicEntity
}

#·······················································································································

override method @entityDeclarationAST enterInPrecedenceGraph ?!@declarationPrecedenceGraph ioGraph {
  [!?ioGraph addNode !mClassName !self]
  if mSuperEntityName.string != "" then
    [!?ioGraph addEdge !mClassName !mSuperEntityName]
  end
}

#·······················································································································

override getter @entityDeclarationAST lkey -> @lstring {
  result = mClassName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension easyBindings_syntax {

  #·····················································································································
  
  rule <entity_declaration> ?let @bool inIsUserDefined ?!@astDeclarationStruct ioDeclarationAST {
    @bool graphicEntity
    select
      graphicEntity = false
    or
      $graphic$
      graphicEntity = true
    end
    $entity$
    @lstringlist obsoleteEntityNames = {}
    select
    or
      $($
      repeat
        $Identifier$ ?let @lstring obsoleteName
        obsoleteEntityNames += !obsoleteName
      while
        $,$
      end
      $)$
    end
    $Identifier$ ?let @lstring entityName
    @lstring superEntityName
    select
      superEntityName = ["" nowhere]
    or
      $:$
      $Identifier$ ? superEntityName
    end
    ${$
    @secondaryPropertyList secondaryPropertyList = {}
    @simpleStoredPropertyList simpleStoredAttributeList = {}
    @toOneRelationshipListEX toOneRelationshipList = {}
    @toManyRelationshipListEX toManyRelationshipList = {}
    @stringset signatureList = {}
    @lstringlist actionDeclarationList = {}
    repeat
    while
      <simple_stored_declaration> !entityName !?simpleStoredAttributeList !?signatureList !?ioDeclarationAST
    while
      <transient_declaration> !entityName !["" nowhere] !?secondaryPropertyList !?ioDeclarationAST
    while
      <toMany_relationship> !entityName !?toManyRelationshipList !?signatureList !?ioDeclarationAST
    while
      <toOne_relationship> !entityName !?toOneRelationshipList !?ioDeclarationAST
    while
      <action_declaration> !?actionDeclarationList
    while
      <controller_declaration> !entityName !["" nowhere] !?secondaryPropertyList  !?ioDeclarationAST
    end
    $}$
    ioDeclarationAST.mDeclarationList += !@entityDeclarationEX.new {
      !inIsUserDefined
      !entityName
      !superEntityName
      !simpleStoredAttributeList
      !toOneRelationshipList
      !toManyRelationshipList
      !secondaryPropertyList
      !signatureList
      !actionDeclarationList
      !obsoleteEntityNames
      !graphicEntity
    }
    ioDeclarationAST.mUnifiedDeclarationList += !@entityDeclarationAST.new {
      !entityName
      !inIsUserDefined
      !superEntityName
      !simpleStoredAttributeList
      !toOneRelationshipList
      !toManyRelationshipList
      !secondaryPropertyList
      !signatureList
      !actionDeclarationList
      !obsoleteEntityNames
      !graphicEntity
    }
  }
 
  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   CLASS AND PROPERTY SEMANTIC ANALYSIS                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @entityDeclarationAST firstAnalysisPhase
       ?!@semanticContext ioSemanticContext
       ?!@generationStruct unused ioGeneration
{
  buildActionMap (!mActionDeclarationList ?let @actionMap actionMap)
  [!?ioSemanticContext.mClassMap insertKey
    !mClassName
    !.entity {!isGraphic: mIsGraphicEntity}
    !{}
    !actionMap
    !{}
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @entityForGeneration : @abstractFileGeneration {
  @string mEntityName
  @string mSuperEntityName
  @observablePropertyMap mObservablePropertyMap
  @simpleStoredPropertyListForGenerationEX mSimpleStoredPropertyListForGeneration
  @transientDefinitionListForGenerationEX mDecoratedTransientListForGeneration
  @toOneEntityRelationshipListForGeneration mToOneEntityRelationshipList
  @toManyEntityRelationshipListForGeneration mToManyEntityRelationshipList
  @stringset mSignatureSet
  @bool mIsGraphicEntity
  @stringset mTransientsDeclaredInSuperEntity
  @arrayControllerForGenerationEX mArrayControllerForGeneration
  @selectionControllerForGeneration mSelectionControllerListForGeneration
}

#·······················································································································

list @entityListForGeneratingEBManagedObjectContext {
  @string mEntityName
  @lstringlist mObsoleteEntityNames
}

#·······················································································································

override method @entityForGeneration generateCode
    ?let @string inOutputDirectory
    ?!@stringset ioGeneratedFileSet
{
  let s = [filewrapper entityGenerationTemplate.entityImplementationInSwift
    !mEntityName
    !mObservablePropertyMap
    !mSimpleStoredPropertyListForGeneration
    !mDecoratedTransientListForGeneration
    !mToOneEntityRelationshipList
    !mToManyEntityRelationshipList
    !mSignatureSet
    !mIsGraphicEntity
    !mTransientsDeclaredInSuperEntity
    !mArrayControllerForGeneration
    !mSelectionControllerListForGeneration
  ]
  let fileName = "entity-" + mEntityName + ".swift"
  ioGeneratedFileSet += !fileName
  [@string generateFile
    !inOutputDirectory
    !fileName
    !s
  ]
}

#·······················································································································

proc generateEBManagedObjectContext
  ?let @entityListForGeneratingEBManagedObjectContext inEntityListForGeneration
  ?let @string inOutputDirectory
  ?!@stringset ioGeneratedFileSet
{
  if [inEntityListForGeneration length] > 0 then
    let fileName = "EBManagedObjectContext.swift"
    ioGeneratedFileSet += !fileName
    let s = [filewrapper entityGenerationTemplate.managedObjectContext
      !inEntityListForGeneration
    ]
    [@string generateFile
      !inOutputDirectory
      !fileName
      !s
    ]
  end
}

#·······················································································································

private filewrapper entityGenerationTemplate in "../generation-templates" {
}{
}{
  template entityImplementationInSwift "entity.swift.galgasTemplate"
    ?@string ENTITY_NAME
    ?@observablePropertyMap OBSERVABLE_PROPERTY_MAP
    ?@simpleStoredPropertyListForGenerationEX SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION
    ?@transientDefinitionListForGenerationEX TRANSIENT_LIST_FOR_IMPLEMENTATION
    ?@toOneEntityRelationshipListForGeneration TO_ONE_RELATIONSHIP_LIST
    ?@toManyEntityRelationshipListForGeneration TO_MANY_RELATIONSHIP_LIST
    ?@stringset SIGNATURE_SET
    ?@bool IS_GRAPHIC_ENTITY
    ?@stringset TRANSIENTS_DECLARED_IN_SUPER_ENTITY
    ?@arrayControllerForGenerationEX ARRAY_CONTROLLER_LIST
    ?@selectionControllerForGeneration SELECTION_CONTROLLER_LIST

  template managedObjectContext "EBManagedObjectContext.swift.galgasTemplate"
    ?@entityListForGeneratingEBManagedObjectContext ENTITY_LIST
}















#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   TYPE INVENTORY                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @entityDeclarationEX typeInventory
  ?!@unifiedTypeMap ioUnifiedTypeMap
{
  [mSimpleStoredAttributeList typeInventory !?ioUnifiedTypeMap]
  for (item) in mSecondaryPropertyList do
    [item typeInventory
      !?ioUnifiedTypeMap
    ]
  end
  @actionMap actionMap = {}
  for (act) in mActionDeclarationList do
    [!?actionMap insertKey !act]
  end
  [mToOneRelationshipList typeInventory !?ioUnifiedTypeMap]
  [mToManyRelationshipList typeInventory !?ioUnifiedTypeMap]
  [!?ioUnifiedTypeMap insertKey
    !mEntityName
    !.entityType {!entityName:mEntityName.string !graphic:mIsGraphicEntity}
    !actionMap
  ]
  if mSuperEntityName.string != "" then
    [@unifiedTypeMap-proxy makeProxy !?ioUnifiedTypeMap !mSuperEntityName ?*]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC TYPES
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @objectKind {
  case classObject
  case entityObject
  case graphicEntityObject
}

#·······················································································································

map @entityObservablePropertyMap {
  @observablePropertyMap mObservablePropertyMap
  @objectKind mObjectKind
  insert insertKey error message "the '%K' document is already declared in %L"
  search searchKey error message "there is no '%K' document"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

# Only get current entity observable properties, do not collect in super entities
override method @entityDeclarationEX buildObservablePropertyMapsFromStoredProperties
  ?let @unifiedTypeMap inUnifiedTypeMap
  ?!@semanticContextEX ioSemanticContext
{
  @observablePropertyMap observablePropertyMap = {}
#--- Analyze simple stored properties
  [mSimpleStoredAttributeList buildObservablePropertyMap
    !inUnifiedTypeMap
    !?observablePropertyMap
  ]
#--- Analyze relationships
  [mToOneRelationshipList buildObservablePropertyMap
    !inUnifiedTypeMap
    !?observablePropertyMap
  ]
  [mToManyRelationshipList buildObservablePropertyMap
    !inUnifiedTypeMap
    !?observablePropertyMap
  ]
#--- Enter in semantics context  
  [!?ioSemanticContext.mEntityObservablePropertyMap insertKey
    !mEntityName
    !observablePropertyMap
    !if mIsGraphicEntity then .graphicEntityObject else .entityObject end
  ]
}

#·······················································································································

override method @entityDeclarationEX buildInitialSecondaryPropertyListMap
  ?!@secondaryDeclarationListWorkingList ioSecondaryDeclarationListWorkingList
  ?!@uint ioSecondaryDeclarationCount
{
  ioSecondaryDeclarationCount = ioSecondaryDeclarationCount + [mSecondaryPropertyList length]
  ioSecondaryDeclarationListWorkingList += !self !mSecondaryPropertyList
}

#·······················································································································

override method @entityDeclarationEX solveSecondaryProperty
  ?!@semanticContextEX ioSemanticContext
  ?let @unifiedTypeMap unused inUnifiedTypeMap
  ?let @secondaryPropertyList inPropertiesToSolve
  !@secondaryPropertyList outUnsolvedProperties
  ?!@simpleStoredPropertyListForGenerationEX ioSimpleStoredPropertyListForGeneration
{
  outUnsolvedProperties = {}
  [ioSemanticContext.mEntityObservablePropertyMap searchKey
    !mEntityName
    ?@observablePropertyMap observablePropertyMap
    ?*
  ]
  for (property) in inPropertiesToSolve do
    [property tryToDefineSecondaryProperty
      !?ioSemanticContext
      !{} # No root entity
      !?observablePropertyMap
      !?outUnsolvedProperties
      !?ioSimpleStoredPropertyListForGeneration
    ]
  end
  [!?ioSemanticContext.mEntityObservablePropertyMap setMObservablePropertyMapForKey
    !observablePropertyMap
    !mEntityName.string
  ]
}

#·······················································································································

override method @entityDeclarationEX semanticAnalysisEX
  ?let @semanticContextEX inSemanticContext
  ?!@generationStruct ioGeneration
{
  [inSemanticContext.mEntityObservablePropertyMap searchKey
    !mEntityName
    ?let @observablePropertyMap observablePropertyMap
    ?*
  ]
#--- TO DO : GET OBSERVABLE PROPERTIES FROM SUPER ENTITY
#--- Analyze simple stored properties
  [mSimpleStoredAttributeList simpleStoredPropertySemanticAnalysis
    !inSemanticContext.mUnifiedTypeMap
    ?let @simpleStoredPropertyListForGenerationEX simpleStoredPropertyListForGeneration
  ]
#--- Analyze transients
  @transientDefinitionListForGenerationEX transientDefinitionListForGeneration = {}
  @arrayControllerForGenerationEX arrayControllerListForGeneration = {}
  @selectionControllerForGeneration selectionControllerForGeneration = {}
  for (item) in mSecondaryPropertyList do
    [item secondaryPropertySemanticAnalysisEX
      !mEntityName.string
      !"" # No root entity name
      !{} # No root entity
      !inSemanticContext
      !observablePropertyMap
      !?transientDefinitionListForGeneration
      !?arrayControllerListForGeneration
      !?selectionControllerForGeneration
      !?ioGeneration.mNeededOutletClasses
    ]
  end
  ioGeneration.mTransientListForGeneration += transientDefinitionListForGeneration
  ioGeneration.mSelectionControllerListForGeneration += selectionControllerForGeneration
  ioGeneration.mArrayControllerListForGeneration += arrayControllerListForGeneration
#--- Check required transients are implemented
  @stringset transientsDeclaredInSuperEntity = {}
  if mIsGraphicEntity then
    transientsDeclaredInSuperEntity += !"selectionDisplay"
    if [observablePropertyMap hasKey !"selectionDisplay"] then
      [observablePropertyMap searchKey
        !["selectionDisplay" here]
        ?let @propertyKind kind
        ?3*
      ]
      let errorLocation = [observablePropertyMap locationForKey !"selectionDisplay"]
      switch kind
      case property (type accessibility) :
        if not [accessibility isTransient] then
          error errorLocation : "the 'selectionDisplay' property should be a transient"
        elsif [type swiftTypeName] != "EBShape" then
          error errorLocation : "the 'selectionDisplay' transient type should be 'EBShape'"
        end
      case toMany (4*) :
        error errorLocation : "the 'selectionDisplay' transient type should be 'EBShape'"
      case toOne (3*) :
        error errorLocation : "the 'selectionDisplay' transient type should be 'EBShape'"
      case arrayController (3*) :
        error errorLocation : "the 'selectionDisplay' transient type should be 'EBShape'"
      case selectionController (*) :
        error errorLocation : "the 'selectionDisplay' transient type should be 'EBShape'"
      end
    else
      error mEntityName : "a graphic entity should declare the 'selectionDisplay' transient, with 'EBShape' type"
    end
    transientsDeclaredInSuperEntity += !"objectDisplay"
    if [observablePropertyMap hasKey !"objectDisplay"] then
      [observablePropertyMap searchKey
        !["objectDisplay" here]
        ?let @propertyKind kind
        ?3*
      ]
      let errorLocation = [observablePropertyMap locationForKey !"objectDisplay"]
      switch kind
      case property (type accessibility) :
        if not [accessibility isTransient] then
          error errorLocation : "the 'selectionDisplay' property should be a transient"
        elsif [type swiftTypeName] != "EBShape" then
          error errorLocation : "the 'selectionDisplay' transient type should be 'EBShape'"
        end
      case toMany (4*) :
        error errorLocation : "the 'selectionDisplay' transient type should be 'EBShape'"
      case toOne (3*) :
        error errorLocation : "the 'selectionDisplay' transient type should be 'EBShape'"
      case arrayController (3*) :
        error errorLocation : "the 'selectionDisplay' transient type should be 'EBShape'"
      case selectionController (*) :
        error errorLocation : "the 'selectionDisplay' transient type should be 'EBShape'"
      end
    else
      error mEntityName : "a graphic entity should declare the 'objectDisplay' transient, with 'EBShape' type"
    end
  end
#--- Analyze toOne relationships
  [mToOneRelationshipList semanticAnalysis
    !inSemanticContext
    ?let @toOneEntityRelationshipListForGeneration toOneEntityRelationshipListForGeneration
  ]
#--- Analyze toMany relationships
  [mToManyRelationshipList semanticAnalysis
    !inSemanticContext
    ?let @toManyEntityRelationshipListForGeneration toManyEntityRelationshipListForGeneration
  ]
#--- Generation    
  ioGeneration.mEntityListForGeneration +=
    !mEntityName.string
    !mObsoleteEntityNames
  ioGeneration.mFileGenerationList += !@entityForGeneration.new {
    !mEntityName.string
    !mSuperEntityName.string
    !observablePropertyMap
    !simpleStoredPropertyListForGeneration
    !transientDefinitionListForGeneration
    !toOneEntityRelationshipListForGeneration
    !toManyEntityRelationshipListForGeneration
    !mSignatureList
    !mIsGraphicEntity
    !transientsDeclaredInSuperEntity
    !arrayControllerListForGeneration
    !selectionControllerForGeneration
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
