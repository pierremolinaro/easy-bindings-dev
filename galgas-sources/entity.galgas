#-----------------------------------------------------------------------------------------------------------------------
#   AST   
#-----------------------------------------------------------------------------------------------------------------------

class @entityDeclarationAST : @abstractDeclarationAST {
  @bool mIsAbstract
  @lstring mSuperEntityName
  @simpleStoredPropertyList mSimpleStoredPropertyList
  @stringset mSignatureList
  @lstringlist mActionDeclarationList
  @lstringlist mObsoleteEntityNames
  @bool mIsGraphicEntity
  @externSwiftDelegateList mExternSwiftDelegateList
  @lstringlist mGraphicOptionArray
}

#·······················································································································

override method @entityDeclarationAST enterInPrecedenceGraph ?!@declarationPrecedenceGraph ioGraph {
  [!?ioGraph addNode !self.mClassName !self]
  if self.mSuperEntityName.string != "" then
    [!?ioGraph addEdge !self.mClassName !self.mSuperEntityName]
  end
}

#·······················································································································

override getter @entityDeclarationAST nodeKey -> @lstring {
  result = self.mClassName
}

#-----------------------------------------------------------------------------------------------------------------------
#   SYNTAX
#-----------------------------------------------------------------------------------------------------------------------

syntax extension easyBindings_syntax {

  #·····················································································································
  
  rule <entity_declaration> ?!@astDeclarationStruct ioDeclarationAST {
    @bool isAbstract
    select
      isAbstract = false
    or
      $abstract$
      isAbstract = true
    end
    @bool graphicEntity
    select
      graphicEntity = false
    or
      $graphic$
      graphicEntity = true
    end
    $entity$
    $Identifier$ ?let @lstring entityName
    @lstringlist obsoleteEntityNames = {}
    select
    or
      $($
      repeat
        $Identifier$ ?let @lstring obsoleteName
        obsoleteEntityNames += !obsoleteName
      while
        $,$
      end
      $)$
    end
    @lstring superEntityName
    select
      superEntityName = ["" nowhere]
    or
      $:$
      $Identifier$ ? superEntityName
    end
    ${$
    @simpleStoredPropertyList simpleStoredPropertyList = {}
    @stringset signatureList = {}
    @lstringlist actionDeclarationList = {}
    @externSwiftDelegateList externSwiftDelegateList = {}
    @arrayControllerBindingListAST arrayControllerBindingListAST = {}
    @lstringlist graphicOptionArray = {}
    repeat
    while
      <simple_stored_declaration> !entityName !?simpleStoredPropertyList !?signatureList !?ioDeclarationAST
    while
      <transient_declaration> !entityName !["" nowhere] !?ioDeclarationAST
    while
      <toMany_relationship> !entityName !?signatureList !?ioDeclarationAST
    while
      <toOne_relationship> !entityName !?ioDeclarationAST
    while
      <action_declaration> !?actionDeclarationList
    while
      <controller_declaration> !autoLayout: false !entityName !["" nowhere] !?arrayControllerBindingListAST !?ioDeclarationAST
    while
      <extern_swift_delegate> !?externSwiftDelegateList
    while
      $graphic$
      $identifier$ ?let graphicOption
      graphicOptionArray += !graphicOption
      $;$
      if not graphicEntity then
        error graphicOption : "only a graphic entity accepts a graphic option"
      end
    end
    $}$
    ioDeclarationAST.mUnifiedDeclarationList += !@entityDeclarationAST.new {
      !entityName
      !isAbstract
      !superEntityName
      !simpleStoredPropertyList
      !signatureList
      !actionDeclarationList
      !obsoleteEntityNames
      !graphicEntity
      !externSwiftDelegateList
      !graphicOptionArray
    }
    if isAbstract && graphicEntity then
      ioDeclarationAST.mUnifiedDeclarationList += !@transientDeclarationAST.new {
        !entityName
        !["" here]
        !["EBShape" here]
        !["selectionDisplay" here]
        !{}
        !false
      }
      ioDeclarationAST.mUnifiedDeclarationList += !@transientDeclarationAST.new {
        !entityName
        !["" here]
        !["EBShape" here]
        !["objectDisplay" here]
        !{}
        !false
      }
    end
 }
 
  #·····················································································································

}

#-----------------------------------------------------------------------------------------------------------------------
#   SEMANTIC ANALYSIS                       
#-----------------------------------------------------------------------------------------------------------------------

override method @entityDeclarationAST firstAnalysisPhase
       ?!@semanticContext ioSemanticContext
       ?!@generationStruct unused ioGeneration
{
  buildActionMap (!self.mActionDeclarationList ?let @actionMap actionMap)
  [!?ioSemanticContext.mClassMap insertKey
    !self.mClassName
    !.entity {!superEntityName: self.mSuperEntityName.string !isGraphic: self.mIsGraphicEntity !isAbstract: self.mIsAbstract}
    !{}
    !actionMap
    !{}
  ]
}

#·······················································································································

override method @entityDeclarationAST secondAnalysisPhase
    ?!@semanticContext ioSemanticContext
    ?!@generationStruct unused ioGeneration
{
  if self.mSuperEntityName.string != "" then
  #--- Search for super entity property map
    [ioSemanticContext.mClassMap searchKey
      !self.mSuperEntityName
      ?*
      ?let @propertyMap inheritedPropertyMap
      ?2*
    ]  
  #--- Search for current entity property map
    [ioSemanticContext.mClassMap searchKey
      !self.mClassName
      ?*
      ?let @propertyMap propertyMap
      ?2*
    ]
  #--- Merge properties
    var newPropertyMap = inheritedPropertyMap
#    for (lkey 3*) in inheritedPropertyMap do
#        message "  inherit '" + lkey + "'\n"
#    end
    for (lkey kind actionMap isOverriding) in propertyMap do
      if isOverriding then
        [inheritedPropertyMap searchKey !lkey ?3*]
      else
#        message "  insert '" + lkey + "'\n"
        [!?newPropertyMap insertKey !lkey !kind !actionMap !false]
      end
    end
  #--- Replace property map
    with self.mClassName in !?ioSemanticContext.mClassMap 
      error message searchKey
    do
      mPropertyMap = newPropertyMap
    end
  end
}

#·······················································································································

override method @entityDeclarationAST fourthAnalysisPhase
       ?!@semanticContext ioSemanticContext
       ?!@generationStruct ioGeneration
{
  [ioSemanticContext.mClassMap searchKey
    !self.mClassName
    ?*
    ?let @propertyMap propertyMap
    ?*
    ?let @propertyGenerationList propertyGenerationList
  ]
#--- If super entity is abstract, and current is not, check all transient properties are implemented
  @stringset overridenTransients = {}
  if (self.mSuperEntityName.string != "") & not self.mIsAbstract then
    [ioSemanticContext.mClassMap searchKey
      !self.mSuperEntityName
      ?let @classKind superClassKind
      ?let @propertyMap superPropertyMap
      ?2*
    ]
    switch superClassKind
    case prefs :
      error self.mSuperEntityName : "prefs cannot be a super entity"
    case atomic (*) :
      error self.mSuperEntityName : "an atomic class cannot be a super entity"
    case document (*) :
      error self.mSuperEntityName : "a document cannot be a super entity"
    case entity (* @bool isGraphic @bool isAbstract) :
      if isGraphic & not self.mIsGraphicEntity then
        error self.mClassName : "this entity should be declared with 'graphic', as super entity is graphic"
      end
      if isAbstract & not self.mIsAbstract then # Check all abstract properties are defined
        for superProperty in superPropertyMap do
          if [superProperty isAbstract] then
            if [propertyMap hasKey !superProperty.lkey.string] then
              overridenTransients += !superProperty.lkey.string
              [propertyMap searchKey !superProperty.lkey ?let @propertyKind propertyKind ?2*]
              let typeName = [propertyKind typeName]
              let superTypeName = [superProperty.mKind typeName]
              if typeName != superTypeName then
                error [propertyMap locationForKey !superProperty.lkey]
                  : "type '" + superTypeName + "' is required by declaration in super entity"
              end
            else
              error self.mClassName
                : "transient '" + superProperty.lkey + "' should be defined, it is declared abstract in super entity"
            end
          end
        end
      end
    end
  end
#--- Graphic options
  var cursorForKnob_option = false
  var translate_option = false
  var acceptedTranslation_option = false
  var move_option = false
  var snapToGrid_option = false
  var flipHorizontally_option = false
  var flipVertically_option = false
  var rotate_option = false
  var saveIntoAdditionalDictionary_option = false
  var canCopyAndPaste_option = false
  var operationAfterPasting_option = false
  var cannotBeDeleted_option = false
  
  for (graphicOption) in self.mGraphicOptionArray do
    if graphicOption.string == "cursorForKnob" then
      if cursorForKnob_option then
        error graphicOption : "duplicated option"
      end
      cursorForKnob_option = true
    elsif graphicOption.string == "acceptedTranslation" then
      if acceptedTranslation_option then
        error graphicOption : "duplicated option"
      end
      acceptedTranslation_option = true
    elsif graphicOption.string == "translate" then
      if translate_option then
        error graphicOption : "duplicated option"
      end
      translate_option = true
    elsif graphicOption.string == "move" then
      if move_option then
        error graphicOption : "duplicated option"
      end
      move_option = true
    elsif graphicOption.string == "snapToGrid" then
      if snapToGrid_option then
        error graphicOption : "duplicated option"
      end
      snapToGrid_option = true
    elsif graphicOption.string == "flipHorizontally" then
      if flipHorizontally_option then
        error graphicOption : "duplicated option"
      end
      flipHorizontally_option = true
    elsif graphicOption.string == "flipVertically" then
      if flipVertically_option then
        error graphicOption : "duplicated option"
      end
      flipVertically_option = true
    elsif graphicOption.string == "rotate" then
      if rotate_option then
        error graphicOption : "duplicated option"
      end
      rotate_option = true
    elsif graphicOption.string == "saveIntoAdditionalDictionary" then
      if saveIntoAdditionalDictionary_option then
        error graphicOption : "duplicated option"
      end
      saveIntoAdditionalDictionary_option = true
    elsif graphicOption.string == "canCopyAndPaste" then
      if canCopyAndPaste_option then
        error graphicOption : "duplicated option"
      end
      canCopyAndPaste_option = true
    elsif graphicOption.string == "operationAfterPasting" then
      if operationAfterPasting_option then
        error graphicOption : "duplicated option"
      end
      operationAfterPasting_option = true
    elsif graphicOption.string == "cannotBeDeleted" then
      if cannotBeDeleted_option then
        error graphicOption : "duplicated option"
      end
     cannotBeDeleted_option = true
    else
      error graphicOption : "unkown graphic option" fixit {
         replace "cursorForKnob" replace "acceptedTranslation" replace "translate" replace "move"
         replace "flipHorizontally" replace "flipVertically" replace "rotate" replace "snapToGrid"
         replace "saveIntoAdditionalDictionary" replace "canCopyAndPaste" replace "operationAfterPasting"
         replace "cannotBeDeleted"
      }
    end
  end
#--- Search for a subclass
  var hasSubClass = false
  for classDeclaration in ioSemanticContext.mClassMap while not hasSubClass do
    if [classDeclaration.mClassKind isEntity] then
      [classDeclaration.mClassKind entity ?superEntityName: let superEntityName ?2*]
      hasSubClass = self.mClassName.string == superEntityName
    end 
  end
#--- Generation    
  ioGeneration.mEntityListForGeneration +=
    !self.mClassName.string
    !self.mObsoleteEntityNames
  ioGeneration.mFileGenerationList += !@entityForGeneration.new {
    !self.mClassName.string
    !self.mSuperEntityName.string
    !propertyGenerationList
    !self.mSignatureList
    !self.mIsGraphicEntity
    !self.mIsAbstract
    !overridenTransients
    !self.mExternSwiftDelegateList
    !hasSubClass
    !cursorForKnob_option
    !acceptedTranslation_option
    !translate_option
    !move_option
    !snapToGrid_option
    !flipHorizontally_option
    !flipVertically_option
    !rotate_option
    !saveIntoAdditionalDictionary_option
    !canCopyAndPaste_option
    !operationAfterPasting_option
    !cannotBeDeleted_option
  }
}

#-----------------------------------------------------------------------------------------------------------------------
#   GENERATION
#-----------------------------------------------------------------------------------------------------------------------

class @entityForGeneration : @abstractFileGeneration {
  @string mEntityName
  @string mSuperEntityName
  @propertyGenerationList mPropertyGenerationList
  @stringset mSignatureSet
  @bool mIsGraphicEntity
  @bool mIsAbstract
  @stringset mOverridenTransients
  @externSwiftDelegateList mExternSwiftDelegateList
  @bool mHasSubEntity
  @bool mCursorForKnob_option
  @bool mAcceptedTranslation_option
  @bool mTranslate_option
  @bool mMove_option
  @bool mSnapToGrid_option
  @bool mFlipHorizontally_option
  @bool mFlipVertically_option
  @bool mRotate_option
  @bool mSaveIntoAdditionalDictionary_option
  @bool mCanCopyAndPaste_option
  @bool mOperationAfterPasting_option
  @bool mCannotBeDeleted_option
}

#·······················································································································

list @entityListForGeneratingEBManagedObjectContext {
  @string mEntityName
  @lstringlist mObsoleteEntityNames
}

#·······················································································································

override method @entityForGeneration generateCode
    ?let @string inOutputDirectory
    ?!@stringset ioGeneratedFileSet
{
  @atomicPropertyGenerationList atomicPropertyGenerationList = {}
  @transientPropertyGenerationList transientPropertyGenerationList = {}
  @computedPropertyGenerationList computedPropertyGenerationList = {}
  @toOnePropertyGenerationList toOnePropertyGenerationList = {}
  @toManyPropertyGenerationList toManyPropertyGenerationList = {}
  @atomicProxyGenerationList proxyGenerationList = {}
  @toManyProxyGenerationList toManyProxyGenerationList = {}
  for (property) in self.mPropertyGenerationList do
    if let atomicProperty = property as @atomicPropertyGeneration then
      atomicPropertyGenerationList += !atomicProperty
    elsif let transientProperty = property as @transientPropertyGeneration then
      transientPropertyGenerationList += !transientProperty
    elsif let computedProperty = property as @computedPropertyGeneration then
      computedPropertyGenerationList += !computedProperty
    elsif let toManyProxy = property as @toManyProxyGeneration then
      toManyProxyGenerationList += !toManyProxy
    elsif let proxyProperty = property as @atomicProxyGeneration then
      proxyGenerationList += !proxyProperty
    elsif let toOneProperty = property as @toOnePropertyGeneration then
      toOnePropertyGenerationList += !toOneProperty
    elsif let toOneProperty = property as @toManyPropertyGeneration then
      toManyPropertyGenerationList += !toOneProperty
    end
  end
  var superEntityName = ""
  if self.mSuperEntityName != "" then
    superEntityName = self.mSuperEntityName
  elsif self.mIsGraphicEntity then
    superEntityName = "EBGraphicManagedObject"
  else
    superEntityName = "EBManagedObject"
  end
  var s = [filewrapper entityGenerationTemplate.entityImplementationInSwift
    !self.mEntityName
    !superEntityName
    !self.mPropertyGenerationList
    !proxyGenerationList
    !toManyProxyGenerationList
    !atomicPropertyGenerationList
    !transientPropertyGenerationList
    !computedPropertyGenerationList
    !toOnePropertyGenerationList
    !toManyPropertyGenerationList
    !self.mSignatureSet
    !self.mIsGraphicEntity
    !self.mIsAbstract
    !self.mOverridenTransients
    !self.mExternSwiftDelegateList
    !self.mHasSubEntity
    !self.mCursorForKnob_option
    !self.mAcceptedTranslation_option
    !self.mTranslate_option
    !self.mMove_option
    !self.mSnapToGrid_option
    !self.mFlipHorizontally_option
    !self.mFlipVertically_option
    !self.mRotate_option
    !self.mSaveIntoAdditionalDictionary_option
    !self.mCanCopyAndPaste_option
    !self.mOperationAfterPasting_option
    !self.mCannotBeDeleted_option
  ]
  var fileName = "entity-" + self.mEntityName + ".swift"
  ioGeneratedFileSet += !fileName
  [@string generateFile
    !inOutputDirectory
    !fileName
    !s
  ]
  s = [filewrapper entityGenerationTemplate.entityToOneImplementationInSwift
    !self.mEntityName
    !superEntityName
    !self.mPropertyGenerationList
    !proxyGenerationList
    !toManyProxyGenerationList
    !atomicPropertyGenerationList
    !transientPropertyGenerationList
    !computedPropertyGenerationList
    !toOnePropertyGenerationList
    !toManyPropertyGenerationList
    !self.mSignatureSet
    !self.mIsGraphicEntity
    !self.mIsAbstract
    !self.mOverridenTransients
    !self.mExternSwiftDelegateList

  ]
  fileName = "toone-" + self.mEntityName + ".swift"
  ioGeneratedFileSet += !fileName
  [@string generateFile
    !inOutputDirectory
    !fileName
    !s
  ]
  s = [filewrapper entityGenerationTemplate.entityToManyImplementationInSwift
    !self.mEntityName
    !superEntityName
    !self.mPropertyGenerationList
    !proxyGenerationList
    !toManyProxyGenerationList
    !atomicPropertyGenerationList
    !transientPropertyGenerationList
    !computedPropertyGenerationList
    !toOnePropertyGenerationList
    !toManyPropertyGenerationList
    !self.mSignatureSet
    !self.mIsGraphicEntity
    !self.mIsAbstract
    !self.mOverridenTransients
    !self.mExternSwiftDelegateList

  ]
  fileName = "tomany-" + self.mEntityName + ".swift"
  ioGeneratedFileSet += !fileName
  [@string generateFile
    !inOutputDirectory
    !fileName
    !s
  ]
}

#·······················································································································

proc generateEBManagedObjectContext
  ?let @entityListForGeneratingEBManagedObjectContext inEntityListForGeneration
  ?let @string inOutputDirectory
  ?!@stringset ioGeneratedFileSet
{
  if [inEntityListForGeneration length] > 0 then
    let fileName = "EBManagedObjectFactory.swift"
    ioGeneratedFileSet += !fileName
    let s = [filewrapper entityGenerationTemplate.managedObjectFactory
      !inEntityListForGeneration
    ]
    [@string generateFile
      !inOutputDirectory
      !fileName
      !s
    ]
  end
}

#·······················································································································

private filewrapper entityGenerationTemplate in "../generation-templates" {
}{
}{
  template entityImplementationInSwift "entity.swift.galgasTemplate"
    ?@string ENTITY_NAME
    ?@string SUPER_CLASS_NAME
    ?@propertyGenerationList PROPERTY_LIST_FOR_GENERATION
    ?@atomicProxyGenerationList PROXY_LIST_FOR_GENERATION
    ?@toManyProxyGenerationList TO_MANY_PROXY_LIST_FOR_GENERATION
    ?@atomicPropertyGenerationList SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION
    ?@transientPropertyGenerationList TRANSIENT_LIST_FOR_IMPLEMENTATION
    ?@computedPropertyGenerationList COMPUTED_PROPERTY_LIST_FOR_IMPLEMENTATION
    ?@toOnePropertyGenerationList TO_ONE_RELATIONSHIP_LIST
    ?@toManyPropertyGenerationList TO_MANY_RELATIONSHIP_LIST
    ?@stringset SIGNATURE_SET
    ?@bool IS_GRAPHIC_ENTITY
    ?@bool IS_ABSTRACT
    ?@stringset OVERRIDEN_TRANSIENTS
    ?@externSwiftDelegateList EXTERN_DELEGATE_LIST_FOR_IMPLEMENTATION
    ?@bool HAS_SUB_ENTITY
    ?@bool OPTION_CursorForKnob
    ?@bool OPTION_AcceptedTranslation
    ?@bool OPTION_Translate
    ?@bool OPTION_Move
    ?@bool OPTION_SnapToGrid
    ?@bool OPTION_FlipHorizontally
    ?@bool OPTION_FlipVertically
    ?@bool OPTION_Rotate
    ?@bool OPTION_SaveIntoAdditionalDictionary
    ?@bool OPTION_CanCopyAndPaste
    ?@bool OPTION_OperationAfterPasting
    ?@bool OPTION_CannotBeDeleted

  template entityToManyImplementationInSwift "entity-tomany.swift.galgasTemplate"
    ?@string ENTITY_NAME
    ?@string SUPER_CLASS_NAME
    ?@propertyGenerationList PROPERTY_LIST_FOR_GENERATION
    ?@atomicProxyGenerationList PROXY_LIST_FOR_GENERATION
    ?@toManyProxyGenerationList TO_MANY_PROXY_LIST_FOR_GENERATION
    ?@atomicPropertyGenerationList SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION
    ?@transientPropertyGenerationList TRANSIENT_LIST_FOR_IMPLEMENTATION
    ?@computedPropertyGenerationList COMPUTED_PROPERTY_LIST_FOR_IMPLEMENTATION
    ?@toOnePropertyGenerationList TO_ONE_RELATIONSHIP_LIST
    ?@toManyPropertyGenerationList TO_MANY_RELATIONSHIP_LIST
    ?@stringset SIGNATURE_SET
    ?@bool IS_GRAPHIC_ENTITY
    ?@bool IS_ABSTRACT
    ?@stringset OVERRIDEN_TRANSIENTS
    ?@externSwiftDelegateList EXTERN_DELEGATE_LIST_FOR_IMPLEMENTATION

  template entityToOneImplementationInSwift "entity-toone.swift.galgasTemplate"
    ?@string ENTITY_NAME
    ?@string SUPER_CLASS_NAME
    ?@propertyGenerationList PROPERTY_LIST_FOR_GENERATION
    ?@atomicProxyGenerationList PROXY_LIST_FOR_GENERATION
    ?@toManyProxyGenerationList TO_MANY_PROXY_LIST_FOR_GENERATION
    ?@atomicPropertyGenerationList SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION
    ?@transientPropertyGenerationList TRANSIENT_LIST_FOR_IMPLEMENTATION
    ?@computedPropertyGenerationList COMPUTED_PROPERTY_LIST_FOR_IMPLEMENTATION
    ?@toOnePropertyGenerationList TO_ONE_RELATIONSHIP_LIST
    ?@toManyPropertyGenerationList TO_MANY_RELATIONSHIP_LIST
    ?@stringset SIGNATURE_SET
    ?@bool IS_GRAPHIC_ENTITY
    ?@bool IS_ABSTRACT
    ?@stringset OVERRIDEN_TRANSIENTS
    ?@externSwiftDelegateList EXTERN_DELEGATE_LIST_FOR_IMPLEMENTATION

  template managedObjectFactory "EBManagedObjectFactory.swift.galgasTemplate"
    ?@entityListForGeneratingEBManagedObjectContext ENTITY_LIST
}

#-----------------------------------------------------------------------------------------------------------------------
