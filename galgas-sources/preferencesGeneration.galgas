

#----------------------------------------------------------------------------*

list @preferenceListForGeneration {
  @string mPreferenceName
  @attributeListForGeneration mAttributeListForGeneration
  @transientDefinitionListForGeneration mDecoratedTransientListForGeneration
  @decoratedOutletMap mOutletMap
  @regularBindingsGenerationList mRegularBindingsGenerationList
  @multipleBindingGenerationList multipleBindingGenerationList
}

#----------------------------------------------------------------------------*

map @controllerMap {
 @string mControllerClassName
}

#----------------------------------------------------------------------------*

map @preferencesPropertyArrayMap {
 @string mControllerClassName
}

#----------------------------------------------------------------------------*

getter @unifiedTypeMap-proxy preferencesSwiftGetter
  -> @string outResult {
  switch [self mTypeKind]
  case boolType : outResult = "(value as! NSNumber).boolValue"
  case uintegerType : outResult = "à compléter preferencesSwiftGetter"
  case integerType : outResult = "(value as! NSNumber).integerValue"
  case doubleType : outResult = "à compléter preferencesSwiftGetter"
  case stringType : outResult = "value as! String"
  case colorType : outResult = "NSUnarchiver.unarchiveObjectWithData (value as! NSData) as! NSColor"
  case dataType : outResult = "à compléter preferencesSwiftGetter"
  case dateType : outResult = "value as! NSDate"
  case imageType : outResult = "à compléter preferencesSwiftGetter"
  case fontType : outResult = "à compléter preferencesSwiftGetter"
  case menuType : outResult = "à compléter preferencesSwiftGetter"
  case bezierPathType : outResult = "à compléter preferencesSwiftGetter"
  case structType, enumType : outResult = "à compléter preferencesSwiftGetter"
  case classType, controllerClassType, documentType, entityType,
  preferencesType, nibClassType, outletClassType, protocolType :
    outResult = "<invalid type '" + [self key] + "' >"
  end
}

#----------------------------------------------------------------------------*

getter @unifiedTypeMap-proxy preferencesSwiftSetter
  ?let @string inPropertyName
  -> @string outResult {
  switch [self mTypeKind]
  case boolType : outResult = "NSNumber (bool:" + inPropertyName + ".prop)"
  case uintegerType : outResult = "à compléter preferencesSwiftSetter"
  case integerType : outResult = "NSNumber (integer:" + inPropertyName + ".prop)"
  case doubleType : outResult = "à compléter preferencesSwiftSetter"
  case colorType : outResult = "NSArchiver.archivedDataWithRootObject (" + inPropertyName + ".prop)"
  case dataType : outResult = "à compléter preferencesSwiftSetter"
  case dateType, stringType : outResult = inPropertyName + ".prop"
  case imageType : outResult = "à compléter preferencesSwiftSetter"
  case fontType : outResult = "à compléter preferencesSwiftSetter"
  case menuType : outResult = "à compléter preferencesSwiftSetter"
  case bezierPathType : outResult = "à compléter preferencesSwiftSetter"
  case structType, enumType : outResult = "à compléter preferencesSwiftSetter"
  case classType, controllerClassType, documentType, entityType,
  preferencesType, nibClassType, outletClassType, protocolType :
    outResult = "<invalid type '" + [self key] + "' >"
  end
}

#----------------------------------------------------------------------------*

private filewrapper prefsGenerationTemplate in "../generation-templates" {
}{
}{
  template preferencesInSwift "preferences.swift.galgasTemplate"
    ?@string PREFERENCES_NAME
    ?@attributeListForGeneration ATTRIBUTE_LIST_FOR_GENERATION
    ?@transientDefinitionListForGeneration TRANSIENT_LIST_FOR_IMPLEMENTATION
    ?@decoratedOutletMap OUTLET_MAP
    ?@preferencesPropertyArrayMap ARRAY_MAP
    ?@controllerMap CONTROLLER_MAP
    ?@regularBindingsGenerationList REGULAR_BINDINGS_GENERATION_LIST 
}

#----------------------------------------------------------------------------*

proc generatePreferences
  ?let @preferenceListForGeneration inPreferenceListForGeneration
  ?let @string inOutputDirectory
{
  for () in inPreferenceListForGeneration do
    let s = [filewrapper prefsGenerationTemplate.preferencesInSwift
      !mPreferenceName
      !mAttributeListForGeneration
      !mDecoratedTransientListForGeneration
      !mOutletMap
      !{}
      !{}
      !mRegularBindingsGenerationList
    ]
    [@string generateFile
      !inOutputDirectory
      !mPreferenceName + ".swift"
      !s
    ]
  end
}

#----------------------------------------------------------------------------*


