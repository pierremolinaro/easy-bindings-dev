#-----------------------------------------------------------------------------------------------------------------------
#   AST
#-----------------------------------------------------------------------------------------------------------------------

abstract refclass @abstractDeclarationAST {
  @lstring mClassName
}

#·······················································································································

abstract method @abstractDeclarationAST enterInPrecedenceGraph ?!@declarationPrecedenceGraph ioGraph

#·······················································································································

abstract getter @abstractDeclarationAST nodeKey -> @lstring

#·······················································································································

abstract method @abstractDeclarationAST firstAnalysisPhase
    ?!@semanticContext ioSemanticContext
    ?!@generationStruct ioGeneration

#·······················································································································

method @abstractDeclarationAST secondAnalysisPhase
    ?!@semanticContext unused ioSemanticContext
    ?!@generationStruct unused ioGeneration
{
}

#·······················································································································

method @abstractDeclarationAST thirdAnalysisPhase
    ?!@semanticContext unused ioSemanticContext
    ?!@generationStruct unused ioGeneration
{
}

#·······················································································································

method @abstractDeclarationAST fourthAnalysisPhase
    ?!@semanticContext unused ioSemanticContext
    ?!@generationStruct unused ioGeneration
{
}

#·······················································································································

list @declarationListAST {
  @abstractDeclarationAST mPropertyDeclaration
}

#·······················································································································

graph @declarationPrecedenceGraph (@declarationListAST) {
  insert addNode error message "the '%K' symbol is already declared at %L"
}

#-----------------------------------------------------------------------------------------------------------------------

proc sortProperties
      ?let @string inSourceFile
      ?let @declarationListAST inDeclarationListAST
      !@declarationListAST outSortedDeclarationListAST
{
#------------------------ Enter declarations in graph
  @declarationPrecedenceGraph declarationPrecedenceGraph = .emptyGraph
  for (declaration) in inDeclarationListAST do
    [declaration enterInPrecedenceGraph !?declarationPrecedenceGraph]
  end
#------------------------ dot files
  if [option easyBindings_options.outputDeclarationDependencyGraph value] then
    let s = [declarationPrecedenceGraph graphviz]
    let path = inSourceFile + ".declarationDependancy.dot"
    [s writeToFileWhenDifferentContents !path ?*]
  end
#------------------------  Get ordered declaration list
  outSortedDeclarationListAST = {}
  if [declarationPrecedenceGraph undefinedNodeCount] > 0 then
    for () in  [declarationPrecedenceGraph undefinedNodeReferenceList] do
      error mValue : "the property " + mValue.string + " is not defined"
    end
  else
    [declarationPrecedenceGraph topologicalSort
      ?outSortedDeclarationListAST
      ?*
      ?let unsortedSemanticDeclarationListAST
      ?*
    ]
    if [unsortedSemanticDeclarationListAST length] > 0 then
      var s = "semantic analysis not performed, "
            + [unsortedSemanticDeclarationListAST length]
            + " declarations are involved in circular definition:"
      for (declaration) in  unsortedSemanticDeclarationListAST do
        s += "\n-  " + [declaration nodeKey]
      end
      error .nowhere : s
      for (declaration) in  unsortedSemanticDeclarationListAST do
        error [declaration nodeKey] : "the " + [declaration nodeKey] + " property is declared here"
      end
    end
  end
}

#-----------------------------------------------------------------------------------------------------------------------
