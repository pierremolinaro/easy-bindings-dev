#-----------------------------------------------------------------------------------------------------------------------
#   AST   
#-----------------------------------------------------------------------------------------------------------------------

list @simpleStoredPropertyList {
  @lstring mPropertyTypeName
  @lstring mPropertyName
  @abstractDefaultValue mDefaultValue
  @bool mNeedsValidation
}

#·······················································································································

class @atomicPropertyDeclarationAST : @abstractDeclarationAST {
  @lstring mPropertyTypeName
  @lstring mPropertyName
  @abstractDefaultValue mDefaultValue
  @bool mNeedsValidation
}

#·······················································································································

override method @atomicPropertyDeclarationAST enterInPrecedenceGraph ?!@declarationPrecedenceGraph ioGraph {
  let node = @lstring.new {!mClassName.string + " " + mPropertyName !mPropertyName.location}
  [!?ioGraph addNode !node !self]
  [!?ioGraph addEdge !node !mClassName]
  [!?ioGraph addEdge !node !mPropertyTypeName]
  [mDefaultValue enterDefaultValuePrecedence !node !?ioGraph]
}

#·······················································································································

override getter @atomicPropertyDeclarationAST nodeKey -> @lstring {
  result = @lstring.new {!mClassName.string + " " + mPropertyName !mPropertyName.location}
}

#-----------------------------------------------------------------------------------------------------------------------
#   SYNTAX
#-----------------------------------------------------------------------------------------------------------------------

syntax extension easyBindings_syntax {

  #·····················································································································
  
  rule <simple_stored_declaration>
    ?let @lstring inClassName
    ?!@simpleStoredPropertyList ioAttributeList
    ?!@stringset ioSignatureList
    ?!@astDeclarationStruct ioDeclarationAST
  {
    $property$
    @bool usedForSignature = false
    @bool needsValidation = false
    repeat
    while
      $@attribute$ ?let attributeName
      if attributeName.string == "signature" then
        if needsValidation then
          error attributeName : "duplicated attribute" fixit { remove }
        end
        usedForSignature = true
      elsif attributeName.string == "validation" then
        if needsValidation then
          error attributeName : "duplicated attribute" fixit { remove }
        end
        needsValidation = true
      else
        error attributeName : "unknow attribute" fixit { replace "@signature" replace "@validation" }
      end
    end
    $Identifier$ ?var @lstring attributeTypeName
    $identifier$ ?var @lstring attributeName
    if usedForSignature then
      ioSignatureList += !attributeName.string
    end
    $default$
    <explicit_value> ?var @abstractDefaultValue defaultValue
    $;$
    ioDeclarationAST.mUnifiedDeclarationList += !@atomicPropertyDeclarationAST.new{
      !inClassName
      !attributeTypeName
      !attributeName
      !defaultValue
      !needsValidation

    }
    ioAttributeList +=
      !attributeTypeName
      !attributeName
      !defaultValue
      !needsValidation
  }

  #·····················································································································

}

#-----------------------------------------------------------------------------------------------------------------------
#   CLASS AND PROPERTY SEMANTIC ANALYSIS                       
#-----------------------------------------------------------------------------------------------------------------------

override method @atomicPropertyDeclarationAST firstAnalysisPhase
       ?!@semanticContext ioSemanticContext
       ?!@generationStruct ioGeneration
{
  with mClassName in !?ioSemanticContext.mClassMap 
    error message searchKey
  do
    [ioSemanticContext.mClassMap searchKey !mPropertyTypeName ?let classKind ?3*]
    [ioSemanticContext.mClassMap searchKey
      !.new {!preferencesName () !.nowhere}
      ?*
      ?let preferencesPropertyMap
      ?2*
    ]
    switch classKind
    case prefs :
      error mPropertyTypeName : "an atomic class is required here"
    case atomic (kind) :
      [!?mPropertyMap insertKey !mPropertyName !.property {!type: kind !accessibility: .stored} !{} !false]
    #--- Analyze default value
      [mDefaultValue analyzeDefaultValueType !{!kind} !preferencesPropertyMap ?let @string swiftDefaultValueAsString]
    #--- Code Generation
      mPropertyGenerationList += !@atomicPropertyGeneration.new {
        !mPropertyName.string
        !mNeedsValidation
        !kind
        !false
        !swiftDefaultValueAsString
        !mClassName.string == preferencesName ()
      }
    #--- Needs validation ?
      if mNeedsValidation then
        ioGeneration.mValidationStubRoutineListForGeneration +=
          !mClassName
          !mPropertyName.string
          ![kind swiftTypeName]
      end
    case document (*) :
      error mPropertyTypeName : "an atomic class is required here"
    case entity (3*) :
      error mPropertyTypeName : "an atomic class is required here"
    end
  end
}

#-----------------------------------------------------------------------------------------------------------------------
#   CODE GENERATION                       
#-----------------------------------------------------------------------------------------------------------------------

class @atomicPropertyGeneration : @propertyGeneration {
  @bool mNeedsValidation
  @typeKind mType
  @bool mIsProxy
  @string mDefaultValueInSwift
  @bool mInPreferences
}

#·······················································································································

list @atomicPropertyGenerationList {
  @atomicPropertyGeneration mProperty
}

#·······················································································································

override getter @atomicPropertyGeneration prefKeyDefinitionCode -> @string {
  result = "let Preferences_" + mPropertyName + " = \"Preferences:" + mPropertyName + "\"\n"
}

#·······················································································································

override getter @atomicPropertyGeneration declarationInSelectionControllerCode -> @string {
  result  = "  //" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n"
  result += "  //   Selection observable property: " + mPropertyName + "\n"
  result += "  //" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n\n"
  result += "  let " + mPropertyName + "_property = EBPropertyProxy_" + [mType swiftTypeName] + " ()\n\n"
  result += "  var " + mPropertyName + "_property_selection : EBSelection <" + [mType swiftTypeName] + "> {\n"
  result += "    return self." + mPropertyName + "_property.prop\n"
  result += "  }\n\n"
}

#·······················································································································

override getter @atomicPropertyGeneration bindPropertyInSelectionController -> @string {
  result  = "  //" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n\n"
  result += "  private final func bind_property_" + mPropertyName + " () {\n"
  result += "    self.selectedArray_property.addEBObserverOf_" + mPropertyName + " (self." + mPropertyName + "_property)\n"
  result += "    self." + mPropertyName + "_property.mReadModelFunction = { [weak self] in\n"
  result += "      if let model = self?.selectedArray_property {\n"
  result += "        switch model.prop {\n"
  result += "        case .empty :\n"
  result += "          return .empty\n"
  result += "        case .multiple :\n"
  result += "          return .multiple\n"
  result += "        case .single (let v) :\n"
  result += "          var s = Set <" + [mType swiftTypeName] + "> ()\n"
  result += "          var isMultipleSelection = false\n"
  result += "          for object in v {\n"
  result += "            switch object." + mPropertyName + "_property_selection {\n"
  result += "            case .empty :\n"
  result += "              return .empty\n"
  result += "            case .multiple :\n"
  result += "              isMultipleSelection = true\n"
  result += "            case .single (let vProp) :\n"
  result += "              s.insert (vProp)\n"
  result += "            }\n"
  result += "          }\n"
  result += "          if isMultipleSelection {\n"
  result += "            return .multiple\n"
  result += "          }else if s.count == 0 {\n"
  result += "            return .empty\n"
  result += "          }else if s.count == 1 {\n"
  result += "            return .single (s.first!)\n"
  result += "          }else{\n"
  result += "            return .multiple\n"
  result += "          }\n"
  result += "        }\n"
  result += "      }else{\n"
  result += "        return .empty\n"
  result += "      }\n"
  result += "    }\n"

  result += "    self." + mPropertyName + "_property.mWriteModelFunction = { [weak self] (inValue : " + [mType swiftTypeName] + ") in\n"
  result += "      if let model = self?.selectedArray_property {\n"
  result += "        switch model.prop {\n"
  result += "        case .empty, .multiple :\n"
  result += "          break\n"
  result += "        case .single (let v) :\n"
  result += "          for object in v {\n"
  result += "            object." + mPropertyName + "_property.setProp (inValue)\n"
  result += "          }\n"
  result += "        }\n"
  result += "      }\n"
  result += "    }\n"
  result += "    self." + mPropertyName + "_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : " + [mType swiftTypeName] + ", windowForSheet : NSWindow?) in\n"
  result += "      if let model = self?.selectedArray_property {\n"
  result += "        switch model.prop {\n"
  result += "        case .empty, .multiple :\n"
  result += "          return false\n"
  result += "        case .single (let v) :\n"
  result += "          for object in v {\n"
  result += "            let result = object." + mPropertyName + "_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)\n"
  result += "            if !result {\n"
  result += "              return false\n"
  result += "            }\n"
  result += "          }\n"
  result += "          return true\n"
  result += "        }\n"
  result += "      }else{\n"
  result += "        return false\n"
  result += "      }\n"
  result += "    }\n"
  result += "  }\n"
}

#·······················································································································

override getter @atomicPropertyGeneration propertyDeclarationCode ?let @stringset unused inOverriddenTransients -> @string {
  result  = "  //" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n"
  result += "  //   Atomic property: " + mPropertyName + "\n"
  result += "  //" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n\n"
  if mInPreferences then
    result += "  let " + mPropertyName + "_property = EBPreferencesProperty_" + [mType swiftTypeName]
           + " (defaultValue: " + mDefaultValueInSwift + ", prefKey: Preferences_" + mPropertyName  + ")\n\n"
  else
   result += "  let " + mPropertyName + "_property = EBStoredProperty_" + [mType swiftTypeName]
           + " (defaultValue: " + mDefaultValueInSwift + ")\n\n"
   result += "  //" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n\n"
   result += "  final func reset_" + mPropertyName + "_toDefaultValue () {\n"
           + "    self." + mPropertyName + " = " + mDefaultValueInSwift + "\n"
           + "  }\n\n"
  end
  result += "  //" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n\n"
  result += "  final var " + mPropertyName + " : " + [mType swiftTypeName] + " {\n"
  result += "    get { return self." + mPropertyName + "_property.propval }\n"
  result += "    set { self." + mPropertyName + "_property.setProp (newValue) }\n"
  result += "  }\n\n"
  result += "  //" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n\n"
  result += "  final var " + mPropertyName + "_property_selection : EBSelection <" + [mType swiftTypeName]
  result += "> { return self." + mPropertyName + "_property.prop }\n\n"
  if mNeedsValidation then
    result += "  //" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n\n"
    result += "  final func " + mPropertyName + "_validateAndSetProp (_ inCandidateValue : " + [mType swiftTypeName] + ", windowForSheet inWindow : NSWindow?) -> Bool {\n"
    result += "    return self." + mPropertyName + "_property.validateAndSetProp (inCandidateValue, windowForSheet: inWindow)\n"
    result += "  }\n\n"
  end
}

#·······················································································································

override getter @atomicPropertyGeneration configurationCode -> @string {
  result  = "  //--- Atomic property: " + mPropertyName + "\n"
  result += "    self." + mPropertyName + "_property.ebUndoManager = self.ebUndoManager\n"
  if mNeedsValidation then
    result += "    self." + mPropertyName + "_property.validationFunction = { [weak self] in\n"
              "      return self?.validate_" + mPropertyName + " (currentValue: $0, proposedValue: $1) ?? .rejectWithBeep\n"
              "    }\n"
  end
}

#·······················································································································

override getter @atomicPropertyGeneration setupAtomicPropertyFromDictionaryCode -> @string {
  result  = "  //--- Atomic property: " + mPropertyName + "\n"
  result += "    self." + mPropertyName + "_property.readFrom (dictionary: inDictionary, forKey: \"" + mPropertyName + "\")\n"
}

#·······················································································································

override getter @atomicPropertyGeneration saveIntoDictionaryCode -> @string {
  result  = "  //--- Atomic property: " + mPropertyName + "\n"
  result += "    self." + mPropertyName + "_property.storeIn (dictionary: ioDictionary, forKey: \"" + mPropertyName + "\")\n"
}

#·······················································································································

override getter @atomicPropertyGeneration clearObjectExplorerCode -> @string {
  result  = "  //--- Atomic property: " + mPropertyName + "\n"
  result += "    self." + mPropertyName + "_property.mObserverExplorer = nil\n"
  result += "    self." + mPropertyName + "_property.mValueExplorer = nil\n"
}

#-----------------------------------------------------------------------------------------------------------------------
