#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   AST                                                                                                                *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

class @transientAST : @abstractSecondaryProperty {
  @lstring mTransientTypeName
  @lstring mTransientName
  @observablePropertyList mDependencyList
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   SYNTAX                                                                                                             *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

syntax extension easyBindings_syntax {

  #....................................................................................................................*
  
  rule <transient_declaration>
    ?!@secondaryPropertyList ioSecondaryPropertyList
  {
    $transient$
    $Identifier$ ?var @lstring transientTypeName
    $identifier$ ?let @lstring transientName
    $dependsFrom$
    @observablePropertyList dependanceList = {}
    repeat
      <observable_property> ?let @observablePropertyAST observablePropertyAST
      dependanceList += !observablePropertyAST
    while
      $,$
    end
    $;$
    ioSecondaryPropertyList += !@transientAST.new {
      !transientTypeName
      !transientName
      !dependanceList
    }
  }

  #....................................................................................................................*

}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   TYPE INVENTORY                                                                                                     *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

override method @transientAST typeInventory
  ?!@unifiedTypeMap ioUnifiedTypeMap
{
  [@unifiedTypeMap-proxy makeProxy
    !?ioUnifiedTypeMap
    !mTransientTypeName
    ?*
  ]
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   SEMANTIC ANALYSIS                                                                                                  *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

override method @transientAST tryToSolveSecondaryProperty
  ?!@semanticContext ioSemanticContext
  ?let @observablePropertyMap inRootObservableProperties
  ?!@observablePropertyMap ioObservableProperties
  ?!@secondaryPropertyList ioUnsolvedProperties
{
  @bool solved = true
  for () in mDependencyList while solved do
    solved = [mObservableProperty isPropertyDefined
      !ioSemanticContext
      !inRootObservableProperties
      !ioObservableProperties
    ]
  end
  if solved then
    [ioSemanticContext.mUnifiedTypeMap searchKey !mTransientTypeName ?let type]
    [!?ioObservableProperties insertKey
      !mTransientName
      !type
      !.transient
      !.single
      !""
      !{} # No action map
    ]
  else
    ioUnsolvedProperties += !self
  end
}

#......................................................................................................................*

override method @transientAST secondaryPropertySemanticAnalysis
  ?let @string inOwnerName
  ?let @string unused inRootEntityName
  ?let @observablePropertyMap inRootObservableProperties
  ?let @semanticContext inSemanticContext
  ?let @observablePropertyMap inObservableProperties
  ?!@transientDefinitionListForGeneration ioTransientDefinitionListForGeneration
  ?!@arrayControllerForGeneration unused ioArrayControllerForGeneration
  ?!@selectionControllerForGeneration unused ioSelectionControllerForGeneration
{
#--- Property type
  [inSemanticContext.mUnifiedTypeMap searchKey !mTransientTypeName ?let type]
#--- Check type
  @typeKindList typeList
  switch type
  case boolType, integerType, stringType, colorType, dateType, doubleType : # Ok
    typeList = {!type}
  case enumType (* *) : # Ok
    typeList = {!type}
  case entityType (*) :
    error mTransientName: "an entity cannot be used as simple property type" : typeList
  end
#--- Analyse master properties
  @transientDependencyListForGeneration dependencies = {}
  for () in mDependencyList do
    [mObservableProperty analyzeObservableProperty
      !inRootObservableProperties
      !inSemanticContext
      !inObservableProperties
      ?let @typeKind unused dependencyType
      ?let @propertyKind unused dependencyKind
      ?@propertyMultiplicity outMultiplicity
      ?let @string swiftTypeStringForTransientFunctionArgument
    ]
    if outMultiplicity != .single then
      error [mObservableProperty location] : "a collection cannot be observed"
    end
    dependencies +=
      !mObservableProperty
      ![[mObservableProperty modelString] nameRepresentation]
      !swiftTypeStringForTransientFunctionArgument
  end
#--- Code generation
  ioTransientDefinitionListForGeneration +=
    !inOwnerName
    !mTransientName.string
    !type
    !dependencies
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   GENERATION TYPE                                                                                                    *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

list @transientDefinitionListForGeneration {
  @string mOwnerName
  @string mTransientName
  @typeKind mTransientType
  @transientDependencyListForGeneration mDependencyList
}

#......................................................................................................................*

list @transientDependencyListForGeneration {
  @observablePropertyAST mDependency
  @string mFunctionArgumentName
  @string mFunctionArgumentTypeString
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   GENERATION                                                                                                         *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

getter @observablePropertyAST generateAddObserverCall -> @string outResult {
  switch self
  case controllerProperty (@lstring controllerName @lstring propertyName) : 
    outResult = controllerName.string + "." + propertyName + ".addObserver"
  case controllerSecondaryProperty (@lstring controllerName @lstring propertyName @lstring secondaryPropertyName) : 
    outResult = controllerName.string + "." + propertyName + "." + secondaryPropertyName + ".addObserver"
  case selfProperty (@lstring masterName *) :
    outResult = masterName.string + ".addObserver"
  case prefsProperty (@lstring prefsName @lstring propertyName *) :
    outResult = "g_" + prefsName + "?."  + propertyName + ".addObserver"
  case rootProperty (@lstring masterName) :
    outResult = "rootObject." + masterName + ".addObserver"
  case rootPropertyWithOption (@lstring masterName @lstring optionName) :
    outResult = "rootObject." + masterName + "." + optionName + ".addObserver"
  case rootPropertyRelationship (@lstring relationshipName @lstring propertyName) :
    outResult = "self.rootObject." + relationshipName + ".addObserverOf_" + propertyName
  end
}

#......................................................................................................................*

getter @observablePropertyAST generateRemoveObserverCall -> @string outResult {
  switch self
  case controllerProperty (@lstring controllerName @lstring propertyName) : 
    outResult = controllerName.string + "." + propertyName + ".removeObserver"
  case controllerSecondaryProperty (@lstring controllerName @lstring propertyName @lstring secondaryPropertyName) : 
    outResult = controllerName.string + "." + propertyName + "." + secondaryPropertyName + ".removeObserver"
  case selfProperty (@lstring masterName *) :
    outResult = masterName.string + ".removeObserver"
  case prefsProperty (@lstring prefsName @lstring propertyName *) :
    outResult = "g_" + prefsName + "?."  + propertyName + ".removeObserver"
  case rootProperty (@lstring masterName) :
    outResult = "rootObject." + masterName + ".removeObserver"
  case rootPropertyWithOption (@lstring masterName @lstring optionName) :
    outResult = "rootObject." + masterName + "." + optionName + ".removeObserver"
  case rootPropertyRelationship (@lstring relationshipName @lstring propertyName) :
    outResult = "self.rootObject." + relationshipName + ".removeObserverOf_" + propertyName
  end
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#    TRANSIENT ROUTINE GENERATION                                                                                      *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

proc generateTransients
  ?let @string inSourceFile
  ?let @transientDefinitionListForGeneration inTransientListForGeneration {
#--------------------------- Generate transient routines
  for () in inTransientListForGeneration do
    let s = [filewrapper transientManager.transientComputationFunctionFile
      !mOwnerName
      !mTransientName
      !mDependencyList
      !mTransientType 
    ]
    let fileName = mOwnerName + "+transient+" + mTransientName + ".swift"
    [@string generateFileWithPattern
      ![inSourceFile stringByDeletingLastPathComponent]
      !fileName
      !"//"
      !"\n\n" # Defaut user zone1
      !s
      !"\n\n" # Defaut user zone2
      !"}\n\n//----------------------------------------------------------------------------*\n"
    ]
  end
}

#......................................................................................................................*

private filewrapper transientManager in "../generation-templates" {
}{
}{
  template transientComputationFunctionFile "transient-computation-function.swift.galgasTemplate"
    ?@string OWNER_NAME
    ?@string TRANSIENT_NAME
    ?@transientDependencyListForGeneration DEPENDENCY_LIST
    ?@typeKind TRANSIENT_TYPE
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
