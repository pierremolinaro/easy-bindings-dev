#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST   
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct @prefDeclaration {
  @outletDeclarationList mOutletDeclarationList
  @simpleStoredPropertyList mSimpleStoredAttributeList
  @lstringlist mActionDeclarationList
  @externSwiftFunctionList mExternSwiftFunctionList
  @storedArrayPropertyListAST mStoredArrayList
  @stringset mSignatureList
  @mainXibDescriptorList mMainXibDescriptorList
}

#·······················································································································

class @prefsDeclarationAST : @abstractDeclarationAST {
  @prefDeclaration mDeclaration
}

#·······················································································································

override method @prefsDeclarationAST enterInPrecedenceGraph ?!@declarationPrecedenceGraph ioGraph {
  [!?ioGraph addNode !mClassName !self]
}

#·······················································································································

override getter @prefsDeclarationAST lkey -> @lstring {
  result = mClassName
}

#·······················································································································

func %once preferencesName -> @string outResult {
  outResult = "Preferences"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension easyBindings_syntax {

  #·····················································································································
  
  rule <preferences_declaration>
    ?let @bool unused inIsUserDefined
    ?!@astDeclarationStruct ioDeclarationAST
  {
    $prefs$
    let prefs = @lstring.new {!preferencesName () !.here}
    ${$
    @stringset signatureList = {}
    repeat
    while
      <action_declaration> !?ioDeclarationAST.mPreferences.mActionDeclarationList
    while
      @simpleStoredPropertyList simpleStoredPropertyList = {}
      <simple_stored_declaration>
        !prefs
        !?simpleStoredPropertyList
        !?signatureList
        !?ioDeclarationAST
      ioDeclarationAST.mPreferences.mSimpleStoredAttributeList += simpleStoredPropertyList
    while
      <outlet_declaration> !?ioDeclarationAST.mPreferences.mOutletDeclarationList
    while
      <transient_declaration> !prefs !["" nowhere] !?ioDeclarationAST
    while
      <extern_swift_func> !?ioDeclarationAST.mPreferences.mExternSwiftFunctionList
    while
      @storedArrayPropertyListAST storedArrayList = {}
      <stored_array_declaration> !prefs !?storedArrayList !?ioDeclarationAST
      ioDeclarationAST.mPreferences.mStoredArrayList += storedArrayList
    while
      <controller_declaration> !prefs !["" nowhere] !?ioDeclarationAST
    end
    ioDeclarationAST.mPreferences.mSignatureList += signatureList
    $}$
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   CLASS AND PROPERTY SEMANTIC ANALYSIS                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @prefsDeclarationAST firstAnalysisPhase
       ?!@semanticContext ioSemanticContext
       ?!@generationStruct ioGeneration
{
  buildActionMap (!mDeclaration.mActionDeclarationList ?let @actionMap actionMap)
  [!?ioSemanticContext.mClassMap insertKey
    !.new {!preferencesName () !.here}
    !.prefs
    !{}
    !actionMap
    !{}
  ]
  for () in actionMap do
    ioGeneration.mFileGenerationList += !@actionFileGeneration.new {
      !mClassName.string
      !lkey.string
    }
  end
  ioGeneration.mMainXibDescriptorList = mDeclaration.mMainXibDescriptorList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   THIRD ANALYSIS PHASE
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @prefsDeclarationAST thirdAnalysisPhase
       ?!@semanticContext ioSemanticContext
       ?!@generationStruct ioGeneration
{
#--- Analyze extern functions
  let @stringset availableCallers = {!"awakeFromNib", !"init"}
  @externFunctionMap externFunctionMap = {}
  for () in mDeclaration.mExternSwiftFunctionList do
    [!?externFunctionMap insertKey !mExternSwiftFunctionName]
    if not [availableCallers hasKey !mCallerName.string] then
      var s = "invalid caller; available callers:"
      for (str) in availableCallers do
        s += "\n  - " + str
      end
      error mCallerName : s
    end
  end
#--- Get preference property map
  [ioSemanticContext.mClassMap searchKey
    !.new {!preferencesName () !.nowhere}
    ?*
    ?let propertyMap
    ?let actionMap
    ?let propertyGenerationList
  ]
#--- Analyze outlets and bindings
  analyzeOutlets (
    !{} # No root entity
    !"" # No root entity
    !ioSemanticContext
    !mDeclaration.mOutletDeclarationList
    !propertyMap
    !actionMap
    !preferencesName ()
    !?ioGeneration
    ?let @regularBindingsGenerationList regularBindingsGenerationList
    ?let @multipleBindingGenerationList multipleBindingGenerationList
    ?let @actionBindingListForGeneration actionBindingListForGeneration
    ?let @decoratedOutletMap outletMap
    ?let @tableViewBindingGenerationList tableViewBindingGenerationList
    ?let @ebViewGraphicControllerBindingGenerationList ebViewGraphicControllerBindingGenerationList
  )
#--- Code generation
  ioGeneration.mFileGenerationList += !@preferencesForGeneration.new {
    !propertyGenerationList
    !ioGeneration.mMainXibDescriptorList
    !regularBindingsGenerationList
    !multipleBindingGenerationList
    !actionBindingListForGeneration
    !outletMap
    !mDeclaration.mExternSwiftFunctionList
    !tableViewBindingGenerationList
    !ebViewGraphicControllerBindingGenerationList
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   GENERATION                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @preferencesForGeneration : @abstractFileGeneration {
  @propertyGenerationList mPropertyListForGeneration
  @mainXibDescriptorList mMainXibDescriptorList
  @regularBindingsGenerationList mRegularBindingsGenerationList
  @multipleBindingGenerationList mMultipleBindingGenerationList
  @actionBindingListForGeneration mActionBindingListForGeneration
  @decoratedOutletMap mOutletMap
  @externSwiftFunctionList mExternSwiftFunctionList
  @tableViewBindingGenerationList mTableViewBindingGenerationList
  @ebViewGraphicControllerBindingGenerationList mEBViewBindingGenerationList
}

#·······················································································································

private filewrapper prefsGenerationTemplate in "../generation-templates" {
}{
}{
  template preferences "preferences.swift.galgasTemplate"
    ?@propertyGenerationList PROPERTY_LIST_FOR_GENERATION
    ?@mainXibDescriptorList MAIN_XIB_DESCRIPTOR_LIST
    ?@decoratedOutletMap OUTLET_MAP
    ?@regularBindingsGenerationList REGULAR_BINDINGS_GENERATION_LIST 
    ?@actionBindingListForGeneration TARGET_ACTION_LIST
    ?@multipleBindingGenerationList MULTIPLE_BINDING_GENERATION_LIST
    ?@externSwiftFunctionList EXTERN_SWIFT_FUNCTION_LIST
    ?@tableViewBindingGenerationList TABLE_VALUE_BINDING_GENERATION_LIST
    ?@ebViewGraphicControllerBindingGenerationList EB_VIEW_GRAPHIC_CONTROLLER_BINDING_GENERATION_LIST
}

#·······················································································································

override method @preferencesForGeneration generateCode
    ?let @string inOutputDirectory
    ?!@stringset ioGeneratedFileSet
{
  let s = [filewrapper prefsGenerationTemplate.preferences
    !mPropertyListForGeneration
    !mMainXibDescriptorList
    !mOutletMap
    !mRegularBindingsGenerationList
    !mActionBindingListForGeneration
    !mMultipleBindingGenerationList
    !mExternSwiftFunctionList
    !mTableViewBindingGenerationList
    !mEBViewBindingGenerationList
  ]
  let fileName = preferencesName () + ".swift"
  ioGeneratedFileSet += !fileName
  [@string generateFile
    !inOutputDirectory
    !fileName
    !s
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
