#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   AST                                                                                                                *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

class @prefDeclaration : @astDeclaration {
  @lstring mPrefsName
  @outletDeclarationList mOutletDeclarationList
  @simpleStoredPropertyList mSimpleStoredAttributeList
  @lstringlist mActionDeclarationList
  @itemList mItemList
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   SYNTAX                                                                                                             *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

syntax extension easyBindings_syntax {

  #....................................................................................................................*
  
  rule <preferences_declaration>
    ?let @bool inIsUserDefined
    ?!@astDeclarationStruct ioDeclarationAST
  {
    $prefs$
    $Identifier$ ?let @lstring prefsName
    ${$
    var outletDeclarationList =@outletDeclarationList.emptyList{}
    @simpleStoredPropertyList simpleStoredPropertyList = {}
    var actionDeclarationList =@lstringlist.emptyList{}
    @itemList itemList = {}
    repeat
    while
      <action_declaration> !?actionDeclarationList
    while
      <simple_stored_declaration> !?simpleStoredPropertyList
    while
      <outlet_declaration> !?outletDeclarationList
    while
      <transient_declaration> !?itemList
    end
    $}$
    ioDeclarationAST.mDeclarationList += !@prefDeclaration.new {
      !inIsUserDefined
      !prefsName
      !outletDeclarationList
      !simpleStoredPropertyList
      !actionDeclarationList
      !itemList
    }
  }

  #....................................................................................................................*

}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   TYPE INVENTORY                                                                                                     *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

override method @prefDeclaration typeInventory
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ?!@transientDependencyGraph ioTransientDependencyGraph
{
  [mSimpleStoredAttributeList typeInventory !?ioUnifiedTypeMap]
  for (item) in mItemList do
    [item typeInventory
      !"prefs." + mPrefsName
      !?ioUnifiedTypeMap
      !?ioTransientDependencyGraph
    ]
  end
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   SEMANTIC TYPES                                                                                                     *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

map @prefsObservablePropertyMap {
  @observablePropertyMap mObservablePropertyMap
  insert insertKey error message "the '%K' prefs is already declared in %L"
  search searchKey error message "there is no '%K' prefs"
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   SEMANTIC ANALYSIS                                                                                                  *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

override method @prefDeclaration buildObservablePropertyMaps
  ?let @unifiedTypeMap inUnifiedTypeMap
  ?!@semanticContext ioSemanticContext
{
  @observablePropertyMap observablePropertyMap = {}
#--- Analyze simple stored properties
  [mSimpleStoredAttributeList buildObservablePropertyMap
    !inUnifiedTypeMap
    !?observablePropertyMap
  ]
#--- Analyze transients
  for (item) in mItemList do
    [item buildObservablePropertyMap
      !inUnifiedTypeMap
      !?observablePropertyMap
    ]
  end
#--- Enter in semantics context  
  [!?ioSemanticContext.mPrefsObservablePropertyMap insertKey
    !mPrefsName
    !observablePropertyMap
  ]
}

#......................................................................................................................*

override method @prefDeclaration semanticAnalysis
  ?let @semanticContext inSemanticContext
  ?!@structForGeneration ioGeneration
{
  [inSemanticContext.mPrefsObservablePropertyMap searchKey
    !mPrefsName
    ?let @observablePropertyMap observablePropertyMap
  ]
#--- Analyze simple stored properties
  [mSimpleStoredAttributeList semanticAnalysis
    !mPrefsName.string
    !inSemanticContext.mUnifiedTypeMap
    !?ioGeneration.mValidationStubRoutineListForGeneration
    ?let @simpleStoredPropertyListForGeneration simpleStoredPropertyListForGeneration
  ]
#--- Analyze transients
  @transientDefinitionListForGeneration transientDefinitionListForGeneration = {}
  for (item) in mItemList do
    [item semanticAnalysis
      !mPrefsName.string
      !{} # No root entity
      !inSemanticContext
      !observablePropertyMap
      !{} # No Array controller
      !?transientDefinitionListForGeneration
    ]
  end
  ioGeneration.mTransientListForGeneration += transientDefinitionListForGeneration
#--- Build action map
  buildActionMap (!mActionDeclarationList ?let @actionMap actionMap)
  for () in actionMap do
    ioGeneration.mActionListForGeneration +=
      !mPrefsName.string
      !lkey.string
  end
#--- Analyze outlets and bindings
  analyzeOutlets (
    !{} # No root entity
    !inSemanticContext
    !mOutletDeclarationList
    !observablePropertyMap
    !actionMap
    !{} # Array controller map
    !?ioGeneration
    ?let @regularBindingsGenerationList regularBindingsGenerationList
    ?let @multipleBindingGenerationList multipleBindingGenerationList
    ?let @actionBindingListForGeneration actionBindingListForGeneration
    ?let @decoratedOutletMap outletMap
  )
#--- Code generation
  ioGeneration.mPreferenceListForGeneration +=
    !mPrefsName.string
    !simpleStoredPropertyListForGeneration
    !transientDefinitionListForGeneration
    !regularBindingsGenerationList
    !multipleBindingGenerationList
    !actionBindingListForGeneration
    !outletMap
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   GENERATION TYPES                                                                                                   *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

getter @typeKind preferencesSwiftGetter -> @string outResult {
  switch self
  case boolType : outResult = "(value as! NSNumber).boolValue"
  case integerType : outResult = "(value as! NSNumber).integerValue"
  case doubleType : outResult = "à compléter preferencesSwiftGetter"
  case stringType : outResult = "value as! String"
  case colorType : outResult = "NSUnarchiver.unarchiveObjectWithData (value as! NSData) as! NSColor"
  case dateType : outResult = "value as! NSDate"
  case enumType (* *) : outResult = "à compléter preferencesSwiftGetter"
  case entityType (*) :
    outResult = "<invalid entity type>"
  end
}

#......................................................................................................................*

getter @typeKind preferencesSwiftSetter ?let @string inPropertyName -> @string outResult
{
  switch self
  case boolType : outResult = "NSNumber (bool:" + inPropertyName + ".prop.0)"
  case integerType : outResult = "NSNumber (integer:" + inPropertyName + ".prop.0)"
  case doubleType : outResult = "NSNumber (double:" + inPropertyName + ".prop.0)"
  case colorType : outResult = "NSArchiver.archivedDataWithRootObject (" + inPropertyName + ".prop.0)"
  case dateType, stringType : outResult = inPropertyName + ".prop.0"
  case enumType (* *) : outResult = "à compléter preferencesSwiftSetter"
  case entityType (*) :
    outResult = "<invalid entity type>"
  end
}

#......................................................................................................................*

list @preferenceListForGeneration {
  @string mPreferenceName
  @simpleStoredPropertyListForGeneration mSimpleStoredPropertyListForGeneration
  @transientDefinitionListForGeneration mTransientDefinitionListForGeneration
  @regularBindingsGenerationList mRegularBindingsGenerationList
  @multipleBindingGenerationList mMultipleBindingGenerationList
  @actionBindingListForGeneration mActionBindingListForGeneration
  @decoratedOutletMap mOutletMap
}

private filewrapper prefsGenerationTemplate in "../generation-templates" {
}{
}{
  template preferencesInSwift "preferences.swift.galgasTemplate"
    ?@string PREFERENCES_NAME
    ?@simpleStoredPropertyListForGeneration SIMPLE_SIMPLE_PROPERTY_LIST_FOR_GENERATION
    ?@transientDefinitionListForGeneration TRANSIENT_LIST_FOR_IMPLEMENTATION
    ?@decoratedOutletMap OUTLET_MAP
    ?@regularBindingsGenerationList REGULAR_BINDINGS_GENERATION_LIST 
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   GENERATION                                                                                                         *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

proc generatePreferences
  ?let @preferenceListForGeneration inPreferenceListForGeneration
  ?let @string inOutputDirectory
{
  for () in inPreferenceListForGeneration do
    let s = [filewrapper prefsGenerationTemplate.preferencesInSwift
      !mPreferenceName
      !mSimpleStoredPropertyListForGeneration
      !mTransientDefinitionListForGeneration
      !mOutletMap
      !mRegularBindingsGenerationList
    ]
    [@string generateFile
      !inOutputDirectory
      !mPreferenceName + ".swift"
      !s
    ]
  end
}
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
