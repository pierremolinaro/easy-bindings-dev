#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST   
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct @prefDeclaration {
  @outletDeclarationList mOutletDeclarationList
  @simpleStoredPropertyList mSimpleStoredAttributeList
  @lstringlist mActionDeclarationList
  @secondaryPropertyList mSecondaryPropertyList
  @mainXibDescriptorList mMainXibDescriptorList
  @externSwiftFunctionList mExternSwiftFunctionList
  @storedArrayPropertyListAST mStoredArrayList
  @arrayControllerForGeneration mArrayControllerForGeneration
  @stringset mSignatureList
}

#·······················································································································

class @prefsDeclarationAST : @abstractDeclarationAST {
}

#·······················································································································

override method @prefsDeclarationAST enterInPrecedenceGraph ?!@declarationPrecedenceGraph ioGraph {
  [!?ioGraph addNode !mClassName !self]
}

#·······················································································································

override getter @prefsDeclarationAST lkey -> @lstring {
  result = mClassName
}


#·······················································································································

func %once prefsKey -> @string {
  result = "prefs"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension easyBindings_syntax {

  #·····················································································································
  
  rule <preferences_declaration>
    ?let @bool unused inIsUserDefined
    ?!@astDeclarationStruct ioDeclarationAST
  {
    $prefs$
    let prefs = @lstring.new {!prefsKey () !.here}
    ${$
    @stringset signatureList = {}
    repeat
    while
      <action_declaration> !?ioDeclarationAST.mPreferences.mActionDeclarationList
    while
      @simpleStoredPropertyList simpleStoredPropertyList = {}
      <simple_stored_declaration>
        !prefs
        !?simpleStoredPropertyList
        !?signatureList
        !?ioDeclarationAST
      ioDeclarationAST.mPreferences.mSimpleStoredAttributeList += simpleStoredPropertyList
    while
      <outlet_declaration> !?ioDeclarationAST.mPreferences.mOutletDeclarationList
    while
     @secondaryPropertyList secondaryPropertyList = {}
      <transient_declaration> !prefs !["" nowhere] !?secondaryPropertyList !?ioDeclarationAST
      ioDeclarationAST.mPreferences.mSecondaryPropertyList += secondaryPropertyList
    while
      <extern_swift_func> !?ioDeclarationAST.mPreferences.mExternSwiftFunctionList
    while
      @storedArrayPropertyListAST storedArrayList = {}
      <stored_array_declaration> !prefs !?storedArrayList !?ioDeclarationAST
      ioDeclarationAST.mPreferences.mStoredArrayList += storedArrayList
    while
     @secondaryPropertyList secondaryPropertyList = {}
      <controller_declaration> !prefs !["" nowhere] !?secondaryPropertyList !?ioDeclarationAST
      ioDeclarationAST.mPreferences.mSecondaryPropertyList += secondaryPropertyList
    end
    ioDeclarationAST.mPreferences.mSignatureList += signatureList
    $}$
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   CLASS AND PROPERTY SEMANTIC ANALYSIS                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @prefsDeclarationAST classAndPropertySemanticAnalysis ?!@classMap ioClassMap {
  [!?ioClassMap insertKey
    !.new {!prefsKey () !.here}
    !.prefs
    !{}
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   TYPE INVENTORY                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @prefDeclaration typeInventory
  ?!@unifiedTypeMap ioUnifiedTypeMap
{
  [mSimpleStoredAttributeList typeInventory !?ioUnifiedTypeMap]
  for (item) in mSecondaryPropertyList do
    [item typeInventory
      !?ioUnifiedTypeMap
    ]
  end
}

#·······················································································································

method @prefDeclaration solveSecondaryProperty
  ?!@semanticContext ioSemanticContext
  ?let @unifiedTypeMap unused inUnifiedTypeMap
  ?let @secondaryPropertyList inPropertiesToSolve
  !@secondaryPropertyList outUnsolvedProperties
  ?!@simpleStoredPropertyListForGeneration ioSimpleStoredPropertyListForGeneration
{
  outUnsolvedProperties = {}
  var preferencesObservablePropertyMap = ioSemanticContext.mPreferencesObservablePropertyMap
  for (property) in inPropertiesToSolve do
    [property tryToDefineSecondaryProperty
      !?ioSemanticContext
      !{} # No root entity
      !?preferencesObservablePropertyMap
      !?outUnsolvedProperties
      !?ioSimpleStoredPropertyListForGeneration
    ]
  end
  ioSemanticContext.mPreferencesObservablePropertyMap = preferencesObservablePropertyMap
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @prefDeclaration buildObservablePropertyMapsFromStoredProperties
  ?let @unifiedTypeMap inUnifiedTypeMap
  ?!@semanticContext ioSemanticContext
{
#--- Analyze simple stored properties
  [mSimpleStoredAttributeList buildObservablePropertyMap
    !inUnifiedTypeMap
    !?ioSemanticContext.mPreferencesObservablePropertyMap
  ]
#--- Analyze stored array properties
  [mStoredArrayList buildObservablePropertyMap
    !inUnifiedTypeMap
    !?ioSemanticContext.mPreferencesObservablePropertyMap
  ]
}

#·······················································································································

method @prefDeclaration semanticAnalysis
  ?let @externSwiftFunctionList inExternSwiftFunctionList
  ?let @semanticContext inSemanticContext
  ?!@structForGeneration ioGeneration
{
#--- Analyze extern functions
  let @stringset availableCallers = {!"awakeFromNib", !"init"}
  @externFunctionMap externFunctionMap = {}
  for () in inExternSwiftFunctionList do
    [!?externFunctionMap insertKey !mExternSwiftFunctionName]
    if not [availableCallers hasKey !mCallerName.string] then
      var s = "invalid caller; available callers:"
      for (str) in availableCallers do
        s += "\n  - " + str
      end
      error mCallerName : s
    end
  end
#--- Analyze simple stored properties
  [mSimpleStoredAttributeList simpleStoredPropertySemanticAnalysis
    !preferencesName ()
    !inSemanticContext.mUnifiedTypeMap
    !?ioGeneration.mValidationStubRoutineListForGeneration
    ?let @simpleStoredPropertyListForGeneration simpleStoredPropertyListForGeneration
  ]
#--- Analyze stored array properties
  [mStoredArrayList storedArrayPropertySemanticAnalysis
    !inSemanticContext.mUnifiedTypeMap
    ?let @storedArrayPropertyListForGeneration storedArrayPropertyListForGeneration
  ]
#--- Analyze transients
  @transientDefinitionListForGeneration transientDefinitionListForGeneration = {}
  @arrayControllerForGeneration arrayControllerListForGeneration = {}
  @selectionControllerForGeneration selectionControllerListForGeneration = {}
  for (item) in mSecondaryPropertyList do
    [item secondaryPropertySemanticAnalysis
      !preferencesName ()
      !"" # No root entity name
      !{} # No root entity
      !inSemanticContext
      !inSemanticContext.mPreferencesObservablePropertyMap
      !?transientDefinitionListForGeneration
      !?arrayControllerListForGeneration
      !?selectionControllerListForGeneration
      !?ioGeneration.mNeededOutletClasses
    ]
  end
  ioGeneration.mTransientListForGeneration += transientDefinitionListForGeneration
  ioGeneration.mArrayControllerListForGeneration += arrayControllerListForGeneration
  ioGeneration.mSelectionControllerListForGeneration += selectionControllerListForGeneration
#--- Build action map
  buildActionMap (!mActionDeclarationList ?let @actionMap actionMap)
  for () in actionMap do
    ioGeneration.mActionListForGeneration +=
      !preferencesName ()
      !lkey.string
  end
#--- Analyze outlets and bindings
  analyzeOutlets (
    !{} # No root entity
    !"" # No root entity
    !inSemanticContext
    !mOutletDeclarationList
    !inSemanticContext.mPreferencesObservablePropertyMap
    !actionMap
    !preferencesName ()
    !?ioGeneration
    ?let @regularBindingsGenerationList regularBindingsGenerationList
    ?let @multipleBindingGenerationList multipleBindingGenerationList
    ?let @actionBindingListForGeneration actionBindingListForGeneration
    ?let @decoratedOutletMap outletMap
    ?let @tableViewBindingGenerationList tableViewBindingGenerationList
    ?let @ebViewGraphicControllerBindingGenerationList ebViewGraphicControllerBindingGenerationList
  )
#--- Code generation
  ioGeneration.mPreferencesForGeneration.mSimpleStoredPropertyListForGeneration = simpleStoredPropertyListForGeneration
  ioGeneration.mPreferencesForGeneration.mTransientDefinitionListForGeneration = transientDefinitionListForGeneration
  ioGeneration.mPreferencesForGeneration.mRegularBindingsGenerationList = regularBindingsGenerationList
  ioGeneration.mPreferencesForGeneration.mActionBindingListForGeneration = actionBindingListForGeneration
  ioGeneration.mPreferencesForGeneration.mMultipleBindingGenerationList = multipleBindingGenerationList
  ioGeneration.mPreferencesForGeneration.mOutletMap = outletMap
  ioGeneration.mPreferencesForGeneration.mMainXibDescriptorList = mMainXibDescriptorList
  ioGeneration.mPreferencesForGeneration.mExternSwiftFunctionList = inExternSwiftFunctionList
  ioGeneration.mPreferencesForGeneration.mStoredArrayPropertyListForGeneration = storedArrayPropertyListForGeneration
  ioGeneration.mPreferencesForGeneration.mArrayControllerForGeneration = arrayControllerListForGeneration
  ioGeneration.mPreferencesForGeneration.mTableViewBindingGenerationList = tableViewBindingGenerationList
  ioGeneration.mPreferencesForGeneration.mEBViewBindingGenerationList = ebViewGraphicControllerBindingGenerationList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   GENERATION TYPES                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct @preferencesForGeneration {
  @simpleStoredPropertyListForGeneration mSimpleStoredPropertyListForGeneration
  @transientDefinitionListForGeneration mTransientDefinitionListForGeneration
  @regularBindingsGenerationList mRegularBindingsGenerationList
  @multipleBindingGenerationList mMultipleBindingGenerationList
  @actionBindingListForGeneration mActionBindingListForGeneration
  @decoratedOutletMap mOutletMap
  @mainXibDescriptorList mMainXibDescriptorList
  @externSwiftFunctionList mExternSwiftFunctionList
  @storedArrayPropertyListForGeneration mStoredArrayPropertyListForGeneration
  @arrayControllerForGeneration mArrayControllerForGeneration
  @tableViewBindingGenerationList mTableViewBindingGenerationList
  @ebViewGraphicControllerBindingGenerationList mEBViewBindingGenerationList
}

#·······················································································································

private filewrapper prefsGenerationTemplate in "../generation-templates" {
}{
}{
  template preferences "preferences.swift.galgasTemplate"
    ?@simpleStoredPropertyListForGeneration SIMPLE_PROPERTY_LIST_FOR_GENERATION
    ?@transientDefinitionListForGeneration TRANSIENT_LIST_FOR_IMPLEMENTATION
    ?@decoratedOutletMap OUTLET_MAP
    ?@regularBindingsGenerationList REGULAR_BINDINGS_GENERATION_LIST 
    ?@mainXibDescriptorList MAIN_XIB_DESCRIPTOR_LIST
    ?@actionBindingListForGeneration TARGET_ACTION_LIST
    ?@multipleBindingGenerationList MULTIPLE_BINDING_GENERATION_LIST
    ?@externSwiftFunctionList EXTERN_SWIFT_FUNCTION_LIST
    ?@storedArrayPropertyListForGeneration STORED_ARRAY_LIST
    ?@arrayControllerForGeneration ARRAY_CONTROLLER_LIST
    ?@tableViewBindingGenerationList TABLE_VALUE_BINDING_GENERATION_LIST
    ?@ebViewGraphicControllerBindingGenerationList EB_VIEW_GRAPHIC_CONTROLLER_BINDING_GENERATION_LIST
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   GENERATION                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc generatePreferences
  ?let @preferencesForGeneration inPreferenceListForGeneration
  ?let @string inOutputDirectory
  ?!@stringset ioGeneratedFileSet
{
  let s = [filewrapper prefsGenerationTemplate.preferences
    !inPreferenceListForGeneration.mSimpleStoredPropertyListForGeneration
    !inPreferenceListForGeneration.mTransientDefinitionListForGeneration
    !inPreferenceListForGeneration.mOutletMap
    !inPreferenceListForGeneration.mRegularBindingsGenerationList
    !inPreferenceListForGeneration.mMainXibDescriptorList
    !inPreferenceListForGeneration.mActionBindingListForGeneration
    !inPreferenceListForGeneration.mMultipleBindingGenerationList
    !inPreferenceListForGeneration.mExternSwiftFunctionList
    !inPreferenceListForGeneration.mStoredArrayPropertyListForGeneration
    !inPreferenceListForGeneration.mArrayControllerForGeneration
    !inPreferenceListForGeneration.mTableViewBindingGenerationList
    !inPreferenceListForGeneration.mEBViewBindingGenerationList
  ]
  let fileName = preferencesName () + ".swift"
  ioGeneratedFileSet += !fileName
  [@string generateFile
    !inOutputDirectory
    !fileName
    !s
  ]
}

#·······················································································································

func %once preferencesName -> @string outResult {
  outResult = "Preferences"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
