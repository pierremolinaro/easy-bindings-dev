lexique easyBindings_lexique {

#----------------------------------------------------------------------------*
#   Identifiers and keywords                                                 *
#----------------------------------------------------------------------------*

@string tokenString

style keywordsStyle -> "Keywords"
style idfStyle -> "identifiers"
style IdfStyle -> "Identifiers"

$identifier$ ! tokenString  style idfStyle error message "an identifier (beginning with a lower-case letter)"
$Identifier$ ! tokenString  style IdfStyle error message "an identifier (beginning with a upper-case letter)"

list lowerCaseKeyWordList style keywordsStyle error message "the '%K' keyword"{
  "action",
  "all",
  "array",
  "arrayController",
  "binding",
  "calledBy",
  "class",
  "classForSwift",
  "column",
  "customObjectController",
  "default",
  "dependsFrom",
  "document",
  "enum",
  "entity",
  "extern",
  "externDelegate",
  "externFunc",
  "filter",
  "include",
  "inverse",
  "mainxib",
  "no",
  "outlet",
  "prefs",
  "property",
  "root",
  "selectionController",
  "self",
  "signature",
  "sort",
  "struct",
  "to",
  "toMany",
  "toOne",
  "transient",
  "validates",
  "version",
  "versionShouldChange",
  "xcodeproject",
  "yes"
}

rule 'a'->'z' {
  repeat
    enterCharacterIntoString ( !?tokenString !* )
  while 'a'->'z' | 'A'->'Z' | '0'->'9' | '_' :
  end
  send search tokenString in lowerCaseKeyWordList default $identifier$
}

rule 'A'->'Z' {
  repeat
    enterCharacterIntoString ( !?tokenString !* )
  while 'a'->'z' | 'A'->'Z' | '0'->'9' :
  end
  send $Identifier$
}

#----------------------------------------------------------------------------*
#   Binding name                                                             *
#----------------------------------------------------------------------------*

style bindingNameStyle -> "Binding Names"
style reservedBindingNameStyle -> "Reserved binding names"

list reservedBindingNameKeyWordList style reservedBindingNameStyle error message "the '$%K' keyword"{
  "enabled",
  "hidden",
  "tableValue",
  "run"
}

$bindingName$ ! tokenString  style bindingNameStyle error message "a binding name (identifier prefixed by '$')"

rule '$' {
  repeat
  while
   'a'->'z' | 'A'->'Z' | '_' | '0'->'9' :
    enterCharacterIntoString ( !?tokenString !* )
  end
  send search tokenString in reservedBindingNameKeyWordList default $bindingName$
}

#----------------------------------------------------------------------------*
#   Literal decimal integers                                                 *
#----------------------------------------------------------------------------*

style integerStyle -> "Integer Constants"
style floatStyle -> "Floating Point Constants"
@uint uint32value
$literal_integer$ !uint32value  style integerStyle error message "a 32-bit unsigned decimal number"
@double floatValue
$literal_double$ !floatValue !tokenString  style floatStyle error message "a float number"
message floatNumberConversionError : "invalid float number"

message decimalNumberTooLarge : "decimal number too large"
message internalError : "internal error"

rule '0'->'9' {
  enterCharacterIntoString ( !?tokenString !* )
  repeat
  while '0'->'9' :
    enterCharacterIntoString ( !?tokenString !* )
  while '_' :
  end
  select
  case '.' :
    enterCharacterIntoString ( !?tokenString !'.' )
    repeat
    while '0'->'9' :
      enterCharacterIntoString ( !?tokenString !* )
    while '_' :
    end
    convertStringToDouble ( !tokenString !?floatValue error floatNumberConversionError )
    send $literal_double$
  default
    convertDecimalStringIntoUInt ( !tokenString !?uint32value error decimalNumberTooLarge, internalError )
    send $literal_integer$
  end
}

#----------------------------------------------------------------------------*
#   Literal character strings                                                *
#----------------------------------------------------------------------------*

style stringStyle -> "String Constants"
$literal_string$ ! tokenString  style stringStyle %nonAtomicSelection error message "a character string constant \"...\""


message incorrectStringEnd : "string does not end with '\"'"

rule '"' {
  repeat
   while ' ' | '!' | '#'-> '\uFFFD' :
    enterCharacterIntoString ( !?tokenString !* )
  end
  select
  case '"' :
    send $literal_string$
  default
    error incorrectStringEnd
  end
}

#----------------------------------------------------------------------------*
#   Delimiters                                                               *
#----------------------------------------------------------------------------*

style delimitersStyle -> "Delimiters"
list delimitorsList style delimitersStyle error message "the '%K' delimitor"{
  ":",    ",",    ";",   "!",  "[",  "]",  "{",  "}",
  "(",  ")", "." , "|", "&", "<", ">",
  "^"
}

rule list delimitorsList

#----------------------------------------------------------------------------*
#   Comments                                                                 *
#----------------------------------------------------------------------------*

style commentStyle -> "Comments"
$comment$  style commentStyle %nonAtomicSelection error message "a comment"
rule '#' {
  repeat
  while '\u0001' -> '\u0009' | '\u000B' | '\u000C' | '\u000E' -> '\uFFFD' :
  end
  drop $comment$
}

#----------------------------------------------------------------------------*
#   Separators                                                               *
#----------------------------------------------------------------------------*

rule '\u0001' -> ' ' {
}

#----------------------------------------------------------------------------*

}

