#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   AST                                                                                                                *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

class @objectControllerDeclaration : @abstractSecondaryProperty {
  @lstring mObjectControllerName
  @lstring mToOneRelationshipName
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   SYNTAX                                                                                                             *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

syntax extension easyBindings_syntax {

  #·····················································································································
  
  rule <controller_declaration>
    ?!@secondaryPropertyList ioSecondaryPropertyList
  {
    $objectController$
    $identifier$ ?let @lstring objectControllerName
    $:$
    $self$
    $.$
    $identifier$ ?let @lstring toOneRelationshipName
    $;$
    ioSecondaryPropertyList += !@objectControllerDeclaration.new {
      !objectControllerName
      !toOneRelationshipName
    }
  }

  #·····················································································································

}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   SEMANTIC ANALYSIS                                                                                                  *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

override method @objectControllerDeclaration typeInventory
  ?!@unifiedTypeMap unused ioUnifiedTypeMap
{
}

#·······················································································································

override method @objectControllerDeclaration tryToSolveSecondaryProperty
  ?!@semanticContext ioSemanticContext
  ?let @observablePropertyMap unused inRootObservableProperties
  ?!@observablePropertyMap ioObservableProperties
  ?!@secondaryPropertyList ioUnsolvedProperties
{
  if [ioObservableProperties hasKey !mToOneRelationshipName.string] then
    [ioObservableProperties searchKey
      !mToOneRelationshipName
      ?let @typeKind kind
      ?let @propertyKind propertyKind
      ?let @propertyMultiplicity multiplicity
      ?3*
    ]
    if multiplicity != .single then
      error mToOneRelationshipName : "this property is not a relationship"
    end
#    if [ioSemanticContext.mUnifiedTypeMap hasKey !mToOneRelationshipName.string] then
#    #--- Get model controller
#      [ioSemanticContext.mUnifiedTypeMap searchKey
#        !mToOneRelationshipName
#        ?let kind
#        ?* # Action map
#      ]
    #--- Check type
      @string entityName
      switch kind
      case stringType, boolType, dateType, doubleType, integerType, fontType :
        error mToOneRelationshipName : "the controller model should be an entity" : entityName
      case enumType (* *) :
        error mToOneRelationshipName : "the controller model should be an entity" : entityName
      case classType (*) :
        error mToOneRelationshipName : "the controller model should be an entity" : entityName
      case propertyClassType (**) :
        error mToOneRelationshipName : "the controller model should be an entity" : entityName
      case transientPropertyExternType (*) :
        error mToOneRelationshipName : "the controller model should be an entity" : entityName
      case entityType (kEntityName) :
        entityName = kEntityName
      end
    #--- Store selection controller
      [!?ioObservableProperties insertKey
        !mObjectControllerName
        !kind
        !.selectionController
        !.single
        !"" # No inverse relationship
        !{} # No action
        !false
      ]
#    else
#      ioUnsolvedProperties += !self
#    end
  else
    ioUnsolvedProperties += !self
  end
}

#·······················································································································

override method @objectControllerDeclaration secondaryPropertySemanticAnalysis
  ?let @string inOwnerName
  ?let @string unused inRootEntityName
  ?let @observablePropertyMap unused inRootObservableProperties
  ?let @semanticContext inSemanticContext
  ?let @observablePropertyMap inObservableProperties
  ?!@transientDefinitionListForGeneration unused ioTransientDefinitionListForGeneration
  ?!@arrayControllerForGeneration unused ioArrayControllerForGeneration
  ?!@selectionControllerForGeneration unused ioSelectionControllerForGeneration
  ?!@customObjectControllerForGeneration unused ioCustomObjectControllerDeclaration
  ?!@objectControllerForGeneration ioObjectControllerDeclaration
  ?!@stringset unused ioNeededOutletClasses
{
#--- Find controller observable properties
  [inObservableProperties searchKey
    !mToOneRelationshipName
    ?let @typeKind kind
    ?let @propertyKind propertyKind
    ?let @propertyMultiplicity multiplicity
    ?3*
  ]
  [kind entityType ?entityName:let entityTypeName]
  [inSemanticContext.mEntityObservablePropertyMap searchKey
    ![entityTypeName nowhere]
    ?let @observablePropertyMap objectControllerObservablePropertyMap
  ]
#--- Generation
  ioObjectControllerDeclaration +=
    !inOwnerName
    !mObjectControllerName.string
    !mToOneRelationshipName.string
    !entityTypeName
    !objectControllerObservablePropertyMap
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   GENERATION TYPES                                                                                                   *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

list @objectControllerForGeneration {
  @string mOwnerName # document name, prefs name, ...
  @string mObjectControllerName
  @string mRelationshipName
  @string mEntityTypeName
  @observablePropertyMap mSelectionObservablePropertyMap
}

#·······················································································································

private filewrapper objectControllerGenerationTemplate in "../generation-templates/controllers" {
}{
}{
  template implementation "object-controller.swift.galgasTemplate"
    ?@string OBJECT_CONTROLLER_NAME
    ?@string OWNER_NAME
    ?@string TO_ONE_RELATIONSHIP_NAME
    ?@string ENTITY_TYPE_NAME
    ?@observablePropertyMap SELECTION_OBSERVABLE_PROPERTY_MAP
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   GENERATION                                                                                                         *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

proc generateObjectControllers
  ?let @objectControllerForGeneration inObjectControllerListForGeneration
  ?let @string inOutputDirectory
  ?!@stringset ioGeneratedFileSet
{
  for () in inObjectControllerListForGeneration do
    let s = [filewrapper objectControllerGenerationTemplate.implementation
      !mObjectControllerName
      !mOwnerName
      !mRelationshipName
      !mEntityTypeName
      !mSelectionObservablePropertyMap
    ]
    let fileName = "objectController-" + mOwnerName + "-" +  mObjectControllerName + ".swift"
    ioGeneratedFileSet += !fileName
    [@string generateFile
      !inOutputDirectory
      !fileName
      !s
    ]
  end
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
