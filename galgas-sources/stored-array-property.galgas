#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST   
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @storedArrayPropertyListAST {
  @lstring mElementClassName
  @lstring mStoredArrayPropertyName
}

#·······················································································································

class @propertyArrayDeclarationAST : @abstractDeclarationAST {
  @lstring mElementClassName
  @lstring mStoredArrayPropertyName
}

#·······················································································································

override method @propertyArrayDeclarationAST enterInPrecedenceGraph ?!@declarationPrecedenceGraph ioGraph {
  let node = @lstring.new {!mClassName.string + " " + mStoredArrayPropertyName !mStoredArrayPropertyName.location}
  [!?ioGraph addNode !node !self]
  [!?ioGraph addEdge !node !mClassName]
  [!?ioGraph addEdge !node !mElementClassName]
}

#·······················································································································

override getter @propertyArrayDeclarationAST lkey -> @lstring {
  result = @lstring.new {!mClassName.string + " " + mStoredArrayPropertyName !mStoredArrayPropertyName.location}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension easyBindings_syntax {

  #·····················································································································
  
  rule <stored_array_declaration>
    ?let @lstring inClassName
    ?!@storedArrayPropertyListAST ioStoredArrayList
    ?!@astDeclarationStruct ioDeclarationAST
  {
    $toMany$
    $Identifier$ ?var @lstring elementClassName
    $identifier$ ?var @lstring storedArrayPropertyName
    $;$
    ioStoredArrayList += !elementClassName !storedArrayPropertyName
    ioDeclarationAST.mUnifiedDeclarationList += !@propertyArrayDeclarationAST.new {
      !inClassName
      !elementClassName
      !storedArrayPropertyName
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   CLASS AND PROPERTY SEMANTIC ANALYSIS                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @propertyArrayDeclarationAST firstAnalysisPhase
       ?!@semanticContext ioSemanticContext
       ?!@generationStruct unused ioGeneration
{
  with mClassName in !?ioSemanticContext.mClassMap 
    error message searchKey
  do
    [ioSemanticContext.mClassMap searchKey !mElementClassName ?let classKind ?3*]
    switch classKind
    case prefs :
      error mElementClassName : "a simple class is required here"
    case simpleClass :
      let kind = @propertyKind.toMany {
        !typeName: mElementClassName
        !accessibility: .stored
        !graphic: false
        !isEntity: false
      }
      [!?mPropertyMap insertKey !mStoredArrayPropertyName !kind !{}]
    #--- Code Generation
      mPropertyGenerationList += !@atomicArrayGeneration.new {
        !mStoredArrayPropertyName
        !mElementClassName
      }
    case atomic (*) :
      error mElementClassName : "a simple class is required here"
    case document (*) :
      error mElementClassName : "a simple class is required here"
    case entity (2*) :
      error mElementClassName : "a simple class is required here"
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   CODE GENERATION                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @atomicArrayGeneration : @propertyGeneration {
  @string mElementTypeName
}

#·······················································································································

override getter @atomicArrayGeneration prefKeyDefinitionCode -> @string {
  result = "let Preferences_" + mPropertyName + " = \"Preferences:" + mPropertyName + "\"\n"
}

#·······················································································································

override getter @atomicArrayGeneration declarationCode -> @string {
  result  = "  //" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n"
  result += "  //   Property array: " + mPropertyName + "\n"
  result += "  //" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n\n"
  result += "  var " + mPropertyName + "_property = StoredArrayOf_" + mElementTypeName
         + "(Preferences_" + mPropertyName + ")\n\n"
  result += "  //" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n\n"
  result += "  var " + mPropertyName + "_property_selection : EBSelection < [" + mElementTypeName + "] > {\n"
  result += "    return self." + mPropertyName + "_property.prop\n"
  result += "  }\n\n"
}

#·······················································································································

override getter @atomicArrayGeneration configurationCode -> @string {
  result  = "  //--- Property array: " + mPropertyName + "\n"
  result += "    self." + mPropertyName + "_property.undoManager = self.undoManager\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
