#-----------------------------------------------------------------------------------------------------------------------
#   AST   
#-----------------------------------------------------------------------------------------------------------------------

class @outletClassDeclarationAST : @abstractDeclarationAST {
  public var @bool mUserDefined
  public var @lstring mSuperClassName
  public var @bool mHasRunAction
  public var @bool mHasEnabled
  public var @bool mHandlesTableValueBinding
  public var @bool mHandlesGraphicControllerBinding
  public var @bool mHasHidden
}

#·······················································································································

override proc @outletClassDeclarationAST.enterInPrecedenceGraph (?!@declarationPrecedenceGraph ioGraph) {
  !?ioGraph.addNode (!self.mClassName, !self)
  if self.mSuperClassName.string != "" then
    !?ioGraph.addEdge (!self.mClassName, !self.mSuperClassName)
  end
}

#·······················································································································

override func @outletClassDeclarationAST.nodeKey() -> @lstring {
  result = self.mClassName
}

#-----------------------------------------------------------------------------------------------------------------------
#   SYNTAX
#-----------------------------------------------------------------------------------------------------------------------

syntax extension easyBindings_syntax {

  #·····················································································································
  
  rule <outlet_class_declaration> (?!@astDeclarationStruct ioDeclarationAST) {
    let @bool userDefined
    select
      $extern$
      userDefined = true
    or
      userDefined = false
    end
    $outlet$
    $class$
    $Identifier$ (?let @lstring outletClassName)
    let @lstring superClassName
    select
      superClassName = "".here ()
    or
      $:$
      $Identifier$ (?superClassName)
    end
    var @bool hasRunAction = false
    var @bool hasEnabled = false
    var @bool hasHidden = false
    var @bool handlesTableViewBinding = false
    var @bool handlesGraphicControllerBinding = false
    repeat
    while
      $tableValue$
      handlesTableViewBinding = true
    while
      $run$
      hasRunAction = true
    while
      $enabled$
      hasEnabled = true
    while
      $hidden$
      hasHidden = true
    while
      $graphicController$
      handlesGraphicControllerBinding = true
    end
    $;$
    ioDeclarationAST.mUnifiedDeclarationList += !@outletClassDeclarationAST (
      !outletClassName,
      !userDefined,
      !superClassName,
      !hasRunAction,
      !hasEnabled,
      !handlesTableViewBinding,
      !handlesGraphicControllerBinding,
      !hasHidden
    )
  }

  #·····················································································································

}

#-----------------------------------------------------------------------------------------------------------------------
#   SEMANTIC ANALYSIS                       
#-----------------------------------------------------------------------------------------------------------------------

override proc @outletClassDeclarationAST.firstAnalysisPhase(
       ?!@semanticContext ioSemanticContext,
       ?!@generationStruct unused ioGeneration)
{
  if self.mSuperClassName.string == "" then
    !?ioSemanticContext.mOutletClassMap.insertKey (
      !self.mClassName,
      !"".nowhere (),  # No super class
      !self.mHasRunAction,
      !self.mHandlesTableValueBinding,
      !self.mHasEnabled,
      !self.mHasHidden,
      !self.mHandlesGraphicControllerBinding,
      !self.mUserDefined
    )
  else
    [ioSemanticContext.mOutletClassMap searchKey
      !self.mSuperClassName,
      ?*,
      ?let hasRunAction,
      ?let handlesTableValueBinding,
      ?let hasEnabled,
      ?let hasHidden,
      ?let handlesGraphicControllerBinding,
      ?*
    ]
    if self.mHasRunAction & hasRunAction then
      error self.mClassName : "$run binding already defined in superclass"
    end
    if self.mHandlesTableValueBinding & handlesTableValueBinding then
      error self.mClassName : "$tableview binding already defined in superclass"
    end
    if self.mHasEnabled & hasEnabled then
      error self.mClassName : "$enabled binding already defined in superclass"
    end
    if self.mHasHidden & hasHidden then
      error self.mClassName : "$hidden binding already defined in superclass"
    end
    if self.mHandlesGraphicControllerBinding & handlesGraphicControllerBinding then
      error self.mClassName : "$graphicController binding already defined in superclass"
    end
    !?ioSemanticContext.mOutletClassMap.insertKey (
      !self.mClassName,
      !self.mSuperClassName,
      !self.mHasRunAction | hasRunAction,
      !self.mHandlesTableValueBinding | handlesTableValueBinding,
      !self.mHasEnabled | hasEnabled,
      !self.mHasHidden | hasHidden,
      !self.mHandlesGraphicControllerBinding | handlesGraphicControllerBinding,
      !self.mUserDefined
    )
  end
}

#-----------------------------------------------------------------------------------------------------------------------
#  SEMANTIC TYPE                          
#-----------------------------------------------------------------------------------------------------------------------

map @outletClassMap {
  public var @lstring mSuperClassName
  public var @bool mHandlesRunAction
  public var @bool mHandlesTableValueBinding
  public var @bool mHandleEnabledBinding
  public var @bool mHandleHiddenBinding
  public var @bool mHandleGraphicControllerBinding
  public var @bool mUserDefined
  insert insertKey error message "the '%K' outlet class is already declared in %L"
  search searchKey error message "there is no '%K' outlet class"
}

#-----------------------------------------------------------------------------------------------------------------------
