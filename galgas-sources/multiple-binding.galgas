#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   AST                                                                                                                *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

enum @multipleBindingDescriptor {
  case noEnabledBinding 
  case enabledBinding (@abstractBooleanMultipleBindingExpressionAST expression)
}

#......................................................................................................................*

enum @multipleBindingComparisonAST {
  case equal
  case notEqual
  case lower
  case lowerOrEqual
  case greater
  case greaterOrEqual
}

#......................................................................................................................*

abstract class @abstractBooleanMultipleBindingExpressionAST {
}

#......................................................................................................................*

class @literalIntMultipleBindingExpressionAST : @abstractBooleanMultipleBindingExpressionAST {
  @luint mValue
}

#......................................................................................................................*

class @negateBooleanMultipleBindingExpressionAST : @abstractBooleanMultipleBindingExpressionAST {
  @abstractBooleanMultipleBindingExpressionAST mBinding
}

#......................................................................................................................*

class @comparisonMultipleBindingExpressionAST : @abstractBooleanMultipleBindingExpressionAST {
  @abstractBooleanMultipleBindingExpressionAST mLeftBinding
  @multipleBindingComparisonAST mOperator
  @abstractBooleanMultipleBindingExpressionAST mRightBinding
}

#......................................................................................................................*

class @andBooleanMultipleBindingExpressionAST,
       @orBooleanMultipleBindingExpressionAST : @abstractBooleanMultipleBindingExpressionAST {
  @abstractBooleanMultipleBindingExpressionAST mLeftBinding
  @abstractBooleanMultipleBindingExpressionAST mRightBinding
}

#......................................................................................................................*

class @observablePropertyInMultipleBindingExpressionAST : @abstractBooleanMultipleBindingExpressionAST {
  @observablePropertyAST mProperty
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   SYNTAX                                                                                                             *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

syntax extension easyBindings_syntax {

  #....................................................................................................................*
  
  rule <booleanMultipleBindingExpression> 
    !@abstractBooleanMultipleBindingExpressionAST outBinding
  {
    <booleanMultipleBindingComparison> ?outBinding
    repeat
    while
      $&$
      <booleanMultipleBindingComparison> ?let @abstractBooleanMultipleBindingExpressionAST binding
      outBinding = @andBooleanMultipleBindingExpressionAST. new { !outBinding !binding}
    end
  }
  
  #....................................................................................................................*
  
  rule <booleanMultipleBindingComparison> 
    !@abstractBooleanMultipleBindingExpressionAST outBinding
  {
    <booleanMultipleBindingTerm> ?outBinding
    select
    or
      $>$
      <booleanMultipleBindingTerm> ?let rightBinding
      outBinding = @comparisonMultipleBindingExpressionAST.new {!outBinding !.greater !rightBinding}
    end
  }
  
  #....................................................................................................................*
  
  rule <booleanMultipleBindingTerm> 
    !@abstractBooleanMultipleBindingExpressionAST outBinding
  {
    <booleanMultipleBindingOperand> ?outBinding
    repeat
    while
      $|$
      <booleanMultipleBindingOperand> ?let @abstractBooleanMultipleBindingExpressionAST binding
      outBinding = @orBooleanMultipleBindingExpressionAST. new { !outBinding !binding}
    end
  }
  
  #....................................................................................................................*
  
  rule <booleanMultipleBindingOperand> 
    !@abstractBooleanMultipleBindingExpressionAST outBinding
  {
    <observable_property> ?let @observablePropertyAST observablePropertyAST
    outBinding = @observablePropertyInMultipleBindingExpressionAST.new { !observablePropertyAST}
  }
  
  #....................................................................................................................*
  
  rule <booleanMultipleBindingOperand> 
    !@abstractBooleanMultipleBindingExpressionAST outBinding
  {
    $!$
    <booleanMultipleBindingOperand> ?let @abstractBooleanMultipleBindingExpressionAST binding
    outBinding = @negateBooleanMultipleBindingExpressionAST. new { !binding}
  }
  
  #....................................................................................................................*
  
  rule <booleanMultipleBindingOperand> 
    !@abstractBooleanMultipleBindingExpressionAST outBinding
  {
    $($
    <booleanMultipleBindingExpression> ?outBinding
    $)$
  }

  #....................................................................................................................*
  
  rule <booleanMultipleBindingOperand> 
    !@abstractBooleanMultipleBindingExpressionAST outBinding
  {
    $literal_integer$ ?let value
    outBinding = @literalIntMultipleBindingExpressionAST.new {!value}
  }

  #....................................................................................................................*

}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   SEMANTIC TYPES                                                                                                     *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

list @multipleBindingGenerationList {
  @string mOutletName
  @string mBindingName
  @abstractBooleanMultipleBindingExpressionForGeneration mBoundObjectExpression
}

#......................................................................................................................*

abstract class @abstractBooleanMultipleBindingExpressionForGeneration {
}

#......................................................................................................................*

class @observablePropertyAsBooleanMultipleBindingExpressionForGeneration : @abstractBooleanMultipleBindingExpressionForGeneration {
  @string mObservedModel
}

#......................................................................................................................*

class @negateBooleanMultipleBindingLiteralIntForGeneration : @abstractBooleanMultipleBindingExpressionForGeneration {
  @uint mValue
}

#......................................................................................................................*

class @negateBooleanMultipleBindingExpressionForGeneration : @abstractBooleanMultipleBindingExpressionForGeneration {
  @abstractBooleanMultipleBindingExpressionForGeneration mBinding
}

#......................................................................................................................*

class @orBooleanMultipleBindingExpressionForGeneration,
       @andBooleanMultipleBindingExpressionForGeneration : @abstractBooleanMultipleBindingExpressionForGeneration {
  @abstractBooleanMultipleBindingExpressionForGeneration mLeftBinding
  @abstractBooleanMultipleBindingExpressionForGeneration mRightBinding
}

#......................................................................................................................*

class @comparisonMultipleBindingExpressionForGeneration : @abstractBooleanMultipleBindingExpressionForGeneration {
  @abstractBooleanMultipleBindingExpressionForGeneration mLeftBinding
  @multipleBindingComparisonAST mOperator
  @abstractBooleanMultipleBindingExpressionForGeneration mRightBinding
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   SEMANTIC                                                                                                           *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

abstract method @abstractBooleanMultipleBindingExpressionAST analyzeExpressionForMultipleBinding
  ?let @observablePropertyMap inRootObservablePropertyMap
  ?let @semanticContext inSemanticContext
  ?let @observablePropertyMap inCurrentObservablePropertyMap
  ?let @arrayControllerMap inArrayControllerMap
  !@abstractBooleanMultipleBindingExpressionForGeneration outEnableExpression
  !@typeKind outType
  !@location outErrorLocation

#......................................................................................................................*

override method @literalIntMultipleBindingExpressionAST analyzeExpressionForMultipleBinding
  ?let @observablePropertyMap unused inRootObservablePropertyMap
  ?let @semanticContext unused inSemanticContext
  ?let @observablePropertyMap unused inCurrentObservablePropertyMap
  ?let @arrayControllerMap unused inArrayControllerMap
  !@abstractBooleanMultipleBindingExpressionForGeneration outEnableExpression
  !@typeKind outType
  !@location outErrorLocation
{
  outEnableExpression = @negateBooleanMultipleBindingLiteralIntForGeneration.new {!mValue.uint}
  outType = .integerType
  outErrorLocation = mValue.location
}

#......................................................................................................................*

override method @observablePropertyInMultipleBindingExpressionAST analyzeExpressionForMultipleBinding
  ?let @observablePropertyMap inRootObservablePropertyMap
  ?let @semanticContext inSemanticContext
  ?let @observablePropertyMap inCurrentObservablePropertyMap
  ?let @arrayControllerMap inArrayControllerMap
  !@abstractBooleanMultipleBindingExpressionForGeneration outEnableExpression
  !@typeKind outType
  !@location outErrorLocation
{
  [mProperty analyzeObservableProperty
    !inRootObservablePropertyMap
    !inSemanticContext
    !inCurrentObservablePropertyMap
    !inArrayControllerMap
    ?outType
    ?let @propertyKind unused outKind
    ?let @propertyMultiplicity outMultiplicity
    ?let @string unused swiftTypeStringForTransientFunctionArgument
  ]
  if outMultiplicity == .collection then
    error [mProperty location] : "a collection cannot be observed"
  end
  switch outType
  case stringType, boolType, colorType, dateType, doubleType, integerType : # Ok
  case enumType (* *) : # Ok
  case entityType (*) :
    error [mProperty location] : "an entity cannot be observed"
  end
  outEnableExpression = @observablePropertyAsBooleanMultipleBindingExpressionForGeneration.new {
    ![mProperty modelString]
  }
  outErrorLocation = [mProperty location]
}

#......................................................................................................................*

override method @negateBooleanMultipleBindingExpressionAST analyzeExpressionForMultipleBinding
  ?let @observablePropertyMap inRootObservablePropertyMap
  ?let @semanticContext inSemanticContext
  ?let @observablePropertyMap inCurrentObservablePropertyMap
  ?let @arrayControllerMap inArrayControllerMap
  !@abstractBooleanMultipleBindingExpressionForGeneration outEnableExpression
  !@typeKind outType
  !@location outErrorLocation
{
  [mBinding analyzeExpressionForMultipleBinding
    !inRootObservablePropertyMap
    !inSemanticContext
    !inCurrentObservablePropertyMap
    !inArrayControllerMap
    ?var @abstractBooleanMultipleBindingExpressionForGeneration expression
    ?outType
    ?outErrorLocation
  ]
  if not [outType isBoolType] then
    error outErrorLocation : "cannot apply negation: operand is not boolean"
  end
  outEnableExpression = @negateBooleanMultipleBindingExpressionForGeneration.new {!expression}
}

#......................................................................................................................*

override method @orBooleanMultipleBindingExpressionAST analyzeExpressionForMultipleBinding
  ?let @observablePropertyMap inRootObservablePropertyMap
  ?let @semanticContext inSemanticContext
  ?let @observablePropertyMap inCurrentObservablePropertyMap
  ?let @arrayControllerMap inArrayControllerMap
  !@abstractBooleanMultipleBindingExpressionForGeneration outEnableExpression
  !@typeKind outType
  !@location outErrorLocation
{
  [mLeftBinding analyzeExpressionForMultipleBinding
    !inRootObservablePropertyMap
    !inSemanticContext
    !inCurrentObservablePropertyMap
    !inArrayControllerMap
    ?var @abstractBooleanMultipleBindingExpressionForGeneration leftExpression
    ?let outLeftType
    ?let outLeftLocation
  ]
  if not [outLeftType isBoolType] then
    error outLeftLocation : "cannot apply 'or': left operand is not boolean"
  end
  [mRightBinding analyzeExpressionForMultipleBinding
    !inRootObservablePropertyMap
    !inSemanticContext
    !inCurrentObservablePropertyMap
    !inArrayControllerMap
    ?var @abstractBooleanMultipleBindingExpressionForGeneration rightExpression
    ?let outRightType
    ?let outRightLocation
  ]
  if not [outRightType isBoolType] then
    error outRightLocation : "cannot apply 'or': right operand is not boolean"
  end
  outType = .boolType
  outErrorLocation = outRightLocation
  outEnableExpression = @orBooleanMultipleBindingExpressionForGeneration. new {!leftExpression !rightExpression}
}

#......................................................................................................................*

override method @andBooleanMultipleBindingExpressionAST analyzeExpressionForMultipleBinding
  ?let @observablePropertyMap inRootObservablePropertyMap
  ?let @semanticContext inSemanticContext
  ?let @observablePropertyMap inCurrentObservablePropertyMap
  ?let @arrayControllerMap inArrayControllerMap
  !@abstractBooleanMultipleBindingExpressionForGeneration outEnableExpression
  !@typeKind outType
  !@location outErrorLocation
{
  [mLeftBinding analyzeExpressionForMultipleBinding
    !inRootObservablePropertyMap
    !inSemanticContext
    !inCurrentObservablePropertyMap
    !inArrayControllerMap
    ?var @abstractBooleanMultipleBindingExpressionForGeneration leftExpression
    ?let outLeftType
    ?let outLeftLocation
  ]
  if not [outLeftType isBoolType] then
    error outLeftLocation : "cannot apply 'and': left operand is not boolean"
  end
  [mRightBinding analyzeExpressionForMultipleBinding
    !inRootObservablePropertyMap
    !inSemanticContext
    !inCurrentObservablePropertyMap
    !inArrayControllerMap
    ?var @abstractBooleanMultipleBindingExpressionForGeneration rightExpression
    ?let outRightType
    ?let outRightLocation
  ]
  if not [outRightType isBoolType] then
    error outRightLocation : "cannot apply 'and': right operand is not boolean"
  end
  outType = .boolType
  outErrorLocation = outRightLocation
  outEnableExpression = @andBooleanMultipleBindingExpressionForGeneration. new {!leftExpression !rightExpression}
}

#......................................................................................................................*

override method @comparisonMultipleBindingExpressionAST analyzeExpressionForMultipleBinding
  ?let @observablePropertyMap inRootObservablePropertyMap
  ?let @semanticContext inSemanticContext
  ?let @observablePropertyMap inCurrentObservablePropertyMap
  ?let @arrayControllerMap inArrayControllerMap
  !@abstractBooleanMultipleBindingExpressionForGeneration outEnableExpression
  !@typeKind outType
  !@location outErrorLocation
{
  [mLeftBinding analyzeExpressionForMultipleBinding
    !inRootObservablePropertyMap
    !inSemanticContext
    !inCurrentObservablePropertyMap
    !inArrayControllerMap
    ?var @abstractBooleanMultipleBindingExpressionForGeneration leftExpression
    ?let outLeftType
    ?let outLeftLocation
  ]
  [mRightBinding analyzeExpressionForMultipleBinding
    !inRootObservablePropertyMap
    !inSemanticContext
    !inCurrentObservablePropertyMap
    !inArrayControllerMap
    ?var @abstractBooleanMultipleBindingExpressionForGeneration rightExpression
    ?let outRightType
    ?let outRightLocation
  ]
  if not ([outLeftType isBoolType] || [outLeftType isIntegerType]) then
    error outLeftLocation : "cannot compare: left operand is neither boolean nor integer"
  end
  if outRightType != outLeftType then
    error outRightLocation : "cannot compare: right operand type is different than left operand type"
  end
  outType = .boolType
  outErrorLocation = outRightLocation
  outEnableExpression = @comparisonMultipleBindingExpressionForGeneration. new {
    !leftExpression
    !mOperator
    !rightExpression
  }
}

#......................................................................................................................*

abstract getter @abstractBooleanMultipleBindingExpressionForGeneration observedModelSet
  -> @stringset outObservedModelSet

#......................................................................................................................*

override getter @negateBooleanMultipleBindingLiteralIntForGeneration observedModelSet
  -> @stringset outObservedModelSet
{
  outObservedModelSet = {}
}

#......................................................................................................................*

override getter @observablePropertyAsBooleanMultipleBindingExpressionForGeneration observedModelSet
  -> @stringset outObservedModelSet
{
  outObservedModelSet = {!mObservedModel}
}

#......................................................................................................................*

override getter @negateBooleanMultipleBindingExpressionForGeneration observedModelSet
  -> @stringset outObservedModelSet
{
  outObservedModelSet = [mBinding observedModelSet]
}

#......................................................................................................................*

override getter @orBooleanMultipleBindingExpressionForGeneration observedModelSet
  -> @stringset outObservedModelSet
{
  outObservedModelSet = {[mLeftBinding observedModelSet], [mRightBinding observedModelSet]}
}

#......................................................................................................................*

override getter @andBooleanMultipleBindingExpressionForGeneration observedModelSet
  -> @stringset outObservedModelSet
{
  outObservedModelSet = {[mLeftBinding observedModelSet], [mRightBinding observedModelSet]}
}

#......................................................................................................................*

override getter @comparisonMultipleBindingExpressionForGeneration observedModelSet
  -> @stringset outObservedModelSet
{
  outObservedModelSet = {[mLeftBinding observedModelSet], [mRightBinding observedModelSet]}
}

#......................................................................................................................*

abstract getter @abstractBooleanMultipleBindingExpressionForGeneration expressionString
  -> @string outExpressionString

#......................................................................................................................*

override getter @negateBooleanMultipleBindingLiteralIntForGeneration expressionString
  -> @string outExpressionString {
  outExpressionString = [mValue string]
}

#......................................................................................................................*

override getter @observablePropertyAsBooleanMultipleBindingExpressionForGeneration expressionString
  -> @string outExpressionString {
  outExpressionString = mObservedModel + ".prop.0"
}

#......................................................................................................................*

override getter @negateBooleanMultipleBindingExpressionForGeneration expressionString
  -> @string outExpressionString {
  outExpressionString = "!" + [mBinding expressionString]
}

#......................................................................................................................*

override getter @orBooleanMultipleBindingExpressionForGeneration expressionString
  -> @string outExpressionString {
  outExpressionString = "(" + [mLeftBinding expressionString] +  " || " + [mRightBinding expressionString] + ")"
}

#......................................................................................................................*

override getter @andBooleanMultipleBindingExpressionForGeneration expressionString
  -> @string outExpressionString {
  outExpressionString = "(" + [mLeftBinding expressionString] +  " && " + [mRightBinding expressionString] + ")"
}

#......................................................................................................................*

override getter @comparisonMultipleBindingExpressionForGeneration expressionString
  -> @string outExpressionString {
  outExpressionString = "(" + [mLeftBinding expressionString] + " "
  switch mOperator
  case equal : outExpressionString += "=="
  case notEqual : outExpressionString += "!="
  case lower : outExpressionString += "<"
  case lowerOrEqual : outExpressionString += "<="
  case greater : outExpressionString += ">"
  case greaterOrEqual : outExpressionString += ">="
  end
  outExpressionString += " " + [mRightBinding expressionString] + ")"
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
