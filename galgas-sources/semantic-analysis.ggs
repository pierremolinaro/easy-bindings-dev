//----------------------------------------------------------------------------------------------------------------------
#   SEMANTIC TYPES                        
//----------------------------------------------------------------------------------------------------------------------

enum @classKind {
  case prefs
  case atomic (@typeKind kind)
  case document (@lstring rootEntityName)
  case entity (@string superEntityName, @bool isGraphic, @bool isAbstract, @bool handlingOpposite)
}

#·······················································································································

abstract class @propertyGeneration {
  public var @string mPropertyName
}

#·······················································································································

func @propertyGeneration.prefKeyDefinitionCode() -> @string { result = "" }

#·······················································································································

func @propertyGeneration.declarationInSelectionControllerCode() -> @string { result = "" }

#·······················································································································

func @propertyGeneration.bindPropertyInSelectionController() -> @string { result = "" }

#·······················································································································

abstract func @propertyGeneration.propertyDeclarationCode (let @bool inPreferences,
                                                           let @bool inGenerationDirectAccess,
                                                           let @stringset inOverriddenTransients) -> @string

#·······················································································································

abstract func @propertyGeneration.configurationCode (let @bool inPreferences) -> @string

#·······················································································································

abstract func @propertyGeneration.initCode() -> @string

#·······················································································································

#func @propertyGeneration.setupAtomicPropertyFromDictionaryCode() -> @string { result = "" }

#·······················································································································

func @propertyGeneration.setupRelationshipFromDictionaryCode() -> @string { result = "" }

#·······················································································································

#func @propertyGeneration.saveIntoDictionaryCode() -> @string { result = "" }

#·······················································································································

func @propertyGeneration.objectAccessibilityCodeForSaveOperation() -> @string { result = "" }

#·······················································································································

func @propertyGeneration.populateExplorerWindowCode() -> @string { result = "" }

#·······················································································································

#func @propertyGeneration.clearObjectExplorerCode() -> @string { result = "" }

#·······················································································································

func @propertyGeneration.resetToManyRelationships() -> @string { result = "" }

#·······················································································································

list @propertyGenerationList {
  public var @propertyGeneration mProperty
}

#·······················································································································

map @classMap {
  public let @classKind mClassKind
  public let @propertyMap mPropertyMap
  public let @actionMap mActionMap
  public let @propertyGenerationList mPropertyGenerationList
  %insertSetter insertKey %errorMessage "the '%K' class is already declared in %L"
  %searchMethod searchKey %errorMessage "there is no '%K' class"
}

#·······················································································································

enum @propertyAccessibility {
  case stored
  case computed
  case transient (@bool isAbstract)
}

#·······················································································································

enum @typeKind %equatable {
  case boolType 
  case integerType 
  case uint32Type 
  case doubleType
  case stringType 
  case dataType
  case dateType
  case fontType
  case colorType
  case bezierPathType
  case bezierPathArrayType
  case enumType (@string enumTypeName, @enumConstantMap constantMap, @enumFuncMap funcMap)
  case entityType (@string entityName, @bool graphic)
  case classType (@string className)
  case transientPropertyExternType (@string externTypeName)
}

#·······················································································································

enum @propertyKind {
  case property (@typeKind type, @propertyAccessibility accessibility)
  case toMany (@lstring typeName, @propertyAccessibility accessibility, @bool graphic, @toManyRelationshipOptionAST optionKind)
  case toOne (@lstring typeName,
              @propertyAccessibility accessibility,
              @bool graphic,
              @toOneOppositeRelationship opposite,
              @bool weak)
  case arrayController (@lstring typeName, @bool graphic)
  case selectionController (@string typeName)
}

#·······················································································································

map @propertyMap {
  public var @propertyKind mKind
  public var @actionMap mActionMap
  public var @bool mIsOverriding
  %insertSetter insertKey %errorMessage "the '%K' property is already declared in %L"
  %searchMethod searchKey %errorMessage "there is no '%K' property"
}

#·······················································································································

func @propertyMap.@element.isAbstract() -> @bool {
  result = false
  if let prop = self.mKind.getProperty then
    if prop.accessibility.isTransient then
      prop.accessibility.extractTransient (?isAbstract: let ab)
      result = ab
    end
  end
}

//----------------------------------------------------------------------------------------------------------------------
