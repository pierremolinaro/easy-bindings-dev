#-----------------------------------------------------------------------------------------------------------------------
#   AST   
#-----------------------------------------------------------------------------------------------------------------------

enum @toManyRelationshipOptionAST {
  case none
  case hasOpposite (@lstring oppositeName)
  case hasDependance (@lstring masterPropertyName)
}

#·······················································································································

class @toManyRelationshipAST : @abstractDeclarationAST {
  @lstring mDestinationEntityName
  @lstring mToManyRelationshipName
  @toManyRelationshipOptionAST mOption
  @bool mCustomStore
  @bool mUsedForSignature
}

#·······················································································································

override method @toManyRelationshipAST enterInPrecedenceGraph ?!@declarationPrecedenceGraph ioGraph {
  let node = @lstring.new {!self.mClassName.string + " " + self.mToManyRelationshipName !self.mToManyRelationshipName.location}
  [!?ioGraph addNode !node !self]
  [!?ioGraph addEdge !node !self.mClassName]
  [!?ioGraph addEdge !node !self.mDestinationEntityName]
  switch self.mOption
  case hasDependance (masterPropertyName) :
    let dependanceNode = @lstring.new {!self.mClassName.string + " " + masterPropertyName !masterPropertyName.location}
    [!?ioGraph addEdge !node !dependanceNode]
  case hasOpposite (*) :
  case none :
  end
}

#·······················································································································

override getter @toManyRelationshipAST nodeKey -> @lstring {
  result = @lstring.new {!self.mClassName.string + " " + self.mToManyRelationshipName !self.mToManyRelationshipName.location}
}

#-----------------------------------------------------------------------------------------------------------------------
#   SYNTAX
#-----------------------------------------------------------------------------------------------------------------------

syntax extension easyBindings_syntax {

  #·····················································································································
  
  rule <toMany_relationship>
            ?let @lstring inCurrentEntity
            ?!@stringset ioSignatureList
            ?!@astDeclarationStruct ioDeclarationAST
  {
    $toMany$
    @bool usedForSignature = false
    @bool customStore = false
    repeat
    while
      $@attribute$ ?let attributeName
      if attributeName.string == "signature" then
        if usedForSignature then
          error attributeName : "duplicated attribute" fixit { remove }
        end
        usedForSignature = true
      elsif attributeName.string == "customStore" then
        if customStore then
          error attributeName : "duplicated attribute" fixit { remove }
        end
        customStore = true
      else
        error attributeName : "unknow attribute" fixit { replace "@signature" replace "@customStore" }
      end
    end
    $Identifier$ ?let destinationEntityName
    $identifier$ ?let relationshipName
    if usedForSignature then
      ioSignatureList += !relationshipName.string
    end
    @toManyRelationshipOptionAST toManyRelationshipOption
    select
      $inverse$
      $toOne$
      $identifier$ ?let inserseRelationshipName
      toManyRelationshipOption = .hasOpposite {!oppositeName: inserseRelationshipName}
    or
      $dependsFrom$
      $self$
      $.$
      $identifier$ ?let masterPropertyName
      toManyRelationshipOption = .hasDependance {!masterPropertyName: masterPropertyName}
   or
      toManyRelationshipOption = .none
    end
    $;$
    ioDeclarationAST.mUnifiedDeclarationList += !@toManyRelationshipAST.new {
      !inCurrentEntity
      !destinationEntityName
      !relationshipName
      !toManyRelationshipOption
      !customStore
      !usedForSignature
    }
  }
  
  #·····················································································································

}

#-----------------------------------------------------------------------------------------------------------------------
#   CLASS AND PROPERTY SEMANTIC ANALYSIS                       
#-----------------------------------------------------------------------------------------------------------------------

override method @toManyRelationshipAST firstAnalysisPhase
       ?!@semanticContext ioSemanticContext
       ?!@generationStruct unused ioGeneration
{
  with self.mClassName in !?ioSemanticContext.mClassMap 
    error message searchKey
  do
    [ioSemanticContext.mClassMap searchKey !self.mDestinationEntityName ?let classKind ?3*]
    switch classKind
    case prefs :
      error self.mDestinationEntityName : "an entity is required here"
    case atomic (*) :
      error self.mDestinationEntityName : "an entity is required here"
    case document (*) :
      error self.mDestinationEntityName : "an entity is required here"
    case entity (* graphic *) :
      let kind = @propertyKind.toMany {
        !typeName: self.mDestinationEntityName
        !accessibility: .stored
        !graphic: graphic
        !optionKind: self.mOption
      }
      [!?mPropertyMap insertKey !self.mToManyRelationshipName !kind !{} !false]
    #--- Current class is preferences ?
      let inPrefs = self.mClassName.string == preferencesName ()
    #--- Option
      @toManyRelationshipOptionGeneration optionForGeneration
      switch self.mOption
      case hasDependance (masterPropertyName) :
        [mPropertyMap searchKey !masterPropertyName ?let masterPropertyKind ?2*]
        optionForGeneration = .hasDependance {
          !masterPropertyName: masterPropertyName.string
          !masterPropertySwiftTypeName: [masterPropertyKind swiftTypeName]
        }
      case hasOpposite (oppositeName) :
        optionForGeneration = .hasOpposite {!oppositeName: oppositeName.string}
      case none :
        optionForGeneration = .none
      end
    #--- Code Generation
      mPropertyGenerationList += !@toManyPropertyGeneration.new {
        !self.mToManyRelationshipName.string
        !kind
        !optionForGeneration
        !inPrefs
        !self.mCustomStore
        !self.mUsedForSignature
      }
    end
  end
}

#·······················································································································

enum @toManyRelationshipOptionGeneration {
  case none
  case hasOpposite (@string oppositeName)
  case hasDependance (@string masterPropertyName @string masterPropertySwiftTypeName)
}

#·······················································································································

class @toManyPropertyGeneration : @propertyGeneration {
  @propertyKind mRelationshipType
  @toManyRelationshipOptionGeneration mOption
  @bool mInPreferences
  @bool mCustomStore
  @bool mUsedForSignature
}

#·······················································································································

list @toManyPropertyGenerationList {
  @toManyPropertyGeneration mProperty
}

#·······················································································································

override getter @toManyPropertyGeneration propertyDeclarationCode
   ?let @bool unused inPreferences
   ?let @stringset unused inOverriddenTransients -> @string
{
  if [self.mOption isHasDependance] then
    result  = "  //" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n"
    result += "  //   To many property: " + self.mPropertyName + "\n"
    result += "  //" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n\n"
    [self.mOption hasDependance ?1* ?masterPropertySwiftTypeName: let masterPropertyTypeName]
    result += "  final let " + self.mPropertyName + "_property = TransientArrayOfSuperOf_" + [self.mRelationshipType swiftTypeName]
           + " <" + masterPropertyTypeName + "> ()\n\n"
    result += "  //" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n\n"
    result += "  final var " + self.mPropertyName + " : [" + [self.mRelationshipType swiftTypeName] + "] {\n"
    result += "    get { return self." + self.mPropertyName + "_property.propval }\n"
    if not [self.mOption isHasDependance] then
      result += "    set { self." + self.mPropertyName + "_property.setProp (newValue) }\n"
    end
    result += "  }\n\n"
  elsif self.mInPreferences then
    result  = "//" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n"
    result += "//   To many property: " + self.mPropertyName + "\n"
    result += "//" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n\n"
    result += "  let preferences_" + self.mPropertyName + "_property = PreferencesArrayOf_" + [self.mRelationshipType swiftTypeName]
    result += " (prefKey: Preferences_" + self.mPropertyName + ")\n\n"
   result += "//" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n\n"
    result += "  var preferences_" + self.mPropertyName + " : [" + [self.mRelationshipType swiftTypeName] + "] {\n"
    result += "    get { return preferences_" + self.mPropertyName + "_property.propval }\n"
    if not [self.mOption isHasDependance] then
      result += "    set { preferences_" + self.mPropertyName + "_property.setProp (newValue) }\n"
    end
    result += "  }\n\n"
  else
    result  = "  //" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n"
    result += "  //   To many property: " + self.mPropertyName + "\n"
    result += "  //" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n\n"
    result += "  final let " + self.mPropertyName + "_property = StoredArrayOf_" + [self.mRelationshipType swiftTypeName]
    result += " (usedForSignature: " + [self.mUsedForSignature cString] + ")\n\n"
    result += "  //" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n\n"
    result += "  //" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n\n"
    result += "  final var " + self.mPropertyName + " : [" + [self.mRelationshipType swiftTypeName] + "] {\n"
    result += "    get { return self." + self.mPropertyName + "_property.propval }\n"
    if not [self.mOption isHasDependance] then
      result += "    set { self." + self.mPropertyName + "_property.setProp (newValue) }\n"
    end
    result += "  }\n\n"
  end
}

#·······················································································································

override getter @toManyPropertyGeneration initCode -> @string {
  result = ""
}

#·······················································································································

override getter @toManyPropertyGeneration prefKeyDefinitionCode -> @string {
  result = "let Preferences_" + self.mPropertyName + " = \"Preferences:" + self.mPropertyName + "\"\n"
}

#·······················································································································

override getter @toManyPropertyGeneration configurationCode ?let @bool inPreferences -> @string {
  let prefix = if inPreferences then "preferences_" else "self." end
  switch self.mOption
  case none :
    result  = "  //--- To many property: " + self.mPropertyName + " (no option)\n"
    result += "    " + prefix + self.mPropertyName + "_property.ebUndoManager = self.ebUndoManager\n"
  case hasDependance (2*) :
    result = ""
  case hasOpposite (@string oppositeName) :
    result  = "  //--- To many property: " + self.mPropertyName + " (has opposite relationship)\n"
    result += "    " + prefix + self.mPropertyName + "_property.ebUndoManager = self.ebUndoManager\n"
    result += "    " + prefix + self.mPropertyName + "_property.setOppositeRelationShipFunctions (\n"
    result += "      setter: { [weak self] inObject in if let me = self { inObject." + oppositeName + "_property.setProp (me) } },\n"
    result += "      resetter: { inObject in inObject." + oppositeName + "_property.setProp (nil) }\n"
    result += "    )\n"
  end
}

#·······················································································································

override getter @toManyPropertyGeneration setupRelationshipFromDictionaryCode -> @string {
  if [self.mOption isHasDependance] then
    result = ""
  elsif self.mCustomStore then
    result  = "  //--- To many property: " + self.mPropertyName + " (Custom store)\n"
    result += "    self." + self.mPropertyName + "_property.setProp (customRead_" + [self.mRelationshipType swiftTypeName] + "_" + self.mPropertyName + " (from: inDictionary, with: self.ebUndoManager))\n"
  else
    result  = "  //--- To many property: " + self.mPropertyName + "\n"
    result += "    self." + self.mPropertyName + "_property.setProp (readEntityArrayFromDictionary (\n"
    result += "      inRelationshipName: \"" + self.mPropertyName + "\",\n"
    result += "      inDictionary: inDictionary,\n"
    result += "      managedObjectArray: &managedObjectArray\n"
    result += "    ) as! [" + [self.mRelationshipType swiftTypeName] + "])\n"
  end
}

#·······················································································································

override getter @toManyPropertyGeneration saveIntoDictionaryCode -> @string {
  if [self.mOption isHasDependance] then
    result = ""
  elsif self.mCustomStore then
    result  = "  //--- To many property: " + self.mPropertyName + " (Custom store)\n"
    result += "    customStore_" + [self.mRelationshipType swiftTypeName] + "_" + self.mPropertyName + " (self." + self.mPropertyName + "_property.propval, intoDictionary: ioDictionary)\n"
  else
    result  = "  //--- To many property: " + self.mPropertyName + "\n"
    result += "    self.store (\n"
    result += "      managedObjectArray: self." + self.mPropertyName + "_property.propval,\n"
    result += "      relationshipName: \"" + self.mPropertyName + "\",\n"
    result += "      intoDictionary: ioDictionary\n"
    result += "    )\n"
  end
}

#·······················································································································

override getter @toManyPropertyGeneration objectAccessibilityCode -> @string {
  result  = "  //--- To many property: " + self.mPropertyName + "\n"
  result += "    for managedObject in self." + self.mPropertyName + " {\n"
  result += "      objects.append (managedObject)\n"
  result += "    }\n"
}
#·······················································································································

override getter @toManyPropertyGeneration objectAccessibilityCodeForSaveOperation -> @string {
  if self.mCustomStore then
    result  = "  //--- To many property: " + self.mPropertyName + " (custom store)\n"
    result += "    /* for managedObject in self." + self.mPropertyName + "_property.propval {\n"
    result += "      objects.append (managedObject)\n"
    result += "    } */\n"
  else
    result  = "  //--- To many property: " + self.mPropertyName + "\n"
    result += "    for managedObject in self." + self.mPropertyName + " {\n"
    result += "      objects.append (managedObject)\n"
    result += "    }\n"
  end
}

#·······················································································································

override getter @toManyPropertyGeneration clearObjectExplorerCode -> @string {
  if [self.mOption isHasDependance] then
    result = ""
  else
    result  = "  //--- To many property: " + self.mPropertyName + "\n"
    result += "    self." + self.mPropertyName + "_property.mValueExplorer = nil\n"
  end
}

#·······················································································································

override getter @toManyPropertyGeneration resetToManyRelationships -> @string {
  if [self.mOption isHasDependance] then
    result = ""
  else
    result  = "  //--- To many property: " + self.mPropertyName + "\n"
    result += "    self." + self.mPropertyName + "_property.setProp ([])\n"
  end
}
#·······················································································································

override getter @toManyPropertyGeneration terminationCode ?let @bool unused inPreferences -> @string {
  switch self.mOption 
  case hasDependance (masterPropertyName *) :
    result  = "  //--- To many property: " + self.mPropertyName + "\n"
    result += "    self." + masterPropertyName + "_property.removeEBObserver (self." + self.mPropertyName + "_property)\n"
  case none :
    result = ""
  case hasOpposite (*) :
    result = ""
  end
}

#-----------------------------------------------------------------------------------------------------------------------
