#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST   
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @toManyRelationshipAST : @abstractDeclarationAST {
  @lstring mDestinationEntityName
  @lstring mToManyRelationshipName
  @lstring mOppositeRelationshipName
  @bool mCascading
}

#·······················································································································

override method @toManyRelationshipAST enterInPrecedenceGraph ?!@declarationPrecedenceGraph ioGraph {
  let node = @lstring.new {!mClassName.string + " " + mToManyRelationshipName !mToManyRelationshipName.location}
  [!?ioGraph addNode !node !self]
  [!?ioGraph addEdge !node !mClassName]
  [!?ioGraph addEdge !node !mDestinationEntityName]
}

#·······················································································································

override getter @toManyRelationshipAST lkey -> @lstring {
  result = @lstring.new {!mClassName.string + " " + mToManyRelationshipName !mToManyRelationshipName.location}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension easyBindings_syntax {

  #·····················································································································
  
  rule <toMany_relationship>
            ?let @lstring inCurrentEntity
            ?!@stringset ioSignatureList
            ?!@astDeclarationStruct ioDeclarationAST
  {
    $toMany$
    @bool usedForSignature = false
    @bool cascading = false
    repeat
    while
      $@attribute$ ?let attributeName
      if attributeName.string == "signature" then
        if usedForSignature then
          error attributeName : "duplicated attribute" fixit { remove }
        end
        usedForSignature = true
      elsif attributeName.string == "cascading" then
        if cascading then
          error attributeName : "duplicated attribute" fixit { remove }
        end
        cascading = true
      else
        error attributeName : "unknow attribute" fixit { replace "@signature" replace "@cascading" }
      end
    end
    $Identifier$ ?let destinationEntityName
    $identifier$ ?let relationshipName
    if usedForSignature then
      ioSignatureList += !relationshipName.string
    end
    @lstring inserseRelationshipName
    select
      $inverse$
      $toOne$
      $identifier$ ?inserseRelationshipName
    or
      inserseRelationshipName = .new {!"" !relationshipName.location}
    end
    $;$
    ioDeclarationAST.mUnifiedDeclarationList += !@toManyRelationshipAST.new {
      !inCurrentEntity
      !destinationEntityName
      !relationshipName
      !inserseRelationshipName
      !cascading
    }
  }
  
  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   CLASS AND PROPERTY SEMANTIC ANALYSIS                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @toManyRelationshipAST firstAnalysisPhase
       ?!@semanticContext ioSemanticContext
       ?!@generationStruct unused ioGeneration
{
  with mClassName in !?ioSemanticContext.mClassMap 
    error message searchKey
  do
    [ioSemanticContext.mClassMap searchKey !mDestinationEntityName ?let classKind ?3*]
    switch classKind
    case prefs :
      error mDestinationEntityName : "an entity is required here"
    case simpleClass :
      error mDestinationEntityName : "an entity is required here"
    case atomic (*) :
      error mDestinationEntityName : "an entity is required here"
    case document (*) :
      error mDestinationEntityName : "an entity is required here"
    case entity (* graphic *) :
      let kind = @propertyKind.toMany {
        !typeName: mDestinationEntityName
        !accessibility: .stored
        !graphic: graphic
        !isEntity: true
      }
      [!?mPropertyMap insertKey !mToManyRelationshipName !kind !{}]
    #--- Code Generation
      mPropertyGenerationList += !@toManyPropertyGeneration.new {
        !mToManyRelationshipName.string
        !kind
        !mOppositeRelationshipName
        !mCascading
      }
    end
  end
}

#·······················································································································

class @toManyPropertyGeneration : @propertyGeneration {
  @propertyKind mRelationshipType
  @string mOppositeRelationshipName
  @bool mCascading
}

#·······················································································································

list @toManyPropertyGenerationList {
  @toManyPropertyGeneration mProperty
}

#·······················································································································

override getter @toManyPropertyGeneration declarationCode ?let @stringset unused inOverriddenTransients -> @string {
  result  = "  //" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n"
  result += "  //   To many property: " + mPropertyName + "\n"
  result += "  //" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n\n"
  result += "  var " + mPropertyName + "_property = StoredArrayOf_" + [mRelationshipType swiftTypeName] + " ()\n\n"
  result += "  //" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n"
  result += "  var " + mPropertyName + "_property_selection : EBSelection < [" + [mRelationshipType swiftTypeName] + "] > {\n"
  result += "      return self." + mPropertyName + "_property.prop\n"
  result += "  }\n\n"
}

#·······················································································································

override getter @toManyPropertyGeneration configurationCode -> @string {
  result  = "  //--- To many property: " + mPropertyName + "\n"
  result += "    self." + mPropertyName + "_property.undoManager = self.undoManager\n"
  if mOppositeRelationshipName != "" then
    result += "    self." + mPropertyName + "_property.setOppositeRelationship ="
            + " { [weak self] (_ inManagedObject :" + [mRelationshipType swiftTypeName] + "?) in\n"
    result += "      inManagedObject?." + mOppositeRelationshipName + "_property.setProp (self)\n"
    result += "    }\n"
  end
}

#·······················································································································

override getter @toManyPropertyGeneration setupFromDictionaryCode -> @string {
  result  = "  //--- To many property: " + mPropertyName + "\n"
  result += "    self." + mPropertyName + "_property.setProp (readEntityArrayFromDictionary (\n"
  result += "      inRelationshipName: \"" + mPropertyName + "\",\n"
  result += "      inDictionary: inDictionary,\n"
  result += "      managedObjectArray: &managedObjectArray\n"
  result += "    ) as! [" + [mRelationshipType swiftTypeName] + "])\n"
}

#·······················································································································

override getter @toManyPropertyGeneration saveIntoDictionaryCode -> @string {
  result  = "  //--- To many property: " + mPropertyName + "\n"
  result += "    self.store (\n"
  result += "      managedObjectArray: " + mPropertyName + "_property.propval as NSArray,\n"
  result += "      relationshipName: \"" + mPropertyName + "\",\n"
  result += "      intoDictionary: ioDictionary\n"
  result += "    )\n"
}

#·······················································································································

override getter @toManyPropertyGeneration objectAccessibilityCode -> @string {
  result  = "  //--- To many property: " + mPropertyName + "\n"
  result += "    for managedObject : EBManagedObject in self." + mPropertyName + "_property.propval {\n"
  result += "      objects.append (managedObject)\n"
  result += "    }\n"
}

#·······················································································································

override getter @toManyPropertyGeneration clearObjectExplorerCode -> @string {
  result  = "  //--- To many property: " + mPropertyName + "\n"
  result += "    self." + mPropertyName + "_property.mValueExplorer = nil\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
