#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @classDeclarationEX : @astDeclaration {
  @lstring mClassName
  @simpleStoredPropertyList mSimpleStoredAttributeList
  @secondaryPropertyList mSecondaryPropertyList
  @externSwiftFunctionList mExternSwiftFunctionList
  @externSwiftDelegateList mExternSwiftDelegateList
  @lstringlist mActionDeclarationList
}

#·······················································································································

class @classDeclarationAST : @abstractDeclarationAST {
  @bool mIsUserDefined
  @simpleStoredPropertyList mSimpleStoredAttributeList
  @secondaryPropertyList mSecondaryPropertyList
  @externSwiftFunctionList mExternSwiftFunctionList
  @externSwiftDelegateList mExternSwiftDelegateList
  @lstringlist mActionDeclarationList
}

#·······················································································································

override method @classDeclarationAST enterInPrecedenceGraph ?!@declarationPrecedenceGraph ioGraph {
  [!?ioGraph addNode !mClassName !self]
}

#·······················································································································

override getter @classDeclarationAST lkey -> @lstring {
  result = mClassName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension easyBindings_syntax {

  #·····················································································································
  
  rule <class_declaration>
    ?let @bool inIsUserDefined
    ?!@astDeclarationStruct ioDeclarationAST
  {
    $class$
    $Identifier$ ?let @lstring entityName
    ${$
    @secondaryPropertyList secondaryPropertyList = {}
    @simpleStoredPropertyList simpleStoredAttributeList = {}
    @toOneRelationshipListEX toOneRelationshipList = {}
    @toManyRelationshipListEX toManyRelationshipList = {}
    @stringset signatureList = {}
    @externSwiftFunctionList externSwiftFunctionList = {}
    @externSwiftDelegateList externSwiftDelegateList = {}
    @lstringlist actionDeclarationList = {}
    repeat
    while
      <simple_stored_declaration> !entityName !?simpleStoredAttributeList !?signatureList !?ioDeclarationAST
    while
      <transient_declaration> !entityName !["" nowhere] !?secondaryPropertyList !?ioDeclarationAST
    while
      <extern_swift_func> !?externSwiftFunctionList
    while
      <extern_swift_delegate> !?externSwiftDelegateList
    while
      <action_declaration> !?actionDeclarationList
    end
    $}$
    ioDeclarationAST.mDeclarationList += !@classDeclarationEX.new {
      !inIsUserDefined
      !entityName
      !simpleStoredAttributeList
      !secondaryPropertyList
      !externSwiftFunctionList
      !externSwiftDelegateList
      !actionDeclarationList
    }
    ioDeclarationAST.mUnifiedDeclarationList += !@classDeclarationAST.new {
      !entityName
      !inIsUserDefined
      !simpleStoredAttributeList
      !secondaryPropertyList
      !externSwiftFunctionList
      !externSwiftDelegateList
      !actionDeclarationList
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   CLASS AND PROPERTY SEMANTIC ANALYSIS                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @classDeclarationAST firstAnalysisPhase
       ?!@semanticContext ioSemanticContext
       ?!@generationStruct unused ioGeneration
{
  buildActionMap (!mActionDeclarationList ?let @actionMap actionMap)
  [!?ioSemanticContext.mClassMap insertKey
    !mClassName
    !.simpleClass
    !{}
    !actionMap
    !{}
  ]
}

#·······················································································································

override method @classDeclarationAST thirdAnalysisPhase
       ?!@semanticContext ioSemanticContext
       ?!@generationStruct ioGeneration
{
  [ioSemanticContext.mClassMap searchKey
    !mClassName
    ?3*
    ?let @propertyGenerationList propertyGenerationList
  ]
#--- Check extern declarations
  for () in mExternSwiftFunctionList do
    if not [externSwiftFunctionCallerSet () hasKey !mCallerName.string] then
      var m = "allowed here:"
      for s in externSwiftFunctionCallerSet ()
        do m += " '" + s + "'"
        between m += ","
      end
      error mCallerName : m
    end
  end
#--- Check declared actions are unique
  @actionMap actionMap = {}
  for (actionName) in mActionDeclarationList do
    [!?actionMap insertKey !actionName]
    ioGeneration.mActionListForGeneration += !mClassName.string !actionName.string
  end
#--- Generation
  ioGeneration.mFileGenerationList += !@classForGeneration.new {
    !mClassName.string
    !propertyGenerationList
    !mExternSwiftFunctionList
    !mExternSwiftDelegateList
  }
}









#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   TYPE INVENTORY
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @classDeclarationEX typeInventory
  ?!@unifiedTypeMap ioUnifiedTypeMap
{
  [mSimpleStoredAttributeList typeInventory !?ioUnifiedTypeMap]
  for (item) in mSecondaryPropertyList do
    [item typeInventory !?ioUnifiedTypeMap]
  end
  @actionMap actionMap = {}
  for (act) in mActionDeclarationList do
    [!?actionMap insertKey !act]
  end
  [!?ioUnifiedTypeMap insertKey !mClassName !.classType {!className:mClassName.string} !actionMap]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

# Only get current entity observable properties, do not collect in super entities
override method @classDeclarationEX buildObservablePropertyMapsFromStoredProperties
  ?let @unifiedTypeMap inUnifiedTypeMap
  ?!@semanticContextEX ioSemanticContext
{
  @observablePropertyMap observablePropertyMap = {}
#--- Analyze simple stored properties
  [mSimpleStoredAttributeList buildObservablePropertyMap
    !inUnifiedTypeMap
    !?observablePropertyMap
  ]
#--- Enter in semantics context  
  [!?ioSemanticContext.mEntityObservablePropertyMap insertKey
    !mClassName
    !observablePropertyMap
    !.classObject
  ]
}

#·······················································································································

override method @classDeclarationEX buildInitialSecondaryPropertyListMap
  ?!@secondaryDeclarationListWorkingList ioSecondaryDeclarationListWorkingList
  ?!@uint ioSecondaryDeclarationCount
{
  ioSecondaryDeclarationCount = ioSecondaryDeclarationCount + [mSecondaryPropertyList length]
  ioSecondaryDeclarationListWorkingList += !self !mSecondaryPropertyList
}

#·······················································································································

override method @classDeclarationEX solveSecondaryProperty
  ?!@semanticContextEX ioSemanticContext
  ?let @unifiedTypeMap unused inUnifiedTypeMap
  ?let @secondaryPropertyList inPropertiesToSolve
  !@secondaryPropertyList outUnsolvedProperties
  ?!@simpleStoredPropertyListForGenerationEX ioSimpleStoredPropertyListForGeneration
{
  outUnsolvedProperties = {}
  [ioSemanticContext.mEntityObservablePropertyMap searchKey
    !mClassName
    ?@observablePropertyMap observablePropertyMap
    ?*
  ]
  for (property) in inPropertiesToSolve do
    [property tryToDefineSecondaryProperty
      !?ioSemanticContext
      !{} # No root entity
      !?observablePropertyMap
      !?outUnsolvedProperties
      !?ioSimpleStoredPropertyListForGeneration
    ]
  end
  [!?ioSemanticContext.mEntityObservablePropertyMap setMObservablePropertyMapForKey
    !observablePropertyMap
    !mClassName.string
  ]
}

#·······················································································································

func %once externSwiftFunctionCallerSet -> @stringset outResult {
  outResult = {!"setUpWithDictionary", !"init", !"saveIntoDictionary"}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   GENERATION TYPES
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @classForGeneration : @abstractFileGeneration {
  @string mClassName
  @propertyGenerationList mPropertyGenerationList
  @externSwiftFunctionList mExternSwiftFunctionList
  @externSwiftDelegateList mExternSwiftDelegateList
}

list @atomicPropertyGenerationList {
  @atomicPropertyGeneration mProperty
}

#·······················································································································

override method @classForGeneration generateCode
    ?let @string inOutputDirectory
    ?!@stringset ioGeneratedFileSet
{
  @atomicPropertyGenerationList atomicPropertyGenerationList = {}
  for (property) in mPropertyGenerationList do
    if property is == @atomicPropertyGeneration then
      atomicPropertyGenerationList += !(property as @atomicPropertyGeneration)
    end
  end
  let s = [filewrapper classGenerationTemplate.classImplementationInSwift
    !mClassName
    !mPropertyGenerationList
    !atomicPropertyGenerationList
    !mExternSwiftFunctionList
    !mExternSwiftDelegateList
    !"<< not handled>>"
  ]
  let fileName = mClassName + ".swift"
  ioGeneratedFileSet += !fileName
  [@string generateFile
    !inOutputDirectory
    !fileName
    !s
  ]
}

#·······················································································································

private filewrapper classGenerationTemplate in "../generation-templates" {
}{
}{
  template classImplementationInSwift "class.swift.galgasTemplate"
    ?@string CLASS_NAME
    ?@propertyGenerationList PROPERTY_LIST_FOR_GENERATION
    ?@atomicPropertyGenerationList ATOMIC_PROPERTY_LIST_FOR_GENERATION
    ?@externSwiftFunctionList EXTERN_FUNCTION_LIST_FOR_IMPLEMENTATION
    ?@externSwiftDelegateList EXTERN_DELEGATE_LIST_FOR_IMPLEMENTATION
    ?@string EXPLORER_ACCESS
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
