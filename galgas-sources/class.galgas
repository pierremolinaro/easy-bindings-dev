#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   AST                                                                                                                *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

class @classDeclaration : @astDeclaration {
  @lstring mClassName
  @simpleStoredPropertyList mSimpleStoredAttributeList
  @secondaryPropertyList mSecondaryPropertyList
  @externSwiftFunctionList mExternSwiftFunctionList
  @externSwiftDelegateList mExternSwiftDelegateList
  @lstringlist mActionDeclarationList
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   SYNTAX                                                                                                             *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

syntax extension easyBindings_syntax {

  #·····················································································································
  
  rule <class_declaration>
    ?let @bool inIsUserDefined
    ?!@astDeclarationStruct ioDeclarationAST
  {
    $class$
    $Identifier$ ?let @lstring entityName
    ${$
    @secondaryPropertyList secondaryPropertyList = {}
    @simpleStoredPropertyList simpleStoredAttributeList = {}
    @toOneRelationshipList toOneRelationshipList = {}
    @toManyRelationshipList toManyRelationshipList = {}
    @stringset signatureList = {}
    @externSwiftFunctionList externSwiftFunctionList = {}
    @externSwiftDelegateList externSwiftDelegateList = {}
    @lstringlist actionDeclarationList = {}
    repeat
    while
      <simple_stored_declaration> !?simpleStoredAttributeList !?signatureList
    while
      <transient_declaration> !?secondaryPropertyList
    while
      <extern_swift_func> !?externSwiftFunctionList
    while
      <extern_swift_delegate> !?externSwiftDelegateList
    while
      <action_declaration> !?actionDeclarationList
    end
    $}$
    ioDeclarationAST.mDeclarationList += !@classDeclaration.new {
      !inIsUserDefined
      !entityName
      !simpleStoredAttributeList
      !secondaryPropertyList
      !externSwiftFunctionList
      !externSwiftDelegateList
      !actionDeclarationList
    }
  }

  #·····················································································································

}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   TYPE INVENTORY                                                                                                     *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

override method @classDeclaration typeInventory
  ?!@unifiedTypeMap ioUnifiedTypeMap
{
  [mSimpleStoredAttributeList typeInventory !?ioUnifiedTypeMap]
  for (item) in mSecondaryPropertyList do
    [item typeInventory !?ioUnifiedTypeMap]
  end
  @actionMap actionMap = {}
  for (act) in mActionDeclarationList do
    [!?actionMap insertKey !act]
  end
  [!?ioUnifiedTypeMap insertKey !mClassName !.classType {!className:mClassName.string} !actionMap]
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   SEMANTIC ANALYSIS                                                                                                  *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

# Only get current entity observable properties, do not collect in super entities
override method @classDeclaration buildObservablePropertyMapsFromStoredProperties
  ?let @unifiedTypeMap inUnifiedTypeMap
  ?!@semanticContext ioSemanticContext
{
  @observablePropertyMap observablePropertyMap = {}
#--- Analyze simple stored properties
  [mSimpleStoredAttributeList buildObservablePropertyMap
    !inUnifiedTypeMap
    !?observablePropertyMap
  ]
#--- Enter in semantics context  
  [!?ioSemanticContext.mEntityObservablePropertyMap insertKey
    !mClassName
    !observablePropertyMap
  ]
}

#·······················································································································

override method @classDeclaration buildInitialSecondaryPropertyListMap
  ?!@secondaryDeclarationListWorkingList ioSecondaryDeclarationListWorkingList
  ?!@uint ioSecondaryDeclarationCount
{
  ioSecondaryDeclarationCount = ioSecondaryDeclarationCount + [mSecondaryPropertyList length]
  ioSecondaryDeclarationListWorkingList += !self !mSecondaryPropertyList
}

#·······················································································································

override method @classDeclaration solveSecondaryProperty
  ?!@semanticContext ioSemanticContext
  ?let @unifiedTypeMap unused inUnifiedTypeMap
  ?let @secondaryPropertyList inPropertiesToSolve
  !@secondaryPropertyList outUnsolvedProperties
{
  outUnsolvedProperties = {}
  [ioSemanticContext.mEntityObservablePropertyMap searchKey
    !mClassName
    ?@observablePropertyMap observablePropertyMap
  ]
  for (property) in inPropertiesToSolve do
    [property tryToSolveSecondaryProperty
      !?ioSemanticContext
      !{} # No root entity
      !?observablePropertyMap
      !?outUnsolvedProperties
    ]
  end
  [!?ioSemanticContext.mEntityObservablePropertyMap setMObservablePropertyMapForKey
    !observablePropertyMap
    !mClassName.string
  ]
}

#·······················································································································

func %once externSwiftFunctionCallerSet -> @stringset outResult {
  outResult = {!"setUpWithDictionary", !"init", !"saveIntoDictionary"}
}

#·······················································································································

override method @classDeclaration semanticAnalysis
  ?let @semanticContext inSemanticContext
  ?!@structForGeneration ioGeneration
{
  [inSemanticContext.mEntityObservablePropertyMap searchKey
    !mClassName
    ?let @observablePropertyMap observablePropertyMap
  ]
#--- TO DO : GET OBSERVABLE PROPERTIES FROM SUPER ENTITY
#--- Analyze simple stored properties
  [mSimpleStoredAttributeList simpleStoredPropertySemanticAnalysis
    !mClassName.string
    !inSemanticContext.mUnifiedTypeMap
    !?ioGeneration.mValidationStubRoutineListForGeneration
    ?let @simpleStoredPropertyListForGeneration simpleStoredPropertyListForGeneration
  ]
#--- Analyze transients
  @transientDefinitionListForGeneration transientDefinitionListForGeneration = {}
  for (item) in mSecondaryPropertyList do
    [item secondaryPropertySemanticAnalysis
      !mClassName.string
      !"" # No root entity name
      !{} # No root entity
      !inSemanticContext
      !observablePropertyMap
      !?transientDefinitionListForGeneration
      !?* # no array controller
      !?* # No selection controller
      !?* # No object controller
      !?ioGeneration.mNeededOutletClasses
    ]
  end
  ioGeneration.mTransientListForGeneration += transientDefinitionListForGeneration
#--- Check extern declarations
  for () in mExternSwiftFunctionList do
    if not [externSwiftFunctionCallerSet () hasKey !mCallerName.string] then
      var m = "allowed here:"
      for s in externSwiftFunctionCallerSet ()
        do m += " '" + s + "'"
        between m += ","
      end
      error mCallerName : m
    end
  end
#--- Check declared actions are unique
  @actionMap actionMap = {}
  for (actionName) in mActionDeclarationList do
    [!?actionMap insertKey !actionName]
    ioGeneration.mActionListForGeneration += !mClassName.string !actionName.string
  end
#--- Generation
  ioGeneration.mClassListForGeneration +=
    !mClassName.string
    !simpleStoredPropertyListForGeneration
    !transientDefinitionListForGeneration
    !mExternSwiftFunctionList
    !mExternSwiftDelegateList
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   GENERATION TYPES                                                                                                   *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

list @classListForGeneration {
  @string mClassName
  @simpleStoredPropertyListForGeneration mSimpleStoredPropertyListForGeneration
  @transientDefinitionListForGeneration mTransientListForGeneration
  @externSwiftFunctionList mExternSwiftFunctionList
  @externSwiftDelegateList mExternSwiftDelegateList
}

#·······················································································································

private filewrapper classGenerationTemplate in "../generation-templates" {
}{
}{
  template classImplementationInSwift "class.swift.galgasTemplate"
    ?@string CLASS_NAME
    ?@simpleStoredPropertyListForGeneration SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION
    ?@transientDefinitionListForGeneration TRANSIENT_LIST_FOR_IMPLEMENTATION
    ?@externSwiftFunctionList EXTERN_FUNCTION_LIST_FOR_IMPLEMENTATION
    ?@externSwiftDelegateList EXTERN_DELEGATE_LIST_FOR_IMPLEMENTATION
    ?@string EXPLORER_ACCESS
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#   GENERATION                                                                                                         *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

proc generateClasses
  ?let @classListForGeneration inClassListForGeneration
  ?let @string inOutputDirectory
  ?!@stringset ioGeneratedFileSet
{
  for () in inClassListForGeneration do
    let s = [filewrapper classGenerationTemplate.classImplementationInSwift
      !mClassName
      !mSimpleStoredPropertyListForGeneration
      !mTransientListForGeneration
      !mExternSwiftFunctionList
      !mExternSwiftDelegateList
      !"<< not handled>>"
    ]
    let fileName = mClassName + ".swift"
    ioGeneratedFileSet += !fileName
    [@string generateFile
      !inOutputDirectory
      !fileName
      !s
    ]
  end
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
