#-----------------------------------------------------------------------------------------------------------------------
#   AST
#-----------------------------------------------------------------------------------------------------------------------

#list @tableViewControllerBoundColumnListAST {
#  public var @lstring mColumnName
#  public var @lstring mColumnOutletTypeName
#  public var @tableViewColumnBindingAST mColumnBindingAST
#  public var @lstring mSortPropertyName
#}

#·······················································································································

#struct @tableViewColumnBindingAST {
#  public var @lstring mRunActionName # Empty string if no run binding
#  public var @multipleBindingDescriptor mEnabledBindingDescriptor
#  public var @multipleBindingDescriptor mHiddenBindingDescriptor
#  public var @regularBindingList mRegularBindingList
#}

#·······················································································································

#list @tableViewControllerAttributListAST {
#  public var @lstring mAttributeName
#  public var @abstractDefaultValue mAttributeValue
#}

#·······················································································································

#refclass @tableViewControllerDeclarationAST : @abstractDeclarationAST {
#  public var @lstring mControllerName
#  public var @bool mIsRoot
#  public var @lstring mRootEntityName
#  public var @lstring mToManyPropertyName
#  public var @tableViewControllerBoundColumnListAST mTableViewControllerBoundColumnListAST
#  public var @tableViewControllerAttributListAST mTableViewControllerAttributListAST
#}
#
#·······················································································································

#override method @tableViewControllerDeclarationAST enterInPrecedenceGraph ?!@declarationPrecedenceGraph ioGraph {
#  let node = @lstring.new {!self.mClassName.string + " " + self.mControllerName !self.mControllerName.location}
#  [!?ioGraph addNode !node !self]
#  [!?ioGraph addEdge !node !self.mClassName]
#  if not self.mIsRoot then
#    [!?ioGraph addEdge !node !.new {!self.mClassName.string + " " + self.mToManyPropertyName !self.mToManyPropertyName.location}]
#  elsif self.mRootEntityName.string != "" then
#    [!?ioGraph addEdge !node !.new {!self.mRootEntityName.string + " " + self.mToManyPropertyName !self.mToManyPropertyName.location}]
#  end
#}

#·······················································································································

#override getter @tableViewControllerDeclarationAST nodeKey -> @lstring {
#  result = @lstring.new {!self.mClassName.string + " " + self.mControllerName !self.mControllerName.location}
#}

#-----------------------------------------------------------------------------------------------------------------------
#   SYNTAX
#-----------------------------------------------------------------------------------------------------------------------

syntax extension easyBindings_syntax {

  #·····················································································································
  
#  rule <controller_declaration>
#            ?autoLayout: @bool inAutoLayout
#            ?let @lstring inCurrentEntity
#            ?let @lstring inRootEntity
#            ?!@arrayControllerBindingListAST unused ioArrayControllerBindingListAST
#            ?!@astDeclarationStruct ioDeclarationAST
#  {
#    $tableViewController$
#    if inAutoLayout then
#      error .here : "AutoLayout document requires 'autolayout' prefix"
#    end
#    $controllerName$ ?let @lstring controllerName
#    var @tableViewControllerAttributListAST arrayControllerAttributListAST = {}
#    ${$
#    repeat
#      $identifier$ ?let @lstring attributeName
#      $:$
#      <explicit_value> ?let @abstractDefaultValue attributeValue
#      arrayControllerAttributListAST += !attributeName !attributeValue
#    while
#      $,$
#    end
#    $}$
#  #--- Model
#    var @bool isRoot
#    select
#      $root$
#      isRoot = true
#    or
#      $self$
#      isRoot = false
#    end
#    $.$
#    $identifier$ ?let @lstring relationshipName
#    var @tableViewControllerBoundColumnListAST arrayControllerBoundColumnListAST = {}
#    select
#      $;$
#    or
#      ${$
#      repeat
#      while
#        $column$
#        $literal_string$ ?let columnName
#        var @lstring sortPropertyName
#        select
#          sortPropertyName = ["" nowhere]
#        or
#          $sortkey$
#          $identifier$ ?sortPropertyName
#        end
#        $Identifier$ ?let columnOutletTypeName
#        <column_bindings> ?let @tableViewColumnBindingAST columnBindingAST
#        arrayControllerBoundColumnListAST +=
#          !columnName
#          !columnOutletTypeName
#          !columnBindingAST
#          !sortPropertyName
#      end
#      $}$
#    end
#    ioDeclarationAST.mUnifiedDeclarationList += !@tableViewControllerDeclarationAST.new {
#      !inCurrentEntity
#      !controllerName
#      !isRoot
#      !inRootEntity
#      !relationshipName
#      !arrayControllerBoundColumnListAST
#      !arrayControllerAttributListAST
#    }
#  }

#·······················································································································

#  rule <column_bindings> !@tableViewColumnBindingAST outColumnBindingAST {
#    var @lstring runActionDescriptor = ["" nowhere]
#    var enabledBindingDescriptor = @multipleBindingDescriptor.noBinding
#    var hiddenBindingDescriptor = @multipleBindingDescriptor.noBinding
#    var @regularBindingList regularBindingList = {}
#    repeat
#    while
#      $run$
#      if runActionDescriptor.string != "" then
#        error .here : "duplicated $run binding"
#      end
#      $identifier$ ?runActionDescriptor
#  #--- Enabled
#    while
#      $enabled$
#      if enabledBindingDescriptor != .noBinding then
#        error .here : "duplicated $enabled binding"
#      end
#      <booleanMultipleBindingExpression> ?let @abstractBooleanMultipleBindingExpressionAST bindingExpression
#      enabledBindingDescriptor = .binding {!expression:bindingExpression}
#  #--- Hidden
#    while
#      $hidden$
#      if hiddenBindingDescriptor != .noBinding then
#        error .here : "duplicated $hidden binding"
#      end
#      <booleanMultipleBindingExpression> ?let @abstractBooleanMultipleBindingExpressionAST bindingExpression
#      hiddenBindingDescriptor = .binding {!expression:bindingExpression}
#  #--- Regular binding
#    while
#      $bindingName$ ?let @lstring bindingName
#      var @observablePropertyList observablePropertyList = {}
#      repeat
#        <observable_property> ?let @observablePropertyAST observableProperty
#        observablePropertyList += !observableProperty
#      while
#        $,$
#      end
#      <binding_option_list> ?let bindingOptions
#      regularBindingList +=
#        !bindingName
#        !observablePropertyList
#        !bindingOptions
#    end
#  #---
#    outColumnBindingAST = @tableViewColumnBindingAST.new {
#      !runActionDescriptor
#      !enabledBindingDescriptor
#      !hiddenBindingDescriptor
#      !regularBindingList
#    }
#  }
  
  #·····················································································································

}

#-----------------------------------------------------------------------------------------------------------------------
#   CLASS AND PROPERTY SEMANTIC ANALYSIS                       
#-----------------------------------------------------------------------------------------------------------------------

#override method @tableViewControllerDeclarationAST firstAnalysisPhase 
#       ?!@semanticContext ioSemanticContext
#       ?!@generationStruct unused ioGeneration
#{
#  with self.mClassName in !?ioSemanticContext.mClassMap 
#    error message searchKey
#  do
#    let @actionMap controllerActions = {!["add" nowhere], !["remove" nowhere] }
#    if self.mIsRoot then
#      [ioSemanticContext.mClassMap searchKey !self.mRootEntityName ?* ?let rootProperties ?2*]
#      [rootProperties searchKey !self.mToManyPropertyName ?let classKind ?2*]
#      switch classKind
#      case property (2*) :
#        error self.mRootEntityName : "a toMany relationship is required here"
#      case toMany (typeName * graphic *) :
#        let kind = @propertyKind.arrayController {
#          !typeName: typeName
#          !graphic: graphic
#        }
#        [!?mPropertyMap insertKey !self.mControllerName !kind !controllerActions !false]
#    #--- Code Generation
#      mPropertyGenerationList += !@tableViewControllerPropertyGeneration.new {
#        !self.mControllerName.string
#        !"rootObject." + self.mToManyPropertyName
#        !self.mClassName
#      }
#      case toOne (4*) :
#        error self.mRootEntityName : "a toMany relationship is required here"
#      case arrayController (2*) :
#        error self.mRootEntityName : "a toMany relationship is required here"
#      case selectionController (*) :
#        error self.mRootEntityName : "a toMany relationship is required here"
#      end
#    else
#      [mPropertyMap searchKey !self.mToManyPropertyName ?let classKind ?2*]
#      switch classKind
#      case property (2*) :
#        error self.mRootEntityName : "a toMany relationship is required here"
#      case toMany (typeName * graphic *) :
#        let kind = @propertyKind.arrayController {
#          !typeName: typeName
#          !graphic: graphic
#        }
#        [!?mPropertyMap insertKey !self.mControllerName !kind !controllerActions !false]
#    #--- Code Generation
#      mPropertyGenerationList += !@tableViewControllerPropertyGeneration.new {
#        !self.mControllerName.string
#        !self.mToManyPropertyName
#        !self.mClassName
#      }
#      case toOne (4*) :
#        error self.mRootEntityName : "a toMany relationship is required here"
#      case arrayController (2*) :
#        error self.mRootEntityName : "a toMany relationship is required here"
#      case selectionController (*) :
#        error self.mRootEntityName : "a toMany relationship is required here"
#      end
#    end
#  end
#}

#-----------------------------------------------------------------------------------------------------------------------
#   SECOND ANALYSIS PHASE
#-----------------------------------------------------------------------------------------------------------------------

#override method @tableViewControllerDeclarationAST thirdAnalysisPhase
#       ?!@semanticContext ioSemanticContext
#       ?!@generationStruct ioGeneration
#{
#  [ioSemanticContext.mClassMap searchKey
#    !.new {!preferencesName () !.nowhere}
#    ?*
#    ?let preferencesPropertyMap
#    ?2*
#  ]
##------------------------------------------------------------ Check array controller attributes
#  let attributes = @stringset {!"allowsEmptySelection", !"allowsMultipleSelection"}
#  let allowedTypes = @typeKindList {!.boolType}
#  var @stringset definedAttributes = {}
#  var @2stringlist attributeListForGeneration = {}
#  for (name value) in self.mTableViewControllerAttributListAST do
#    if not [attributes hasKey !name.string] then
#      error name : "unknown attribute"
#    elsif [definedAttributes hasKey !name.string] then
#      error name : "attribute multiply defined"
#    else
#      definedAttributes += !name.string
#    end
#    [value analyzeDefaultValueType !allowedTypes !preferencesPropertyMap ?let valueAsString]
#    attributeListForGeneration += !name.string !valueAsString
#  end
#  for s in attributes do
#    if not [definedAttributes hasKey !s] then
#      error self.mControllerName : "attribute '" + s + "' not defined"
#    end
#  end
##------
#  var @propertyMap boundModelPropertyMap
#  if self.mIsRoot then
#    [ioSemanticContext.mClassMap searchKey
#       !self.mRootEntityName
#       ?*
#       ?boundModelPropertyMap 
#       ?2*
#     ]
#  else
#    [ioSemanticContext.mClassMap searchKey
#       !self.mClassName
#       ?*
#       ?boundModelPropertyMap 
#       ?2*
#     ]  
#  end
#  [boundModelPropertyMap searchKey
#     !self.mToManyPropertyName
#     ?let @propertyKind boundModelClassKind
#     ?2*
#  ]
##------------------------------------------------------------ Check colum bound models
#  var @actionMap actionMap
#  var @propertyMap propertyMap
#  var @tableViewControllerModelKind arrayControllerModelKind
#  var @bool graphic
#  var @string elementTypeName
#  switch boundModelClassKind
#  case property (2*) :
#    error self.mToManyPropertyName
#      : "a toMany property is required here"
#      : graphic, arrayControllerModelKind, propertyMap, actionMap, elementTypeName
#  case toMany (typeName accessibility isGraphic *) :
#    elementTypeName = typeName
#    graphic = isGraphic
#    arrayControllerModelKind = if [accessibility isTransient]
#      then .transientArray
#      else .entityArray
#    end
#    [ioSemanticContext.mClassMap searchKey !typeName ?* ?propertyMap ?actionMap ?*]
#  case toOne (4*) :
#    error self.mToManyPropertyName
#      : "a toMany property is required here"
#      : graphic, arrayControllerModelKind, propertyMap, actionMap, elementTypeName
#  case arrayController (2*) :
#    error self.mToManyPropertyName
#      : "a toMany property is required here"
#      : graphic, arrayControllerModelKind, propertyMap, actionMap, elementTypeName
#  case selectionController (*) :
#    error self.mToManyPropertyName
#      : "a toMany property is required here"
#      : graphic, arrayControllerModelKind, propertyMap, actionMap, elementTypeName
#  end
#  var @tableViewControllerBoundColumnListForGeneration arrayControllerBoundColumnListForGeneration = {}
#  var @tableViewControllerSortedColumnListForGeneration arrayControllerSortedColumnListForGeneration = {}
#  for (mColumnName mColumnOutletTypeName mColumnBindingAST mSortPropertyName) in self.mTableViewControllerBoundColumnListAST do
#  #-------- Run action ? Check action is declared
#    if mColumnBindingAST.mRunActionName.string != "" then
#      [actionMap searchKey !mColumnBindingAST.mRunActionName]
#    end
#  #-------- Simple bindings
#    [ioSemanticContext.mClassMap searchKey
#      !.new {!preferencesName () !.nowhere}
#      ?*
#      ?let preferencesPropertyMap
#      ?2*
#    ]
#    var @regularBindingsGenerationList regularBindingsGenerationList = {}
#    analyzeRegularBinding (
#      !{} # No root observable property map
#      !preferencesPropertyMap
#      !ioSemanticContext
#      !propertyMap
#      !mColumnOutletTypeName
#      !"<<not used>>"
#      !mColumnBindingAST.mRegularBindingList
#      !"object."
#      !?regularBindingsGenerationList
#    )
#  #-------- Sort property
#    if mSortPropertyName.string != "" then
#      [propertyMap searchKey
#        !mSortPropertyName
#        ?let sortPropertyKind
#        ?2*
#      ]
#      if not [sortPropertyKind isComparable] then
#        error mSortPropertyName : "this property is not comparable"
#      end 
#      arrayControllerSortedColumnListForGeneration +=    
#        !mColumnName.string
#        !sortPropertyKind
#        !mSortPropertyName.string
#    end
#  #-------- Binding generation
#    arrayControllerBoundColumnListForGeneration +=
#      !mColumnName.string
#      !mColumnOutletTypeName.string
#      !mColumnBindingAST.mRunActionName.string
#      !regularBindingsGenerationList
#  #--- Outlet class is needed ?
#    [ioSemanticContext.mOutletClassMap searchKey !mColumnOutletTypeName ?6* ?let outletClassIsUserDefined]
#    if not outletClassIsUserDefined then
#      ioGeneration.mNeededOutletClasses += !mColumnOutletTypeName.string
#    end
#  end
#  let modelString = if self.mIsRoot
#    then "self.rootObject." + self.mToManyPropertyName + "_property"
#    else "self." + self.mToManyPropertyName + "_property"
#  end
##---
#  ioGeneration.mFileGenerationList += !@tableViewControllerGeneration.new {
#    !self.mClassName
#    !self.mControllerName
#    !modelString
#    !arrayControllerBoundColumnListForGeneration
#    !arrayControllerSortedColumnListForGeneration
#    !"ReadWriteArrayOf_" + elementTypeName # [kind swiftTypeName]
#    !arrayControllerModelKind # boundModelClassKind
#    !elementTypeName # [kind swiftTypeName]
#    !graphic
#    !attributeListForGeneration
#  }
#}


#-----------------------------------------------------------------------------------------------------------------------
#   CODE GENERATION                       
#-----------------------------------------------------------------------------------------------------------------------

#refclass @tableViewControllerPropertyGeneration : @propertyGeneration {
#  public var @string mModelString
#  public var @string mOwnerName
#}

#·······················································································································

#override getter @tableViewControllerPropertyGeneration propertyDeclarationCode
#   ?let @bool inPreferences
#   ?let @stringset unused inOverriddenTransients -> @string
#{
#  if inPreferences then
#    result  = "//" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n"
#    result += "//   Array controller: " + self.mPropertyName + "\n"
#    result += "//" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n\n"
#    result += "  var preferences_" + self.mPropertyName + " = Controller_" + self.mOwnerName + "_" + self.mPropertyName + " ()\n\n"
#  else
#    result  = "  //" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n"
#    result += "  //   Array controller: " + self.mPropertyName + "\n"
#    result += "  //" + @string.stringWithSequenceOfCharacters  {!'·' !116} + "\n\n"
#    result += "  var " + self.mPropertyName + " = Controller_" + self.mOwnerName + "_" + self.mPropertyName + " ()\n\n"
#  end
#}

#·······················································································································

#override getter @tableViewControllerPropertyGeneration configurationCode ?let @bool inPreferences -> @string {
#  let prefix = if inPreferences then "preferences_" else "self." end
#  result  = "  //--- Array controller property: " + self.mPropertyName + "\n"
#  result += "    " + prefix + self.mPropertyName + ".bind_model (" + prefix + self.mModelString + "_property, self.ebUndoManager)\n"
#}

#·······················································································································

#override getter @tableViewControllerPropertyGeneration initCode -> @string {
#  result  = ""
#}

#·······················································································································

#override getter @tableViewControllerPropertyGeneration populateExplorerWindowCode -> @string {
#  result  = "    //--- Array controller property: " + self.mPropertyName + "\n"
#  result += "      self." + self.mPropertyName + ".addExplorer (name: \"" + self.mPropertyName + "\", y:&y, view:view)\n"
#}

#·······················································································································

#override getter @tableViewControllerPropertyGeneration terminationCode ?let @bool inPreferences -> @string {
#  let prefix = if inPreferences then "preferences_" else "self." end
#  result  = "  //--- Array controller property: " + self.mPropertyName + "\n"
#  result += "    " + prefix + self.mPropertyName + ".unbind_model ()\n"
#}

#-----------------------------------------------------------------------------------------------------------------------
#   GENERATION TYPES
#-----------------------------------------------------------------------------------------------------------------------

#enum @tableViewControllerModelKind {
#  case entityArray
#
#  case transientArray
#}

#-----------------------------------------------------------------------------------------------------------------------

#refclass @tableViewControllerGeneration : @abstractFileGeneration {
#  public var @string mOwnerName # document name, prefs name, ...
#  public var @lstring mControllerName
#  public var @string mModelString
#  public var @tableViewControllerBoundColumnListForGeneration mTableViewControllerBoundColumnListForGeneration
#  public var @tableViewControllerSortedColumnListForGeneration mTableViewControllerSortedColumnListForGeneration
#  public var @string mModelTypeName
#  public var @tableViewControllerModelKind mTableViewControllerModelKind
#  public var @string mElementTypeName
#  public var @bool mElementTypeIsGraphic
#  public var @2stringlist mAttributeListForGeneration
#}

#·······················································································································

#list @tableViewControllerBoundColumnListForGeneration {
#  public var @string mColumnName
#  public var @string mColumnOutletTypeName
#  public var @string mRunAction # Empty string if no action
#  public var @regularBindingsGenerationList mRegularBindingsGenerationList
#}

#·······················································································································

#list @tableViewControllerSortedColumnListForGeneration {
#  public var @string mColumnName
#  public var @propertyKind mSortPropertyKind
#  public var @string mObservablePropertyForSorting
#}

#·······················································································································

#private filewrapper tableViewControllerGenerationTemplate in "../generation-templates/controllers" {
#}{
#}{
#  template tableViewControllerImplementationInSwift "table-view-controller.swift.galgasTemplate"
#    ?@string OWNER_NAME
#    ?@string TABLE_VIEW_CONTROLLER_NAME
#    ?@string MODEL_STRING
#    ?@tableViewControllerModelKind MODEL_KIND
#    ?@string MODEL_TYPE_NAME
#    ?@tableViewControllerBoundColumnListForGeneration BOUND_COLUMNS
#    ?@tableViewControllerSortedColumnListForGeneration SORTED_COLUMNS
#    ?@string ELEMENT_TYPE_NAME
#    ?@stringset OBSERVED_PROPERTIES_FOR_SORTING
#    ?@2stringlist ATTRIBUTE_VALUES
#}

#-----------------------------------------------------------------------------------------------------------------------
#   GENERATION
#-----------------------------------------------------------------------------------------------------------------------

#override method @tableViewControllerGeneration generateCode
#    ?let @string inOutputDirectory
#    ?!@stringset unused ioGeneratedFileSet
#{
##--- Build observed property set (for sorting and filtering)
#  var @stringset observedProperties = {}
#  for (* * mObservablePropertyForSorting) in self.mTableViewControllerSortedColumnListForGeneration do
#    observedProperties += !mObservablePropertyForSorting
#  end
#  let s = [filewrapper tableViewControllerGenerationTemplate.tableViewControllerImplementationInSwift
#    !self.mOwnerName
#    !self.mControllerName
#    !self.mModelString
#    !self.mTableViewControllerModelKind
#    !self.mModelTypeName
#    !self.mTableViewControllerBoundColumnListForGeneration
#    !self.mTableViewControllerSortedColumnListForGeneration
#    !self.mElementTypeName
#    !observedProperties
#    !self.mAttributeListForGeneration
#  ]
#  [@string generateFile
#    !inOutputDirectory
#    !"controller-table-view-" + self.mOwnerName + "-" +  self.mControllerName + ".swift"
#    !s
#  ]
#}

#-----------------------------------------------------------------------------------------------------------------------
