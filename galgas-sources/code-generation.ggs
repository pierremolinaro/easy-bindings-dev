#-----------------------------------------------------------------------------------------------------------------------
#   SEMANTIC TYPES
#-----------------------------------------------------------------------------------------------------------------------

list @transientExternTypeList {
  public var @string mTypeName
  public var @bool mIsClass
}

#·······················································································································

abstract class @abstractFileGeneration {
}

#·······················································································································

abstract proc @abstractFileGeneration.generateCode(
    ?let @string inOutputDirectory
    ?toOne: @stringset inToOneEntities
    ?toMany: @stringset inToManyEntities
    ?generateClass_PreferencesArrayOf: @stringset inGenerateClass_PreferencesArrayOf
    ?generateClass_StandAloneArrayOf: @stringset inGenerateClass_StandAloneArrayOf
    ?generateClass_ProxyArrayOf: @stringset inGenerateClass_ProxyArrayOf
    ?generateClass_TransientArrayOfSuperOf: @stringset inGenerateClass_TransientArrayOfSuperOf
    ?generateClass_TransientArrayOf: @stringset inGenerateClass_TransientArrayOf
    ?!@stringset ioGeneratedFileSet)

#·······················································································································

list @fileGenerationList {
  public var @abstractFileGeneration mFileGeneration
}

#·······················································································································

struct @generationStruct {
  public var @validationStubRoutineListForGeneration mValidationStubRoutineListForGeneration
  public var @fileGenerationList mFileGenerationList
  public var @entityListForGeneratingEBManagedObjectContext mEntityListForGeneration
  public var @bool mGenerateEBManagedXibDocumentSwift
  public var @bool mGenerateEBManagedAutoLayoutDocumentSwift
  public var @stringset mNeededOutletClasses
  public var @mainXibDescriptorList mMainXibDescriptorList
 
  public var @stringset mToOneClassImplementations
  public var @stringset mToManyClassImplementations

  public var @selectionControllerForGeneration mSelectionControllerListForGeneration
  public var @stringlist mPropertyClassList
  public var @transientExternTypeList mTransientPropertyTypeList

  public var @stringset mGenerateClass_PreferencesArrayOf_
  public var @stringset mGenerateClass_StandAloneArrayOf_
  public var @stringset mGenerateClass_ProxyArrayOf_
  public var @stringset mGenerateClass_TransientArrayOfSuperOf_
  public var @stringset mGenerateClass_TransientArrayOf_
}

#-----------------------------------------------------------------------------------------------------------------------
#   CODE GENERATION
#-----------------------------------------------------------------------------------------------------------------------

proc generateCode(
  ?let @string inXcodeProjectString
  ?let @generationStruct inGeneration
  ?let @string inSourceFile)
{
  let outputDirectory = [inSourceFile stringByDeletingLastPathComponent]
  let projectName = [[inSourceFile lastPathComponent] stringByDeletingPathExtension]
  let fileOutputDirectory = outputDirectory + "/" + projectName
  var @stringset generatedFileSet = {}
  for (fileGeneration) in inGeneration.mFileGenerationList do
    [fileGeneration generateCode
      !fileOutputDirectory
      !toOne: inGeneration.mToOneClassImplementations
      !toMany: inGeneration.mToManyClassImplementations
      !generateClass_PreferencesArrayOf: inGeneration.mGenerateClass_PreferencesArrayOf_
      !generateClass_StandAloneArrayOf: inGeneration.mGenerateClass_StandAloneArrayOf_
      !generateClass_ProxyArrayOf: inGeneration.mGenerateClass_ProxyArrayOf_
      !generateClass_TransientArrayOfSuperOf: inGeneration.mGenerateClass_TransientArrayOfSuperOf_
      !generateClass_TransientArrayOf: inGeneration.mGenerateClass_TransientArrayOf_
      !?generatedFileSet
    ]
  end
  generateEBManagedObjectContext (
    !inGeneration.mEntityListForGeneration
    !fileOutputDirectory
    !?generatedFileSet
  )
  generateSelectionControllers (
    !inGeneration.mSelectionControllerListForGeneration
    !fileOutputDirectory
    !?generatedFileSet
  )
  generateValidationRoutineStubs (
    !fileOutputDirectory
    !inGeneration.mValidationStubRoutineListForGeneration
    !?generatedFileSet
  )
  generateStandardProperties (
    !fileOutputDirectory
    !inGeneration.mPropertyClassList
    !inGeneration.mTransientPropertyTypeList
    !?generatedFileSet
  )
  generateXcodeProject (
    !outputDirectory
    !inXcodeProjectString
    !generatedFileSet
    !projectName
  )
  generateTestFile (
    !inXcodeProjectString
    !projectName
    !inGeneration.mMainXibDescriptorList
    !outputDirectory
  )
}

#·······················································································································

filewrapper standard_properties in "../generation-templates/standard-properties" {
}{
}{
  template stub "standard-properties-stub.swift.galgasTemplate"

  template scalarProperty "scalar-standard-property.swift.galgasTemplate"
    ?@string TYPE
    ?@bool TRANSIENT
    ?@string COMPARISON_METHOD

  template classProperty "class-standard-property.swift.galgasTemplate"
    ?@string CLASS_NAME
    ?@bool COMPARABLE
    ?@bool TRANSIENT
}

#·······················································································································

private proc generateStandardProperties(
  ?let @string inOutputDirectory
  ?let @stringlist inPropertyClassList
  ?let @transientExternTypeList inTransientPropertyExternTypeList
  ?!@stringset ioGeneratedFileSet)
{
  var contents = [filewrapper standard_properties.stub]
#--- Add scalar property types
  contents += [filewrapper standard_properties.scalarProperty !"UInt32" !false !""]
  contents += [filewrapper standard_properties.scalarProperty !"Int"    !false !""]
  contents += [filewrapper standard_properties.scalarProperty !"Bool"   !false !""]
  contents += [filewrapper standard_properties.scalarProperty !"Double" !false !""]
  contents += [filewrapper standard_properties.scalarProperty !"String" !false !"localizedStandardCompare"]
  contents += [filewrapper standard_properties.scalarProperty !"Data"   !false !""]
  contents += [filewrapper standard_properties.scalarProperty !"Date"   !false !""]
  contents += [filewrapper standard_properties.scalarProperty !"BezierPathArray" !false !""]
#--- Add class property types
  for (propertyClass) in inPropertyClassList do
    contents += [filewrapper standard_properties.classProperty !propertyClass !false !false]
  end
  for (propertyType isClass) in inTransientPropertyExternTypeList do
    if isClass then
      contents += [filewrapper standard_properties.classProperty !propertyType !false !true]
    else
      contents += [filewrapper standard_properties.scalarProperty !propertyType !true !""]
    end
  end
  contents += [filewrapper standard_properties.classProperty !"NSBezierPath" !false !false]
  contents += [filewrapper standard_properties.classProperty !"NSFont"  !false !false]
  contents += [filewrapper standard_properties.classProperty !"NSColor" !false !false]
#--- Generate file
  let fileName = "standard-properties.swift"
  ioGeneratedFileSet += !fileName
  [@string generateFile
    !inOutputDirectory
    !fileName
    !contents
  ]
}

#-----------------------------------------------------------------------------------------------------------------------
