#-----------------------------------------------------------------------------------------------------------------------
#   SEMANTIC TYPES
#-----------------------------------------------------------------------------------------------------------------------

list @transientExternTypeList {
  public var @string mTypeName
  public var @bool mIsClass
}

#·······················································································································

abstract class @abstractFileGeneration {
}

#·······················································································································

abstract proc @abstractFileGeneration.generateCode(
    let @string inOutputDirectory,
    let @generationStruct inGenerationStruct,
    ?!@stringset ioGeneratedFileSet)

#·······················································································································

list @fileGenerationList {
  public var @abstractFileGeneration mFileGeneration
}

#·······················································································································

struct @generationStruct {
  public var @validationStubRoutineListForGeneration mValidationStubRoutineListForGeneration = []
  public var @fileGenerationList mFileGenerationList = []
  public var @entityListForGeneratingEBManagedObjectContext mEntityListForGeneration = []
  public var @bool mGenerateEBManagedXibDocumentSwift = false
  public var @bool mGenerateEBManagedAutoLayoutDocumentSwift = false
  public var @stringset mNeededOutletClasses = []
  public var @mainXibDescriptorList mMainXibDescriptorList = []
 
  public var @stringset mToOneClassImplementations = []
  public var @stringset mToManyClassImplementations = []

  public var @selectionControllerForGeneration mSelectionControllerListForGeneration = []
  public var @stringlist mPropertyClassList = []
  public var @transientExternTypeList mTransientPropertyTypeList = []

  public var @stringset mGenerateClass_PreferencesArrayOf_ = []
  public var @stringset mGenerateClass_ProxyArrayOf_ = []
  public var @stringset mGenerateClass_TransientArrayOfSuperOf_ = []
  public var @stringset mGenerateClass_TransientArrayOf_ = []
  public var @stringset mGenerateClass_StoredArrayOf_ = []
}

#-----------------------------------------------------------------------------------------------------------------------
#   CODE GENERATION
#-----------------------------------------------------------------------------------------------------------------------

proc generateCode(
  let @string inXcodeProjectString,
  let @generationStruct inGeneration,
  let @string inSourceFile)
{
  let outputDirectory = inSourceFile.stringByDeletingLastPathComponent ()
  let projectName = inSourceFile.lastPathComponent ().stringByDeletingPathExtension ()
  let fileOutputDirectory = outputDirectory + "/" + projectName
  var @stringset generatedFileSet = []
  for (fileGeneration) in inGeneration.mFileGenerationList do
    [fileGeneration generateCode
      fileOutputDirectory,
      inGeneration,
      !?generatedFileSet
    ]
  end
  generateEBManagedObjectContext (
    inGeneration.mEntityListForGeneration,
    fileOutputDirectory,
    !?generatedFileSet
  )
  generateSelectionControllers (
    inGeneration.mSelectionControllerListForGeneration,
    fileOutputDirectory,
    !?generatedFileSet
  )
  generateValidationRoutineStubs (
    fileOutputDirectory,
    inGeneration.mValidationStubRoutineListForGeneration,
    !?generatedFileSet
  )
  generateStandardProperties (
    fileOutputDirectory,
    inGeneration.mPropertyClassList,
    inGeneration.mTransientPropertyTypeList,
    !?generatedFileSet
  )
  generateXcodeProject (
    outputDirectory,
    inXcodeProjectString,
    generatedFileSet,
    projectName
  )
  generateTestFile (
    inXcodeProjectString,
    projectName,
    inGeneration.mMainXibDescriptorList,
    outputDirectory
  )
}

#·······················································································································

filewrapper standard_properties in "generation-templates/standard-properties" {
}{
}{
#  template stub "standard-properties-stub.swift.galgasTemplate"

  template scalarProperty "scalar-standard-property.swift.galgasTemplate"
    ?@string TYPE
    ?@bool TRANSIENT
    ?@string COMPARISON_METHOD

  template classProperty "class-standard-property.swift.galgasTemplate"
    ?@string CLASS_NAME
    ?@bool COMPARABLE
    ?@bool TRANSIENT
}

#·······················································································································

private proc generateStandardProperties (let @string inOutputDirectory,
                                         let @stringlist inPropertyClassList,
                                         let @transientExternTypeList inTransientPropertyExternTypeList,
                                         ?!@stringset ioGeneratedFileSet) {
#--- Add scalar property types
  generateScalarProperty (inOutputDirectory, "UInt32", false, "", !?ioGeneratedFileSet)
  generateScalarProperty (inOutputDirectory, "Int",    false, "", !?ioGeneratedFileSet)
  generateScalarProperty (inOutputDirectory, "Bool",   false, "", !?ioGeneratedFileSet)
  generateScalarProperty (inOutputDirectory, "Double", false, "", !?ioGeneratedFileSet)
  generateScalarProperty (inOutputDirectory, "String", false, "localizedStandardCompare", !?ioGeneratedFileSet)
  generateScalarProperty (inOutputDirectory, "Data",   false, "", !?ioGeneratedFileSet)
  generateScalarProperty (inOutputDirectory, "Date",   false, "", !?ioGeneratedFileSet)
  generateScalarProperty (inOutputDirectory, "BezierPathArray", false, "", !?ioGeneratedFileSet)
#--- Add class property types
  for (propertyClass) in inPropertyClassList do
    generateClassProperty (inOutputDirectory, propertyClass, false, false, !?ioGeneratedFileSet)
  end
  for (propertyType isClass) in inTransientPropertyExternTypeList do
    if isClass then
      generateClassProperty (inOutputDirectory, propertyType, false, true, !?ioGeneratedFileSet)
    else
      generateScalarProperty (inOutputDirectory, propertyType, true, "", !?ioGeneratedFileSet)
    end
  end
  generateClassProperty (inOutputDirectory, "NSBezierPath", false, false, !?ioGeneratedFileSet)
  generateClassProperty (inOutputDirectory, "NSFont",  false, false, !?ioGeneratedFileSet)
  generateClassProperty (inOutputDirectory, "NSColor", false, false, !?ioGeneratedFileSet)
}

#·······················································································································

private proc generateClassProperty (let @string inOutputDirectory,
                                     let @string inClassPropertyTypeName,
                                     let @bool inComparable,
                                     let @bool inTransient,
                                     ?!@stringset ioGeneratedFileSet) {
  let contents = filewrapper [standard_properties.classProperty: inClassPropertyTypeName, inComparable, inTransient]
#--- Generate file
  let fileName = "property-" + inClassPropertyTypeName + ".swift"
  ioGeneratedFileSet += !fileName
  @string.generateFile (
    inOutputDirectory,
    fileName,
    contents
  )
}

#·······················································································································

private proc generateScalarProperty (let @string inOutputDirectory,
                                    let @string inScalarPropertyTypeName,
                                    let @bool inTransient,
                                    let @string inComparisonMethod,
                                    ?!@stringset ioGeneratedFileSet) {
  let contents = filewrapper [standard_properties.scalarProperty: inScalarPropertyTypeName, inTransient, inComparisonMethod]
#--- Generate file
  let fileName = "property-" + inScalarPropertyTypeName + ".swift"
  ioGeneratedFileSet += !fileName
  @string.generateFile (
    inOutputDirectory,
    fileName,
    contents
  )
}

#-----------------------------------------------------------------------------------------------------------------------
