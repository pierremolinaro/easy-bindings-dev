//-----------------------------------------------------------------------------*
//                                                                             *
//                          File 'PMDocument.swift'                            *
//                         Generated by version 0.0.1                          *
//                       august 7th, 2014, at 18h53'49"                        *
//                                                                             *
//-----------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1


import Cocoa

//---------------------------------------------------------------------------------------------------------------------*

@objc(PMDocument) class PMDocument : PMManagedDocument {

  //-------------------------------------------------------------------------------------------------------------------*
  //    Outlets                                                                                                        *
  //-------------------------------------------------------------------------------------------------------------------*

  @IBOutlet var namesTableView : NSTableView?
  @IBOutlet var canRemoveTextField : NSTextField?
  @IBOutlet var addPathButton : NSButton?
  @IBOutlet var removePathButton : NSButton?
  @IBOutlet var countItemTextField : NSTextField?
  @IBOutlet var countItemMessageTextField : NSTextField?
  @IBOutlet var totalTextField : NSTextField?

  //-------------------------------------------------------------------------------------------------------------------*
  //    Controllers                                                                                                    *
  //-------------------------------------------------------------------------------------------------------------------*

  var nameController : PMObjectArrayController?

  //-------------------------------------------------------------------------------------------------------------------*
  //    Document attributes                                                                                            *
  //-------------------------------------------------------------------------------------------------------------------*


  //-------------------------------------------------------------------------------------------------------------------*
  //    init                                                                                                           *
  //-------------------------------------------------------------------------------------------------------------------*

  init () {
    let em = PMObjectManager ()
    super.init (inEntityManager:em)
  }
  
  //-------------------------------------------------------------------------------------------------------------------*
  //    windowNibName                                                                                                  *
  //-------------------------------------------------------------------------------------------------------------------*

  override var windowNibName: String {
    return "PMDocument"
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    rootEntityClassName                                                                                            *
  //-------------------------------------------------------------------------------------------------------------------*

  override func rootEntityClassName () -> String {
    return "MyRootEntity"
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    rootObject                                                                                                     *
  //-------------------------------------------------------------------------------------------------------------------*

  var rootObject : MyRootEntity {
    get {
      return mRootObject as MyRootEntity
    }
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    windowControllerDidLoadNib                                                                                     *
  //-------------------------------------------------------------------------------------------------------------------*
  
  override func windowControllerDidLoadNib (aController: NSWindowController) {
    super.windowControllerDidLoadNib (aController)
    nameController = PMObjectArrayController (object:rootObject, tableView:namesTableView)
  //--------------------------- Controller bindings
//--- 'nameController' controller bindings
/*    nameController!.bind ("contentArray",
      toObject:self.rootObject,
      withKeyPath:"mNames",
      options:[
        "NSDeletesObjectsOnRemoveBindingsOption" : true
      ]
    )*/
  //--------------------------- Outlet bindings
  //--- Outlet namesTableView
/*    if nil == namesTableView {
      presentErrorWindow (__FILE__, __LINE__, "the 'namesTableView' outlet is nil") ;
    }
    if namesTableView?.tableColumnWithIdentifier ("name") == nil {
      presentErrorWindow (__FILE__, __LINE__, "the 'namesTableView' NSTableView outlet has no formatter has no column with the name identifier") ;
    }else{
      let cell : AnyObject? = namesTableView?.tableColumnWithIdentifier ("name").dataCell
      let actionCell : NSActionCell = cell as NSActionCell
      if !actionCell.isKindOfClass (NSTextFieldCell) {
        presentErrorWindow (__FILE__, __LINE__, "the dataCell is 'name' column of the 'namesTableView' should be an 'NSTextFieldCell instance") ;
      }
    }
    namesTableView?.tableColumnWithIdentifier ("name").bind ("value",
      toObject:nameController,
      withKeyPath:"arrangedObjects.name",
      options:nil
    )
    if namesTableView?.tableColumnWithIdentifier ("int") == nil {
      presentErrorWindow (__FILE__, __LINE__, "the 'namesTableView' NSTableView outlet has no formatter has no column with the int identifier") ;
    }else{
      let cell : AnyObject? = namesTableView?.tableColumnWithIdentifier ("int").dataCell
      let actionCell : NSActionCell = cell as NSActionCell
      if !actionCell.isKindOfClass (NSTextFieldCell) {
        presentErrorWindow (__FILE__, __LINE__, "the dataCell is 'int' column of the 'namesTableView' should be an 'NSTextFieldCell instance") ;
      }
    }
    namesTableView?.tableColumnWithIdentifier ("int").bind ("value",
      toObject:nameController,
      withKeyPath:"arrangedObjects.aValue",
      options:nil
    )*/
  //--- Outlet canRemoveTextField
    if nil == canRemoveTextField {
      presentErrorWindow (__FILE__, __LINE__, "the 'canRemoveTextField' outlet is nil") ;
    }
    canRemoveTextField?.bind ("value",
      toObject:self,
      withKeyPath:"canRemoveString",
      options:nil
    )
  //--- Outlet addPathButton
    if nil == addPathButton {
      presentErrorWindow (__FILE__, __LINE__, "the 'addPathButton' outlet is nil") ;
    }
    addPathButton?.target = nameController
    addPathButton?.action = "add:"
  //--- Outlet removePathButton
    if nil == removePathButton {
      presentErrorWindow (__FILE__, __LINE__, "the 'removePathButton' outlet is nil") ;
    }
    removePathButton?.target = nameController
    removePathButton?.action = "remove:"
/*    removePathButton?.bind ("enabled",
      toObject:nameController,
      withKeyPath:"canRemove",
      options:nil
    )*/
  //--- Outlet countItemTextField
    if nil == countItemTextField {
      presentErrorWindow (__FILE__, __LINE__, "the 'countItemTextField' outlet is nil") ;
    }
    if (nil != countItemTextField) && (countItemTextField?.formatter == nil) {
      presentErrorWindow (__FILE__, __LINE__, "the 'countItemTextField' outlet has no formatter, it should have an NSNumberFormatter") ;
    }else if (nil != countItemTextField) && !((countItemTextField?.formatter?.isKindOfClass (NSNumberFormatter))!) {
      presentErrorWindow (__FILE__, __LINE__, "the 'countItemTextField outlet has a formatter that is not kind of NSNumberFormatter class") ;
    }
    countItemTextField?.bind ("value",
      toObject:mRootObject,
      withKeyPath:"mNames.@count",
      options:nil
    )
  //--- Outlet countItemMessageTextField
    if nil == countItemMessageTextField {
      presentErrorWindow (__FILE__, __LINE__, "the 'countItemMessageTextField' outlet is nil") ;
    }
    countItemMessageTextField?.bind ("value",
      toObject:self,
      withKeyPath:"countItemMessage",
      options:nil
    )
  //--- Outlet totalTextField
    if nil == totalTextField {
      presentErrorWindow (__FILE__, __LINE__, "the 'totalTextField' outlet is nil") ;
    }
    if (nil != totalTextField) && (totalTextField?.formatter == nil) {
      presentErrorWindow (__FILE__, __LINE__, "the 'totalTextField' outlet has no formatter, it should have an NSNumberFormatter") ;
    }else if (nil != totalTextField) && !((totalTextField?.formatter?.isKindOfClass (NSNumberFormatter))!) {
      presentErrorWindow (__FILE__, __LINE__, "the 'totalTextField outlet has a formatter that is not kind of NSNumberFormatter class") ;
    }
    totalTextField?.bind ("value",
      toObject:self,
      withKeyPath:"total",
      options:nil
    )
  //--------------------------- Add Transient observers
    nameController?.addObserverOf_canRemove (triggerObjectFor_document_2E_PMDocument_2E_canRemoveString)
    rootObject.addObserverOf_mNames (triggerObjectFor_document_2E_PMDocument_2E_countItemMessage)
    rootObject.addObserverOf_mNames (triggerObjectFor_document_2E_PMDocument_2E_total)
    rootObject.addObserverOf_mNames_aValue (triggerObjectFor_document_2E_PMDocument_2E_total)

  //--------------------------- Add Signature observer
/*   var a = NSMutableArray ()
   for i in 0..<50_000 {
     let v = NameEntity (entityManager:mEntityManager)
     a.addObject (v)
   }
   rootObject.mNames = a */
}

  //-------------------------------------------------------------------------------------------------------------------*
  //   removeWindowController                                                                                          *
  //-------------------------------------------------------------------------------------------------------------------*

  override func removeWindowController (inWindowController : NSWindowController) {
  //--------------------------- Add Signature observer
  //--- Unbind Outlets
//    namesTableView?.tableColumnWithIdentifier ("name").unbind ("value")
//    namesTableView?.tableColumnWithIdentifier ("int").unbind ("value")
    canRemoveTextField?.unbind ("value")
    addPathButton?.target = nil
    addPathButton?.action = nil
    removePathButton?.unbind ("enabled")
    removePathButton?.target = nil
    removePathButton?.action = nil
    countItemTextField?.unbind ("value")
    countItemMessageTextField?.unbind ("value")
    totalTextField?.unbind ("value")
  //--- Unbind Controllers
    nameController?.unbind ()
  //  nameController = nil
  //--- Remove Transient observers
   nameController?.removeObserverOf_canRemove (triggerObjectFor_document_2E_PMDocument_2E_canRemoveString)
   rootObject.removeObserverOf_mNames (triggerObjectFor_document_2E_PMDocument_2E_countItemMessage)
   rootObject.removeObserverOf_mNames (triggerObjectFor_document_2E_PMDocument_2E_total)
   rootObject.removeObserverOf_mNames_aValue (triggerObjectFor_document_2E_PMDocument_2E_total)
  //--- Release controllers
    // nameController = nil
  //--- Remove circularities in outlets
  //---
    super.removeWindowController (inWindowController)
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    Transient: canRemoveString                                                                                     *
  //-------------------------------------------------------------------------------------------------------------------*
 
  var canRemoveString_observers = NSMutableSet ()
  var canRemoveString__cache : String?
  var canRemoveString : String {
    if canRemoveString__cache == nil {
      if TRACE_TRANSIENT_TRIGGER {
        NSLog ("Compute transient PMDocument.canRemoveString")
      }
      canRemoveString__cache = "May be"
 //     canRemoveString__cache = compute_PMDocument_canRemoveString (nameController!.canRemove) ;
    }
    return canRemoveString__cache!
  }

  func document_2E_PMDocument_2E_canRemoveString_didChange () {
    self.willChangeValueForKey ("canRemoveString")
    self.didChangeValueForKey  ("canRemoveString")
  }

  func addObserverOf_canRemoveString (inObserver : PMTriggerProtocol) {
    canRemoveString_observers.addObject (inObserver)
    enterTriggerWithObject (inObserver)
  }
 
  func removeObserverOf_canRemoveString (inObserver : PMTriggerProtocol) {
    canRemoveString_observers.removeObject (inObserver)
    enterTriggerWithObject (inObserver)
  }

  var triggerObjectFor_document_2E_PMDocument_2E_canRemoveString__cache : PMTrigger_document_2E_PMDocument_2E_canRemoveString? = nil
  var triggerObjectFor_document_2E_PMDocument_2E_canRemoveString : PMTrigger_document_2E_PMDocument_2E_canRemoveString {
    if triggerObjectFor_document_2E_PMDocument_2E_canRemoveString__cache == nil {
      triggerObjectFor_document_2E_PMDocument_2E_canRemoveString__cache = PMTrigger_document_2E_PMDocument_2E_canRemoveString (object:self)
    }
    return triggerObjectFor_document_2E_PMDocument_2E_canRemoveString__cache!
  }

 
  //-------------------------------------------------------------------------------------------------------------------*
  //    Transient: countItemMessage                                                                                    *
  //-------------------------------------------------------------------------------------------------------------------*
 
  var countItemMessage_observers = NSMutableSet ()
  var countItemMessage__cache : String?
  var countItemMessage : String {
    if countItemMessage__cache == nil {
      if TRACE_TRANSIENT_TRIGGER {
        NSLog ("Compute transient PMDocument.countItemMessage")
      }
      countItemMessage__cache = compute_PMDocument_countItemMessage (rootObject.mNames.count) ;
    }
    return countItemMessage__cache!
  }

  func document_2E_PMDocument_2E_countItemMessage_didChange () {
    self.willChangeValueForKey ("countItemMessage")
    self.didChangeValueForKey  ("countItemMessage")
  }

  func addObserverOf_countItemMessage (inObserver : PMTriggerProtocol) {
    countItemMessage_observers.addObject (inObserver)
    enterTriggerWithObject (inObserver)
  }
 
  func removeObserverOf_countItemMessage (inObserver : PMTriggerProtocol) {
    countItemMessage_observers.removeObject (inObserver)
    enterTriggerWithObject (inObserver)
  }

  var triggerObjectFor_document_2E_PMDocument_2E_countItemMessage__cache : PMTrigger_document_2E_PMDocument_2E_countItemMessage? = nil
  var triggerObjectFor_document_2E_PMDocument_2E_countItemMessage : PMTrigger_document_2E_PMDocument_2E_countItemMessage {
    if triggerObjectFor_document_2E_PMDocument_2E_countItemMessage__cache == nil {
      triggerObjectFor_document_2E_PMDocument_2E_countItemMessage__cache = PMTrigger_document_2E_PMDocument_2E_countItemMessage (object:self)
    }
    return triggerObjectFor_document_2E_PMDocument_2E_countItemMessage__cache!
  }

 
  //-------------------------------------------------------------------------------------------------------------------*
  //    Transient: total                                                                                               *
  //-------------------------------------------------------------------------------------------------------------------*
 
  var total_observers = NSMutableSet ()
  var total__cache : Int64?
  var total : Int64 {
    if total__cache == nil {
      if TRACE_TRANSIENT_TRIGGER {
        NSLog ("Compute transient PMDocument.total")
      }
      total__cache = compute_PMDocument_total (rootObject.mNames.count, rootObject.mNames) ;
    }
    return total__cache!
  }

  func document_2E_PMDocument_2E_total_didChange () {
    self.willChangeValueForKey ("total")
    self.didChangeValueForKey  ("total")
  }

  func addObserverOf_total (inObserver : PMTriggerProtocol) {
    total_observers.addObject (inObserver)
    enterTriggerWithObject (inObserver)
  }
 
  func removeObserverOf_total (inObserver : PMTriggerProtocol) {
    total_observers.removeObject (inObserver)
    enterTriggerWithObject (inObserver)
  }


  var triggerObjectFor_document_2E_PMDocument_2E_total__cache : PMTrigger_document_2E_PMDocument_2E_total? = nil
  var triggerObjectFor_document_2E_PMDocument_2E_total : PMTrigger_document_2E_PMDocument_2E_total {
    if triggerObjectFor_document_2E_PMDocument_2E_total__cache == nil {
      triggerObjectFor_document_2E_PMDocument_2E_total__cache = PMTrigger_document_2E_PMDocument_2E_total (object:self)
    }
    return triggerObjectFor_document_2E_PMDocument_2E_total__cache!
  }

 
}

//---------------------------------------------------------------------------------------------------------------------*
//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


