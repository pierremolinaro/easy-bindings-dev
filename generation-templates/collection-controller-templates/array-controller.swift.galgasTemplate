import Cocoa

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
//    %!["DataSource_" + OWNER_NAME + "_" + ARRAY_CONTROLLER_NAME stringByRightPadding !113 !' ']%*
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

class DataSource_%!OWNER_NAME%_%!ARRAY_CONTROLLER_NAME% : ReadOnlyArrayOf_%!ELEMENT_TYPE_NAME%, EBTableViewDataSource {
  private weak var mModel : ReadOnlyArrayOf_%!ELEMENT_TYPE_NAME%?
  var count = EBTransientProperty_Int ()

  //···················································································································*

  override init () {
    super.init ()
    count.computeFunction = { [weak self] in
      if let unwrappedSelf = self, model = unwrappedSelf.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          return .singleSelection (v.count)
        }
      }else{
        return .noSelection
      }
    }
  }

  //···················································································································*

  override func postEvent () {
    if (prop_cache != nil) {
      prop_cache = nil
      count.postEvent ()
      super.postEvent ()
    }
  }

  //···················································································································*

  private func filterAndSort () -> EBProperty <Array<%!ELEMENT_TYPE_NAME%> > {
    if let model = mModel {
      switch model.prop {
      case .noSelection :
        return .noSelection
      case .multipleSelection :
        return .multipleSelection
      case .singleSelection (let modelArray) :
%if [FILTER_PROPERTIES length] == 0 then
%        let array = NSMutableArray (array:modelArray)
        array.sortUsingDescriptors (mSortDescriptors)
        let sortedObjectArray = array.mutableCopy () as! Array<%!ELEMENT_TYPE_NAME%>
        return .singleSelection (sortedObjectArray)
%
else
%        let array = NSMutableArray ()\n%
%        var isMultiple = false\n%
%        for object in modelArray {\n%
![FILTER_PROPERTIES filterCode !"arrayControllerFilter_" + OWNER_NAME + "_" + ARRAY_CONTROLLER_NAME]
%        }
        if isMultiple {
          return .multipleSelection
        }else{
          array.sortUsingDescriptors (mSortDescriptors)
          let sortedObjectArray = array.mutableCopy () as! Array<NameEntity>
          return .singleSelection (sortedObjectArray)
        }
%end
%     }
    }else{
      return .noSelection
    }
  }

  //···················································································································*
  
  private var mSet = Set<%!ELEMENT_TYPE_NAME%> ()

  var prop_cache : Optional < EBProperty <Array<%!ELEMENT_TYPE_NAME%> > >

  override var prop : EBProperty <Array<%!ELEMENT_TYPE_NAME%> > {
    get {
      if prop_cache == nil {
        prop_cache = filterAndSort ()
        let newObjectSet : Set<%!ELEMENT_TYPE_NAME%>
        switch prop_cache! {
        case .noSelection, .multipleSelection :
          newObjectSet = Set<%!ELEMENT_TYPE_NAME%> ()
        case .singleSelection (let v) :
          newObjectSet = Set<%!ELEMENT_TYPE_NAME%> (v)
        }
        if mSet != newObjectSet {
        //--- Removed object set
          var removedObjectSet = mSet
          removedObjectSet.subtractInPlace (newObjectSet)
%for () in BOUND_COLUMNS do
%          for managedObject : %!ELEMENT_TYPE_NAME% in removedObjectSet {
            for observer in mObserversOf_%!mObservablePropertyName% {
              managedObject.%!mObservablePropertyName%.removeObserver (observer, postEvent:true)
            }
          }
%end%        //--- Added object set
          var addedObjectSet = newObjectSet
          addedObjectSet.subtractInPlace (mSet)
%for () in BOUND_COLUMNS do
%         for managedObject : %!ELEMENT_TYPE_NAME% in addedObjectSet {
            for observer in mObserversOf_%!mObservablePropertyName% {
              managedObject.%!mObservablePropertyName%.addObserver (observer, postEvent:true)
            }
          }
 %end%       //--- Update object set
          mSet = newObjectSet
        }
      }
      return prop_cache!
    }
  }

  //···················································································································*
  //    Sort descriptors                                                                                               *
  //···················································································································*
  
  private var mSortDescriptors : [NSSortDescriptor] = [NSSortDescriptor] () {
    didSet {
      postEvent () // Force sorting
    }
  }

  //···················································································································*
  
  func setSortDescriptors (sortDescriptors : [NSSortDescriptor]) {
    mSortDescriptors = sortDescriptors
  }
  
  //···················································································································*
  //    T A B L E V I E W    D A T A S O U R C E : tableView:sortDescriptorsDidChange:                                 *
  //···················································································································*

  func tableView (aTableView: NSTableView,
                  sortDescriptorsDidChange oldDescriptors: [NSSortDescriptor]) {
    // NSLog ("\%@", __FUNCTION__)
    mSortDescriptors = aTableView.sortDescriptors
  }

  //···················································································································*
  //    T A B L E V I E W    D A T A S O U R C E : numberOfRowsInTableView                                             *
  //···················································································································*

  func numberOfRowsInTableView (NSTableView) -> Int {
    // NSLog ("\%@ (\%ld objects)", __FUNCTION__, prop.count)
    switch prop {
    case .noSelection, .multipleSelection :
      return 0
    case .singleSelection (let v) :
      return v.count
    }
  }

  //···················································································································*

}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
//    %!["Delegate_" + OWNER_NAME + "_" + ARRAY_CONTROLLER_NAME stringByRightPadding !113 !' ']%*
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

@objc(Delegate_%!OWNER_NAME%_%!ARRAY_CONTROLLER_NAME%) class Delegate_%!OWNER_NAME%_%!ARRAY_CONTROLLER_NAME% : EBAbstractProperty, EBTableViewDelegate {
  private var mSet = Set<%!ELEMENT_TYPE_NAME%> ()
  private var mSetShouldBeComputed = true
  private var mSortedArray : DataSource_%!OWNER_NAME%_%!ARRAY_CONTROLLER_NAME%
  private var mIgnoreTableViewSelectionDidChange = true
  var count = EBTransientProperty_Int ()

  //···················································································································*

  init (model:DataSource_%!OWNER_NAME%_%!ARRAY_CONTROLLER_NAME%) {
    mSortedArray = model
    super.init ()
    count.computeFunction = { [weak self] in
     if let unwSelf = self {
        switch unwSelf.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          return .singleSelection (v.count)
        }
      }else{
        return .noSelection
      }
    }
  }

  //···················································································································*
  
  override func postEvent () {
    if !mSetShouldBeComputed {
      mSetShouldBeComputed = true
      count.postEvent ()
      super.postEvent ()
    }
  }

  //···················································································································*
  
  var prop : EBProperty <Set<%!ELEMENT_TYPE_NAME%> > {
    get {
      if mSetShouldBeComputed {
        mSetShouldBeComputed = false
        // NSLog ("mSet \%d", mSet.count)
        switch mSortedArray.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          mSet.intersectInPlace (v)
          // NSLog ("mSet \%d", mSet.count)
          if (mSet.count == 0) && (v.count > 0) {
            mSet.insert (v [0])
          }
        //--- DEBUG :Dictionary of object indexes
          /* var objectDictionary = [%!ELEMENT_TYPE_NAME% : Int] ()
          for (index, object) in enumerate (v) {
            objectDictionary [object] = index
          }
          for object in mSet {
            if let index = objectDictionary [object] {
              NSLog ("SELECTED : \%d, \%@", index, object)
            }
          } */
        //--- DEBUG end
          return .singleSelection (mSet)
        }
      }else{
        switch mSortedArray.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection :
          return .singleSelection (mSet)
        }
      }
    }
  }

  //···················································································································*

  func setProp (value : Set<%!ELEMENT_TYPE_NAME%>) {
    mSet = value
    postEvent ()
  }

  //···················································································································*

  func selectedObjectIndexSet () -> NSIndexSet {
    switch mSortedArray.prop {
    case .noSelection, .multipleSelection :
       return NSIndexSet ()
    case .singleSelection (let v) :
      switch prop {
      case .noSelection, .multipleSelection :
        return NSIndexSet ()
      case .singleSelection (let vv) :
      //--- Dictionary of object indexes
        var objectDictionary = [%!ELEMENT_TYPE_NAME% : Int] ()
        for (index, object) in v.enumerate () {
          objectDictionary [object] = index
        }
        let indexSet = NSMutableIndexSet ()
        for object in vv {
          if let index = objectDictionary [object] {
            indexSet.addIndex (index)
          }
        }
        return indexSet
      }
    }
  }

  //···················································································································*
  //    T A B L E V I E W    D E L E G A T E : tableViewSelectionDidChange:                                            *
  //···················································································································*

  func tableViewSelectionDidChange (notication : NSNotification) {
    // NSLog ("\%@ \%d", __FUNCTION__, mIgnoreTableViewSelectionDidChange)
    if !mIgnoreTableViewSelectionDidChange {
      switch mSortedArray.prop {
      case .noSelection, .multipleSelection :
        break
      case .singleSelection (let v) :
        let tableView = notication.object as! EBTableView
        var newSelectedObjectSet = Set <%!ELEMENT_TYPE_NAME%> ()
        for index in tableView.selectedRowIndexes {
          newSelectedObjectSet.insert (v.objectAtIndex (index, file: __FILE__, line: __LINE__))
        }
        setProp (newSelectedObjectSet)
      }
    }
  }

  //···················································································································*
  //    T A B L E V I E W    D E L E G A T E : tableView:viewForTableColumn:row:                                       *
  //···················································································································*

  func tableView (tableView : NSTableView,
                  viewForTableColumn inTableColumn: NSTableColumn?,
                  row inRowIndex: Int) -> NSView? {
 //   NSLog ("\%@, row \%d, column \%@", __FUNCTION__, inRowIndex, inTableColumn!.identifier)
    switch mSortedArray.prop {
    case .noSelection, .multipleSelection :
      return nil
    case .singleSelection (let v) :
      let columnIdentifier = inTableColumn!.identifier
      let result : NSTableCellView = tableView.makeViewWithIdentifier (columnIdentifier, owner:self) as! NSTableCellView
      // result.textField?.tag = inRowIndex
      let object = v.objectAtIndex (inRowIndex, file:__FILE__, line:__LINE__)
      %
for () in BOUND_COLUMNS
  do
    %if columnIdentifier == "%!mColumnName%" {\n%
    %      if let cell : %!mColumnOutletTypeName%_Cell = result as? %!mColumnOutletTypeName%_Cell {\n%
    %        cell.configureWithProperty (object.%!mObservablePropertyName%)\n%
    %      }\n%
    %      %
  between %}else %
  after %}\n%
end
%     return result
    }
  }

  //···················································································································*

  func willReload () {
    mIgnoreTableViewSelectionDidChange = true
  }

  //···················································································································*
  
  func didReload () {
    mIgnoreTableViewSelectionDidChange = false
  }

%for () in BOUND_COLUMNS do
%  //···················································································································*

/*  func set_%!mObservablePropertyName%_Action (sender : %!mColumnOutletTypeName%) {
    switch mSortedArray.prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      let row = sender.tag
      let object = v.objectAtIndex (row, file:__FILE__, line:__LINE__)
      object.%!mObservablePropertyName%.validateAndSetProp (%![mPropertyType transformerForTableViewAction !"sender"]%, windowForSheet:sender.window)
    }
  } */

%
end
%  //···················································································································*

}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
//    %!["ArrayController_" + OWNER_NAME + "_" + ARRAY_CONTROLLER_NAME stringByRightPadding !113 !' ']%*
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

class ArrayController_%!OWNER_NAME%_%!ARRAY_CONTROLLER_NAME% : EBObject {
  private let mAllowsEmptySelection = false
  private let mAllowsMultipleSelection = true

  var sortedArray = DataSource_%!OWNER_NAME%_%!ARRAY_CONTROLLER_NAME% ()

  var selectedArray = TransientArrayOf_%!ELEMENT_TYPE_NAME% ()

  private var mSelectedSet : Delegate_%!OWNER_NAME%_%!ARRAY_CONTROLLER_NAME%?

  private var mTableViewControllerArray = [Controller_EBTableView_controller] ()

  private var mModel : %!MODEL_TYPE_NAME_2%?
 
  //···················································································································*
  //    init                                                                                                           *
  //···················································································································*

  override init () {
    super.init ()
    selectedArray.computeFunction = {
      if let selectedSet = self.mSelectedSet {
        switch selectedSet.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let selSet) :
          switch self.sortedArray.prop {
          case .noSelection :
            return .noSelection
          case .multipleSelection :
            return .multipleSelection
          case .singleSelection (let v) :
            var result = Array<%!ELEMENT_TYPE_NAME%> ()
            for object in v {
              if selSet.contains (object) {
                result.append (object)
              }
            }
            return .singleSelection (result)
          }
        }
      }else{
        return .noSelection
      }
    }
  }

  //···················································································································*
  //    bind_modelAndView                                                                                              *
  //···················································································································*

  func bind_modelAndView (model:%!MODEL_TYPE_NAME_2%, tableViewArray:[EBTableView], file:String, line:Int) {
    mModel = model
    sortedArray.mModel = model
    let selectedSet = Delegate_%!OWNER_NAME%_%!ARRAY_CONTROLLER_NAME% (model:sortedArray)
    mSelectedSet = selectedSet
    for tableView in tableViewArray {
      let tableViewController = Controller_EBTableView_controller (
        delegate:selectedSet,
        tableView:tableView,
        file:file,
        line:line
      )
      mTableViewControllerArray.append (tableViewController)
      tableView.allowsEmptySelection = mAllowsEmptySelection
      tableView.allowsMultipleSelection = mAllowsMultipleSelection
%for () in BOUND_COLUMNS do
%    //--- Check '%!mColumnName%' column
      if let anyObject: NSView = tableView.makeViewWithIdentifier ("%!mColumnName%", owner:self) {
        if let unwrappedTableCellView = anyObject as? %!mColumnOutletTypeName%_Cell {
          if !unwrappedTableCellView.outletIsDefined () {
            presentErrorWindow (file,
              line: line,
              errorMessage:"\"%!mColumnName%\" column view is not an instance of %!mColumnOutletTypeName%"
            )
          }
        }else{
          presentErrorWindow (file,
            line: line,
            errorMessage:"\"%!mColumnName%\" column cell view is not an instance of %!mColumnOutletTypeName%_Cell"
          )
        }
      }else{
        presentErrorWindow (file,
          line: line,
          errorMessage:"\"%!mColumnName%\" column view unknown, or table view is NSCell-based"
        )
      }
      if let columnName : NSTableColumn = tableView.tableColumnWithIdentifier ("%!mColumnName%") {
        columnName.sortDescriptorPrototype = NSSortDescriptor (key:"%!mObservablePropertyName%_keyCodingValue", ascending:true)
      }
%end
%    //--- Set descriptors from first column of table view
      let columns = tableView.tableColumns as NSArray
      if columns.count > 0 {
        let firstColumn = columns [0] as! NSTableColumn
        if let sdp = firstColumn.sortDescriptorPrototype {
          let sortDescriptorArray = NSArray (object:sdp) as! [NSSortDescriptor]
          tableView.sortDescriptors = sortDescriptorArray
          sortedArray.setSortDescriptors (sortDescriptorArray)
        }
      }
      sortedArray.addObserver (tableViewController, postEvent:true)
      selectedSet.addObserver (tableViewController, postEvent:true)
   //--- Set table view delegate and data source
      tableView.setDataSource (sortedArray)
      tableView.setDelegate (selectedSet)
   }
  //--- Add observers
%
for () in BOUND_COLUMNS do
  %    model.addObserverOf_%!mObservablePropertyName% (sortedArray, postEvent:true)\n%
end
%    model.addObserver (sortedArray, postEvent:true)
    sortedArray.addObserver (selectedSet, postEvent:true)
    selectedSet.addObserver (selectedArray, postEvent:true)
  }

  //···················································································································*
  //    unbind_modelAndView                                                                                            *
  //···················································································································*

  func unbind_modelAndView () {
%
for () in BOUND_COLUMNS do
  %    mModel?.removeObserverOf_%!mObservablePropertyName% (sortedArray, postEvent:false)\n%
end
%    mModel?.removeObserver (sortedArray, postEvent:false)
    if let selectedSet = mSelectedSet {
      sortedArray.removeObserver (selectedSet, postEvent:false)
    }
    mSelectedSet?.removeObserver (selectedArray, postEvent:false)
     for tableViewController in mTableViewControllerArray {
      sortedArray.removeObserver (tableViewController, postEvent:false)
      mSelectedSet?.removeObserver (tableViewController, postEvent:false)
    }
    mTableViewControllerArray = []
    selectedArray.computeFunction = nil
    mSelectedSet = nil
    mModel = nil
 }
 
%switch MODEL_KIND
case transientModel :
case storedArrayModel :
% 
  //···················································································································*
  //    add                                                                                                            *
  //···················································································································*

   func add (inSender : NSButton?) {
    if let model = mModel, selectedSet = mSelectedSet {
      switch model.prop {
      case .noSelection, .multipleSelection :
        break
      case .singleSelection (let v) :
        let newObject : %!ELEMENT_TYPE_NAME% = %!ELEMENT_TYPE_NAME% ()
        var array = v
        array.append (newObject)
      //--- New object is the selection
        var newSelectedObjectSet = Set <%!ELEMENT_TYPE_NAME%> ()
        newSelectedObjectSet.insert (newObject)
        selectedSet.setProp (newSelectedObjectSet)
        model.setProp (array)
      }
    }
  }

  //···················································································································*
  //    remove                                                                                                         *
  //···················································································································*

  func remove (inSender : NSButton?) {
    if let model = mModel, selectedSet = mSelectedSet {
      switch model.prop {
      case .noSelection, .multipleSelection :
        break
      case .singleSelection (let model_prop) :
        switch selectedSet.prop {
        case .noSelection, .multipleSelection :
          break
        case .singleSelection (let selectedSet_prop) :
          switch sortedArray.prop {
          case .noSelection, .multipleSelection :
            break
          case .singleSelection (let sortedArray_prop) :
          //------------- Find the object to be selected after selected object removing
          //--- Dictionary of object sorted indexes
            var sortedObjectDictionary = [%!ELEMENT_TYPE_NAME% : Int] ()
            for (index, object) in sortedArray_prop.enumerate () {
              sortedObjectDictionary [object] = index
            }
            var indexArrayOfSelectedObjects = [Int] ()
            for object in selectedSet_prop {
              let index = sortedObjectDictionary [object]
              if let idx = index {
                indexArrayOfSelectedObjects.append (idx)
              }
            }
          //--- Sort
            indexArrayOfSelectedObjects.sortInPlace { $0 < $1 }
          //--- Find the first index of a non selected object
            var newSelectionIndex = indexArrayOfSelectedObjects [0] + 1
            for index in indexArrayOfSelectedObjects {
              if newSelectionIndex < index {
                break
              }else{
                newSelectionIndex = index + 1
              }
            }
            var newSelectedObject : %!ELEMENT_TYPE_NAME%? = nil
            if (newSelectionIndex >= 0) && (newSelectionIndex < sortedArray_prop.count) {
              newSelectedObject = sortedArray_prop [newSelectionIndex]
            }
          //----------------------------------------- Remove selected object
          //--- Dictionary of object absolute indexes
            var objectDictionary = [%!ELEMENT_TYPE_NAME% : Int] ()
            for (index, object) in model_prop.enumerate () {
              objectDictionary [object] = index
            }
          //--- Build selected objects index array
            var selectedObjectIndexArray = [Int] ()
            for object in selectedSet_prop {
              let index = objectDictionary [object]
              if let idx = index {
                selectedObjectIndexArray.append (idx)
              }
            }
          //--- Sort in reverse order
            selectedObjectIndexArray.sortInPlace { $1 < $0 }
          //--- Remove objects, in reverse of order of their index
            var newObjectArray = model_prop
            for index in selectedObjectIndexArray {
              newObjectArray.removeAtIndex (index)
            }
          //----------------------------------------- Set new selection
            var newSelectionSet = Set <%!ELEMENT_TYPE_NAME%> ()
            if let object = newSelectedObject {
              newSelectionSet.insert (object)
            }
            mSelectedSet?.setProp (newSelectionSet)
          //----------------------------------------- Set new object array
            model.setProp (newObjectArray)
          }
        }
      }
    }
  }
%
case relationshipModel :
% 
  //···················································································································*
  //    add                                                                                                            *
  //···················································································································*

   func add (inSender : NSButton?) {
    if let model = mModel,
           owner = model.owner,
           managedObjectContext = owner.managedObjectContext (),
           selectedSet = mSelectedSet {
      switch model.prop {
      case .noSelection, .multipleSelection :
        break
      case .singleSelection (let v) :
        let newObject : %!ELEMENT_TYPE_NAME% = %!ELEMENT_TYPE_NAME% (managedObjectContext:managedObjectContext)
        var array = v
        array.append (newObject)
      //--- New object is the selection
        var newSelectedObjectSet = Set <%!ELEMENT_TYPE_NAME%> ()
        newSelectedObjectSet.insert (newObject)
        selectedSet.setProp (newSelectedObjectSet)
        model.setProp (array)
      }
    }
  }

  //···················································································································*
  //    remove                                                                                                         *
  //···················································································································*

  func remove (inSender : NSButton?) {
    if let model = mModel,
           owner = model.owner,
           managedObjectContext = owner.managedObjectContext (),
           selectedSet = mSelectedSet {
      switch model.prop {
      case .noSelection, .multipleSelection :
        break
      case .singleSelection (let model_prop) :
        switch selectedSet.prop {
        case .noSelection, .multipleSelection :
          break
        case .singleSelection (let selectedSet_prop) :
          switch sortedArray.prop {
          case .noSelection, .multipleSelection :
            break
          case .singleSelection (let sortedArray_prop) :
          //------------- Find the object to be selected after selected object removing
          //--- Dictionary of object sorted indexes
            var sortedObjectDictionary = [%!ELEMENT_TYPE_NAME% : Int] ()
            for (index, object) in sortedArray_prop.enumerate () {
              sortedObjectDictionary [object] = index
            }
            var indexArrayOfSelectedObjects = [Int] ()
            for object in selectedSet_prop {
              managedObjectContext.removeManagedObject (object)
              let index = sortedObjectDictionary [object]
              if let idx = index {
                indexArrayOfSelectedObjects.append (idx)
              }
            }
          //--- Sort
            indexArrayOfSelectedObjects.sortInPlace { $0 < $1 }
          //--- Find the first index of a non selected object
            var newSelectionIndex = indexArrayOfSelectedObjects [0] + 1
            for index in indexArrayOfSelectedObjects {
              if newSelectionIndex < index {
                break
              }else{
                newSelectionIndex = index + 1
              }
            }
            var newSelectedObject : %!ELEMENT_TYPE_NAME%? = nil
            if (newSelectionIndex >= 0) && (newSelectionIndex < sortedArray_prop.count) {
              newSelectedObject = sortedArray_prop [newSelectionIndex]
            }
          //----------------------------------------- Remove selected object
          //--- Dictionary of object absolute indexes
            var objectDictionary = [%!ELEMENT_TYPE_NAME% : Int] ()
            for (index, object) in model_prop.enumerate () {
              objectDictionary [object] = index
            }
          //--- Build selected objects index array
            var selectedObjectIndexArray = [Int] ()
            for object in selectedSet_prop {
              let index = objectDictionary [object]
              if let idx = index {
                selectedObjectIndexArray.append (idx)
              }
            }
          //--- Sort in reverse order
            selectedObjectIndexArray.sortInPlace { $1 < $0 }
          //--- Remove objects, in reverse of order of their index
            var newObjectArray = model_prop
            for index in selectedObjectIndexArray {
              newObjectArray.removeAtIndex (index)
            }
          //----------------------------------------- Set new selection
            var newSelectionSet = Set <%!ELEMENT_TYPE_NAME%> ()
            if let object = newSelectedObject {
              newSelectionSet.insert (object)
            }
            mSelectedSet?.setProp (newSelectionSet)
          //----------------------------------------- Set new object array
            model.setProp (newObjectArray)
          }
        }
      }
    }
  }
%end%
  //···················································································································*

}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

