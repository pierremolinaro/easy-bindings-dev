//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

private let DEBUG_EVENT = false

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"DataSource_" + OWNER_NAME + "_" + ARRAY_CONTROLLER_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(DataSource_%!OWNER_NAME%_%!ARRAY_CONTROLLER_NAME%)
final class DataSource_%!OWNER_NAME%_%!ARRAY_CONTROLLER_NAME% : TransientArrayOf_%!ELEMENT_TYPE_NAME%, EBTableViewDataSource {

  //····················································································································
  //    T A B L E V I E W    D A T A S O U R C E : numberOfRowsInTableView
  //····················································································································

  func numberOfRowsInTableView (_ : NSTableView) -> Int {
    if DEBUG_EVENT {
      print ("\(__FUNCTION__)")
    }
    switch prop {
    case .noSelection, .multipleSelection :
      return 0
    case .singleSelection (let v) :
      return v.count
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"SelectedSet_" + OWNER_NAME + "_" + ARRAY_CONTROLLER_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(SelectedSet_%!OWNER_NAME%_%!ARRAY_CONTROLLER_NAME%)
final class SelectedSet_%!OWNER_NAME%_%!ARRAY_CONTROLLER_NAME% : EBAbstractProperty {
  private let mAllowsEmptySelection : Bool
  private let mAllowsMultipleSelection : Bool
  private let mSortedArray : DataSource_%!OWNER_NAME%_%!ARRAY_CONTROLLER_NAME%

  //····················································································································

  init (allowsEmptySelection : Bool,
        allowsMultipleSelection : Bool,
        sortedArray : DataSource_%!OWNER_NAME%_%!ARRAY_CONTROLLER_NAME%) {
    mAllowsMultipleSelection = allowsMultipleSelection
    mAllowsEmptySelection = allowsEmptySelection
    mSortedArray = sortedArray
    super.init ()
  }

  //····················································································································

  private var mPrivateSet = Set<%!ELEMENT_TYPE_NAME%> () {
    didSet {
      if mPrivateSet != oldValue {
        postEvent ()
      }
    }
  }

  //····················································································································

  var mSet : Set<%!ELEMENT_TYPE_NAME%> {
    set {
      var newSelectedSet = newValue
      switch mSortedArray.prop {
      case .noSelection, .multipleSelection :
        break ;
      case .singleSelection (let sortedArray) :
        if !mAllowsEmptySelection && (newSelectedSet.count == 0) && (sortedArray.count > 0) {
          newSelectedSet = Set (arrayLiteral: sortedArray [0])
        }else if !mAllowsMultipleSelection && (newSelectedSet.count > 1) {
          newSelectedSet = Set (arrayLiteral: newSelectedSet.first!)
        }
      }
      mPrivateSet = newSelectedSet
    }
    get {
      return mPrivateSet
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"ArrayController_" + OWNER_NAME + "_" + ARRAY_CONTROLLER_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(ArrayController_%!OWNER_NAME%_%!ARRAY_CONTROLLER_NAME%)
final class ArrayController_%!OWNER_NAME%_%!ARRAY_CONTROLLER_NAME% : EBObject, EBTableViewDelegate {

  private var mModel : %!MODEL_TYPE_NAME_2%? = nil

  let sortedArray = DataSource_%!OWNER_NAME%_%!ARRAY_CONTROLLER_NAME% ()

  let selectedArray = TransientArrayOf_%!ELEMENT_TYPE_NAME% ()

  private let mSelectedSet : SelectedSet_%!OWNER_NAME%_%!ARRAY_CONTROLLER_NAME%

  private var mTableViewDataSourceControllerArray = [DataSource_EBTableView_controller] ()
  private var mTableViewSelectionControllerArray = [Selection_EBTableView_controller] ()
  private var mTableViewArray = [EBTableView] ()

  private var mSortDescriptorArray = [(String, Bool)] () { // Key, ascending
    didSet {
      sortedArray.postEvent ()
      for tableView in mTableViewArray {
        var first = true
        for (key, ascending) in mSortDescriptorArray {
          if let column = tableView.tableColumnWithIdentifier (key) {
            tableView.setIndicatorImage (
              first ? NSImage (named:ascending ? "NSAscendingSortIndicator" : "NSDescendingSortIndicator") : nil,
              inTableColumn:column
            )
            first = false
          }
        }
      }
    }
  }

%
for () in ATTRIBUTE_VALUES do
%  private let %!mValue0% = %!mValue1%\n%
end
%  
  //····················································································································
  //    init
  //····················································································································

  override init () {
    mSelectedSet = SelectedSet_%!OWNER_NAME%_%!ARRAY_CONTROLLER_NAME% (
      allowsEmptySelection:allowsEmptySelection,
      allowsMultipleSelection:allowsMultipleSelection,
      sortedArray:sortedArray
    )
    super.init ()
  //--- Set selected array compute function
    setSelectedArrayComputeFunction ()
  //--- Set sorted array compute function
    setFilterAndSortFunction ()
  }

  //····················································································································

  private final func setSelectedArrayComputeFunction () {
    selectedArray.readModelFunction = {
      switch self.sortedArray.prop {
      case .noSelection :
        return .noSelection
      case .multipleSelection :
        return .multipleSelection
      case .singleSelection (let v) :
        var result = [%!ELEMENT_TYPE_NAME%] ()
        for object in v {
          if self.mSelectedSet.mSet.contains (object) {
            result.append (object)
          }
        }
        return .singleSelection (result)
      }
    }
  }

%
if [SORTED_COLUMNS length] > 0 then
%  //····················································································································

  func isOrderedBefore (left : %!ELEMENT_TYPE_NAME%, _ right : %!ELEMENT_TYPE_NAME%) -> Bool {
    var order = NSComparisonResult.OrderedSame
    for (column, ascending) in mSortDescriptorArray {\n%
for () in SORTED_COLUMNS
  before
  %      %
  do
  %if column == "%!mColumnName%" {\n%
  %        order = compare_%![mSortPropertyType swiftTypeName]% (left.%!mObservablePropertyForSorting%, right:right.%!mObservablePropertyForSorting%)\n%
  between
  %      }else %
  after
  %      }\n%
end
%      if !ascending {
        switch order {
        case .OrderedAscending : order = .OrderedDescending
        case .OrderedDescending : order = .OrderedAscending
        case .OrderedSame : break // Exit from switch
        }
      }
      if order != .OrderedSame {
        break // Exit from for
      }
    }
    return order == .OrderedAscending
  }

%
end
%  //····················································································································

  private final func setFilterAndSortFunction () {
    sortedArray.readModelFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let modelArray) :
%if [FILTER_PROPERTIES length] == 0 then
  if [SORTED_COLUMNS length] == 0 then
    %          return .singleSelection (modelArray)\n%
  else
    %          let sortedArray = modelArray.sort ({self.isOrderedBefore ($0, $1)})\n%
    %          return .singleSelection (sortedArray)\n%
  end
else
  %          var filteredArray = [%!ELEMENT_TYPE_NAME%] ()\n%
  %          var isMultiple = false\n%
  %          for object in modelArray {\n%
  ![FILTER_PROPERTIES filterCode !"arrayControllerFilter_" + OWNER_NAME + "_" + ARRAY_CONTROLLER_NAME]
  %          }\n%
  %          if isMultiple {\n%
  %            return .multipleSelection\n%
  %          }else{\n%
  if [SORTED_COLUMNS length] == 0 then
    %            return .singleSelection (filteredArray)\n%
  else
    %            let sortedFilteredArray = filteredArray.sort ({self.isOrderedBefore ($0, $1)})\n%
    %            return .singleSelection (sortedFilteredArray)\n%
  end
  %          }\n%
end
%        }
      }else{
        return .noSelection
      }
    }
  }

  //····················································································································
  //    Explorer
  //····················································································································

  final func addExplorer (name : String,
                          inout y : CGFloat,
                          view : NSView) {
  }

  //····················································································································
  //    bind_modelAndView
  //····················································································································

  func bind_modelAndView (model:%!MODEL_TYPE_NAME_2%, tableViewArray:[EBTableView], file:String, line:Int) {
    if DEBUG_EVENT {
      print ("\(__FUNCTION__)")
    }
  //--- Add observers
    mModel = model
    model.addEBObserver (sortedArray)
    sortedArray.addEBObserver (mSelectedSet)
    mSelectedSet.addEBObserver (selectedArray)
  //--- Add observed properties (for filtering and sorting)
%
for () in OBSERVED_PROPERTIES_FOR_SORTING_AND_FILERING do
  %    model.addEBObserverOf_%!key% (sortedArray)\n%
end
%  //--- Bind table views
    mTableViewArray = tableViewArray
    for tableView in tableViewArray {
      bind_tableView (tableView, file:file, line:line)
    }
  }

  //····················································································································
  //    unbind_modelAndView
  //····················································································································

  func unbind_modelAndView () {
    if DEBUG_EVENT {
      print ("\(__FUNCTION__)")
    }
    mModel?.removeEBObserver (sortedArray)
    sortedArray.removeEBObserver (mSelectedSet)
    mSelectedSet.removeEBObserver (selectedArray)
  //--- Remove observed properties (for filtering and sorting)
%
for () in OBSERVED_PROPERTIES_FOR_SORTING_AND_FILERING do
  %    mModel?.removeEBObserverOf_%!key% (sortedArray)\n%
end
%    for tvc in mTableViewDataSourceControllerArray {
      sortedArray.removeEBObserver (tvc)
    }
    for tvc in mTableViewSelectionControllerArray {
      mSelectedSet.removeEBObserver (tvc)
    }
  //---
    mTableViewArray = [EBTableView] ()
    selectedArray.readModelFunction = nil
    sortedArray.readModelFunction = nil
    mSelectedSet.mSet = Set ()
    mTableViewDataSourceControllerArray = []
    mTableViewSelectionControllerArray = []
    mModel = nil
 }

  //····················································································································
  //    bind_tableView
  //····················································································································

  private func bind_tableView (tableView:EBTableView,
                               file:String,
                               line:Int) {
    if DEBUG_EVENT {
      print ("\(__FUNCTION__)")
    }
    tableView.allowsEmptySelection = allowsEmptySelection
    tableView.allowsMultipleSelection = allowsMultipleSelection
    tableView.setDataSource (sortedArray)
    tableView.setDelegate (self)
  //--- Set table view data source controller
    let dataSourceTableViewController = DataSource_EBTableView_controller (delegate:self, tableView:tableView)
    sortedArray.addEBObserver (dataSourceTableViewController)
    mTableViewDataSourceControllerArray.append (dataSourceTableViewController)
  //--- Set table view selection controller
    let selectionTableViewController = Selection_EBTableView_controller (delegate:self, tableView:tableView)
    mSelectedSet.addEBObserver (selectionTableViewController)
    mTableViewSelectionControllerArray.append (selectionTableViewController)
%for () in BOUND_COLUMNS do
%  //--- Check '%!mColumnName%' column
    if let column : NSTableColumn = tableView.tableColumnWithIdentifier ("%!mColumnName%") {
      column.sortDescriptorPrototype = nil
    }else{
      presentErrorWindow (file,
        line: line,
        errorMessage:"\"%!mColumnName%\" column view unknown"
      )
    }
%
end
%  //--- Set descriptors from first column of table view
    var newSortDescriptorArray = [(String, Bool)] ()
    for column in tableView.tableColumns {
      newSortDescriptorArray.append ((column.identifier, true)) // Ascending
    }
    mSortDescriptorArray = newSortDescriptorArray
  }

 //····················································································································

  func selectedObjectIndexSet () -> NSIndexSet {
    switch sortedArray.prop {
    case .noSelection, .multipleSelection :
       return NSIndexSet ()
    case .singleSelection (let v) :
    //--- Dictionary of object indexes
      var objectDictionary = [%!ELEMENT_TYPE_NAME% : Int] ()
      for (index, object) in v.enumerate () {
        objectDictionary [object] = index
      }
      let indexSet = NSMutableIndexSet ()
      for object in mSelectedSet.mSet {
        if let index = objectDictionary [object] {
          indexSet.addIndex (index)
        }
      }
      return indexSet
    }
  }

  //····················································································································
  //    T A B L E V I E W    D E L E G A T E : tableViewSelectionDidChange:
  //····················································································································

  func tableViewSelectionDidChange (notication : NSNotification) {
    if DEBUG_EVENT {
      print ("\(__FUNCTION__)")
    }
    switch sortedArray.prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      let tableView = notication.object as! EBTableView
      var newSelectedObjectSet = Set <%!ELEMENT_TYPE_NAME%> ()
      for index in tableView.selectedRowIndexes {
        newSelectedObjectSet.insert (v.objectAtIndex (index, file: __FILE__, line: __LINE__))
      }
      mSelectedSet.mSet = newSelectedObjectSet
    }
  }

  //····················································································································
  //    T A B L E V I E W    D E L E G A T E : tableView:viewForTableColumn:mouseDownInHeaderOfTableColumn:
  //····················································································································

  func tableView (tableView: NSTableView, mouseDownInHeaderOfTableColumn tableColumn: NSTableColumn) {
    var newSortDescriptorArray = [(String, Bool)] ()
    let identifier : String = tableColumn.identifier
    for (column, ascending) in mSortDescriptorArray {
      if identifier == column {
        newSortDescriptorArray.insert ((column, !ascending), atIndex:0)
      }else{
        newSortDescriptorArray.append ((column, !ascending))
      }
    }
    mSortDescriptorArray = newSortDescriptorArray
  }
  //····················································································································
  //    T A B L E V I E W    D E L E G A T E : tableView:viewForTableColumn:row:
  //····················································································································

  func tableView (tableView : NSTableView,
                  viewForTableColumn inTableColumn: NSTableColumn?,
                  row inRowIndex: Int) -> NSView? {
    if DEBUG_EVENT {
      print ("\(__FUNCTION__)")
    }
    switch sortedArray.prop {
    case .noSelection, .multipleSelection :
      return nil
    case .singleSelection (let v) :
      let columnIdentifier = inTableColumn!.identifier
      let result : NSTableCellView = tableView.makeViewWithIdentifier (columnIdentifier, owner:self) as! NSTableCellView
      if !reuseTableViewCells () {
        result.identifier = nil // So result cannot be reused, will be freed
      }
      let object = v.objectAtIndex (inRowIndex, file:__FILE__, line:__LINE__)
      %
for () in BOUND_COLUMNS
  do
    %if columnIdentifier == "%!mColumnName%" {\n%
    %        if let cell : %!mColumnOutletTypeName%_TableViewCell = result as? %!mColumnOutletTypeName%_TableViewCell {\n%
    %          cell.mUnbindFunction = { [weak cell] in\n%
    if mRunAction != "" then
    %            cell?.mCellOutlet?.target = nil\n%
    %            cell?.mCellOutlet?.action = ""\n%
    end
    for () in mRegularBindingsGenerationList do
    %            cell?.mCellOutlet?.unbind_%!mBindingName% ()\n%
    end
    %          }\n%
    %          cell.mUnbindFunction? ()\n%
    if mRunAction != "" then
    %          cell.mCellOutlet?.target = object\n%
    %          cell.mCellOutlet?.action = "%!mRunAction%:"\n%
    end
    for () in mRegularBindingsGenerationList do
    %          cell.mCellOutlet?.bind_%!mBindingName% (%
      for () in mBoundObjectStringList do
        !mValue%, %
      end
      %file:__FILE__, line:__LINE__%!mBindingOptionsString%)\n%
    end
    %        }\n%
    %      %
  between
    %}else %
  after
   %}else{\n%
   %        NSLog ("Unknown column '\(columnIdentifier)'")\n%
   %      }\n% 
end
%      return result
    }
  }
 
%switch MODEL_KIND
case transientModel :
case storedArrayModel :
% 
  //····················································································································
  //    add
  //····················································································································

   func add (inSender : NSButton?) {
    if DEBUG_EVENT {
      print ("\(__FUNCTION__)")
    }
    if let model = mModel {
      switch model.prop {
      case .noSelection, .multipleSelection :
        break
      case .singleSelection (let v) :
        let newObject : %!ELEMENT_TYPE_NAME% = %!ELEMENT_TYPE_NAME% ()
        var array = v
        array.append (newObject)
      //--- New object is the selection
        var newSelectedObjectSet = Set <%!ELEMENT_TYPE_NAME%> ()
        newSelectedObjectSet.insert (newObject)
        mSelectedSet.mSet = newSelectedObjectSet
        model.setProp (array)
      }
    }
  }

  //····················································································································
  //    remove
  //····················································································································

  func remove (inSender : NSButton?) {
    if DEBUG_EVENT {
      print ("\(__FUNCTION__)")
    }
    if let model = mModel {
      switch model.prop {
      case .noSelection, .multipleSelection :
        break
      case .singleSelection (let model_prop) :
        switch sortedArray.prop {
        case .noSelection, .multipleSelection :
          break
        case .singleSelection (let sortedArray_prop) :
        //------------- Find the object to be selected after selected object removing
        //--- Dictionary of object sorted indexes
          var sortedObjectDictionary = [%!ELEMENT_TYPE_NAME% : Int] ()
          for (index, object) in sortedArray_prop.enumerate () {
            sortedObjectDictionary [object] = index
          }
          var indexArrayOfSelectedObjects = [Int] ()
          for object in mSelectedSet.mSet {
            let index = sortedObjectDictionary [object]
            if let idx = index {
              indexArrayOfSelectedObjects.append (idx)
            }
          }
        //--- Sort
          indexArrayOfSelectedObjects.sortInPlace { $0 < $1 }
        //--- Find the first index of a non selected object
          var newSelectionIndex = indexArrayOfSelectedObjects [0] + 1
          for index in indexArrayOfSelectedObjects {
            if newSelectionIndex < index {
              break
            }else{
              newSelectionIndex = index + 1
            }
          }
          var newSelectedObject : %!ELEMENT_TYPE_NAME%? = nil
          if (newSelectionIndex >= 0) && (newSelectionIndex < sortedArray_prop.count) {
            newSelectedObject = sortedArray_prop [newSelectionIndex]
          }
        //----------------------------------------- Remove selected object
        //--- Dictionary of object absolute indexes
          var objectDictionary = [%!ELEMENT_TYPE_NAME% : Int] ()
          for (index, object) in model_prop.enumerate () {
            objectDictionary [object] = index
          }
        //--- Build selected objects index array
          var selectedObjectIndexArray = [Int] ()
          for object in mSelectedSet.mSet {
            let index = objectDictionary [object]
            if let idx = index {
              selectedObjectIndexArray.append (idx)
            }
          }
        //--- Sort in reverse order
          selectedObjectIndexArray.sortInPlace { $1 < $0 }
        //--- Remove objects, in reverse of order of their index
          var newObjectArray = model_prop
          for index in selectedObjectIndexArray {
            newObjectArray.removeAtIndex (index)
          }
        //----------------------------------------- Set new selection
          var newSelectionSet = Set <%!ELEMENT_TYPE_NAME%> ()
          if let object = newSelectedObject {
            newSelectionSet.insert (object)
          }
          mSelectedSet.mSet = newSelectionSet
        //----------------------------------------- Set new object array
          model.setProp (newObjectArray)
        }
      }
    }
  }
%
case relationshipModel :
% 
  //····················································································································
  //    add
  //····················································································································

   func add (inSender : NSButton?) {
    if DEBUG_EVENT {
      print ("\(__FUNCTION__)")
    }
    if let model = mModel,
           owner = model.owner,
           managedObjectContext = owner.managedObjectContext () {
      switch model.prop {
      case .noSelection, .multipleSelection :
        break
      case .singleSelection (let v) :
        let newObject : %!ELEMENT_TYPE_NAME% = %!ELEMENT_TYPE_NAME% (managedObjectContext:managedObjectContext)
        var array = v
        array.append (newObject)
      //--- New object is the selection
        var newSelectedObjectSet = Set <%!ELEMENT_TYPE_NAME%> ()
        newSelectedObjectSet.insert (newObject)
        mSelectedSet.mSet = newSelectedObjectSet
        model.setProp (array)
      }
    }
  }

  //····················································································································
  //    remove
  //····················································································································

  func remove (inSender : NSButton?) {
    if DEBUG_EVENT {
      print ("\(__FUNCTION__)")
    }
    if let model = mModel,
           owner = model.owner,
           managedObjectContext = owner.managedObjectContext () {
      switch model.prop {
      case .noSelection, .multipleSelection :
        break
      case .singleSelection (let model_prop) :
        switch sortedArray.prop {
        case .noSelection, .multipleSelection :
          break
        case .singleSelection (let sortedArray_prop) :
        //------------- Find the object to be selected after selected object removing
        //--- Dictionary of object sorted indexes
          var sortedObjectDictionary = [%!ELEMENT_TYPE_NAME% : Int] ()
          for (index, object) in sortedArray_prop.enumerate () {
            sortedObjectDictionary [object] = index
          }
          var indexArrayOfSelectedObjects = [Int] ()
          for object in mSelectedSet.mSet {
            managedObjectContext.removeManagedObject (object)
            let index = sortedObjectDictionary [object]
            if let idx = index {
              indexArrayOfSelectedObjects.append (idx)
            }
          }
        //--- Sort
          indexArrayOfSelectedObjects.sortInPlace { $0 < $1 }
        //--- Find the first index of a non selected object
          var newSelectionIndex = indexArrayOfSelectedObjects [0] + 1
          for index in indexArrayOfSelectedObjects {
            if newSelectionIndex < index {
              break
            }else{
              newSelectionIndex = index + 1
            }
          }
          var newSelectedObject : %!ELEMENT_TYPE_NAME%? = nil
          if (newSelectionIndex >= 0) && (newSelectionIndex < sortedArray_prop.count) {
            newSelectedObject = sortedArray_prop [newSelectionIndex]
          }
        //----------------------------------------- Remove selected object
        //--- Dictionary of object absolute indexes
          var objectDictionary = [%!ELEMENT_TYPE_NAME% : Int] ()
          for (index, object) in model_prop.enumerate () {
            objectDictionary [object] = index
          }
        //--- Build selected objects index array
          var selectedObjectIndexArray = [Int] ()
          for object in mSelectedSet.mSet {
            let index = objectDictionary [object]
            if let idx = index {
              selectedObjectIndexArray.append (idx)
            }
          }
        //--- Sort in reverse order
          selectedObjectIndexArray.sortInPlace { $1 < $0 }
        //--- Remove objects, in reverse of order of their index
          var newObjectArray = model_prop
          for index in selectedObjectIndexArray {
            newObjectArray.removeAtIndex (index)
          }
        //----------------------------------------- Set new selection
          var newSelectionSet = Set <%!ELEMENT_TYPE_NAME%> ()
          if let object = newSelectedObject {
            newSelectionSet.insert (object)
          }
          mSelectedSet.mSet = newSelectionSet
        //----------------------------------------- Set new object array
          model.setProp (newObjectArray)
        }
      }
    }
  }
%end%
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

