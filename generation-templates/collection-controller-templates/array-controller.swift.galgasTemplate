import Cocoa

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
//    %!["DataSource_" + OWNER_NAME + "_" + ARRAY_CONTROLLER_NAME stringByRightPadding !113 !' ']%*
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

class DataSource_%!OWNER_NAME%_%!ARRAY_CONTROLLER_NAME% : ReadOnlyArrayOf_%!ELEMENT_TYPE_NAME%, PMTableViewDataSource {
  private weak var mModel : ReadOnlyArrayOf_%!ELEMENT_TYPE_NAME%?
  var count = PMTransientProperty_Int ()

  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

  override init () {
    super.init ()
    count.computeFunction = { [weak self] in
      if let unwrappedSelf = self, model = unwrappedSelf.mModel {
        return (unwrappedSelf.prop.0.count, unwrappedSelf.prop.1)
      }else{
        return (0, .noSelection)
      }
    }
  }

  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

  override func postEvent () {
    if (prop_cache != nil) {
      prop_cache = nil
      count.postEvent ()
      super.postEvent ()
    }
  }

  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

  private func filterAndSort () -> (Array<%!ELEMENT_TYPE_NAME%>, PMSelectionKind) {
    let sortedObjectArray : Array<%!ELEMENT_TYPE_NAME%>
    var selection = PMSelectionKind.singleSelection
    if let model = mModel {
      selection = model.prop.1
%if [FILTER_PROPERTIES length] == 0 then
  %      var currentObjectArrayAsMutableArray = NSMutableArray (array:model.prop.0)\n%
  %      currentObjectArrayAsMutableArray.sortUsingDescriptors (mSortDescriptors)\n%
  %      sortedObjectArray = currentObjectArrayAsMutableArray.mutableCopy () as! Array<%!ELEMENT_TYPE_NAME%>\n%
else
  %      var array = Array<%!ELEMENT_TYPE_NAME%> ()\n%
  %      for object in model.prop.0 {\n%
   for () in FILTER_PROPERTIES
   do %        selection &= object.%!mFilterPropertyName%.prop.1\n%
   end
  %        if arrayControllerFilter_%!OWNER_NAME%_%!ARRAY_CONTROLLER_NAME% (%
                   for () in FILTER_PROPERTIES
                   do %object.%!mFilterPropertyName%.prop.0%
                   between %, %
                   end
                   %) {\n%
  %          array.append (object)\n%
  %        }\n%
  %      }\n%
  %      if selection == .singleSelection {\n%
  %        var currentObjectArrayAsMutableArray = NSMutableArray (array:array)\n%
  %        currentObjectArrayAsMutableArray.sortUsingDescriptors (mSortDescriptors)\n%
  %        sortedObjectArray = currentObjectArrayAsMutableArray.mutableCopy () as! Array<%!ELEMENT_TYPE_NAME%>\n%
  %      }else{\n%
  %        sortedObjectArray = Array<%!ELEMENT_TYPE_NAME%> ()\n%
  %      }\n%  
end
%    }else{
      sortedObjectArray = Array<%!ELEMENT_TYPE_NAME%> ()
      selection = .noSelection
    }
    return (sortedObjectArray, selection)
  }

  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*
  
  private var mSet = Set<%!ELEMENT_TYPE_NAME%> ()

  var prop_cache : Optional < (Array<%!ELEMENT_TYPE_NAME%>, PMSelectionKind) >

  override var prop : (Array<%!ELEMENT_TYPE_NAME%>, PMSelectionKind) {
    get {
      if prop_cache == nil {
        prop_cache = filterAndSort ()
        let newObjectSet = Set<%!ELEMENT_TYPE_NAME%> (prop_cache!.0)
        if mSet != newObjectSet {
        //--- Removed object set
          var removedObjectSet = mSet
          removedObjectSet.subtractInPlace (newObjectSet)
%for () in BOUND_COLUMNS do
%          for managedObject : %!ELEMENT_TYPE_NAME% in removedObjectSet {
            for observer in mObserversOf_%!mObservablePropertyName% {
              managedObject.%!mObservablePropertyName%.removeObserver (observer, postEvent:true)
            }
          }
%end%        //--- Added object set
          var addedObjectSet = newObjectSet
          addedObjectSet.subtractInPlace (mSet)
%for () in BOUND_COLUMNS do
%          for managedObject : %!ELEMENT_TYPE_NAME% in addedObjectSet {
            for observer in mObserversOf_%!mObservablePropertyName% {
              managedObject.%!mObservablePropertyName%.addObserver (observer, postEvent:true)
            }
          }
 %end%       //--- Update object set
          mSet = newObjectSet
        }
      }
      return prop_cache!
    }
  }

  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*
  //    Sort descriptors                                                                                               *
  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*
  
  private var mSortDescriptors : [AnyObject] = [AnyObject] () {
    didSet {
      postEvent () // Force sorting
    }
  }

  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*
  
  func setSortDescriptors (sortDescriptors : [AnyObject]) {
    mSortDescriptors = sortDescriptors
  }
  
  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*
  //    T A B L E V I E W    D A T A S O U R C E : tableView:sortDescriptorsDidChange:                                 *
  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

  func tableView (aTableView: NSTableView,
                  sortDescriptorsDidChange oldDescriptors: [AnyObject]) {
    // NSLog ("\%@", __FUNCTION__)
    mSortDescriptors = aTableView.sortDescriptors
  }

  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*
  //    T A B L E V I E W    D A T A S O U R C E : numberOfRowsInTableView                                             *
  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

  func numberOfRowsInTableView (NSTableView) -> Int {
    // NSLog ("\%@ (\%ld objects)", __FUNCTION__, prop.count)
    return prop.0.count
  }

  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
//    %!["Delegate_" + OWNER_NAME + "_" + ARRAY_CONTROLLER_NAME stringByRightPadding !113 !' ']%*
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

@objc(Delegate_%!OWNER_NAME%_%!ARRAY_CONTROLLER_NAME%) class Delegate_%!OWNER_NAME%_%!ARRAY_CONTROLLER_NAME% : PMAbstractProperty, PMTableViewDelegate {
  private var mSet = Set<%!ELEMENT_TYPE_NAME%> ()
  private var mSetShouldBeComputed = true
  private var mSortedArray : DataSource_%!OWNER_NAME%_%!ARRAY_CONTROLLER_NAME%
  private var mIgnoreTableViewSelectionDidChange = true
  var count = PMTransientProperty_Int ()

  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

  init (model:DataSource_%!OWNER_NAME%_%!ARRAY_CONTROLLER_NAME%) {
    mSortedArray = model
    super.init ()
    count.computeFunction = { [weak self] in
      if let unwrappedSelf = self {
        return (unwrappedSelf.prop.0.count, unwrappedSelf.prop.1)
      }else{
        return (0, .noSelection)
      }
    }
  }

  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*
  
  override func postEvent () {
    if !mSetShouldBeComputed {
      mSetShouldBeComputed = true
      count.postEvent ()
      super.postEvent ()
    }
  }

  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*
  
  var prop : (Set<%!ELEMENT_TYPE_NAME%>, PMSelectionKind) {
    get {
      if mSetShouldBeComputed {
        mSetShouldBeComputed = false
        // NSLog ("mSet \%d", mSet.count)
        mSet.intersectInPlace (mSortedArray.prop.0)
        // NSLog ("mSet \%d", mSet.count)
        if (mSet.count == 0) && (mSortedArray.prop.0.count > 0) {
          mSet.insert (mSortedArray.prop.0 [0])
        }
      //--- DEBUG :Dictionary of object indexes
        /* var objectDictionary = [%!ELEMENT_TYPE_NAME% : Int] ()
        for (index, object) in enumerate (mSortedArray.prop.0) {
          objectDictionary [object] = index
        }
        for object in mSet {
          if let index = objectDictionary [object] {
            NSLog ("SELECTED : \%d, \%@", index, object)
          }
        } */
      //--- DEBUG end
      }
      return (mSet, mSortedArray.prop.1)
    }
  }

  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

  func setProp (value : Set<%!ELEMENT_TYPE_NAME%>) {
    mSet = value
    postEvent ()
  }

  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

  func selectedObjectIndexSet () -> NSIndexSet {
    var indexSet = NSMutableIndexSet ()
    if mSortedArray.prop.1 == .singleSelection {
    //--- Dictionary of object indexes
      var objectDictionary = [%!ELEMENT_TYPE_NAME% : Int] ()
      for (index, object) in enumerate (mSortedArray.prop.0) {
        objectDictionary [object] = index
      }
      for object in prop.0 {
        if let index = objectDictionary [object] {
          indexSet.addIndex (index)
        }
      }
    }
    return indexSet
  }

  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*
  //    T A B L E V I E W    D E L E G A T E : tableViewSelectionDidChange:                                            *
  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

  func tableViewSelectionDidChange (notication : NSNotification) {
    // NSLog ("\%@ \%d", __FUNCTION__, mIgnoreTableViewSelectionDidChange)
    if !mIgnoreTableViewSelectionDidChange {
      let tableView = notication.object as! PMTableView
      var newSelectedObjectSet = Set <%!ELEMENT_TYPE_NAME%> ()
      for index in tableView.selectedRowIndexes {
        newSelectedObjectSet.insert (mSortedArray.prop.0.objectAtIndex (index, file: __FILE__, line: __LINE__))
      }
      setProp (newSelectedObjectSet)
    }
  }

  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*
  //    T A B L E V I E W    D E L E G A T E : tableView:viewForTableColumn:row:                                       *
  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

  func tableView (tableView : NSTableView,
                  viewForTableColumn inTableColumn: NSTableColumn?,
                  row inRowIndex: Int) -> NSView? {
 //   NSLog ("\%@, row \%d, column \%@", __FUNCTION__, inRowIndex, inTableColumn!.identifier)
    let columnIdentifier = inTableColumn!.identifier
    var result : NSTableCellView = tableView.makeViewWithIdentifier (columnIdentifier, owner:self) as! NSTableCellView
    result.textField?.tag = inRowIndex
    let object = mSortedArray.prop.0.objectAtIndex (inRowIndex, file:__FILE__, line:__LINE__)
    %
for () in BOUND_COLUMNS
  do
  %if columnIdentifier == "%!mColumnName%" {\n%
  ![[FILE_WRAPPER textFileContentsAtPath !"cell-" + [mPropertyType swiftTypeName] + "-" + mColumnOutletTypeName + ".txt"]
    stringByReplacingStringByString !"$MODEL$" !mObservablePropertyName
   ]
   %    %
  between %}else %
  after %}\n%
end
%    return result
  }

  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

  func willReload () {
    mIgnoreTableViewSelectionDidChange = true
  }

  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*
  
  func didReload () {
    mIgnoreTableViewSelectionDidChange = false
  }

%for () in BOUND_COLUMNS do
%  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

  func set_%!mObservablePropertyName%_Action (sender : %!mColumnOutletTypeName%) {
    let row = sender.tag
    let object = mSortedArray.prop.0.objectAtIndex (row, file:__FILE__, line:__LINE__)
    object.%!mObservablePropertyName%.validateAndSetProp (%![mPropertyType transformerForTableViewAction !"sender"]%, windowForSheet:sender.window)
  }
%
end
%
  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
//    %!["ArrayController_" + OWNER_NAME + "_" + ARRAY_CONTROLLER_NAME stringByRightPadding !113 !' ']%*
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

class ArrayController_%!OWNER_NAME%_%!ARRAY_CONTROLLER_NAME% : PMObject {
  private let mAllowsEmptySelection = false
  private let mAllowsMultipleSelection = true

  var sortedArray = DataSource_%!OWNER_NAME%_%!ARRAY_CONTROLLER_NAME% ()

  var selectedArray = TransientArrayOf_%!ELEMENT_TYPE_NAME% ()

  private var mSelectedSet : Delegate_%!OWNER_NAME%_%!ARRAY_CONTROLLER_NAME%?

  private var mTableViewControllerArray = [Controller_PMTableView_controller] ()

  private var mModel : %!MODEL_TYPE_NAME_2%?
 
  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*
  //    init                                                                                                           *
  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

  override init () {
    super.init ()
    selectedArray.computeFunction = {
      var result = Array<%!ELEMENT_TYPE_NAME%> ()
      var selection = PMSelectionKind.singleSelection
      if let selectedSet = self.mSelectedSet {
        selection = self.sortedArray.prop.1 & selectedSet.prop.1
        for object in self.sortedArray.prop.0 {
          if selectedSet.prop.0.contains (object) {
            result.append (object)
          }
        }
      }
      if selection != .singleSelection {
        result = Array<%!ELEMENT_TYPE_NAME%> ()
      }
      return (result, selection)
    }
  }

  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*
  //    bind_modelAndView                                                                                              *
  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

  func bind_modelAndView (model:%!MODEL_TYPE_NAME_2%, tableViewArray:[PMTableView], file:String, line:Int) {
    mModel = model
    sortedArray.mModel = model
    let selectedSet = Delegate_%!OWNER_NAME%_%!ARRAY_CONTROLLER_NAME% (model:sortedArray)
    mSelectedSet = selectedSet
    for tableView in tableViewArray {
      let tableViewController = Controller_PMTableView_controller (
        delegate:selectedSet,
        tableView:tableView,
        file:file,
        line:line
      )
      mTableViewControllerArray.append (tableViewController)
      tableView.allowsEmptySelection = mAllowsEmptySelection
      tableView.allowsMultipleSelection = mAllowsMultipleSelection
%for () in BOUND_COLUMNS do
%    //--- Check '%!mColumnName%' column
      if let anyObject: AnyObject = tableView.makeViewWithIdentifier ("%!mColumnName%", owner:self) {
        if let unwrappedTableCellView = anyObject as? NSTableCellView {
          if !(unwrappedTableCellView.textField is %!mColumnOutletTypeName%) {
            presentErrorWindow (file, line, "\"%!mColumnName%\" column view is not an instance of %!mColumnOutletTypeName%")
          }
        }else{
          presentErrorWindow (file, line, "\"%!mColumnName%\" column cell view is not an instance of NSTableCellView")
        }
      }else{
        presentErrorWindow (file, line, "\"%!mColumnName%\" column view unknown")
      }
      if let columnName : NSTableColumn = tableView.tableColumnWithIdentifier ("%!mColumnName%") {
        columnName.sortDescriptorPrototype = NSSortDescriptor (key:"%!mObservablePropertyName%_keyCodingValue", ascending:true)
      }
%end
%    //--- Set descriptors from first column of table view
      let columns = tableView.tableColumns as NSArray
      if columns.count > 0 {
        let firstColumn = columns [0] as! NSTableColumn
        if let sdp = firstColumn.sortDescriptorPrototype {
          let sortDescriptorArray = NSArray (object:sdp) as! [AnyObject]
          tableView.sortDescriptors = sortDescriptorArray
          sortedArray.setSortDescriptors (sortDescriptorArray)
        }
      }
      sortedArray.addObserver (tableViewController, postEvent:true)
      selectedSet.addObserver (tableViewController, postEvent:true)
   //--- Set table view delegate and data source
      tableView.setDataSource (sortedArray)
      tableView.setDelegate (selectedSet)
   }
  //--- Add observers
    model.addObserverOf_name (sortedArray, postEvent:true)
    model.addObserverOf_aValue (sortedArray, postEvent:true)
    model.addObserver (sortedArray, postEvent:true)
    sortedArray.addObserver (selectedSet, postEvent:true)
    selectedSet.addObserver (selectedArray, postEvent:true)
  }

  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*
  //    unbind_modelAndView                                                                                            *
  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

  func unbind_modelAndView () {
    mModel?.removeObserverOf_name (sortedArray, postEvent:false)
    mModel?.removeObserverOf_aValue (sortedArray, postEvent:false)
    mModel?.removeObserver (sortedArray, postEvent:false)
    if let selectedSet = mSelectedSet {
      sortedArray.removeObserver (selectedSet, postEvent:false)
    }
    mSelectedSet?.removeObserver (selectedArray, postEvent:false)
     for tableViewController in mTableViewControllerArray {
      sortedArray.removeObserver (tableViewController, postEvent:false)
      mSelectedSet?.removeObserver (tableViewController, postEvent:false)
    }
    mTableViewControllerArray = []
    selectedArray.computeFunction = nil
    mSelectedSet = nil
    mModel = nil
 }
 
%if not MODEL_IS_TRANSIENT then% 
  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*
  //    add                                                                                                            *
  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

   func add (inSender : NSButton?) {
    if let model = mModel,
           owner = model.owner,
           undoManager = owner.undoManager (),
           selectedSet = mSelectedSet where model.prop.1 == .singleSelection {
      var newObject : %!ELEMENT_TYPE_NAME% = %!ELEMENT_TYPE_NAME% (undoManager:undoManager)
      var array = model.prop.0
      array.append (newObject)
    //--- New object is the selection
      var newSelectedObjectSet = Set <%!ELEMENT_TYPE_NAME%> ()
      newSelectedObjectSet.insert (newObject)
      selectedSet.setProp (newSelectedObjectSet)
      model.setProp (array)
    }
  }

  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*
  //    remove                                                                                                         *
  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

  func remove (inSender : NSButton?) {
    if let model = mModel,
           selectedSet = mSelectedSet where (selectedSet.prop.0.count > 0) && (model.prop.1 == .singleSelection){
    //------------- Find the object to be selected after selected object removing
    //--- Dictionary of object sorted indexes
      var sortedObjectDictionary = [%!ELEMENT_TYPE_NAME% : Int] ()
      for (index, object) in enumerate (sortedArray.prop.0) {
        sortedObjectDictionary [object] = index
      }
      var indexArrayOfSelectedObjects = [Int] ()
      for object in selectedSet.prop.0 {
        let index = sortedObjectDictionary [object]
        if let idx = index {
          indexArrayOfSelectedObjects.append (idx)
        }
      }
    //--- Sort
      indexArrayOfSelectedObjects.sort { $0 < $1 }
    //--- Find the first index of a non selected object
      var newSelectionIndex = indexArrayOfSelectedObjects [0] + 1
      for index in indexArrayOfSelectedObjects {
        if newSelectionIndex < index {
          break
        }else{
          newSelectionIndex = index + 1
        }
      }
      var newSelectedObject : %!ELEMENT_TYPE_NAME%? = nil
      if (newSelectionIndex >= 0) && (newSelectionIndex < sortedArray.prop.0.count) {
        newSelectedObject = sortedArray.prop.0 [newSelectionIndex]
      }
    //----------------------------------------- Remove selected object
    //--- Dictionary of object absolute indexes
      var objectDictionary = [%!ELEMENT_TYPE_NAME% : Int] ()
      for (index, object) in enumerate (model.prop.0) {
        objectDictionary [object] = index
      }
    //--- Build selected objects index array
      var selectedObjectIndexArray = [Int] ()
      for object in selectedSet.prop.0 {
        let index = objectDictionary [object]
        if let idx = index {
          selectedObjectIndexArray.append (idx)
        }
      }
    //--- Sort in reverse order
      selectedObjectIndexArray.sort { $1 < $0 }
    //--- Remove objects, in reverse of order of their index
      var newObjectArray = model.prop.0
      for index in selectedObjectIndexArray {
        newObjectArray.removeAtIndex (index)
      }
    //----------------------------------------- Set new selection
      var newSelectionSet = Set <%!ELEMENT_TYPE_NAME%> ()
      if let object = newSelectedObject {
        newSelectionSet.insert (object)
      }
      mSelectedSet?.setProp (newSelectionSet)
    //----------------------------------------- Set new object array
      model.setProp (newObjectArray)
    }
  }
%end%
  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

