import Cocoa

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

private let DEBUG_EVENT = false

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"DataSource_" + OWNER_NAME + "_" + ARRAY_CONTROLLER_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(DataSource_%!OWNER_NAME%_%!ARRAY_CONTROLLER_NAME%)
final class DataSource_%!OWNER_NAME%_%!ARRAY_CONTROLLER_NAME% : TransientArrayOf_%!ELEMENT_TYPE_NAME%, EBTableViewDataSource {

  //····················································································································
  //    Sort descriptors
  //····················································································································
  
  private var mSortDescriptors : [NSSortDescriptor] = [NSSortDescriptor] () {
    didSet {
      postEvent () // Force sorting
    }
  }

  //····················································································································
  
  func setSortDescriptors (sortDescriptors : [NSSortDescriptor]) {
    mSortDescriptors = sortDescriptors
  }
  
  //····················································································································
  //    T A B L E V I E W    D A T A S O U R C E : tableView:sortDescriptorsDidChange:
  //····················································································································

  func tableView (aTableView: NSTableView,
                  sortDescriptorsDidChange oldDescriptors: [NSSortDescriptor]) {
    if DEBUG_EVENT {
      print ("\(__FUNCTION__)")
    }
    mSortDescriptors = aTableView.sortDescriptors
  }

  //····················································································································
  //    T A B L E V I E W    D A T A S O U R C E : numberOfRowsInTableView
  //····················································································································

  func numberOfRowsInTableView (_ : NSTableView) -> Int {
    if DEBUG_EVENT {
      print ("\(__FUNCTION__)")
    }
    switch prop {
    case .noSelection, .multipleSelection :
      return 0
    case .singleSelection (let v) :
      return v.count
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"SelectedSet_" + OWNER_NAME + "_" + ARRAY_CONTROLLER_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(SelectedSet_%!OWNER_NAME%_%!ARRAY_CONTROLLER_NAME%)
final class SelectedSet_%!OWNER_NAME%_%!ARRAY_CONTROLLER_NAME% : EBAbstractProperty {

  //····················································································································

  private var mSet = Set<%!ELEMENT_TYPE_NAME%> () {
    didSet {
      if mSet != oldValue {
        postEvent ()
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"ArrayController_" + OWNER_NAME + "_" + ARRAY_CONTROLLER_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(ArrayController_%!OWNER_NAME%_%!ARRAY_CONTROLLER_NAME%)
final class ArrayController_%!OWNER_NAME%_%!ARRAY_CONTROLLER_NAME% : EBObject, EBTableViewDelegate {

  private var mModel : %!MODEL_TYPE_NAME_2%?

  var sortedArray = DataSource_%!OWNER_NAME%_%!ARRAY_CONTROLLER_NAME% ()

  var selectedArray = TransientArrayOf_%!ELEMENT_TYPE_NAME% ()

  private var mSelectedSet = SelectedSet_%!OWNER_NAME%_%!ARRAY_CONTROLLER_NAME% ()

  private var mTableViewControllerArray = [Controller_EBTableView_controller] ()

  //····················································································································
  //    init
  //····················································································································

  override init () {
    super.init ()
  //--- Set selected array compute function
    setSelectedArrayComputeFunction ()
  //--- Set sorted array compute function
    setFilterAndSortFunction ()
  }

  //····················································································································

  private final func setSelectedArrayComputeFunction () {
    selectedArray.computeFunction = {
      switch self.sortedArray.prop {
      case .noSelection :
        return .noSelection
      case .multipleSelection :
        return .multipleSelection
      case .singleSelection (let v) :
        var result = [%!ELEMENT_TYPE_NAME%] ()
        for object in v {
          if self.mSelectedSet.mSet.contains (object) {
            result.append (object)
          }
        }
        return .singleSelection (result)
      }
    }
  }

  //····················································································································

  private final func setFilterAndSortFunction () {
    sortedArray.computeFunction = {
      if let model = self.mModel {
        switch model.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let modelArray) :
%if [FILTER_PROPERTIES length] == 0 then
%          let array = NSMutableArray (array:modelArray)
          array.sortUsingDescriptors (self.sortedArray.mSortDescriptors)
          let sortedObjectArray = array.mutableCopy () as! [%!ELEMENT_TYPE_NAME%]
          return .singleSelection (sortedObjectArray)
%
else
%          let array = NSMutableArray ()\n%
%          var isMultiple = false\n%
%          for object in modelArray {\n%
![FILTER_PROPERTIES filterCode !"arrayControllerFilter_" + OWNER_NAME + "_" + ARRAY_CONTROLLER_NAME]
%          }
          if isMultiple {
            return .multipleSelection
          }else{
            array.sortUsingDescriptors (self.sortedArray.mSortDescriptors)
            let sortedObjectArray = array.mutableCopy () as! [%!ELEMENT_TYPE_NAME%]
            return .singleSelection (sortedObjectArray)
          }
%end
%        }
      }else{
        return .noSelection
      }
    }
  }

  //····················································································································
  //    Explorer
  //····················································································································

  final func addExplorer (name : String,
                          inout y : CGFloat,
                          view : NSView) {
  }

  //····················································································································
  //    bind_modelAndView
  //····················································································································

  func bind_modelAndView (model:%!MODEL_TYPE_NAME_2%, tableViewArray:[EBTableView], file:String, line:Int) {
    if DEBUG_EVENT {
      print ("\(__FUNCTION__)")
    }
  //--- Add observers
    mModel = model
    model.addEBObserver (sortedArray)
    sortedArray.addEBObserver (selectedArray)
    mSelectedSet.addEBObserver (selectedArray)
  //--- Add observed properties (for filtering and sorting)
%
for () in OBSERVED_PROPERTIES_FOR_SORTING_AND_FILERING do
  %    model.addEBObserverOf_%!key% (sortedArray)\n%
end
%  //--- Bind table views
    for tableView in tableViewArray {
      bind_tableView (tableView, file:file, line:line)
    }
  }

  //····················································································································
  //    unbind_modelAndView
  //····················································································································

  func unbind_modelAndView () {
    if DEBUG_EVENT {
      print ("\(__FUNCTION__)")
    }
    mModel?.removeEBObserver (sortedArray)
    sortedArray.removeEBObserver (selectedArray)
    mSelectedSet.removeEBObserver (selectedArray)
  //--- Remode observed properties (for filtering)
%
for () in OBSERVED_PROPERTIES_FOR_SORTING_AND_FILERING do
  %    mModel?.removeEBObserverOf_%!key% (sortedArray)\n%
end
%    for tvc in mTableViewControllerArray {
      sortedArray.removeEBObserver (tvc)
    }
    selectedArray.computeFunction = nil
    sortedArray.computeFunction = nil
    mSelectedSet.mSet = Set ()
    mTableViewControllerArray = []
    mModel = nil
 }

  //····················································································································
  //    bind_tableView
  //····················································································································

  private func bind_tableView (tableView:EBTableView,
                               file:String,
                               line:Int) {
    if DEBUG_EVENT {
      print ("\(__FUNCTION__)")
    }
    let tableViewController = Controller_EBTableView_controller (
      delegate:self,
      tableView:tableView,
      file:file,
      line:line
    )
%for () in BOUND_COLUMNS do
%  //--- Check '%!mColumnName%' column
    if let anyObject: NSView = tableView.makeViewWithIdentifier ("%!mColumnName%", owner:self) {
      if let unwrappedTableCellView = anyObject as? %!mColumnOutletTypeName%_Cell {
        unwrappedTableCellView.checkOutlet ("%!mColumnName%", file:file, line:line)
      }else{
        presentErrorWindow (file,
          line: line,
          errorMessage:"\"%!mColumnName%\" column cell view is not an instance of %!mColumnOutletTypeName%_Cell"
        )
      }
    }else{
      presentErrorWindow (file,
        line: line,
        errorMessage:"\"%!mColumnName%\" column view unknown, or table view is NSCell-based"
      )
    }
    if let columnName : NSTableColumn = tableView.tableColumnWithIdentifier ("%!mColumnName%") {
      columnName.sortDescriptorPrototype = NSSortDescriptor (key:"%!mObservablePropertyName%_kvc", ascending:true)
    }
%end
%  //--- Set descriptors from first column of table view
    let columns = tableView.tableColumns as NSArray
    if columns.count > 0 {
      let firstColumn = columns [0] as! NSTableColumn
      if let sdp = firstColumn.sortDescriptorPrototype {
        let sortDescriptorArray = NSArray (object:sdp) as! [NSSortDescriptor]
        tableView.sortDescriptors = sortDescriptorArray
        sortedArray.setSortDescriptors (sortDescriptorArray)
      }
    }
    sortedArray.addEBObserver (tableViewController)
    mTableViewControllerArray.append (tableViewController)
 //--- Set table view delegate and data source
    tableView.setDataSource (sortedArray)
    tableView.setDelegate (self)
  }

 //····················································································································

  func selectedObjectIndexSet () -> NSIndexSet {
    switch sortedArray.prop {
    case .noSelection, .multipleSelection :
       return NSIndexSet ()
    case .singleSelection (let v) :
    //--- Dictionary of object indexes
      var objectDictionary = [%!ELEMENT_TYPE_NAME% : Int] ()
      for (index, object) in v.enumerate () {
        objectDictionary [object] = index
      }
      let indexSet = NSMutableIndexSet ()
      for object in mSelectedSet.mSet {
        if let index = objectDictionary [object] {
          indexSet.addIndex (index)
        }
      }
      return indexSet
    }
  }

  //····················································································································
  //    T A B L E V I E W    D E L E G A T E : tableViewSelectionDidChange:
  //····················································································································

  func tableViewSelectionDidChange (notication : NSNotification) {
    switch sortedArray.prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      let tableView = notication.object as! EBTableView
      var newSelectedObjectSet = Set <%!ELEMENT_TYPE_NAME%> ()
      for index in tableView.selectedRowIndexes {
        newSelectedObjectSet.insert (v.objectAtIndex (index, file: __FILE__, line: __LINE__))
      }
      mSelectedSet.mSet = newSelectedObjectSet
    }
  }

  //····················································································································
  //    T A B L E V I E W    D E L E G A T E : tableView:viewForTableColumn:row:
  //····················································································································

  func tableView (tableView : NSTableView,
                  viewForTableColumn inTableColumn: NSTableColumn?,
                  row inRowIndex: Int) -> NSView? {
    if DEBUG_EVENT {
      print ("\(__FUNCTION__)")
    }
    switch sortedArray.prop {
    case .noSelection, .multipleSelection :
      return nil
    case .singleSelection (let v) :
      let columnIdentifier = inTableColumn!.identifier
      let result : NSTableCellView = tableView.makeViewWithIdentifier (columnIdentifier, owner:self) as! NSTableCellView
      let object = v.objectAtIndex (inRowIndex, file:__FILE__, line:__LINE__)
      %
for () in BOUND_COLUMNS
  do
    %if columnIdentifier == "%!mColumnName%" {\n%
    %        if let cell : %!mColumnOutletTypeName%_Cell = result as? %!mColumnOutletTypeName%_Cell {\n%
    %          cell.configureWithProperty (object.%!mObservablePropertyName%)\n%
    %        }\n%
    %      %
  between
    %}else %
  after
   %}else{\n%
   %        NSLog ("Unknown column '\(columnIdentifier)'")\n%
   %      }\n% 
end
%      return result
    }
  }
 
%switch MODEL_KIND
case transientModel :
case storedArrayModel :
% 
  //····················································································································
  //    add
  //····················································································································

   func add (inSender : NSButton?) {
    if DEBUG_EVENT {
      print ("\(__FUNCTION__)")
    }
    if let model = mModel {
      switch model.prop {
      case .noSelection, .multipleSelection :
        break
      case .singleSelection (let v) :
        let newObject : %!ELEMENT_TYPE_NAME% = %!ELEMENT_TYPE_NAME% ()
        var array = v
        array.append (newObject)
      //--- New object is the selection
        var newSelectedObjectSet = Set <%!ELEMENT_TYPE_NAME%> ()
        newSelectedObjectSet.insert (newObject)
        mSelectedSet.mSet = newSelectedObjectSet
        model.setProp (array)
      }
    }
  }

  //····················································································································
  //    remove
  //····················································································································

  func remove (inSender : NSButton?) {
    if DEBUG_EVENT {
      print ("\(__FUNCTION__)")
    }
    if let model = mModel {
      switch model.prop {
      case .noSelection, .multipleSelection :
        break
      case .singleSelection (let model_prop) :
        switch sortedArray.prop {
        case .noSelection, .multipleSelection :
          break
        case .singleSelection (let sortedArray_prop) :
        //------------- Find the object to be selected after selected object removing
        //--- Dictionary of object sorted indexes
          var sortedObjectDictionary = [%!ELEMENT_TYPE_NAME% : Int] ()
          for (index, object) in sortedArray_prop.enumerate () {
            sortedObjectDictionary [object] = index
          }
          var indexArrayOfSelectedObjects = [Int] ()
          for object in mSelectedSet.mSet {
            let index = sortedObjectDictionary [object]
            if let idx = index {
              indexArrayOfSelectedObjects.append (idx)
            }
          }
        //--- Sort
          indexArrayOfSelectedObjects.sortInPlace { $0 < $1 }
        //--- Find the first index of a non selected object
          var newSelectionIndex = indexArrayOfSelectedObjects [0] + 1
          for index in indexArrayOfSelectedObjects {
            if newSelectionIndex < index {
              break
            }else{
              newSelectionIndex = index + 1
            }
          }
          var newSelectedObject : %!ELEMENT_TYPE_NAME%? = nil
          if (newSelectionIndex >= 0) && (newSelectionIndex < sortedArray_prop.count) {
            newSelectedObject = sortedArray_prop [newSelectionIndex]
          }
        //----------------------------------------- Remove selected object
        //--- Dictionary of object absolute indexes
          var objectDictionary = [%!ELEMENT_TYPE_NAME% : Int] ()
          for (index, object) in model_prop.enumerate () {
            objectDictionary [object] = index
          }
        //--- Build selected objects index array
          var selectedObjectIndexArray = [Int] ()
          for object in mSelectedSet.mSet {
            let index = objectDictionary [object]
            if let idx = index {
              selectedObjectIndexArray.append (idx)
            }
          }
        //--- Sort in reverse order
          selectedObjectIndexArray.sortInPlace { $1 < $0 }
        //--- Remove objects, in reverse of order of their index
          var newObjectArray = model_prop
          for index in selectedObjectIndexArray {
            newObjectArray.removeAtIndex (index)
          }
        //----------------------------------------- Set new selection
          var newSelectionSet = Set <%!ELEMENT_TYPE_NAME%> ()
          if let object = newSelectedObject {
            newSelectionSet.insert (object)
          }
          mSelectedSet.mSet = newSelectionSet
        //----------------------------------------- Set new object array
          model.setProp (newObjectArray)
        }
      }
    }
  }
%
case relationshipModel :
% 
  //····················································································································
  //    add
  //····················································································································

   func add (inSender : NSButton?) {
    if DEBUG_EVENT {
      print ("\(__FUNCTION__)")
    }
    if let model = mModel,
           owner = model.owner,
           managedObjectContext = owner.managedObjectContext () {
      switch model.prop {
      case .noSelection, .multipleSelection :
        break
      case .singleSelection (let v) :
        let newObject : %!ELEMENT_TYPE_NAME% = %!ELEMENT_TYPE_NAME% (managedObjectContext:managedObjectContext)
        var array = v
        array.append (newObject)
      //--- New object is the selection
        var newSelectedObjectSet = Set <%!ELEMENT_TYPE_NAME%> ()
        newSelectedObjectSet.insert (newObject)
        mSelectedSet.mSet = newSelectedObjectSet
        model.setProp (array)
      }
    }
  }

  //····················································································································
  //    remove
  //····················································································································

  func remove (inSender : NSButton?) {
    if DEBUG_EVENT {
      print ("\(__FUNCTION__)")
    }
    if let model = mModel,
           owner = model.owner,
           managedObjectContext = owner.managedObjectContext () {
      switch model.prop {
      case .noSelection, .multipleSelection :
        break
      case .singleSelection (let model_prop) :
        switch sortedArray.prop {
        case .noSelection, .multipleSelection :
          break
        case .singleSelection (let sortedArray_prop) :
        //------------- Find the object to be selected after selected object removing
        //--- Dictionary of object sorted indexes
          var sortedObjectDictionary = [%!ELEMENT_TYPE_NAME% : Int] ()
          for (index, object) in sortedArray_prop.enumerate () {
            sortedObjectDictionary [object] = index
          }
          var indexArrayOfSelectedObjects = [Int] ()
          for object in mSelectedSet.mSet {
            managedObjectContext.removeManagedObject (object)
            let index = sortedObjectDictionary [object]
            if let idx = index {
              indexArrayOfSelectedObjects.append (idx)
            }
          }
        //--- Sort
          indexArrayOfSelectedObjects.sortInPlace { $0 < $1 }
        //--- Find the first index of a non selected object
          var newSelectionIndex = indexArrayOfSelectedObjects [0] + 1
          for index in indexArrayOfSelectedObjects {
            if newSelectionIndex < index {
              break
            }else{
              newSelectionIndex = index + 1
            }
          }
          var newSelectedObject : %!ELEMENT_TYPE_NAME%? = nil
          if (newSelectionIndex >= 0) && (newSelectionIndex < sortedArray_prop.count) {
            newSelectedObject = sortedArray_prop [newSelectionIndex]
          }
        //----------------------------------------- Remove selected object
        //--- Dictionary of object absolute indexes
          var objectDictionary = [%!ELEMENT_TYPE_NAME% : Int] ()
          for (index, object) in model_prop.enumerate () {
            objectDictionary [object] = index
          }
        //--- Build selected objects index array
          var selectedObjectIndexArray = [Int] ()
          for object in mSelectedSet.mSet {
            let index = objectDictionary [object]
            if let idx = index {
              selectedObjectIndexArray.append (idx)
            }
          }
        //--- Sort in reverse order
          selectedObjectIndexArray.sortInPlace { $1 < $0 }
        //--- Remove objects, in reverse of order of their index
          var newObjectArray = model_prop
          for index in selectedObjectIndexArray {
            newObjectArray.removeAtIndex (index)
          }
        //----------------------------------------- Set new selection
          var newSelectionSet = Set <%!ELEMENT_TYPE_NAME%> ()
          if let object = newSelectedObject {
            newSelectionSet.insert (object)
          }
          mSelectedSet.mSet = newSelectionSet
        //----------------------------------------- Set new object array
          model.setProp (newObjectArray)
        }
      }
    }
  }
%end%
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

