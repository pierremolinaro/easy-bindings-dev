
import Cocoa

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
//    %!["TriggerFor_" + OBJECT_TYPE_NAME + "_" + RELATIONSHIP_NAME + "_" + TABLE_VIEW_OUTLET_NAME stringByRightPadding !113 !' ']%*
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

@objc(TriggerFor_%!OBJECT_TYPE_NAME%_%!RELATIONSHIP_NAME%_%!TABLE_VIEW_OUTLET_NAME%)
class TriggerFor_%!OBJECT_TYPE_NAME%_%!RELATIONSHIP_NAME%_%!TABLE_VIEW_OUTLET_NAME% : NSObject, PMTriggerProtocol {
  private weak var mArrayController : ArrayController_%!OBJECT_TYPE_NAME%_%!RELATIONSHIP_NAME%? = nil
  
  var mTransientIndex : Int { get { return kTriggerOutletDisplay } }
  
  init (object : ArrayController_%!OBJECT_TYPE_NAME%_%!RELATIONSHIP_NAME%) {
    mArrayController = object
    super.init ()
    noteObjectAllocation (self) ;
  }
  
  func unregister () {
  }
  
  deinit {
    noteObjectDeallocation (self) ;
  }

  func noteTransientDidChange () {
  }
  
  func trigger () {
    mArrayController?.reloadData ()
  }
}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
//    %!["ArrayController_" + OBJECT_TYPE_NAME + "_" + RELATIONSHIP_NAME stringByRightPadding !113 !' ']%*
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

@objc(ArrayController_%!OBJECT_TYPE_NAME%_%!RELATIONSHIP_NAME%)
class ArrayController_%!OBJECT_TYPE_NAME%_%!RELATIONSHIP_NAME% : NSObject, NSTableViewDataSource, NSTableViewDelegate {
  private var mUndoManager : NSUndoManager?
  private var mObject : %!OBJECT_TYPE_NAME%
  private var mTableView : PMTableView?
  private var mDisplayTrigger : TriggerFor_%!OBJECT_TYPE_NAME%_%!RELATIONSHIP_NAME%_%!TABLE_VIEW_OUTLET_NAME%? = nil

  private var mCurrentObjectSet = NSMutableSet ()
  private var mCurrentObjectArray = NSMutableArray ()
  private var mSelectedObjectArray : NSArray = NSArray () {
    didSet {
      updateCanRemoveProperty ()
    }
  }
 
  //-------------------------------------------------------------------------------------------------------------------*
  //    init                                                                                                           *
  //-------------------------------------------------------------------------------------------------------------------*

  init (object : %!OBJECT_TYPE_NAME%, tableView:PMTableView?, file:String, line:Int) {
    mObject = object
    mTableView = tableView
    mUndoManager = object.undoManager ()
    super.init ()
    if let unwrappedTableView = tableView {
      var ok = true
%
for () in BOUND_COLUMNS do
%      if let anyObject: AnyObject = unwrappedTableView.makeViewWithIdentifier ("%!mColumnName%", owner:self) {
        if let unwrappedTableCellView = anyObject as? NSTableCellView {
          if !(unwrappedTableCellView.textField is %!mColumnOutletTypeName%) {
            presentErrorWindow (file, line, "\"%!mColumnName%\" column view is not an instance of %!mColumnOutletTypeName%")
            ok = false
          }
        }else{
          presentErrorWindow (file, line, "\"%!mColumnName%\" column cell view is not an instance of NSTableCellView")
          ok = false
        }
      }else{
        presentErrorWindow (file, line, "\"%!mColumnName%\" column view unknown")
        ok = false
      }
%
end
%      if ok {
        mTableView?.setDataSource (self)
        mTableView?.setDelegate (self)
        mDisplayTrigger = TriggerFor_%!OBJECT_TYPE_NAME%_%!RELATIONSHIP_NAME%_%!TABLE_VIEW_OUTLET_NAME% (object: self)
      }
    }
    noteObjectAllocation (self)
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    unregister                                                                                                     *
  //-------------------------------------------------------------------------------------------------------------------*

  func unregister () {
    for object : AnyObject in mCurrentObjectSet {
      let managedObject = object as  %!ELEMENT_TYPE_NAME%
%
for () in BOUND_COLUMNS do
%      managedObject.removeObserverOf_%!mObservablePropertyName% (mTriggerObjectForModelChange)\n%
end
%    }
  }
  
  //-------------------------------------------------------------------------------------------------------------------*
  //    deinit                                                                                                         *
  //-------------------------------------------------------------------------------------------------------------------*

  deinit {
    noteObjectDeallocation (self)
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    arrayModelSizeDidChange                                                                                        *
  //-------------------------------------------------------------------------------------------------------------------*

  func arrayModelSizeDidChange () {
    if let trigger = mDisplayTrigger {
      enterTriggerWithObject (trigger)
    }
  }
  
  //-------------------------------------------------------------------------------------------------------------------*
  //    tableViewSelectionDidChange                                                                                    *
  //-------------------------------------------------------------------------------------------------------------------*

  func tableViewSelectionDidChange (NSNotification!) {
    var selectedObjectArray = NSMutableArray ()
    if let tableView = mTableView {
      let selectedRowIndexes = tableView.selectedRowIndexes
      selectedRowIndexes.enumerateIndexesUsingBlock ({(idx : Int, stop : UnsafeMutablePointer <ObjCBool>) in
        stop.initialize (false)
        let object = self.mCurrentObjectArray.objectAtIndex (idx, file:__FILE__, line:__LINE__) as? %!ELEMENT_TYPE_NAME%
        if let unwrappedObject = object {
          selectedObjectArray.addObject (unwrappedObject)
        }
      })
    }
    mSelectedObjectArray = selectedObjectArray
    // NSLog ("mSelectedObjectArray \%d", mSelectedObjectArray.count)
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    tableView:sortDescriptorsDidChange: NSTableViewDataSource delegate                                             *
  //-------------------------------------------------------------------------------------------------------------------*

  func tableView (aTableView: NSTableView!,
                 sortDescriptorsDidChange oldDescriptors: [AnyObject]!) {
    let sortDescriptors : [AnyObject]! = mTableView?.sortDescriptors
    mCurrentObjectArray.sortUsingDescriptors (sortDescriptors)
    refreshDisplay ()
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    Observing model change                                                                                         *
  //-------------------------------------------------------------------------------------------------------------------*
  
  func reloadData () {
   mCurrentObjectArray = mObject.%!RELATIONSHIP_NAME%.mutableCopy () as NSMutableArray
  //--- Update observers for handling model change
    let oldObjectSet = mCurrentObjectSet
    mCurrentObjectSet = NSMutableSet ()
    mCurrentObjectSet.addObjectsFromArray (mObject.%!RELATIONSHIP_NAME%)
  //--- Removed object set
    var removedObjectSet = NSMutableSet ()
    removedObjectSet.setSet (oldObjectSet)
    removedObjectSet.minusSet (mCurrentObjectSet)
    for object : AnyObject in removedObjectSet {
      let managedObject = object as  %!ELEMENT_TYPE_NAME%
%
for () in BOUND_COLUMNS do
%      managedObject.removeObserverOf_%!mObservablePropertyName% (mTriggerObjectForModelChange)\n%
end
%    }
  //--- Added object set
    var addedObjectSet = NSMutableSet ()
    addedObjectSet.setSet (mCurrentObjectSet)
    addedObjectSet.minusSet (oldObjectSet)
    for object : AnyObject in addedObjectSet {
      let managedObject = object as  %!ELEMENT_TYPE_NAME%
%
for () in BOUND_COLUMNS do
%      managedObject.addObserverOf_%!mObservablePropertyName% (mTriggerObjectForModelChange)\n%
end
%    }
    refreshDisplay ()
  }

  //-------------------------------------------------------------------------------------------------------------------*
  
  func refreshDisplay () {
    mTableView?.reloadData ()
  //--- try to restore selection (if any)
    var newSelectionIndexSet = NSMutableIndexSet ()
    for object in mSelectedObjectArray {
      let idx = mCurrentObjectArray.indexOfObjectIdenticalTo (object)
      if idx != NSNotFound {
        newSelectionIndexSet.addIndex (idx)
      }
    }
    mTableView?.selectRowIndexes (newSelectionIndexSet, byExtendingSelection:false)
  }

  //-------------------------------------------------------------------------------------------------------------------*

  private var mTriggerObjectForModelChange_cache : TriggerFor_%!OBJECT_TYPE_NAME%_%!RELATIONSHIP_NAME%_%!TABLE_VIEW_OUTLET_NAME%? = nil
  private var mTriggerObjectForModelChange : TriggerFor_%!OBJECT_TYPE_NAME%_%!RELATIONSHIP_NAME%_%!TABLE_VIEW_OUTLET_NAME% {
    get {
      if mTriggerObjectForModelChange_cache == nil {
        mTriggerObjectForModelChange_cache = TriggerFor_%!OBJECT_TYPE_NAME%_%!RELATIONSHIP_NAME%_%!TABLE_VIEW_OUTLET_NAME% (object:self)
      }
      return mTriggerObjectForModelChange_cache!
    }
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    T A B L E V I E W    D A T A S O U R C E                                                                       *
  //-------------------------------------------------------------------------------------------------------------------*
  // http://thegreyblog.blogspot.fr/2014/06/nscontroltexteditingdelegate-methods.html

  func numberOfRowsInTableView (NSTableView!) -> Int {
    return mCurrentObjectArray.count
  }

  //-------------------------------------------------------------------------------------------------------------------*

  func tableView (tableView : NSTableView,
                  viewForTableColumn : NSTableColumn,
                  row : NSInteger) -> NSView! {
    let columnIdentifier = viewForTableColumn.identifier as String
    var result : NSTableCellView = tableView.makeViewWithIdentifier (columnIdentifier, owner:self) as NSTableCellView
    let object = mCurrentObjectArray.objectAtIndex (row, file:__FILE__, line:__LINE__) as  %!ELEMENT_TYPE_NAME%
   %
for () in BOUND_COLUMNS
do
% if columnIdentifier == "%!mColumnName%" {\n%
  ![[FILE_WRAPPER textFileContentsAtPath !"/cell-" + [mPropertyType key] + "-" + mColumnOutletTypeName + ".txt"] stringByReplacingStringByString !"$MODEL$" !mObservablePropertyName]
%    }%
between %else%
end
%
    return result
  }

 %
for () in BOUND_COLUMNS do
% //-------------------------------------------------------------------------------------------------------------------*

  func set_%!mObservablePropertyName%_Action (sender : %!mColumnOutletTypeName%) {
    if let tableView = mTableView {
      let row = tableView.rowForView (sender)
      let object = mCurrentObjectArray.objectAtIndex (row, file:__FILE__, line:__LINE__) as  %!ELEMENT_TYPE_NAME%
      object.%!mObservablePropertyName% = %![mPropertyType transformerForTableViewAction !"sender"]%
    }
  }

%
end
% //-------------------------------------------------------------------------------------------------------------------*

  func control (control: NSControl!,
                didFailToValidatePartialString: String!,
                errorDescription: String!) {
     NSLog ("didFailToValidatePartialString")
  }
  
  //-------------------------------------------------------------------------------------------------------------------*
  //    add                                                                                                            *
  //-------------------------------------------------------------------------------------------------------------------*

  func add (inSender : AnyObject!) {
    var newObject : PMManagedObject = %!ELEMENT_TYPE_NAME% (undoManager:mUndoManager!)
    var array : NSMutableArray = mObject.%!RELATIONSHIP_NAME%.mutableCopy () as NSMutableArray
    array.addObject (newObject)
    mObject.%!RELATIONSHIP_NAME% = array
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    remove                                                                                                         *
  //-------------------------------------------------------------------------------------------------------------------*

  func remove (inSender : AnyObject!) {
    if let tableView = mTableView {
      var newObjectArray = mObject.mNames.mutableCopy () as NSMutableArray
      for object in mSelectedObjectArray {
        newObjectArray.removeObjectIdenticalTo (object)
      }
      mObject.mNames = newObjectArray
      mSelectedObjectArray = NSArray ()
    }
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //  Transient: canRemove                                                                                             *
  //-------------------------------------------------------------------------------------------------------------------*

  private var canRemove_private = false // As array is empty initially
  var canRemove : Bool { get { return canRemove_private } }
  
  func updateCanRemoveProperty () {
    let newValue = mSelectedObjectArray.count > 0
    if canRemove_private != newValue {
      canRemove_private = newValue
      for anyObject in canRemove_observers {
        let object = anyObject as PMTriggerProtocol
        enterTriggerWithObject (object)
      }
    }
  }
  
  private var canRemove_observers = NSMutableSet ()
  
  func addObserverOf_canRemove (inObserver : PMTriggerProtocol) {
    canRemove_observers.addObject (inObserver)
    enterTriggerWithObject (inObserver)
  }
 
  func removeObserverOf_canRemove (inObserver : PMTriggerProtocol) {
    canRemove_observers.removeObject (inObserver)
    enterTriggerWithObject (inObserver)
  }

}

//---------------------------------------------------------------------------------------------------------------------*
