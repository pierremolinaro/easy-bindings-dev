
import Cocoa

private let displayDebugMessage = false

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
//    %!["TriggerFor_" + OBJECT_TYPE_NAME + "_" + RELATIONSHIP_NAME + "_" + TABLE_VIEW_OUTLET_NAME stringByRightPadding !113 !' ']%*
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

class TriggerFor_%!OBJECT_TYPE_NAME%_%!RELATIONSHIP_NAME%_%!TABLE_VIEW_OUTLET_NAME% : PMTransientEventProtocol {
  private weak var mArrayController : ArrayController_%!OBJECT_TYPE_NAME%_%!RELATIONSHIP_NAME%? = nil
  
  var transientEventIndex : PMTransientIndex { get { return PMTransientIndex.kTriggerOutletDisplay } }
 
  private let mPrivateUniqueIndex : Int ;
  var uniqueIndex : Int { get { return mPrivateUniqueIndex } }
 
  init (object : ArrayController_%!OBJECT_TYPE_NAME%_%!RELATIONSHIP_NAME%) {
    mPrivateUniqueIndex = getUniqueIndex ()
    mArrayController = object
    noteObjectAllocation (self) ;
  }
  
  func unregister () {
  }
  
  deinit {
    noteObjectDeallocation (self) ;
  }

  func noteTransientDidChange () {
  }
  
  func trigger () {
    mArrayController?.modelDidChange ()
  }

  func userClassName () -> String { return "TriggerFor_%!OBJECT_TYPE_NAME%_%!RELATIONSHIP_NAME%_%!TABLE_VIEW_OUTLET_NAME%" }
}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
//    %!["ArrayController_" + OBJECT_TYPE_NAME + "_" + RELATIONSHIP_NAME stringByRightPadding !113 !' ']%*
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

class ArrayController_%!OBJECT_TYPE_NAME%_%!RELATIONSHIP_NAME% : NSObject, NSTableViewDataSource, NSTableViewDelegate, PMUserClassName {
  private var mUndoManager : NSUndoManager?
  private var mObject : %!OBJECT_TYPE_NAME%
  private var mTableView : PMTableView?

  private var mCurrentObjectSet = NSMutableSet ()
  private var mCurrentObjectArray = NSMutableArray ()
  private var mSelectedObjectArray : NSArray = NSArray () {
    didSet {
      updateCanRemoveProperty ()
    }
  }
  
  private var mSelectNewObject = true
  private var mAllowsEmptySelection = false
  private var mAllowsMultipleSelection = true
 
  //-------------------------------------------------------------------------------------------------------------------*
  //    userClassName                                                                                                  *
  //-------------------------------------------------------------------------------------------------------------------*

  func userClassName () -> String { return "ArrayController_%!OBJECT_TYPE_NAME%_%!RELATIONSHIP_NAME%" }
 
  //-------------------------------------------------------------------------------------------------------------------*
  //    init                                                                                                           *
  //-------------------------------------------------------------------------------------------------------------------*

  init (object : %!OBJECT_TYPE_NAME%, tableView:PMTableView?, file:String, line:Int) {
    mObject = object
    mTableView = tableView
    mUndoManager = object.undoManager ()
    super.init ()
    if let unwrappedTableView = tableView {
      unwrappedTableView.allowsEmptySelection = mAllowsEmptySelection
      unwrappedTableView.allowsMultipleSelection = mAllowsMultipleSelection
      var ok = true
%
for () in BOUND_COLUMNS do
%      if let anyObject: AnyObject = unwrappedTableView.makeViewWithIdentifier ("%!mColumnName%", owner:self) {
        if let unwrappedTableCellView = anyObject as? NSTableCellView {
          if !(unwrappedTableCellView.textField is %!mColumnOutletTypeName%) {
            presentErrorWindow (file, line, "\"%!mColumnName%\" column view is not an instance of %!mColumnOutletTypeName%")
            ok = false
          }
        }else{
          presentErrorWindow (file, line, "\"%!mColumnName%\" column cell view is not an instance of NSTableCellView")
          ok = false
        }
      }else{
        presentErrorWindow (file, line, "\"%!mColumnName%\" column view unknown")
        ok = false
      }
%
end
%      if ok {
        unwrappedTableView.setDataSource (self)
        unwrappedTableView.setDelegate (self)
%
for () in BOUND_COLUMNS do
%        if let col_%!mObservablePropertyName% : NSTableColumn = unwrappedTableView.tableColumnWithIdentifier ("%!mColumnName%") {\n%
%          col_%!mObservablePropertyName%.sortDescriptorPrototype = NSSortDescriptor (key:"%!mObservablePropertyName%", ascending:true)\n%
%        }\n%
end

%        let columns = unwrappedTableView.tableColumns as NSArray
        if columns.count > 0 {
          let firstColumn = columns [0] as NSTableColumn
          if let sdp = firstColumn.sortDescriptorPrototype {
            unwrappedTableView.sortDescriptors = NSArray (object:sdp)
          }
        }
      }
    }
    noteObjectAllocation (self)
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    unregister                                                                                                     *
  //-------------------------------------------------------------------------------------------------------------------*

  func unregister () {
    for object : AnyObject in mCurrentObjectSet {
      let managedObject = object as  %!ELEMENT_TYPE_NAME%
%
for () in BOUND_COLUMNS do
%      managedObject.removeObserverOf_%!mObservablePropertyName% (eventModelChange, inTrigger:false)\n%
end
%    }
  }
  
  //-------------------------------------------------------------------------------------------------------------------*
  //    deinit                                                                                                         *
  //-------------------------------------------------------------------------------------------------------------------*

  deinit {
    noteObjectDeallocation (self)
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    tableViewSelectionDidChange                                                                                    *
  //-------------------------------------------------------------------------------------------------------------------*

  func tableViewSelectionDidChange (NSNotification!) {
    if displayDebugMessage {
      appendToTransientEventLog (NSString (format:"    \%@\\n", __FUNCTION__))
    }
    var selectedObjectArray = NSMutableArray ()
    if let tableView = mTableView {
      let selectedRowIndexes = tableView.selectedRowIndexes
      selectedRowIndexes.enumerateIndexesUsingBlock ({(idx : Int, stop : UnsafeMutablePointer <ObjCBool>) in
        stop.initialize (false)
        let object = self.mCurrentObjectArray.objectAtIndex (idx, file:__FILE__, line:__LINE__) as? %!ELEMENT_TYPE_NAME%
        if let unwrappedObject = object {
          selectedObjectArray.addObject (unwrappedObject)
        }
      })
    }
    mSelectedObjectArray = selectedObjectArray
    // NSLog ("mSelectedObjectArray \%d", mSelectedObjectArray.count)
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    tableView:sortDescriptorsDidChange: NSTableViewDataSource delegate                                             *
  //-------------------------------------------------------------------------------------------------------------------*

  func tableView (aTableView: NSTableView!,
                 sortDescriptorsDidChange oldDescriptors: [AnyObject]!) {
    if displayDebugMessage {
      appendToTransientEventLog (NSString (format:"    \%@\\n", __FUNCTION__))
    }
    let sortDescriptors : [AnyObject]! = mTableView?.sortDescriptors
    mCurrentObjectArray.sortUsingDescriptors (sortDescriptors)
    display ()
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    Observing model change                                                                                         *
  //-------------------------------------------------------------------------------------------------------------------*
  
  func modelDidChange () {
    if displayDebugMessage {
      appendToTransientEventLog (NSString (format:"    \%@\\n", __FUNCTION__))
    }
    mCurrentObjectArray = mObject.%!RELATIONSHIP_NAME%.mutableCopy () as NSMutableArray
  //--- Build new selected objects array
    var selectedArrayShouldBeChanged = false
    var newSelectedArray = NSMutableArray ()
    for object in mSelectedObjectArray {
      let idx = mCurrentObjectArray.indexOfObjectIdenticalTo (object)
      if idx == NSNotFound {
        selectedArrayShouldBeChanged = true ;
      }else{
        newSelectedArray.addObject (object)
      }
    }
    if selectedArrayShouldBeChanged {
      mObject.undoManager()?.registerUndoWithTarget(self, selector:"undoFor_selectedObjectArray:", object:mSelectedObjectArray)
      mSelectedObjectArray = newSelectedArray ;
    }
  }

  //-------------------------------------------------------------------------------------------------------------------*
  
  func undoFor_selectedObjectArray (selectedObjectArray : NSArray) {
    mSelectedObjectArray = selectedObjectArray
  }
  
  //-------------------------------------------------------------------------------------------------------------------*
  
  func display () {
    if displayDebugMessage {
      appendToTransientEventLog (NSString (format:"    \%@\\n", __FUNCTION__))
    }
    if let tableView = mTableView {
      let sortDescriptors : [AnyObject]! = mTableView?.sortDescriptors
      mCurrentObjectArray.sortUsingDescriptors (sortDescriptors)
    //--- Update observers for handling model change
      let oldObjectSet = mCurrentObjectSet
      mCurrentObjectSet = NSMutableSet ()
      mCurrentObjectSet.addObjectsFromArray (mObject.%!RELATIONSHIP_NAME%)
    //--- Removed object set
      var removedObjectSet = NSMutableSet ()
      removedObjectSet.setSet (oldObjectSet)
      removedObjectSet.minusSet (mCurrentObjectSet)
      for object : AnyObject in removedObjectSet {
        let managedObject = object as  %!ELEMENT_TYPE_NAME%
%
for () in BOUND_COLUMNS do
%        managedObject.removeObserverOf_%!mObservablePropertyName% (eventModelChange, inTrigger:false)\n%
end
%      }
    //--- Added object set
      var addedObjectSet = NSMutableSet ()
      addedObjectSet.setSet (mCurrentObjectSet)
      addedObjectSet.minusSet (oldObjectSet)
      for object : AnyObject in addedObjectSet {
        let managedObject = object as  %!ELEMENT_TYPE_NAME%
%
for () in BOUND_COLUMNS do
%        managedObject.addObserverOf_%!mObservablePropertyName% (eventModelChange, inTrigger:false)\n%
end
%      }
    //--- Reload data
      tableView.reloadData ()
      var newSelectedArray = mCurrentObjectArray.mutableCopy () as NSMutableArray
      var selectedArrayShouldBeChanged = false
      var newSelectionIndexSet = NSMutableIndexSet ()
      for object in mSelectedObjectArray {
        let idx = mCurrentObjectArray.indexOfObjectIdenticalTo (object)
        if idx == NSNotFound {
          selectedArrayShouldBeChanged = true ;
        }else{
          newSelectionIndexSet.addIndex (idx)
          newSelectedArray.addObject (object)
        }
      }
      if selectedArrayShouldBeChanged {
        mCurrentObjectArray = newSelectedArray ;
      }
      let currentSelectedRowIndexes = tableView.selectedRowIndexes
      if !currentSelectedRowIndexes.isEqualToIndexSet (newSelectionIndexSet) {
        tableView.selectRowIndexes (newSelectionIndexSet, byExtendingSelection:false)
      }
    }
  }

  //-------------------------------------------------------------------------------------------------------------------*

  private var eventModelChange_cache : TriggerFor_%!OBJECT_TYPE_NAME%_%!RELATIONSHIP_NAME%_%!TABLE_VIEW_OUTLET_NAME%? = nil
  private var eventModelChange : TriggerFor_%!OBJECT_TYPE_NAME%_%!RELATIONSHIP_NAME%_%!TABLE_VIEW_OUTLET_NAME% {
    get {
      if eventModelChange_cache == nil {
        eventModelChange_cache = TriggerFor_%!OBJECT_TYPE_NAME%_%!RELATIONSHIP_NAME%_%!TABLE_VIEW_OUTLET_NAME% (object:self)
      }
      return eventModelChange_cache!
    }
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    T A B L E V I E W    D A T A S O U R C E                                                                       *
  //-------------------------------------------------------------------------------------------------------------------*
  // http://thegreyblog.blogspot.fr/2014/06/nscontroltexteditingdelegate-methods.html

  func numberOfRowsInTableView (NSTableView!) -> Int {
    if displayDebugMessage {
      appendToTransientEventLog (NSString (format:"    \%@ (\%ld objects)\\n", __FUNCTION__, mCurrentObjectArray.count))
    }
    return mCurrentObjectArray.count
  }

  //-------------------------------------------------------------------------------------------------------------------*

  func tableView (tableView : NSTableView,
                  viewForTableColumn : NSTableColumn,
                  row : NSInteger) -> NSView! {
    let columnIdentifier = viewForTableColumn.identifier as String
    if displayDebugMessage {
      appendToTransientEventLog (NSString (format:"    \%@, identifier '\%@\', row \%d\\n", __FUNCTION__, columnIdentifier, row))
    }
    var result : NSTableCellView = tableView.makeViewWithIdentifier (columnIdentifier, owner:self) as NSTableCellView
    let object = mCurrentObjectArray.objectAtIndex (row, file:__FILE__, line:__LINE__) as  %!ELEMENT_TYPE_NAME%
   %
for () in BOUND_COLUMNS
do
% if columnIdentifier == "%!mColumnName%" {\n%
  ![[FILE_WRAPPER textFileContentsAtPath !"/cell-" + [mPropertyType key] + "-" + mColumnOutletTypeName + ".txt"] stringByReplacingStringByString !"$MODEL$" !mObservablePropertyName]
%    }%
between %else%
end
%
    return result
  }

 %
for () in BOUND_COLUMNS do
% //-------------------------------------------------------------------------------------------------------------------*

  func set_%!mObservablePropertyName%_Action (sender : %!mColumnOutletTypeName%) {
    if let tableView = mTableView {
      let row = tableView.rowForView (sender)
      if row >= 0 {
        let object = mCurrentObjectArray.objectAtIndex (row, file:__FILE__, line:__LINE__) as %!ELEMENT_TYPE_NAME%
        object.removeObserverOf_%!mObservablePropertyName% (eventModelChange, inTrigger:false)
        object.%!mObservablePropertyName% = %![mPropertyType transformerForTableViewAction !"sender"]%
        object.addObserverOf_%!mObservablePropertyName% (eventModelChange, inTrigger:false)
      }
    }
  }

%
end
%  //-------------------------------------------------------------------------------------------------------------------*
  //    add                                                                                                            *
  //-------------------------------------------------------------------------------------------------------------------*

  func add (inSender : AnyObject!) {
    if displayDebugMessage {
      appendToTransientEventLog (NSString (format:"    \%@\\n", __FUNCTION__))
    }
    var newObject : %!ELEMENT_TYPE_NAME% = %!ELEMENT_TYPE_NAME% (undoManager:mUndoManager!)
    var array : NSMutableArray = mObject.%!RELATIONSHIP_NAME%.mutableCopy () as NSMutableArray
    array.addObject (newObject)
    if mSelectNewObject {
      mSelectedObjectArray = NSArray (object:newObject)
    }
    mObject.%!RELATIONSHIP_NAME% = array
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    remove                                                                                                         *
  //-------------------------------------------------------------------------------------------------------------------*

  func remove (inSender : AnyObject!) {
    if mSelectedObjectArray.count > 0 {
      if let tableView = mTableView {
        var newObjectArray = mObject.mNames.mutableCopy () as NSMutableArray
        for object in mSelectedObjectArray {
          newObjectArray.removeObjectIdenticalTo (object)
        }
        if newObjectArray.count == 0 {
          mSelectedObjectArray = NSArray ()
        }else{
          let idx = tableView.selectedRow
          if idx < mCurrentObjectArray.count {
            mSelectedObjectArray = NSArray (object:mCurrentObjectArray [idx])
          }else{
            mSelectedObjectArray = NSArray (object:newObjectArray.lastObject!)
          }
        }
        mObject.mNames = newObjectArray
      }
    }
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //  Transient: canRemove                                                                                             *
  //-------------------------------------------------------------------------------------------------------------------*

  private var canRemove_private = false // As array is empty initially
  var canRemove : Bool { get { return canRemove_private } }
  
  func updateCanRemoveProperty () {
    if displayDebugMessage {
      appendToTransientEventLog (NSString (format:"    \%@\\n", __FUNCTION__))
    }
    let newValue = mSelectedObjectArray.count > 0
    if canRemove_private != newValue {
      canRemove_private = newValue
      for object in canRemove_observers.values {
        postTransientEvent (object)
      }
    }
  }
  
  private var canRemove_observers : [Int : PMTransientEventProtocol] = [:]
  
  func addObserverOf_canRemove (inObserver : PMTransientEventProtocol, inTrigger:Bool) {
    canRemove_observers [inObserver.uniqueIndex] = inObserver
    if inTrigger {
      postTransientEvent (inObserver)
    }
  }
 
  func removeObserverOf_canRemove (inObserver : PMTransientEventProtocol, inTrigger:Bool) {
    canRemove_observers [inObserver.uniqueIndex] = nil
    if inTrigger {
      postTransientEvent (inObserver)
    }
  }

}

//---------------------------------------------------------------------------------------------------------------------*
