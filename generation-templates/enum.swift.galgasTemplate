
import Foundation

//---------------------------------------------------------------------------------------------------------------------*

enum %!ENUM_TYPE_NAME% : Int, EntityPropertyProtocol {
%
for () in CONSTANT_ORDERED_LIST do index idx
   %  case %!mValue.string% = %![idx string]%\n%
end
%

  func descriptionForExplorer () -> String {
    switch self {
%
for () in CONSTANT_ORDERED_LIST do index idx
   %      case %!mValue.string% : return "%!mValue.string%" // %![idx string]%\n%
end
%    }
  }

  func embeddedNSObject () -> NSObject {
    return NSNumber (integer:self.rawValue)
  }

  func enumfromRawValue (rawValue : Int) -> %!ENUM_TYPE_NAME% {
    var result = self
    let v : %!ENUM_TYPE_NAME%? = %!ENUM_TYPE_NAME% (rawValue:rawValue) ;
    if let unwrappedV = v {
      result = unwrappedV
    }
    return result
  }
}

//---------------------------------------------------------------------------------------------------------------------*

extension NSDictionary {
  func read%!ENUM_TYPE_NAME%  (inKey : String) -> %!ENUM_TYPE_NAME% {
    let v : Int? = objectForKey (inKey)?.integerValue
    var result = %!ENUM_TYPE_NAME%.%![CONSTANT_ORDERED_LIST mValueAtIndex !0].string%
    if v != nil {
      let e : %!ENUM_TYPE_NAME%? = %!ENUM_TYPE_NAME% (rawValue:v!)
      if e != nil {
        result = e!
      }
    }
    return result
  }
}

//---------------------------------------------------------------------------------------------------------------------*

