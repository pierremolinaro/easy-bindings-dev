//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum %!ENUM_TYPE_NAME% : Int {
%
for () in CONSTANT_ORDERED_LIST do index idx
   %  case %!mValue.string% = %![idx string]%\n%
end
%

  func descriptionForExplorer () -> String {
    switch self {
%
for () in CONSTANT_ORDERED_LIST do index idx
   %      case %!mValue.string% : return "%!mValue.string%" // %![idx string]%\n%
end
%    }
  }

  func enumfromRawValue (rawValue : Int) -> %!ENUM_TYPE_NAME% {
    var result = self
    let v : %!ENUM_TYPE_NAME%? = %!ENUM_TYPE_NAME% (rawValue:rawValue) ;
    if let unwrappedV = v {
      result = unwrappedV
    }
    return result
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"EBReadOnlyProperty_" + ENUM_TYPE_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBReadOnlyProperty_%!ENUM_TYPE_NAME% : EBAbstractProperty, EBReadOnlyEnumPropertyProtocol {

  var prop : EBProperty <%!ENUM_TYPE_NAME%> { get { return .noSelection } } // Abstract method

  func rawValue () -> Int { return %!ENUM_TYPE_NAME%.%![CONSTANT_ORDERED_LIST mValueAtIndex !0].string%.rawValue }  // Abstract method

  func count () -> Int { return %![[CONSTANT_ORDERED_LIST length] string]% }

  //····················································································································

  func compare (other : EBReadOnlyProperty_%!ENUM_TYPE_NAME%) -> ComparisonResult {
    switch prop {
    case .noSelection :
      switch other.prop {
      case .noSelection :
        return .orderedSame
      default:
        return .orderedAscending
      }
    case .multipleSelection :
      switch other.prop {
      case .noSelection :
        return .orderedDescending
      case .multipleSelection :
        return .orderedSame
     case .singleSelection (_) :
        return .orderedAscending
     }
   case .singleSelection (let currentValue) :
      switch other.prop {
      case .noSelection, .multipleSelection :
        return .orderedDescending
      case .singleSelection (let otherValue) :
        if currentValue.rawValue < otherValue.rawValue {
          return .orderedAscending
        }else if currentValue.rawValue > otherValue.rawValue {
          return .orderedDescending
        }else{
          return .orderedSame
        }
      }
    }
  }

  //····················································································································
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"EBStoredProperty_" + ENUM_TYPE_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBStoredProperty_%!ENUM_TYPE_NAME% : EBReadOnlyProperty_%!ENUM_TYPE_NAME%, EBEnumPropertyProtocol {
  weak var undoManager : UndoManager?

  var mValueExplorer : NSTextField? {
    didSet {
      mValueExplorer?.stringValue = mValue.descriptionForExplorer ()
    }
  }

  init (_ inValue : %!ENUM_TYPE_NAME%) {
    mValue = inValue
    super.init ()
  }

  private var mValue : %!ENUM_TYPE_NAME% {
    didSet {
      if mValue != oldValue {
        mValueExplorer?.stringValue = mValue.descriptionForExplorer ()
        undoManager?.registerUndo (withTarget: self, selector: #selector(performUndo(_:)), object:NSNumber (value: oldValue.rawValue))
        postEvent ()
        clearSignatureCache ()
      }
    }
  }

  func performUndo (_ oldValue : NSNumber) {
    if let v = %!ENUM_TYPE_NAME% (rawValue:oldValue.intValue) {
      mValue = v
    }
  }

  override var prop : EBProperty <%!ENUM_TYPE_NAME%> { get { return .singleSelection (mValue) } }

  var propval : %!ENUM_TYPE_NAME% { get { return mValue } }

  func setProp (value: %!ENUM_TYPE_NAME%) { mValue = value }

  override func rawValue () -> Int {
    return mValue.rawValue
  }

  func setFromRawValue (_ rawValue : Int) {
    if let v = %!ENUM_TYPE_NAME% (rawValue:rawValue) {
      mValue = v
    }
  }

  func readInPreferencesWithKey (inKey : String) {
    let ud = UserDefaults.standard ()
    let value : AnyObject? = ud.object (forKey: inKey)
    if let unwValue : AnyObject = value where unwValue is NSNumber {
      setFromRawValue ((unwValue as! NSNumber).intValue)
    }
  }
  
  func storeInPreferencesWithKey (inKey : String) {
    let ud = UserDefaults.standard ()
    ud.set (NSNumber (value: mValue.rawValue), forKey:inKey)
  }

  func storeIn (dictionary: NSMutableDictionary, forKey inKey:String) {
    dictionary.setValue (NSNumber (value: mValue.rawValue), forKey:inKey)
  }

  func readFrom (dictionary:NSDictionary, forKey inKey:String) {
    let value : AnyObject? = dictionary.object (forKey: inKey)
    if let unwValue : AnyObject = value where unwValue is NSNumber {
      setFromRawValue ((unwValue as! NSNumber).intValue)
    }
  }

  //····················································································································
 
  var validationFunction : (%!ENUM_TYPE_NAME%, %!ENUM_TYPE_NAME%) -> EBValidationResult <%!ENUM_TYPE_NAME%> = defaultValidationFunction
  
  func validate (proposedValue : %!ENUM_TYPE_NAME%) -> EBValidationResult <%!ENUM_TYPE_NAME%> {
    return validationFunction (propval, proposedValue)
  }

  //····················································································································
  //    SIGNATURE
  //····················································································································

  final private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil
  final private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol) {
    mSignatureObserver = observer
  }

  //····················································································································

  final private func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = mValue.rawValue.ebHashValue ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"EBTransientProperty_" + ENUM_TYPE_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBTransientProperty_%!ENUM_TYPE_NAME% : EBReadOnlyProperty_%!ENUM_TYPE_NAME% {
  private var mValueCache : EBProperty <%!ENUM_TYPE_NAME%>?

  var computeFunction : Optional<() -> EBProperty <%!ENUM_TYPE_NAME%> >
  
  override init () {
    super.init ()
  }

  override var prop : EBProperty <%!ENUM_TYPE_NAME%> {
    get {
      if mValueCache == nil {
        if let unwrappedComputeFunction = computeFunction {
          mValueCache = unwrappedComputeFunction ()
        }else{
          mValueCache = .noSelection
        }
      }
      return mValueCache!
    }
  }

  override func postEvent () {
    if mValueCache != nil {
      mValueCache = nil
      super.postEvent ()
    }
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
