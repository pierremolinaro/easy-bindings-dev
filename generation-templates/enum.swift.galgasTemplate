import Cocoa

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

enum %!ENUM_TYPE_NAME% : Int {
%
for () in CONSTANT_ORDERED_LIST do index idx
   %  case %!mValue.string% = %![idx string]%\n%
end
%

  func descriptionForExplorer () -> String {
    switch self {
%
for () in CONSTANT_ORDERED_LIST do index idx
   %      case %!mValue.string% : return "%!mValue.string%" // %![idx string]%\n%
end
%    }
  }

  func enumfromRawValue (rawValue : Int) -> %!ENUM_TYPE_NAME% {
    var result = self
    let v : %!ENUM_TYPE_NAME%? = %!ENUM_TYPE_NAME% (rawValue:rawValue) ;
    if let unwrappedV = v {
      result = unwrappedV
    }
    return result
  }
}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
//    %!["PMReadOnlyProperty_" + ENUM_TYPE_NAME stringByRightPadding !113 !' ']%*
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

class PMReadOnlyProperty_%!ENUM_TYPE_NAME% : PMAbstractProperty, PMReadOnlyEnumPropertyProtocol {

  var prop : PMProperty <%!ENUM_TYPE_NAME%> { get { return .noSelection } } // Abstract method

  func rawValue () -> Int { return %!ENUM_TYPE_NAME%.%![CONSTANT_ORDERED_LIST mValueAtIndex !0].string%.rawValue }  // Abstract method

  func count () -> Int { return %![[CONSTANT_ORDERED_LIST length] string]% }
}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
//    %!["PMStoredProperty_" + ENUM_TYPE_NAME stringByRightPadding !113 !' ']%*
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

class PMStoredProperty_%!ENUM_TYPE_NAME% : PMReadOnlyProperty_%!ENUM_TYPE_NAME%, PMEnumPropertyProtocol {
  weak var undoManager : NSUndoManager?

  var explorer : NSTextField? {
    didSet {
      explorer?.stringValue = mValue.descriptionForExplorer ()
    }
  }

  init (_ inValue : %!ENUM_TYPE_NAME%) {
    mValue = inValue
    super.init ()
  }

  private var mValue : %!ENUM_TYPE_NAME% {
    didSet {
      if mValue != oldValue {
        explorer?.stringValue = mValue.descriptionForExplorer ()
        undoManager?.registerUndoWithTarget (self, selector:"performUndo:", object:NSNumber (integer:oldValue.rawValue))
        postEvent ()
      }
    }
  }

  func performUndo (oldValue : NSNumber) {
    if let v = %!ENUM_TYPE_NAME% (rawValue:oldValue.integerValue) {
      mValue = v
    }
  }

  override var prop : PMProperty <%!ENUM_TYPE_NAME%> { get { return .singleSelection (mValue) } }

  func setProp (inValue : %!ENUM_TYPE_NAME%) { mValue = inValue }

  override func rawValue () -> Int {
    return mValue.rawValue
  }

  func setFromRawValue (rawValue : Int) {
    if let v = %!ENUM_TYPE_NAME% (rawValue:rawValue) {
      mValue = v
    }
  }

  func readInPreferencesWithKey (inKey : String) {
    let ud = NSUserDefaults.standardUserDefaults ()
    let value : AnyObject? = ud.objectForKey (inKey)
    if let unwValue : AnyObject = value where unwValue is NSNumber {
      setFromRawValue ((unwValue as! NSNumber).integerValue)
    }
  }
  
  func storeInPreferencesWithKey (inKey : String) {
    let ud = NSUserDefaults.standardUserDefaults ()
    ud.setObject (NSNumber (integer:mValue.rawValue), forKey:inKey)
  }

  func storeInDictionary (ioDictionary:NSMutableDictionary, forKey inKey:String) {
    ioDictionary.setValue (NSNumber (integer:mValue.rawValue), forKey:inKey)
  }

  func readFromDictionary (inDictionary:NSDictionary, forKey inKey:String) {
    let value : AnyObject? = inDictionary.objectForKey (inKey)
    if let unwValue : AnyObject = value where unwValue is NSNumber {
      setFromRawValue ((unwValue as! NSNumber).integerValue)
    }
  }

  //-------------------------------------------------------------------------------------------------------------------*
 
  var validationFunction : (%!ENUM_TYPE_NAME%) -> PMValidationResult = defaultValidationFunction
  
  func validate (proposedValue : %!ENUM_TYPE_NAME%) -> PMValidationResult {
    return validationFunction (proposedValue)
  }

}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
//    %!["PMTransientProperty_" + ENUM_TYPE_NAME stringByRightPadding !113 !' ']%*
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

class PMTransientProperty_%!ENUM_TYPE_NAME% : PMReadOnlyProperty_%!ENUM_TYPE_NAME% {
  private var mValueCache : PMProperty <%!ENUM_TYPE_NAME%>?

  var computeFunction : Optional<() -> PMProperty <%!ENUM_TYPE_NAME%> >
  
  override init () {
    super.init ()
  }

  override var prop : PMProperty <%!ENUM_TYPE_NAME%> {
    get {
      if mValueCache == nil {
        if let unwrappedComputeFunction = computeFunction {
          mValueCache = unwrappedComputeFunction ()
        }else{
          mValueCache = .noSelection
        }
      }
      return mValueCache!
    }
  }

  override func postEvent () {
    if mValueCache != nil {
      mValueCache = nil
      super.postEvent ()
    }
  }
}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
