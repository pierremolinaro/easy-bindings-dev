#import "%!STRUCT_TYPE_NAME%.h"
#import "load-store-functions.h"

//-----------------------------------------------------------------------------*

NSString * convert%!STRUCT_TYPE_NAME%ValueToString (NSValue * inValue) {
  %!STRUCT_TYPE_NAME% v ; [inValue getValue: & v] ;
  NSMutableString * result = [NSMutableString new] ;
  [result appendString:@"("] ;
%
foreach STRUCT_FIELD_LIST
  do %  [result appendString:%![mFieldType stringConversionForExplorer!"v." . mFieldName]%] ;\n%
  between %  [result appendString:@", "] ;\n%
end
%  [result appendString:@")"] ;
  return result ;
}

//-----------------------------------------------------------------------------*

void store%!STRUCT_TYPE_NAME%InDictionary (%?^%const %!STRUCT_TYPE_NAME% inValue,
      %!^%NSString * inKey,
      %!^%NSMutableDictionary * ioDictionary) {
%
foreach STRUCT_FIELD_LIST do
  %  store%![mFieldType ebTypeName]%InDictionary (inValue.%!mFieldName%, [inKey stringByAppendingString:@".%!mFieldName%"], ioDictionary) ;\n%
end
%}

//-----------------------------------------------------------------------------*

%!STRUCT_TYPE_NAME% read%!STRUCT_TYPE_NAME%FromDictionary (%?^%NSString * inKey,
      %!^%NSDictionary * inDictionary) {
  %!STRUCT_TYPE_NAME% result ;
%
foreach STRUCT_FIELD_LIST do
  %  result.%!mFieldName% = read%![mFieldType ebTypeName]%FromDictionary ([inKey stringByAppendingString:@".%!mFieldName%"], inDictionary) ;\n%
end
%  return result ;
}

//-----------------------------------------------------------------------------*

BOOL equal%!STRUCT_TYPE_NAME%s (%?^%const %!STRUCT_TYPE_NAME% inValue1,
      %!^%const %!STRUCT_TYPE_NAME% inValue2) {
  BOOL result = YES ;
%
foreach STRUCT_FIELD_LIST do
  %  if (result) {\n%
  %    result = %![mFieldType equalExpression !"inValue1." . mFieldName !"inValue2." . mFieldName]% ;\n% 
  %  }\n%
end
%  return result ;
}

//-----------------------------------------------------------------------------*

%!STRUCT_TYPE_NAME% make%!STRUCT_TYPE_NAME% (%?^
foreach STRUCT_FIELD_LIST
  do %const %![mFieldType ebTypeName]% in_%!mFieldName
  between %,\n%!^
end
%) {
  %!STRUCT_TYPE_NAME% result ;
%
foreach STRUCT_FIELD_LIST do
  %  result.%!mFieldName% = in_%!mFieldName% ;\n%
end
%  return result ;
}

//-----------------------------------------------------------------------------*

NSData * dataEncoded%!STRUCT_TYPE_NAME% (const %!STRUCT_TYPE_NAME% inValue) {
  NSValue * v = [NSValue value:&inValue withObjCType:@encode(%!STRUCT_TYPE_NAME%)] ;
  return [NSArchiver archivedDataWithRootObject:v] ;
}

//-----------------------------------------------------------------------------*

%!STRUCT_TYPE_NAME% %!STRUCT_TYPE_NAME%FromData (NSData * inData) {
  NSValue * v = [NSUnarchiver unarchiveObjectWithData:inData] ;
  %!STRUCT_TYPE_NAME% result ;
  [v getValue:& result] ;
  return result ;
}

//----------------------------------------------------------------------------*

