#import <Foundation/Foundation.h>
%
for () in HEADER_INCLUSIONS do
%#import "%!key%.h"\n%
end
%
//----------------------------------------------------------------------------*

typedef struct {
%
for () in STRUCT_FIELD_LIST do
 %  %![mFieldType ebTypeName]% %!mFieldName% ;\n%
end
%
} %!STRUCT_TYPE_NAME% ;

//-----------------------------------------------------------------------------*

NSString * convert%!STRUCT_TYPE_NAME%ValueToString (NSValue * inValue) ;

//-----------------------------------------------------------------------------*

void store%!STRUCT_TYPE_NAME%InDictionary (%?^%const %!STRUCT_TYPE_NAME% inValue,
   %!^%NSString * inKey,
   %!^%NSMutableDictionary * ioDictionary) ;

//-----------------------------------------------------------------------------*

%!STRUCT_TYPE_NAME% read%!STRUCT_TYPE_NAME%FromDictionary (%?^%NSString * inKey,
   %!^%NSDictionary * inDictionary) ;

//-----------------------------------------------------------------------------*

BOOL equal%!STRUCT_TYPE_NAME%s (%?^%const %!STRUCT_TYPE_NAME% inValue1,
   %!^!STRUCT_TYPE_NAME% inValue2) ;

//-----------------------------------------------------------------------------*

%!STRUCT_TYPE_NAME% make%!STRUCT_TYPE_NAME% (%?^
for () in STRUCT_FIELD_LIST
  do %const %![mFieldType ebTypeName]% in_%!mFieldName
  between %,\n%!^
end
%) ;

//-----------------------------------------------------------------------------*

NSData * dataEncoded%!STRUCT_TYPE_NAME% (const %!STRUCT_TYPE_NAME% inValue) ;

//-----------------------------------------------------------------------------*

%!STRUCT_TYPE_NAME% %!STRUCT_TYPE_NAME%FromData (NSData * inValue) ;

//----------------------------------------------------------------------------*

