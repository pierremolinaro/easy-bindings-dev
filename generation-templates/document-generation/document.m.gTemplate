#import "%!DOCUMENT_NAME%.h"
#import "%!ROOT_ENTITY_CLASS_NAME%.h"
#import "managed-object-model.h"
#import "easy-bindings-utilities.h"

//----------------------------------------------------------------------------*

@implementation %!DOCUMENT_NAME%

//----------------------------------------------------------------------------*
//    Init                                                                    *
//----------------------------------------------------------------------------*

- (id) init {
  #ifdef EASY_BINDINGS_DEBUG
    NSLog (@"\%s", __PRETTY_FUNCTION__) ;
  #endif
  self = [super init] ;
  if (self) {
    #ifdef PM_COCOA_DEBUG
      objectHasBeenAllocated (self) ;
    #endif
  }
  return self ;
}

//----------------------------------------------------------------------------*
//    windowNibName                                                           *
//----------------------------------------------------------------------------*

- (NSString *) windowNibName {
  return @"%!DOCUMENT_NAME%" ;
}

//----------------------------------------------------------------------------*
//    managedObjectModel                                                      *
//----------------------------------------------------------------------------*

- (NSManagedObjectModel *) managedObjectModel {
  return managedObjectModel () ;
}

//----------------------------------------------------------------------------*
//    windowControllerDidLoadNib                                              *
//----------------------------------------------------------------------------*

- (void) windowControllerDidLoadNib: (NSWindowController *) inWindowController { 
  #ifdef EASY_BINDINGS_DEBUG
    NSLog (@"\%s", __PRETTY_FUNCTION__) ;
  #endif
  [super windowControllerDidLoadNib:inWindowController] ;
//--- Disable undo registrations
  NSManagedObjectContext * moc = [self managedObjectContext] ;
  [[moc undoManager] disableUndoRegistration];
//--- Root entity controller creation
  mRootObjectController = [NSObjectController new] ;
  [mRootObjectController setAutomaticallyPreparesContent:YES] ;
  [mRootObjectController setEditable:YES] ;
  [mRootObjectController setEntityName:@"%!ROOT_ENTITY_NAME%"] ;
  [mRootObjectController setManagedObjectContext:moc] ;
//--- Root Object
  [mRootObjectController fetchWithRequest:nil merge:NO error:nil] ;
  mRootObject = [mRootObjectController content] ;
  if (nil == mRootObject) {
    mRootObject = [%!ROOT_ENTITY_CLASS_NAME% insertNewObjectIntoManagedObjectContext:moc] ;
    [mRootObjectController setContent:mRootObject] ;
    // NSLog (@"Root object creation") ;
  }
//--- Enable undo registrations
  [moc processPendingChanges] ;
  [[moc undoManager] enableUndoRegistration];
%
foreach CONTROLLER_MAP do
  %//--- '%!lkey->string%' controller instanciation\n%
  %  %!lkey->string% = [%!mControllerClassName% new] ;\n%
  %  [%!lkey->string% setEntityName:@"%!mControlledClassOrEntityName%"] ;\n%
  %  [%!lkey->string% setManagedObjectContext:moc] ;\n%
end foreach

foreach CONTROLLER_MAP do
  foreach mControllerBindingList
  before 
    %//--- '%!lkey->string%' controller bindings\n%
  do
   %  [%!lkey->string%\n%
   %    bind:@"%!mBindingName%"\n%
   %    toObject:%!mObservedObjectName%\n%
   %    withKeyPath:@"%!mObservableAttributeName%"\n%
   %    options:%
   if [mOutletBindingOptionList length] == 0 then
     %nil\n%
   else
     %[NSDictionary dictionaryWithObjectsAndKeys:\n%
     foreach mOutletBindingOptionList do
       %      %!mValue1%, @%![mValue0 utf8Representation]%,\n%
     end foreach
     %      nil\n%
     %    ]\n%
   end if
   %  ] ;\n%
  end foreach
end foreach

foreach OUTLET_DECLARATION_LIST do
   %//--- check %!mOutletName%' outlet not nil\n%
   %  if (nil == %!mOutletName%) {\n%
   %    presentErrorWindow (__FILE__, __LINE__, @"the '%!mOutletName%' outlet is nil") ;\n%
   %  }\n%
  foreach mOutletBindingList do
   %//--- '%!mOutletName%' outlet: %!mBindingName%' binding\n%
   switch mRequiredFormatter
   when noFormatter :
   when numberFormatter :
     %  if ((nil != %!mOutletName%) && (nil == [%!mOutletName% formatter])) {\n%
     %    presentErrorWindow (__FILE__, __LINE__, @"the '%!mOutletName%' outlet has no formatter, it should have an NSNumberFormatter") ;\n%
     %  }else if ((nil != %!mOutletName%) && ![[%!mOutletName% formatter] isKindOfClass:[NSNumberFormatter class]]) {\n%
     %    presentErrorWindow (__FILE__, __LINE__, @"the '%!mOutletName%' outlet has a formatter that is not kind of NSNumberFormatter class") ;\n%
     %  }\n%
   when dateFormatter :
     %  if ((nil != %!mOutletName%) && (nil == [%!mOutletName% formatter])) {\n%
     %    presentErrorWindow (__FILE__, __LINE__, @"the '%!mOutletName%' outlet has no formatter, it should have an NSDateFormatter") ;\n%
     %  }else if ((nil != %!mOutletName%) && ![[%!mOutletName% formatter] isKindOfClass:[NSDateFormatter class]]) {\n%
     %    presentErrorWindow (__FILE__, __LINE__, @"the '%!mOutletName%' outlet has a formatter that is not kind of NSDateFormatter class") ;\n%
     %  }\n%
   end switch
   %  [%!mOutletName%\n%
   %    bind:@"%!mBindingName%"\n%
   %    toObject:%!mObservedObjectName%\n%
   %    withKeyPath:@"%!mObservableAttributeName%"\n%
   %    options:%
   if [mOutletBindingOptionList length] == 0 then
     %nil\n%
   else
     %[NSDictionary dictionaryWithObjectsAndKeys:\n%
     foreach mOutletBindingOptionList do
       %      %!mValue1%, @%![mValue0 utf8Representation]%,\n%
     end foreach
     %      nil\n%
     %    ]\n%
   end if
   %  ] ;\n%
  end foreach
end foreach
%}

//----------------------------------------------------------------------------*

@end

