#import "PMAllocationDebug.h"
#import "easy-bindings-utilities.h"
#import "PMTransientDependancyManager.h"
#import "PMEntityArrayController.h"
#import "PMEntityController.h"
#import "%!DOCUMENT_NAME%.h"
#import "%!ROOT_ENTITY_NAME%.h"
%if [TRANSIENT_LIST length] > 0 then
%#import "%!DOCUMENT_NAME%-computations.h"\n%
end if
foreach INCLUSION_SET do
  %#import "%!key%.h"\n%
end foreach
%
//----------------------------------------------------------------------------*

@implementation %!DOCUMENT_NAME%

%

if [ATTRIBUTE_LIST length] > 0 then
%//----------------------------------------------------------------------------*
//    @synthesize                                                             *
//----------------------------------------------------------------------------*

%
  foreach ATTRIBUTE_LIST do
    %@synthesize %!mAttributeName% ;\n%
  end foreach
%
%
end if

if [ATTRIBUTE_LIST length] > 0 then
%//----------------------------------------------------------------------------*
//    Swizzle                                                                 *
//----------------------------------------------------------------------------*

+ (void) load {
  Method original, swizzled ;
%
foreach ATTRIBUTE_LIST do
%  original = class_getInstanceMethod (self, @selector (set%![mAttributeName stringByCapitalizingFirstCharacter]%:));
  swizzled = class_getInstanceMethod (self, @selector (set%![mAttributeName stringByCapitalizingFirstCharacter]%_swizzled:));
  macroCheckMethodSwizzling (original, swizzled) ;
  method_exchangeImplementations (original, swizzled) ;
%end foreach
%}

%
end if

if [ATTRIBUTE_LIST length] > 0 then
%//----------------------------------------------------------------------------*
//    init                                                                    *
//----------------------------------------------------------------------------*

- (instancetype) init {
  self = [super init] ;
  if (self) {
%
  foreach ATTRIBUTE_LIST do
  %    self.%!mAttributeName% = %!mDirectDefaultValue% ;\n%
  end foreach
  !generateAddObserverForTransients [!TRANSIENT_LIST !"  "]
%  }
  return self ;
}

%
end if

%//----------------------------------------------------------------------------*
//    windowNibName                                                           *
//----------------------------------------------------------------------------*

- (NSString *) windowNibName {
  return @"%!DOCUMENT_NAME%" ;
}

//----------------------------------------------------------------------------*
//    rootEntityClass                                                         *
//----------------------------------------------------------------------------*

- (Class) rootEntityClass {
  return [%!ROOT_ENTITY_NAME% class] ;
}

//----------------------------------------------------------------------------*
//    rootObject                                                              *
//----------------------------------------------------------------------------*

- (%!ROOT_ENTITY_NAME% *) rootObject {
  return (%!ROOT_ENTITY_NAME% *) mRootObject ;
}

%

foreach ATTRIBUTE_LIST do
%//----------------------------------------------------------------------------*
//    '%!mAttributeName%' attribute                                            *
//----------------------------------------------------------------------------*

- (void) set%![mAttributeName stringByCapitalizingFirstCharacter]%_swizzled: (%![mType ocTypeName]%) inNewValue {
%if [mType equalMethod] == "" then
%  if (self.%!mAttributeName% != inNewValue) {
%else
%  if (! [self.%!mAttributeName% %![mType equalMethod]%:inNewValue]) {
%end if%    [self set%![mAttributeName stringByCapitalizingFirstCharacter]%_swizzled:inNewValue] ;
    [%!mAttributeName%_observers makeObjectsPerformSelector:@selector (%!["document." . DOCUMENT_NAME . "." . mAttributeName identifierRepresentation]%_didChange)] ;
%!generateTransientTriggering [!mAttributeName !DOCUMENT_NAME !TRANSIENT_LIST !"document"]
%  }
}

//----------------------------------------------------------------------------*

- (void) addObserverOf_%!mAttributeName%: (id) inObserver {
  if (nil == %!mAttributeName%_observers) {
    %!mAttributeName%_observers = [NSMutableSet new] ;
  }
  [%!mAttributeName%_observers addObject:inObserver] ;
  [inObserver performSelector:@selector (%!["document." . DOCUMENT_NAME . "." . mAttributeName identifierRepresentation]%_didChange)] ;
}

//----------------------------------------------------------------------------*

- (void) removeObserverOf_%!mAttributeName%: (id) inObserver {
  [%!mAttributeName%_observers removeObject:inObserver] ;
  [inObserver performSelector:@selector (%!["document." . DOCUMENT_NAME . "." . mAttributeName identifierRepresentation]%_didChange)] ;
}

%
end foreach
%
//----------------------------------------------------------------------------*
//    windowControllerDidLoadNib                                              *
//----------------------------------------------------------------------------*

- (void) windowControllerDidLoadNib: (NSWindowController *) inWindowController { 
  #ifdef EASY_BINDINGS_DEBUG
    NSLog (@"\%s", __PRETTY_FUNCTION__) ;
  #endif
  [super windowControllerDidLoadNib:inWindowController] ;
//--------------------------- Controller instanciation
%
foreach CONTROLLER_MAP do
  %//--- '%!lkey->string%' controller instanciation\n%
  %  %!lkey->string% = [%!mControllerClassName% new] ;\n%
  if mControlledClassOrEntityName->string != "" then
    %  %!lkey->string%.objectClass = [%!mControlledClassOrEntityName->string% class] ;\n%
    %  %!lkey->string%.entityManager = self.entityManager ;\n%
  end if
end foreach
%//--------------------------- Controller bindings
%
foreach CONTROLLER_MAP do
  foreach mControllerBindingList
  before 
    %//--- '%!lkey->string%' controller bindings\n%
  do
   ![mBinding generateBinding !lkey->string]
  end foreach
end foreach
%//--------------------------- Outlet bindings
%

foreach OUTLET_GENERATION_LIST do
   %//--- Outlet %!mOutletName%\n%
   %  if (nil == %!mOutletName%) {\n%
   %    presentErrorWindow (__FILE__, __LINE__, @"the '%!mOutletName%' outlet is nil") ;\n%
   %  }\n%
  foreach mOutletBindingList do
    ![mBinding generateBinding !mOutletName]
  end foreach
end foreach
%//--------------------------- Add Transient observers
%!generateAddObserverForTransients [!TRANSIENT_LIST !""]
%//--------------------------- Add Signature observer
%
if HAS_SIGNATURE_OBSERVER then
  %  [mRootObject addSignatureObserver:self] ;\n%
end if
%}

//----------------------------------------------------------------------------*
//   R E M O V E    W I N D O W    C O N T R O L L E R                        *
//----------------------------------------------------------------------------*

- (void) removeWindowController:(NSWindowController *) inWindowController {
  //NSLog (@"\%s", __PRETTY_FUNCTION__) ;
//--------------------------- Add Signature observer
%
if HAS_SIGNATURE_OBSERVER then
  %  [mRootObject removeSignatureObserver:self] ;\n%
end if
%//--- Unbind Outlets
%foreach OUTLET_GENERATION_LIST do
  foreach mOutletBindingList do
    ![mBinding generateRemoveBinding !mOutletName]
  end foreach
end foreach
%//--- Unbind Controllers
%foreach CONTROLLER_MAP do
  foreach mControllerBindingList do
   ![mBinding generateRemoveBinding !lkey->string]
  end foreach
end foreach
%//--- Remove Transient observers
%!generateRemoveObserverForTransients [!TRANSIENT_LIST]
%//--- Release controllers
%foreach CONTROLLER_MAP do
  %  macroReleaseSetToNil (%!lkey->string%) ;\n%
end foreach
%//--- Remove circularities in outlets
%foreach OUTLET_GENERATION_LIST do
  if mImplementsDeallocProtocol then
    %  [%!mOutletName% objectWillBeDeallocated] ;\n%
  end if 
end foreach
%//---
  [super removeWindowController:inWindowController] ;
}

% !generateObserverRoutinesForTransient [!DOCUMENT_NAME !TRANSIENT_LIST !"document"]

!generateTransientCacheRoutine [!DOCUMENT_NAME !TRANSIENT_LIST]

if HAS_SIGNATURE_OBSERVER then
%//----------------------------------------------------------------------------*
//   T R I G G E R    S I G N A T U R E    C O M P U T I N G                  *
//----------------------------------------------------------------------------*

- (void) triggerSignatureComputing {
  #ifdef EASY_BINDINGS_DEBUG
    NSLog (@"\%s", __PRETTY_FUNCTION__) ;
  #endif
%
foreach TRANSIENT_LIST do
  if [mRootSignDependencyList length] > 0 then
%  if (%!mTransientName%__computed) {
    %!mTransientName%__computed = NO ;
    [PMTransientDependancyManager
      enterTriggerForObject:self
      transientIndex:%!["document." . DOCUMENT_NAME . "." . mTransientName identifierRepresentation]%
    ] ;
  }
%  
  end if
end foreach
%}

//----------------------------------------------------------------------------*

%
end if

%
