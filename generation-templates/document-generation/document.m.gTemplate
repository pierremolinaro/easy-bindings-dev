#import "PMAllocationDebug.h"
#import "managed-object-model.h"
#import "easy-bindings-utilities.h"
#import "PMTransientDependancyManager.h"
#import "%!DOCUMENT_NAME%.h"
#import "%!ROOT_ENTITY_CLASS_NAME%.h"
%if [TRANSIENT_LIST_FOR_IMPLEMENTATION length] > 0 then
%#import "%!DOCUMENT_NAME%-computations.h"\n%
end if
foreach INCLUSION_SET do
  %#import "%!key%.h"\n%
end foreach
%
//----------------------------------------------------------------------------*

@implementation %!DOCUMENT_NAME%

//----------------------------------------------------------------------------*
//    windowNibName                                                           *
//----------------------------------------------------------------------------*

- (NSString *) windowNibName {
  return @"%!DOCUMENT_NAME%" ;
}

//----------------------------------------------------------------------------*
//    rootObject                                                              *
//----------------------------------------------------------------------------*

- (PMManagedObject *) rootObject {
  return mRootObject ;
}

//----------------------------------------------------------------------------*
//    fetchRootObject                                                         *
//----------------------------------------------------------------------------*

- (void) fetchRootObject { 
  #ifdef EASY_BINDINGS_DEBUG
    NSLog (@"\%s", __PRETTY_FUNCTION__) ;
  #endif
  NSManagedObjectContext * moc = self.managedObjectContext ;
  NSArray * array = [moc
    executeFetchRequest:[NSFetchRequest fetchRequestWithEntityName:@"%!ROOT_ENTITY_NAME%"]
    error:nil
  ] ;
  if (array.count == 0) {
    mRootObject = [NSEntityDescription insertNewObjectForEntityForName:@"%!ROOT_ENTITY_NAME%" inManagedObjectContext:moc] ;
    [self hookOfRootObjectDidCreate] ;
  }else{
    mRootObject = [array objectAtIndex:0] ;
  }
}

//----------------------------------------------------------------------------*
//    windowControllerDidLoadNib                                              *
//----------------------------------------------------------------------------*

- (void) windowControllerDidLoadNib: (NSWindowController *) inWindowController { 
  #ifdef EASY_BINDINGS_DEBUG
    NSLog (@"\%s", __PRETTY_FUNCTION__) ;
  #endif
  [super windowControllerDidLoadNib:inWindowController] ;
//--------------------------- Controller instanciation
%
foreach CONTROLLER_MAP
before
  %  NSManagedObjectContext * moc = self.managedObjectContext ;\n%
do
  %//--- '%!lkey->string%' controller instanciation\n%
  %  %!lkey->string% = [%!mControllerClassName% new] ;\n%
  if mControlledClassOrEntityName->string != "" then
    %  [%!lkey->string% setEntityName:@"%!mControlledClassOrEntityName->string%"] ;\n%
    %  [%!lkey->string% setManagedObjectContext:moc] ;\n%
  end if
end foreach
%//--------------------------- Controller bindings
%
foreach CONTROLLER_MAP do
  foreach mControllerBindingList
  before 
    %//--- '%!lkey->string%' controller bindings\n%
  do
   ![mBinding generateBinding !lkey->string]
  end foreach
end foreach
%//--------------------------- Outlet bindings
%

foreach OUTLET_DECLARATION_LIST do
   %//--- Outlet %!mOutletName%\n%
   %  if (nil == %!mOutletName%) {\n%
   %    presentErrorWindow (__FILE__, __LINE__, @"the '%!mOutletName%' outlet is nil") ;\n%
   %  }\n%
  foreach mOutletBindingList do
    ![mBinding generateBinding !mOutletName]
  end foreach
end foreach
%//--------------------------- Add Transient observers
%!generateAddObserverForTransients [!TRANSIENT_LIST_FOR_IMPLEMENTATION !""]
%}

//----------------------------------------------------------------------------*
//   R E M O V E    W I N D O W    C O N T R O L L E R                        *
//----------------------------------------------------------------------------*

- (void) removeWindowController:(NSWindowController *) inWindowController {
  //NSLog (@"\%s", __PRETTY_FUNCTION__) ;
//--- Unbind Outlets
%foreach OUTLET_DECLARATION_LIST do
  foreach mOutletBindingList do
    ![mBinding generateRemoveBinding !mOutletName]
  end foreach
end foreach
%//--- Unbind Controllers
%foreach CONTROLLER_MAP do
  foreach mControllerBindingList do
   ![mBinding generateRemoveBinding !lkey->string]
  end foreach
end foreach
%//--- Remove Transient observers
%!generateRemoveObserverForTransients [!TRANSIENT_LIST_FOR_IMPLEMENTATION]
%//---
  [super removeWindowController:inWindowController] ;
}

% !generateObserverRoutinesForTransient [!DOCUMENT_NAME !TRANSIENT_LIST_FOR_IMPLEMENTATION !"document"]

!generateTransientCacheRoutine [!DOCUMENT_NAME !TRANSIENT_LIST_FOR_IMPLEMENTATION]

%
