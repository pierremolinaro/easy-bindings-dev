//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
%
if TRANSIENT then
  %//   Transient property class %!CLASS_NAME%\n%
else
  %//   Property class %!CLASS_NAME%\n%
end
%//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_%!CLASS_NAME%  = EBReadOnlyClassProperty <%!CLASS_NAME%>
typealias EBTransientProperty_%!CLASS_NAME% = EBTransientClassProperty <%!CLASS_NAME%>
%
if TRANSIENT then
  %typealias EBReadOnlyPropertyArray_%!CLASS_NAME%  = EBReadOnlyClassProperty <[%!CLASS_NAME%]>\n%
  %typealias EBTransientPropertyArray_%!CLASS_NAME% = EBTransientClassProperty <[%!CLASS_NAME%]>\n%
else
  %typealias EBReadWriteProperty_%!CLASS_NAME% = EBReadWriteClassProperty <%!CLASS_NAME%>\n%
  %typealias EBPropertyProxy_%!CLASS_NAME%     = EBPropertyClassProxy <%!CLASS_NAME%>\n%
  %typealias EBStoredProperty_%!CLASS_NAME%    = EBStoredClassProperty <%!CLASS_NAME%>\n%
end
%
%
if COMPARABLE then
%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func compare_%!CLASS_NAME% (left : EBReadOnlyProperty_%!CLASS_NAME%, right : EBReadOnlyProperty_%!CLASS_NAME%) -> NSComparisonResult {
  switch left.prop {
  case .noSelection :
    switch right.prop {
    case .noSelection :
      return .OrderedSame
    default:
      return .OrderedAscending
    }
  case .multipleSelection :
    switch right.prop {
    case .noSelection :
      return .OrderedDescending
    case .multipleSelection :
      return .OrderedSame
   case .singleSelection (_) :
      return .OrderedAscending
   }
 case .singleSelection (let currentValue) :
    switch right.prop {
    case .noSelection, .multipleSelection :
      return .OrderedDescending
    case .singleSelection (let otherValue) :
      if currentValue < otherValue {
        return .OrderedAscending
      }else if currentValue > otherValue {
        return .OrderedDescending
      }else{
        return .OrderedSame
      }
    }
  }
}
%
end

