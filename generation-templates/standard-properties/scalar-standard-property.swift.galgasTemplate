//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Scalar property %!TYPE%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_%!TYPE%    = EBObservableProperty <%!TYPE%>
typealias EBTransientProperty_%!TYPE%   = EBGenericTransientProperty <%!TYPE%>
%if not TRANSIENT then
%typealias EBReadWriteProperty_%!TYPE%   = EBObservableMutableProperty <%!TYPE%>
typealias EBComputedProperty_%!TYPE%    = EBGenericComputedProperty <%!TYPE%>
typealias EBStoredProperty_%!TYPE%      = EBGenericStoredProperty <%!TYPE%>
typealias EBPreferencesProperty_%!TYPE% = EBGenericPreferenceProperty <%!TYPE%>

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func values_%!TYPE%_are_ordered (_ inLeft : %!TYPE%, _ inAscending : Bool, _ inRight : %!TYPE%) -> Bool {
  let left  = inAscending ? inLeft  : inRight
  let right = inAscending ? inRight : inLeft
%
if COMPARISON_METHOD != "" then
  %  return left.%!COMPARISON_METHOD% (right) == .orderedAscending\n%
else
  %  return left < right\n%
end
%}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor func compare_%!TYPE%_properties (_ inLeft : EBReadOnlyProperty_%!TYPE%, _ inAscending : Bool,
                                            _ inRight : EBReadOnlyProperty_%!TYPE%) -> ComparisonResult {
  let left  = inAscending ? inLeft  : inRight
  let right = inAscending ? inRight : inLeft
  switch left.selection {
  case .empty :
    switch right.selection {
    case .empty :
      return .orderedSame
    default:
      return .orderedAscending
    }
  case .multiple :
    switch right.selection {
    case .empty :
      return .orderedDescending
    case .multiple :
      return .orderedSame
   case .single (_) :
      return .orderedAscending
   }
 case .single (let currentValue) :
    switch right.selection {
    case .empty, .multiple :
      return .orderedDescending
    case .single (let otherValue) :
%
if COMPARISON_METHOD != "" then
  %      return currentValue.%!COMPARISON_METHOD% (otherValue)\n%
else
  %      if currentValue < otherValue {\n%
  %        return .orderedAscending\n%
  %      }else if currentValue > otherValue {\n%
  %        return .orderedDescending\n%
  %      }else{\n%
  %        return .orderedSame\n%
  %      }\n%
end
%    }
  }
}
%end
%
