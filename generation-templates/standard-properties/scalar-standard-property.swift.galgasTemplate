//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBReadOnlyProperty_%!TYPE% (abstract class)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBReadOnlyProperty_%!TYPE%)
class EBReadOnlyProperty_%!TYPE% : EBAbstractProperty {
  var prop : EBProperty <%!TYPE%> { get { return .noSelection } } // Abstract method
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBReadWriteProperty_%!TYPE% (abstract class)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBReadWriteProperty_%!TYPE%)
class EBReadWriteProperty_%!TYPE% : EBReadOnlyProperty_%!TYPE% {
  func setProp (inValue : %!TYPE%) { } // Abstract method
  func validateAndSetProp (candidateValue : %!TYPE%, windowForSheet inWindow:NSWindow?) -> Bool {
    return false
  } // Abstract method
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBPropertyProxy_%!TYPE%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBPropertyProxy_%!TYPE%)
final class EBPropertyProxy_%!TYPE% : EBReadWriteProperty_%!TYPE% {
  var readModelFunction : Optional < () -> EBProperty <%!TYPE%> >
  var writeModelFunction : Optional < (%!TYPE%) -> Void >
  var validateAndWriteModelFunction : Optional < (%!TYPE%, NSWindow?) -> Bool >
  
  private var prop_cache : EBProperty <%!TYPE%>?
  
  //····················································································································

  override init () {
    super.init ()
  }
  
  //····················································································································

  var mValueExplorer : NSTextField? {
    didSet {
      updateValueExplorer (prop_cache)
    }
  }

  //····················································································································

  private func updateValueExplorer (possibleValue : EBProperty <%!TYPE%>?) {
    if let valueExplorer = mValueExplorer, unwProp = possibleValue {
      switch unwProp {
      case .noSelection :
        valueExplorer.stringValue = "No selection"
      case .multipleSelection :
        valueExplorer.stringValue = "Multiple selection"
      case .singleSelection (let value) :
        valueExplorer.stringValue = value.description
      }
    }else{
      mValueExplorer?.stringValue = "nil"
    }
  }

  //····················································································································

  override func postEvent () {
    if prop_cache != nil {
      prop_cache = nil
      super.postEvent ()
    }
  }

  //····················································································································

  override var prop : EBProperty <%!TYPE%> {
    get {
      if let unReadModelFunction = readModelFunction where prop_cache == nil {
        prop_cache = unReadModelFunction ()
        updateValueExplorer (prop_cache)
      }
      if prop_cache == nil {
        prop_cache = .noSelection
      }
      return prop_cache!
    }
  }

  //····················································································································
  
  override func setProp (inValue : %!TYPE%) {
    if let unWriteModelFunction = writeModelFunction {
      unWriteModelFunction (inValue)
    }
  }

  //····················································································································

  override func validateAndSetProp (candidateValue : %!TYPE%,
                                    windowForSheet inWindow:NSWindow?) -> Bool {
    var result = false
    if let unwValidateAndWriteModelFunction = validateAndWriteModelFunction {
      result = unwValidateAndWriteModelFunction (candidateValue, inWindow)
    }
    return result
  }
  
  //····················································································································
  
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBStoredProperty_%!TYPE%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBStoredProperty_%!TYPE%)
final class EBStoredProperty_%!TYPE% : EBReadWriteProperty_%!TYPE% {
  weak var undoManager : NSUndoManager?

  //····················································································································

  var mValueExplorer : NSTextField? {
    didSet {
      mValueExplorer?.stringValue = mValue.description
    }
  }

  //····················································································································

  init (_ inValue : %!TYPE%) {
    mValue = inValue
    super.init ()
  }

  //····················································································································

  private var mValue : %!TYPE% {
    didSet {
      if mValue != oldValue {
        mValueExplorer?.stringValue = mValue.description
        undoManager?.registerUndoWithTarget (self, selector:Selector ("performUndo:"), object:NSNumber (%!TO_NSNUMBER%:oldValue))
        postEvent ()
        clearSignatureCache ()
      }
    }
  }

  //····················································································································

  func performUndo (oldValue : NSNumber) {
    mValue = oldValue.%!TO_NSNUMBER%Value
  }

  //····················································································································

  override var prop : EBProperty<%!TYPE%> { get { return .singleSelection (mValue) } }

  var propval : %!TYPE% { get { return mValue } }

  override func setProp (inValue : %!TYPE%) { mValue = inValue }

  //····················································································································
 
  var validationFunction : (%!TYPE%) -> EBValidationResult = defaultValidationFunction
  
  override func validateAndSetProp (candidateValue : %!TYPE%,
                                    windowForSheet inWindow:NSWindow?) -> Bool {
    var result = true
    let validationResult = validationFunction (candidateValue)
    switch validationResult {
    case EBValidationResult.ok :
      setProp (candidateValue)
    case EBValidationResult.rejectWithBeep :
      result = false
      NSBeep ()
    case EBValidationResult.rejectWithAlert (let informativeText) :
      result = false
      let alert = NSAlert ()
      alert.messageText = "The value " + String (candidateValue) + " is invalid."
      alert.informativeText = informativeText
      alert.addButtonWithTitle ("Ok")
      alert.addButtonWithTitle ("Discard Change")
      if let window = inWindow {
        alert.beginSheetModalForWindow (window, completionHandler:{(response : NSModalResponse) in
          if response == NSAlertSecondButtonReturn { // Discard Change
            self.postEvent ()
          }
        })
      }else{
        alert.runModal ()
      }
    }
    return result
  }

  //····················································································································

  func readInPreferencesWithKey (inKey : String) {
    let ud = NSUserDefaults.standardUserDefaults ()
    let value : AnyObject? = ud.objectForKey (inKey)
    if let unwValue : AnyObject = value where unwValue is NSNumber {
      setProp ((unwValue as! NSNumber).%!TO_NSNUMBER%Value)
    }
  }

  //····················································································································

  func storeInPreferencesWithKey (inKey : String) {
    let ud = NSUserDefaults.standardUserDefaults ()
    ud.setObject (NSNumber (%!TO_NSNUMBER%:mValue), forKey:inKey)
  }

  //····················································································································

  func storeInDictionary (ioDictionary:NSMutableDictionary, forKey inKey:String) {
    ioDictionary.setValue (NSNumber (%!TO_NSNUMBER%:mValue), forKey:inKey)
  }

  //····················································································································

  func readFromDictionary (inDictionary:NSDictionary, forKey inKey:String) {
    let value : AnyObject? = inDictionary.objectForKey (inKey)
    if let unwValue : AnyObject = value where unwValue is NSNumber {
      setProp ((unwValue as! NSNumber).%!TO_NSNUMBER%Value)
    }
  }

  //····················································································································
  //    SIGNATURE
  //····················································································································

  final private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil
  final private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol) {
    mSignatureObserver = observer
  }

  //····················································································································

  final private func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = propval.ebHashValue ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBTransientProperty_%!TYPE%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBTransientProperty_%!TYPE%)
class EBTransientProperty_%!TYPE% : EBReadOnlyProperty_%!TYPE% {
  private var mValueCache : EBProperty <%!TYPE%>? = nil
  var computeFunction : Optional<() -> EBProperty <%!TYPE%> >
  
  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  override var prop : EBProperty <%!TYPE%> {
    get {
      if let unwrappedComputeFunction = computeFunction where mValueCache == nil {
        mValueCache = unwrappedComputeFunction ()
      }
      if mValueCache == nil {
        mValueCache = .noSelection
      }
      return mValueCache!
    }
  }

  //····················································································································

  override func postEvent () {
    if mValueCache != nil {
      mValueCache = nil
      super.postEvent ()
    }
  }

  //····················································································································

}

