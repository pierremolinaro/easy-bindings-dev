//----------------------------------------------------------------------------------------------------------------------
//   Scalar property %!TYPE%
//----------------------------------------------------------------------------------------------------------------------

typealias EBReadOnlyProperty_%!TYPE%    = EBReadOnlyValueProperty <%!TYPE%>
typealias EBTransientProperty_%!TYPE%   = EBTransientValueProperty <%!TYPE%>
%if not TRANSIENT then
%typealias EBReadWriteProperty_%!TYPE%   = EBReadWriteValueProperty <%!TYPE%>
typealias EBPropertyProxy_%!TYPE%       = EBPropertyValueProxy <%!TYPE%>
typealias EBStoredProperty_%!TYPE%      = EBStoredValueProperty <%!TYPE%>
typealias EBPreferencesProperty_%!TYPE% = EBPreferencesValueProperty <%!TYPE%>

//----------------------------------------------------------------------------------------------------------------------

func compare_%!TYPE%_properties (_ left : EBReadOnlyProperty_%!TYPE%, _ right : EBReadOnlyProperty_%!TYPE%) -> ComparisonResult {
  switch left.prop {
  case .empty :
    switch right.prop {
    case .empty :
      return .orderedSame
    default:
      return .orderedAscending
    }
  case .multiple :
    switch right.prop {
    case .empty :
      return .orderedDescending
    case .multiple :
      return .orderedSame
   case .single (_) :
      return .orderedAscending
   }
 case .single (let currentValue) :
    switch right.prop {
    case .empty, .multiple :
      return .orderedDescending
    case .single (let otherValue) :
%
if COMPARISON_METHOD != "" then
  %      return currentValue.%!COMPARISON_METHOD% (otherValue)\n%
else
  %      if currentValue < otherValue {\n%
  %        return .orderedAscending\n%
  %      }else if currentValue > otherValue {\n%
  %        return .orderedDescending\n%
  %      }else{\n%
  %        return .orderedSame\n%
  %      }\n%
end
%    }
  }
}
%end
%
