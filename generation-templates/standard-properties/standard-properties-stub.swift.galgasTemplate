//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Protocol ValuePropertyProtocol
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ValuePropertyProtocol : Equatable {
  func ebHashValue () -> UInt32
  func convertToNSObject () -> NSObject
  static func convertFromNSObject (object : NSObject) -> Self
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBReadOnlyValueProperty <T>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBReadOnlyValueProperty <T> : EBAbstractProperty {

  var prop : EBSelection <T> { get { return .empty } } // Abstract method
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBReadWriteValueProperty <T> (abstract class)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBReadWriteValueProperty <T> : EBReadOnlyValueProperty <T> {
  func setProp (_ value : T) { } // Abstract method
  func validateAndSetProp (_ candidateValue : T, windowForSheet inWindow:NSWindow?) -> Bool {
    return false
  } // Abstract method
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBPropertyValueProxy <T : ValuePropertyProtocol>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class EBPropertyValueProxy <T : ValuePropertyProtocol> : EBReadWriteValueProperty <T> {
  var readModelFunction : Optional < () -> EBSelection <T> > = nil
  var writeModelFunction : Optional < (T) -> Void > = nil
  var validateAndWriteModelFunction : Optional < (T, NSWindow?) -> Bool > = nil
  
  private var prop_cache : EBSelection <T>? = nil
  
  //····················································································································

  override init () {
    super.init ()
  }
  
  //····················································································································

  var mValueExplorer : NSTextField? {
    didSet {
      updateValueExplorer (possibleValue:prop_cache)
    }
  }

  //····················································································································

  private func updateValueExplorer (possibleValue : EBSelection <T>?) {
    if let valueExplorer = self.mValueExplorer, let unwProp = possibleValue {
      switch unwProp {
      case .empty :
        valueExplorer.stringValue = "—"
      case .multiple :
        valueExplorer.stringValue = "—"
      case .single (let value) :
        valueExplorer.stringValue = "\(value)"
      }
    }else{
      self.mValueExplorer?.stringValue = "nil"
    }
  }

  //····················································································································

  override func postEvent () {
    if prop_cache != nil {
      prop_cache = nil
      if logEvents () {
        appendMessageString ("Proxy \(explorerIndexString (self.ebObjectIndex)) propagation\\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("Proxy \(explorerIndexString (self.ebObjectIndex)) nil\\n")
    }
  }

  //····················································································································

  override var prop : EBSelection <T> {
    get {
      if let unReadModelFunction = readModelFunction, prop_cache == nil {
        prop_cache = unReadModelFunction ()
        updateValueExplorer (possibleValue:prop_cache)
      }
      if prop_cache == nil {
        prop_cache = .empty
      }
      return prop_cache!
    }
  }

  //····················································································································
  
  override func setProp (_ value : T) {
    if let unWriteModelFunction = writeModelFunction {
      unWriteModelFunction (value)
    }
  }

  //····················································································································

  override func validateAndSetProp (_ candidateValue : T,
                                    windowForSheet inWindow:NSWindow?) -> Bool {
    var result = false
    if let unwValidateAndWriteModelFunction = validateAndWriteModelFunction {
      result = unwValidateAndWriteModelFunction (candidateValue, inWindow)
    }
    return result
  }
  
  //····················································································································
  
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBStoredValueProperty <T>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class EBStoredValueProperty <T : ValuePropertyProtocol> : EBReadWriteValueProperty <T> {
  weak var undoManager : UndoManager?  // SOULD BE WEAK
  fileprivate var mPreferenceKey : String?
  var mSetterDelegate : ((_ inValue : T) -> Void)?

  //····················································································································

  var mValueExplorer : NSTextField? {
    didSet {
      self.mValueExplorer?.stringValue = "\(mValue)"
    }
  }

  //····················································································································

  init (_ inValue : T) {
    mValue = inValue
    mPreferenceKey = nil
    mSetterDelegate = nil
    super.init ()
  }

  //····················································································································

  init (_ inValue : T, prefKey inPreferenceKey : String) {
    mValue = inValue
    mPreferenceKey = inPreferenceKey
    mSetterDelegate = nil
    super.init ()
  //--- Read from preferences
    let value : Any? = UserDefaults.standard.object (forKey: inPreferenceKey)
    if let unwValue : NSObject = value as? NSObject {
      setProp (T.convertFromNSObject (object:unwValue))
    }
  }

 //····················································································································

  init (_ inValue : T, setterDelegate inSetterDelegate : @escaping (_ inValue : T) -> Void) {
    mValue = inValue
    mPreferenceKey = nil
    mSetterDelegate = inSetterDelegate
    super.init ()
   }

  //····················································································································

  private var mValue : T {
    didSet {
      if self.mValue != oldValue {
        self.mSetterDelegate? (mValue)
        if let prefKey = self.mPreferenceKey {
          UserDefaults.standard.set (mValue.convertToNSObject (), forKey:prefKey)
        }
        self.mValueExplorer?.stringValue = "\(mValue)"
        self.undoManager?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object: oldValue.convertToNSObject ())
        if logEvents () {
          appendMessageString ("Property \(explorerIndexString (self.ebObjectIndex)) did change value to \(mValue)\\n")
        }
        postEvent ()
        clearSignatureCache ()
      }
    }
  }

  //····················································································································

  @objc func performUndo (_ oldValue : NSNumber) {
    self.mValue = T.convertFromNSObject (object: oldValue)
  }

  //····················································································································

  override var prop : EBSelection<T> { get { return .single (mValue) } }

  var propval : T { get { return self.mValue } }

  override func setProp (_ value : T) { self.mValue = value }

  //····················································································································
 
  var validationFunction : (T, T) -> EBValidationResult <T> = defaultValidationFunction
  
  override func validateAndSetProp (_ candidateValue : T,
                                    windowForSheet inWindow:NSWindow?) -> Bool {
    var result = true
    let validationResult = validationFunction (propval, candidateValue)
    switch validationResult {
    case EBValidationResult.ok (let validatedValue) :
      setProp (validatedValue)
    case EBValidationResult.rejectWithBeep :
      result = false
      __NSBeep ()
    case EBValidationResult.rejectWithAlert (let informativeText) :
      result = false
      let alert = NSAlert ()
      alert.messageText = "The value " + String (describing: candidateValue) + " is invalid."
      alert.informativeText = informativeText
      alert.addButton (withTitle:"Ok")
      alert.addButton (withTitle:"Discard Change")
      if let window = inWindow {
        alert.beginSheetModal (
          for:window,
          completionHandler:{ (response : NSApplication.ModalResponse) in
            if response == NSApplication.ModalResponse.alertSecondButtonReturn { // Discard Change
              self.postEvent ()
            }
          }
        )
      }else{
        alert.runModal ()
      }
    }
    return result
  }

  //····················································································································

  func storeIn (dictionary:NSMutableDictionary, forKey inKey:String) {
    dictionary.setValue (mValue.convertToNSObject (), forKey:inKey)
  }

  //····················································································································

  func readFrom (dictionary: NSDictionary, forKey inKey:String) {
    let value : Any? = dictionary.object (forKey:inKey)
    if let unwValue : NSObject = value as? NSObject {
      setProp (T.convertFromNSObject (object:unwValue))
    }
  }

  //····················································································································
  //    SIGNATURE
  //····················································································································

  final private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK
  final private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol) {
    self.mSignatureObserver = observer
  }

  //····················································································································

  final private func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = propval.ebHashValue ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBTransientValueProperty <T>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBTransientValueProperty <T> : EBReadOnlyValueProperty <T> {
  private var mValueCache : EBSelection <T>? = nil
  var readModelFunction : Optional<() -> EBSelection <T> > = nil
  
  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  var mValueExplorer : NSTextField? {
    didSet {
      if let valueCache = self.mValueCache {
        self.mValueExplorer?.stringValue = "\(valueCache)"
      }else{
        self.mValueExplorer?.stringValue = "nil"
      }
    }
  }

  //····················································································································

  override var prop : EBSelection <T> {
    get {
      if self.mValueCache == nil {
        if let unwrappedComputeFunction = readModelFunction {
          self.mValueCache = unwrappedComputeFunction ()
        }
        if self.mValueCache == nil {
          self.mValueCache = .empty
        }
        self.mValueExplorer?.stringValue = "\(self.mValueCache!)"
      }
      return self.mValueCache!
    }
  }

  //····················································································································

  override func postEvent () {
    if self.mValueCache != nil {
      self.mValueCache = nil
      self.mValueExplorer?.stringValue = "nil"
      if logEvents () {
        appendMessageString ("Transient \(explorerIndexString (self.ebObjectIndex)) propagation\\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("Transient \(explorerIndexString (self.ebObjectIndex)) nil\\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol EBEnumProtocol {
  var rawValue : Int { get }
  static func buildfromRawValue (rawValue : Int) -> Self?
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol EnumPropertyProtocol : ValuePropertyProtocol, EBEnumProtocol {
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBAbstractEnumProperty : EBAbstractProperty {
  func rawValue () -> Int? { return nil } // Abstract method
  func setFrom (rawValue : Int) {}
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBReadOnlyEnumProperty <T>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBReadOnlyEnumProperty <T : EBEnumProtocol> : EBAbstractEnumProperty {

  var prop : EBSelection <T> { get { return .empty } } // Abstract method

  //····················································································································

  override func rawValue () -> Int? {
    switch self.prop {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v.rawValue
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBReadWriteEnumProperty <T> (abstract class)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBReadWriteEnumProperty <T : EBEnumProtocol> : EBReadOnlyEnumProperty <T> {

  func setProp (_ value : T) { } // Abstract method

  func validateAndSetProp (_ candidateValue : T, windowForSheet inWindow:NSWindow?) -> Bool {
    return false
  } // Abstract method

  override func setFrom (rawValue : Int) {
    if let v = T.buildfromRawValue (rawValue: rawValue) {
      self.setProp (v)
    }
  }

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBPropertyEnumProxy <T : ValuePropertyProtocol>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class EBPropertyEnumProxy <T : EnumPropertyProtocol> : EBReadWriteEnumProperty <T> {
  var readModelFunction : Optional < () -> EBSelection <T> > = nil
  var writeModelFunction : Optional < (T) -> Void > = nil
  var validateAndWriteModelFunction : Optional < (T, NSWindow?) -> Bool > = nil

  private var prop_cache : EBSelection <T>? = nil

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  var mValueExplorer : NSTextField? {
    didSet {
      updateValueExplorer (possibleValue:prop_cache)
    }
  }

  //····················································································································

  private func updateValueExplorer (possibleValue : EBSelection <T>?) {
    if let valueExplorer = self.mValueExplorer, let unwProp = possibleValue {
      switch unwProp {
      case .empty :
        valueExplorer.stringValue = "—"
      case .multiple :
        valueExplorer.stringValue = "—"
      case .single (let value) :
        valueExplorer.stringValue = "\(value)"
      }
    }else{
      self.mValueExplorer?.stringValue = "nil"
    }
  }

  //····················································································································

  override func postEvent () {
    if prop_cache != nil {
      prop_cache = nil
      if logEvents () {
        appendMessageString ("Proxy \(explorerIndexString (self.ebObjectIndex)) propagation\\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("Proxy \(explorerIndexString (self.ebObjectIndex)) nil\\n")
    }
  }

  //····················································································································

  override var prop : EBSelection <T> {
    get {
      if let unReadModelFunction = readModelFunction, prop_cache == nil {
        prop_cache = unReadModelFunction ()
        updateValueExplorer (possibleValue:prop_cache)
      }
      if prop_cache == nil {
        prop_cache = .empty
      }
      return prop_cache!
    }
  }

  //····················································································································

  override func setProp (_ value : T) {
    if let unWriteModelFunction = writeModelFunction {
      unWriteModelFunction (value)
    }
  }

  //····················································································································

  override func validateAndSetProp (_ candidateValue : T,
                                    windowForSheet inWindow:NSWindow?) -> Bool {
    var result = false
    if let unwValidateAndWriteModelFunction = validateAndWriteModelFunction {
      result = unwValidateAndWriteModelFunction (candidateValue, inWindow)
    }
    return result
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBStoredEnumProperty <T>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class EBStoredEnumProperty <T : EnumPropertyProtocol> : EBReadWriteEnumProperty <T> {
  weak var undoManager : UndoManager? // SOULD BE WEAK
  fileprivate var mPreferenceKey : String?
  var mSetterDelegate : ((_ inValue : T) -> Void)?

  //····················································································································

  var mValueExplorer : NSTextField? {
    didSet {
      self.mValueExplorer?.stringValue = "\(mValue)"
    }
  }

  //····················································································································

  init (_ inValue : T) {
    mValue = inValue
    mPreferenceKey = nil
    mSetterDelegate = nil
    super.init ()
  }

  //····················································································································

  init (_ inValue : T, prefKey inPreferenceKey : String) {
    mValue = inValue
    mPreferenceKey = inPreferenceKey
    mSetterDelegate = nil
    super.init ()
  //--- Read from preferences
    let value : Any? = UserDefaults.standard.object (forKey: inPreferenceKey)
    if let unwValue : NSObject = value as? NSObject {
      setProp (T.convertFromNSObject (object:unwValue))
    }
  }

 //····················································································································

  init (_ inValue : T, setterDelegate inSetterDelegate : @escaping (_ inValue : T) -> Void) {
    mValue = inValue
    mPreferenceKey = nil
    mSetterDelegate = inSetterDelegate
    super.init ()
  }

  //····················································································································

  private var mValue : T {
    didSet {
      if self.mValue != oldValue {
        self.mSetterDelegate? (self.mValue)
        if let prefKey = self.mPreferenceKey {
          UserDefaults.standard.set (mValue.convertToNSObject (), forKey:prefKey)
        }
        self.mValueExplorer?.stringValue = "\(mValue)"
        self.undoManager?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object: oldValue.convertToNSObject ())
        if logEvents () {
          appendMessageString ("Property \(explorerIndexString (self.ebObjectIndex)) did change value to \(mValue)\\n")
        }
        postEvent ()
        clearSignatureCache ()
      }
    }
  }

  //····················································································································

  @objc func performUndo (_ oldValue : NSNumber) {
    self.mValue = T.convertFromNSObject (object:oldValue)
  }

  //····················································································································

  override var prop : EBSelection<T> { get { return .single (mValue) } }

  var propval : T { get { return self.mValue } }

  override func setProp (_ value : T) { self.mValue = value }

  //····················································································································

  var validationFunction : (T, T) -> EBValidationResult <T> = defaultValidationFunction

  override func validateAndSetProp (_ candidateValue : T,
                                    windowForSheet inWindow:NSWindow?) -> Bool {
    var result = true
    let validationResult = validationFunction (propval, candidateValue)
    switch validationResult {
    case EBValidationResult.ok (let validatedValue) :
      setProp (validatedValue)
    case EBValidationResult.rejectWithBeep :
      result = false
      __NSBeep ()
    case EBValidationResult.rejectWithAlert (let informativeText) :
      result = false
      let alert = NSAlert ()
      alert.messageText = "The value " + String (describing: candidateValue) + " is invalid."
      alert.informativeText = informativeText
      alert.addButton (withTitle:"Ok")
      alert.addButton (withTitle:"Discard Change")
      if let window = inWindow {
        alert.beginSheetModal (
          for:window,
          completionHandler:{ (response : NSApplication.ModalResponse) in
            if response == NSApplication.ModalResponse.alertSecondButtonReturn { // Discard Change
              self.postEvent ()
            }
          }
        )
      }else{
        alert.runModal ()
      }
    }
    return result
  }

  //····················································································································

  func storeIn (dictionary:NSMutableDictionary, forKey inKey:String) {
    dictionary.setValue (mValue.convertToNSObject (), forKey:inKey)
  }

  //····················································································································

  func readFrom (dictionary: NSDictionary, forKey inKey:String) {
    let value : Any? = dictionary.object (forKey:inKey)
    if let unwValue : NSObject = value as? NSObject {
      setProp (T.convertFromNSObject (object:unwValue))
    }
  }

  //····················································································································
  //    SIGNATURE
  //····················································································································

  final private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK
  final private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol) {
    self.mSignatureObserver = observer
  }

  //····················································································································

  final private func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = propval.ebHashValue ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBTransientEnumProperty <T>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBTransientEnumProperty <T : EBEnumProtocol> : EBReadOnlyEnumProperty <T> {
  private var mValueCache : EBSelection <T>? = nil
  var readModelFunction : Optional<() -> EBSelection <T> > = nil

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  var mValueExplorer : NSTextField? {
    didSet {
      if let valueCache = self.mValueCache {
        self.mValueExplorer?.stringValue = "\(valueCache)"
      }else{
        self.mValueExplorer?.stringValue = "nil"
      }
    }
  }

  //····················································································································

  override var prop : EBSelection <T> {
    get {
      if self.mValueCache == nil {
        if let unwrappedComputeFunction = readModelFunction {
          self.mValueCache = unwrappedComputeFunction ()
        }
        if self.mValueCache == nil {
          self.mValueCache = .empty
        }
        self.mValueExplorer?.stringValue = "\(self.mValueCache!)"
      }
      return self.mValueCache!
    }
  }

  //····················································································································

  override func postEvent () {
    if self.mValueCache != nil {
      self.mValueCache = nil
      self.mValueExplorer?.stringValue = "nil"
      if logEvents () {
        appendMessageString ("Transient \(explorerIndexString (self.ebObjectIndex)) propagation\\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("Transient \(explorerIndexString (self.ebObjectIndex)) nil\\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBReadOnlyEnumController <T>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBReadOnlyEnumController <T : EBEnumProtocol> : EBSimpleController {

  //····················································································································

  init (model : EBReadOnlyEnumProperty <T>, callBack: @escaping () -> Void) {
    super.init (observedObjects:[model])
    self.eventCallBack = callBack
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    extension String : ValuePropertyProtocol
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extension String : ValuePropertyProtocol {

  //····················································································································

  func ebHashValue () -> UInt32 {
    let possibleData = self.data (using: String.Encoding.utf8)
    if let data = possibleData {
      return data.ebHashValue ()
    }else{
      return 0
    }
  }
  
  //····················································································································

  func convertToNSObject () -> NSObject {
    return self as NSObject
  }

  //····················································································································

  static func convertFromNSObject (object : NSObject) -> String {
    return object as! String
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    extension Int : ValuePropertyProtocol
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extension Int : ValuePropertyProtocol {

  //····················································································································

  func ebHashValue () -> UInt32 {
    var crc : UInt32 = 0
    var v = UInt (bitPattern:self) // So that negative value is handled
    for _ in 0 ..< MemoryLayout<Int>.size {
      let byte = UInt8 (v & 255)
      crc.accumulateByte (byte)
      v >>= 8
    }
    return crc
  }
  
  //····················································································································

  func convertToNSObject () -> NSObject {
    return NSNumber (value: self)
  }

  //····················································································································

  static func convertFromNSObject (object : NSObject) -> Int {
    let number = object as! NSNumber
    return number.intValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    extension Double : ValuePropertyProtocol
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extension Double : ValuePropertyProtocol {

  //····················································································································

  func ebHashValue () -> UInt32 {
    let nsValue = NSNumber (value:self)
    let data = NSArchiver.archivedData (withRootObject:nsValue)
    return data.ebHashValue ()
  }

  //····················································································································

  func convertToNSObject () -> NSObject {
    return NSNumber (value: self)
  }

  //····················································································································

  static func convertFromNSObject (object : NSObject) -> Double {
    let number = object as! NSNumber
    return number.doubleValue
  }

  //····················································································································
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    extension Bool : ValuePropertyProtocol
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extension Bool : ValuePropertyProtocol {

  //····················································································································

  func ebHashValue () -> UInt32 {
    var crc : UInt32 = 0
    crc.accumulateByte (self ? 1 : 0)
    return crc
  }

  //····················································································································

  func convertToNSObject () -> NSObject {
    return NSNumber (value: self)
  }

  //····················································································································

  static func convertFromNSObject (object : NSObject) -> Bool {
    let number = object as! NSNumber
    return number.boolValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

public func < (left:Bool, right:Bool) -> Bool {
  return !left && right
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

public func > (left:Bool, right:Bool) -> Bool {
  return left && !right
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    extension NSColor : ClassPropertyProtocol
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extension NSColor : ClassPropertyProtocol {

  //····················································································································

  final func ebHashValue () -> UInt32 {
    let data = NSArchiver.archivedData (withRootObject: self)
    return data.ebHashValue ()
  }

  //····················································································································

  func archiveToNSData () -> Data {
    return NSArchiver.archivedData (withRootObject: self)
  }
  
  //····················································································································

  static func unarchiveFromNSData (data : Data) -> NSObject {
    return NSUnarchiver.unarchiveObject (with: data as Data) as! NSObject
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    extension Date : ValuePropertyProtocol
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extension Date : ValuePropertyProtocol {

  //····················································································································

  func ebHashValue () -> UInt32 {
    let data = NSArchiver.archivedData (withRootObject: self)
    return data.ebHashValue ()
  }

  //····················································································································

  func convertToNSObject () -> NSObject {
    return NSArchiver.archivedData (withRootObject: self) as NSObject
  }
  
  //····················································································································

  static func convertFromNSObject (object : NSObject) -> Date {
    return NSUnarchiver.unarchiveObject (with: object as! Data) as! Date
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    extension NSFont : ClassPropertyProtocol
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extension NSFont : ClassPropertyProtocol {

  //····················································································································

  final func ebHashValue () -> UInt32 {
    let data = NSArchiver.archivedData (withRootObject: self)
    return data.ebHashValue ()
  }

  //····················································································································

  func archiveToNSData () -> Data {
    return NSArchiver.archivedData (withRootObject: self)
  }
  
  //····················································································································

  static func unarchiveFromNSData (data : Data) -> NSObject {
    return NSUnarchiver.unarchiveObject (with: data as Data) as! NSObject
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    extension Data : ValuePropertyProtocol
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extension Data : ValuePropertyProtocol {

  //····················································································································

  func ebHashValue () -> UInt32 {
    var crc : UInt32 = 0
    for i in 0 ..< self.count {
      crc.accumulateByte (self [i])
    }
    return crc
  }

  //····················································································································

  func convertToNSObject () -> NSObject {
    return self as NSObject
  }
  
  //····················································································································

  static func convertFromNSObject (object : NSObject) -> Data {
    return object as! Data
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Protocol ClassPropertyProtocol
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ClassPropertyProtocol : class, Equatable {
  func ebHashValue () -> UInt32
  func archiveToNSData () -> Data
  static func unarchiveFromNSData (data : Data) -> NSObject
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBReadOnlyClassProperty <T>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBReadOnlyClassProperty <T> : EBAbstractProperty {

  var prop : EBSelection <T> { get { return .empty } } // Abstract method

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBReadWriteClassProperty <T> (abstract class)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBReadWriteClassProperty <T> : EBReadOnlyClassProperty <T> {
  func setProp (_ value : T) { } // Abstract method
  func validateAndSetProp (_ candidateValue : T, windowForSheet inWindow:NSWindow?) -> Bool {
    return false
  } // Abstract method
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBPropertyClassProxy <T : ClassPropertyProtocol>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class EBPropertyClassProxy <T : ClassPropertyProtocol> : EBReadWriteClassProperty <T> {
  var readModelFunction : Optional < () -> EBSelection <T> > = nil
  var writeModelFunction : Optional < (T) -> Void > = nil
  var validateAndWriteModelFunction : Optional < (T, NSWindow?) -> Bool > = nil
  
  private var prop_cache : EBSelection <T>? = nil
  
  //····················································································································

  override init () {
    super.init ()
  }
  
  //····················································································································

  var mValueExplorer : NSTextField? {
    didSet {
      updateValueExplorer (possibleValue: prop_cache)
    }
  }

  //····················································································································

  private func updateValueExplorer (possibleValue : EBSelection <T>?) {
    if let valueExplorer = self.mValueExplorer, let unwProp = possibleValue {
      switch unwProp {
      case .empty :
        valueExplorer.stringValue = "—"
      case .multiple :
        valueExplorer.stringValue = "—"
      case .single (let value) :
        valueExplorer.stringValue = "\(value)"
      }
    }else{
      self.mValueExplorer?.stringValue = "nil"
    }
  }

  //····················································································································

  override func postEvent () {
    if prop_cache != nil {
      prop_cache = nil
      if logEvents () {
        appendMessageString ("Proxy \(explorerIndexString (self.ebObjectIndex)) propagation\\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("Proxy \(explorerIndexString (self.ebObjectIndex)) nil\\n")
    }
  }

  //····················································································································

  override var prop : EBSelection <T> {
    get {
      if let unReadModelFunction = readModelFunction, prop_cache == nil {
        prop_cache = unReadModelFunction ()
        updateValueExplorer (possibleValue:prop_cache)
      }
      if prop_cache == nil {
        prop_cache = .empty
      }
      return prop_cache!
    }
  }

  //····················································································································
  
  override func setProp (_ value : T) {
    if let unWriteModelFunction = writeModelFunction {
      unWriteModelFunction (value)
    }
  }

  //····················································································································

  override func validateAndSetProp (_ candidateValue : T,
                                    windowForSheet inWindow:NSWindow?) -> Bool {
    var result = false
    if let unwValidateAndWriteModelFunction = validateAndWriteModelFunction {
      result = unwValidateAndWriteModelFunction (candidateValue, inWindow)
    }
    return result
  }
  
  //····················································································································
  
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBStoredClassProperty <T>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class EBStoredClassProperty <T : ClassPropertyProtocol> : EBReadWriteClassProperty <T> {
  weak var undoManager : UndoManager? // SOULD BE WEAK
  fileprivate var mPreferenceKey : String?
  var mSetterDelegate : ((_ inValue : T) -> Void)?

  //····················································································································

  var mValueExplorer : NSTextField? {
    didSet {
      mValueExplorer?.stringValue = "\(mValue)"
    }
  }

  //····················································································································

  init (_ inValue : T) {
    mValue = inValue
    mPreferenceKey = nil
    mSetterDelegate = nil
    super.init ()
  }

  //····················································································································

  init (_ inValue : T, prefKey inPreferenceKey : String) {
    mValue = inValue
    mPreferenceKey = inPreferenceKey
    mSetterDelegate = nil
    super.init ()
  //--- Read value from preferences
    let value : Any? = UserDefaults.standard.object (forKey:inPreferenceKey)
    if let unwValue : Data = value as? Data {
      setProp (T.unarchiveFromNSData (data:unwValue) as! T)
    }
  }

  //····················································································································

  init (_ inValue : T, setterDelegate inSetterDelegate : @escaping (_ inValue : T) -> Void) {
    mValue = inValue
    mPreferenceKey = nil
    mSetterDelegate = inSetterDelegate
    super.init ()
  }

  //····················································································································

  private var mValue : T {
    didSet {
      if self.mValue != oldValue {
        self.mSetterDelegate? (self.mValue)
        if let prefKey = self.mPreferenceKey {
          UserDefaults.standard.set (self.mValue.archiveToNSData (), forKey:prefKey)
        }
        self.mValueExplorer?.stringValue = "\(mValue)"
        self.undoManager?.registerUndo (withTarget: self, selector: #selector(performUndo(_:)), object: oldValue)
        if logEvents () {
          appendMessageString ("Property \(explorerIndexString (self.ebObjectIndex)) did change value to \(mValue)\\n")
        }
        self.postEvent ()
        self.clearSignatureCache ()
      }
    }
  }

  //····················································································································

  @objc func performUndo (_ oldValue : NSObject) {
    self.mValue = oldValue as! T
  }

  //····················································································································

  override var prop : EBSelection<T> { get { return .single (mValue) } }

  var propval : T { get { return self.mValue } }

  override func setProp (_ value : T) { self.mValue = value }

  //····················································································································
 
  var validationFunction : (T, T) -> EBValidationResult <T> = defaultValidationFunction
  
  override func validateAndSetProp (_ candidateValue : T,
                                    windowForSheet inWindow:NSWindow?) -> Bool {
    var result = true
    let validationResult = validationFunction (propval, candidateValue)
    switch validationResult {
    case EBValidationResult.ok (let validatedValue) :
      setProp (validatedValue)
    case EBValidationResult.rejectWithBeep :
      result = false
      __NSBeep ()
    case EBValidationResult.rejectWithAlert (let informativeText) :
      result = false
      let alert = NSAlert ()
      alert.messageText = "The value " + String (describing: candidateValue) + " is invalid."
      alert.informativeText = informativeText
      alert.addButton (withTitle:"Ok")
      alert.addButton (withTitle:"Discard Change")
      if let window = inWindow {
        alert.beginSheetModal (
          for:window,
          completionHandler:{ (response : NSApplication.ModalResponse) in
            if response == NSApplication.ModalResponse.alertSecondButtonReturn { // Discard Change
              self.postEvent ()
            }
          }
        )
      }else{
        alert.runModal ()
      }
    }
    return result
  }

  //····················································································································

  func storeIn (dictionary:NSMutableDictionary, forKey inKey:String) {
    dictionary.setValue (mValue.archiveToNSData (), forKey:inKey)
  }

  //····················································································································

  func readFrom (dictionary:NSDictionary, forKey inKey:String) {
    let value : Any? = dictionary.object (forKey:inKey)
    if let unwValue : Data = value as? Data {
      setProp (T.unarchiveFromNSData (data:unwValue) as! T)
    }
  }

  //····················································································································
  //    SIGNATURE
  //····················································································································

  final private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK
  final private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol) {
    self.mSignatureObserver = observer
  }

  //····················································································································

  final private func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = propval.ebHashValue ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBTransientClassProperty <T>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBTransientClassProperty <T> : EBReadOnlyClassProperty <T> {
  private var mValueCache : EBSelection <T>? = nil
  var readModelFunction : Optional<() -> EBSelection <T> > = nil
  
  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  var mValueExplorer : NSTextField? {
    didSet {
      if let valueCache = self.mValueCache {
        self.mValueExplorer?.stringValue = "\(valueCache)"
      }else{
        self.mValueExplorer?.stringValue = "nil"
      }
    }
  }

  //····················································································································

  override var prop : EBSelection <T> {
    get {
      if self.mValueCache == nil {
        if let unwrappedComputeFunction = readModelFunction {
          self.mValueCache = unwrappedComputeFunction ()
        }
        if self.mValueCache == nil {
          self.mValueCache = .empty
        }
        self.mValueExplorer?.stringValue = "\(mValueCache!)"
      }
      return self.mValueCache!
    }
  }

  //····················································································································

  override func postEvent () {
    if self.mValueCache != nil {
      self.mValueCache = nil
      self.mValueExplorer?.stringValue = "nil"
      if logEvents () {
        let className = String (describing:type(of: self))
        appendMessageString ("Transient \(className) \(explorerIndexString (self.ebObjectIndex)) propagation\\n")
      }
      super.postEvent ()
    }else if logEvents () {
      let className = String (describing:type(of: self))
      appendMessageString ("Transient \(className) \(explorerIndexString (self.ebObjectIndex)) nil\\n")
    }
  }

  //····················································································································

}

