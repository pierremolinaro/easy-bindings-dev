import Cocoa

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
//   EBProperty                                                                                                        *
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

enum EBProperty<T> {
  case noSelection
  case singleSelection (T)
  case multipleSelection
}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

private func compareIntProperties (left:EBProperty<Int>,
                                   right:EBProperty<Int>,
                                   function : (Int, Int) -> Bool) -> EBProperty<Bool> {
  switch left {
  case .noSelection :
    return .noSelection
  case .multipleSelection :
    switch right {
    case .noSelection :
      return .noSelection
    case .multipleSelection, .singleSelection :
      return .multipleSelection
    }
  case .singleSelection (let vg) :
    switch right {
    case .noSelection :
      return .noSelection
    case .multipleSelection :
      return .multipleSelection
    case .singleSelection (let vd) :
      return .singleSelection (function (vg, vd))
    }
  }
}

//•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

func > (left:EBProperty<Int>, right:EBProperty<Int>) -> EBProperty<Bool> {
  return compareIntProperties (left, right: right, function: {$0 > $1})
}

//•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

func >= (left:EBProperty<Int>, right:EBProperty<Int>) -> EBProperty<Bool> {
  return compareIntProperties (left, right: right, function: {$0 >= $1})
}

//•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

func < (left:EBProperty<Int>, right:EBProperty<Int>) -> EBProperty<Bool> {
  return compareIntProperties (left, right: right, function: {$0 < $1})
}

//•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

func <= (left:EBProperty<Int>, right:EBProperty<Int>) -> EBProperty<Bool> {
  return compareIntProperties (left, right: right, function: {$0 <= $1})
}

//•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

func == (left:EBProperty<Int>, right:EBProperty<Int>) -> EBProperty<Bool> {
  return compareIntProperties (left, right: right, function: {$0 == $1})
}

//•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

func != (left:EBProperty<Int>, right:EBProperty<Int>) -> EBProperty<Bool> {
  return compareIntProperties (left, right: right, function: {$0 != $1})
}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

private func combineBoolProperties (left:EBProperty<Bool>,
                                     right:EBProperty<Bool>,
                                     function : (Bool, Bool) -> Bool) -> EBProperty<Bool> {
  switch left {
  case .noSelection :
    return .noSelection
  case .multipleSelection :
    switch right {
    case .noSelection :
      return .noSelection
    case .multipleSelection, .singleSelection :
      return .multipleSelection
    }
  case .singleSelection (let vg) :
    switch right {
    case .noSelection :
      return .noSelection
    case .multipleSelection :
      return .multipleSelection
    case .singleSelection (let vd) :
      return .singleSelection (function (vg, vd))
    }
  }
}

//•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

func && (left:EBProperty<Bool>, right:EBProperty<Bool>) -> EBProperty<Bool> {
  return combineBoolProperties (left, right: right, function: {$0 && $1})
}

//•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

func || (left:EBProperty<Bool>, right:EBProperty<Bool>) -> EBProperty<Bool> {
  return combineBoolProperties (left, right: right, function: {$0 || $1})
}

//•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

func ^ (left:EBProperty<Bool>, right:EBProperty<Bool>) -> EBProperty<Bool> {
  return combineBoolProperties (left, right: right, function: {$0 != $1})
}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

prefix func ! (operand:EBProperty<Bool>) -> EBProperty<Bool> {
  switch operand {
  case .noSelection :
    return .noSelection
  case .multipleSelection :
    return .multipleSelection
  case .singleSelection (let v) :
    return .singleSelection (!v)
  }
}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
//   EBReadOnlyEnumPropertyProtocol                                                                                    *
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

@objc(EBReadOnlyEnumPropertyProtocol) protocol EBReadOnlyEnumPropertyProtocol {

  func addObserver (inObserver : EBEvent, postEvent inTrigger:Bool)

  func removeObserver (inObserver : EBEvent, postEvent inTrigger:Bool)

  func count () -> Int

  func rawValue () -> Int
}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
//   EBEnumPropertyProtocol                                                                                            *
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

@objc(EBEnumPropertyProtocol) protocol EBEnumPropertyProtocol : EBReadOnlyEnumPropertyProtocol {
  func setFromRawValue (rawValue : Int)
}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
//   EBAbstractProperty                                                                                                *
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

@objc(EBAbstractProperty) class EBAbstractProperty : EBEvent {

  private var mObservers = Set <EBEvent> ()
  
  func addObserver (inObserver : EBEvent, postEvent inTrigger:Bool) {
    mObservers.insert (inObserver)
    if inTrigger {
      inObserver.postEvent ()
    }
  }
 
  func removeObserver (inObserver : EBEvent, postEvent inTrigger:Bool) {
    mObservers.remove (inObserver)
    if inTrigger {
      inObserver.postEvent ()
    }
  }

  override func postEvent () {
    for object in mObservers {
      object.postEvent ()
    }
  }
}

