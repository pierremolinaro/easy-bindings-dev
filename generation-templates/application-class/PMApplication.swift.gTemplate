//---------------------------------------------------------------------------------------------------------------------*

import Cocoa

//---------------------------------------------------------------------------------------------------------------------*

let TRACE_TRANSIENT_TRIGGER = false

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//    T O P O L O G I C A L    S O R T    O F    P R O P E R T I E S                                                   *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

%!TRANSIENT_LIST_STRING%

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//    T R A N S I E N T    I N D E X E S                                                                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

%
foreach TRANSIENT_LIST
do index idx
%let k_%![mValue identifierRepresentation]% = %![idx string]%\n%
end
%
//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//    T R A N S I E N T    T R I G G E R    C L A S S E S                                                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

@objc(PMTriggerProtocol)
protocol PMTriggerProtocol : NSObjectProtocol {
  var mTransientIndex : Int { get } // Note: we cannot use an enumeration here
  func noteTransientChanged ()
  func trigger ()
}

%
foreach TRANSIENT_LIST
do index idx
%
//---------------------------------------------------------------------------------------------------------------------*

@objc(PMTrigger_%![mValue identifierRepresentation]%)
class PMTrigger_%![mValue identifierRepresentation]% : NSObject, PMTriggerProtocol {
  weak var mTriggerObject : %![[mValue stringByDeletingPathExtension] pathExtension]%? = nil
  
  var mTransientIndex : Int {
    get {
      return k_%![mValue identifierRepresentation]%
    }
  }
  
  init (object : %![[mValue stringByDeletingPathExtension] pathExtension]%) {
    mTriggerObject = object
    super.init ()
    noteObjectAllocation (self) ;
  }
  
  deinit {
    noteObjectDeallocation (self) ;
  }

  func noteTransientChanged () {
    if mTriggerObject {
      mTriggerObject!.%![mValue pathExtension]%__cache = nil
    }
  }
  
  func trigger () {
    mTriggerObject?.%![mValue identifierRepresentation]%_didChange ()
  }
}
%end%

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//    T R A N S I E N T    T R I G G E R    F U N C T I O N                                                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

func enterTriggerWithObject (inObject : PMTriggerProtocol) {
  var theApp = NSApp as PMApplication
  theApp.enterTriggerWithObject (inObject) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//    A P P L I C A T I O N    C L A S S                                                                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

@objc(PMApplication) class PMApplication : NSApplication {
  var mLevel = 0

  //-------------------------------------------------------------------------------------------------------------------*

%
  foreach TRANSIENT_LIST do index idx
%  var mTriggerSet_%![mValue identifierRepresentation]% = NSMutableSet () // %![idx string]%\n%
  end  
%  //-------------------------------------------------------------------------------------------------------------------*

  func enterTriggerWithObject (inObject : PMTriggerProtocol) {
%if [TRANSIENT_LIST length] > 0 then
%    inObject.noteTransientChanged ()
    let transientIndex = inObject.mTransientIndex
    switch transientIndex {
%foreach TRANSIENT_LIST do index idx
%    case k_%![mValue identifierRepresentation]% :
      mTriggerSet_%![mValue identifierRepresentation]%.addObject (inObject)
      if TRACE_TRANSIENT_TRIGGER {
        NSLog ("Trigger %!mValue%, \%d objects", mTriggerSet_%![mValue identifierRepresentation]%.count)
      }\n%
end%    default: break
    }
%else
%  // No transient\n%
end
%  }

  //-------------------------------------------------------------------------------------------------------------------*
 
  override func sendEvent (inEvent : NSEvent!) {
    mLevel += 1
    // NSLog ("send event \%d", mLevel)
    super.sendEvent (inEvent)
    mLevel -= 1
    // NSLog ("send event done \%d", mLevel)
    if 0 == mLevel {
      triggerChange ()
      displayAllocation ()
    }
  }
  
  //-------------------------------------------------------------------------------------------------------------------*

  override func sendAction (theAction: Selector, to theTarget: AnyObject!, from sender: AnyObject!) -> Bool {
    mLevel += 1
    // NSLog ("send action \%d", mLevel)
    let result = super.sendAction (theAction, to:theTarget, from:sender)
    mLevel -= 1
    // NSLog ("send action done \%d", mLevel)
    if 0 == mLevel {
      triggerChange ()
      displayAllocation ()
    }
    return result
  }

  //-------------------------------------------------------------------------------------------------------------------*
  
  func triggerChange () {
%
  foreach TRANSIENT_LIST do index idx
%    if mTriggerSet_%![mValue identifierRepresentation]%.count > 0 { // %![idx string]%
      let s = mTriggerSet_%![mValue identifierRepresentation]%
      mTriggerSet_%![mValue identifierRepresentation]% = NSMutableSet ()
      for anyObject in s {
        let object = anyObject as PMTriggerProtocol
        object.trigger ()
      }
    }    
%  end  
%  }

  //-------------------------------------------------------------------------------------------------------------------*

}

