
#import "PMApplication.h"
#import "easy-bindings-utilities.h"

//-----------------------------------------------------------------------------*

@implementation PMApplication

//-----------------------------------------------------------------------------*

+ (void) enterTriggerForObject: (NSObject *) inObject
         transientIndex: (const NSUInteger) inIndex {
  [(PMApplication *) NSApp
    enterTriggerForObject:inObject
    transientIndex:inIndex
  ] ;
}

//-----------------------------------------------------------------------------*

- (instancetype) init {
  self = [super init] ;
  if (self) {
    for (NSUInteger i=0 ; i<TRANSIENT_COUNT ; i++) {
      mObserverObjectArray [i] = [NSMutableSet new] ;
    }
    mTriggeredPropertyArray = [NSArray arrayWithObjects:
%!TRANSIENT_LIST
%      nil
    ] ;
    macroRetain (mTriggeredPropertyArray) ;
  }
  return self ;
}

//-----------------------------------------------------------------------------*

- (void) enterTriggerForObject: (NSObject *) inObject
         transientIndex: (const NSUInteger) inIndex {
  [mObserverObjectArray [inIndex] addObject:inObject] ;
  if (! mDeferredMessageSent) {
    mDeferredMessageSent = YES ;
    NSEvent * event = [NSEvent
      otherEventWithType:NSApplicationDefined
      location:NSMakePoint (0, 0)
      modifierFlags:0
      timestamp:0.0
      windowNumber:0
      context:nil
      subtype:0
      data1:0
      data2:0
    ] ;
    [self postEvent:event atStart:false] ;
 /*   [[NSRunLoop mainRunLoop]
      performSelector:@selector (triggerChange)
      target:self
      argument:nil
      order:NSUIntegerMax
      modes:[NSArray arrayWithObject:NSDefaultRunLoopMode]
    ] ; */
  }
}

//-----------------------------------------------------------------------------*

- (void) sendEvent:(NSEvent *) inEvent {
  if (inEvent.type == NSApplicationDefined) {
    // NSLog (@"triggerChange") ;
    [self triggerChange] ;
  }else{
    [super sendEvent:inEvent] ;
  }
}

//-----------------------------------------------------------------------------*

- (void) triggerChange {
  for (NSUInteger i=0 ; i<TRANSIENT_COUNT ; i++) {
    NSMutableSet * s = mObserverObjectArray [i] ;
    macroRetain (s) ;
    mObserverObjectArray [i] = [NSMutableSet new] ;
    for (NSObject * object in s) {
      [object willChangeValueForKey:[mTriggeredPropertyArray objectAtIndex:i]] ;
      [object  didChangeValueForKey:[mTriggeredPropertyArray objectAtIndex:i]] ;
    }
    macroReleaseSetToNil (s) ;
  }
  mDeferredMessageSent = NO ;
}

//-----------------------------------------------------------------------------*

@end
