//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"Object Controller " + OWNER_NAME + " " + ARRAY_CONTROLLER_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class Controller_%!OWNER_NAME%_%!ARRAY_CONTROLLER_NAME% : EBObject {
 
  //····················································································································
  //    Init
  //····················································································································

  override init () {
    super.init ()
%for () in SELECTION_OBSERVABLE_PROPERTY_MAP do
  if [mKind isToMany] then
  elsif [mKind isProperty] then
    %    self.%!lkey.string%_property.mReadModelFunction = { [weak self] in\n%
    %      return self?.mModel?.%!lkey.string%_property_selection ?? .empty\n%
    %    }\n%
    %    self.%!lkey.string%_property.mWriteModelFunction = { [weak self] (inValue : %![mKind swiftTypeName]%) in\n%
    %      self?.mModel?.%!lkey.string% = inValue\n%
    %    }\n%
    %    self.%!lkey.string%_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : %![mKind swiftTypeName]%, windowForSheet : NSWindow?) in\n%
    %      if let property = self?.mModel?.%!lkey.string%_property {\n%
    %        return property.validateAndSetProp (candidateValue, windowForSheet: windowForSheet)\n%
    %      }else{\n%
    %        return false\n%
    %      }\n%
    %    }\n%
  end
end
%  }

%for () in SELECTION_OBSERVABLE_PROPERTY_MAP do
  if [mKind isToMany] then
    %  //····················································································································\n%
    %  //   ToMany relationship: %!lkey.string%\n%
    %  //····················································································································\n\n%
    %  let %!lkey.string%_property = StoredArrayOf_%![mKind swiftTypeName]% ()\n\n%
  elsif [mKind isProperty] then
    %  //····················································································································\n%
    %  //   Observable atomic property: %!lkey.string%\n%
    %  //····················································································································\n\n%
    if [mKind isTransient] then
      %  let %!lkey.string%_property = EBTransientProperty_%![mKind swiftTypeName]% ()\n\n%
    else
      %  let %!lkey.string%_property = EBPropertyProxy_%![mKind swiftTypeName]% ()\n\n%
    end
    %  var %!lkey.string%_property_selection : EBSelection <%![mKind swiftTypeName]%> {\n%
    %    return self.%!lkey.string%_property.prop\n%
    %  }\n\n%
  end
end
%  //····················································································································
  //    Controller
  //····················································································································

  private var mController : EBSimpleController? = nil

  //····················································································································

  func bind_model (_ inToOneRelationship : %!MODEL_TYPE_NAME%) {
    self.mController = EBSimpleController (
      observedObjects: [inToOneRelationship],
      callBack: { [weak self] in self?.modelDidChange (inToOneRelationship) }
    )
  }

  //····················································································································

  private func modelDidChange (_ inToOneRelationship : %!MODEL_TYPE_NAME%) {
    self.mModel = inToOneRelationship.propval
    let objects = self.mModel?.mObjects_property.propval ?? []
    self.mObjects_property.setProp (objects)
    // NSLog ("objects \(objects.count)")
  }

  //····················································································································

  func unbind_model () {
    self.mController?.unregister ()
    self.mController = nil
    self.mModel = nil
 }

  //····················································································································
  //    Model
  //····················································································································

  private var mModel : %!ELEMENT_TYPE_NAME%? = nil {
    didSet {
      if self.mModel !== oldValue {
%for () in SELECTION_OBSERVABLE_PROPERTY_MAP do
  if [mKind isToMany] then
    %      //--- ToMany relationship%!lkey.string%\n%
    %        // oldValue?.%!lkey.string%_property.removeEBObserver (self.%!lkey.string%_property)\n%
    %        // self.mModel?.%!lkey.string%_property.addEBObserver (self.%!lkey.string%_property)\n%
    %        if let controller = self.mController {\n%
    %          oldValue?.%!lkey.string%_property.removeEBObserver (controller)\n%
    %          self.mModel?.%!lkey.string%_property.addEBObserver (controller)\n%
    %        }\n%
  elsif [mKind isProperty] then
    %      //--- Atomic property%!lkey.string%\n%
    %        oldValue?.%!lkey.string%_property.removeEBObserver (self.%!lkey.string%_property)\n%
    %        self.mModel?.%!lkey.string%_property.addEBObserver (self.%!lkey.string%_property)\n%
  end
end
%      }
    }
  }

  //····················································································································
  //    Explorer
  //····················································································································

  final func addExplorer (name : String, y : inout CGFloat, view : NSView) {
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

