//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"Object Controller " + OWNER_NAME + " " + ARRAY_CONTROLLER_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class Controller_%!OWNER_NAME%_%!ARRAY_CONTROLLER_NAME% : EBObject {
 
  //····················································································································
  //    Init
  //····················································································································

  override init () {
    super.init ()
%for () in SELECTION_OBSERVABLE_PROPERTY_MAP do
  if [mKind isToMany] then
  elsif [mKind isProperty] then
    %    self.%!lkey.string%_property.mReadModelFunction = { [weak self] in\n%
    %      return self?.mModel?.%!lkey.string%_property_selection ?? .empty\n%
    %    }\n%
    if not [mKind isTransient] then
      %    self.%!lkey.string%_property.mWriteModelFunction = { [weak self] (inValue : %![mKind swiftTypeName]%) in\n%
      %      self?.mModel?.%!lkey.string% = inValue\n%
      %    }\n%
      %    self.%!lkey.string%_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : %![mKind swiftTypeName]%, windowForSheet : NSWindow?) in\n%
      %      if let property = self?.mModel?.%!lkey.string%_property {\n%
      %        return property.validateAndSetProp (candidateValue, windowForSheet: windowForSheet)\n%
      %      }else{\n%
      %        return false\n%
      %      }\n%
      %    }\n%
  end
  end
end
%  }

%for () in SELECTION_OBSERVABLE_PROPERTY_MAP do
  if [mKind isToMany] then
    %  //····················································································································\n%
    %  //   ToMany relationship: %!lkey.string%\n%
    %  //····················································································································\n\n%
    %  let %!lkey.string%_property = StoredArrayOf_%![mKind swiftTypeName]% ()\n\n%
  elsif [mKind isProperty] then
    %  //····················································································································\n%
    %  //   Observable atomic property: %!lkey.string%\n%
    %  //····················································································································\n\n%
    if [mKind isTransient] then
      %  let %!lkey.string%_property = EBTransientProperty_%![mKind swiftTypeName]% ()\n\n%
    else
      %  let %!lkey.string%_property = EBPropertyProxy_%![mKind swiftTypeName]% ()\n\n%
    end
    %  var %!lkey.string%_property_selection : EBSelection <%![mKind swiftTypeName]%> {\n%
    %    return self.%!lkey.string%_property.prop\n%
    %  }\n\n%
  end
end
%  //····················································································································
  //    Controller
  //····················································································································

  private var mModelController : EBSimpleController? = nil
%for () in SELECTION_OBSERVABLE_PROPERTY_MAP do
  if [mKind isToMany] then
    %  private var mBoundObjectController_%!lkey.string% : EBSimpleController? = nil\n%
  end
end
%
  //····················································································································

  func bind_model (_ inToOneRelationship : %!MODEL_TYPE_NAME%) {
    self.mModelController = EBSimpleController (
      observedObjects: [inToOneRelationship],
      callBack: { [weak self] in self?.modelDidChange (inToOneRelationship) }
    )
%for () in SELECTION_OBSERVABLE_PROPERTY_MAP do
  if [mKind isToMany] then
    %    self.mBoundObjectController_%!lkey.string% = EBSimpleController (\n%
    %      observedObjects: [self.%!lkey.string%_property],\n%
    %      callBack: { [weak self] in\n%
    %        let objects = self?.%!lkey.string%_property.propval ?? []\n%
    %        //NSLog ("bound objects \(objects.count) \(self?.mModel)")\n%
    %        self?.mModel?.%!lkey.string% = objects\n%
    %      }\n%
    %    )\n%
  end
end
%  }

  //····················································································································

  private func modelDidChange (_ inToOneRelationship : %!MODEL_TYPE_NAME%) {
    self.mModel = inToOneRelationship.propval
%for () in SELECTION_OBSERVABLE_PROPERTY_MAP do
  if [mKind isToMany] then
    %    self.%!lkey.string%_property.setProp (self.mModel?.%!lkey.string%_property.propval ?? [])\n%
  end
end
%  }

  //····················································································································

  func unbind_model () {
    self.mModelController?.unregister ()
    self.mModelController = nil
%for () in SELECTION_OBSERVABLE_PROPERTY_MAP do
  if [mKind isToMany] then
    %    self.mBoundObjectController_%!lkey.string%?.unregister ()\n%
    %    self.mBoundObjectController_%!lkey.string% = nil\n%
  end
end
%    self.mModel = nil
  }

  //····················································································································
  //    Model
  //····················································································································

  private var mModel : %!ELEMENT_TYPE_NAME%? = nil {
    didSet {
      if self.mModel !== oldValue {
%for () in SELECTION_OBSERVABLE_PROPERTY_MAP do
  if [mKind isToMany] then
    %      //--- ToMany relationship %!lkey.string%\n%
    %        if let controller = self.mModelController {\n%
    %          oldValue?.%!lkey.string%_property.removeEBObserver (controller)\n%
    %          self.mModel?.%!lkey.string%_property.addEBObserver (controller)\n%
    %        }\n%
  elsif [mKind isProperty] then
    %      //--- Atomic property %!lkey.string%\n%
    %        oldValue?.%!lkey.string%_property.removeEBObserver (self.%!lkey.string%_property)\n%
    %        self.mModel?.%!lkey.string%_property.addEBObserver (self.%!lkey.string%_property)\n%
  end
end
%      }
    }
  }

  //····················································································································
  //    Explorer
  //····················································································································

  final func addExplorer (name : String, y : inout CGFloat, view : NSView) {
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

