//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!["SelectionController_" + OWNER_NAME + "_" + SELECTION_CONTROLLER_NAME stringByRightPadding !113 !' ']%*
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(SelectionController_%!OWNER_NAME%_%!SELECTION_CONTROLLER_NAME%)
final class SelectionController_%!OWNER_NAME%_%!SELECTION_CONTROLLER_NAME% : EBObject {
  private var mModel : ReadOnlyArrayOf_%!ELEMENT_TYPE_NAME%?

  //····················································································································
  //   SELECTION OBSERVABLE PROPERTIES
  //····················································································································

%for () in SELECTION_OBSERVABLE_PROPERTY_MAP do
if not [mType isEntityType] then
%  var %!lkey.string% = EBPropertyProxy_%![mType swiftTypeName]% () \n%
end
end%
  //····················································································································
  //   BIND SELECTION
  //····················································································································

  func bind_selection (model : ReadOnlyArrayOf_%!ELEMENT_TYPE_NAME%, file:String, line:Int) {
    mModel = model
%for () in SELECTION_OBSERVABLE_PROPERTY_MAP do
if not [mType isEntityType] then
%    bind_property_%!lkey.string% (model: model)\n%
end
end%  }

  //····················································································································
  //    Explorer
  //····················································································································

  private var mValueExplorer : NSButton?
  private var mExplorerWindow : NSWindow?

  //····················································································································

  final func addExplorer (name : String, y : inout CGFloat, view : NSView) {
    let font = NSFont.boldSystemFont (ofSize: NSFont.smallSystemFontSize ())
    let tf = NSTextField (frame:secondColumn (y))
    tf.isEnabled = true
    tf.isEditable = false
    tf.stringValue = name
    tf.font = font
    view.addSubview (tf)
    let valueExplorer = NSButton (frame:thirdColumn (y))
    valueExplorer.font = font
    valueExplorer.title = explorerIndexString (mEasyBindingsObjectIndex) + className
    valueExplorer.target = self
    valueExplorer.action = #selector(SelectionController_%!OWNER_NAME%_%!SELECTION_CONTROLLER_NAME%.showObjectWindowFromExplorerButton(_:))
    view.addSubview (valueExplorer)
    mValueExplorer = valueExplorer
    y += EXPLORER_ROW_HEIGHT
  }
  
  //····················································································································

  func buildExplorerWindow () {
  //-------------------------------------------------- Create Window
    let r = NSRect (x:20.0, y:20.0, width:10.0, height:10.0)
    mExplorerWindow = NSWindow (contentRect: r, styleMask: [.titled, .closable], backing: .buffered, defer: true, screen: nil)
  //-------------------------------------------------- Adding properties
    let view = NSView (frame:r)
    var y : CGFloat = 0.0
%for () in SELECTION_OBSERVABLE_PROPERTY_MAP do
if not [mType isEntityType] then
  %    createEntryForPropertyNamed (\n%
  %      "%!lkey.string%",\n%
  %      idx:%!lkey.string%.mEasyBindingsObjectIndex,\n%
  %      y:&y,\n%
  %      view:view,\n%
  %      observerExplorer:&%!lkey.string%.mObserverExplorer,\n%
  %      valueExplorer:&%!lkey.string%.mValueExplorer\n%
  %    )\n%
end
end
%  //-------------------------------------------------- Finish Window construction
  //--- Resize View
    let viewFrame = NSRect (x:0.0, y:0.0, width:EXPLORER_ROW_WIDTH, height:y)
    view.frame = viewFrame
  //--- Set content size
    mExplorerWindow?.setContentSize (NSSize (width:EXPLORER_ROW_WIDTH + 16.0, height:fmin (600.0, y)))
  //--- Set close button as 'remove window' button
    let closeButton : NSButton? = mExplorerWindow?.standardWindowButton (.closeButton)
    closeButton?.target = self
    closeButton?.action = #selector(SelectionController_%!OWNER_NAME%_%!SELECTION_CONTROLLER_NAME%.deleteSelectionControllerWindowAction(_:))
  //--- Set window title
    let windowTitle = explorerIndexString (mEasyBindingsObjectIndex) + className
    mExplorerWindow!.title = windowTitle
  //--- Add Scroll view
    let frame = NSRect (x:0.0, y:0.0, width:EXPLORER_ROW_WIDTH, height:y)
    let sw = NSScrollView (frame:frame)
    sw.hasVerticalScroller = true
    sw.documentView = view
    mExplorerWindow!.contentView = sw
  }

  //····················································································································
  //   showObjectWindowFromExplorerButton
  //····················································································································

  func showObjectWindowFromExplorerButton (_ : Any) {
    if mExplorerWindow == nil {
      buildExplorerWindow ()
    }
    mExplorerWindow?.makeKeyAndOrderFront(nil)
  }
  
  //····················································································································
  //   deleteSelectionControllerWindowAction
  //····················································································································

  func deleteSelectionControllerWindowAction (_ : Any) {
    clearObjectExplorer ()
  }

  //····················································································································
  //   clearObjectExplorer
  //····················································································································

  func clearObjectExplorer () {
    let closeButton = mExplorerWindow?.standardWindowButton (.closeButton)
    closeButton!.target = nil
    mExplorerWindow?.orderOut (nil)
    mExplorerWindow = nil
  }

%for () in SELECTION_OBSERVABLE_PROPERTY_MAP do
if not [mType isEntityType] then
%  //···················································································································*\n\n% 
%  private final func bind_property_%!lkey.string% (model : ReadOnlyArrayOf_%!ELEMENT_TYPE_NAME%) {\n%
%    model.addEBObserverOf_%!lkey.string% (%!lkey.string%)\n%
%    %!lkey.string%.readModelFunction = {\n%
%      if let model = self.mModel {\n%
%        switch model.prop {\n%
%        case .noSelection :\n%
%          return .noSelection\n%
%        case .multipleSelection :\n%
%          return .multipleSelection\n%
%        case .singleSelection (let v) :\n%
%          var s = Set<%![mType swiftTypeName]%> ()\n%
%          var isMultipleSelection = false\n%
%          for object in v {\n%
%            switch object.%!lkey.string%.prop {\n%
%            case .noSelection :\n%
%              return .noSelection\n%
%            case .multipleSelection :\n%
%              isMultipleSelection = true\n%
%            case .singleSelection (let vProp) :\n%
%              s.insert (vProp)\n%
%            }\n%
%          }\n%
%          if isMultipleSelection {\n%
%            return .multipleSelection\n%
%          }else if s.count == 0 {\n%
%            return .noSelection\n%
%          }else if s.count == 1 {\n%
%            return .singleSelection (s.first!)\n%
%          }else{\n%
%            return .multipleSelection\n%
%          }\n%
%        }\n%
%      }else{\n%
%        return .noSelection\n%
%      }\n%
%    }\n%
if not [mKind isTransient] then
%    %!lkey.string%.writeModelFunction = { (inValue : %![mType swiftTypeName]%) in\n%
%      if let model = self.mModel {\n%
%        switch model.prop {\n%
%        case .noSelection, .multipleSelection :\n%
%          break\n%
%        case .singleSelection (let v) :\n%
%          for object in v {\n%
%            object.%!lkey.string%.setProp (inValue)\n%
%          }\n%
%        }\n%
%      }\n%
%    }\n%
%    %!lkey.string%.validateAndWriteModelFunction = { (candidateValue : %![mType swiftTypeName]%, windowForSheet : NSWindow?) in\n%
%      if let model = self.mModel {\n%
%        switch model.prop {\n%
%        case .noSelection, .multipleSelection :\n%
%          return false\n%
%        case .singleSelection (let v) :\n%
%          for object in v {\n%
%            let result = object.%!lkey.string%.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)\n%
%            if !result {\n%
%              return false\n%
%            }\n%
%          }\n%
%          return true\n%
%        }\n%
%      }else{\n%
%        return false\n%
%      }\n%
%    }\n%
end
%  }\n\n%
end
end%

  //····················································································································
  //   UNBIND SELECTION
  //····················································································································

  func unbind_selection () {
%for () in SELECTION_OBSERVABLE_PROPERTY_MAP do
if not [mType isEntityType] then
%  //--- %!lkey.string%\n%
%    %!lkey.string%.readModelFunction = nil \n%
%    %!lkey.string%.writeModelFunction = nil \n%
%    %!lkey.string%.validateAndWriteModelFunction = nil \n%
%    mModel?.removeEBObserverOf_%!lkey.string% (%!lkey.string%)\n%
%//    mModel?.removeEBObserver (%!lkey.string%)\n%
end
end%    mModel = nil    
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

