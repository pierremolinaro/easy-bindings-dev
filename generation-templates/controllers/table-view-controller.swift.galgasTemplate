//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private let DEBUG_EVENT = false

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"ArrayController_" + OWNER_NAME + "_" + TABLE_VIEW_CONTROLLER_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ArrayController_%!OWNER_NAME%_%!TABLE_VIEW_CONTROLLER_NAME% : EBObject, EBTableViewDelegate, EBTableViewDataSource%
if ELEMENT_TYPE_IS_GRAPHIC then
 %, EBViewControllerProtocol%
end
% {
 
  //····················································································································
  //    init
  //····················································································································

  override init () {
    mSelectedSet = SelectedSet_%!OWNER_NAME%_%!TABLE_VIEW_CONTROLLER_NAME% (
      allowsEmptySelection:allowsEmptySelection,
      allowsMultipleSelection:allowsMultipleSelection,
      sortedArray:self.sortedArray_property
    )
    super.init ()
%if ELEMENT_TYPE_IS_GRAPHIC then
  %    self.mSelectedSet.set (callBack: { [weak self] in self?.computeSelectionShape () } )\n%
  %  //--- Selection observers\n%
  %    self.canBringForward_property.readModelFunction = { [weak self] in\n%
  %      if let me = self {\n%
  %        return .single (me.canBringForward)\n%
  %      }else{\n%
  %        return .empty\n%
  %      }\n%
  %    }\n%
  %    self.mSelectedSet.addEBObserver (self.canBringToFront_property)\n%
  %    self.canBringToFront_property.readModelFunction = { [weak self] in\n%
  %      if let me = self {\n%
  %        return .single (me.canBringToFront)\n%
  %      }else{\n%
  %        return .empty\n%
  %      }\n%
  %    }\n%
  %    self.mSelectedSet.addEBObserver (self.canBringToFront_property)\n%
  %    self.canSendBackward_property.readModelFunction = { [weak self] in\n%
  %      if let me = self {\n%
  %        return .single (me.canSendBackward)\n%
  %      }else{\n%
  %        return .empty\n%
  %      }\n%
  %    }\n%
  %    self.mSelectedSet.addEBObserver (self.canSendBackward_property)\n%
  %    self.canSendToBack_property.readModelFunction = { [weak self] in\n%
  %      if let me = self {\n%
  %        return .single (me.canSendToBack)\n%
  %      }else{\n%
  %        return .empty\n%
  %      }\n%
  %    }\n%
  %    self.mSelectedSet.addEBObserver (self.canSendToBack_property)\n%
end%  //--- Set selected array compute function
    self.setSelectedArrayComputeFunction ()
  //--- Set sorted array compute function
    self.setFilterAndSortFunction ()
  }

  //····················································································································
  //    Sort Array
  //····················································································································

  let sortedArray_property = TransientArrayOf_%!ELEMENT_TYPE_NAME% ()

  //····················································································································

  private var mSortDescriptorArray = [(String, Bool)] () { // Key, ascending
    didSet {
      self.sortedArray_property.postEvent ()
      for tableView in mTableViewArray {
        var first = true
        for (key, ascending) in mSortDescriptorArray {
          if let column = tableView.tableColumn (withIdentifier: NSUserInterfaceItemIdentifier (rawValue: key)) {
            tableView.setIndicatorImage (
              first ? (ascending ? NSImage (named: NSImage.Name ("NSAscendingSortIndicator"))! : NSImage (named: NSImage.Name ("NSDescendingSortIndicator"))!) : nil,
              in:column
            )
            first = false
          }
        }
      }
    }
  }

  //····················································································································
  //    Attributes
  //····················································································································

%
for () in ATTRIBUTE_VALUES do
%  private let %!mValue0% = %!mValue1%\n%
end
%  
  //····················································································································
  //    Model
  //····················································································································

  private var mModel : %!MODEL_TYPE_NAME%? = nil

  //····················································································································

  var objectCount : Int {
    let objects = mModel?.propval ?? []
    return objects.count
  }

  //····················································································································

  func bind_model (_ inModel:%!MODEL_TYPE_NAME%) {
    self.mModel = inModel
    inModel.addEBObserver (self.sortedArray_property)
    self.sortedArray_property.addEBObserver (mSelectedSet)
    mSelectedSet.addEBObserver (self.selectedArray_property)
  //--- Add observed properties (for filtering and sorting)
%
for () in OBSERVED_PROPERTIES_FOR_SORTING_AND_FILERING do
  %    inModel.addEBObserverOf_%!key% (self.sortedArray_property)\n%
end
if ELEMENT_TYPE_IS_GRAPHIC then
 %    inModel.addEBObserverOf_objectDisplay (self.mObjectDisplayObserver)\n%
 %    self.mObjectDisplayObserver.eventCallBack = { [weak self] in self?.updateObjectDisplay () }\n%
end%  }

  //····················································································································

  func unbind_model () {
%if ELEMENT_TYPE_IS_GRAPHIC then
 %    self.mModel?.removeEBObserverOf_objectDisplay (self.mObjectDisplayObserver)\n%
end
%    self.mModel?.removeEBObserver (self.sortedArray_property)
    self.sortedArray_property.removeEBObserver (mSelectedSet)
    self.mSelectedSet.removeEBObserver (self.selectedArray_property)
  //--- Remove observed properties (for filtering and sorting)
%
for () in OBSERVED_PROPERTIES_FOR_SORTING_AND_FILERING do
  %//    mModel?.removeEBObserverOf_%!key% (self.sortedArray_property)\n%
end
%    for tvc in mTableViewDataSourceControllerArray {
      self.sortedArray_property.removeEBObserver (tvc)
    }
    for tvc in mTableViewSelectionControllerArray {
      mSelectedSet.removeEBObserver (tvc)
    }
  //---
    mSelectedSet.mSet = Set ()
    mModel = nil
 }

  //····················································································································
  //    Undo manager
  //····················································································································

  var undoManager : EBUndoManager? {
    return self.mModel?.undoManager
  }

  //····················································································································
  //   SELECTION
  //····················································································································

  let selectedArray_property = TransientArrayOf_%!ELEMENT_TYPE_NAME% ()

  //····················································································································

  private let mSelectedSet : SelectedSet_%!OWNER_NAME%_%!TABLE_VIEW_CONTROLLER_NAME%

  //····················································································································

  var selectedSet : Set <%!ELEMENT_TYPE_NAME%> { return mSelectedSet.mSet }

  //····················································································································

  var selectedIndexesSet : Set <Int> {
    var result = Set <Int> ()
    var idx = 0
    for object in self.mModel?.propval ?? [] {
      if mSelectedSet.mSet.contains (object) {
        result.insert (idx)
      }
      idx += 1
    }
    return result
  }

  //····················································································································

  func setSelection (_ inObjects : [%!ELEMENT_TYPE_NAME%]) {
    mSelectedSet.mSet = Set (inObjects)
  }
%if ELEMENT_TYPE_IS_GRAPHIC then
%
  //····················································································································
  //  EBView interface
  //····················································································································

  private var mObjectDisplayObserver = EBOutletEvent ()
  private var mEBViews = [EBView] ()

  //····················································································································

  var selectedGraphicObjectSet : Set <EBGraphicManagedObject> {
    return self.selectedSet
  }

   //····················································································································

  var objectArray : [EBGraphicManagedObject] {
    return self.mModel?.propval ?? []
  }

 //····················································································································

  func computeSelectionShape () {
    var selectionDisplayArray = [EBShape] ()
    for object in self.mModel?.propval ?? [] {
      if !mSelectedSet.mSet.contains (object) {
        selectionDisplayArray.append (EBShape ())
      }else if let shape = object.selectionDisplay {
        selectionDisplayArray.append (shape)
      }else{
        selectionDisplayArray.append (EBShape ())
      }
    }
    for view in self.mEBViews {
      view.updateSelectionShape (selectionDisplayArray)
    }
  }

  //····················································································································

  func updateObjectDisplay () {
    var displayArray = [EBShape] ()
    for object in self.mModel?.propval ?? [] {
      if let shape = object.objectDisplay {
        displayArray.append (shape)
      }else{
        displayArray.append (EBShape ())
      }
    }
    for view in self.mEBViews {
      view.updateObjectDisplay (displayArray)
    }
  }

  //····················································································································

  func bind_ebView (_ inEBView : EBView?) {
    if let ebView = inEBView {
      self.mEBViews.append (ebView)
      ebView.set (controller: self)
    }
  }

  //····················································································································

  func unbind_ebView (_ inEBView : EBView?) {
    if let ebView = inEBView, let idx = self.mEBViews.index (of: ebView) {
      ebView.updateObjectDisplay ([])
      ebView.updateSelectionShape ([])
      self.mEBViews.remove (at: idx)
    }
  }

%end%
  //····················································································································

  private final func setSelectedArrayComputeFunction () {
    self.selectedArray_property.readModelFunction = { [weak self] in
      if let me = self {
        switch me.sortedArray_property.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var result = [%!ELEMENT_TYPE_NAME%] ()
          for object in v {
            if me.mSelectedSet.mSet.contains (object) {
              result.append (object)
            }
          }
          return .single (result)
        }
      }else{
        return .empty
      }
    }
  }

%
if [SORTED_COLUMNS length] > 0 then
%  //····················································································································

  func isOrderedBefore (left : %!ELEMENT_TYPE_NAME%, right : %!ELEMENT_TYPE_NAME%) -> Bool {
    var order = ComparisonResult.orderedSame
    for (column, ascending) in mSortDescriptorArray {\n%
for () in SORTED_COLUMNS
  before
  %      %
  do
  %if column == "%!mColumnName%" {\n%
  %        order = compare_%![mSortPropertyKind swiftTypeName]% (left: left.%!mObservablePropertyForSorting%_property, right:right.%!mObservablePropertyForSorting%_property)\n%
  between
  %      }else %
  after
  %      }\n%
end
%      if !ascending {
        switch order {
        case .orderedAscending : order = .orderedDescending
        case .orderedDescending : order = .orderedAscending
        case .orderedSame : break // Exit from switch
        }
      }
      if order != .orderedSame {
        break // Exit from for
      }
    }
    return order == .orderedAscending
  }

%
end
%  //····················································································································

  private final func setFilterAndSortFunction () {
    self.sortedArray_property.readModelFunction = { [weak self] in
      if let me = self, let model = me.mModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let modelArray) :
%if [FILTER_PROPERTIES length] == 0 then
  if [SORTED_COLUMNS length] == 0 then
    %          return .single (modelArray)\n%
  else
    %          let sortedArray = modelArray.sorted (by: {me.isOrderedBefore (left: $0, right: $1)})\n%
    %          return .single (sortedArray)\n%
  end
else
  %          var filteredArray = [%!ELEMENT_TYPE_NAME%] ()\n%
  %          var isMultiple = false\n%
  %          for object in modelArray {\n%
  ![FILTER_PROPERTIES filterCode !"arrayControllerFilter_" + OWNER_NAME + "_" + TABLE_VIEW_CONTROLLER_NAME]
  %          }\n%
  %          if isMultiple {\n%
  %            return .multiple\n%
  %          }else{\n%
  if [SORTED_COLUMNS length] == 0 then
    %            return .single (filteredArray)\n%
  else
    %            let sortedFilteredArray = filteredArray.sorted (by: {me.isOrderedBefore (left: $0, right: $1)})\n%
    %            return .single (sortedFilteredArray)\n%
  end
  %          }\n%
end
%        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································
  //    Explorer
  //····················································································································

  final func addExplorer (name : String, y : inout CGFloat, view : NSView) {
  }

  //····················································································································
  //    bind_tableView
  //····················································································································

  private var mTableViewDataSourceControllerArray = [DataSource_EBTableView_controller] ()
  private var mTableViewSelectionControllerArray = [Selection_EBTableView_controller] ()
  private var mTableViewArray = [EBTableView] ()

  //····················································································································

  func bind_tableView (_ inTableView : EBTableView?, file : String, line : Int) {
    if DEBUG_EVENT {
      print ("\(#function)")
    }
    if let tableView = inTableView {
      tableView.allowsEmptySelection = allowsEmptySelection
      tableView.allowsMultipleSelection = allowsMultipleSelection
      tableView.dataSource = self
      tableView.delegate = self
    //--- Set table view data source controller
      let dataSourceTableViewController = DataSource_EBTableView_controller (delegate:self, tableView:tableView)
      self.sortedArray_property.addEBObserver (dataSourceTableViewController)
      mTableViewDataSourceControllerArray.append (dataSourceTableViewController)
    //--- Set table view selection controller
      let selectionTableViewController = Selection_EBTableView_controller (delegate:self, tableView:tableView)
       mSelectedSet.addEBObserver (selectionTableViewController)
      mTableViewSelectionControllerArray.append (selectionTableViewController)
%for () in BOUND_COLUMNS do
%    //--- Check '%!mColumnName%' column
      if let column : NSTableColumn = tableView.tableColumn (withIdentifier: NSUserInterfaceItemIdentifier (rawValue: "%!mColumnName%")) {
        column.sortDescriptorPrototype = nil
      }else{
        presentErrorWindow (file: file, line: line, errorMessage:"\"%!mColumnName%\" column view unknown")
      }
%
end
%    //--- Set descriptors from first column of table view
      var newSortDescriptorArray = [(String, Bool)] ()
      for column in tableView.tableColumns {
        newSortDescriptorArray.append ((column.identifier.rawValue, true)) // Ascending
      }
      mSortDescriptorArray = newSortDescriptorArray
      mTableViewArray.append (tableView)
    }
  }

  //····················································································································
 
  func unbind_tableView (_ inTableView : EBTableView?) {
    if DEBUG_EVENT {
      print ("\(#function)")
    }
    if let tableView = inTableView, let idx = self.mTableViewArray.index (of:tableView) {
      self.sortedArray_property.removeEBObserver (self.mTableViewDataSourceControllerArray [idx])
      self.mSelectedSet.removeEBObserver (self.mTableViewSelectionControllerArray [idx])
      self.mTableViewArray.remove (at: idx)
      self.mTableViewDataSourceControllerArray.remove (at: idx)
      self.mTableViewSelectionControllerArray.remove (at: idx)
    }
  }

 //····················································································································

  func selectedObjectIndexSet () -> NSIndexSet {
    switch self.sortedArray_property.prop {
    case .empty, .multiple :
       return NSIndexSet ()
    case .single (let v) :
    //--- Dictionary of object indexes
      var objectDictionary = [%!ELEMENT_TYPE_NAME% : Int] ()
      for (index, object) in v.enumerated () {
        objectDictionary [object] = index
      }
      let indexSet = NSMutableIndexSet ()
      for object in mSelectedSet.mSet {
        if let index = objectDictionary [object] {
          indexSet.add (index)
        }
      }
      return indexSet
    }
  }

  //····················································································································
  //    T A B L E V I E W    D A T A S O U R C E : numberOfRows (in:)
  //····················································································································

  func numberOfRows (in _ : NSTableView) -> Int {
    if DEBUG_EVENT {
      print ("\(#function)")
    }
    switch self.sortedArray_property.prop {
    case .empty, .multiple :
      return 0
    case .single (let v) :
      return v.count
    }
  }

  //····················································································································
  //    T A B L E V I E W    D E L E G A T E : tableViewSelectionDidChange:
  //····················································································································

  func tableViewSelectionDidChange (_ notification : Notification) {
    if DEBUG_EVENT {
      print ("\(#function)")
    }
    switch self.sortedArray_property.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      let tableView = notification.object as! EBTableView
      var newSelectedObjectSet = Set <%!ELEMENT_TYPE_NAME%> ()
      for index in tableView.selectedRowIndexes {
        newSelectedObjectSet.insert (v.objectAtIndex (index, file: #file, line: #line))
      }
      mSelectedSet.mSet = newSelectedObjectSet
    }
  }

  //····················································································································
  //    T A B L E V I E W    D E L E G A T E : tableView:viewForTableColumn:mouseDownInHeaderOfTableColumn:
  //····················································································································

  func tableView (_ tableView: NSTableView, mouseDownInHeaderOf inTableColumn: NSTableColumn) {
    var newSortDescriptorArray = [(String, Bool)] ()
    for (columnName, ascending) in mSortDescriptorArray {
      if inTableColumn.identifier == NSUserInterfaceItemIdentifier (columnName) {
        newSortDescriptorArray.insert ((columnName, !ascending), at:0)
      }else{
        newSortDescriptorArray.append ((columnName, !ascending))
      }
    }
    mSortDescriptorArray = newSortDescriptorArray
  }

  //····················································································································
  //    T A B L E V I E W    D E L E G A T E : tableView:viewForTableColumn:row:
  //····················································································································

  func tableView (_ tableView : NSTableView,
                  viewFor inTableColumn: NSTableColumn?,
                  row inRowIndex: Int) -> NSView? {
    if DEBUG_EVENT {
      print ("\(#function)")
    }
%if [BOUND_COLUMNS length] == 0 then
  %    return nil \n%
else
%    switch self.sortedArray_property.prop {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      let result : NSTableCellView = tableView.makeView (withIdentifier: (inTableColumn?.identifier)!, owner:self) as! NSTableCellView
      if !reuseTableViewCells () {
        result.identifier = nil // So result cannot be reused, will be freed
      }
      let object = v.objectAtIndex (inRowIndex, file: #file, line: #line)
      %
for () in BOUND_COLUMNS
  do
    %if inTableColumn?.identifier == NSUserInterfaceItemIdentifier ("%!mColumnName%") {\n%
    %        if let cell : %!mColumnOutletTypeName%_TableViewCell = result as? %!mColumnOutletTypeName%_TableViewCell {\n%
    %          cell.mUnbindFunction = { [weak cell] in\n%
    if mRunAction != "" then
    %            cell?.mCellOutlet?.target = nil\n%
    %            cell?.mCellOutlet?.action = nil\n%
    end
    for () in mRegularBindingsGenerationList do
    %            cell?.mCellOutlet?.unbind_%!mBindingName% ()\n%
    end
    %          }\n%
    %          cell.mUnbindFunction? ()\n%
    if mRunAction != "" then
    %          cell.mCellOutlet?.target = object\n%
    %          cell.mCellOutlet?.action = #selector (%!ELEMENT_TYPE_NAME%.%!mRunAction%(_:))\n%
    end
    for () in mRegularBindingsGenerationList do
    %          cell.mCellOutlet?.bind_%!mBindingName% (%
      for () in mBoundObjectList do
        !mBoundObjectString%, %
      end
      %file: #file, line: #line%!mBindingOptionsString%)\n%
    end
    %        }\n%
    %      %
  between
    %}else %
  after
   %}else{\n%
   %        NSLog ("Unknown column '\(String (describing: inTableColumn?.identifier))'")\n%
   %      }\n% 
end
%      return result
    } 
%
end
%  }
 
%switch MODEL_KIND
case transientArray :
case classArray :
% //····················································································································
  //    select
  //····················································································································

  func select (object inObject: %!ELEMENT_TYPE_NAME%) {
    if let model = mModel {
      switch model.prop {
      case .empty, .multiple :
        break
      case .single (let objectArray) :
        if objectArray.contains (inObject) {
          var newSelectedObjectSet = Set <%!ELEMENT_TYPE_NAME%> ()
          newSelectedObjectSet.insert (inObject)
          mSelectedSet.mSet = newSelectedObjectSet
        }
      }
    }
  }
 
  //····················································································································
  //    add
  //····················································································································

   @objc func add (_ sender : Any) {
    if DEBUG_EVENT {
      print ("\(#function)")
    }
    if let model = mModel {
      switch model.prop {
      case .empty, .multiple :
        break
      case .single (let v) :
        let newObject : %!ELEMENT_TYPE_NAME% = %!ELEMENT_TYPE_NAME% ()
        var array = v
        array.append (newObject)
      //--- New object is the selection
        var newSelectedObjectSet = Set <%!ELEMENT_TYPE_NAME%> ()
        newSelectedObjectSet.insert (newObject)
        mSelectedSet.mSet = newSelectedObjectSet
        model.setProp (array)
      }
    }
  }

  //····················································································································
  //    remove
  //····················································································································

  @objc func remove (_ sender : Any) {
    if DEBUG_EVENT {
      print ("\(#function)")
    }
    if let model = mModel {
      switch model.prop {
      case .empty, .multiple :
        break
      case .single (let model_prop) :
        switch self.sortedArray_property.prop {
        case .empty, .multiple :
          break
        case .single (let sortedArray_prop) :
        //------------- Find the object to be selected after selected object removing
        //--- Dictionary of object sorted indexes
          var sortedObjectDictionary = [%!ELEMENT_TYPE_NAME% : Int] ()
          for (index, object) in sortedArray_prop.enumerated () {
            sortedObjectDictionary [object] = index
          }
          var indexArrayOfSelectedObjects = [Int] ()
          for object in mSelectedSet.mSet {
            let index = sortedObjectDictionary [object]
            if let idx = index {
              indexArrayOfSelectedObjects.append (idx)
            }
          }
        //--- Sort
          indexArrayOfSelectedObjects.sort (by: { $0 < $1 })
        //--- Find the first index of a non selected object
          var newSelectionIndex = indexArrayOfSelectedObjects [0] + 1
          for index in indexArrayOfSelectedObjects {
            if newSelectionIndex < index {
              break
            }else{
              newSelectionIndex = index + 1
            }
          }
          var newSelectedObject : %!ELEMENT_TYPE_NAME%? = nil
          if (newSelectionIndex >= 0) && (newSelectionIndex < sortedArray_prop.count) {
            newSelectedObject = sortedArray_prop [newSelectionIndex]
          }
        //----------------------------------------- Remove selected object
        //--- Dictionary of object absolute indexes
          var objectDictionary = [%!ELEMENT_TYPE_NAME% : Int] ()
          for (index, object) in model_prop.enumerated () {
            objectDictionary [object] = index
          }
        //--- Build selected objects index array
          var selectedObjectIndexArray = [Int] ()
          for object in mSelectedSet.mSet {
            let index = objectDictionary [object]
            if let idx = index {
              selectedObjectIndexArray.append (idx)
            }
          }
        //--- Sort in reverse order
          selectedObjectIndexArray.sort (by: { $1 < $0 })
        //--- Remove objects, in reverse of order of their index
          var newObjectArray = model_prop
          for index in selectedObjectIndexArray {
            newObjectArray.remove (at: index)
          }
        //----------------------------------------- Set new selection
          var newSelectionSet = Set <%!ELEMENT_TYPE_NAME%> ()
          if let object = newSelectedObject {
            newSelectionSet.insert (object)
          }
          mSelectedSet.mSet = newSelectionSet
        //----------------------------------------- Set new object array
          model.setProp (newObjectArray)
        }
      }
    }
  }
%
case entityArray :
%  //····················································································································
  //    select
  //····················································································································

  func select (object inObject: %!ELEMENT_TYPE_NAME%) {
    if let model = mModel {
      switch model.prop {
      case .empty, .multiple :
        break
      case .single (let objectArray) :
        if objectArray.contains (inObject) {
          var newSelectedObjectSet = Set <%!ELEMENT_TYPE_NAME%> ()
          newSelectedObjectSet.insert (inObject)
          mSelectedSet.mSet = newSelectedObjectSet
        }
      }
    }
  }

  //····················································································································
  //    add
  //····················································································································

   @objc func add (_ sender : Any) {
    if DEBUG_EVENT {
      print ("\(#function)")
    }
    if let model = mModel {
      switch model.prop {
      case .empty, .multiple :
        break
      case .single (let v) :
        let newObject = %!ELEMENT_TYPE_NAME% (self.undoManager, file: #file, #line)
        var array = v
        array.append (newObject)
      //--- New object is the selection
        var newSelectedObjectSet = Set <%!ELEMENT_TYPE_NAME%> ()
        newSelectedObjectSet.insert (newObject)
        mSelectedSet.mSet = newSelectedObjectSet
        model.setProp (array)
      }
    }
  }

  //····················································································································
  //    remove
  //····················································································································

  @objc func remove (_ sender : Any) {
    if DEBUG_EVENT {
      print ("\(#function)")
    }
    if let model = mModel {
      switch model.prop {
      case .empty, .multiple :
        break
      case .single (let model_prop) :
        switch self.sortedArray_property.prop {
        case .empty, .multiple :
          break
        case .single (let sortedArray_prop) :
        //------------- Find the object to be selected after selected object removing
        //--- Dictionary of object sorted indexes
          var sortedObjectDictionary = [%!ELEMENT_TYPE_NAME% : Int] ()
          for (index, object) in sortedArray_prop.enumerated () {
            sortedObjectDictionary [object] = index
          }
          var indexArrayOfSelectedObjects = [Int] ()
          for object in mSelectedSet.mSet {
            let index = sortedObjectDictionary [object]
            if let idx = index {
              indexArrayOfSelectedObjects.append (idx)
            }
          }
        //--- Sort
          indexArrayOfSelectedObjects.sort (by: { $0 < $1 })
        //--- Find the first index of a non selected object
          var newSelectionIndex = indexArrayOfSelectedObjects [0] + 1
          for index in indexArrayOfSelectedObjects {
            if newSelectionIndex < index {
              break
            }else{
              newSelectionIndex = index + 1
            }
          }
          var newSelectedObject : %!ELEMENT_TYPE_NAME%? = nil
          if (newSelectionIndex >= 0) && (newSelectionIndex < sortedArray_prop.count) {
            newSelectedObject = sortedArray_prop [newSelectionIndex]
          }
        //----------------------------------------- Remove selected object
        //--- Dictionary of object absolute indexes
          var objectDictionary = [%!ELEMENT_TYPE_NAME% : Int] ()
          for (index, object) in model_prop.enumerated () {
            objectDictionary [object] = index
          }
        //--- Build selected objects index array
          var selectedObjectIndexArray = [Int] ()
          for object in mSelectedSet.mSet {
            let index = objectDictionary [object]
            if let idx = index {
              selectedObjectIndexArray.append (idx)
            }
          }
        //--- Sort in reverse order
          selectedObjectIndexArray.sort (by: { $1 < $0 })
        //--- Remove objects, in reverse of order of their index
          var newObjectArray = model_prop
          for index in selectedObjectIndexArray {
            newObjectArray.remove (at: index)
          }
        //----------------------------------------- Set new selection
          var newSelectionSet = Set <%!ELEMENT_TYPE_NAME%> ()
          if let object = newSelectedObject {
            newSelectionSet.insert (object)
          }
          mSelectedSet.mSet = newSelectionSet
        //----------------------------------------- Set new object array
          model.setProp (newObjectArray)
        }
      }
    }
  }
%end
if ELEMENT_TYPE_IS_GRAPHIC then
%
  //····················································································································
  //  SELECTION OPERATIONS
  //····················································································································

  private func sortedIndexArrayOfSelectedObjects () -> [Int] {
    var result = [Int] ()
    let objects = mModel?.propval ?? []
    for object in mSelectedSet.mSet {
      let idx = objects.index (of:object)!
      result.append (idx)
    }
    return result.sorted ()
  }

  //····················································································································

   func deleteSelectionAndRemoveDeletedObjectsFromManagedObjectContext () {
    var objects = mModel?.propval ?? []
    for object in mSelectedSet.mSet {
      if let idx = objects.index (of: object) {
        objects.remove(at: idx)
      }
    }
    mModel?.setProp (objects)
    mSelectedSet.mSet = Set ()
  }

  //····················································································································

  func selectAllObjects () {
    let objects = mModel?.propval ?? []
    mSelectedSet.mSet = Set (objects)
  }

  //····················································································································
  // BRING FORWARD
  //····················································································································

  var canBringForward_property = EBTransientProperty_Bool ()

  //····················································································································

  var canBringForward : Bool {
    let objects = mModel?.propval ?? []
    var result = (objects.count > 1) && (mSelectedSet.mSet.count > 0)
    if result {
      let sortedIndexArray = self.sortedIndexArrayOfSelectedObjects ()
      result = sortedIndexArray.last! < (objects.count - 1)
    }
    return result
  }

  //····················································································································

  func bringForward () {
    var objects = mModel?.propval ?? []
    let sortedIndexArray = self.sortedIndexArrayOfSelectedObjects ()
    for idx in sortedIndexArray.reversed () {
       let object = objects [idx]
       objects.remove (at: idx)
       objects.insert (object, at:idx+1)
    }
    mModel?.setProp (objects)
  }

  //····················································································································
  // BRING TO FRONT
  //····················································································································

  var canBringToFront_property = EBTransientProperty_Bool ()

  //····················································································································

  var canBringToFront : Bool {
    let objects = mModel?.propval ?? []
    if (objects.count > 1) && (mSelectedSet.mSet.count > 0) {
      let sortedIndexArray = self.sortedIndexArrayOfSelectedObjects ()
      var top = objects.count - 1
      for idx in sortedIndexArray.reversed () {
        if idx < top {
          return true
        }
        top -= 1
      }
    }
    return false
  }

  //····················································································································

  func bringToFront () {
    var objects = mModel?.propval ?? []
    let sortedIndexArray = self.sortedIndexArrayOfSelectedObjects ()
    for idx in sortedIndexArray {
      let object = objects [idx]
      objects.remove (at: idx)
      objects.append (object)
    }
    mModel?.setProp (objects)
  }

  //····················································································································
  // SEND BACKWARD
  //····················································································································

  var canSendBackward_property = EBTransientProperty_Bool ()

  //····················································································································

  var canSendBackward : Bool {
    let objects = mModel?.propval ?? []
    var result = (objects.count > 1) && (mSelectedSet.mSet.count > 0)
    if result {
      let sortedIndexArray = self.sortedIndexArrayOfSelectedObjects ()
      result = sortedIndexArray [0] > 0
    }
    return result
  }

  //····················································································································

  func sendBackward () {
    var objects = mModel?.propval ?? []
    let sortedIndexArray = self.sortedIndexArrayOfSelectedObjects ()
    for idx in sortedIndexArray.reversed () {
      let object = objects [idx]
      objects.remove (at: idx)
      objects.insert (object, at:idx-1)
    }
    mModel?.setProp (objects)
  }
  
  //····················································································································
  // SEND TO BACK
  //····················································································································

  var canSendToBack_property = EBTransientProperty_Bool ()

  //····················································································································

  func sendToBack () {
    var objects = mModel?.propval ?? []
    let sortedIndexArray = self.sortedIndexArrayOfSelectedObjects ()
    for idx in sortedIndexArray.reversed () {
      let object = objects [idx]
      objects.remove (at: idx)
      objects.insert (object, at:0)
    }
    mModel?.setProp (objects)
  }

  //····················································································································

  var canSendToBack : Bool {
    let objects = mModel?.propval ?? []
    if (objects.count > 1) && (mSelectedSet.mSet.count > 0) {
      let sortedIndexArray = self.sortedIndexArrayOfSelectedObjects ()
      var bottom = 0
      for idx in sortedIndexArray {
        if idx > bottom {
          return true
        }
        bottom += 1
      }
    }
    return false
  }

  //····················································································································

  func addToSelection (objectsWithIndex inIndexes : [Int]) {
    let objects = mModel?.propval ?? []
    var newSelectedSet = self.mSelectedSet.mSet
    for idx in inIndexes {
      let newSelectedObject = objects [idx]
      newSelectedSet.insert (newSelectedObject)
    }
    self.mSelectedSet.mSet = newSelectedSet
  }

  //····················································································································

  func removeFromSelection (objectWithIndex inIndex : Int) {
    let objects = mModel?.propval ?? []
    let object = objects [inIndex]
    var newSelectedSet = self.mSelectedSet.mSet
    newSelectedSet.remove (object)
    self.mSelectedSet.mSet = newSelectedSet
  }

  //····················································································································

  func clearSelection () {
    self.mSelectedSet.mSet = []
  }

  //····················································································································

  func setSelection (objectsWithIndexes inIndexes : [Int]) {
    let objects = mModel?.propval ?? []
    var selectedObjects = [%!ELEMENT_TYPE_NAME%] ()
    for index in inIndexes {
      let newSelectedObject = objects [index]
      selectedObjects.append (newSelectedObject)
    }
    self.mSelectedSet.mSet = Set (selectedObjects)
  }


%
end

%
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"SelectedSet_" + OWNER_NAME + "_" + TABLE_VIEW_CONTROLLER_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class SelectedSet_%!OWNER_NAME%_%!TABLE_VIEW_CONTROLLER_NAME% : EBAbstractProperty {
  private let mAllowsEmptySelection : Bool
  private let mAllowsMultipleSelection : Bool
  private let mSortedArray : TransientArrayOf_%!ELEMENT_TYPE_NAME%
%if ELEMENT_TYPE_IS_GRAPHIC then
 %  private var mObserverOfSelectionLayerOfSelectedObjects = EBOutletEvent ()\n%
end% 
  //····················································································································

  init (allowsEmptySelection : Bool,
        allowsMultipleSelection : Bool,
        sortedArray : TransientArrayOf_%!ELEMENT_TYPE_NAME%) {
    mAllowsMultipleSelection = allowsMultipleSelection
    mAllowsEmptySelection = allowsEmptySelection
    mSortedArray = sortedArray
    super.init ()
  }

%if ELEMENT_TYPE_IS_GRAPHIC then
 %  //····················································································································\n\n%
 %  func set (callBack : @escaping () -> Void) {\n%
 %    mObserverOfSelectionLayerOfSelectedObjects.eventCallBack = callBack\n%
 %  }\n\n%
end

%  //····················································································································

  private var mPrivateSet = Set<%!ELEMENT_TYPE_NAME%> () {
    didSet {
      if mPrivateSet != oldValue {
        postEvent ()
%if ELEMENT_TYPE_IS_GRAPHIC then
  %        let addedSet = mPrivateSet.subtracting (oldValue)\n%
  %        for object in addedSet {\n%
  %          object.selectionDisplay_property.addEBObserver (mObserverOfSelectionLayerOfSelectedObjects)\n%
  %        }\n%
  %        let removedSet = oldValue.subtracting (mPrivateSet)\n%
  %        for object in removedSet {\n%
  %          object.selectionDisplay_property.removeEBObserver (mObserverOfSelectionLayerOfSelectedObjects)\n%
  %        }\n%
  %        mObserverOfSelectionLayerOfSelectedObjects.postEvent ()\n%
end%      }
    }
  }

  //····················································································································

  var mSet : Set<%!ELEMENT_TYPE_NAME%> {
    set {
      var newSelectedSet = newValue
      switch mSortedArray.prop {
      case .empty, .multiple :
        break ;
      case .single (let sortedArray) :
        if !mAllowsEmptySelection && (newSelectedSet.count == 0) && (sortedArray.count > 0) {
          newSelectedSet = Set (arrayLiteral: sortedArray [0])
        }else if !mAllowsMultipleSelection && (newSelectedSet.count > 1) {
          newSelectedSet = Set (arrayLiteral: newSelectedSet.first!)
        }
      }
      mPrivateSet = newSelectedSet
    }
    get {
      return mPrivateSet
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

