//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private let DEBUG_EVENT = false

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Table View Controller + %!OWNER_NAME% %!TABLE_VIEW_CONTROLLER_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class Controller_%!OWNER_NAME%_%!TABLE_VIEW_CONTROLLER_NAME% : ReadOnlyAbstractGenericRelationshipProperty, EBTableViewDelegate, NSTableViewDataSource {
 
  //····················································································································
  //    Constant properties
  //····················································································································

%
for () in ATTRIBUTE_VALUES do
%  private let %!mValue0% = %!mValue1%\n%
end
%
  //····················································································································
  //   Sorted Array
  //····················································································································

  let sortedArray_property = TransientArrayOf_%!ELEMENT_TYPE_NAME% ()

  //····················································································································

  var sortedArray : [%!ELEMENT_TYPE_NAME%] { return self.sortedArray_property.propval }

  //····················································································································

  private var mSortDescriptorArray = [(String, Bool)] () { // Key, ascending
    didSet {
      self.sortedArray_property.postEvent ()
      for tableView in mTableViewArray {
        var first = true
        for (key, ascending) in mSortDescriptorArray {
          if let column = tableView.tableColumn (withIdentifier: NSUserInterfaceItemIdentifier (rawValue: key)) {
            tableView.setIndicatorImage (
              first ? (ascending ? NSImage (named: NSImage.Name ("NSAscendingSortIndicator"))! : NSImage (named: NSImage.Name ("NSDescendingSortIndicator"))!) : nil,
              in:column
            )
            first = false
          }
        }
      }
    }
  }

  //····················································································································
  //    Model
  //····················································································································

  private var mModel : %!MODEL_TYPE_NAME%? = nil

  //····················································································································

  var objectCount : Int {
    let objects = self.mModel?.propval ?? []
    return objects.count
  }

  //····················································································································

  func bind_model (_ inModel : %!MODEL_TYPE_NAME%, _ inUndoManager : EBUndoManager) {
    self.mModel = inModel
    self.mUndoManager = inUndoManager
    self.sortedArray_property.setDataProvider (inModel)
    inModel.attachClient (self)
  //--- Add observed properties (for filtering and sorting)
%
for () in OBSERVED_PROPERTIES_FOR_SORTING_AND_FILERING do
  %    inModel.addEBObserverOf_%!key% (self.sortedArray_property)\n%
end
%  }

  //····················································································································

  func unbind_model () {
    self.sortedArray_property.setDataProvider (nil)
    self.mModel?.detachClient (self)
  //--- Remove observed properties (for filtering and sorting)
%
for () in OBSERVED_PROPERTIES_FOR_SORTING_AND_FILERING do
  %//    mModel?.removeEBObserverOf_%!key% (self.sortedArray_property)\n%
end
%    for tvc in self.mTableViewDataSourceControllerArray {
      self.sortedArray_property.removeEBObserver (tvc)
    }
    for tvc in self.mTableViewSelectionControllerArray {
      self.mInternalSelectedArrayProperty.removeEBObserver (tvc)
    }
  //---
    self.mModel = nil
    self.mUndoManager = nil
 }

  //····················································································································
  //    Observing model change
  //····················································································································

  override func notifyModelDidChange () {
    super.notifyModelDidChange ()
    // NSLog ("self.sortedArray \(self.sortedArray.count)")
    let oldSelectionSet = self.selectedSet
    var newSelectedArray = [%!ELEMENT_TYPE_NAME%] ()
    for object in self.sortedArray {
      if oldSelectionSet.contains (object) {
        newSelectedArray.append (object)
      }
    }
    self.mInternalSelectedArrayProperty.setProp (newSelectedArray)
  }

  //····················································································································
  //    Undo manager
  //····················································································································

  private var mUndoManager : EBUndoManager? = nil
  var ebUndoManager : EBUndoManager? { return self.mUndoManager }

  //····················································································································
  //   Selected Array
  //····················································································································

  private let mInternalSelectedArrayProperty = StoredArrayOf_%!ELEMENT_TYPE_NAME% ()

  //····················································································································

  var selectedArray_property : ReadOnlyArrayOf_%!ELEMENT_TYPE_NAME% { return self.mInternalSelectedArrayProperty }

  //····················································································································

  var selectedArray : [%!ELEMENT_TYPE_NAME%] { return self.selectedArray_property.propval }

  //····················································································································

  var selectedArray_property_selection : EBSelection <[%!ELEMENT_TYPE_NAME%]> { return self.selectedArray_property.prop }
 
  //····················································································································

  var selectedSet : Set <%!ELEMENT_TYPE_NAME%> { return Set (self.selectedArray) }

  //····················································································································

  var selectedIndexesSet : Set <Int> {
    var result = Set <Int> ()
    var idx = 0
    for object in self.mModel?.propval ?? [] {
      if self.selectedSet.contains (object) {
        result.insert (idx)
      }
      idx += 1
    }
    return result
  }

  //····················································································································

  func setSelection (_ inObjects : [%!ELEMENT_TYPE_NAME%]) {
    self.mInternalSelectedArrayProperty.setProp (inObjects)
  }

  //····················································································································

/*  private final func setSelectedArrayComputeFunction () {
    self.selectedArray_property.mReadModelFunction = { [weak self] in
      if let me = self {
        switch me.sortedArray_property.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var result = [%!ELEMENT_TYPE_NAME%] ()
          for object in v {
            if me.mSelectedSet.mSet.contains (object) {
              result.append (object)
            }
          }
          return .single (result)
        }
      }else{
        return .empty
      }
    }
  }
*/
%
if [SORTED_COLUMNS length] > 0 then
%  //····················································································································

  func isOrderedBefore (left : %!ELEMENT_TYPE_NAME%, right : %!ELEMENT_TYPE_NAME%) -> Bool {
    var order = ComparisonResult.orderedSame
    for (column, ascending) in self.mSortDescriptorArray {\n%
for () in SORTED_COLUMNS
  before
  %      %
  do
  %if column == "%!mColumnName%" {\n%
  %        order = compare_%![mSortPropertyKind swiftTypeName]% (left: left.%!mObservablePropertyForSorting%_property, right:right.%!mObservablePropertyForSorting%_property)\n%
  between
  %      }else %
  after
  %      }\n%
end
%      if !ascending {
        switch order {
        case .orderedAscending : order = .orderedDescending
        case .orderedDescending : order = .orderedAscending
        case .orderedSame : break // Exit from switch
        }
      }
      if order != .orderedSame {
        break // Exit from for
      }
    }
    return order == .orderedAscending
  }

%
end
%  //····················································································································

/*  private final func setFilterAndSortFunction () {
    self.sortedArray_property.mReadModelFunction = { [weak self] in
      if let me = self, let model = me.mModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let modelArray) :
%if [FILTER_PROPERTIES length] == 0 then
  if [SORTED_COLUMNS length] == 0 then
    %          return .single (modelArray)\n%
  else
    %          let sortedArray = modelArray.sorted { me.isOrderedBefore (left: $0, right: $1) }\n%
    %          return .single (sortedArray)\n%
  end
else
  %          var filteredArray = [%!ELEMENT_TYPE_NAME%] ()\n%
  %          var isMultiple = false\n%
  %          for object in modelArray {\n%
  ![FILTER_PROPERTIES filterCode !"arrayControllerFilter_" + OWNER_NAME + "_" + TABLE_VIEW_CONTROLLER_NAME]
  %          }\n%
  %          if isMultiple {\n%
  %            return .multiple\n%
  %          }else{\n%
  if [SORTED_COLUMNS length] == 0 then
    %            return .single (filteredArray)\n%
  else
    %            let sortedFilteredArray = filteredArray.sorted { me.isOrderedBefore (left: $0, right: $1) }\n%
    %            return .single (sortedFilteredArray)\n%
  end
  %          }\n%
end
%        }
      }else{
        return .empty
      }
    }
  }
*/
  //····················································································································
  //    Explorer
  //····················································································································

  final func addExplorer (name : String, y : inout CGFloat, view : NSView) {
  }

  //····················································································································
  //    bind_tableView
  //····················································································································

  private var mTableViewDataSourceControllerArray = [DataSource_EBTableView_controller] ()
  private var mTableViewSelectionControllerArray = [Selection_EBTableView_controller] ()
  private var mTableViewArray = [EBTableView] ()

  //····················································································································

  func bind_tableView (_ inTableView : EBTableView?, file : String, line : Int) {
    if DEBUG_EVENT {
      print ("\(#function)")
    }
    if let tableView = inTableView {
      tableView.allowsEmptySelection = allowsEmptySelection
      tableView.allowsMultipleSelection = allowsMultipleSelection
      tableView.dataSource = self
      tableView.delegate = self
    //--- Set table view data source controller
      let dataSourceTableViewController = DataSource_EBTableView_controller (delegate:self, tableView:tableView)
      self.sortedArray_property.addEBObserver (dataSourceTableViewController)
      self.mTableViewDataSourceControllerArray.append (dataSourceTableViewController)
    //--- Set table view selection controller
      let selectionTableViewController = Selection_EBTableView_controller (delegate:self, tableView:tableView)
      self.mInternalSelectedArrayProperty.addEBObserver (selectionTableViewController)
      self.mTableViewSelectionControllerArray.append (selectionTableViewController)
%for () in BOUND_COLUMNS do
%    //--- Check '%!mColumnName%' column
      if let column : NSTableColumn = tableView.tableColumn (withIdentifier: NSUserInterfaceItemIdentifier (rawValue: "%!mColumnName%")) {
        column.sortDescriptorPrototype = nil
      }else{
        presentErrorWindow (file, line, "\"%!mColumnName%\" column view unknown")
      }
%
end
%    //--- Set descriptors from first column of table view
      var newSortDescriptorArray = [(String, Bool)] ()
      for column in tableView.tableColumns {
        newSortDescriptorArray.append ((column.identifier.rawValue, true)) // Ascending
      }
      self.mSortDescriptorArray = newSortDescriptorArray
      self.mTableViewArray.append (tableView)
    }
  }

  //····················································································································
 
  func unbind_tableView (_ inTableView : EBTableView?) {
    if DEBUG_EVENT {
      print ("\(#function)")
    }
    if let tableView = inTableView, let idx = self.mTableViewArray.firstIndex (of:tableView) {
      self.sortedArray_property.removeEBObserver (self.mTableViewDataSourceControllerArray [idx])
      self.mInternalSelectedArrayProperty.removeEBObserver (self.mTableViewSelectionControllerArray [idx])
      self.mTableViewArray.remove (at: idx)
      self.mTableViewDataSourceControllerArray.remove (at: idx)
      self.mTableViewSelectionControllerArray.remove (at: idx)
    }
  }

 //····················································································································

  func selectedObjectIndexSet () -> NSIndexSet {
    switch self.sortedArray_property.prop {
    case .empty, .multiple :
       return NSIndexSet ()
    case .single (let v) :
    //--- Dictionary of object indexes
      var objectDictionary = [%!ELEMENT_TYPE_NAME% : Int] ()
      for (index, object) in v.enumerated () {
        objectDictionary [object] = index
      }
      let indexSet = NSMutableIndexSet ()
      for object in self.selectedSet {
        if let index = objectDictionary [object] {
          indexSet.add (index)
        }
      }
      return indexSet
    }
  }

  //····················································································································
  //    T A B L E V I E W    D A T A S O U R C E : numberOfRows (in:)
  //····················································································································

  func numberOfRows (in _ : NSTableView) -> Int {
    if DEBUG_EVENT {
      print ("\(#function)")
    }
    switch self.sortedArray_property.prop {
    case .empty, .multiple :
      return 0
    case .single (let v) :
      return v.count
    }
  }

  //····················································································································
  //    T A B L E V I E W    D E L E G A T E : tableViewSelectionDidChange:
  //····················································································································

  func tableViewSelectionDidChange (_ notification : Notification) {
    if DEBUG_EVENT {
      print ("\(#function)")
    }
    switch self.sortedArray_property.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      let tableView = notification.object as! EBTableView
      var newSelectedObjects = [%!ELEMENT_TYPE_NAME%] ()
      for index in tableView.selectedRowIndexes {
        newSelectedObjects.append (v [index])
      }
      self.mInternalSelectedArrayProperty.setProp (newSelectedObjects)
    }
  }

  //····················································································································
  //    T A B L E V I E W    D E L E G A T E : tableView:viewForTableColumn:mouseDownInHeaderOfTableColumn:
  //····················································································································

  func tableView (_ tableView: NSTableView, mouseDownInHeaderOf inTableColumn: NSTableColumn) {
    var newSortDescriptorArray = [(String, Bool)] ()
    for (columnName, ascending) in self.mSortDescriptorArray {
      if inTableColumn.identifier == NSUserInterfaceItemIdentifier (columnName) {
        newSortDescriptorArray.insert ((columnName, !ascending), at:0)
      }else{
        newSortDescriptorArray.append ((columnName, !ascending))
      }
    }
    self.mSortDescriptorArray = newSortDescriptorArray
  }

  //····················································································································
  //    T A B L E V I E W    D E L E G A T E : tableView:viewForTableColumn:row:
  //····················································································································

  func tableView (_ tableView : NSTableView,
                  viewFor inTableColumn: NSTableColumn?,
                  row inRowIndex: Int) -> NSView? {
    if DEBUG_EVENT {
      print ("\(#function)")
    }
%if [BOUND_COLUMNS length] == 0 then
  %    return nil \n%
else
%    switch self.sortedArray_property.prop {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      if let tableColumnIdentifier = inTableColumn?.identifier,
         let result = tableView.makeView (withIdentifier: tableColumnIdentifier, owner:self) as? NSTableCellView {
        if !reuseTableViewCells () {
          result.identifier = nil // So result cannot be reused, will be freed
        }
        let object = v [inRowIndex]
        %
for () in BOUND_COLUMNS
  do
    %if tableColumnIdentifier.rawValue == "%!mColumnName%", let cell = result as? %!mColumnOutletTypeName%_TableViewCell {\n%
    %          cell.mUnbindFunction = { [weak cell] in\n%
    if mRunAction != "" then
    %            cell?.mCellOutlet?.target = nil\n%
    %            cell?.mCellOutlet?.action = nil\n%
    end
    for () in mRegularBindingsGenerationList do
    %            cell?.mCellOutlet?.unbind_%!mBindingName% ()\n%
    end
    %          }\n%
    %          cell.mUnbindFunction? ()\n%
    if mRunAction != "" then
    %          cell.mCellOutlet?.target = object\n%
    %          cell.mCellOutlet?.action = #selector (%!ELEMENT_TYPE_NAME%.%!mRunAction%(_:))\n%
    end
    for () in mRegularBindingsGenerationList do
    %          cell.mCellOutlet?.bind_%!mBindingName% (%
      for () in mBoundObjectList do
        !mBoundObjectString%, %
      end
      %file: #file, line: #line%!mBindingOptionsString%)\n%
      %          cell.update ()\n%
    end
    %        %
  between
    %}else %
  after
   %}else{\n%
   %          NSLog ("Unknown column '\(String (describing: inTableColumn?.identifier))'")\n%
   %        }\n% 
end
%        return result
      }else{
        return nil
      } 
    } 
%
end
%  }
 
%switch MODEL_KIND
case transientArray :
case entityArray :
%  //····················································································································
  //   Select a single object
  //····················································································································

  func select (object inObject: %!ELEMENT_TYPE_NAME%) {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        break
      case .single (let objectArray) :
        if objectArray.contains (inObject) {
          self.mInternalSelectedArrayProperty.setProp ([inObject])
        }
      }
    }
  }

  //····················································································································
  //    add
  //····················································································································

   @objc func add (_ sender : Any) {
    if DEBUG_EVENT {
      print ("\(#function)")
    }
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        break
      case .single (let v) :
        let newObject = %!ELEMENT_TYPE_NAME% (self.ebUndoManager)
        var array = v
        array.append (newObject)
        model.setProp (array)
      //--- New object is the selection
        self.mInternalSelectedArrayProperty.setProp ([newObject])
      }
    }
  }

  //····················································································································
  //    remove
  //····················································································································

  @objc func remove (_ sender : Any) {
    if DEBUG_EVENT {
      print ("\(#function)")
    }
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        break
      case .single (let model_prop) :
        switch self.sortedArray_property.prop {
        case .empty, .multiple :
          break
        case .single (let sortedArray_prop) :
        //------------- Find the object to be selected after selected object removing
        //--- Dictionary of object sorted indexes
          var sortedObjectDictionary = [%!ELEMENT_TYPE_NAME% : Int] ()
          for (index, object) in sortedArray_prop.enumerated () {
            sortedObjectDictionary [object] = index
          }
          var indexArrayOfSelectedObjects = [Int] ()
          for object in self.selectedSet {
            let index = sortedObjectDictionary [object]
            if let idx = index {
              indexArrayOfSelectedObjects.append (idx)
            }
          }
        //--- Sort
          indexArrayOfSelectedObjects.sort { $0 < $1 }
        //--- Find the first index of a non selected object
          var newSelectionIndex = indexArrayOfSelectedObjects [0] + 1
          for index in indexArrayOfSelectedObjects {
            if newSelectionIndex < index {
              break
            }else{
              newSelectionIndex = index + 1
            }
          }
          var newSelectedObject : %!ELEMENT_TYPE_NAME%? = nil
          if (newSelectionIndex >= 0) && (newSelectionIndex < sortedArray_prop.count) {
            newSelectedObject = sortedArray_prop [newSelectionIndex]
          }
        //----------------------------------------- Remove selected object
        //--- Dictionary of object absolute indexes
          var objectDictionary = [%!ELEMENT_TYPE_NAME% : Int] ()
          for (index, object) in model_prop.enumerated () {
            objectDictionary [object] = index
          }
        //--- Build selected objects index array
          var selectedObjectIndexArray = [Int] ()
          for object in self.selectedSet {
            let index = objectDictionary [object]
            if let idx = index {
              selectedObjectIndexArray.append (idx)
            }
          }
        //--- Sort in reverse order
          selectedObjectIndexArray.sort { $1 < $0 }
        //--- Remove objects, in reverse of order of their index
          var newObjectArray = model_prop
          for index in selectedObjectIndexArray {
            newObjectArray.remove (at: index)
          }
        //----------------------------------------- Set new object array
          model.setProp (newObjectArray)
        //----------------------------------------- Set new selection
          if let object = newSelectedObject {
            self.mInternalSelectedArrayProperty.setProp ([object])
          }else{
            self.mInternalSelectedArrayProperty.setProp ([])
          }
        }
      }
    }
  }
%end
%
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
