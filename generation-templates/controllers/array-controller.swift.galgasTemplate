//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"Array controller " + OWNER_NAME + " " + ARRAY_CONTROLLER_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class Controller_%!OWNER_NAME%_%!ARRAY_CONTROLLER_NAME% : ReadOnlyAbstractGenericRelationshipProperty%
if ELEMENT_TYPE_IS_GRAPHIC then
 %, EBGraphicViewControllerProtocol%
end
% {
 
  //····················································································································
  // Model
  //····················································································································
 
  private var mModel : %!MODEL_TYPE_NAME%? = nil

  //····················································································································

  var selectedSet : Set <%!ELEMENT_TYPE_NAME%> {
    set (newValue) {
%
if ELEMENT_TYPE_IS_GRAPHIC then
%    //--- Add observers to newly selected set\n%
%      for object in newValue.subtracting (self.mPrivateSelectedSet) {\n%
%        object.selectionDisplay_property.addEBObserver (self.mObjectSelectionObserver)\n%
%      }\n%
%    //--- Remove observers to deselected set\n%
%      let deselectedSet = self.mPrivateSelectedSet.subtracting (newValue)\n%
%      for object in deselectedSet {\n%
%        object.selectionDisplay_property.removeEBObserver (self.mObjectSelectionObserver)\n%
%      }\n%
%      if deselectedSet.count > 0 {\n%
%        self.mObjectSelectionObserver.postEvent () // Required, as removing observer does not post event\n%
%      }\n%
%    //---\n%
end
%      self.mPrivateSelectedSet = newValue
    }
    get {
      return self.selectedArray_property.propset
    }
  }

  //····················································································································

  private var mPrivateSelectedSet = Set <%!ELEMENT_TYPE_NAME%> () {
    didSet {
      self.selectedArray_property.postEvent ()
      self.mInternalSelectedArrayProperty.setProp (Array (self.mPrivateSelectedSet))
    }
  }

  //····················································································································
  // Selected Array
  //····················································································································

  private let mInternalSelectedArrayProperty = StoredArrayOf_%!ELEMENT_TYPE_NAME% ()

  //····················································································································

  var selectedArray_property : ReadOnlyArrayOf_%!ELEMENT_TYPE_NAME% { return self.mInternalSelectedArrayProperty }

  //····················································································································

  var selectedArray : [%!ELEMENT_TYPE_NAME%] { return self.selectedArray_property.propval }

  //····················································································································

  var selectedArray_property_selection : EBSelection <[%!ELEMENT_TYPE_NAME%]> { return self.selectedArray_property.prop }
 
  //····················································································································
  //   Init
  //····················································································································

  override init () {
    super.init ()
%if ELEMENT_TYPE_IS_GRAPHIC then
  %  //--- Selection observers\n%
  %    self.canBringForward_property.mReadModelFunction = { [weak self] in\n%
  %      if let me = self {\n%
  %        return .single (me.canBringForward)\n%
  %      }else{\n%
  %        return .empty\n%
  %      }\n%
  %    }\n%
  %    self.selectedArray_property.addEBObserver (self.canBringToFront_property)\n%
  %  //---\n%
  %    self.canBringToFront_property.mReadModelFunction = { [weak self] in\n%
  %      if let me = self {\n%
  %        return .single (me.canBringToFront)\n%
  %      }else{\n%
  %        return .empty\n%
  %      }\n%
  %    }\n%
  %    self.selectedArray_property.addEBObserver (self.canBringToFront_property)\n%
  %  //---\n%
  %    self.canSendBackward_property.mReadModelFunction = { [weak self] in\n%
  %      if let me = self {\n%
  %        return .single (me.canSendBackward)\n%
  %      }else{\n%
  %        return .empty\n%
  %      }\n%
  %    }\n%
  %    self.selectedArray_property.addEBObserver (self.canSendBackward_property)\n%
  %  //---\n%
  %    self.canSendToBack_property.mReadModelFunction = { [weak self] in\n%
  %      if let me = self {\n%
  %        return .single (me.canSendToBack)\n%
  %      }else{\n%
  %        return .empty\n%
  %      }\n%
  %    }\n%
  %    self.selectedArray_property.addEBObserver (self.canSendToBack_property)\n%
  %  //---\n%
  %    self.canFlipHorizontally_property.mReadModelFunction = { [weak self] in\n%
  %      if let me = self {\n%
  %        return .single (me.canFlipHorizontally)\n%
  %      }else{\n%
  %        return .empty\n%
  %      }\n%
  %    }\n%
  %    self.selectedArray_property.addEBObserver (self.canFlipHorizontally_property)\n%
  %  //---\n%
  %    self.canFlipVertically_property.mReadModelFunction = { [weak self] in\n%
  %      if let me = self {\n%
  %        return .single (me.canFlipVertically)\n%
  %      }else{\n%
  %        return .empty\n%
  %      }\n%
  %    }\n%
  %    self.selectedArray_property.addEBObserver (self.canFlipVertically_property)\n%
  %  //---\n%
  %    self.canRotate90Clockwise_property.mReadModelFunction = { [weak self] in\n%
  %      if let me = self {\n%
  %        return .single (me.canRotate90Clockwise)\n%
  %      }else{\n%
  %        return .empty\n%
  %      }\n%
  %    }\n%
  %    self.selectedArray_property.addEBObserver (self.canRotate90Clockwise_property)\n%
  %  //---\n%
  %    self.canRotate90CounterClockwise_property.mReadModelFunction = { [weak self] in\n%
  %      if let me = self {\n%
  %        return .single (me.canRotate90CounterClockwise)\n%
  %      }else{\n%
  %        return .empty\n%
  %      }\n%
  %    }\n%
  %    self.selectedArray_property.addEBObserver (self.canRotate90CounterClockwise_property)\n%
end
%  }

  //····················································································································

  var objectCount : Int {
    return self.mModel?.propval.count ?? 0
  }

  //····················································································································

  func bind_model (_ inModel : %!MODEL_TYPE_NAME%, _ inUndoManager : EBUndoManager?) {
    self.mModel = inModel
    self.mUndoManager = inUndoManager
    inModel.attachClient (self)
%if ELEMENT_TYPE_IS_GRAPHIC then
 %    self.startObservingObjectShape ()\n%
 %    self.startObservingSelectionShape ()\n%
 %    self.inspectorViewManagerStartsObservingSelection ()\n%
end%  }

  //····················································································································

  func unbind_model () {
%if ELEMENT_TYPE_IS_GRAPHIC then
  %    self.stopObservingObjectShape ()\n%
  %    self.stopObservingSelectionShape ()\n%
  %    self.inspectorViewManagerStopsObservingSelection ()\n%
end
%    self.mModel?.detachClient (self)
    self.selectedSet = Set ()
    self.mModel = nil
    self.mUndoManager = nil
 }

  //····················································································································

  override func notifyModelDidChange () {
    super.notifyModelDidChange ()
    let currentSelectedSet = self.selectedSet
    let objectArray = self.mModel?.propval ?? []
    let newSelectedSet = currentSelectedSet.intersection (objectArray)
    self.mInternalSelectedArrayProperty.setProp (Array (newSelectedSet))
  }

 //····················································································································
  //    Undo manager
  //····················································································································

  private var mUndoManager : EBUndoManager? = nil
  var ebUndoManager : EBUndoManager? { return self.mUndoManager }

  //····················································································································
  //   SELECTION
  // MARK: -
  //····················································································································

  var selectedIndexesSet : Set <Int> {
    var result = Set <Int> ()
    var idx = 0
    for object in self.mModel?.propval ?? [] {
      if self.selectedArray_property.propset.contains (object) {
        result.insert (idx)
      }
      idx += 1
    }
    return result
  }

  //····················································································································

  func setSelection (_ inObjects : [%!ELEMENT_TYPE_NAME%]) {
    self.selectedSet = Set (inObjects)
  }
%if ELEMENT_TYPE_IS_GRAPHIC then
%
  //····················································································································
  //  EBView interface
  //····················································································································

  var selectedGraphicObjectSet : Set <EBGraphicManagedObject> {
    return self.selectedArray_property.propset
  }

   //····················································································································

  var objectArray : [EBGraphicManagedObject] {
    return self.mModel?.propval ?? []
  }

  //····················································································································
  // MARK: -
  // Compute selection shape
  //····················································································································

  private var mObjectSelectionObserver = EBOutletEvent ()

  //····················································································································

  private func startObservingSelectionShape () {
    self.mModel?.addEBObserverOf_selectionDisplay (self.mObjectSelectionObserver)
    self.mObjectSelectionObserver.mEventCallBack = { [weak self] in self?.computeSelectionShape () }
  }

  //····················································································································

  private func computeSelectionShape () {
    var selectionDisplayArray = [EBShape] ()
    for object in self.mModel?.propval ?? [] {
      if !self.selectedArray_property.propset.contains (object) {
        selectionDisplayArray.append (EBShape ())
      }else if let shape = object.selectionDisplay {
        selectionDisplayArray.append (shape)
      }else{
        selectionDisplayArray.append (EBShape ())
      }
    }
    for view in self.mEBGraphicViews {
      view.updateSelectionShape (selectionDisplayArray)
    }
  }

  //····················································································································

  private func stopObservingSelectionShape () {
    self.mModel?.removeEBObserverOf_selectionDisplay (self.mObjectSelectionObserver)
    self.mObjectSelectionObserver.mEventCallBack = nil
  }

  //····················································································································
  // MARK: -
  // Compute object shape
  //····················································································································

  private var mObjectDisplayObserver = EBOutletEvent ()

  //····················································································································

  private func startObservingObjectShape () {
    self.mModel?.addEBObserverOf_objectDisplay (self.mObjectDisplayObserver)
    self.mObjectDisplayObserver.mEventCallBack = { [weak self] in self?.updateObjectDisplay () }
  }

  //····················································································································

  private func stopObservingObjectShape () {
    self.mModel?.removeEBObserverOf_objectDisplay (self.mObjectDisplayObserver)
    self.mObjectDisplayObserver.mEventCallBack = nil
  }

  //····················································································································

  func updateObjectDisplay () {
    var displayArray = [EBShape] ()
    for object in self.mModel?.propval ?? [] {
      if let shape = object.objectDisplay {
        displayArray.append (shape)
      }else{
        displayArray.append (EBShape ())
      }
    }
    for view in self.mEBGraphicViews {
      view.updateObjectDisplay (displayArray)
    }
  }

  //····················································································································
  // MARK: -
  //····················································································································

  func alignmentPointSetArray () -> [Set<CanariPoint>] {
    var result = [Set<CanariPoint>] ()
    for object in self.mModel?.propval ?? [] {
      result.append (object.alignmentPoints ().points)
    }
    return result
  }

  //····················································································································
  // MARK: -
  // EBGraphicViews
  //····················································································································

  private var mEBGraphicViews = Set <EBGraphicView> ()

  //····················································································································

  func bind_ebView (_ inEBView : EBGraphicView?) {
    if let ebView = inEBView {
      self.mEBGraphicViews.insert (ebView)
      ebView.set (controller: self)
    }
  }

  //····················································································································

  func unbind_ebView (_ inEBView : EBGraphicView?) {
    if let ebView = inEBView {
      ebView.updateObjectDisplay ([])
      ebView.updateSelectionShape ([])
      self.mEBGraphicViews.remove (ebView)
    }
  }

%end%
  //····················································································································
  //    Explorer
  //····················································································································

  final func addExplorer (name : String, y : inout CGFloat, view : NSView) {
  }

  //····················································································································

  func selectedObjectIndexSet () -> NSIndexSet {
    let modelObjects = self.mModel?.propval ?? []
    let selectedObjects = self.selectedArray_property.propset
    let indexSet = NSMutableIndexSet ()
    for object in selectedObjects {
      if let index = modelObjects.firstIndex(of: object) {
        indexSet.add (index)
      }
    }
    return indexSet
  }

%switch MODEL_KIND
case transientArray :
case entityArray :
%  //····················································································································
  //    select
  //····················································································································

  func select (object inObject : %!ELEMENT_TYPE_NAME%) {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        break
      case .single (let objectArray) :
        if objectArray.contains (inObject) {
           self.selectedSet = Set ([inObject])
        }
      }
    }
  }

  //····················································································································
  //    add
  //····················································································································

   @objc func add (_ sender : Any) {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        break
      case .single (let v) :
        let newObject = %!ELEMENT_TYPE_NAME% (self.ebUndoManager)
        var array = v
        array.append (newObject)
      //--- New object is the selection
        self.selectedSet = Set ([newObject])
        model.setProp (array)
      }
    }
  }

  //····················································································································
  //    remove
  //····················································································································

  @objc func remove (_ sender : Any) {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        break
      case .single (let model_prop) :
      //------------- Find the object to be selected after selected object removing
      //--- Dictionary of object sorted indexes
        var sortedObjectDictionary = [%!ELEMENT_TYPE_NAME% : Int] ()
        for (index, object) in model_prop.enumerated () {
          sortedObjectDictionary [object] = index
        }
        var indexArrayOfSelectedObjects = [Int] ()
        for object in self.selectedArray_property.propset {
          let index = sortedObjectDictionary [object]
          if let idx = index {
            indexArrayOfSelectedObjects.append (idx)
          }
        }
      //--- Sort
        indexArrayOfSelectedObjects.sort { $0 < $1 }
      //--- Find the first index of a non selected object
        var newSelectionIndex = indexArrayOfSelectedObjects [0] + 1
        for index in indexArrayOfSelectedObjects {
          if newSelectionIndex < index {
            break
          }else{
            newSelectionIndex = index + 1
          }
        }
        var newSelectedObject : %!ELEMENT_TYPE_NAME%? = nil
        if (newSelectionIndex >= 0) && (newSelectionIndex < model_prop.count) {
          newSelectedObject = model_prop [newSelectionIndex]
        }
      //----------------------------------------- Remove selected object
      //--- Dictionary of object absolute indexes
        var objectDictionary = [%!ELEMENT_TYPE_NAME% : Int] ()
        for (index, object) in model_prop.enumerated () {
          objectDictionary [object] = index
        }
      //--- Build selected objects index array
        var selectedObjectIndexArray = [Int] ()
        for object in self.selectedArray_property.propset {
          let index = objectDictionary [object]
          if let idx = index {
            selectedObjectIndexArray.append (idx)
          }
        }
      //--- Sort in reverse order
        selectedObjectIndexArray.sort { $1 < $0 }
      //--- Remove objects, in reverse of order of their index
        var newObjectArray = model_prop
        for index in selectedObjectIndexArray {
          newObjectArray.remove (at: index)
        }
      //----------------------------------------- Set new selection
        var newSelectionSet = Set <%!ELEMENT_TYPE_NAME%> ()
        if let object = newSelectedObject {
          newSelectionSet.insert (object)
        }
        self.selectedSet = newSelectionSet
      //----------------------------------------- Set new object array
        model.setProp (newObjectArray)
      }
    }
  }
%end
if ELEMENT_TYPE_IS_GRAPHIC then
%
  //····················································································································
  //  SELECTION OPERATIONS
  //····················································································································

  private func sortedIndexArrayOfSelectedObjects () -> [Int] {
    var result = [Int] ()
    let objects = self.mModel?.propval ?? []
    for object in self.selectedArray_property.propset {
      let idx = objects.firstIndex (of: object)!
      result.append (idx)
    }
    return result.sorted ()
  }

  //····················································································································
  // MARK: -
  //····················································································································

  func canCut (_ inPasteboardType : NSPasteboard.PasteboardType?) -> Bool {
    if (inPasteboardType == nil) || (self.selectedArray_property.propset.count == 0) {
      return false
    }else{
      for object in self.selectedArray_property.propset {
        if !object.canCopyAndPaste () || !object.canBeDeleted () {
          return false
        }
      }
      return true
    }
  }

  //····················································································································
  // MARK: -
  //····················································································································

  func cutSelectedObjectsIntoPasteboard (_ inPasteboardType : NSPasteboard.PasteboardType?, pasteOffset : CanariPoint) {
    self.copySelectedObjectsIntoPasteboard (inPasteboardType, pasteOffset: pasteOffset)
    self.deleteSelectedObjects ()
  }

  //····················································································································

  func canCopy (_ inPasteboardType : NSPasteboard.PasteboardType?) -> Bool {
    return self.canCut (inPasteboardType)
  }

  //····················································································································
  // MARK: -
  //····················································································································

  func copySelectedObjectsIntoPasteboard (_ inPasteboardType : NSPasteboard.PasteboardType?,
                                          pasteOffset : CanariPoint) {
    if let pasteboardType = inPasteboardType {
    //--- Declare pasteboard types
      let pb = NSPasteboard.general
      pb.declareTypes ([pasteboardType, .pdf], owner: self)
    //--- Build PDF representation
      let indexArray = self.sortedIndexArrayOfSelectedObjects ()
      let objects = mModel?.propval ?? []
      var shape = EBShape ()
      for idx in indexArray {
        let object = objects [idx]
        if let s = object.objectDisplay {
          shape.add (s)
        }
      }
      let pdfData = buildPDFimageData (frame: shape.boundingBox, shape: shape)
      pb.setData (pdfData, forType: .pdf)
   //--- Build private representation
      var objectDictionaryArray = [NSDictionary] ()
      for idx in indexArray {
        let object = objects [idx]
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        objectDictionaryArray.append (d)
      }
    //--- Copy private representation(s)
      let dataDictionary : NSDictionary = [
        "OBJECTS" : objectDictionaryArray,
        "X" : pasteOffset.x,
        "Y" : pasteOffset.y
      ]
      pb.setPropertyList (dataDictionary, forType: pasteboardType)
    }
  }

  //····················································································································
  // MARK: -
  //····················································································································

  func canPaste (_ inPasteboardType : NSPasteboard.PasteboardType?) -> Bool {
    if let pasteboardType = inPasteboardType {
      let pb = NSPasteboard.general
      return pb.availableType (from: [pasteboardType]) != nil
    }else{
      return false
    }
  }

  //····················································································································

   func pasteFromPasteboard (_ inPasteboardType : NSPasteboard.PasteboardType?) {
    let pb = NSPasteboard.general
    if let pasteboardType = inPasteboardType,
       pb.availableType (from: [pasteboardType]) != nil,
       let dataDictionary = pb.propertyList (forType: pasteboardType) as? NSDictionary,
       let array = dataDictionary ["OBJECTS"] as? [NSDictionary],
       let X = dataDictionary ["X"] as? Int,
       let Y = dataDictionary ["Y"] as? Int {
      var newObjects = [%!ELEMENT_TYPE_NAME%] ()
      let userSet = OCObjectSet ()
      for dictionary in array {
        if let object = makeManagedObjectFromDictionary (self.ebUndoManager, dictionary) as? %!ELEMENT_TYPE_NAME% {
          object.operationAfterPasting ()
          object.translate (xBy: X, yBy: Y, userSet: userSet)
          newObjects.append (object)
        }
      }
      var objects = self.mModel?.propval ?? []
      objects += newObjects
      self.mModel?.setProp (objects)
      self.selectedSet = Set (newObjects)
    }
  }

  //····················································································································
  // MARK: -
  //····················································································································

  func canDelete () -> Bool {
    if self.selectedArray_property.propset.count == 0 {
      return false
    }else{
      for object in self.selectedArray_property.propset {
        if !object.canBeDeleted () {
          return false
        }
      }
      return true
    }
  }

  //····················································································································

  var mAfterObjectRemovingCallback : Optional < () -> Void > = nil
  
  //····················································································································

  func deleteSelectedObjects () {
    if self.canDelete (), let model = self.mModel {
    //--- Remove selected objects
      let objectsToRemove = self.selectedArray_property.propset
      for object in objectsToRemove {
        object.operationBeforeRemoving ()
        var objects = model.propval
        if let idx = objects.firstIndex (of: object) {
          objects.remove (at: idx)
          model.setProp (objects)
        }
      }
    //---
      self.mAfterObjectRemovingCallback? ()
    }
  }

  //····················································································································
  // MARK: -
  //····················································································································

  func selectAllObjects () {
    let objects = self.mModel?.propval ?? []
    self.selectedSet = Set (objects)
  }

  //····················································································································
  // BRING FORWARD
  // MARK: -
  //····················································································································

  var canBringForward_property = EBTransientProperty_Bool ()

  //····················································································································

  var canBringForward : Bool {
    let objects = self.mModel?.propval ?? []
    var result = (objects.count > 1) && (self.selectedArray_property.propset.count > 0)
    if result {
      let sortedIndexArray = self.sortedIndexArrayOfSelectedObjects ()
      result = sortedIndexArray.last! < (objects.count - 1)
    }
    return result
  }

  //····················································································································

  func bringForward () {
    var objects = self.mModel?.propval ?? []
    let sortedIndexArray = self.sortedIndexArrayOfSelectedObjects ()
    for idx in sortedIndexArray.reversed () {
       let object = objects [idx]
       objects.remove (at: idx)
       objects.insert (object, at: idx+1)
    }
    self.mModel?.setProp (objects)
  }

  //····················································································································
  // BRING TO FRONT
  // MARK: -
  //····················································································································

  var canBringToFront_property = EBTransientProperty_Bool ()

  //····················································································································

  var canBringToFront : Bool {
    let objects = self.mModel?.propval ?? []
    if (objects.count > 1) && (self.selectedArray_property.propset.count > 0) {
      let sortedIndexArray = self.sortedIndexArrayOfSelectedObjects ()
      var top = objects.count - 1
      for idx in sortedIndexArray.reversed () {
        if idx < top {
          return true
        }
        top -= 1
      }
    }
    return false
  }

  //····················································································································

  func bringToFront () {
    var objects = self.mModel?.propval ?? []
    let sortedIndexArray = self.sortedIndexArrayOfSelectedObjects ()
    for idx in sortedIndexArray {
      let object = objects [idx]
      objects.remove (at: idx)
      objects.append (object)
    }
    self.mModel?.setProp (objects)
  }

  //····················································································································
  // SEND BACKWARD
   // MARK: -
 //····················································································································

  var canSendBackward_property = EBTransientProperty_Bool ()

  //····················································································································

  var canSendBackward : Bool {
    let objects = self.mModel?.propval ?? []
    var result = (objects.count > 1) && (self.selectedArray_property.propset.count > 0)
    if result {
      let sortedIndexArray = self.sortedIndexArrayOfSelectedObjects ()
      result = sortedIndexArray [0] > 0
    }
    return result
  }

  //····················································································································

  func sendBackward () {
    var objects = self.mModel?.propval ?? []
    let sortedIndexArray = self.sortedIndexArrayOfSelectedObjects ()
    for idx in sortedIndexArray.reversed () {
      let object = objects [idx]
      objects.remove (at: idx)
      objects.insert (object, at: idx-1)
    }
    self.mModel?.setProp (objects)
  }
  
  //····················································································································
  // SEND TO BACK
  // MARK: -
  //····················································································································

  var canSendToBack_property = EBTransientProperty_Bool ()

  //····················································································································

  func sendToBack () {
    var objects = self.mModel?.propval ?? []
    let sortedIndexArray = self.sortedIndexArrayOfSelectedObjects ()
    for idx in sortedIndexArray.reversed () {
      let object = objects [idx]
      objects.remove (at: idx)
      objects.insert (object, at: 0)
    }
    self.mModel?.setProp (objects)
  }

  //····················································································································

  var canSendToBack : Bool {
    let objects = self.mModel?.propval ?? []
    if (objects.count > 1) && (self.selectedArray_property.propset.count > 0) {
      let sortedIndexArray = self.sortedIndexArrayOfSelectedObjects ()
      var bottom = 0
      for idx in sortedIndexArray {
        if idx > bottom {
          return true
        }
        bottom += 1
      }
    }
    return false
  }

  //····················································································································
  // SNAP TO GRID
  // MARK: -
  //····················································································································

  func snapToGrid (_ inGrid : Int) {
    for object in self.selectedArray_property.propset {
      object.snapToGrid (inGrid)
    }
  }

  //····················································································································

  func canSnapToGrid (_ inGrid : Int) -> Bool {
    for object in self.selectedArray_property.propset {
      if object.canSnapToGrid (inGrid) {
        return true
      }
    }
    return false
  }


 //····················································································································
  // HORIZONTAL FLIP
  // MARK: -
  //····················································································································

  var canFlipHorizontally_property = EBTransientProperty_Bool ()

  //····················································································································

  func flipHorizontally () {
    for object in self.selectedArray_property.propset {
      object.flipHorizontally ()
    }
  }

  //····················································································································

  var canFlipHorizontally : Bool {
    for object in self.selectedArray_property.propset {
      if !object.canFlipHorizontally () {
        return false
      }
    }
    return self.selectedArray_property.propset.count > 0
  }

  //····················································································································
  // VERTICAL FLIP
  // MARK: -
  //····················································································································

  var canFlipVertically_property = EBTransientProperty_Bool ()

  //····················································································································

  func flipVertically () {
    for object in self.selectedArray_property.propset {
      object.flipVertically ()
    }
  }

  //····················································································································

  var canFlipVertically : Bool {
    for object in self.selectedArray_property.propset {
      if !object.canFlipVertically () {
        return false
      }
    }
    return self.selectedArray_property.propset.count > 0
  }

  //····················································································································
  // ROTATE 90 CLOCKWISE
  // MARK: -
  //····················································································································

  var canRotate90Clockwise_property = EBTransientProperty_Bool ()

  //····················································································································

  func rotate90Clockwise () {
    for object in self.selectedArray_property.propset {
      object.rotate90Clockwise ()
    }
  }

  //····················································································································

  var canRotate90Clockwise : Bool {
    for object in self.selectedArray_property.propset {
      if object.canRotate90Clockwise () {
        return true
      }
    }
    return false
  }

 //····················································································································
  // ROTATE 90 COUNTER CLOCKWISE
  // MARK: -
  //····················································································································

  var canRotate90CounterClockwise_property = EBTransientProperty_Bool ()

  //····················································································································

  func rotate90CounterClockwise () {
    for object in self.selectedArray_property.propset {
      object.rotate90CounterClockwise ()
    }
  }

  //····················································································································

  var canRotate90CounterClockwise : Bool {
    for object in self.selectedArray_property.propset {
      if object.canRotate90CounterClockwise () {
        return true
      }
    }
    return false
  }

  //····················································································································
  // MARK: -
  //····················································································································

  func addToSelection (objectsWithIndex inIndexes : [Int]) {
    let objects = self.mModel?.propval ?? []
    var newSelectedSet = self.selectedArray_property.propset
    for idx in inIndexes {
      let newSelectedObject = objects [idx]
      newSelectedSet.insert (newSelectedObject)
    }
    self.selectedSet = newSelectedSet
  }

  //····················································································································

  func removeFromSelection (objectWithIndex inIndex : Int) {
    let objects = self.mModel?.propval ?? []
    let object = objects [inIndex]
    var newSelectedSet = self.selectedArray_property.propset
    newSelectedSet.remove (object)
    self.selectedSet = newSelectedSet
  }

  //····················································································································

  func clearSelection () {
    self.selectedSet = []
  }

  //····················································································································

  func setSelection (objectsWithIndexes inIndexes : [Int]) {
    let objects = self.mModel?.propval ?? []
    var selectedObjects = [%!ELEMENT_TYPE_NAME%] ()
    for index in inIndexes {
      let newSelectedObject = objects [index]
      selectedObjects.append (newSelectedObject)
    }
    self.selectedSet = Set (selectedObjects)
  }
%end%
  //····················································································································
  // MARK: -
  //  INSPECTOR
  //····················································································································

  private var mInspectorReceivingView : NSView? = nil
  private var mCurrentAttachedView : NSView? = nil
  private var mInspectorDictionary = [ObjectIdentifier : NSView] ()
  private var mInspectorObserver = EBOutletEvent ()

  //····················································································································

  func register (inspectorReceivingView : NSView?) {
    self.mInspectorReceivingView = inspectorReceivingView
    self.updateInspectorViews ()
  }

  //····················································································································

  func register (inspectorView : NSView?, for inEntity : EBGraphicManagedObject.Type) {
    self.mInspectorDictionary [ObjectIdentifier (inEntity)] = inspectorView
    self.updateInspectorViews ()
  }

  //····················································································································

  private func inspectorViewManagerStartsObservingSelection () {
    self.selectedArray_property.addEBObserver (self.mInspectorObserver)
    self.mInspectorObserver.mEventCallBack = { [weak self] in self?.updateInspectorViews () }
  }

  //····················································································································

  private func inspectorViewManagerStopsObservingSelection () {
    self.mInspectorObserver.mEventCallBack = nil
    self.selectedArray_property.removeEBObserver (self.mInspectorObserver)
  }

  //····················································································································

  private func updateInspectorViews () {
    if let inspectorView = self.mInspectorReceivingView {
    //--- Remove current attached view
      self.mCurrentAttachedView?.removeFromSuperview ()
    //--- Add the new attached view
      if self.selectedArray_property.propset.count == 0 {
        let tf = self.textField ("Empty Selection", inspectorView.frame)
        inspectorView.addSubview (tf)
        self.mCurrentAttachedView = tf
      }else{
        var selectionTypes = Set <ObjectIdentifier> ()
        for object in self.selectedArray_property.propset {
          let T = ObjectIdentifier (type (of: object))
          selectionTypes.insert (T)
        }
        if selectionTypes.count > 1 {
          let tf = self.textField ("Multiple Selection", inspectorView.frame)
          inspectorView.addSubview (tf)
          self.mCurrentAttachedView = tf
        }else if let selectionInspectorView = self.mInspectorDictionary [selectionTypes.first!] {
          selectionInspectorView.autoresizingMask = [.width, .minYMargin]
          selectionInspectorView.frame = inspectorView.frame
          inspectorView.addSubview (selectionInspectorView)
          self.mCurrentAttachedView = selectionInspectorView
        }else{
          let tf = self.textField ("No Inspector for this Selection", inspectorView.frame)
          inspectorView.addSubview (tf)
          self.mCurrentAttachedView = tf
        }
      }
    }
  }

  //····················································································································

  private func textField (_ inString : String, _ inspectorFrame : NSRect) -> NSTextField {
    let textHeight : CGFloat = 30.0
    let r = NSRect (
      x: 0.0,
      y: inspectorFrame.origin.y + (inspectorFrame.size.height - textHeight) / 2.0,
      width: inspectorFrame.size.width,
      height: textHeight
    )
    let tf = NSTextField (frame: r)
    tf.alignment = .center
    tf.isBezeled = false
    tf.isBordered = false
    tf.drawsBackground = false
    tf.isEnabled = true
    tf.isEditable = false
    tf.autoresizingMask = [.width, .minYMargin, .maxYMargin]
    tf.stringValue = inString
    tf.font = NSFont.boldSystemFont (ofSize: NSFont.systemFontSize * 1.25)
    tf.textColor = NSColor.lightGray
    return tf
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

