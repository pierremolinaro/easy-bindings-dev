//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!["SelectionController_" + OWNER_NAME + "_" + SELECTION_CONTROLLER_NAME stringByRightPadding !113 !' ']%*
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class SelectionController_%!OWNER_NAME%_%!SELECTION_CONTROLLER_NAME% : EBObject {

%for () in PROPERTY_GENERATION_LIST do
  ![mProperty declarationInSelectionControllerCode]
end
%  //····················································································································
  //   BIND SELECTION
  //····················································································································

   private var mModel : TransientArrayOf_%!BASE_ELEMENT_TYPE_NAME%? = nil
   private var mActualModel = TransientArrayOf_%!DERIVED_ELEMENT_TYPE_NAME% ()

  //····················································································································

  func bind_selection (model : TransientArrayOf_%!BASE_ELEMENT_TYPE_NAME%, file : String, line : Int) {
    self.mModel = model
    self.mActualModel.mReadModelFunction = { [weak self] () -> EBSelection < [%!DERIVED_ELEMENT_TYPE_NAME%] > in
      if let model = self?.mModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = [%!DERIVED_ELEMENT_TYPE_NAME%] ()
          for baseObject in v {
            if let object = baseObject as? %!DERIVED_ELEMENT_TYPE_NAME% {
              s.append (object)
            }
          }
          return .single (s)
        }
      }else{
        return .empty
      }
    }
    model.addEBObserver (self.mActualModel)
%
  for () in PROPERTY_GENERATION_LIST do
    if (mProperty is == @atomicPropertyGeneration) | (mProperty is == @transientPropertyGeneration) | (mProperty is == @atomicProxyGeneration) then
      %    self.bind_property_%![mProperty mPropertyName]% (model: self.mActualModel)\n%
    end
  end
%  }

  //····················································································································
  //   UNBIND SELECTION
  //····················································································································

  func unbind_selection () {
    self.mModel?.removeEBObserver (self.mActualModel)
    self.mActualModel.mReadModelFunction = nil
%
  for () in PROPERTY_GENERATION_LIST do
    if (mProperty is == @atomicPropertyGeneration) | (mProperty is == @transientPropertyGeneration) then
      %  //--- %![mProperty mPropertyName]%\n%
      %    self.%![mProperty mPropertyName]%_property.mReadModelFunction = nil \n%
      if mProperty is == @atomicPropertyGeneration then
        %    self.%![mProperty mPropertyName]%_property.mWriteModelFunction = nil \n%
        %    self.%![mProperty mPropertyName]%_property.mValidateAndWriteModelFunction = nil \n%
       end
      %    self.mActualModel.removeEBObserverOf_%![mProperty mPropertyName]% (self.%![mProperty mPropertyName]%_property)\n%
    end
  end
%  //---
    self.mModel = nil    
  }

  //····················································································································
  //    Explorer
  //····················································································································

  private var mValueExplorer : NSButton?
  private var mExplorerWindow : NSWindow?

  //····················································································································

  final func addExplorer (name : String, y : inout CGFloat, view : NSView) {
    let font = NSFont.boldSystemFont (ofSize: NSFont.smallSystemFontSize)
    let tf = NSTextField (frame:secondColumn (y))
    tf.isEnabled = true
    tf.isEditable = false
    tf.stringValue = name
    tf.font = font
    view.addSubview (tf)
    let valueExplorer = NSButton (frame:thirdColumn (y))
    valueExplorer.font = font
    valueExplorer.title = explorerIndexString (ebObjectIndex) + className
    valueExplorer.target = self
    valueExplorer.action = #selector(SelectionController_%!OWNER_NAME%_%!SELECTION_CONTROLLER_NAME%.showObjectWindowFromExplorerButton(_:))
    view.addSubview (valueExplorer)
    self.mValueExplorer = valueExplorer
    y += EXPLORER_ROW_HEIGHT
  }
  
  //····················································································································

  func buildExplorerWindow () {
  //-------------------------------------------------- Create Window
    let r = NSRect (x:20.0, y:20.0, width:10.0, height:10.0)
    self.mExplorerWindow = NSWindow (contentRect: r, styleMask: [.titled, .closable], backing: .buffered, defer: true, screen: nil)
  //-------------------------------------------------- Adding properties
    let view = NSView (frame:r)
    var y : CGFloat = 0.0
%for () in PROPERTY_GENERATION_LIST do
  if mProperty is == @atomicPropertyGeneration then
    %    createEntryForPropertyNamed (\n%
    %      "%![mProperty mPropertyName]%",\n%
    %      idx:self.%![mProperty mPropertyName]%_property.ebObjectIndex,\n%
    %      y:&y,\n%
    %      view:view,\n%
    %      observerExplorer:&self.%![mProperty mPropertyName]%_property.mObserverExplorer,\n%
    %      valueExplorer:&self.%![mProperty mPropertyName]%_property.mValueExplorer\n%
    %    )\n%
  end
end
%  //-------------------------------------------------- Finish Window construction
  //--- Resize View
    let viewFrame = NSRect (x:0.0, y:0.0, width:EXPLORER_ROW_WIDTH, height:y)
    view.frame = viewFrame
  //--- Set content size
    self.mExplorerWindow?.setContentSize (NSSize (width:EXPLORER_ROW_WIDTH + 16.0, height:fmin (600.0, y)))
  //--- Set close button as 'remove window' button
    let closeButton : NSButton? = self.mExplorerWindow?.standardWindowButton (.closeButton)
    closeButton?.target = self
    closeButton?.action = #selector(SelectionController_%!OWNER_NAME%_%!SELECTION_CONTROLLER_NAME%.deleteSelectionControllerWindowAction(_:))
  //--- Set window title
    let windowTitle = explorerIndexString (ebObjectIndex) + className
    self.mExplorerWindow!.title = windowTitle
  //--- Add Scroll view
    let frame = NSRect (x:0.0, y:0.0, width:EXPLORER_ROW_WIDTH, height:y)
    let sw = NSScrollView (frame:frame)
    sw.hasVerticalScroller = true
    sw.documentView = view
    self.mExplorerWindow!.contentView = sw
  }

  //····················································································································
  //   showObjectWindowFromExplorerButton
  //····················································································································

  @objc func showObjectWindowFromExplorerButton (_ : Any) {
    if self.mExplorerWindow == nil {
      self.buildExplorerWindow ()
    }
    self.mExplorerWindow?.makeKeyAndOrderFront(nil)
  }
  
  //····················································································································
  //   deleteSelectionControllerWindowAction
  //····················································································································

  @objc func deleteSelectionControllerWindowAction (_ : Any) {
    self.clearObjectExplorer ()
  }

  //····················································································································
  //   clearObjectExplorer
  //····················································································································

  func clearObjectExplorer () {
    if let closeButton = self.mExplorerWindow?.standardWindowButton (.closeButton) {
      closeButton.target = nil
    }
    self.mExplorerWindow?.orderOut (nil)
    self.mExplorerWindow = nil
  }

%for () in PROPERTY_GENERATION_LIST do
  ![mProperty bindPropertyInSelectionController !"TransientArrayOf_" + DERIVED_ELEMENT_TYPE_NAME]
end%

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

