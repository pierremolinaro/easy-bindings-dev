//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Auto Layout Table View Controller %!OWNER_NAME% %!TABLE_VIEW_CONTROLLER_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class Controller_%!OWNER_NAME%_%!TABLE_VIEW_CONTROLLER_NAME% : EBObjcBaseObject, AutoLayoutTableViewDelegate {

  //····················································································································
  //    Constant properties
  //····················································································································

%
for (mValue0 mValue1) in ATTRIBUTE_VALUES do
%  private let %!mValue0% = %!mValue1%\n%
end
%
  //····················································································································
  //    Undo manager
  //····················································································································

  private var mUndoManager : EBUndoManager? = nil
  var ebUndoManager : EBUndoManager? { return self.mUndoManager }

  //····················································································································
  //   Sorted Array
  //····················································································································

  let sortedArray_property = TransientArrayOf_%!ELEMENT_TYPE_NAME% ()

  //····················································································································

  private var mSortDescriptorArray = [(%!ELEMENT_TYPE_NAME%, %!ELEMENT_TYPE_NAME%) -> ComparisonResult] ()

  //····················································································································
  //    Model
  //····················································································································

  private var mModel : %!MODEL_TYPE_NAME%? = nil

  //····················································································································

  var objects : EBReferenceArray <%!ELEMENT_TYPE_NAME%> {
    if let objects = self.mModel?.propval {
      return objects
    }else{
      return EBReferenceArray ()
    }
  }

  //····················································································································

  final func bind_model (_ inModel : %!MODEL_TYPE_NAME%, _ inUndoManager : EBUndoManager) {
    self.mModel = inModel
    self.mUndoManager = inUndoManager
    self.sortedArray_property.setDataProvider (
      inModel,
%if [SORTED_COLUMNS length] > 0 then
  %      sortCallback: { (left, right) in self.isOrderedBefore (left, right) },\n%
else
  %      sortCallback: nil,\n%
end
%      addSortObserversCallback: { (observer) in
%for (key) in OBSERVED_PROPERTIES_FOR_SORTING do
  %        inModel.addEBObserverOf_%!key% (observer)\n%
end
%      },
      removeSortObserversCallback: {(observer) in
%for (key) in OBSERVED_PROPERTIES_FOR_SORTING do
  %        inModel.removeEBObserverOf_%!key% (observer)\n%
end
%      }
    )
  }

%
if [SORTED_COLUMNS length] > 0 then
%  //····················································································································

  final func isOrderedBefore (_ left : %!ELEMENT_TYPE_NAME%, _ right : %!ELEMENT_TYPE_NAME%) -> Bool {
    var order = ComparisonResult.orderedSame
    for sortDescriptor in self.mSortDescriptorArray.reversed () {
      order = sortDescriptor (left, right)
      if order != .orderedSame {
        break // Exit from for loop
      }
    }
    return order == .orderedAscending
  }
%end
%
  //····················································································································

  final func unbind_model () {
    self.sortedArray_property.resetDataProvider ()
    self.mModel = nil
    self.mUndoManager = nil
 }

  //····················································································································
  //   Selected Array
  //····················································································································

  private let mInternalSelectedArrayProperty = StandAloneArrayOf_%!ELEMENT_TYPE_NAME% ()

  //····················································································································

  var selectedArray_property : ReadOnlyArrayOf_%!ELEMENT_TYPE_NAME% { return self.mInternalSelectedArrayProperty }

  //····················································································································

  var selectedArray : EBReferenceArray <%!ELEMENT_TYPE_NAME%> { return self.selectedArray_property.propval }

  //····················································································································

  var selectedSet : EBReferenceSet <%!ELEMENT_TYPE_NAME%> { return EBReferenceSet (self.selectedArray_property.propval.values) }

  //····················································································································

  var selectedIndexesSet : Set <Int> {
    let selectedObjectSet = self.selectedSet
    var result = Set <Int> ()
    var idx = 0
    if let model = self.mModel {
      for object in model.propval.values {
        if selectedObjectSet.contains (object) {
          result.insert (idx)
        }
        idx += 1
      }
    }
    return result
  }

  //····················································································································

  func setSelection (_ inObjects : [%!ELEMENT_TYPE_NAME%]) {
    self.mInternalSelectedArrayProperty.setProp (EBReferenceArray (inObjects))
  }

  //····················································································································
  //    Explorer
  //····················································································································

  final func addExplorer (name : String, y : inout CGFloat, view : NSView) {
  }

  //····················································································································
  //    sorted array observer
  //····················································································································

  private var mSortedArrayValuesObserver = EBOutletEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.sortedArray_property.addEBObserver (self.mSortedArrayValuesObserver)
%
for (mEditable mSortPropertyName mDisplayedPropertyName mColumnObjectTypeName mRunAction mActualParameterList) in BOUND_COLUMNS do
%  //--- Observe '%!mDisplayedPropertyName%' column
    self.sortedArray_property.addEBObserverOf_%!mDisplayedPropertyName% (self.mSortedArrayValuesObserver)
%
if (mSortPropertyName != "") & (mSortPropertyName != mDisplayedPropertyName) then
  %     self.sortedArray_property.addEBObserverOf_%!mSortPropertyName% (self.mSortedArrayValuesObserver)\n%
end
end
%  //---
    self.mSortedArrayValuesObserver.mEventCallBack = { [weak self] in
       for tableView in self?.mTableViewArray ?? [] {
        tableView.sortAndReloadData ()
      }
    }
  }

  //····················································································································
  //    bind_tableView
  //····················································································································

  private var mTableViewArray = [AutoLayoutTableView] ()

  //····················································································································

  final func bind_tableView (_ inTableView : AutoLayoutTableView) {
    inTableView.configure (
      allowsEmptySelection: allowsEmptySelection,
      allowsMultipleSelection: allowsMultipleSelection,
      delegate: self
    )
%for (mEditable mSortPropertyName mDisplayedPropertyName mColumnObjectTypeName mRunAction mActualParameterList) in BOUND_COLUMNS do
%  //--- Configure '%!mDisplayedPropertyName%' column
    inTableView.addColumn_%!mColumnObjectTypeName% (
      valueGetterDelegate: { [weak self] in return self?.sortedArray_property.propval [$0].%!mDisplayedPropertyName% },
      valueSetterDelegate: %
  if mEditable then
   %{ [weak self] (inRowIndex, inNewValue) in self?.sortedArray_property.propval [inRowIndex].%!mDisplayedPropertyName% = inNewValue }%
  else
    %nil%
  end
%,
      sortDelegate: %
if mSortPropertyName != "" then
%{ [weak self] (ascending) in
        self?.mSortDescriptorArray.append ({ (_ left : %!ELEMENT_TYPE_NAME%, _ right : %!ELEMENT_TYPE_NAME%) in return compare_%!mColumnObjectTypeName%_properties (left.%!mSortPropertyName%_property, ascending, right.%!mSortPropertyName%_property) })
      }%
else
  %nil%
end
%,
%
for (mValue0 mValue1) in mActualParameterList
  do %      %!mValue0%: %!mValue1%%
  between %,\n%
end
%
    )
%end
%  //---
    self.mTableViewArray.append (inTableView)
  }

%switch MODEL_KIND
case transientArray :
case entityArray :
%  //····················································································································
  //   Select a single object
  //····················································································································

  func select (object inObject: %!ELEMENT_TYPE_NAME%) {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        ()
      case .single (let objectArray) :
        let array = EBReferenceArray (objectArray)
        if array.contains (inObject) {
          self.mInternalSelectedArrayProperty.setProp (EBReferenceArray (inObject))
        }
      }
    }
  }

  //····················································································································
  //    remove
  //····················································································································

  @objc func remove (_ sender : Any) {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        break
      case .single (let model_prop) :
      //------------- Find the object to be selected after selected object removing
      //--- Dictionary of object sorted indexes
        var sortedObjectDictionary = EBReferenceDictionary <%!ELEMENT_TYPE_NAME%, Int> ()
        for (index, object) in model_prop.enumerated () {
          sortedObjectDictionary [object] = index
        }
        var indexArrayOfSelectedObjects = [Int] ()
        for object in self.selectedArray_property.propset.values {
          let index = sortedObjectDictionary [object]
          if let idx = index {
            indexArrayOfSelectedObjects.append (idx)
          }
        }
      //--- Sort
        indexArrayOfSelectedObjects.sort { $0 < $1 }
      //--- Find the first index of a non selected object
        var newSelectionIndex = indexArrayOfSelectedObjects [0] + 1
        for index in indexArrayOfSelectedObjects {
          if newSelectionIndex < index {
            break
          }else{
            newSelectionIndex = index + 1
          }
        }
      /*  var newSelectedObject : %!ELEMENT_TYPE_NAME%? = nil
        if (newSelectionIndex >= 0) && (newSelectionIndex < model_prop.count) {
          newSelectedObject = model_prop [newSelectionIndex]
        } */
      //----------------------------------------- Remove selected object
      //--- Dictionary of object absolute indexes
        var objectDictionary = EBReferenceDictionary <%!ELEMENT_TYPE_NAME%, Int> ()
        for (index, object) in model_prop.enumerated () {
          objectDictionary [object] = index
        }
      //--- Build selected objects index array
        var selectedObjectIndexArray = [Int] ()
        for object in self.selectedArray_property.propset.values {
          let index = objectDictionary [object]
          if let idx = index {
            selectedObjectIndexArray.append (idx)
          }
        }
      //--- Sort in reverse order
        selectedObjectIndexArray.sort { $1 < $0 }
      //--- Remove objects, in reverse of order of their index
        var newObjectArray = EBReferenceArray (model_prop)
        for index in selectedObjectIndexArray {
          newObjectArray.remove (at: index)
        }
      //----------------------------------------- Set new selection
 /*       var newSelectionSet = EBReferenceSet <%!ELEMENT_TYPE_NAME%> ()
        if let object = newSelectedObject {
          newSelectionSet.insert (object)
        }
        self.selectedSet = newSelectionSet */
      //----------------------------------------- Set new object array
        model.setProp (newObjectArray)
      }
    }
  }
  //····················································································································

%end
%
  //····················································································································
  // IMPLEMENTATION OF AutoLayoutTableViewDelegate
  //····················································································································

  final func rowCount () -> Int {
    return self.sortedArray_property.propval.count
  }

  //····················································································································

  final func tableViewSelectionDidChange (selectedRows inSelectedRows : IndexSet) {
    switch self.sortedArray_property.selection {
    case .empty, .multiple :
      ()
    case .single (let v) :
      var newSelectedObjects = EBReferenceArray <%!ELEMENT_TYPE_NAME%> ()
      for index in inSelectedRows {
        newSelectedObjects.append (v [index])
      }
      self.mInternalSelectedArrayProperty.setProp (newSelectedObjects)
    }
  }

  //····················································································································

  final func indexesOfSelectedObjects () -> IndexSet {
    var indexSet = IndexSet ()
    var idx = 0
    let selectedObjectSet = EBReferenceSet (self.selectedArray_property.propval.values)
    for object in self.sortedArray_property.propval.values {
      if selectedObjectSet.contains (object) {
        indexSet.insert (idx)
      }
      idx += 1
    }
    return indexSet
  }

  //····················································································································

%switch MODEL_KIND
case transientArray :
%  final func addEntry () { // Transient array cannot add entry
  }
%
case entityArray :
%  final func addEntry () {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        ()
      case .single (let v) :
        let newObject = %!ELEMENT_TYPE_NAME% (self.ebUndoManager)
        var array = EBReferenceArray (v)
        array.append (newObject)
        model.setProp (array)
      //--- New object is the selection
        self.mInternalSelectedArrayProperty.setProp (EBReferenceArray (newObject))
      }
    }
  }
%end%
  //····················································································································

%switch MODEL_KIND
case transientArray :
%  final func removeSelectedEntries () { // Transient array cannot remove entries
  }
%
case entityArray :
%  final func removeSelectedEntries () {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        ()
      case .single (let model_prop) :
        switch self.sortedArray_property.selection {
        case .empty, .multiple :
          ()
        case .single (let sortedArray_prop) :
        //------------- Find the object to be selected after selected object removing
        //--- Dictionary of object sorted indexes
          var sortedObjectDictionary = EBReferenceDictionary <%!ELEMENT_TYPE_NAME%, Int> ()
          for (index, object) in sortedArray_prop.enumerated () {
            sortedObjectDictionary [object] = index
          }
          var indexArrayOfSelectedObjects = [Int] ()
          for object in self.selectedSet.values {
            let index = sortedObjectDictionary [object]
            if let idx = index {
              indexArrayOfSelectedObjects.append (idx)
            }
          }
        //--- Sort
          indexArrayOfSelectedObjects.sort { $0 < $1 }
        //--- Find the first index of a non selected object
          var newSelectionIndex = indexArrayOfSelectedObjects [0] + 1
          for index in indexArrayOfSelectedObjects {
            if newSelectionIndex < index {
              ()
            }else{
              newSelectionIndex = index + 1
            }
          }
          var newSelectedObject : %!ELEMENT_TYPE_NAME%? = nil
          if (newSelectionIndex >= 0) && (newSelectionIndex < sortedArray_prop.count) {
            newSelectedObject = sortedArray_prop [newSelectionIndex]
          }
        //----------------------------------------- Remove selected object
        //--- Dictionary of object absolute indexes
          var objectDictionary = EBReferenceDictionary <%!ELEMENT_TYPE_NAME%, Int> ()
          for (index, object) in model_prop.enumerated () {
            objectDictionary [object] = index
          }
        //--- Build selected objects index array
          var selectedObjectIndexArray = [Int] ()
          for object in self.selectedSet.values {
            let index = objectDictionary [object]
            if let idx = index {
              selectedObjectIndexArray.append (idx)
            }
          }
        //--- Sort in reverse order
          selectedObjectIndexArray.sort { $1 < $0 }
        //--- Remove objects, in reverse of order of their index
          var newObjectArray = EBReferenceArray (model_prop)
          for index in selectedObjectIndexArray {
            newObjectArray.remove (at: index)
          }
        //----------------------------------------- Set new object array
          model.setProp (newObjectArray)
        //----------------------------------------- Set new selection
          if let object = newSelectedObject {
            self.mInternalSelectedArrayProperty.setProp (EBReferenceArray (object))
          }else{
            self.mInternalSelectedArrayProperty.setProp (EBReferenceArray ())
          }
        }
      }
    }
  }
%end%
  //····················································································································

  func beginSorting () {
    self.mSortDescriptorArray.removeAll ()
  }

  //····················································································································

  func endSorting () {
    self.sortedArray_property.notifyModelDidChange ()
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
