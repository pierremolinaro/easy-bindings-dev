//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    Auto Layout Table View Controller %!OWNER_NAME% %!TABLE_VIEW_CONTROLLER_NAME%
//----------------------------------------------------------------------------------------------------------------------

final class Controller_%!OWNER_NAME%_%!TABLE_VIEW_CONTROLLER_NAME%
                                       : ReadOnlyAbstractGenericRelationshipProperty, AutoLayoutTableViewDelegate {
 
  //····················································································································
  //    Constant properties
  //····················································································································

%
for () in ATTRIBUTE_VALUES do
%  private let %!mValue0% = %!mValue1%\n%
end
%
  //····················································································································
  //   Sorted Array
  //····················································································································

  let sortedArray_property = TransientArrayOf_%!ELEMENT_TYPE_NAME% ()

  //····················································································································

  var sortedArray : [%!ELEMENT_TYPE_NAME%] { return self.sortedArray_property.propval }

  //····················································································································
  //    Model
  //····················································································································

  private var mModel : %!MODEL_TYPE_NAME%? = nil

  //····················································································································

  var objects : [%!ELEMENT_TYPE_NAME%] {
    if let objects = self.mModel?.propval {
      return objects
    }else{
      return []
    }
  }

  //····················································································································

  var objectCount : Int {
    if let objects = self.mModel?.propval {
      return objects.count
    }else{
      return 0
    }
  }

  //····················································································································

  final func bind_model (_ inModel : %!MODEL_TYPE_NAME%, _ inUndoManager : EBUndoManager) {
    self.mModel = inModel
    self.mUndoManager = inUndoManager
    self.sortedArray_property.setDataProvider (
      inModel,
%if [SORTED_COLUMNS length] > 0 then
  %      sortCallback: nil, // { (left, right) in self.isOrderedBefore (left, right) },\n%
else
  %      sortCallback: nil,\n%
end
%      addSortObserversCallback: { (observer) in
%for () in OBSERVED_PROPERTIES_FOR_SORTING do
  %        inModel.addEBObserverOf_%!key% (observer)\n%
end
%      },
      removeSortObserversCallback: {(observer) in
%for () in OBSERVED_PROPERTIES_FOR_SORTING do
  %        inModel.removeEBObserverOf_%!key% (observer)\n%
end
%      }
    )
    inModel.attachClient (self)
  }

  //····················································································································

  final func unbind_model () {
    self.sortedArray_property.resetDataProvider ()
    self.mModel?.detachClient (self)
//    for tvc in self.mTableViewDataSourceControllerArray {
//      self.sortedArray_property.removeEBObserver (tvc)
//    }
//    for tvc in self.mTableViewSelectionControllerArray {
//      self.mInternalSelectedArrayProperty.removeEBObserver (tvc)
//    }
  //---
    self.mModel = nil
    self.mUndoManager = nil
 }

  //····················································································································
  //    Observing model change
  //····················································································································

  override func notifyModelDidChange () {
    super.notifyModelDidChange ()
 //   NSLog ("self.sortedArray \(self.sortedArray.count)")
//    let oldSelectionSet = self.selectedSet
//    var newSelectedArray = [%!ELEMENT_TYPE_NAME%] ()
//    for object in self.sortedArray {
//      if oldSelectionSet.contains (object) {
//        newSelectedArray.append (object)
//      }
//    }
//    self.mInternalSelectedArrayProperty.setProp (newSelectedArray)
    for tableView in self.mTableViewArray {
      tableView.reloadData ()
    }
  }

  //····················································································································
  //    Undo manager
  //····················································································································

  private var mUndoManager : EBUndoManager? = nil
  var ebUndoManager : EBUndoManager? { return self.mUndoManager }

  //····················································································································
  //   Selected Array
  //····················································································································

  private let mInternalSelectedArrayProperty = StandAloneArrayOf_%!ELEMENT_TYPE_NAME% ()

  //····················································································································

  var selectedArray_property : ReadOnlyArrayOf_%!ELEMENT_TYPE_NAME% { return self.mInternalSelectedArrayProperty }

  //····················································································································

  var selectedArray : [%!ELEMENT_TYPE_NAME%] { return self.selectedArray_property.propval }
 
  //····················································································································

  var selectedSet : Set <%!ELEMENT_TYPE_NAME%> { return Set (self.selectedArray) }

  //····················································································································

  var selectedIndexesSet : Set <Int> {
    var result = Set <Int> ()
    var idx = 0
    for object in self.objects {
      if self.selectedSet.contains (object) {
        result.insert (idx)
      }
      idx += 1
    }
    return result
  }

  //····················································································································

/*  func setSelection (_ inObjects : [%!ELEMENT_TYPE_NAME%]) {
    self.mInternalSelectedArrayProperty.setProp (inObjects)
  } */

%
if [SORTED_COLUMNS length] > 0 then
%  //····················································································································

/*  func isOrderedBefore (_ left : %!ELEMENT_TYPE_NAME%, _ right : %!ELEMENT_TYPE_NAME%) -> Bool {
    var order = ComparisonResult.orderedSame
    for sortDescriptor in self.mSortDescriptorArray {\n%
for () in SORTED_COLUMNS
  before
  %      %
  do
  %if sortDescriptor.key == "%!mColumnName%" {\n%
  %        order = compare_%![mSortPropertyKind swiftTypeName]%_properties (left.%!mObservablePropertyForSorting%_property, right.%!mObservablePropertyForSorting%_property)\n%
  between
  %      }else %
  after
  %      }\n%
end
%      // Swift.print ("key \(sortDescriptor.key), ascending \(sortDescriptor.ascending), order \(order.rawValue)")
      if !sortDescriptor.ascending {
        switch order {
        case .orderedAscending : order = .orderedDescending
        case .orderedSame : ()
        case .orderedDescending : order = .orderedAscending
        }
      }
      if order != .orderedSame {
        break // Exit from for
      }
    }
    return order == .orderedAscending
  } */

%
end
%  //····················································································································
  //    Explorer
  //····················································································································

  final func addExplorer (name : String, y : inout CGFloat, view : NSView) {
  }

  //····················································································································
  //    bind_tableView
  //····················································································································

  private var mTableViewArray = [AutoLayoutTableView] ()
%
for () in BOUND_COLUMNS do
  %  private var mColumnObserver_%!mColumnName% = EBOutletEvent ()\n%
end
%
  //····················································································································

  final func bind_tableView (_ inTableView : AutoLayoutTableView) {
    inTableView.configure (
      allowsEmptySelection: allowsEmptySelection,
      allowsMultipleSelection: allowsMultipleSelection,
      delegate: self
    )
%for () in BOUND_COLUMNS do
%  //--- Configure '%!mColumnName%' column
    _ = inTableView.addTextColumn (valueGetterDelegate: { [weak self] in return self?.sortedArray [$0].%!mColumnName% },
                                   valueSetterDelegate: %
  if mEditable then
   %{ [weak self] (inRowIndex, inNewValue) in self?.sortedArray [inRowIndex].name = inNewValue }%
  else
    %nil%
  end
%,
%for () in mActualParameterList
  do %                                   %!mValue0%: %!mValue1%%
  between %,\n%
end
%)
      self.mModel?.addEBObserverOf_%!mColumnName% (self.mColumnObserver_%!mColumnName%)
    self.mColumnObserver_%!mColumnName%.mEventCallBack = { [weak self] in
      // NSLog ("BEGIN reloadData \(self?.selectedArray)")
      for tableView in self?.mTableViewArray ?? [] {
        tableView.reloadData ()
      }
      // NSLog ("END reloadData \(self?.selectedArray)")
    }
%
end
%  //---
    self.mTableViewArray.append (inTableView)
  //---
    inTableView.reloadData ()
  }

  //····················································································································
 
/*  final func unbind_tableView (_ inTableView : EBTableView?) {
    if let tableView = inTableView, let idx = self.mTableViewArray.firstIndex (of:tableView) {
      self.sortedArray_property.removeEBObserver (self.mTableViewDataSourceControllerArray [idx])
      self.mInternalSelectedArrayProperty.removeEBObserver (self.mTableViewSelectionControllerArray [idx])
      self.mTableViewArray.remove (at: idx)
      self.mTableViewDataSourceControllerArray.remove (at: idx)
      self.mTableViewSelectionControllerArray.remove (at: idx)
    }
  } */

%switch MODEL_KIND
case transientArray :
case entityArray :
%  //····················································································································
  //   Select a single object
  //····················································································································

/*  func select (object inObject: %!ELEMENT_TYPE_NAME%) {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        ()
      case .single (let objectArray) :
        if objectArray.contains (inObject) {
          self.mInternalSelectedArrayProperty.setProp ([inObject])
        }
      }
    }
  } */

  //····················································································································

%end
%
  //····················································································································
  // IMPLEMENTATION OF AutoLayoutTableViewDelegate
  //····················································································································

  func rowCount () -> Int {
    return self.sortedArray.count
  }

  //····················································································································

  func tableViewSelectionDidChange (selectedRows inSelectedRows : IndexSet) {
    switch self.sortedArray_property.selection {
    case .empty, .multiple :
      ()
    case .single (let v) :
      var newSelectedObjects = [ArtworkFileGenerationParameters] ()
      for index in inSelectedRows {
        newSelectedObjects.append (v [index])
      }
      self.mInternalSelectedArrayProperty.setProp (newSelectedObjects)
    }
  }

  //····················································································································

  func indexesOfSelectedObjects () -> IndexSet {
    var indexSet = IndexSet ()
    var idx = 0
    let selectedObjectSet = Set (self.selectedArray)
    for object in self.sortedArray {
      if selectedObjectSet.contains (object) {
        indexSet.insert (idx)
      }
      idx += 1
    }
    return indexSet
  }

  //····················································································································

%switch MODEL_KIND
case transientArray :
%  final func addEntry () { // Transient array cannot add entry
  }
%
case entityArray :
%  final func addEntry () {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        ()
      case .single (let v) :
        let newObject = %!ELEMENT_TYPE_NAME% (self.ebUndoManager)
        var array = v
        array.append (newObject)
        model.setProp (array)
      //--- New object is the selection
        self.mInternalSelectedArrayProperty.setProp ([newObject])
      }
    }
  }
%end%
  //····················································································································

%switch MODEL_KIND
case transientArray :
%  final func removeSelectedEntries () { // Transient array cannot remove entries
  }
%
case entityArray :
%  func removeSelectedEntries () {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        ()
      case .single (let model_prop) :
        switch self.sortedArray_property.selection {
        case .empty, .multiple :
          ()
        case .single (let sortedArray_prop) :
        //------------- Find the object to be selected after selected object removing
        //--- Dictionary of object sorted indexes
          var sortedObjectDictionary = [%!ELEMENT_TYPE_NAME% : Int] ()
          for (index, object) in sortedArray_prop.enumerated () {
            sortedObjectDictionary [object] = index
          }
          var indexArrayOfSelectedObjects = [Int] ()
          for object in self.selectedSet {
            let index = sortedObjectDictionary [object]
            if let idx = index {
              indexArrayOfSelectedObjects.append (idx)
            }
          }
        //--- Sort
          indexArrayOfSelectedObjects.sort { $0 < $1 }
        //--- Find the first index of a non selected object
          var newSelectionIndex = indexArrayOfSelectedObjects [0] + 1
          for index in indexArrayOfSelectedObjects {
            if newSelectionIndex < index {
              ()
            }else{
              newSelectionIndex = index + 1
            }
          }
          var newSelectedObject : %!ELEMENT_TYPE_NAME%? = nil
          if (newSelectionIndex >= 0) && (newSelectionIndex < sortedArray_prop.count) {
            newSelectedObject = sortedArray_prop [newSelectionIndex]
          }
        //----------------------------------------- Remove selected object
        //--- Dictionary of object absolute indexes
          var objectDictionary = [%!ELEMENT_TYPE_NAME% : Int] ()
          for (index, object) in model_prop.enumerated () {
            objectDictionary [object] = index
          }
        //--- Build selected objects index array
          var selectedObjectIndexArray = [Int] ()
          for object in self.selectedSet {
            let index = objectDictionary [object]
            if let idx = index {
              selectedObjectIndexArray.append (idx)
            }
          }
        //--- Sort in reverse order
          selectedObjectIndexArray.sort { $1 < $0 }
        //--- Remove objects, in reverse of order of their index
          var newObjectArray = model_prop
          for index in selectedObjectIndexArray {
            newObjectArray.remove (at: index)
          }
        //----------------------------------------- Set new object array
          model.setProp (newObjectArray)
        //----------------------------------------- Set new selection
          if let object = newSelectedObject {
            self.mInternalSelectedArrayProperty.setProp ([object])
          }else{
            self.mInternalSelectedArrayProperty.setProp ([])
          }
        }
      }
    }
  }
%end%
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
