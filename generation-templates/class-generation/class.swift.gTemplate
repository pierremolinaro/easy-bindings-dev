import Cocoa

//----------------------------------------------------------------------------*

@objc(%!CLASS_NAME%) class %!CLASS_NAME% : %
if SUPER_CLASS_NAME == "" then
  %NSObject%
else
  !SUPER_CLASS_NAME
end
% {

%foreach ATTRIBUTE_LIST do
  ![mType generateAttributeDeclarationInSwift !"class" !CLASS_NAME !mAttributeName !mDirectSwiftDefaultValue !generateUndoHandling:false]
end

foreach TRANSIENT_LIST_FOR_IMPLEMENTATION do
%  //-------------------------------------------------------------------------------------------------------------------*
  //    %!["Transient: " + mTransientName stringByRightPadding !111 !' ']%*
  //-------------------------------------------------------------------------------------------------------------------*\n\n%
%  var %!mTransientName%_observers = NSMutableSet ()\n%
%  var %!mTransientName%_cache : %![mTransientType swiftTypeName]%?\n%
%  var %!mTransientName% : %![mTransientType swiftTypeName]% {\n%
%    if %!mTransientName%_cache == nil {\n%
%      %!mTransientName%_cache = compute_%! . inKindName . "_" . mTransientName . " (" ;

%    }\n%
#!generateSwiftTransientCacheRoutine [!CLASS_NAME !mTransientType !mTransientName !mDependencyList !mRootSignDependencyList]
%  }

  func %!["class." + CLASS_NAME + "." + mTransientName identifierRepresentation]%_didChange () {
    self.willChangeValueForKey ("%!mTransientName%")
    self.didChangeValueForKey  ("%!mTransientName%")
    for anyObject in %!mTransientName%_observers {
      let object = anyObject as PMTriggerProtocol
      enterTriggerWithObject (object)
    }
  }

   func addObserverOf_%!mTransientName% (inObserver : PMTriggerProtocol) {
    %!mTransientName%_observers.addObject (inObserver)
    enterTriggerWithObject (inObserver)
  }
 
  func removeObserverOf_%!mTransientName% (inObserver : PMTriggerProtocol) {
    %!mTransientName%_observers.removeObject (inObserver)
    enterTriggerWithObject (inObserver)
  }

  var triggerObjectFor_%!["class." + CLASS_NAME + "." + mTransientName identifierRepresentation]%__cache : PMTrigger_%!["class." + CLASS_NAME + "." + mTransientName identifierRepresentation]%? = nil
  var triggerObjectFor_%!["class." + CLASS_NAME + "." + mTransientName identifierRepresentation]% : PMTrigger_%!["class." + CLASS_NAME + "." + mTransientName identifierRepresentation]% {
    if !triggerObjectFor_%!["class." + CLASS_NAME + "." + mTransientName identifierRepresentation]%__cache {
      triggerObjectFor_%!["class." + CLASS_NAME + "." + mTransientName identifierRepresentation]%__cache = PMTrigger_%!["class." + CLASS_NAME + "." + mTransientName identifierRepresentation]% (object:self)
    }
    return triggerObjectFor_%!["class." + CLASS_NAME + "." + mTransientName identifierRepresentation]%__cache!
  }
  
%
end
%  //-------------------------------------------------------------------------------------------------------------------*
  //    init                                                                                                           *
  //-------------------------------------------------------------------------------------------------------------------*

  init () {
    super.init ()
%if SUPER_CLASS_NAME == "" then
%    noteObjectAllocation (self)
%end%  //--- Add Transient observers\n%
!generateAddSwiftObserverForTransients [!"class" !CLASS_NAME !TRANSIENT_LIST_FOR_IMPLEMENTATION !"    "]
%  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    deinit                                                                                                         *
  //-------------------------------------------------------------------------------------------------------------------*

  deinit {
%if SUPER_CLASS_NAME == "" then
%    noteObjectDeallocation (self)
%end
!generateRemoveSwiftObserverForTransients [!"class" !CLASS_NAME !TRANSIENT_LIST_FOR_IMPLEMENTATION !"    "]
%  }

  //-------------------------------------------------------------------------------------------------------------------*

}

//----------------------------------------------------------------------------*

