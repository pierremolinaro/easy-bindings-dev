#import "PMApplication.h"
#import "PMAllocationDebug.h"
#import "easy-bindings-utilities.h"
#import "%!CLASS_NAME%.h"
%
if [TRANSIENT_LIST_FOR_IMPLEMENTATION length] > 0 then
  %#import "%!CLASS_NAME%-transient-computations.h"\n%
end
foreach IMPLEMENTATION_INCLUSION_SET do
  %#import "%!key%.h"\n%
end
foreach CURRENT_ARRAY_MAP do
%#import "%!mElementType->mTypeName->string%.h"\n%
end
%

//----------------------------------------------------------------------------*

@implementation %!CLASS_NAME%

//----------------------------------------------------------------------------*
//    Synthesize properties                                                   *
//----------------------------------------------------------------------------*

%foreach ATTRIBUTE_LIST do
  %@synthesize %!mAttributeName% ;\n%
end
foreach CURRENT_ARRAY_MAP do
  %@synthesize %!lkey->string% ;\n%
end
%
//----------------------------------------------------------------------------*
//    Init Methods                                                            *
//----------------------------------------------------------------------------*

- (instancetype) init {
  self = [super init] ;
  if (self) {
%if SUPER_CLASS_NAME == "" then
%    macroNoteObjectAllocation ;
%end
foreach ATTRIBUTE_LIST do
  %    %!mAttributeName% = %!mDirectOCDefaultValue% ;\n%
end
foreach CURRENT_ARRAY_MAP do
  %    self.%!lkey->string% = [NSMutableArray new] ;\n%
end
!generateAddOCObserverForTransients [!TRANSIENT_LIST_FOR_IMPLEMENTATION !"  "]
%    [self %!CLASS_NAME%_did_init] ;
  }
  return self ;
}

//----------------------------------------------------------------------------*

%foreach ALL_PROPERTIES_FOR_INIT_METHOD_HEADER
  before %- (instancetype) %?^%initWith%
  do ![mAttributeName stringByCapitalizingFirstCharacter]%: (%![mType ocTypeName]%) in%![mAttributeName stringByCapitalizingFirstCharacter]
  between %\n%!^%with%
  after % {\n%
end
if [INHERITED_PROPERTIES_FOR_SUPER_INIT_CALL length] == 0 then
  %  self = [super init] ;\n%
else
foreach INHERITED_PROPERTIES_FOR_SUPER_INIT_CALL
  before %  self = [super\n%
    %    initWith%
  do ![mAttributeName stringByCapitalizingFirstCharacter]%:in%![mAttributeName stringByCapitalizingFirstCharacter]
  between %\n    with%
  after %\n  ] ;\n%
end
end
%  if (self) {  
%
if SUPER_CLASS_NAME == "" then
%    macroNoteObjectAllocation ;
%end

foreach ATTRIBUTE_LIST do
  %    %!mAttributeName% = in%![mAttributeName stringByCapitalizingFirstCharacter]% ;\n%
end

!generateAddOCObserverForTransients [!TRANSIENT_LIST_FOR_IMPLEMENTATION !"  "]
%    [self %!CLASS_NAME%_did_init] ;
  }
  return self ;
}
%if SUPER_CLASS_NAME == "" then
%
//----------------------------------------------------------------------------*
//    Dealloc                                                                 *
//----------------------------------------------------------------------------*

#ifdef PM_COCOA_DEBUG
  - (void) dealloc {
    macroNoteObjectDeallocation ;
    macroSuperDealloc ;
  }
#endif
%end%
//----------------------------------------------------------------------------*
//    removeObservers                                                         *
//----------------------------------------------------------------------------*

- (void) removeObservers {
//--- Remove Transient observers
%!generateRemoveOCObserverForTransients [!TRANSIENT_LIST_FOR_IMPLEMENTATION]
if SUPER_CLASS_NAME != "" then
%  [super removeObservers] ;
%end%}

%

if [ATTRIBUTE_LIST length] > 0 then
%//----------------------------------------------------------------------------*
//    load                                                                    *
//----------------------------------------------------------------------------*

+ (void) load {
  Method original, swizzled ;
%
foreach ATTRIBUTE_LIST do
%  original = class_getInstanceMethod (self, @selector (set%![mAttributeName stringByCapitalizingFirstCharacter]%:));
  swizzled = class_getInstanceMethod (self, @selector (set%![mAttributeName stringByCapitalizingFirstCharacter]%_swizzled:));
  macroCheckMethodSwizzling (original, swizzled) ;
  method_exchangeImplementations (original, swizzled) ;
%end
%}

%
end

foreach ATTRIBUTE_LIST do
%//----------------------------------------------------------------------------*
//    '%!mAttributeName%' attribute                                            *
//----------------------------------------------------------------------------*

- (void) set%![mAttributeName stringByCapitalizingFirstCharacter]%_swizzled: (%![mType ocTypeName]%) inObject {
  if (! (%![mType equalExpression !"inObject" !"self." + mAttributeName]%)) {
    [self set%![mAttributeName stringByCapitalizingFirstCharacter]%_swizzled:inObject] ;
    [%!mAttributeName%_observers makeObjectsPerformSelector:@selector (%!["class." + CLASS_NAME + "." + mAttributeName identifierRepresentation]%_didChange)] ;
    %!generateObjectiveCTransientTriggering [!mAttributeName !CLASS_NAME !TRANSIENT_LIST_FOR_IMPLEMENTATION !"class"]
%  }
}

//----------------------------------------------------------------------------*

- (void) addObserverOf_%!mAttributeName%: (id) inObserver {
  if (nil == %!mAttributeName%_observers) {
    %!mAttributeName%_observers = [NSMutableSet new] ;
  }
  [%!mAttributeName%_observers addObject:inObserver] ;
  [inObserver performSelector:@selector (%!["class." + CLASS_NAME + "." + mAttributeName identifierRepresentation]%_didChange)] ;
}

//----------------------------------------------------------------------------*

- (void) removeObserverOf_%!mAttributeName%: (id) inObserver {
  [%!mAttributeName%_observers removeObject:inObserver] ;
  [inObserver performSelector:@selector (%!["class." + CLASS_NAME + "." + mAttributeName identifierRepresentation]%_didChange)] ;
}

%end

!generateObjectiveCTransientCacheRoutine [!CLASS_NAME !TRANSIENT_LIST_FOR_IMPLEMENTATION]%

//----------------------------------------------------------------------------*

