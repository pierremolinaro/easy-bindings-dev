//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor var g_%!preferencesName ()% : %!preferencesName ()%? = nil

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(%!preferencesName ()%) final class %!preferencesName ()% : %!preferencesName ()%_SuperClass, NSWindowDelegate {

  //····················································································································

  private final var mWindow : CanariWindow? = nil

  //····················································································································
  //    Show Preferences window
  //····················································································································

  @IBAction func showPreferencesWindowAction (_ inSender : Any?) {
    let window : CanariWindow
    if let w = self.mWindow {
      window = w
    }else{
      window = CanariWindow (
        contentRect: .zero,
        styleMask: [.closable, .resizable, .titled],
        backing: .buffered,
        defer: false
      )
      self.mWindow = window
      window.setFrameAutosaveName ("PrefsWindowSettings")
      window.title = "Preferences"
      window.isReleasedWhenClosed = false
      window.contentView = AutoLayoutWindowContentView (view: self.mPrefsMainView)
    //--- Contrôler le comportement en plein écran
      window.collectionBehavior = [.fullScreenAuxiliary, .fullScreenNone]
      let zoomButton = window.standardWindowButton (.zoomButton)
      zoomButton?.isEnabled = false
    }
    window.makeKeyAndOrderFront (nil)
  }

%
for (mViewName mView) in VIEW_GENERATION_LIST do
  %  //····················································································································\n%
  %  //    VIEW %!mViewName%\n%
  %  //····················································································································\n\n%
  ![mView generate !prefs: true !mViewName]
end
for (mInstruction) in IMPLICIT_VIEW_GENERATION_FUNCTION_LIST do (idx)
  %  //····················································································································\n%
  %  //    IMPLICIT VIEW %![idx string]%\n%
  %  //····················································································································\n\n%
%  fileprivate final func computeImplicitView_%![idx string]% () -> NSView {\n%
![mInstruction generate !prefs: true !"view" !"    "]
%    return view\n%
%  }\n\n%
end
%  //····················································································································
  //    Outlets
  //····················································································································

%
for (lkey mAutoLayoutOutletTypeName) in AUTO_LAYOUT_OUTLET_MAP do
%  var %!lkey.string% : AutoLayout%!mAutoLayoutOutletTypeName%? = nil\n%
end
%
  //····················································································································
  //    Outlets (EX)
  //····················································································································

%
for (lkey mOutletTypeName) in OUTLET_MAP do
%  @IBOutlet var %!lkey.string% : %!mOutletTypeName%? = nil\n%
end
%
  //····················································································································
  //    Multiple bindings controllers
  //····················································································································

%for (mOutletName mBindingName mBoundObjectExpression) in MULTIPLE_BINDING_GENERATION_LIST do
  %  private var mController_%!mOutletName%_%!mBindingName% : MultipleBindingController_%!mBindingName%?\n%
end
%
  //····················································································································
  //    Undo Manager
  //····················································································································

  private var mUndoManager = EBUndoManager ()

  //····················································································································

  var ebUndoManager : EBUndoManager { return self.mUndoManager }

  //····················································································································
  // The preferences window should register this object as delegate (do it in Interface Builder)
  //····················································································································

  @objc func windowWillReturnUndoManager (_ window: NSWindow) -> UndoManager? {
    return self.ebUndoManager
  }

  //····················································································································
  //    Init
  //····················································································································

  override init () {
    super.init ()
    g_%!preferencesName ()% = self ;
  //--- Read from preferences
%
for (mProperty) in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty configurationCode !true]
end
%  //--- Notify application will terminate
    NotificationCenter.default.addObserver (self,
      selector:#selector(Preferences.applicationWillTerminateAction(_:)),
      name:NSApplication.willTerminateNotification,
      object:nil
    )
  //--- Extern functions
%
  for (mExternSwiftFunctionName mCallerName) in EXTERN_SWIFT_FUNCTION_LIST do
    if mCallerName.string == "init" then
      %    self.%!mExternSwiftFunctionName.string% ()\n%
    end
  end
%  }

%
if [MAIN_XIB_DESCRIPTOR_LIST length] > 0 then
%  //····················································································································

  @IBOutlet private final var window : NSWindow?
  let OUTLET_WIDTH = 200.0
  let OUTLET_HEIGHT = 22.0

%
end
%  //····················································································································
  //    awakeFromNib
  //····················································································································

  override func awakeFromNib () {
%
![MAIN_XIB_DESCRIPTOR_LIST generateCode]
for (lkey mOutletTypeName) in OUTLET_MAP do
%    checkOutletConnection (self.%!lkey.string%, "%!lkey.string%", %!mOutletTypeName%.self, #file, #line)\n%
end
%  //--------------------------- Install bindings
%
for (mOutletName mBindingName mBoundObjectList mBindingOptionsString) in REGULAR_BINDINGS_GENERATION_LIST do
  %    %!mOutletName%?.bind_%!mBindingName% (%
  for (mBoundObjectString mKind) in mBoundObjectList
    do !mBoundObjectString
    between %, %
  end
  !mBindingOptionsString%)\n%
end
%  //--------------------------- Install multiple bindings
%
for (mOutletName mBindingName mBoundObjectExpression) in MULTIPLE_BINDING_GENERATION_LIST do
  %    do{\n%
  %      let controller = MultipleBindingController_%!mBindingName% (\n%
  %        computeFunction: %![mBoundObjectExpression expressionString]%,\n%
  %        outlet: self.%!mOutletName%\n%
  %      )\n%
  %      self.mController_%!mOutletName%_%!mBindingName% = controller\n%
  %    }\n%
end
%  //--------------------------- Array controller
%
for (mTableValueBindingOutletName mTableValueBindingControllerName) in TABLE_VALUE_BINDING_GENERATION_LIST do
  %    preferences_%!mTableValueBindingControllerName%.bind_tableView (self.%!mTableValueBindingOutletName%)\n%
end
for (mEBViewOutletName mArrayControllerControllerName) in EB_VIEW_GRAPHIC_CONTROLLER_BINDING_GENERATION_LIST do
  %    preferences_%!mArrayControllerControllerName%.bind_ebView (self.%!mEBViewOutletName%)\n%
end
%  //--------------------------- Set targets / actions
%for (mOutletName mTargetName mActionName mTargetTypeName) in TARGET_ACTION_LIST do
%    self.%!mOutletName%?.target = %!mTargetName%\n%
%    self.%!mOutletName%?.action = #selector (%!mTargetTypeName%.%!mActionName% (_:))\n%
end
%  //--------------------------- Extern functions
%
  for (mExternSwiftFunctionName mCallerName) in EXTERN_SWIFT_FUNCTION_LIST do
    if mCallerName.string == "awakeFromNib" then
      %    self.%!mExternSwiftFunctionName.string% ()\n%
    end
  end
%  }

  //····················································································································
  //    applicationWillTerminateAction
  //····················································································································

  @objc func applicationWillTerminateAction (_ : NSNotification) {
  //--------------------------- Array controller
%
for (mTableValueBindingOutletName mTableValueBindingControllerName) in TABLE_VALUE_BINDING_GENERATION_LIST do
  %    preferences_%!mTableValueBindingControllerName%.unbind_tableView (self.%!mTableValueBindingOutletName%)\n%
end
for (mEBViewOutletName mArrayControllerControllerName) in EB_VIEW_GRAPHIC_CONTROLLER_BINDING_GENERATION_LIST do
  %    preferences_%!mArrayControllerControllerName%.unbind_ebView (preferences_%!mEBViewOutletName%)\n%
end
%  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

%for (mProperty) in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty prefKeyDefinitionCode]
end
%
%
for (mProperty) in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty propertyDeclarationCode !true ![@stringset emptySet]]
end
%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

