//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBStepper
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBStepper) class EBStepper : NSStepper, EBUserClassNameProtocol {

  //····················································································································

  required init? (coder: NSCoder) {
    super.init (coder:coder)
    noteObjectAllocation (self)
  }

  //····················································································································

  override init (frame:NSRect) {
    super.init (frame:frame)
    noteObjectAllocation (self)
  }
  
  //····················································································································

  deinit {
    noteObjectDeallocation (self)
  }

  //····················································································································

  override func sendAction (inAction : Selector, to : AnyObject?) -> Bool {
    mIntValueController?.updateModel ()
    return super.sendAction (inAction, to:to)
  }

  //····················································································································
  //  value binding
  //····················································································································

  private var mIntValueController : Controller_EBStepper_value?

  func bind_value (object:EBReadWriteProperty <Int>, file:String, line:Int, sendContinously:Bool) {
    mIntValueController = Controller_EBStepper_value (object:object, outlet:self, file:file, line:line)
    self.continuous = sendContinously
  }

  func unbind_value () {
    mIntValueController?.unregister ()
    mIntValueController = nil
  }

  //····················································································································
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Controller Controller_EBStepper_value
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(Controller_EBStepper_value)
final class Controller_EBStepper_value : EBSimpleController {

  private let mOutlet: EBStepper
  private let mObject : EBReadWriteProperty <Int>

  //····················································································································

  init (object:EBReadWriteProperty <Int>, outlet : EBStepper, file : String, line : Int) {
    mObject = object
    mOutlet = outlet
    super.init (objects:[object], outlet:outlet)
    object.addEBObserver (self)
  }

  //····················································································································
  
  func unregister () {
    mObject.removeEBObserver (self)
    mOutlet.removeFromEnabledFromValueDictionary ()
  }

  //····················································································································

  override func sendUpdateEvent () {
    switch mObject.prop {
    case .noSelection :
      mOutlet.stringValue = "No selection"
      mOutlet.enableFromValue (false)
    case .multipleSelection :
      mOutlet.stringValue = "Multiple selection"
      mOutlet.enableFromValue (false)
    case .singleSelection (let propertyValue) :
      mOutlet.doubleValue = Double (propertyValue)
      mOutlet.enableFromValue (true)
    }
    mOutlet.updateEnabledState ()
  }

  //····················································································································

  func updateModel () {
    mObject.validateAndSetProp (Int (round (mOutlet.doubleValue)), windowForSheet:mOutlet.window)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
