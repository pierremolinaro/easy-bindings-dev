//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBStepper
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBStepper) class EBStepper : NSStepper, EBUserClassNameProtocol {

  //····················································································································

  required init? (coder: NSCoder) {
    super.init (coder:coder)
    noteObjectAllocation (self)
  }

  //····················································································································

  override init (frame:NSRect) {
    super.init (frame:frame)
    noteObjectAllocation (self)
  }
  
  //····················································································································

  deinit {
    noteObjectDeallocation (self)
  }

  //····················································································································

  override func sendAction (_ action : Selector?, to : Any?) -> Bool {
    self.mIntValueController?.updateModel ()
    return super.sendAction (action, to:to)
  }

  //····················································································································
  //  value binding
  //····················································································································

  private var mIntValueController : Controller_EBStepper_value?

  func bind_value (_ object:EBReadWriteProperty_Int, file:String, line:Int, sendContinously:Bool) {
    self.mIntValueController = Controller_EBStepper_value (object:object, outlet:self, file:file, line:line)
    self.isContinuous = sendContinously
  }

  func unbind_value () {
    self.mIntValueController?.unregister ()
    self.mIntValueController = nil
  }

  //····················································································································
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Controller Controller_EBStepper_value
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class Controller_EBStepper_value : EBSimpleController {

  private let mOutlet: EBStepper
  private let mObject : EBReadWriteProperty_Int

  //····················································································································

  init (object:EBReadWriteProperty_Int, outlet : EBStepper, file : String, line : Int) {
    mObject = object
    mOutlet = outlet
    super.init (observedObjects:[object])
    self.mEventCallBack = { [weak self] in self?.updateOutlet () }
  }

  //····················································································································

  private func updateOutlet () {
    switch mObject.prop {
    case .empty :
      self.mOutlet.stringValue = "—"
      self.mOutlet.enableFromValueBinding (false)
    case .multiple :
      self.mOutlet.stringValue = "—"
      self.mOutlet.enableFromValueBinding (false)
    case .single (let propertyValue) :
      self.mOutlet.doubleValue = Double (propertyValue)
      self.mOutlet.enableFromValueBinding (true)
    }
  }

  //····················································································································

  func updateModel () {
    _ = self.mObject.validateAndSetProp (Int (round (self.mOutlet.doubleValue)), windowForSheet: self.mOutlet.window)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
