//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------

@objc(EBDoubleObserverField) class EBDoubleObserverField : NSTextField, EBUserClassNameProtocol, NSTextFieldDelegate {

  //····················································································································

  required init? (coder : NSCoder) {
    super.init (coder: coder)
    self.isEditable = false
    noteObjectAllocation (self)
  }

  //····················································································································

  override init (frame : NSRect) {
    super.init (frame: frame)
    self.isEditable = false
    noteObjectAllocation (self)
  }
  
  //····················································································································

  deinit {
    noteObjectDeallocation (self)
  }

  //····················································································································
  //  $valueObserver binding
  //····················································································································

  private var mValueController : Controller_EBDoubleObserverField_valueObserver? = nil
  private var mSendContinously : Bool = false

  func bind_valueObserver (_ object:EBReadOnlyProperty_Double, file:String, line:Int, autoFormatter:Bool) {
    mValueController = Controller_EBDoubleObserverField_valueObserver (
      object:object,
      outlet:self,
      file:file,
      line:line,
      autoFormatter: autoFormatter
    )
  }

  func unbind_valueObserver () {
    mValueController?.unregister ()
    mValueController = nil
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//   Controller_EBDoubleObserverField_valueObserver
//----------------------------------------------------------------------------------------------------------------------

final class Controller_EBDoubleObserverField_valueObserver : EBSimpleController {

  private let mObject : EBReadOnlyProperty_Double
  private let mOutlet : EBDoubleObserverField

  //····················································································································

  init (object : EBReadOnlyProperty_Double,
        outlet : EBDoubleObserverField,
        file : String,
        line : Int,
        autoFormatter:Bool) {
    mObject = object
    mOutlet = outlet
    super.init (observedObjects: [object])
    if autoFormatter {
      let formatter = NumberFormatter ()
      self.mOutlet.formatter = formatter
    }else if mOutlet.formatter == nil {
      presentErrorWindow (file, line, "the outlet has no formatter")
    }else if !(self.mOutlet.formatter is NumberFormatter) {
      presentErrorWindow (file, line, "the formatter should be an NSNumberFormatter")
    }
    self.mEventCallBack = { [weak self] in self?.updateOutlet () }
  }

  //····················································································································
  
  override func unregister () {
    super.unregister ()
    self.mOutlet.target = nil
    self.mOutlet.action = nil
  }

  //····················································································································

  private func updateOutlet () {
    switch self.mObject.selection {
    case .empty :
      self.mOutlet.enableFromValueBinding (false)
      self.mOutlet.stringValue = "-"
    case .single (let v) :
      self.mOutlet.enableFromValueBinding (true)
      self.mOutlet.doubleValue = v
    case .multiple :
      self.mOutlet.enableFromValueBinding (false)
      self.mOutlet.stringValue = "-"
    }
  }

  //····················································································································
}

//----------------------------------------------------------------------------------------------------------------------
