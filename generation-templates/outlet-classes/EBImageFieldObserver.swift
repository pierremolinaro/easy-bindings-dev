//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBImageViewObserver
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBImageViewObserver) class EBImageViewObserver : NSImageView, EBUserClassName {

  //····················································································································

  required init? (coder: NSCoder) {
    super.init (coder:coder)
    noteObjectAllocation (self)
  }

  //····················································································································

  override init (frame:NSRect) {
    super.init (frame:frame)
    noteObjectAllocation (self)
  }
  
  //····················································································································

  deinit {
    noteObjectDeallocation (self)
  }

  //····················································································································
  //  value binding
  //····················································································································

  private var mValueController : Controller_EBImageFieldObserver_value?
  private var mSendContinously : Bool = false

  func bind_value (object:EBReadOnlyProperty_NSImage, file:String, line:Int, sendContinously:Bool) {
    mSendContinously = sendContinously
    mValueController = Controller_EBImageFieldObserver_value (object:object, outlet:self, file:file, line:line, sendContinously:sendContinously)
  }

  func unbind_value () {
    mValueController?.unregister ()
    mValueController = nil
  }

  //····················································································································

  override func controlTextDidChange (inNotification : NSNotification) {
    if mSendContinously {
      NSApp.sendAction (self.action, to: self.target, from: self)
    }
  }

  //····················································································································
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Controller Controller_EBImageFieldObserver_value                                                                           *
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(Controller_EBImageFieldObserver_value) final class Controller_EBImageFieldObserver_value : EBSimpleController {

  private let mOutlet: EBImageViewObserver
  private let mObject : EBReadOnlyProperty_NSImage

  //····················································································································

  init (object:EBReadOnlyProperty_NSImage, outlet : EBImageViewObserver, file : String, line : Int, sendContinously : Bool) {
    mObject = object
    mOutlet = outlet
    super.init (objects:[object], outlet:outlet)
    mOutlet.target = self
    mOutlet.action = "action:"
    if mOutlet.formatter != nil {
      presentErrorWindow (file, line:line, errorMessage:"the EBImageViewObserver outlet has a formatter")
    }
    object.addEBObserver (self)
  }

  //····················································································································
  
  func unregister () {
    mOutlet.target = nil
    mOutlet.action = nil
    mObject.removeEBObserver (self)
    mOutlet.removeFromEnabledFromValueDictionary ()
  }

  //····················································································································

  override func sendUpdateEvent () {
    switch mObject.prop {
    case .noSelection :
      mOutlet.stringValue = "No selection"
      mOutlet.image = nil
      mOutlet.enableFromValue (false)
    case .multipleSelection :
      mOutlet.stringValue = "Multiple selection"
      mOutlet.image = nil
      mOutlet.enableFromValue (false)
    case .singleSelection (let propertyValue) :
      mOutlet.image = propertyValue
      mOutlet.stringValue = ""
      mOutlet.enableFromValue (true)
    }
    mOutlet.updateEnabledState ()
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBImageView_Cell
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBImageView_Cell) class EBImageView_Cell : NSTableCellView {
  @IBOutlet private var mCellOutlet : EBImageViewObserver?
  private weak var mProperty : EBReadOnlyProperty_NSImage?

  //····················································································································

  func checkOutlet (columnName : String, file:String, line:Int) {
    if let cellOutlet : NSObject = mCellOutlet {
      if !(cellOutlet is EBImageViewObserver) {
        presentErrorWindow (file,
          line: line,
          errorMessage:"\"\(columnName)\" column view is not an instance of EBImageViewObserver"
        )
      }
    }else{
      presentErrorWindow (file,
        line: line,
        errorMessage:"\"\(columnName)\" column view mCellOutlet is nil (should be an instance of EBImageViewObserver)"
      )
    }
  }

  //····················································································································

  func configureWithProperty (inProperty : EBReadOnlyProperty_NSImage) {
    mProperty = inProperty
    switch inProperty.prop {
    case .noSelection :
      mCellOutlet?.stringValue = "No Selection"
      mCellOutlet?.enabled = false
      mCellOutlet?.target = nil
      mCellOutlet?.action = ""
    case .singleSelection (let v) :
      mCellOutlet?.image = v
      mCellOutlet?.enabled = true
      mCellOutlet?.target = self
      mCellOutlet?.action = "myAction:"
     case .multipleSelection :
      mCellOutlet?.stringValue = "Multiple Selection"
      mCellOutlet?.enabled = false
      mCellOutlet?.target = nil
      mCellOutlet?.action = ""
    }
  }

  //····················································································································
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
