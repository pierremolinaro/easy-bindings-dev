//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBTextView
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBTextView) class EBTextView : NSTextView, EBUserClassNameProtocol {

  //····················································································································

  required init? (coder: NSCoder) {
    super.init (coder:coder)
    noteObjectAllocation (self)
  }

  //····················································································································

  deinit {
    noteObjectDeallocation (self)
  }

  //····················································································································
  //  value binding
  //····················································································································

  fileprivate func updateValue (_ object : EBReadOnlyProperty_String) {
    switch object.prop {
    case .empty, .multiple :
      self.string = ""
      self.isEditable = false
    case .single (let propertyValue) :
      self.string = propertyValue
      self.isEditable = true
    }
  }

  //····················································································································

  private var mValueController : Controller_EBTextView_value? = nil

  //····················································································································

  func bind_value (_ object : EBReadWriteProperty_String, file : String, line : Int) {
    self.mValueController = Controller_EBTextView_value (object: object, outlet: self)
  }

  //····················································································································

  func unbind_value () {
    self.mValueController?.unregister ()
    self.mValueController = nil
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Controller Controller_EBTextView_value
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class Controller_EBTextView_value : EBSimpleController, NSTextViewDelegate {

  private let mOutlet : EBTextView
  private let mObject : EBReadWriteProperty_String

  //····················································································································

  init (object : EBReadWriteProperty_String, outlet : EBTextView) {
    mObject = object
    mOutlet = outlet
    super.init (observedObjects: [object], callBack: { outlet.updateValue (object) })
    outlet.delegate = self
  }

  //····················································································································
  
  override func unregister () {
    super.unregister ()
    self.mOutlet.delegate = nil
  }

  //····················································································································

  func textDidChange (_ notification: Notification) {
    _ = self.mObject.validateAndSetProp (self.mOutlet.string, windowForSheet: self.mOutlet.window)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
