//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBGroupButton) class EBGroupButton : NSButton, EBUserClassNameProtocol {
  @IBOutlet private var mMasterView : NSView?
  @IBOutlet private var mView : NSView?
  private var mWindowDefaultTitle : String = ""
  
  //···················································································································*

  required init? (coder: NSCoder) {
    super.init (coder:coder)
    noteObjectAllocation (self)
  }

  //···················································································································*

  override func awakeFromNib () {
    self.setButtonType (.OnOffButton)
    if let uwWindow = self.window {
      mWindowDefaultTitle = uwWindow.title
    }
  }

  //···················································································································*

  override init (frame:NSRect) {
    super.init (frame:frame)
    noteObjectAllocation (self)
  }
  
  //···················································································································*

  override func sendAction (_ action : Selector?, to : Any?) -> Bool {
    selectViewFromSelectedSegmentIndex ()
    mValueController?.updateModel (self)
    return super.sendAction (action, to:to)
  }

  //···················································································································*

  func selectViewFromSelectedSegmentIndex () {
    if let masterView = mMasterView {
    //--- Remove any view from master view
      let subviews : [NSView] = masterView.subviews
      if subviews.count > 0 {
        let viewToDetach = subviews [0]
        viewToDetach.removeFromSuperview ()
      }
    //--- Set other other buttons of group to Off state
      let views : [NSView] = masterView.superview!.subviews
      for v in views {
        if let button = v as? EBGroupButton, button.mMasterView == mMasterView {
          button.state = NSOffState
        }
      }
      self.state = NSOnState
    //--- Attach view
      if let unwViewToAttach = mView {
        let attachedPageHeight = unwViewToAttach.frame.size.height
        let currentHeight = masterView.frame.size.height
        var r = masterView.window!.frame
        r.size.height += attachedPageHeight - currentHeight ;
        r.origin.y -= attachedPageHeight - currentHeight ;
        masterView.addSubview (unwViewToAttach)
        unwViewToAttach.frame = masterView.bounds
        unwViewToAttach.autoresizingMask = [.ViewWidthSizable, .ViewHeightSizable]
        masterView.window!.title = self.title + " " + mWindowDefaultTitle
        masterView.window!.setFrame (r, display:true, animate:true)
      }
    }
  }

  //···················································································································*

  deinit {
    noteObjectDeallocation (self)
  }

  //···················································································································*
  //  color binding                                                                                                    *
  //···················································································································*

  private var mValueController : Controller_EBGroupButton_selectedIndex?

  func bind_selectedIndex (_ object:EBReadWriteProperty_Int, file:String, line:Int) {
  //--- Check tags
    if let masterView = mMasterView {
      var tagSet = Set<Int> ()
      let views : [NSView] = masterView.superview!.subviews
      for v in views {
        if let button = v as? EBGroupButton, button.mMasterView == mMasterView {
          let tag = button.tag
          if tagSet.contains (tag) {
            presentErrorWindow (file: #file, line:#line, errorMessage:"duplicated tag: " + String (tag))
          }else{
            tagSet.insert (tag)
          }
        }
      }
      var idx = 0
      for tag in tagSet.sort () {
        if tag != idx {
          presentErrorWindow (file: #file, line:#line, errorMessage:"missing tag: " + String (tag))
        }
        idx += 1
      }
    }
  //--- Bind
    mValueController = Controller_EBGroupButton_selectedIndex (object:object, outlet:self, file:file, line:line)
  }

  func unbind_selectedIndex () {
    mValueController?.unregister ()
    mValueController = nil
  }

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Controller_EBGroupButton_selectedIndex
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(Controller_EBGroupButton_selectedIndex)
final class Controller_EBGroupButton_selectedIndex : EBSimpleController {

  private let mObject : EBReadWriteProperty_Int
  private let mOutlet : EBGroupButton

  //···················································································································*

  init (object : EBReadWriteProperty_Int, outlet : EBGroupButton, file : String, line : Int) {
    mObject = object
    mOutlet = outlet
    super.init (observedObjects:[object], outlet:outlet)
    self.mEventCallBack = { [weak self] in self?.updateOutlet () }
  }

  //···················································································································*

  private func updateOutlet () {
    switch mObject.prop {
    case .empty :
      mOutlet.enableFromValueBinding (false)
    case .single (let v) :
      mOutlet.enableFromValueBinding (true)
      if v == mOutlet.tag {
        mOutlet.selectViewFromSelectedSegmentIndex ()
      }
    case .multiple :
      mOutlet.enableFromValueBinding (false)
    }
  }

  //···················································································································*

  func updateModel (sender : EBGroupButton) {
    mObject.validateAndSetProp (mOutlet.tag, windowForSheet:sender.window)
  }

  //···················································································································*
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
