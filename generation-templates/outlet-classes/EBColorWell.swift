//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBColorWell) class EBColorWell : NSColorWell, EBUserClassNameProtocol {

  //····················································································································

  required init? (coder : NSCoder) {
    super.init (coder:coder)
    noteObjectAllocation (self)
  }

  //····················································································································

  override init (frame : NSRect) {
    super.init (frame: frame)
    noteObjectAllocation (self)
  }
  
  //····················································································································

  deinit {
    noteObjectDeallocation (self)
  }

  //····················································································································
  //  color binding
  //····················································································································

  private var mValueController : Controller_EBColorWell_color? = nil
  var mSendContinously = false

  func bind_color (_ object : EBReadWriteProperty_NSColor, file : String, line : Int, sendContinously : Bool) {
    self.mSendContinously = sendContinously
    self.mValueController = Controller_EBColorWell_color (object:object, outlet:self, sendContinously:sendContinously)
  }

  func unbind_color () {
    self.mValueController?.unregister ()
    self.mValueController = nil
  }

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Controller_EBColorWell_color
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class Controller_EBColorWell_color : EBSimpleController {

  private let mObject : EBReadWriteProperty_NSColor
  private let mOutlet : EBColorWell
  private let mSendContinously : Bool

  //····················································································································

  init (object : EBReadWriteProperty_NSColor, outlet : EBColorWell, sendContinously : Bool) {
    mObject = object
    mOutlet = outlet
    mSendContinously = sendContinously
    super.init (observedObjects:[object])
    self.mOutlet.target = self
    self.mOutlet.action = #selector(Controller_EBColorWell_color.action(_:))
    self.mOutlet.isContinuous = true
    self.mEventCallBack = { [weak self] in self?.updateOutlet () }
  }

  //····················································································································
  
  override func unregister () {
    super.unregister ()
    self.mOutlet.target = nil
    self.mOutlet.action = nil
  }

  //····················································································································

  private func updateOutlet () {
    switch self.mObject.prop {
    case .empty :
      self.mOutlet.enableFromValueBinding (false)
      self.mOutlet.stringValue = "—"
    case .single (let v) :
      self.mOutlet.enableFromValueBinding (true)
      self.mOutlet.color = v
    case .multiple :
      self.mOutlet.enableFromValueBinding (false)
      self.mOutlet.stringValue = "—"
    }
  }

  //····················································································································

  @objc func action (_ sender : EBColorWell) {
    _ = self.mObject.validateAndSetProp (self.mOutlet.color, windowForSheet: sender.window)
  }

  //····················································································································
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
