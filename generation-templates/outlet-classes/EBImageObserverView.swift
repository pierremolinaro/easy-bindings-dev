//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBImageObserverView
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBImageObserverView) class EBImageObserverView : NSImageView, EBUserClassNameProtocol {

  //····················································································································

  required init? (coder : NSCoder) {
    super.init (coder: coder)
    noteObjectAllocation (self)
  }

  //····················································································································

  override init (frame : NSRect) {
    super.init (frame: frame)
    noteObjectAllocation (self)
  }
  
  //····················································································································

  deinit {
    noteObjectDeallocation (self)
  }

  //····················································································································
  //  image binding
  //····················································································································

  fileprivate var mImageController : Controller_EBImageView_image? = nil

  //····················································································································

  func bind_image (_ object : EBReadOnlyProperty_NSImage, file : String, line : Int) {
    self.mImageController = Controller_EBImageView_image (object: object, outlet: self)
  }

  //····················································································································

  func unbind_image () {
    self.mImageController?.unregister ()
    self.mImageController = nil
  }

  //····················································································································
  //  tooltip binding
  //····················································································································

  private var mTooltipController : Controller_EBImageView_tooltip? = nil

  //····················································································································

  func bind_tooltip (_ object:EBReadOnlyProperty_String, file:String, line:Int) {
    self.mTooltipController = Controller_EBImageView_tooltip (object:object, outlet:self)
  }

  //····················································································································

  func unbind_tooltip () {
    self.mTooltipController?.unregister ()
    self.mTooltipController = nil
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Controller Controller_EBImageView_image
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class Controller_EBImageView_image : EBSimpleController {

  private let mOutlet : EBImageObserverView
  private let mObject : EBReadOnlyProperty_NSImage

  //····················································································································

  init (object : EBReadOnlyProperty_NSImage, outlet : EBImageObserverView) {
    mObject = object
    mOutlet = outlet
    super.init (observedObjects:[object])
    self.mEventCallBack = { [weak self] in self?.updateOutlet () }
  }

  //····················································································································

  fileprivate func updateOutlet () {
    switch self.mObject.prop {
    case .empty :
      self.mOutlet.image = nil
      self.mOutlet.enableFromValueBinding (false)
    case .multiple :
      self.mOutlet.image = nil
      self.mOutlet.enableFromValueBinding (false)
    case .single (let propertyValue) :
      self.mOutlet.image = propertyValue
      self.mOutlet.enableFromValueBinding (true)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Controller Controller_EBImageView_tooltip
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(Controller_EBImageView_tooltip) final class Controller_EBImageView_tooltip : EBSimpleController {

  private let mOutlet : EBImageObserverView
  private let mObject : EBReadOnlyProperty_String

  //····················································································································

  init (object : EBReadOnlyProperty_String, outlet : EBImageObserverView) {
    mObject = object
    mOutlet = outlet
    super.init (observedObjects:[object])
    self.mEventCallBack = { [weak self] in self?.updateOutlet () }
  }

  //····················································································································

  private func updateOutlet () {
    switch self.mObject.prop {
    case .empty :
      self.mOutlet.toolTip = nil
      self.mOutlet.enableFromValueBinding (false)
    case .multiple :
      self.mOutlet.toolTip = nil
      self.mOutlet.enableFromValueBinding (false)
    case .single (let propertyValue) :
      self.mOutlet.toolTip = propertyValue
      self.mOutlet.enableFromValueBinding (true)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBImageObserverView_TableViewCell
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBImageObserverView_TableViewCell) class EBImageObserverView_TableViewCell : EBTableCellView {

  //····················································································································

  @IBOutlet var mCellOutlet : EBImageObserverView? = nil

  //····················································································································

  func checkOutlet (columnName : String, file : String, line : Int) {
    checkOutletConnection (self.mCellOutlet, "\"\(columnName)\" column view", EBImageObserverView.self, file, line)
  }

  //····················································································································

  func update () {
    self.mCellOutlet?.mImageController?.updateOutlet ()
  }

  //····················································································································
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
