//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBSwitch) class EBSwitch : NSButton, EBUserClassNameProtocol {

  //···················································································································· 

  required init? (coder : NSCoder) {
    super.init (coder:coder)
    noteObjectAllocation (self)
    self.setButtonType (.switch)
  }

  //···················································································································· 

  override init (frame : NSRect) {
    super.init (frame:frame)
    noteObjectAllocation (self)
    self.setButtonType (.switch)
  }
  
  //···················································································································· 

  deinit {
    noteObjectDeallocation (self)
  }
  
  //···················································································································· 

  override func sendAction (_ action : Selector?, to : Any?) -> Bool {
    self.mValueController?.updateModel ()
    return super.sendAction (action, to:to)
  }

  //···················································································································· 
  //  value binding
  //···················································································································· 

  private var mValueController : Controller_EBSwitch_value? = nil

  //···················································································································· 

  func bind_value (_ object : EBReadWriteProperty_Bool, file : String, line : Int) {
    self.mValueController = Controller_EBSwitch_value (object:object, outlet: self, file: file, line: line)
  }

  //···················································································································· 

  func unbind_value () {
    self.mValueController?.unregister ()
    self.mValueController = nil
  }

  //···················································································································· 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Controller Controller_EBSwitch_value
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class Controller_EBSwitch_value : EBSimpleController {

  private let mOutlet : EBSwitch
  private let mObject : EBReadWriteProperty_Bool

  //···················································································································· 

  init (object : EBReadWriteProperty_Bool, outlet : EBSwitch, file : String, line : Int) {
    mObject = object
    mOutlet = outlet
    super.init (observedObjects: [object])
    self.mEventCallBack = { [weak self] in self?.updateOutlet () }
  }

  //····················································································································

  private func updateOutlet () {
    switch mObject.prop {
    case .empty :
      self.mOutlet.state = NSControl.StateValue.off
      self.mOutlet.enableFromValueBinding (false)
    case .multiple :
      self.mOutlet.state = NSControl.StateValue.mixed
      self.mOutlet.enableFromValueBinding (false)
    case .single (let v) :
      self.mOutlet.state = v ? NSControl.StateValue.on : NSControl.StateValue.off
      self.mOutlet.enableFromValueBinding (true)
    }
  }

  //···················································································································· 

  func updateModel () {
    self.mObject.setProp (self.mOutlet.state == NSControl.StateValue.on)
  }
}


//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBSwitch_TableViewCell
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBSwitch_TableViewCell) class EBSwitch_TableViewCell : EBTableCellView {
  @IBOutlet var mCellOutlet : EBSwitch? = nil

  //····················································································································

  func checkOutlet (columnName : String, file : String, line : Int) {
    if let cellOutlet : NSObject = self.mCellOutlet {
      if !(cellOutlet is EBSwitch) {
        presentErrorWindow (file, line, "\"\(columnName)\" column view is not an instance of EBSwitch")
      }
    }else{
      presentErrorWindow (file, line, "\"\(columnName)\" column view mCellOutlet is nil (should be an instance of EBSwitch)")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
