//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
//   EBNumberFieldObserver                                                                                             *
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

@objc(EBNumberFieldObserver) class EBNumberFieldObserver : NSTextField, EBUserClassNameProtocol, NSTextFieldDelegate {

  //···················································································································*

  required init? (coder: NSCoder) {
    super.init (coder:coder)
    self.delegate = self
    self.editable = false
    self.drawsBackground = false
    self.bordered = false
    noteObjectAllocation (self)
  }

  //···················································································································*

  override init (frame:NSRect) {
    super.init (frame:frame)
    self.delegate = self
    self.editable = false
    self.drawsBackground = false
    self.bordered = false
    noteObjectAllocation (self)
  }
  
  //···················································································································*

  deinit {
    noteObjectDeallocation (self)
  }

  //···················································································································*
  //  valueObserver binding                                                                                            *
  //···················································································································*

  private var mValueController : Controller_EBNumberField_readOnlyValue?

  func bind_valueObserver (object:EBReadOnlyProperty_Int, file:String, line:Int) {
    mValueController = Controller_EBNumberField_readOnlyValue (object:object, outlet:self, file:file, line:line)
  }

  func unbind_valueObserver () {
    mValueController?.unregister ()
    mValueController = nil
  }
}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
//   Controller_EBNumberField_readOnlyValue                                                                            *
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

@objc(Controller_EBNumberField_readOnlyValue)
final class Controller_EBNumberField_readOnlyValue : EBSimpleController {

  private let mObject : EBReadOnlyProperty_Int
  private let mOutlet : EBNumberFieldObserver

  //···················································································································*

  init (object : EBReadOnlyProperty_Int, outlet : EBNumberFieldObserver, file : String, line : Int) {
    mObject = object
    mOutlet = outlet
    super.init (objects:[object], outlet:outlet)
    if mOutlet.formatter == nil {
      presentErrorWindow (file, line, "the outlet has no formatter")
    }else if !(mOutlet.formatter is NSNumberFormatter) {
      presentErrorWindow (file, line, "the formatter should be an NSNumberFormatter")
    }
    mObject.addEBObserver (self)
  }

  //···················································································································*
  
  func unregister () {
    mObject.removeEBObserver (self)
    mOutlet.removeFromEnabledFromValueDictionary ()
  }

  //···················································································································*

  override func sendUpdateEvent () {
    switch mObject.prop {
    case .noSelection :
      mOutlet.enableFromValue (false)
      mOutlet.stringValue = "No Selection"
    case .singleSelection (let v):
      mOutlet.enableFromValue (true)
      mOutlet.integerValue = v
    case .multipleSelection :
      mOutlet.enableFromValue (false)
      mOutlet.stringValue = "Multiple Selection"
    }
    mOutlet.updateEnabledState()
  }

  //···················································································································*
}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
