//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//   EBNumberFieldObserver
//----------------------------------------------------------------------------------------------------------------------

@objc(EBNumberFieldObserver) class EBNumberFieldObserver : NSTextField, EBUserClassNameProtocol, NSTextFieldDelegate {

  //····················································································································

  required init? (coder : NSCoder) {
    super.init (coder: coder)
    self.delegate = self
    self.editable = false
    noteObjectAllocation (self)
  }

  //····················································································································

  override init (frame : NSRect) {
    super.init (frame: frame)
    self.delegate = self
    self.editable = false
    noteObjectAllocation (self)
  }
  
  //····················································································································

  deinit {
    noteObjectDeallocation (self)
  }

  //····················································································································
  //  valueObserver binding
  //····················································································································

  private var mValueController : Controller_EBNumberField_readOnlyValue?

  func bind_valueObserver (_ object : EBReadOnlyProperty_Int, file : String, line : Int) {
    self.mValueController = Controller_EBNumberField_readOnlyValue (object: object, outlet: self, file: file, line: line)
  }

  func unbind_valueObserver () {
    self.mValueController?.unregister ()
    self.mValueController = nil
  }
}

//----------------------------------------------------------------------------------------------------------------------
//   Controller_EBNumberField_readOnlyValue
//----------------------------------------------------------------------------------------------------------------------

final class Controller_EBNumberField_readOnlyValue : EBSimpleController {

  private let mObject : EBReadOnlyProperty_Int
  private let mOutlet : EBNumberFieldObserver

  //····················································································································

  init (object : EBReadOnlyProperty_Int, outlet : EBNumberFieldObserver, file : String, line : Int) {
    mObject = object
    mOutlet = outlet
    super.init (observedObjects: [object], outlet: outlet)
    if self.mOutlet.formatter == nil {
      presentErrorWindow (file, line, "the outlet has no formatter")
    }else if !(self.mOutlet.formatter is NSNumberFormatter) {
      presentErrorWindow (file, line, "the formatter should be an NSNumberFormatter")
    }
  }

  //····················································································································

  override func sendUpdateEvent () {
    switch self.mObject.selection {
    case .empty :
      self.mOutlet.enableFromValueBinding (false)
      self.mOutlet.stringValue = "-"
    case .single (let v):
      self.mOutlet.enableFromValueBinding (true)
      self.mOutlet.integerValue = v
    case .multiple :
      self.mOutlet.enableFromValueBinding (false)
      self.mOutlet.stringValue = "-"
    }
  }

  //····················································································································
}

//----------------------------------------------------------------------------------------------------------------------
