//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBPopUpButton) class EBPopUpButton : NSPopUpButton, EBUserClassNameProtocol {

  //····················································································································

  required init? (coder: NSCoder) {
    super.init (coder:coder)
    noteObjectAllocation (self)
  }

  //····················································································································

  override init (frame:NSRect) {
    super.init (frame:frame)
    noteObjectAllocation (self)
  }
  
  //····················································································································

  override func sendAction (inAction : Selector, to : AnyObject?) -> Bool {
    mSelectedTagController?.updateModel (self)
    return super.sendAction (inAction, to:to)
  }

  //····················································································································

  deinit {
    noteObjectDeallocation (self)
  }

  //····················································································································
  //  selectedTag binding
  //····················································································································

  private var mSelectedTagController : Controller_EBPopUpButton_selectedTag?

  func bind_selectedTag (object:EBReadWriteProperty <Int>, file:String, line:Int) {
    mSelectedTagController = Controller_EBPopUpButton_selectedTag (object:object, outlet:self, file:file, line:line)
  }

  func unbind_selectedTag () {
    mSelectedTagController?.unregister ()
    mSelectedTagController = nil
  }

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Controller_EBPopUpButton_selectedTag
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc (Controller_EBPopUpButton_selectedTag)
final class Controller_EBPopUpButton_selectedTag : EBSimpleController {

  private let mObject : EBReadWriteProperty <Int>
  private let mOutlet : EBPopUpButton

  //····················································································································

  init (object : EBReadWriteProperty <Int>, outlet : EBPopUpButton, file : String, line : Int) {
    mObject = object
    mOutlet = outlet
    super.init (objects:[object], outlet:outlet)
    mObject.addEBObserver (self)
  }

  //····················································································································
  
  func unregister () {
    mObject.removeEBObserver (self)
    mOutlet.removeFromEnabledFromValueDictionary ()
  }

  //····················································································································

  override func sendUpdateEvent () {
    switch mObject.prop {
    case .noSelection :
      mOutlet.enableFromValue (false)
    case .singleSelection (let v) :
      mOutlet.enableFromValue (true)
      let result = mOutlet.selectItemWithTag (v)
      if !result {
        presentErrorWindow (__FILE__, line:__LINE__, errorMessage:"no item with tag: " + String (v))
      }
    case .multipleSelection :
      mOutlet.enableFromValue (false)
    }
    mOutlet.updateEnabledState ()
  }

  //····················································································································

  func updateModel (sender : EBPopUpButton) {
    mObject.validateAndSetProp (mOutlet.selectedTag (), windowForSheet:sender.window)
  }

  //····················································································································
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
