//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBTextObserverField) class EBTextObserverField : NSTextField, EBUserClassNameProtocol, NSTextFieldDelegate {

  //····················································································································

  required init? (coder : NSCoder) {
    super.init (coder: coder)
    self.delegate = self
    self.isEditable = false
    self.drawsBackground = false
    self.isBordered = false
    noteObjectAllocation (self)
  }

  //····················································································································

  override init (frame : NSRect) {
    super.init (frame: frame)
    self.delegate = self
    self.isEditable = false
    self.drawsBackground = false
    self.isBordered = false
    noteObjectAllocation (self)
  }
  
  //····················································································································

  deinit {
    noteObjectDeallocation (self)
  }

  //····················································································································
  //  valueObserver binding
  //····················································································································

  fileprivate var mValueController : Controller_EBTextObserverField_value? = nil

  //····················································································································

  func bind_valueObserver (_ object : EBReadOnlyProperty_String, file : String, line : Int) {
    self.mValueController = Controller_EBTextObserverField_value (object: object, outlet: self, file: file, line: line)
  }

  //····················································································································

  func unbind_valueObserver () {
    self.mValueController?.unregister ()
    self.mValueController = nil
    self.ebCleanUp ()
  }

  //····················································································································
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Controller Controller_EBTextObserverField_value
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class Controller_EBTextObserverField_value : EBSimpleController {

  private var mOutlet : EBTextObserverField
  private var mObject : EBReadOnlyProperty_String

  //····················································································································

  init (object : EBReadOnlyProperty_String, outlet : EBTextObserverField, file : String, line : Int) {
    mObject = object
    mOutlet = outlet
    super.init (observedObjects: [object])
    if mOutlet.formatter != nil {
      presentErrorWindow (file, line, "the EBTextObserverField outlet has a formatter")
    }
    self.mEventCallBack = { [weak self] in self?.updateOutlet () }
  }

  //····················································································································

  fileprivate func updateOutlet () {
    switch mObject.prop {
    case .empty :
      mOutlet.enableFromValueBinding (false)
      mOutlet.stringValue = "—"
    case .single (let v):
      mOutlet.enableFromValueBinding (true)
      mOutlet.stringValue = v
    case .multiple :
      mOutlet.enableFromValueBinding (false)
      mOutlet.stringValue = "—"
    }
  }

  //····················································································································
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBTextObserverField_TableViewCell
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBTextObserverField_TableViewCell) class EBTextObserverField_TableViewCell : EBTableCellView {

  //····················································································································

  @IBOutlet var mCellOutlet : EBTextObserverField? = nil

  //····················································································································

  func checkOutlet (_ columnName : String, file:String, line:Int) {
    checkOutletConnection (self.mCellOutlet, "\"\(columnName)\" column view", EBTextObserverField.self, file, line)
  }

  //····················································································································

  func update () {
    self.mCellOutlet?.mValueController?.updateOutlet ()
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
