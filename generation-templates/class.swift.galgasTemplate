//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"Class: " + CLASS_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class %!CLASS_NAME% : EBSimpleClass%
for () in ATOMIC_PROPERTY_LIST_FOR_GENERATION do
  %,\n  %!CLASS_NAME%_%![mProperty mPropertyName]
end
% {

  //····················································································································
  //  Undo manager
  //····················································································································

  var undoManager : EBUndoManager? = nil {
    didSet {
%
for () in ATOMIC_PROPERTY_LIST_FOR_GENERATION do
  %      self.%![mProperty mPropertyName]%_property.undoManager = self.undoManager\n%
end
%    }
  }

%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty declarationCode ![@stringset emptySet]]
end
%
  //····················································································································
  //    Extern delegates
  //····················································································································

%
  for () in EXTERN_DELEGATE_LIST_FOR_IMPLEMENTATION do index idx
    %  var mExternDelegate%![idx string]% : %!mExternSwiftDelegateName.string%? = nil\n%
  end
%
  //····················································································································
  //    init
  //····················································································································

  override init () {
    super.init ()
%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty configurationCode]
end
%  //--- Extern functions
%
  for () in EXTERN_FUNCTION_LIST_FOR_IMPLEMENTATION do
    if mCallerName.string == "init" then
      %    %!mExternSwiftFunctionName.string% ()\n%
    end
  end
%  //--- Extern delegates
%
  for () in EXTERN_DELEGATE_LIST_FOR_IMPLEMENTATION do index idx
    %    mExternDelegate%![idx string]% = %!mExternSwiftDelegateName.string% (object:self)\n%
  end
%  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
%
for () in ATOMIC_PROPERTY_LIST_FOR_GENERATION do
  %    createEntryForPropertyNamed (\n%
  %      "%![mProperty mPropertyName]%",\n%
  %      idx:self.%![mProperty mPropertyName]%_property.ebObjectIndex,\n%
  %      y:&y,\n%
  %      view:view,\n%
  %      observerExplorer:&self.%![mProperty mPropertyName]%_property.mObserverExplorer,\n%
  %      valueExplorer:&self.%![mProperty mPropertyName]%_property.mValueExplorer\n%
  %    )\n%
end
%  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
%for () in ATOMIC_PROPERTY_LIST_FOR_GENERATION do
    %    self.%![mProperty mPropertyName]%_property.mObserverExplorer = nil\n%
    %    self.%![mProperty mPropertyName]%_property.mValueExplorer = nil\n%
end
%    super.clearObjectExplorer ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveInto (dictionary : NSMutableDictionary) {
    super.saveInto (dictionary: dictionary)
%
for () in ATOMIC_PROPERTY_LIST_FOR_GENERATION do
    %    self.%![mProperty mPropertyName]%_property.storeIn (dictionary: dictionary, forKey: "%![mProperty mPropertyName]%")\n%
end
  for () in EXTERN_FUNCTION_LIST_FOR_IMPLEMENTATION do
    if mCallerName.string == "saveIntoDictionary" then
      %    %!mExternSwiftFunctionName.string% ()\n%
    end
  end
%  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUp (withDictionary dictionary : NSDictionary) {
    super.setUp (withDictionary: dictionary)
%
for () in ATOMIC_PROPERTY_LIST_FOR_GENERATION do
  %    self.%![mProperty mPropertyName]%_property.readFrom (dictionary: dictionary, forKey:"%![mProperty mPropertyName]%")\n%
end
for () in EXTERN_FUNCTION_LIST_FOR_IMPLEMENTATION do
  if mCallerName.string == "setUpWithDictionary" then
    %    %!mExternSwiftFunctionName.string% ()\n%
  end
end
%  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Class as transient property
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_%!CLASS_NAME% = EBReadOnlyClassProperty <%!CLASS_NAME%>
typealias EBTransientProperty_%!CLASS_NAME% = EBTransientClassProperty <%!CLASS_NAME%>

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"ReadOnlyArrayOf_" + CLASS_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_%!CLASS_NAME% : ReadOnlyAbstractArrayProperty <%!CLASS_NAME%> {

%
for () in ATOMIC_PROPERTY_LIST_FOR_GENERATION do
%  //····················································································································
  // Stored property '%![mProperty mPropertyName]%'
  //····················································································································

  private var mObserversOf_%![mProperty mPropertyName]% = EBWeakEventSet ()

  final func addEBObserverOf_%![mProperty mPropertyName]% (_ inObserver : EBEvent) {
    mObserversOf_%![mProperty mPropertyName]%.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.%![mProperty mPropertyName]%_property.addEBObserver (inObserver)
      }
    }
  }

  final func removeEBObserverOf_%![mProperty mPropertyName]% (_ inObserver : EBEvent) {
    mObserversOf_%![mProperty mPropertyName]%.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.%![mProperty mPropertyName]%_property.removeEBObserver (inObserver)
      }
    }
  }

  final func addEBObserversOf_%![mProperty mPropertyName]%_toElementsOfSet (_ inSet : Set<%!CLASS_NAME%>) {
    for managedObject in inSet {
      for observer in mObserversOf_%![mProperty mPropertyName]% {
        managedObject.%![mProperty mPropertyName]%_property.addEBObserver (observer)
      }
    }
  }

  final func removeEBObserversOf_%![mProperty mPropertyName]%_fromElementsOfSet (_ inSet : Set<%!CLASS_NAME%>) {
    for observer in mObserversOf_%![mProperty mPropertyName]% {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.%![mProperty mPropertyName]%_property.removeEBObserver (observer)
      }
    }
  }

%
end
for () in PROPERTY_LIST_FOR_GENERATION do
if mProperty is == @transientPropertyGeneration then
%  //····················································································································
  // Transient property '%![mProperty mPropertyName]%'
  //····················································································································

  private var mObserversOf_%![mProperty mPropertyName]% = EBWeakEventSet ()

  final func addEBObserverOf_%![mProperty mPropertyName]% (_ inObserver : EBEvent) {
    mObserversOf_%![mProperty mPropertyName]%.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.%![mProperty mPropertyName]%_property.addEBObserver (inObserver)
      }
    }
  }

  final func removeEBObserverOf_%![mProperty mPropertyName]% (_ inObserver : EBEvent) {
    mObserversOf_%![mProperty mPropertyName]%.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.%![mProperty mPropertyName]%_property.removeEBObserver (inObserver)
      }
    }
  }

  final func postEventTo_%![mProperty mPropertyName]% () {
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.%![mProperty mPropertyName]%_property.postEvent ()
      }
    }
  }

  final func addEBObserversOf_%![mProperty mPropertyName]%_toElementsOfSet (_ inSet : Set<%!CLASS_NAME%>) {
    for managedObject in inSet {
      for observer in mObserversOf_%![mProperty mPropertyName]% {
        managedObject.%![mProperty mPropertyName]%_property.addEBObserver (observer)
      }
    }
  }

  final func removeEBObserversOf_%![mProperty mPropertyName]%_fromElementsOfSet (_ inSet : Set<%!CLASS_NAME%>) {
    for managedObject in inSet {
      for observer in mObserversOf_%![mProperty mPropertyName]% {
        managedObject.%![mProperty mPropertyName]%_property.removeEBObserver (observer)
      }
    }
  }
  
%
end
end
%  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"TransientArrayOf_" + CLASS_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_%!CLASS_NAME% : ReadOnlyArrayOf_%!CLASS_NAME% {

  var readModelFunction : Optional<() -> EBSelection < [%!CLASS_NAME%] > > = nil
 
  private var mCachedValue : EBSelection < [%!CLASS_NAME%] >? = nil

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  override var prop : EBSelection < [%!CLASS_NAME%] > {
    if let unwrappedComputeFunction = self.readModelFunction, self.mCachedValue == nil {
      self.mCachedValue = unwrappedComputeFunction ()
    }
    if self.mCachedValue == nil {
      self.mCachedValue = .empty
    }
    return self.mCachedValue!
  }

  //····················································································································

  override func postEvent () {
    if self.mCachedValue != nil {
      self.mCachedValue = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) propagation\\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) nil\\n")
    }
  }

  //····················································································································

}

%
for () in ATOMIC_PROPERTY_LIST_FOR_GENERATION do
%//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol %!CLASS_NAME%_%![mProperty mPropertyName]% : class {
  var %![mProperty mPropertyName]% : %![[mProperty mType] swiftTypeName]% { get }
}

%
end

%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"Read write array of class: " + CLASS_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_%!CLASS_NAME% : ReadOnlyArrayOf_%!CLASS_NAME% {

  //····················································································································
  //  Undo manager
  //····················································································································

  var undoManager : EBUndoManager? = nil {
    didSet {
      for object in self.propval {
        object.undoManager = self.undoManager
      }
    }
  }

  //····················································································································
  //  Abstract methods
  //····················································································································

  func setProp (_ value:  [%!CLASS_NAME%]) { }

  //····················································································································

  var propval : [%!CLASS_NAME%] { return [] }

  //····················································································································
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"Stored array of class: " + CLASS_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_%!CLASS_NAME% : ReadWriteArrayOf_%!CLASS_NAME% {

  //····················································································································
  //  Preferences Key
  //····················································································································

  private let mPreferencesKey : String
  
  //····················································································································
  //  Init
  //····················································································································

  init (_ inPreferencesKey : String) {
    mPreferencesKey = inPreferencesKey
    super.init ()
  //--- Read from user defaults
    let ud = UserDefaults.standard
    let value : Any? = ud.object (forKey: self.mPreferencesKey)
    if let unwValue : Any = value {
      if let array : [NSDictionary] = unwValue as? [NSDictionary] {
        for dict in array {
          let object = %!CLASS_NAME% ()
          object.setUp (withDictionary: dict)
          mValue.append (object)
        }
      }
    }
  }
  
  //····················································································································

  private var mSet = Set<%!CLASS_NAME%> ()
  private var mValue = [%!CLASS_NAME%] () {
    didSet {
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        self.undoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Removed object set
        let removedSet = oldSet.subtracting (mSet)
%
for () in PROPERTY_LIST_FOR_GENERATION do
  %        removeEBObserversOf_%![mProperty mPropertyName]%_fromElementsOfSet (removedSet)\n%
end
%        for object in removedSet {
          object.undoManager = nil
        }
      //--- Added object set
        let addedSet = mSet.subtracting (oldSet)
%
for () in PROPERTY_LIST_FOR_GENERATION do
  %        addEBObserversOf_%![mProperty mPropertyName]%_toElementsOfSet (addedSet)\n%
end
%        for object in addedSet {
          object.undoManager = self.undoManager
        }
      //--- Notify observers object count did change
        postEvent ()
      //--- Store in user defaults (undo manager is nil during setup)
        if self.undoManager != nil {
          let ud = UserDefaults.standard
          var array = [NSDictionary] ()
          for object in mValue {
            let dict = NSMutableDictionary ()
            object.saveInto (dictionary: dict)
            array.append (dict)
          }
          ud.set (array, forKey: self.mPreferencesKey)
        }
      }
    }
  }

  //····················································································································

  @objc func performUndo (_ oldValue : [%!CLASS_NAME%]) {
    mValue = oldValue
  }

  //····················································································································

  override var prop : EBSelection < [%!CLASS_NAME%] > { return .single (mValue) }

  //····················································································································

  override func setProp (_ value:  [%!CLASS_NAME%]) { mValue = value }

  //····················································································································

  override var propval : [%!CLASS_NAME%] { return mValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
