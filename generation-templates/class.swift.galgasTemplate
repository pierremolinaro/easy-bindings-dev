import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"ReadOnlyArrayOf_" + CLASS_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_%!CLASS_NAME% : EBAbstractProperty {

  var prop : EBProperty <Array<%!CLASS_NAME%> > { get { return .noSelection } }

  //····················································································································

%
for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
%  var mObserversOf_%!mStoredPropertyName% = Set<EBEvent> ()

  func addEBObserverOf_%!mStoredPropertyName% (inObserver : EBEvent) {
    mObserversOf_%!mStoredPropertyName%.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.%!mStoredPropertyName%.addEBObserver (inObserver)
      }
    }
  }

  func removeEBObserverOf_%!mStoredPropertyName% (inObserver : EBEvent, postEvent inTrigger:Bool) {
    mObserversOf_%!mStoredPropertyName%.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.%!mStoredPropertyName%.removeEBObserver (inObserver, postEvent:inTrigger)
      }
    }
  }

  //····················································································································

%
end
%}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"TransientArrayOf_" + CLASS_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_%!CLASS_NAME% : ReadOnlyArrayOf_%!CLASS_NAME% {

  var computeFunction : Optional<() -> EBProperty <Array<%!CLASS_NAME%> > >
  
  var count = EBTransientProperty_Int ()

  private var prop_cache : EBProperty <Array<%!CLASS_NAME%> >? 

  //····················································································································

  override init () {
    super.init ()
    count.computeFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          return .singleSelection (v.count)
        }
      }else{
        return .noSelection
      }
    }
  }

  //····················································································································

  override var prop : EBProperty <Array<%!CLASS_NAME%> > {
    get {
      if let unwrappedComputeFunction = computeFunction where prop_cache == nil {
        prop_cache = unwrappedComputeFunction ()
      }
      if prop_cache == nil {
        prop_cache = .noSelection
      }
      return prop_cache!
    }
  }

  //····················································································································

  override func postEvent () {
    if prop_cache != nil {
      prop_cache = nil
      count.postEvent ()
      super.postEvent ()
    }
  }

  //····················································································································

}

%
for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
%//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(%!CLASS_NAME%_%!mStoredPropertyName%) protocol %!CLASS_NAME%_%!mStoredPropertyName% {
  var %!mStoredPropertyName% : EBStoredProperty_%![mType swiftTypeName]% { get }
}

%
end

%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"Array of class: " + CLASS_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBClassArray_%!CLASS_NAME% : TransientArrayOf_%!CLASS_NAME% {

  //····················································································································

  func readInPreferencesWithKey (inKey : String) {
    let ud = NSUserDefaults.standardUserDefaults ()
    let value : AnyObject? = ud.objectForKey (inKey)
    if let unwValue : AnyObject = value {
      if let array : [NSDictionary] = unwValue as? [NSDictionary] {
        for dict in array {
          let object = %!CLASS_NAME% ()
          object.setUpWithDictionary (dict)
          mValue.append (object)
        }
      }
    }
  }

  //····················································································································

  func storeInPreferencesWithKey (inKey : String) {
    let ud = NSUserDefaults.standardUserDefaults ()
    var array = [NSDictionary] ()
    for object in mValue {
      let dict = NSMutableDictionary ()
      object.saveIntoDictionary (dict)
      array.append (dict)
    }
    ud.setObject (array, forKey:inKey)
  }

  //····················································································································

  private var mSet = Set<%!CLASS_NAME%> ()
  private var mValue = Array<%!CLASS_NAME%> () {
    didSet {
      if oldValue != mValue {
        mSet = Set (mValue)
      //--- Update explorer
       // if explorer != nil {
       //   owner?.updateManagedObjectToManyRelationshipDisplay (mValue, popUpButton:explorer!)
       // }
      //--- Removed object set
        var removedObjectSet : Set<%!CLASS_NAME%> = Set (oldValue)
        removedObjectSet.subtractInPlace (mValue)
        for managedObject : %!CLASS_NAME% in removedObjectSet {
%
for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %          for observer in mObserversOf_%!mStoredPropertyName% {\n%
  %            managedObject.%!mStoredPropertyName%.removeEBObserver (observer, postEvent:true)\n%
  %          }\n%
end
%        }
      //--- Added object set
        var addedObjectSet : Set<%!CLASS_NAME%> = Set (mValue)
        addedObjectSet.subtractInPlace (oldValue)
        for managedObject : %!CLASS_NAME% in addedObjectSet {
%
for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %          for observer in mObserversOf_%!mStoredPropertyName% {\n%
  %            managedObject.%!mStoredPropertyName%.addEBObserver (observer)\n%
  %          }\n%
end
%        }
      //--- Notify observers object count did change
        postEvent ()
        if oldValue.count != mValue.count {
          count.postEvent ()
        }
      }
    }
  }

  //····················································································································

  override var prop : EBProperty <Array<%!CLASS_NAME%> > {
    get {
      return .singleSelection (mValue ?? Array<%!CLASS_NAME%> ())
    }
  }

  //····················································································································

  func setProp (inValue :  Array<%!CLASS_NAME%>) { mValue = inValue }

  //····················································································································

  var propval : Array<%!CLASS_NAME%> { get { return mValue ?? Array<%!CLASS_NAME%> () } }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"Class: " + CLASS_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(%!CLASS_NAME%) class %!CLASS_NAME% : EBSimpleClass%
for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %, %!CLASS_NAME%_%!mStoredPropertyName
end
% {

  //····················································································································
  //    Properties
  //····················································································································

%
for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %  var %!mStoredPropertyName% = EBStoredProperty_%![mType swiftTypeName]% (%!mDefaultValueInSwift%)\n%
  %  var %!mStoredPropertyName%_keyCodingValue : %![mType swiftTypeName]% {\n%
  %    get {\n%
  %      switch %!mStoredPropertyName%.prop {\n%
  %      case .noSelection, .multipleSelection :\n%
  %        return %![mType defaultSwiftTypeValueAsString]%\n%
  %      case .singleSelection (let v) :\n%
  %        return v\n%
  %      }\n%
  %    }\n%
  %  }\n\n%
end
%  //····················································································································
  //    Transient properties
  //····················································································································

%

for () in TRANSIENT_LIST_FOR_IMPLEMENTATION do
%  var %!mTransientName% = EBTransientProperty_%![mTransientType swiftTypeName]% ()\n%
end

%
  //····················································································································
  //    init
  //····················································································································

  override init () {
    super.init ()
%
for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  if mNeedsValidation then
%    %!mStoredPropertyName%.setValidationFunction (self.validate_%!mStoredPropertyName%)\n%
  end
end
%  //--- Install compute functions for transients
%
for () in TRANSIENT_LIST_FOR_IMPLEMENTATION do
  if [mDependencyList needs_unwSelf] then
    %    %!mTransientName%.computeFunction = { [weak self] in\n%
    %      if let unwSelf = self {\n%
    ![mDependencyList transientComputeFunctionCall !CLASS_NAME !mTransientName]
    %      }else{\n%
    %        return .noSelection\n%
    %      }\n%
    %    }\n%
  else
    %    %!mTransientName%.computeFunction = {\n%
    ![mDependencyList transientComputeFunctionCall !CLASS_NAME !mTransientName]
    %    }\n%
  end
end
%  //--- Install property observers for transients
%
for () in TRANSIENT_LIST_FOR_IMPLEMENTATION do
  for () in mDependencyList do
    %    %![mDependency generateAddObserverCall]% (%!mTransientName%, postEvent:true)\n%
  end
end
%  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (inout y : CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
%for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %    createEntryForPropertyNamed (\n%
  %      "%!mStoredPropertyName%",\n%
  %      idx:%!mStoredPropertyName%.mExplorerObjectIndex,\n%
  %      y:&y,\n%
  %      view:view,\n%
  %      observerExplorer:&%!mStoredPropertyName%.mObserverExplorer,\n%
  %      valueExplorer:&%!mStoredPropertyName%.mValueExplorer\n%
  %    )\n%
end
%  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
%for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
%    %!mStoredPropertyName%.mObserverExplorer = nil\n%
%    %!mStoredPropertyName%.mValueExplorer = nil\n%
end
%    super.clearObjectExplorer ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
%for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
%    %!mStoredPropertyName%.storeInDictionary (ioDictionary, forKey: "%!mStoredPropertyName%")\n%
end
%  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (inDictionary : NSDictionary) {
    super.setUpWithDictionary (inDictionary)
%for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
%    %!mStoredPropertyName%.readFromDictionary (inDictionary, forKey:"%!mStoredPropertyName%")\n%
end
%  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

