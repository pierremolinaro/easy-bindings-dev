//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"ReadOnlyArrayOf_" + CLASS_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_%!CLASS_NAME% : ReadOnlyAbstractArrayProperty <%!CLASS_NAME%> {

%
for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
%  //····················································································································
  // Stored property '%!mStoredPropertyName%'
  //····················································································································

  private var mObserversOf_%!mStoredPropertyName% = EBWeakEventSet ()

  final func addEBObserverOf_%!mStoredPropertyName% (_ inObserver : EBEvent) {
    mObserversOf_%!mStoredPropertyName%.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.%!mStoredPropertyName%.addEBObserver (inObserver)
      }
    }
  }

  final func removeEBObserverOf_%!mStoredPropertyName% (_ inObserver : EBEvent) {
    mObserversOf_%!mStoredPropertyName%.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.%!mStoredPropertyName%.removeEBObserver (inObserver)
      }
    }
  }

  final func addEBObserversOf_%!mStoredPropertyName%_toElementsOfSet (_ inSet : Set<%!CLASS_NAME%>) {
    for managedObject in inSet {
      for observer in mObserversOf_%!mStoredPropertyName% {
        managedObject.%!mStoredPropertyName%.addEBObserver (observer)
      }
    }
  }

  final func removeEBObserversOf_%!mStoredPropertyName%_fromElementsOfSet (_ inSet : Set<%!CLASS_NAME%>) {
    for managedObject in inSet {
      for observer in mObserversOf_%!mStoredPropertyName% {
        managedObject.%!mStoredPropertyName%.removeEBObserver (observer)
      }
    }
  }

%
end
for () in TRANSIENT_LIST_FOR_IMPLEMENTATION do
%  //····················································································································
  // Transient property '%!mTransientName%'
  //····················································································································

  private var mObserversOf_%!mTransientName% = EBWeakEventSet ()

  final func addEBObserverOf_%!mTransientName% (_ inObserver : EBEvent) {
    mObserversOf_%!mTransientName%.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.%!mTransientName%.addEBObserver (inObserver)
      }
    }
  }

  final func removeEBObserverOf_%!mTransientName% (_ inObserver : EBEvent) {
    mObserversOf_%!mTransientName%.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.%!mTransientName%.removeEBObserver (inObserver)
      }
    }
  }

  final func postEventTo_%!mTransientName% () {
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.%!mTransientName%.postEvent ()
      }
    }
  }

  final func addEBObserversOf_%!mTransientName%_toElementsOfSet (inSet : Set<%!CLASS_NAME%>) {
    for managedObject in inSet {
      for observer in mObserversOf_%!mTransientName% {
        managedObject.%!mTransientName%.addEBObserver (observer)
      }
    }
  }

  final func removeEBObserversOf_%!mTransientName%_fromElementsOfSet (inSet : Set<%!CLASS_NAME%>) {
    for managedObject in inSet {
      for observer in mObserversOf_%!mTransientName% {
        managedObject.%!mTransientName%.removeEBObserver (observer)
      }
    }
  }
  
%
end
%  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"TransientArrayOf_" + CLASS_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_%!CLASS_NAME% : ReadOnlyArrayOf_%!CLASS_NAME% {

  var readModelFunction : Optional<() -> EBProperty < [%!CLASS_NAME%] > >
 
  private var prop_cache : EBProperty < [%!CLASS_NAME%] >? 

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  override var prop : EBProperty < [%!CLASS_NAME%] > {
    get {
      if let unwrappedComputeFunction = readModelFunction, prop_cache == nil {
        prop_cache = unwrappedComputeFunction ()
      }
      if prop_cache == nil {
        prop_cache = .noSelection
      }
      return prop_cache!
    }
  }

  //····················································································································

  override func postEvent () {
    if prop_cache != nil {
      prop_cache = nil
      super.postEvent ()
    }
  }

  //····················································································································

}

%
for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
%//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol %!CLASS_NAME%_%!mStoredPropertyName% : class {
  var %!mStoredPropertyName% : EBStoredProperty_%![mType swiftTypeName]% { get }
}

%
end

%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"Array of class: " + CLASS_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBClassArray_%!CLASS_NAME% : ReadOnlyArrayOf_%!CLASS_NAME% {

  //····················································································································

  func readInPreferencesWithKey (inKey : String) {
    let ud = UserDefaults.standard
    let value : Any? = ud.object (forKey: inKey)
    if let unwValue : Any = value {
      if let array : [NSDictionary] = unwValue as? [NSDictionary] {
        for dict in array {
          let object = %!CLASS_NAME% ()
          object.setUp (withDictionary: dict)
          mValue.append (object)
        }
      }
    }
  }

  //····················································································································

  func storeInPreferencesWithKey (inKey : String) {
    let ud = UserDefaults.standard
    var array = [NSDictionary] ()
    for object in mValue {
      let dict = NSMutableDictionary ()
      object.saveInto (dictionary: dict)
      array.append (dict)
    }
    ud.set (array, forKey:inKey)
  }

  //····················································································································

  private var mSet = Set<%!CLASS_NAME%> ()
  private var mValue = [%!CLASS_NAME%] () {
    didSet {
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Update explorer
       // if explorer != nil {
       //   owner?.updateManagedObjectToManyRelationshipDisplay (mValue, popUpButton:explorer!)
       // }
      //--- Removed object set
        let removedSet = oldSet.subtracting (mSet)
%
for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %        removeEBObserversOf_%!mStoredPropertyName%_fromElementsOfSet (removedSet)\n%
end
%      //--- Added object set
        let addedSet = mSet.subtracting (oldSet)
%
for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %        addEBObserversOf_%!mStoredPropertyName%_toElementsOfSet (addedSet)\n%
end
%      //--- Notify observers object count did change
        postEvent ()
/*        if oldValue.count != mValue.count {
          count.postEvent ()
        } */
      }
    }
  }

  //····················································································································

  override var prop : EBProperty < [%!CLASS_NAME%] > {
    get {
      return .singleSelection (mValue)
    }
  }

  //····················································································································

  func setProp (value:  [%!CLASS_NAME%]) { mValue = value }

  //····················································································································

  var propval : [%!CLASS_NAME%] { get { return mValue } }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"Class: " + CLASS_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class %!CLASS_NAME% : EBSimpleClass%
for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %, %!CLASS_NAME%_%!mStoredPropertyName
end
%
 {

  //····················································································································
  //    Properties
  //····················································································································

%
for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %  var %!mStoredPropertyName% = EBStoredProperty_%![mType swiftTypeName]% (%!mDefaultValueInSwift%)\n\n%
between
%  //····················································································································\n\n%
end
%  //····················································································································
  //    Transient properties
  //····················································································································

%

for () in TRANSIENT_LIST_FOR_IMPLEMENTATION do
%  var %!mTransientName% = EBTransientProperty_%![mTransientType swiftTypeName]% ()\n%
end

%
  //····················································································································
  //    Extern delegates
  //····················································································································

%
  for () in EXTERN_DELEGATE_LIST_FOR_IMPLEMENTATION do index idx
    %  var mExternDelegate%![idx string]% : %!mExternSwiftDelegateName.string%? = nil\n%
  end
%
  //····················································································································
  //    init
  //····················································································································

  override init () {
    super.init ()
%
for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  if mNeedsValidation then
%    %!mStoredPropertyName%.setValidationFunction (self.validate_%!mStoredPropertyName%)\n%
  end
end
%  //--- Install compute functions for transients
%
for () in TRANSIENT_LIST_FOR_IMPLEMENTATION do
  if [mDependencyList needs_unwSelf] then
    %    %!mTransientName%.readModelFunction = { [weak self] in\n%
    %      if let unwSelf = self {\n%
    ![mDependencyList transientComputeFunctionCall !CLASS_NAME !mTransientName]
    %      }else{\n%
    %        return .noSelection\n%
    %      }\n%
    %    }\n%
  else
    %    %!mTransientName%.readModelFunction = {\n%
    ![mDependencyList transientComputeFunctionCall !CLASS_NAME !mTransientName]
    %    }\n%
  end
end
%  //--- Install property observers for transients
%
for () in TRANSIENT_LIST_FOR_IMPLEMENTATION do
  for () in mDependencyList do
    %    %![mDependency generateAddObserverCall]% (%!mTransientName%)\n%
  end
end
%  //--- Extern functions
%
  for () in EXTERN_FUNCTION_LIST_FOR_IMPLEMENTATION do
    if mCallerName.string == "init" then
      %    %!mExternSwiftFunctionName.string% ()\n%
    end
  end
%  //--- Extern delegates
%
  for () in EXTERN_DELEGATE_LIST_FOR_IMPLEMENTATION do index idx
    %    mExternDelegate%![idx string]% = %!mExternSwiftDelegateName.string% (object:self)\n%
  end
%  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
%
for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %    createEntryForPropertyNamed (\n%
  %      "%!mStoredPropertyName%",\n%
  %      idx:%!mStoredPropertyName%.mEasyBindingsObjectIndex,\n%
  %      y:&y,\n%
  %      view:view,\n%
  %      observerExplorer:&%!mStoredPropertyName%.mObserverExplorer,\n%
  %      valueExplorer:&%!mStoredPropertyName%.mValueExplorer\n%
  %    )\n%
end
%  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
%for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
%    %!mStoredPropertyName%.mObserverExplorer = nil\n%
%    %!mStoredPropertyName%.mValueExplorer = nil\n%
end
%    super.clearObjectExplorer ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveInto (dictionary : NSMutableDictionary) {
    super.saveInto (dictionary: dictionary)
%for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
%    %!mStoredPropertyName%.storeIn (dictionary: dictionary, forKey: "%!mStoredPropertyName%")\n%
end
  for () in EXTERN_FUNCTION_LIST_FOR_IMPLEMENTATION do
    if mCallerName.string == "saveIntoDictionary" then
      %    %!mExternSwiftFunctionName.string% ()\n%
    end
  end
%  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUp (withDictionary dictionary : NSDictionary) {
    super.setUp (withDictionary: dictionary)
%for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
%    %!mStoredPropertyName%.readFrom (dictionary: dictionary, forKey:"%!mStoredPropertyName%")\n%
end
  for () in EXTERN_FUNCTION_LIST_FOR_IMPLEMENTATION do
    if mCallerName.string == "setUpWithDictionary" then
      %    %!mExternSwiftFunctionName.string% ()\n%
    end
  end
%  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Class as transient property
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_%!CLASS_NAME% = EBReadOnlyClassProperty <%!CLASS_NAME%>
typealias EBTransientProperty_%!CLASS_NAME% = EBTransientClassProperty <%!CLASS_NAME%>

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBReadWriteProperty_%!CLASS_NAME% (abstract class)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

/* class EBReadWriteProperty_%!CLASS_NAME% : EBReadOnlyProperty_%!CLASS_NAME% {
  func setProp (value: %!CLASS_NAME%) { } // Abstract method
  func validateAndSetProp (_ candidateValue : %!CLASS_NAME%, windowForSheet inWindow:NSWindow?) -> Bool {
    return false
  } // Abstract method
} */

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBPropertyProxy_%!CLASS_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

/* class EBPropertyProxy_%!CLASS_NAME% : EBReadWriteProperty_%!CLASS_NAME% {
  var readModelFunction : Optional < () -> EBProperty <%!CLASS_NAME%> >
  var writeModelFunction : Optional < (%!CLASS_NAME%) -> Void >
  var validateAndWriteModelFunction : Optional < (%!CLASS_NAME%, NSWindow?) -> Bool >
  
  private var prop_cache : EBProperty <%!CLASS_NAME%>?

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  var mValueExplorer : NSTextField? {
    didSet {
      mValueExplorer?.stringValue = "%!EXPLORER_ACCESS%"
    }
  }

  //····················································································································

  override func postEvent() {
    if prop_cache != nil {
      prop_cache = nil
      super.postEvent()
    }
  }

  //····················································································································

  override var prop : EBProperty <%!CLASS_NAME%> {
    get {
      if let unReadModelFunction = readModelFunction, prop_cache == nil {
        prop_cache = unReadModelFunction ()
      }
      if prop_cache == nil {
        prop_cache = .noSelection
      }
      return prop_cache!
    }
  }

  //····················································································································
  
  override func setProp (value: %!CLASS_NAME%) {
    if let unWriteModelFunction = writeModelFunction {
      unWriteModelFunction (value)
    }
  }

  //····················································································································

  override func validateAndSetProp (_ candidateValue : %!CLASS_NAME%,
                                    windowForSheet inWindow:NSWindow?) -> Bool {
    var result = false
    if let unwValidateAndWriteModelFunction = validateAndWriteModelFunction {
      result = unwValidateAndWriteModelFunction (candidateValue, inWindow)
    }
    return result
  }
  
  //····················································································································
  
} */

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBStoredProperty_%!CLASS_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

/* final class EBStoredProperty_%!CLASS_NAME% : EBReadWriteProperty_%!CLASS_NAME% {

  //····················································································································

  init (_ inValue : %!CLASS_NAME%) {
    mValue = inValue
    super.init ()
  }

  //····················································································································

  var mValueExplorer : NSTextField? {
    didSet {
      mValueExplorer?.stringValue = "%!EXPLORER_ACCESS%"
    }
  }

  //····················································································································

  private var mValue : %!CLASS_NAME% {
    didSet {
      if mValue != oldValue {
        mValueExplorer?.stringValue = "%!EXPLORER_ACCESS%"
        postEvent ()
      }
    }
  }

  //····················································································································

  override var prop : EBProperty <%!CLASS_NAME%> { get { return .singleSelection (mValue) } }

  var propval : %!CLASS_NAME% { get { return mValue } }

  override func setProp (value: %!CLASS_NAME%) { mValue = value }

  //····················································································································

} */

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

