//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"CustomObjectController_" + OWNER_NAME + "_" + CUSTOM_OBJECT_CONTROLLER_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(CustomObjectController_%!OWNER_NAME%_%!CUSTOM_OBJECT_CONTROLLER_NAME%)
class CustomObjectController_%!OWNER_NAME%_%!CUSTOM_OBJECT_CONTROLLER_NAME% : EBObject {
 
  var mObjectObserver = EBObserver ()

  //····················································································································

  var mSelectedObject : FontCharacterEntity? {
    didSet {
      if mSelectedObject != oldValue {\n%
for () in SELECTION_OBSERVABLE_PROPERTY_MAP do
  if not [mType isEntityType] then
    %        oldValue?.%!lkey.string%.removeEBObserver (mObjectObserver)\n%
    %        mSelectedObject?.%!lkey.string%.addEBObserver (mObjectObserver)\n%
    %        oldValue?.%!lkey.string%.removeEBObserver (%!lkey.string%)\n%
    %        mSelectedObject?.%!lkey.string%.addEBObserver (%!lkey.string%)\n%
    %        %!lkey.string%.postEvent ()\n%
  end
end
%      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
%for () in SELECTION_OBSERVABLE_PROPERTY_MAP do
if not [mType isEntityType] then
%    bind_property_%!lkey.string% ()\n%
end
end%  }
  
  //····················································································································
  //   OBJECT OBSERVABLE PROPERTIES
  //····················································································································

%
for () in SELECTION_OBSERVABLE_PROPERTY_MAP do
  if not [mType isEntityType] then
    %  var %!lkey.string% = EBPropertyProxy_%![mType swiftTypeName]% () \n%
  end
end
%
  //····················································································································
  //    Explorer
  //····················································································································

  private var mValueExplorer : NSButton?
  private var mExplorerWindow : NSWindow?

  //····················································································································

  final func addExplorer (name : String, inout y : CGFloat, view : NSView) {
    let font = NSFont.boldSystemFontOfSize (NSFont.smallSystemFontSize ())
    let tf = NSTextField (frame:secondColumn (y))
    tf.enabled = true
    tf.editable = false
    tf.stringValue = name
    tf.font = font
    view.addSubview (tf)
    let valueExplorer = NSButton (frame:thirdColumn (y))
    valueExplorer.font = font
    valueExplorer.title = explorerIndexString (mExplorerObjectIndex) + className
    valueExplorer.target = self
    valueExplorer.action = "showObjectWindowFromExplorerButton:"
    view.addSubview (valueExplorer)
    mValueExplorer = valueExplorer
    y += EXPLORER_ROW_HEIGHT
  }
  
  //····················································································································

  func buildExplorerWindow () {
  //-------------------------------------------------- Create Window
    let r = NSRect (x:20.0, y:20.0, width:10.0, height:10.0)
    mExplorerWindow = NSWindow (
      contentRect:r,
      styleMask:NSTitledWindowMask | NSClosableWindowMask,
      backing:NSBackingStoreType.Buffered,
      `defer`:true,
      screen:nil
    )
  //-------------------------------------------------- Adding properties
    let view = NSView (frame:r)
    var y : CGFloat = 0.0
%for () in SELECTION_OBSERVABLE_PROPERTY_MAP do
if not [mType isEntityType] then
  %    createEntryForPropertyNamed (\n%
  %      "%!lkey.string%",\n%
  %      idx:%!lkey.string%.mExplorerObjectIndex,\n%
  %      y:&y,\n%
  %      view:view,\n%
  %      observerExplorer:&%!lkey.string%.mObserverExplorer,\n%
  %      valueExplorer:&%!lkey.string%.mValueExplorer\n%
  %    )\n%
end
end
%  //-------------------------------------------------- Finish Window construction
  //--- Resize View
    let viewFrame = NSRect (x:0.0, y:0.0, width:EXPLORER_ROW_WIDTH, height:y)
    view.frame = viewFrame
  //--- Set content size
    mExplorerWindow?.setContentSize (NSSize (width:EXPLORER_ROW_WIDTH + 16.0, height:fmin (600.0, y)))
  //--- Set close button as 'remove window' button
    let closeButton : NSButton? = mExplorerWindow?.standardWindowButton (NSWindowButton.CloseButton)
    closeButton!.target = self
    closeButton!.action = "deleteSelectionControllerWindowAction:"
  //--- Set window title
    let windowTitle = explorerIndexString (mExplorerObjectIndex) + className
    mExplorerWindow!.title = windowTitle
  //--- Add Scroll view
    let frame = NSRect (x:0.0, y:0.0, width:EXPLORER_ROW_WIDTH, height:y)
    let sw = NSScrollView (frame:frame)
    sw.hasVerticalScroller = true
    sw.documentView = view
    mExplorerWindow!.contentView = sw
  }

  //····················································································································
  //   showObjectWindowFromExplorerButton
  //····················································································································

  func showObjectWindowFromExplorerButton (_ : AnyObject?) {
    if mExplorerWindow == nil {
      buildExplorerWindow ()
    }
    mExplorerWindow?.makeKeyAndOrderFront(nil)
  }
  
  //····················································································································
  //   deleteSelectionControllerWindowAction
  //····················································································································

  func deleteSelectionControllerWindowAction (_ : AnyObject) {
    clearObjectExplorer ()
  }

  //····················································································································
  //   clearObjectExplorer
  //····················································································································

  func clearObjectExplorer () {
    let closeButton = mExplorerWindow?.standardWindowButton (NSWindowButton.CloseButton)
    closeButton!.target = nil
    mExplorerWindow?.orderOut (nil)
    mExplorerWindow = nil
  }

%for () in SELECTION_OBSERVABLE_PROPERTY_MAP do
  if not [mType isEntityType] then
    %  //···················································································································*\n\n% 
    %  private final func bind_property_%!lkey.string% () {\n%
    %    %!lkey.string%.readModelFunction = { [weak self] in\n%
    %      if let model = self?.mSelectedObject {\n%
    %        return model.%!lkey.string%.prop\n%
    %      }else{\n%
    %        return .noSelection\n%
    %      }\n%
    %    }\n%
    if [mKind isStored] then
      %    %!lkey.string%.writeModelFunction = { [weak self] (inValue : %![mType swiftTypeName]%) in\n%
      %      self?.mSelectedObject?.%!lkey.string%.setProp (inValue)\n%
      %    }\n%
      %    %!lkey.string%.validateAndWriteModelFunction = { [weak self] (candidateValue : %![mType swiftTypeName]%, windowForSheet : NSWindow?) in\n%
      %      self?.mSelectedObject?.%!lkey.string%.validateAndSetProp (candidateValue, windowForSheet:windowForSheet) ?? false\n%
      %    }\n%
    end
    %  }\n\n%
  end
end%

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

