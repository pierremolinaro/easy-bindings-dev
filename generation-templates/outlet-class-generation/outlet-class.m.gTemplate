
#import "PMAllocationDebug.h"
#import "debugMacros.h"
#import "%!OUTLET_CLASS_NAME%.h"

//---------------------------------------------------------------------------*

@implementation %!OUTLET_CLASS_NAME%

//---------------------------------------------------------------------------*

#pragma mark awakeFromNib

//---------------------------------------------------------------------------*
//                                                                           *
//                               awakeFromNib                                *
//                                                                           *
//---------------------------------------------------------------------------*

- (void) awakeFromNib {
  #ifdef EASY_BINDINGS_DEBUG
    NSLog (@"  \%s \%p", __PRETTY_FUNCTION__, self) ;
  #endif
  macroNoteObjectAllocation (self) ;
  [self %!OUTLET_CLASS_NAME%_awakeFromNib] ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                           dealloc                                         *
//                                                                           *
//---------------------------------------------------------------------------*

#ifdef PM_COCOA_DEBUG
  - (void) dealloc {
    macroNoteObjectDeallocation (self) ;
  }
#endif

//---------------------------------------------------------------------------*

#pragma mark General Binding Methods

%if [BINDING_MAP count] > 0 then
%//---------------------------------------------------------------------------*
//                                                                           *
//                                initialize                                 *
//                                                                           *
//---------------------------------------------------------------------------*

+ (void) initialize {
%foreach BINDING_MAP do
%  [%!OUTLET_CLASS_NAME% exposeBinding:@%![lkey utf8Representation]%] ;
%end foreach%
}

%end if

if [BINDING_MAP count] > 0 then
%//---------------------------------------------------------------------------*
//                                                                           *
//                    bind:toObject:withKeyPath:options:                     *
//                                                                           *
//---------------------------------------------------------------------------*

- (void) bind:(NSString *) inBindingName
         toObject:(id) inObservableObject
         withKeyPath:(NSString *) inObservableKeyPath
         options:(NSDictionary *) inOptions {
 %foreach BINDING_MAP do
% if ([inBindingName isEqualToString:@%![lkey utf8Representation]%]) {
    mBoundObjectFor_%!lkey->string% = inObservableObject ;
    mKeyPathFor_%!lkey->string% = inObservableKeyPath.copy ; 
    [inObservableObject
      addObserver:self
      forKeyPath:inObservableKeyPath
      options:0
      context:nil
    ] ;
    id value = [inObservableObject valueForKeyPath:inObservableKeyPath] ;
    [self valueFor_%!lkey->string%_didChange:value] ;
%
  between %}else%
end foreach
%  }else{
    [super
      bind:inBindingName
      toObject:inObservableObject
      withKeyPath:inObservableKeyPath
      options:inOptions
    ] ;
  }
}

%end if

if [BINDING_MAP count] > 0 then
%//---------------------------------------------------------------------------*
//                                                                           *
//                                 unbind:                                   *
//                                                                           *
//---------------------------------------------------------------------------*

- (void) unbind:(NSString *) inBindingName {
 %foreach BINDING_MAP do
% if ([inBindingName isEqualToString:@%![lkey utf8Representation]%]) {
    [mBoundObjectFor_%!lkey->string% removeObserver:self forKeyPath:mKeyPathFor_%!lkey->string%] ;
    mBoundObjectFor_%!lkey->string% = nil ; 
    mKeyPathFor_%!lkey->string% = nil ; 
%
  between %}else%
end foreach
%  }else{
    [super unbind:inBindingName] ;
  }
}

%end if


if [BINDING_MAP count] > 0 then
%//---------------------------------------------------------------------------*
//                                                                           *
//             observeValueForKeyPath:ofObject:change:context:               *
//                                                                           *
//---------------------------------------------------------------------------*

- (void) observeValueForKeyPath:(NSString *) inKeyPath
         ofObject:(id) inObject
         change:(NSDictionary *) inChangeDictionary
         context:(void *) inContext {
 %foreach BINDING_MAP do
% if ((mBoundObjectFor_%!lkey->string% == inObject) && [inKeyPath isEqualToString:mKeyPathFor_%!lkey->string%]) {
    id value = [inObject valueForKeyPath:inKeyPath] ;
    [self valueFor_%!lkey->string%_didChange:value] ;
%
  between %}else%
end foreach
%  }else{
    [super
      observeValueForKeyPath:inKeyPath
      ofObject:inObject
      change:inChangeDictionary
      context:inContext
    ] ;
  }
}

%end if

%//---------------------------------------------------------------------------*

#pragma mark Specific Binding Methods

%foreach BINDING_MAP do%
//---------------------------------------------------------------------------*
//                                                                           *
//                  Method for '%!lkey->string%' binding                   *
//                                                                           *
//---------------------------------------------------------------------------*

- (void) valueFor_%!lkey->string%_didChange: (id) inValue {
  if (NSIsControllerMarker (inValue)) {
    id dph = [%!OUTLET_CLASS_NAME% defaultPlaceholderForMarker:inValue withBinding:@"%!lkey->string%"] ;
    [self valueFor_%!lkey->string%_didChange_marker:inValue defaultPlaceholder:dph] ;
  }else if (inValue == nil) {
    [self valueFor_%!lkey->string%_didChange_nil] ;
%foreach mAcceptableTypeList do
%  }else if ([inValue isKindOfClass:[%![mType ocClassName]% class]]) {
    [self valueFor_%!lkey->string%_didChange_%![mType ocClassName]%:inValue] ;
%end foreach%  }
}

//---------------------------------------------------------------------------*

- (void) setValueFor_%!lkey->string%_Binding: (id) inValue {
  [mBoundObjectFor_%!lkey->string% set_value:inValue forKeyPath:mKeyPathFor_%!lkey->string%] ;
}

%end foreach%
//---------------------------------------------------------------------------*

