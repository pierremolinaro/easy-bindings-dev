#import "easy-bindings-utilities.h"
#import "PMAllocationDebug.h"
#import "PMTransientDependancyManager.h"
#import "%!CLASS_NAME%.h"
%
if [TRANSIENT_LIST_FOR_IMPLEMENTATION length] > 0 then
  %#import "%!CLASS_NAME%-transient-computations.h"\n%
end if
foreach INCLUSION_SET do
  %#import "%!key%.h"\n%
end foreach
%

//----------------------------------------------------------------------------*

@implementation %!CLASS_NAME%

//----------------------------------------------------------------------------*
//    Synthesize properties                                                   *
//----------------------------------------------------------------------------*

//--- Attributes
%foreach PROPERTY_LIST_FOR_IMPLEMENTATION do
  %@dynamic %!mPropertyName% ;\n%
end foreach
%
//--- To-one relationships
%foreach TO_ONE_RELATIONSHIPS do
%@dynamic %!mValue0% ; // %!mValue1%\n%
end foreach%
//--- To-many relationships
%
foreach TO_MANY_RELATIONSHIPS do
%@dynamic %!mValue0% ; // Set of %!mValue1% entities\n%
end foreach
%
//----------------------------------------------------------------------------*
//    Creation Class Method                                                   *
//----------------------------------------------------------------------------*

+ (%!CLASS_NAME% *) pmInsertNewObjectIntoManagedObjectContext:(NSManagedObjectContext *) inContext {
  return [NSEntityDescription insertNewObjectForEntityForName:@"%!ENTITY_NAME%" inManagedObjectContext:inContext] ;
}

//----------------------------------------------------------------------------*
//    initWithEntity:insertIntoManagedObjectContext:                          *
//----------------------------------------------------------------------------*

- (%!CLASS_NAME% *) initWithEntity:(NSEntityDescription *) inEntity
                    insertIntoManagedObjectContext:(NSManagedObjectContext *) inManagedObjectContext {
  self = [super 
    initWithEntity:inEntity
    insertIntoManagedObjectContext:inManagedObjectContext
  ] ;
  if (self) {
  //--- Add Transient observers
%!generateAddObserverForTransients [!TRANSIENT_LIST_FOR_IMPLEMENTATION !"  "]
%  }
  return self ;
}

//----------------------------------------------------------------------------*
//    didTurnIntoFault                                                        *
//----------------------------------------------------------------------------*

- (void) didTurnIntoFault {
//--- Remove Transient observers
%!generateRemoveObserverForTransients [!TRANSIENT_LIST_FOR_IMPLEMENTATION]
%//---
  [super didTurnIntoFault] ;
}

%

if [PROPERTY_TOMANY_RELATIONSHIP_SET count] > 0 then
%//----------------------------------------------------------------------------*
//    didChangeValueForKey:                                                   *
//----------------------------------------------------------------------------*

- (void) didChangeValueForKey: (NSString *) inKey {
  [super didChangeValueForKey:inKey] ;
  if (! self.isFault) {
    [self pmKeyDidChange:inKey] ;
  }
}

//----------------------------------------------------------------------------*
//    didChangeValueForKey:withSetMutation:usingObjects:                      *
//----------------------------------------------------------------------------*

- (void) didChangeValueForKey: (NSString *) inKey
         withSetMutation: (NSKeyValueSetMutationKind) inMutationKind
         usingObjects: (NSSet *) inObjects {
  [super
    didChangeValueForKey:inKey
    withSetMutation: inMutationKind
    usingObjects: inObjects
  ] ;
  if (! self.isFault) {
    [self pmKeyDidChange:inKey] ;
  }
}

//----------------------------------------------------------------------------*
//    pmKeyDidChange:                                                         *
//----------------------------------------------------------------------------*

- (void) pmKeyDidChange: (NSString *) inKey {
 %foreach PROPERTY_TOMANY_RELATIONSHIP_SET do
% if ([inKey isEqualToString:@"%!key%"]) {
    [%!key%_observers makeObjectsPerformSelector:@selector (%!["entity." . ENTITY_NAME . "." . key identifierRepresentation]%_didChange)] ;
%!generateTransientTriggering [!key !ENTITY_NAME !TRANSIENT_LIST_FOR_IMPLEMENTATION !"entity"]
between %  }else%
end foreach
%  }
}
%end if

if [SIGN_LIST length] > 0 then
%
//----------------------------------------------------------------------------*
//    computeSignature                                                        *
//----------------------------------------------------------------------------*

- (NSInteger) computeSignature {
  NSInteger signature = 0 ;
% foreach SIGN_LIST do
%  signature = %![mPropertyType functionForComputingSignature]% (signature, self.%!mPropertyName%) ;\n%
end foreach
%  return signature ;
}
%end if


foreach PROPERTY_LIST_FOR_IMPLEMENTATION do%
//----------------------------------------------------------------------------*
//    %!mPropertyName% Observer                                               *
//----------------------------------------------------------------------------*

- (void) addObserverOf_%!mPropertyName%: (NSObject *) inObserver {
  if (nil == %!mPropertyName%_observers) {
    %!mPropertyName%_observers = [NSMutableSet new] ;
  }
  [%!mPropertyName%_observers addObject:inObserver] ;
  [inObserver performSelector:@selector (%!CLASS_NAME%_%!mPropertyName%_didChange)] ;
}

//----------------------------------------------------------------------------*

- (void) removeObserverOf_%!mPropertyName%: (NSObject *) inObserver {
  [%!mPropertyName%_observers removeObject:inObserver] ;
  [inObserver performSelector:@selector (%!CLASS_NAME%_%!mPropertyName%_didChange)] ;
}

%
end foreach

foreach TO_MANY_RELATIONSHIPS do%
//----------------------------------------------------------------------------*

- (void) addObserverOf_%!mValue0%: (NSObject *) inObserver {
  if (nil == %!mValue0%_observers) {
    %!mValue0%_observers = [NSMutableSet new] ;
  }
  [%!mValue0%_observers addObject:inObserver] ;
  [inObserver performSelector:@selector (%!["entity." . ENTITY_NAME . "." . mValue0 identifierRepresentation]%_didChange)] ;
}

//----------------------------------------------------------------------------*

- (void) removeObserverOf_%!mValue0%: (NSObject *) inObserver {
  [%!mValue0%_observers removeObject:inObserver] ;
  [inObserver performSelector:@selector (%!["entity." . ENTITY_NAME . "." . mValue0 identifierRepresentation]%_didChange)] ;
}

%
end foreach

!generateObserverRoutinesForTransient [!ENTITY_NAME !TRANSIENT_LIST_FOR_IMPLEMENTATION !"entity"]

!generateTransientCacheRoutine [!CLASS_NAME !TRANSIENT_LIST_FOR_IMPLEMENTATION]
%//----------------------------------------------------------------------------*

