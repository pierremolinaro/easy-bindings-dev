#import "easy-bindings-utilities.h"
#import "PMTransientDependancyManager.h"
#import "%!CLASS_NAME%.h"
%
if [TRANSIENT_LIST_FOR_IMPLEMENTATION length] > 0 then
  %#import "%!CLASS_NAME%-transient-computations.h"\n%
end if
foreach INCLUSION_SET do
  %#import "%!key%.h"\n%
end foreach
%
//----------------------------------------------------------------------------*

@implementation %!CLASS_NAME%

%foreach PROPERTY_LIST_FOR_IMPLEMENTATION do
  if [mType nonStandardAttributeNamePrefix] != "" then
    %//----------------------------------------------------------------------------*\n%
    %//    Custom accessors for '%!mPropertyName%'                                 *\n%
    %//----------------------------------------------------------------------------*\n\n%
    %- (void) set%![mPropertyName stringByCapitalizingFirstCharacter]%: (%![mType ocTypeName]%) inValue {\n%
    %  [self setValue:%![mType attributeValueEncoder]% (inValue) forKey:@"%![mType nonStandardAttributeNamePrefix]!mPropertyName%"] ;\n%
    %}\n\n%
    %//----------------------------------------------------------------------------*\n\n%
    %- (%![mType ocTypeName]%) %!mPropertyName% {\n%
    %  return %![mType attributeValueDecoder]% ([self valueForKey:@"%![mType nonStandardAttributeNamePrefix]!mPropertyName%"]) ;\n%
    %}\n%
  elsif not [mType isClass] then
    %//----------------------------------------------------------------------------*\n%
    %//    Custom accessors for '%!mPropertyName%'                                 *\n%
    %//----------------------------------------------------------------------------*\n\n%
    %- (void) set%![mPropertyName stringByCapitalizingFirstCharacter]%: (%![mType ocTypeName]%) inValue {\n%
    %  id value = %![mType customSetterTransformer]% ;\n%
    %  [self willChangeValueForKey:@"%!mPropertyName%"] ;\n%
    %  [self setPrimitiveValue:value forKey:@"%!mPropertyName%"] ;\n%
    %  [self didChangeValueForKey:@"%!mPropertyName%"] ;\n%
    %}\n\n%
    %//----------------------------------------------------------------------------*\n\n%
    %- (%![mType ocTypeName]%) %!mPropertyName% {\n%
    %  [self willAccessValueForKey:@"%!mPropertyName%"] ;\n%
    %  const %![mType ocTypeName]% value = [[self primitiveValueForKey:@"%!mPropertyName%"] %![mType customGetterMethod]%] ;\n%
    %  [self didAccessValueForKey:@"%!mPropertyName%"] ;\n%
    %  return value ;\n%
    %}\n%
  end if
end foreach
%
//----------------------------------------------------------------------------*
//    Synthesize properties                                                   *
//----------------------------------------------------------------------------*

//--- Attributes
%foreach PROPERTY_LIST_FOR_IMPLEMENTATION do
  if [mType isClass] then
    %@dynamic %!mPropertyName% ;\n%
  end if
end foreach
%

//--- To-many relationships
%
foreach TO_MANY_RELATIONSHIPS do
%@dynamic %!mValue0% ; // Set of %!mValue1% entities\n%
end foreach
%
//----------------------------------------------------------------------------*
//    Creation Class Method                                                   *
//----------------------------------------------------------------------------*

+ (%!CLASS_NAME% *) pmInsertNewObjectIntoManagedObjectContext:(NSManagedObjectContext *) inContext {
  return [NSEntityDescription insertNewObjectForEntityForName:@"%!ENTITY_NAME%" inManagedObjectContext:inContext] ;
}

%!generateTransientImplementation [!CLASS_NAME !TRANSIENT_LIST_FOR_IMPLEMENTATION !TRANSIENT_DEPENDENCY_ARCS !"entity"]
%//----------------------------------------------------------------------------*

