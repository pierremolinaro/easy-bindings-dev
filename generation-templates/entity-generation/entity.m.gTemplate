#import "%!CLASS_NAME%.h"
%
if [TRANSIENT_LIST_FOR_IMPLEMENTATION length] > 0 then
  %#import "%!CLASS_NAME%-transient-computations.h"\n%
end if
%#import "easy-bindings-utilities.h"

//----------------------------------------------------------------------------*

@implementation %!CLASS_NAME%

%foreach PROPERTY_LIST_FOR_IMPLEMENTATION do
  if [mType nonStandardAttributeNamePrefix] != "" then
    %//----------------------------------------------------------------------------*\n%
    %//    Custom accessors for '%!mPropertyName%'                                 *\n%
    %//----------------------------------------------------------------------------*\n\n%
    %- (void) set%![mPropertyName stringByCapitalizingFirstCharacter]%: (%![mType ocTypeName]%) inValue {\n%
    %  [self setValue:%![mType attributeValueEncoder]% (inValue) forKey:@"%![mType nonStandardAttributeNamePrefix]!mPropertyName%"] ;\n%
    %}\n\n%
    %//----------------------------------------------------------------------------*\n\n%
    %- (%![mType ocTypeName]%) %!mPropertyName% {\n%
    %  return %![mType attributeValueDecoder]% ([self valueForKey:@"%![mType nonStandardAttributeNamePrefix]!mPropertyName%"]) ;\n%
    %}\n%
  elsif not [mType isClass] then
    %//----------------------------------------------------------------------------*\n%
    %//    Custom accessors for '%!mPropertyName%'                                 *\n%
    %//----------------------------------------------------------------------------*\n\n%
    %- (void) set%![mPropertyName stringByCapitalizingFirstCharacter]%: (%![mType ocTypeName]%) inValue {\n%
    %  id value = %![mType customSetterTransformer]% ;\n%
    %  [self willChangeValueForKey:@"%!mPropertyName%"] ;\n%
    %  [self setPrimitiveValue:value forKey:@"%!mPropertyName%"] ;\n%
    %  [self didChangeValueForKey:@"%!mPropertyName%"] ;\n%
    %}\n\n%
    %//----------------------------------------------------------------------------*\n\n%
    %- (%![mType ocTypeName]%) %!mPropertyName% {\n%
    %  [self willAccessValueForKey:@"%!mPropertyName%"] ;\n%
    %  const %![mType ocTypeName]% value = [[self primitiveValueForKey:@"%!mPropertyName%"] %![mType customGetterMethod]%] ;\n%
    %  [self didAccessValueForKey:@"%!mPropertyName%"] ;\n%
    %  return value ;\n%
    %}\n%
  end if
end foreach
%
//----------------------------------------------------------------------------*
//    Synthesize properties                                                   *
//----------------------------------------------------------------------------*

%foreach PROPERTY_LIST_FOR_IMPLEMENTATION do
  if [mType isClass] then
    %@dynamic %!mPropertyName% ;\n%
  end if
end foreach
%
//----------------------------------------------------------------------------*
//    Creation Class Method                                                   *
//----------------------------------------------------------------------------*

+ (%!CLASS_NAME% *) insertNewObjectIntoManagedObjectContext:(NSManagedObjectContext *) inContext {
  return [NSEntityDescription insertNewObjectForEntityForName:@"%!ENTITY_NAME%" inManagedObjectContext:inContext] ;
}

//----------------------------------------------------------------------------*
//    willChangeValueForKey                                                   *
//----------------------------------------------------------------------------*

- (void) willChangeValueForKey:(NSString *) inKey {
  // NSLog (@"\%s:'\%@'", __PRETTY_FUNCTION__, inKey) ;
%
foreach TRIGGERED_KEYS
  before %  if %
  do
  %([inKey isEqualToString:@"%!key%"]) {\n%
  foreach mList do
    %    %!mValue%_hasBeenComputed = NO ;\n%
  end foreach
  %  }%
  between
    %else if %
  after
    %\n%
end foreach
%  [super willChangeValueForKey:inKey] ;
}

%foreach TRANSIENT_LIST_FOR_IMPLEMENTATION do
  %//----------------------------------------------------------------------------*\n%
  %//    '%!mTransientName%' transient                                  *\n%
  %//----------------------------------------------------------------------------*\n\n%
  %+ (NSSet *) keyPathsForValuesAffecting%![mTransientName stringByCapitalizingFirstCharacter]% {\n%
  %  return [NSSet setWithObjects:%
  foreach mDependencyList do
    % @"%!mMasterName%", %
  end foreach
  %nil] ;\n%
  %}\n\n%
  %//----------------------------------------------------------------------------*\n\n%
  %- (%![mType ocTypeName]%) %!mTransientName% {\n%
  %  if (!%!mTransientName%_hasBeenComputed) {\n%
  %    %!mTransientName%_hasBeenComputed = YES ;\n%
  %    %!mTransientName%_cachedValue = %
  if [mType copyOnAssign] then %[% end if
  %compute_%!CLASS_NAME%_%!mTransientName% (%
  foreach mDependencyList
  do %[self %!mMasterName%]%
  between %, %
  end foreach
  %)%
  if [mType copyOnAssign] then % copy]% end if
  % ;\n%
  %  }\n%
  %  return %!mTransientName%_cachedValue ;\n%
  %}\n\n%
  %//----------------------------------------------------------------------------*\n\n%
  %- (void) set%![mTransientName stringByCapitalizingFirstCharacter]%: (%![mType ocTypeName]%) inUnusedValue {\n%
  %  // A transient property cannot be set: this method has no effect\n%
  %}\n\n%
end foreach
%//----------------------------------------------------------------------------*

@end

