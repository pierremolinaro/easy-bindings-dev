#import "easy-bindings-utilities.h"
#import "PMAllocationDebug.h"
#import "PMTransientDependancyManager.h"
#import "%!CLASS_NAME%.h"
%
if [TRANSIENT_LIST_FOR_IMPLEMENTATION length] > 0 then
  %#import "%!CLASS_NAME%-transient-computations.h"\n%
end if
foreach INCLUSION_SET do
  %#import "%!key%.h"\n%
end foreach
%

//----------------------------------------------------------------------------*

@implementation %!CLASS_NAME%

//----------------------------------------------------------------------------*
//    Synthesize properties                                                   *
//----------------------------------------------------------------------------*

//--- Attributes
%foreach PROPERTY_LIST_FOR_IMPLEMENTATION do
  %@dynamic %!mPropertyName% ;\n%
end foreach
%
//--- To-one relationships
%foreach TO_ONE_RELATIONSHIPS do
%@dynamic %!mValue0% ; // %!mValue1%\n%
end foreach%
//--- To-many relationships
%
foreach TO_MANY_RELATIONSHIPS do
%@dynamic %!mValue0% ; // Set of %!mValue1% entities\n%
end foreach
%
//----------------------------------------------------------------------------*
//    Creation Class Method                                                   *
//----------------------------------------------------------------------------*

+ (%!CLASS_NAME% *) pmInsertNewObjectIntoManagedObjectContext:(NSManagedObjectContext *) inContext {
  return [NSEntityDescription insertNewObjectForEntityForName:@"%!ENTITY_NAME%" inManagedObjectContext:inContext] ;
}

//----------------------------------------------------------------------------*
//    initWithEntity:insertIntoManagedObjectContext:                          *
//----------------------------------------------------------------------------*

- (%!CLASS_NAME% *) initWithEntity:(NSEntityDescription *) inEntity
                    insertIntoManagedObjectContext:(NSManagedObjectContext *) inManagedObjectContext {
  self = [super 
    initWithEntity:inEntity
    insertIntoManagedObjectContext:inManagedObjectContext
  ] ;
  if (self) {
  //--- Add Transient observers
%!generateAddObserverForTransients [!TRANSIENT_LIST_FOR_IMPLEMENTATION !"  "]
%  }
  return self ;
}

//----------------------------------------------------------------------------*
//    objectWillBeDeallocated                                                 *
//----------------------------------------------------------------------------*

- (void) objectWillBeDeallocated {
//--- Remove Transient observers
%!generateRemoveObserverForTransients [!TRANSIENT_LIST_FOR_IMPLEMENTATION]
%//---
  [super objectWillBeDeallocated] ;
}

%

if [PROPERTY_AND_RELATIONSHIP_SET count] > 0 then
%//----------------------------------------------------------------------------*
//    willChangeValueForKey:                                                  *
//----------------------------------------------------------------------------*

- (void) willChangeValueForKey: (NSString *) inKey {
%foreach TO_ONE_RELATIONSHIPS
before %  %
do %if ([inKey isEqualToString:@"%!mValue0%"]) {\n%
  if [SIGN_SET hasKey !mValue0] then
    %    [self.%!mValue0% removeSignatureObserver:self] ;\n%
  end if
between %  }else %
after %  }\n%
end foreach
%  [super willChangeValueForKey:inKey] ;
}

//----------------------------------------------------------------------------*
//    didChangeValueForKey:                                                   *
//----------------------------------------------------------------------------*

- (void) didChangeValueForKey: (NSString *) inKey {
  [super didChangeValueForKey:inKey] ;
%foreach TO_ONE_RELATIONSHIPS
before %  %
do %if ([inKey isEqualToString:@"%!mValue0%"]) {\n%
  if [SIGN_SET hasKey !mValue0] then
    %    [self.%!mValue0% addSignatureObserver:self] ;\n%
  end if
between %  }else %
after %  }\n%
end foreach
%  if (! self.isFault) {
    [self pmKeyDidChange:inKey] ;
  }
}

//----------------------------------------------------------------------------*
//    willChangeValueForKey:withSetMutation:usingObjects:                     *
//----------------------------------------------------------------------------*

- (void) willChangeValueForKey: (NSString *) inKey
         withSetMutation: (NSKeyValueSetMutationKind) inMutationKind
         usingObjects: (NSSet *) inObjects {
%foreach TO_MANY_RELATIONSHIPS
before %  %
do %if ([inKey isEqualToString:@"%!mValue0%"]) {\n%
  if [SIGN_SET hasKey !mValue0] then
    %    switch (inMutationKind) {\n%
    %    case NSKeyValueUnionSetMutation:\n%
    %      break ;\n%
    %    case NSKeyValueIntersectSetMutation:\n%
    %      { NSMutableSet * s = self.%!mValue0%.mutableCopy ;\n%
    %        [s minusSet:inObjects] ;\n%
    %        [s makeObjectsPerformSelector:@selector(removeSignatureObserver:) withObject:self] ;\n%
    %      } break ;\n%
    %    case NSKeyValueMinusSetMutation:\n%
    %      [inObjects makeObjectsPerformSelector:@selector(removeSignatureObserver:) withObject:self] ;\n%
    %      break ;\n%
    %    case NSKeyValueSetSetMutation:\n%
    %      [self.%!mValue0% makeObjectsPerformSelector:@selector(removeSignatureObserver:) withObject:self] ;\n%
    %      break ;\n%
    %    }\n%
  end if
between %  }else %
after %  }\n%
end foreach
%  [super
    willChangeValueForKey:inKey
    withSetMutation: inMutationKind
    usingObjects: inObjects
  ] ;
}

//----------------------------------------------------------------------------*
//    didChangeValueForKey:withSetMutation:usingObjects:                      *
//----------------------------------------------------------------------------*

- (void) didChangeValueForKey: (NSString *) inKey
         withSetMutation: (NSKeyValueSetMutationKind) inMutationKind
         usingObjects: (NSSet *) inObjects {
  [super
    didChangeValueForKey:inKey
    withSetMutation: inMutationKind
    usingObjects: inObjects
  ] ;
%foreach TO_MANY_RELATIONSHIPS
before %  %
do %if ([inKey isEqualToString:@"%!mValue0%"]) {\n%
  if [SIGN_SET hasKey !mValue0] then
    %    switch (inMutationKind) {\n%
    %    case NSKeyValueUnionSetMutation:\n%
    %    case NSKeyValueSetSetMutation:\n%
    %      [inObjects makeObjectsPerformSelector:@selector(addSignatureObserver:) withObject:self] ;\n%
    %      break ;\n%
    %    case NSKeyValueIntersectSetMutation:\n%
    %    case NSKeyValueMinusSetMutation:\n%
    %      break ;\n%
    %    }\n%
  end if
between %  }else %
after %  }\n%
end foreach
%  if (! self.isFault) {
    [self pmKeyDidChange:inKey] ;
  }
}

//----------------------------------------------------------------------------*
//    pmKeyDidChange:                                                         *
//----------------------------------------------------------------------------*

- (void) pmKeyDidChange: (NSString *) inKey {
 %foreach PROPERTY_AND_RELATIONSHIP_SET do
% if ([inKey isEqualToString:@"%!key%"]) {
    [%!key%_observers makeObjectsPerformSelector:@selector (%!["entity." . ENTITY_NAME . "." . key identifierRepresentation]%_didChange)] ;
%!generateTransientTriggering [!key !ENTITY_NAME !TRANSIENT_LIST_FOR_IMPLEMENTATION !"entity"]
if [SIGN_SET hasKey !key] then
  %    [self triggerSignatureComputing] ;\n%
end if
between %  }else%
end foreach
%  }
}
%end if

if [SIGN_LIST length] > 0 then
%
//----------------------------------------------------------------------------*
//    computeSignature                                                        *
//----------------------------------------------------------------------------*

- (NSInteger) computeSignature {
  NSInteger signature = [super computeSignature] ;
% foreach SIGN_LIST do
%  signature = %![mPropertyType functionForComputingSignature]% (signature, self.%!mPropertyName%) ;\n%
end foreach
%  return signature ;
}
%end if


foreach PROPERTY_LIST_FOR_IMPLEMENTATION do%
//----------------------------------------------------------------------------*
//    %!mPropertyName% Observer                                               *
//----------------------------------------------------------------------------*

- (void) addObserverOf_%!mPropertyName%: (NSObject *) inObserver {
  if (nil == %!mPropertyName%_observers) {
    %!mPropertyName%_observers = [NSMutableSet new] ;
  }
  [%!mPropertyName%_observers addObject:inObserver] ;
  [inObserver performSelector:@selector (%!["entity.". ENTITY_NAME . "." . mPropertyName identifierRepresentation]%_didChange)] ;
}

//----------------------------------------------------------------------------*

- (void) removeObserverOf_%!mPropertyName%: (NSObject *) inObserver {
  [%!mPropertyName%_observers removeObject:inObserver] ;
  [inObserver performSelector:@selector (%!["entity.". ENTITY_NAME . "." . mPropertyName identifierRepresentation]%_didChange)] ;
}

%
end foreach

foreach TO_MANY_RELATIONSHIPS do%
//----------------------------------------------------------------------------*

- (void) addObserverOf_%!mValue0%: (NSObject *) inObserver {
  if (nil == %!mValue0%_observers) {
    %!mValue0%_observers = [NSMutableSet new] ;
  }
  [%!mValue0%_observers addObject:inObserver] ;
  [inObserver performSelector:@selector (%!["entity." . ENTITY_NAME . "." . mValue0 identifierRepresentation]%_didChange)] ;
}

//----------------------------------------------------------------------------*

- (void) removeObserverOf_%!mValue0%: (NSObject *) inObserver {
  [%!mValue0%_observers removeObject:inObserver] ;
  [inObserver performSelector:@selector (%!["entity." . ENTITY_NAME . "." . mValue0 identifierRepresentation]%_didChange)] ;
}

%
end foreach

!generateObserverRoutinesForTransient [!ENTITY_NAME !TRANSIENT_LIST_FOR_IMPLEMENTATION !"entity"]

!generateTransientCacheRoutine [!CLASS_NAME !TRANSIENT_LIST_FOR_IMPLEMENTATION]
%//----------------------------------------------------------------------------*

