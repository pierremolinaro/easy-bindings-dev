#import "easy-bindings-utilities.h"
#import "PMAllocationDebug.h"
#import "PMEntityManager.h"
#import "PMRelationshipDescription.h"
#import "PMAttributeDescription.h"
#import "PMTransientDependancyManager.h"
#import "load-store-functions.h"
#import "%!ENTITY_NAME%.h"
%
if [TRANSIENT_LIST_FOR_IMPLEMENTATION length] > 0 then
  %#import "%!ENTITY_NAME%-transient-computations.h"\n%
end if
foreach INCLUSION_SET do
  %#import "%!key%.h"\n%
end foreach
%

//-----------------------------------------------------------------------------*

@implementation %!ENTITY_NAME%

//-----------------------------------------------------------------------------*
//    Synthesize properties                                                    *
//-----------------------------------------------------------------------------*

//--- Attributes
%foreach ATTRIBUTE_LIST_FOR_IMPLEMENTATION do
  %@synthesize %!mAttributeName% ;\n%
end foreach
%
//--- To-one relationships
%foreach TO_ONE_RELATIONSHIPS do
%@synthesize %!mValue0% ; // %!mValue1%\n%
end foreach%
//--- To-many relationships
%
foreach TO_MANY_RELATIONSHIPS do
%@synthesize %!mValue0% ; // Set of %!mValue1% entities\n%
end foreach
%
//-----------------------------------------------------------------------------*
//    Swizzle setters                                                          *
//-----------------------------------------------------------------------------*

+ (void) load {
  Method original ;
  Method swizzled ;
%
foreach ATTRIBUTE_LIST_FOR_IMPLEMENTATION do
  %  original = class_getInstanceMethod (self, @selector (set%![mAttributeName stringByCapitalizingFirstCharacter]%:)) ;\n%
  %  swizzled = class_getInstanceMethod (self, @selector (set%![mAttributeName stringByCapitalizingFirstCharacter]%_swizzled:)) ;\n%
  %  macroCheckMethodSwizzling (original, swizzled) ;\n%
  %  method_exchangeImplementations (original, swizzled) ;\n%
end foreach
foreach TO_ONE_RELATIONSHIPS do
  %  original = class_getInstanceMethod (self, @selector (set%![mValue0 stringByCapitalizingFirstCharacter]%:)) ;\n%
  %  swizzled = class_getInstanceMethod (self, @selector (set%![mValue0 stringByCapitalizingFirstCharacter]%_swizzled:)) ;\n%
  %  macroCheckMethodSwizzling (original, swizzled) ;\n%
  %  method_exchangeImplementations (original, swizzled) ;\n%
end foreach
foreach TO_MANY_RELATIONSHIPS do
  %  original = class_getInstanceMethod (self, @selector (set%![mValue0 stringByCapitalizingFirstCharacter]%:)) ;\n%
  %  swizzled = class_getInstanceMethod (self, @selector (set%![mValue0 stringByCapitalizingFirstCharacter]%_swizzled:)) ;\n%
  %  macroCheckMethodSwizzling (original, swizzled) ;\n%
  %  method_exchangeImplementations (original, swizzled) ;\n%
end foreach
%}

//-----------------------------------------------------------------------------*
//    newInstanceWithManager:withDefaultValues:                                *
//-----------------------------------------------------------------------------*

+ (%!ENTITY_NAME% *) newInstanceWithManager: (PMEntityManager *) inManager
                    withDefaultValues: (BOOL) inFlag {
  return [inManager newInstanceOfEntity:[%!ENTITY_NAME% class] withDefaultValues:inFlag] ;
}

//-----------------------------------------------------------------------------*
//    init                                                                     *
//-----------------------------------------------------------------------------*

- (instancetype) init {
  self = [super init] ;
  if (self) {
%
foreach TO_MANY_RELATIONSHIPS do
  %    self.%!mValue0% = [NSMutableArray new] ;\n%
end foreach
%  //--- Add Transient observers\n%
!generateAddObserverForTransients [!TRANSIENT_LIST_FOR_IMPLEMENTATION !"  "]
%  }
  return self ;
}

//-----------------------------------------------------------------------------*
//    buildAttributeDescriptionArray                                           *
//-----------------------------------------------------------------------------*

- (void) buildAttributeDescriptionArray: (NSMutableArray *) ioDescriptionArray {
  [super buildAttributeDescriptionArray:ioDescriptionArray] ;
%
foreach ATTRIBUTE_LIST_FOR_IMPLEMENTATION do
  %  [ioDescriptionArray addObject:[PMAttributeDescription descriptionWithAttributeName:@"%!mAttributeName%"%
  if [mType hasCustomExplorerFunction] then
    % withConversionFunction:convert%![mType ebTypeName]%ValueToString%
  end if
  %]] ;\n%
end foreach
%}

//-----------------------------------------------------------------------------*
//    buildToOneRelationshipDescriptionArray                                   *
//-----------------------------------------------------------------------------*

- (void) buildToOneRelationshipDescriptionArray: (NSMutableArray *) ioDescriptionArray {
  [super buildToOneRelationshipDescriptionArray:ioDescriptionArray] ;
%
foreach CURRENT_RELATIONSHIP_LIST do
  if not mIsToMany then
    %  [ioDescriptionArray addObject:[PMRelationshipDescription\n%
    %    descriptionWithRelationshipName:@"%!mRelationshipName->string%"\n%
    %    withOppositionRelationshipName:@"%!mInverseRelationshipName->string%"\n%
    %    withIsToManyOppositionRelationship:%![mInverseRelationIsToMany ocString]%\n%
    %  ]] ;\n%
  end if
end foreach
%}

//-----------------------------------------------------------------------------*
//    buildToManyRelationshipDescriptionArray                                  *
//-----------------------------------------------------------------------------*

- (void) buildToManyRelationshipDescriptionArray: (NSMutableArray *) ioDescriptionArray {
  [super buildToManyRelationshipDescriptionArray:ioDescriptionArray] ;
%
foreach CURRENT_RELATIONSHIP_LIST do
  if mIsToMany then
    %  [ioDescriptionArray addObject:[PMRelationshipDescription\n%
    %    descriptionWithRelationshipName:@"%!mRelationshipName->string%"\n%
    %    withOppositionRelationshipName:@"%!mInverseRelationshipName->string%"\n%
    %    withIsToManyOppositionRelationship:%![mInverseRelationIsToMany ocString]%\n%
    %  ]] ;\n%
  end if
end foreach
%}

//-----------------------------------------------------------------------------*
//    setUpWithDefaultValues                                                   *
//-----------------------------------------------------------------------------*

- (void) setUpWithDefaultValues {
%
foreach ATTRIBUTE_LIST_FOR_IMPLEMENTATION do
  %  self.%!mAttributeName% = %!mDirectDefaultValue% ;\n%
end foreach
%  [super setUpWithDefaultValues] ;
}

//-----------------------------------------------------------------------------*
//    resetBeforeDeletion                                                      *
//-----------------------------------------------------------------------------*

- (void) resetBeforeDeletion {
%
foreach CURRENT_RELATIONSHIP_LIST do
  %  %!mRelationshipName->string% = nil ;\n%
end foreach
%//--- Remove Transient observers
%!generateRemoveObserverForTransients [!TRANSIENT_LIST_FOR_IMPLEMENTATION]
%  [super resetBeforeDeletion] ;
}

//-----------------------------------------------------------------------------*
//    saveIntoDictionary                                                       *
//-----------------------------------------------------------------------------*

- (void) saveIntoDictionary: (NSMutableDictionary *) ioDictionary {
  [super saveIntoDictionary:ioDictionary] ;
%
foreach ATTRIBUTE_LIST_FOR_IMPLEMENTATION do
  %  store%![mType ebTypeName]%InDictionary (self.%!mAttributeName%, @"%!mAttributeName%", ioDictionary) ;\n%
end foreach
foreach CURRENT_RELATIONSHIP_LIST do
  if mIsToMany then
    %  storeEntityArrayInDictionary (self.%!mRelationshipName->string%, @"%!mRelationshipName->string%", ioDictionary) ;\n%
  else
    %  storeEntityInDictionary (self.%!mRelationshipName->string%, @"%!mRelationshipName->string%", ioDictionary) ;\n%
  end if
end foreach
%}

//-----------------------------------------------------------------------------*
//    setUpWithDictionary                                                      *
//-----------------------------------------------------------------------------*

- (void) setUpWithDictionary: (NSDictionary *) inDictionary
         withManagedEntityArray: (NSArray *) inManagedEntityArray {
  [super
    setUpWithDictionary:inDictionary
    withManagedEntityArray:inManagedEntityArray
  ] ;
%
foreach ATTRIBUTE_LIST_FOR_IMPLEMENTATION do
  %  self.%!mAttributeName% = read%![mType ebTypeName]%FromDictionary (@"%!mAttributeName%", inDictionary) ;\n%
end foreach
foreach CURRENT_RELATIONSHIP_LIST do
  if mIsToMany then
    %  self.%!mRelationshipName->string% = readEntityArrayFromDictionary (@"%!mRelationshipName->string%", inDictionary, inManagedEntityArray) ;\n%
  else
    %  self.%!mRelationshipName->string% = readEntityFromDictionary (@"%!mRelationshipName->string%", inDictionary, inManagedEntityArray) ;\n%
  end if
end foreach
%}

%

foreach CURRENT_RELATIONSHIP_LIST do
  if mIsToMany then
    %//-----------------------------------------------------------------------------*\n%
    %//    set%![mRelationshipName stringByCapitalizingFirstCharacter]%_swizzled       *\n%
    %//-----------------------------------------------------------------------------*\n\n%
    %- (void) set%![mRelationshipName stringByCapitalizingFirstCharacter]%_swizzled: (NSMutableArray *) inNewArray {\n%
    %  NSMutableArray * currentArray = self.%!mRelationshipName->string% ;\n%
    %  if (inNewArray != currentArray) {\n%
    %  //--- Register old value in undo manager\n%
    %    [[self.undoManager prepareWithInvocationTarget:self]\n%
    %      set%![mRelationshipName stringByCapitalizingFirstCharacter]%:currentArray\n%
    %    ] ;\n%
    %  //--- Store new value\n%
    %    [self set%![mRelationshipName stringByCapitalizingFirstCharacter]%_swizzled :inNewArray] ;\n%
    %  //--- Removed object set\n%
    %    NSMutableSet * removedObjectSet = [NSMutableSet new] ;\n%
    %    [removedObjectSet addObjectsFromArray:currentArray] ;\n%
    %    [removedObjectSet minusSet:[NSSet setWithArray:inNewArray]] ;\n%
    %    for (%!mDestinationEntityName->string% * object in removedObjectSet) {\n%
    %      object.%!mInverseRelationshipName->string% = nil ;\n%
    if [SIGN_SET hasKey !mRelationshipName->string] then
      %      [object removeSignatureObserver:self] ;\n%
    end if
    %    }\n%
    %    macroReleaseSetToNil (removedObjectSet) ;\n%
    %  //--- Added object set\n%
    %    NSMutableSet * addedObjectSet = [NSMutableSet new] ;\n%
    %    [addedObjectSet addObjectsFromArray:inNewArray] ;\n%
    %    [addedObjectSet minusSet:[NSSet setWithArray:currentArray]] ;\n%
    %    for (%!mDestinationEntityName->string% * object in addedObjectSet) {\n%
    %      object.%!mInverseRelationshipName->string% = self ;\n%
    if [SIGN_SET hasKey !mRelationshipName->string] then
      %      [object addSignatureObserver:self] ;\n%
    end if
    %    }\n%
    %    macroReleaseSetToNil (addedObjectSet) ;\n%
    %  //--- Notify observers object count did change\n%
    %    [%!mRelationshipName->string%_observers makeObjectsPerformSelector:@selector (%!["entity." . ENTITY_NAME . "." . mRelationshipName identifierRepresentation]%_didChange)] ;\n%
    if [SIGN_SET hasKey !mRelationshipName->string] then
      %  //--- Trigger signature computing\n%
      %    [self triggerSignatureComputing] ;\n%
    end if
    !generateTransientTriggering [!mRelationshipName->string !ENTITY_NAME !TRANSIENT_LIST_FOR_IMPLEMENTATION !"entity"]
    %  }\n%
    %}\n\n%
    %//-----------------------------------------------------------------------------*\n\n%
    %- (void) insertObject: (%!mDestinationEntityName->string% *) inObject\n%
    %         in%![mRelationshipName stringByCapitalizingFirstCharacter]%AtIndex: (NSUInteger) inIndex {\n%
    %  const NSUInteger idx = [%!mRelationshipName->string% indexOfObject:inObject] ;\n%
    %  if (idx == NSNotFound) {\n%
    %  //---\n%
    %    [%!mRelationshipName->string% insertObject:inObject atIndex:inIndex] ;\n%
    %  //---\n%
    %    [self.undoManager\n%
    %      registerUndoWithTarget:self\n%
    %      selector:@selector (removeObjectFrom%![mRelationshipName stringByCapitalizingFirstCharacter]%:)\n%
    %      object:inObject\n%
    %    ] ;\n%
    %  //---\n%
    %    inObject.%!mInverseRelationshipName->string% = self ;\n%
    %  }else if (idx != inIndex) {\n%
    %\n%
    %  }\n%
    %//--- Notify observers object count did change\n%
    %  [%!mRelationshipName->string%_observers makeObjectsPerformSelector:@selector (%!["entity." . ENTITY_NAME . "." . mRelationshipName identifierRepresentation]%_didChange)] ;\n%
    %}\n\n%
    %//-----------------------------------------------------------------------------*\n\n%
    %- (void) removeObjectFrom%![mRelationshipName stringByCapitalizingFirstCharacter]%AtIndex: (NSUInteger) inIndex {\n%
    %  %!mDestinationEntityName->string% * removedObject = [%!mRelationshipName->string% objectAtIndex:inIndex] ;\n%
    %//--- Perform removing\n%
    %  [%!mRelationshipName->string% removeObjectAtIndex:inIndex] ;\n%
    %//--- Register all object in undo manager\n%
    %  [[self.undoManager prepareWithInvocationTarget:self]\n%
    %    insertObject:removedObject\n%
    %    in%![mRelationshipName stringByCapitalizingFirstCharacter]%AtIndex:inIndex\n%
    %  ] ;\n%
    %//--- Reset inverse relationship\n%
    %  removedObject.%!mInverseRelationshipName->string% = nil ;\n%
    %//--- Notify observers object count did change\n%
    %  [%!mRelationshipName->string%_observers makeObjectsPerformSelector:@selector (%!["entity." . ENTITY_NAME . "." . mRelationshipName identifierRepresentation]%_didChange)] ;\n%
    %}\n\n%
    %//-----------------------------------------------------------------------------*\n\n%
    %- (void) appendTo%![mRelationshipName stringByCapitalizingFirstCharacter]%: (%!mDestinationEntityName->string% *) inObject {\n%
    %  if (! [self.%!mRelationshipName->string% containsObject:inObject]) {\n%
    %    [self\n%
    %      insertObject:inObject\n%
    %      in%![mRelationshipName stringByCapitalizingFirstCharacter]%AtIndex:self.%!mRelationshipName->string%.count\n%
    %    ] ;\n%
    %  }\n%
    %}\n\n%
    %//-----------------------------------------------------------------------------*\n\n%
    %- (void) removeObjectFrom%![mRelationshipName stringByCapitalizingFirstCharacter]%: (%!mDestinationEntityName->string% *) inObject {\n%
    %  const NSUInteger idx = [self.%!mRelationshipName->string% indexOfObject:inObject] ;\n%
    %  if (NSNotFound != idx) {\n%
    %    [self removeObjectFrom%![mRelationshipName stringByCapitalizingFirstCharacter]%AtIndex:idx] ;\n%
    %  }\n%
    %}\n\n%
  end if
end foreach

foreach CURRENT_RELATIONSHIP_LIST do
  if not mIsToMany then
    %//-----------------------------------------------------------------------------*\n%
    %//    set%![mRelationshipName stringByCapitalizingFirstCharacter]%_swizzled       *\n%
    %//-----------------------------------------------------------------------------*\n\n%
    %- (void) set%![mRelationshipName stringByCapitalizingFirstCharacter]%_swizzled: (%!mDestinationEntityName->string% *) inNewObject {\n%
    %  %!mDestinationEntityName->string% * currentObject = self.%!mRelationshipName->string% ;\n%
    %  if (inNewObject != currentObject) {\n%
    %  //--- Register old value in undo manager\n%
    %    [[self.undoManager prepareWithInvocationTarget:self]\n%
    %      set%![mRelationshipName stringByCapitalizingFirstCharacter]%:currentObject\n%
    %    ] ;\n%
    if [SIGN_SET hasKey !mRelationshipName->string] then
      %  //--- Remove signature observer from old object\n%
      %    [self.%!mRelationshipName->string% removeSignatureObserver:self] ;\n%
    end if
    %  //--- Store new value\n%
    %    [self set%![mRelationshipName stringByCapitalizingFirstCharacter]%_swizzled :inNewObject] ;\n%
    %  //--- Set opposite relation ship\n%
    if mInverseRelationIsToMany then
      %    [currentObject removeObjectFrom%![mInverseRelationshipName stringByCapitalizingFirstCharacter]%:self] ;\n%
      %    [inNewObject appendTo%![mInverseRelationshipName stringByCapitalizingFirstCharacter]%:self] ;\n%
    else
      %    currentObject.%!mInverseRelationshipName->string% = nil ;\n%
      %    inNewObject.%!mInverseRelationshipName->string% = self ;\n%
    end if
    if [SIGN_SET hasKey !mRelationshipName->string] then
      %  //--- Add signature observer to new object\n%
      %    [self.%!mRelationshipName->string% addSignatureObserver:self] ;\n%
      %  //--- Trigger signature computing\n%
      %    [self triggerSignatureComputing] ;\n%
    end if
    !generateTransientTriggering [!mRelationshipName->string !ENTITY_NAME !TRANSIENT_LIST_FOR_IMPLEMENTATION !"entity"]
    %  }\n%
    %}\n\n%
  end if
end foreach

foreach ATTRIBUTE_LIST_FOR_IMPLEMENTATION do
  %//-----------------------------------------------------------------------------*\n%
  %//    set%![mAttributeName stringByCapitalizingFirstCharacter]%_swizzled       *\n%
  %//-----------------------------------------------------------------------------*\n\n%
  %- (void) set%![mAttributeName stringByCapitalizingFirstCharacter]%_swizzled: (%![mType ocTypeName]%) inNewValue {\n%
  %  if (%![mType notEqualExpression !"inNewValue" !"self." . mAttributeName]%) {\n%
  %  //--- Register old value in undo manager\n%
  if [mType isClass] then
    %    [self.undoManager\n%
    %      registerUndoWithTarget:self\n%
    %      selector:@selector (set%![mAttributeName stringByCapitalizingFirstCharacter]%:)\n%
    %      object:self.%!mAttributeName%\n%
    %    ] ;\n%
  else
    %    [[self.undoManager prepareWithInvocationTarget:self]\n%
    %      set%![mAttributeName stringByCapitalizingFirstCharacter]%:self.%!mAttributeName%\n%
    %    ] ;\n%
  end if
  %  //--- Store new value\n%
  %    [self set%![mAttributeName stringByCapitalizingFirstCharacter]%_swizzled :inNewValue] ;\n%
  %  //--- Notify observers\n%
  %    [%!mAttributeName%_observers makeObjectsPerformSelector:@selector (%!["entity." . ENTITY_NAME . "." . mAttributeName identifierRepresentation]%_didChange)] ;\n%
  !generateTransientTriggering [!mAttributeName !ENTITY_NAME !TRANSIENT_LIST_FOR_IMPLEMENTATION !"entity"]
  if [SIGN_SET hasKey !mAttributeName] then
    %    [self triggerSignatureComputing] ;\n%
  end if
  %  }\n%
  %}\n\n%
end foreach

if [SIGN_LIST length] > 0 then
%
//-----------------------------------------------------------------------------*
//    computeSignature                                                        *
//-----------------------------------------------------------------------------*

- (NSInteger) computeSignature {
  NSInteger signature = [super computeSignature] ;
% foreach SIGN_LIST do
%  signature = %![mPropertyType functionForComputingSignature]% (signature, self.%!mPropertyName%) ;\n%
end foreach
%  return signature ;
}
%end if


foreach ATTRIBUTE_LIST_FOR_IMPLEMENTATION do%
//-----------------------------------------------------------------------------*
//    %!mAttributeName% Observer                                               *
//-----------------------------------------------------------------------------*

- (void) addObserverOf_%!mAttributeName%: (NSObject *) inObserver {
  if (nil == %!mAttributeName%_observers) {
    %!mAttributeName%_observers = [NSMutableSet new] ;
  }
  [%!mAttributeName%_observers addObject:inObserver] ;
  [inObserver performSelector:@selector (%!["entity.". ENTITY_NAME . "." . mAttributeName identifierRepresentation]%_didChange)] ;
}

//-----------------------------------------------------------------------------*

- (void) removeObserverOf_%!mAttributeName%: (NSObject *) inObserver {
  [%!mAttributeName%_observers removeObject:inObserver] ;
  [inObserver performSelector:@selector (%!["entity.". ENTITY_NAME . "." . mAttributeName identifierRepresentation]%_didChange)] ;
}

%
end foreach

foreach TO_MANY_RELATIONSHIPS do%
//-----------------------------------------------------------------------------*

- (void) addObserverOf_%!mValue0%: (NSObject *) inObserver {
  if (nil == %!mValue0%_observers) {
    %!mValue0%_observers = [NSMutableSet new] ;
  }
  [%!mValue0%_observers addObject:inObserver] ;
  [inObserver performSelector:@selector (%!["entity." . ENTITY_NAME . "." . mValue0 identifierRepresentation]%_didChange)] ;
}

//-----------------------------------------------------------------------------*

- (void) removeObserverOf_%!mValue0%: (NSObject *) inObserver {
  [%!mValue0%_observers removeObject:inObserver] ;
  [inObserver performSelector:@selector (%!["entity." . ENTITY_NAME . "." . mValue0 identifierRepresentation]%_didChange)] ;
}

%
end foreach

!generateObserverRoutinesForTransient [!ENTITY_NAME !TRANSIENT_LIST_FOR_IMPLEMENTATION !"entity"]

!generateTransientCacheRoutine [!ENTITY_NAME !TRANSIENT_LIST_FOR_IMPLEMENTATION]
%//-----------------------------------------------------------------------------*

