//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"ReadOnlyArrayOf_" + ENTITY_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_%!ENTITY_NAME% : ReadOnlyAbstractArrayProperty <%!ENTITY_NAME%> {

  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <%!ENTITY_NAME%>,                            
                                 addedSet inAddedSet : EBReferenceSet <%!ENTITY_NAME%>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    if !inRemovedSet.isEmpty {
%for (mProperty) in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %      self.removeEBObserversOf_%!mProperty.mPropertyName%_fromElementsOfSet (inRemovedSet) // Stored property\n%
end
for (mProperty) in TRANSIENT_LIST_FOR_IMPLEMENTATION do
  %      self.removeEBObserversOf_%!mProperty.mPropertyName%_fromElementsOfSet (inRemovedSet) // Transient property\n%
end
for (mProperty) in COMPUTED_PROPERTY_LIST_FOR_IMPLEMENTATION do
  %      self.removeEBObserversOf_%!mProperty.mPropertyName%_fromElementsOfSet (inRemovedSet) // Computed property\n%
end
for (mProperty) in TO_MANY_PROXY_LIST_FOR_GENERATION do
  %      self.removeEBObserversOf_%!mProperty.mPropertyName%_fromElementsOfSet (inAddedSet) // ToMany proxy\n%
end
%    }
  //--- Add observers to added objects
    if !inAddedSet.isEmpty {
%for (mProperty) in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %      self.addEBObserversOf_%!mProperty.mPropertyName%_toElementsOfSet (inAddedSet) // Stored property\n%
end
for (mProperty) in TRANSIENT_LIST_FOR_IMPLEMENTATION do
  %      self.addEBObserversOf_%!mProperty.mPropertyName%_toElementsOfSet (inAddedSet) // Transient property\n%
end
for (mProperty) in COMPUTED_PROPERTY_LIST_FOR_IMPLEMENTATION do
  %      self.addEBObserversOf_%!mProperty.mPropertyName%_toElementsOfSet (inAddedSet) // Computed property\n%
end
for (mProperty) in TO_MANY_PROXY_LIST_FOR_GENERATION do
  %      self.addEBObserversOf_%!mProperty.mPropertyName%_toElementsOfSet (inAddedSet) // ToMany proxy\n%
end
%   }
  }

%
for (mProperty) in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
%  //····················································································································
  //   Observers of '%!mProperty.mPropertyName%' stored property
  //····················································································································

  private final var mObserversOf_%!mProperty.mPropertyName% = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_%!mProperty.mPropertyName% (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_%!mProperty.mPropertyName%.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.%!mProperty.mPropertyName%_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_%!mProperty.mPropertyName% (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_%!mProperty.mPropertyName%.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.%!mProperty.mPropertyName%_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_%!mProperty.mPropertyName%_toElementsOfSet (_ inSet : EBReferenceSet <%!ENTITY_NAME%>) {
    if !self.mObserversOf_%!mProperty.mPropertyName%.isEmpty {
      for managedObject in inSet.values {
        for (_, entry) in self.mObserversOf_%!mProperty.mPropertyName%.dictionary {
          if let observer = entry.possibleObserver {
            managedObject.%!mProperty.mPropertyName%_property.addEBObserver (observer)
          }else{
            self.mObserversOf_%!mProperty.mPropertyName%.triggerPacking ()
          }
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_%!mProperty.mPropertyName%_fromElementsOfSet (_ inSet : EBReferenceSet <%!ENTITY_NAME%>) {
    for (_, entry) in self.mObserversOf_%!mProperty.mPropertyName%.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.%!mProperty.mPropertyName%_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_%!mProperty.mPropertyName%.triggerPacking ()
      }
    }
  }

%
end
for (mProperty) in TO_MANY_PROXY_LIST_FOR_GENERATION do
%  //····················································································································
  //   Observers of '%!mProperty.mPropertyName%' toMany proxy
  //····················································································································

  private final var mObserversOf_%!mProperty.mPropertyName% = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_%!mProperty.mPropertyName% (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_%!mProperty.mPropertyName%.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.%!mProperty.mPropertyName%_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_%!mProperty.mPropertyName% (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_%!mProperty.mPropertyName%.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.%!mProperty.mPropertyName%_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_%!mProperty.mPropertyName%_toElementsOfSet (_ inSet : EBReferenceSet <%!ENTITY_NAME%>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_%!mProperty.mPropertyName%.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.%!mProperty.mPropertyName%_property.addEBObserver (observer)
        }else{
          self.mObserversOf_%!mProperty.mPropertyName%.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_%!mProperty.mPropertyName%_fromElementsOfSet (_ inSet : EBReferenceSet <%!ENTITY_NAME%>) {
    for (_, entry) in self.mObserversOf_%!mProperty.mPropertyName%.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.%!mProperty.mPropertyName%_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_%!mProperty.mPropertyName%.triggerPacking ()
      }
    }
  }

%
end
for (mProperty) in PROXY_LIST_FOR_GENERATION do
%  //····················································································································
  //   Observers of '%!mProperty.mPropertyName%' proxy property
  //····················································································································

  private final var mObserversOf_%!mProperty.mPropertyName% = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_%!mProperty.mPropertyName% (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_%!mProperty.mPropertyName%.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.%!mProperty.mPropertyName%_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_%!mProperty.mPropertyName% (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_%!mProperty.mPropertyName%.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.%!mProperty.mPropertyName%_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_%!mProperty.mPropertyName%_toElementsOfSet (_ inSet : EBReferenceSet <%!ENTITY_NAME%>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_%!mProperty.mPropertyName%.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.%!mProperty.mPropertyName%_property.addEBObserver (observer)
        }else{
          self.mObserversOf_%!mProperty.mPropertyName%.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_%!mProperty.mPropertyName%_fromElementsOfSet (_ inSet : EBReferenceSet <%!ENTITY_NAME%>) {
    for (_, entry) in self.mObserversOf_%!mProperty.mPropertyName%.dictionary {
      if let observer = entry.possibleObserver {
        observer.observedObjectDidChange ()
        for managedObject in inSet.values {
          managedObject.%!mProperty.mPropertyName%_property.removeEBObserver (observer)
        }
      }else{
        self.mObserversOf_%!mProperty.mPropertyName%.triggerPacking ()
      }
    }
  }

%
end
for (mProperty) in TRANSIENT_LIST_FOR_IMPLEMENTATION do
%  //····················································································································
  //   Observers of '%!mProperty.mPropertyName%' transient property
  //····················································································································

  private final var mObserversOf_%!mProperty.mPropertyName% = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_%!mProperty.mPropertyName% (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_%!mProperty.mPropertyName%.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.%!mProperty.mPropertyName%_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_%!mProperty.mPropertyName% (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_%!mProperty.mPropertyName%.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.%!mProperty.mPropertyName%_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_%!mProperty.mPropertyName%_toElementsOfSet (_ inSet : EBReferenceSet <%!ENTITY_NAME%>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_%!mProperty.mPropertyName%.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.%!mProperty.mPropertyName%_property.addEBObserver (observer)
        }else{
          self.mObserversOf_%!mProperty.mPropertyName%.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_%!mProperty.mPropertyName%_fromElementsOfSet (_ inSet : EBReferenceSet <%!ENTITY_NAME%>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_%!mProperty.mPropertyName%.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.%!mProperty.mPropertyName%_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_%!mProperty.mPropertyName%.triggerPacking ()
        }
      }
    }
  }

%
end
for (mProperty) in COMPUTED_PROPERTY_LIST_FOR_IMPLEMENTATION do
%  //····················································································································
  //   Observers of '%!mProperty.mPropertyName%' computed property
  //····················································································································

  private final var mObserversOf_%!mProperty.mPropertyName% = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_%!mProperty.mPropertyName% (_ inObserver : EBObserverProtocol) {
    self.addEBObserver (inObserver)
    self.mObserversOf_%!mProperty.mPropertyName%.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.%!mProperty.mPropertyName%_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_%!mProperty.mPropertyName% (_ inObserver : EBObserverProtocol) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_%!mProperty.mPropertyName%.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.%!mProperty.mPropertyName%_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_%!mProperty.mPropertyName%_toElementsOfSet (_ inSet : EBReferenceSet <%!ENTITY_NAME%>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_%!mProperty.mPropertyName%.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.%!mProperty.mPropertyName%_property.addEBObserver (observer)
        }else{
          self.mObserversOf_%!mProperty.mPropertyName%.triggerPacking ()
        }
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_%!mProperty.mPropertyName%_fromElementsOfSet (_ inSet : EBReferenceSet <%!ENTITY_NAME%>) {
    for managedObject in inSet.values {
      for (_, entry) in self.mObserversOf_%!mProperty.mPropertyName%.dictionary {
        if let observer = entry.possibleObserver {
          managedObject.%!mProperty.mPropertyName%_property.removeEBObserver (observer)
        }else{
          self.mObserversOf_%!mProperty.mPropertyName%.triggerPacking ()
        }
      }
    }
  }

%
end
%  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf %!ENTITY_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

%if not GENERATE_CLASS_TransientArrayOf_ then
%// TransientArrayOf_%!ENTITY_NAME% is useless.\n%
else
%final class TransientArrayOf_%!ENTITY_NAME% : ReadOnlyArrayOf_%!ENTITY_NAME% {

  //····················································································································
  //   Sort
  //····················································································································

  private var mIsOrderedBefore : Optional < (_ left : %!ENTITY_NAME%, _ right : %!ENTITY_NAME%) -> Bool > = nil
  private var mSortObserver : EBModelNotifierEvent? = nil
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : ReadOnlyArrayOf_%!ENTITY_NAME%? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyArrayOf_%!ENTITY_NAME%,
                        sortCallback inSortCallBack : Optional < (_ left : %!ENTITY_NAME%, _ right : %!ENTITY_NAME%) -> Bool >,
                        addSortObserversCallback inAddSortObserversCallback : (EBModelNotifierEvent) -> Void,
                        removeSortObserversCallback inRemoveSortObserversCallback : @escaping (EBModelNotifierEvent) -> Void) {
    if self.mDataProvider !== inProvider {
      self.mSortObserver?.removeSortObservers ()
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mIsOrderedBefore = inSortCallBack
      self.mDataProvider?.attachClient (self)
      if inSortCallBack != nil {
        self.mSortObserver = EBModelNotifierEvent (
          self,
          addSortObserversCallback: inAddSortObserversCallback,
          removeSortObserversCallback: inRemoveSortObserversCallback
        )
      }else{
        self.mInternalArrayValue = EBReferenceArray ()
      }
    }
  }

  //····················································································································

  func resetDataProvider () {
    if self.mDataProvider != nil {
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = nil
      self.mIsOrderedBefore = nil
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      let newArray : EBReferenceArray <%!ENTITY_NAME%>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          if let sortFunction = self.mIsOrderedBefore {
            newArray = EBReferenceArray (v.sorted { sortFunction ($0, $1) })
          }else{
            newArray = EBReferenceArray (v)
          }
          self.mTransientKind = .single
        case .multiple :
          newArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [%!ENTITY_NAME%] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <%!ENTITY_NAME%> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}
%end%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf %!ENTITY_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

%if not GENERATE_CLASS_TransientArrayOfSuperOf_ then
%// TransientArrayOfSuperOf_%!ENTITY_NAME% is useless.\n%
else
%final class TransientArrayOfSuperOf_%!ENTITY_NAME% <SUPER : EBManagedObject> : ReadOnlyArrayOf_%!ENTITY_NAME% {

  //····················································································································
  //   Data provider
  //····················································································································

  private weak var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil // SHOULD BE WEAK
  private var mTransientKind : PropertyKind = .empty
  private var mModelArrayShouldBeComputed = true
  private var mModelEvent = EBModelEvent ()

  //····················································································································

  override init () {
    super.init ()
    self.mModelEvent.mEventCallBack = { [weak self] in self?.computeModelArray () }
  }

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelEvent.observedObjectDidChange ()
    self.mModelArrayShouldBeComputed = true
    super.notifyModelDidChange ()
  }

  //····················································································································

  private final func computeModelArray () {
    if self.mModelArrayShouldBeComputed {
      self.mModelArrayShouldBeComputed = false
      var newModelArray : EBReferenceArray <SUPER>
      if let dataProvider = self.mDataProvider {
        switch dataProvider.selection {
        case .empty :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .empty
        case .single (let v) :
          newModelArray = EBReferenceArray (v)
          self.mTransientKind = .single
         case .multiple :
          newModelArray = EBReferenceArray ()
          self.mTransientKind = .multiple
        }
      }else{
        newModelArray = EBReferenceArray ()
        self.mTransientKind = .empty
      }
      var newArray = EBReferenceArray <%!ENTITY_NAME%> ()
      for superObject in newModelArray.values {
        if let object = superObject as? %!ENTITY_NAME% {
          newArray.append (object)
        }
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var selection : EBSelection < [%!ENTITY_NAME%] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue.values)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <%!ENTITY_NAME%> {
    self.computeModelArray ()
    return self.mInternalArrayValue
  }

  //····················································································································

}
%end%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"To many relationship read write: " + ENTITY_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_%!ENTITY_NAME% : ReadOnlyArrayOf_%!ENTITY_NAME% {

  //····················································································································

  func setProp (_ value :  EBReferenceArray <%!ENTITY_NAME%>) { } // Abstract method

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_%!ENTITY_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

%if not GENERATE_CLASS_ProxyArrayOf_ then
%// ProxyArrayOf_%!ENTITY_NAME% is useless.\n%
else
%final class ProxyArrayOf_%!ENTITY_NAME% : ReadWriteArrayOf_%!ENTITY_NAME% {

  //····················································································································

  private weak var mModel : ReadWriteArrayOf_%!ENTITY_NAME%? = nil // SHOULD BE WEAK

  //····················································································································

  func setModel (_ inModel : ReadWriteArrayOf_%!ENTITY_NAME%?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModelArray : EBReferenceArray <%!ENTITY_NAME%>
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModelArray = EBReferenceArray ()
      case .single (let v) :
        newModelArray = EBReferenceArray <%!ENTITY_NAME%> (v)
      case .multiple :
        newModelArray = EBReferenceArray ()
      }
    }else{
      newModelArray = EBReferenceArray ()
    }
    self.mInternalArrayValue = newModelArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inArrayValue : EBReferenceArray <%!ENTITY_NAME%>) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var selection : EBSelection < [%!ENTITY_NAME%] > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : EBReferenceArray <%!ENTITY_NAME%> {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return EBReferenceArray ()
      case .single (let v) :
        return EBReferenceArray (v)
      }
    }else{
      return EBReferenceArray ()
    }
  }

  //····················································································································

}
%end%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"Stored Array: " + ENTITY_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

%if not GENERATE_CLASS_StoredArrayOf_ then
%// StoredArrayOf_%!ENTITY_NAME% is useless.\n%
else
%class StoredArrayOf_%!ENTITY_NAME% : ReadWriteArrayOf_%!ENTITY_NAME%, EBSignatureObserverProtocol, DocumentStorableProperty {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool, key inKey : String?) {
    self.mUsedForSignature = inUsedForSignature
    self.mKey = inKey
    super.init ()
  }

  //····················································································································
  
  private final let mKey : String?
  final var key : String? { return self.mKey }
  
  //····················································································································

  func initialize (fromDictionary inDictionary : [String : Any],
                   managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    if let key = self.mKey, let objectSavingIndexArray = inDictionary [key] as? [Int] {
      var objectArray = EBReferenceArray <%!ENTITY_NAME%> ()
      for idx in objectSavingIndexArray {
        objectArray.append (inManagedObjectArray [idx] as! %!ENTITY_NAME%)
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································

  func store (inDictionary ioDictionary : inout [String : Any]) {
    if let key = self.mKey, self.mInternalArrayValue.count > 0 {
      var array = [Int] ()
      for object in self.mInternalArrayValue.values {
        array.append (object.savingIndex)
      }
      ioDictionary [key] = array
    }
  }

  //····················································································································

  final func enterRelationshipObjects (intoArray ioArray : inout [EBManagedObject]) {
    if self.mKey != nil, self.mInternalArrayValue.count > 0 {
      for object in self.mInternalArrayValue.values {
        ioArray.append (object)
      }
    }
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  final private let mUsedForSignature : Bool

  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var undoManager : UndoManager? = nil // SOULD BE WEAK

%if HANDLING_OPPOSITE then
%  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private final var mSetOppositeRelationship : Optional < (_ inManagedObject : %!ENTITY_NAME%) -> Void > = nil
  private final var mResetOppositeRelationship : Optional < (_ inManagedObject : %!ENTITY_NAME%) -> Void > = nil

  //····················································································································

  final func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : %!ENTITY_NAME%) -> Void,
                                               resetter inResetter : @escaping (_ inManagedObject : %!ENTITY_NAME%) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }

%end
%  //····················································································································
  // Model will change
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : EBReferenceArray <%!ENTITY_NAME%>) {
  //--- Register old value in undo manager
    self.undoManager?.registerUndo (withTarget: self) { $0.mInternalArrayValue = inOldValue }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }

  //····················································································································
  // Model did change
  //····················································································································

  override func notifyModelDidChange () {
  //--- Notify observers
    self.observedObjectDidChange ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers
  //····················································································································

  override func updateObservers (removedSet inRemovedSet : EBReferenceSet <%!ENTITY_NAME%>,
                                 addedSet inAddedSet : EBReferenceSet <%!ENTITY_NAME%>) {
    for managedObject in inRemovedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
%if HANDLING_OPPOSITE then
%      self.mResetOppositeRelationship? (managedObject)
%end
%   }
  //---
    for managedObject in inAddedSet.values {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
%if HANDLING_OPPOSITE then
%      self.mSetOppositeRelationship? (managedObject)
%end
%    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }

  //····················································································································

  override final var selection : EBSelection < [%!ENTITY_NAME%] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <%!ENTITY_NAME%>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override final var propval : EBReferenceArray <%!ENTITY_NAME%> { return self.mInternalArrayValue }

  //····················································································································

  final func remove (_ object : %!ENTITY_NAME%) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  final func add (_ object : %!ENTITY_NAME%) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private weak final var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private final var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue.values {
      crc.accumulate (u32: object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

}
%end%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"Stand alone Array: " + ENTITY_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

%if not GENERATE_CLASS_StandAloneArrayOf_ then
%// StandAloneArrayOf_%!ENTITY_NAME% is useless.\n%
else
%final class StandAloneArrayOf_%!ENTITY_NAME% : ReadWriteArrayOf_%!ENTITY_NAME% {

  //····················································································································

  override var selection : EBSelection < [%!ENTITY_NAME%] > { return .single (self.mInternalArrayValue.values) }

  //····················································································································

  override func setProp (_ inValue : EBReferenceArray <%!ENTITY_NAME%>) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : EBReferenceArray <%!ENTITY_NAME%> { return self.mInternalArrayValue }

  //····················································································································

  override func notifyModelDidChange () {
    self.observedObjectDidChange ()
    super.notifyModelDidChange ()
  }

  //····················································································································

  func remove (_ object : %!ENTITY_NAME%) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }

  //····················································································································

  func add (_ object : %!ENTITY_NAME%) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }

  //····················································································································

}
%end%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"Preferences array: " + ENTITY_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

%if not GENERATE_CLASS_PreferencesArrayOf_ then
%// PreferencesArrayOf_%!ENTITY_NAME% is useless.\n%
else
%final class PreferencesArrayOf_%!ENTITY_NAME% : StoredArrayOf_%!ENTITY_NAME% {

  //····················································································································

  private let mPrefKey : String
  private let mObserverForWritingPreferences = EBOutletEvent ()

  //····················································································································

  init (prefKey inPrefKey : String) {
    self.mPrefKey = inPrefKey
    super.init (usedForSignature: false, key: nil)
    if let array = UserDefaults.standard.array (forKey: inPrefKey) as? [[String : Any]] {
      var objectArray = EBReferenceArray <%!ENTITY_NAME%> ()
      for dictionary in array {
        let object = newInstanceOfEntityNamed (self.undoManager, "%!ENTITY_NAME%") as! %!ENTITY_NAME%
        object.setUpWithDictionary (dictionary, managedObjectArray: []) // setUpAtomicPropertiesWithDictionary (dictionary)
        objectArray.append (object)
      }
      self.setProp (objectArray)
    }
%for (mProperty) in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %    self.addEBObserverOf_%!mProperty.mPropertyName% (self.mObserverForWritingPreferences)\n%
end
%    self.mObserverForWritingPreferences.mEventCallBack = { [weak self] in self?.writeInPreferences () }
 }

  //····················································································································

  private func writeInPreferences () {
    var dictionaryArray = [[String  : Any]] ()
    for object in self.mInternalArrayValue.values {
      var d = [String  : Any] ()
      object.saveIntoDictionary (&d)
      d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
      dictionaryArray.append (d)
    }
    UserDefaults.standard.set (dictionaryArray, forKey: self.mPrefKey)
  }

  //····················································································································

}
%end%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

