//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(%!DOCUMENT_NAME%) class %!DOCUMENT_NAME% : EBManagedXibDocument {

%
for (mProperty) in DOCUMENT_PROPERTY_LIST do
  ![mProperty propertyDeclarationCode !false ![@stringset emptySet]]
end
%
  //····················································································································
  //    Outlets
  //····················································································································

%
for (lkey mOutletTypeName) in OUTLET_GENERATION_MAP do
%  @IBOutlet final var %!lkey.string% : %!mOutletTypeName%? = nil\n%
end
%
  //····················································································································
  //    Multiple bindings controllers
  //····················································································································

%for (mOutletName mBindingName mBoundObjectExpression) in MULTIPLE_BINDING_GENERATION_LIST do
  %  final var mController_%!mOutletName%_%!mBindingName% : MultipleBindingController_%!mBindingName%? = nil\n%
end
%
  //····················································································································
  //    Document file path
  //····················································································································
  // Cette méthode est appelée après tout enregistrement, qu'il y ait changement de nom ou pas.

  override final var fileModificationDate : Date? {
    get {
      return super.fileModificationDate
    }
    set{
      super.fileModificationDate = newValue
      self.documentFileName_property.observedObjectDidChange ()
    }
  }

  //····················································································································

  final func computeTransient_documentFileName () -> String {
    var documentFileName = ""
    if let url = self.fileURL {
      documentFileName = url.path
    }
    return documentFileName
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
%
for (mProperty) in DOCUMENT_PROPERTY_LIST do
  ![mProperty populateExplorerWindowCode]
end
%    //---
      super.populateExplorerWindow (&y, view:view)
    }
  #endif

  //····················································································································
  //    windowNibName
  //····················································································································

  override final var windowNibName : NSNib.Name? {
    return NSNib.Name ("%!DOCUMENT_NAME%")
  }

  //····················································································································
  //    rootEntityClassName
  //····················································································································

  override final func rootEntityClassName () -> String {
    return "%!ROOT_ENTITY_NAME%"
  }

  //····················································································································
  //    rootObject
  //····················································································································

  final var rootObject : %!ROOT_ENTITY_NAME% { return self.mRootObject as! %!ROOT_ENTITY_NAME% }

  //····················································································································
  //    check outlet connections
  //····················································································································

  private func checkOutletConnections () {
    let start = Date ()
%for (lkey mOutletTypeName) in OUTLET_GENERATION_MAP do
%    checkOutletConnection (self.%!lkey.string%, "%!lkey.string%", %!mOutletTypeName%.self, #file, #line)\n%
end
%    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Check outlet connections \(durationMS) ms")
    }
  }

  //····················································································································

  final private func configureProperties () {
    let start = Date ()
    var opIdx = 0
%
for (mProperty) in DOCUMENT_PROPERTY_LIST do
  ![mProperty configurationCode !false]
%    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
%end
%    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Configure properties \(durationMS) ms")
    }
  }

  //····················································································································

  final private func installBindings () {
    let start = Date ()
  //--------------------------- Install table view bindings
%
for (mTableValueBindingOutletName mTableValueBindingControllerName) in TABLE_VALUE_BINDING_GENERATION_LIST do
  %    self.%!mTableValueBindingControllerName%.bind_tableView (self.%!mTableValueBindingOutletName%)\n%
end
%  //--------------------------- Install ebView bindings
%
for (mEBViewOutletName mArrayControllerControllerName) in EB_VIEW_GRAPHIC_CONTROLLER_BINDING_GENERATION_LIST do
  %    self.%!mArrayControllerControllerName%.bind_ebView (self.%!mEBViewOutletName%)\n%
end
%  //--------------------------- Install regular bindings
%
for (mOutletName mBindingName mBoundObjectList mBindingOptionsString) in REGULAR_BINDINGS_GENERATION_LIST do
  %    self.%!mOutletName%?.bind_%!mBindingName% (%
  for (mBoundObjectString mKind) in mBoundObjectList
    do !mBoundObjectString
    between %, %
  end
  !mBindingOptionsString%)\n%
end
%  //--------------------------- Install multiple bindings
%
for (mOutletName mBindingName mBoundObjectExpression) in MULTIPLE_BINDING_GENERATION_LIST do
  %    do{\n%
  %      let controller = MultipleBindingController_%!mBindingName% (\n%
  %        computeFunction: %![mBoundObjectExpression expressionString]%,\n%
  %        outlet: self.%!mOutletName%\n%
  %      )\n%
  %      self.mController_%!mOutletName%_%!mBindingName% = controller\n%
  %    }\n%
end
%    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Install bindings \(durationMS) ms")
    }
  }

  //····················································································································

  final private func setTargetsAndActions () {
     let start = Date ()
   //--------------------------- Set targets / actions
%for (mOutletName mTargetName mActionName mTargetTypeName) in TARGET_ACTION_LIST do
%    self.%!mOutletName%?.target = %!mTargetName%\n%
%    self.%!mOutletName%?.action = #selector (%!mTargetTypeName%.%!mActionName% (_:))\n%
end
%    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Set target and actions \(durationMS) ms")
    }
  }

  //····················································································································
  //    windowControllerDidLoadNib
  //····················································································································

  override func windowControllerDidLoadNib (_ aController: NSWindowController) {
    super.windowControllerDidLoadNib (aController)
    self.checkOutletConnections ()
    self.configureProperties ()
    self.installBindings ()
    self.setTargetsAndActions ()
  //--------------------------- Read documentFileName model
    self.documentFileName_property.mReadModelFunction = { [weak self] in
      if let r = self?.displayName {
        return .single (r)
      }else{
        return .single ("")
      }
    }
  }

  //····················································································································
  //   removeUserInterface
  //····················································································································

  override func removeUserInterface () {
    super.removeUserInterface ()
  //--------------------------- Unbind regular bindings
%
for (mOutletName mBindingName mBoundObjectList mBindingOptionsString) in REGULAR_BINDINGS_GENERATION_LIST do
  %    self.%!mOutletName%?.unbind_%!mBindingName% ()\n%
end
%  //--------------------------- Unbind multiple bindings
%
for (mOutletName mBindingName mBoundObjectExpression) in MULTIPLE_BINDING_GENERATION_LIST do
#  for () in [mBoundObjectExpression observedModelSet] do
#  %    %!key%.removeEBObserver (self.mController_%!mOutletName%_%!mBindingName%!)\n%
#  end
  %    self.mController_%!mOutletName%_%!mBindingName% = nil\n%
end
%  //--------------------------- Unbind array controllers
%
for (mTableValueBindingOutletName mTableValueBindingControllerName) in TABLE_VALUE_BINDING_GENERATION_LIST do
  %    self.%!mTableValueBindingControllerName%.unbind_tableView (self.%!mTableValueBindingOutletName%)\n%
end
for (mEBViewOutletName mArrayControllerControllerName) in EB_VIEW_GRAPHIC_CONTROLLER_BINDING_GENERATION_LIST do
  %    self.%!mArrayControllerControllerName%.unbind_ebView (self.%!mEBViewOutletName%)\n%
end
for (mProperty) in DOCUMENT_PROPERTY_LIST do
  ![mProperty terminationCode !false]
end
%  //--------------------------- Remove targets / actions
%for (mOutletName mTargetName mActionName mTargetTypeName) in TARGET_ACTION_LIST do
%    self.%!mOutletName%?.target = nil\n%
end
%  //--------------------------- Clean up outlets
%
for (lkey mOutletTypeName) in OUTLET_GENERATION_MAP do
   %    self.%!lkey.string%?.ebCleanUp ()\n%
end
%  //--------------------------- Detach outlets
%
for (lkey mOutletTypeName) in OUTLET_GENERATION_MAP do
   %    self.%!lkey.string% = nil\n%
end
%  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

