//-------------------------------------------------------------------------------------------------------------------*

import Cocoa

//-------------------------------------------------------------------------------------------------------------------*

var g_%!PREFERENCES_NAME% : %!PREFERENCES_NAME%? = nil

//----------------------------------------------------------------------------*

@objc (%!PREFERENCES_NAME%) class %!PREFERENCES_NAME% : NSObject {
  //-------------------------------------------------------------------------------------------------------------------*
  //    Outlets                                                                                                        *
  //-------------------------------------------------------------------------------------------------------------------*
\n%
foreach OUTLET_DECLARATION_LIST do
%  @IBOutlet var %!mOutletName% : %!mOutletType%?\n%
end

foreach ATTRIBUTE_LIST_FOR_GENERATION do
%\n%
%  //-------------------------------------------------------------------------------------------------------------------*
  //    %!["Attribute: " + mAttributeName stringByRightPadding !111 !' ']%*
  //-------------------------------------------------------------------------------------------------------------------*\n\n%
%  var %!mAttributeName%_observers = NSMutableSet ()\n%
%  var %!mAttributeName% : %![mType swiftTypeName]% = %!mDirectSwiftDefaultValue% {
    didSet {
      if %!mAttributeName% != oldValue {
        for anyObject in %!mAttributeName%_observers {
          let object = anyObject as PMTriggerProtocol
          enterTriggerWithObject (object)
        }
      }
    }
  }

  func addObserverOf_%!mAttributeName% (inObserver : PMTriggerProtocol) {
    %!mAttributeName%_observers.addObject (inObserver)
    enterTriggerWithObject (inObserver)
  }
 
  func removeObserverOf_%!mAttributeName% (inObserver : PMTriggerProtocol) {
    %!mAttributeName%_observers.removeObject (inObserver)
    enterTriggerWithObject (inObserver)
  }

%
end

foreach CONTROLLER_MAP do
%  //-------------------------------------------------------------------------------------------------------------------*
  //    %!["Controller: " + lkey stringByRightPadding !111 !' ']%*
  //-------------------------------------------------------------------------------------------------------------------*
  
  var %!lkey->string% = %!mControllerClassName% ()\n%
end

foreach TRANSIENT_LIST_FOR_IMPLEMENTATION do
%  //-------------------------------------------------------------------------------------------------------------------*
  //    %!["Transient: " + mTransientName stringByRightPadding !111 !' ']%*
  //-------------------------------------------------------------------------------------------------------------------*\n\n%
%  var %!mTransientName%_observers = NSMutableSet ()\n%
%  var %!mTransientName%__cache : %![mTransientType swiftTypeName]%?\n%
%  var %!mTransientName% : %![mTransientType swiftTypeName]% {\n%
!generateSwiftTransientCacheRoutine [!PREFERENCES_NAME !mTransientType !mTransientName !mDependencyList !mRootSignDependencyList]
%  }

  func %!["preference." + PREFERENCES_NAME + "." + mTransientName identifierRepresentation]%_didChange () {
    self.willChangeValueForKey ("%!mTransientName%")
    self.didChangeValueForKey  ("%!mTransientName%")
     for anyObject in %!mTransientName%_observers {
        let object = anyObject as PMTriggerProtocol
        enterTriggerWithObject (object)
      }
  }
 
   func addObserverOf_%!mTransientName% (inObserver : PMTriggerProtocol) {
    %!mTransientName%_observers.addObject (inObserver)
    enterTriggerWithObject (inObserver)
  }
 
  func removeObserverOf_%!mTransientName% (inObserver : PMTriggerProtocol) {
    %!mTransientName%_observers.removeObject (inObserver)
    enterTriggerWithObject (inObserver)
  }

  var triggerObjectFor_%!["preference." + PREFERENCES_NAME + "." + mTransientName identifierRepresentation]%__cache : PMTrigger_%!["preference." + PREFERENCES_NAME + "." + mTransientName identifierRepresentation]%? = nil
  var triggerObjectFor_%!["preference." + PREFERENCES_NAME + "." + mTransientName identifierRepresentation]% : PMTrigger_%!["preference." + PREFERENCES_NAME + "." + mTransientName identifierRepresentation]% {
    if !triggerObjectFor_%!["preference." + PREFERENCES_NAME + "." + mTransientName identifierRepresentation]%__cache {
      triggerObjectFor_%!["preference." + PREFERENCES_NAME + "." + mTransientName identifierRepresentation]%__cache = PMTrigger_%!["preference." + PREFERENCES_NAME + "." + mTransientName identifierRepresentation]% (object:self)
    }
    return triggerObjectFor_%!["preference." + PREFERENCES_NAME + "." + mTransientName identifierRepresentation]%__cache!
  }\n
%end
%
  //-------------------------------------------------------------------------------------------------------------------*
  //    Arraies                                                                                                        *
  //-------------------------------------------------------------------------------------------------------------------*
%
foreach ARRAY_MAP do
%  var %!lkey->string% = NSMutableArray ()\n%
end


%

  //-------------------------------------------------------------------------------------------------------------------*
  //    Init                                                                                                           *
  //-------------------------------------------------------------------------------------------------------------------*

  init () {
    super.init ()
    noteObjectAllocation (self) ;
    g_%!PREFERENCES_NAME% = self ;
 %
if ([ATTRIBUTE_LIST_FOR_GENERATION length] + [ARRAY_MAP count]) > 0 then
  %    var ud = NSUserDefaults.standardUserDefaults ()\n%
  %  //---\n%
end
foreach ATTRIBUTE_LIST_FOR_GENERATION
  before
    %    var value : AnyObject?\n%
  do
    %    value = ud.objectForKey ("%!PREFERENCES_NAME%:%!mAttributeName%")\n%
    %    if value {\n%
    %      %!mAttributeName% = %![mType preferencesSwiftGetter]%\n%
    %    }\n%
end


foreach ARRAY_MAP do
%    { NSMutableArray * array = [NSMutableArray new] ;
      for (NSDictionary * dict in [ud objectForKey:@"%!PREFERENCES_NAME%:%!lkey->string%"]) {
        %!mElementType->mTypeName->string% * object = [[%!mElementType->mTypeName->string% alloc]
%foreach mAttributeListForImplementation
before %          initWith%
do     ![mAttributeName stringByCapitalizingFirstCharacter]%:%![mType preferencesSwiftGetter]%([dict objectForKey:@"%!mAttributeName%"])\n%
between %          with%
end
%        ] ;
        [array addObject:object] ;
      }
      self.%!lkey->string% = array ;
    }
%
end
%  //---
    NSNotificationCenter.defaultCenter ().addObserver (self,
     selector:"applicationWillTerminateAction:",
     name:NSApplicationWillTerminateNotification,
     object:nil
    )
  //--- Register trigger objects
%!generateAddSwiftObserverForTransients [!"preference" !PREFERENCES_NAME !TRANSIENT_LIST_FOR_IMPLEMENTATION !"    "]
#foreach TRANSIENT_LIST_FOR_IMPLEMENTATION do
#  foreach mDependencyList do
#    ![mDependency installTransientObserverForTransient !"preference" !PREFERENCES_NAME !mTransientName]
#  end
#end
%  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    awakeFromNib                                                                                                   *
  //-------------------------------------------------------------------------------------------------------------------*

  override func awakeFromNib () {
% foreach CONTROLLER_MAP do
  %//--- '%!lkey->string%' controller\n%
  %  %!lkey->string%.setObjectClass (%!mControlledClassOrEntityName->string% class)\n%
end
foreach CONTROLLER_MAP do
  foreach mControllerBindingList
  before 
    %//--- '%!lkey->string%' controller bindings\n%
  do
   ![mBinding generateObjectiveCBinding !lkey->string]
  end
end

foreach OUTLET_DECLARATION_LIST do
   %  //--- check %!mOutletName%' outlet not nil\n%
   %    if nil == %!mOutletName% {\n%
   %      presentErrorWindow (__FILE__, __LINE__, "the '%!mOutletName%' outlet is nil") ;\n%
   %    }\n%
  foreach mOutletBindingList do
    ![mBinding generateSwiftBinding !mOutletName]
  end
end
%  }
  
  //-------------------------------------------------------------------------------------------------------------------*
  //    deinit                                                                                                         *
  //-------------------------------------------------------------------------------------------------------------------*

  deinit {
    noteObjectDeallocation (self) ;
  }
  
  //-------------------------------------------------------------------------------------------------------------------*
  //    applicationWillTerminateAction                                                                                 *
  //-------------------------------------------------------------------------------------------------------------------*

  func applicationWillTerminateAction (NSNotification) {
%
if ([ATTRIBUTE_LIST_FOR_GENERATION length] + [ARRAY_MAP count]) > 0 then
  %    var ud = NSUserDefaults.standardUserDefaults ()\n%
end
foreach ATTRIBUTE_LIST_FOR_GENERATION do
  %    ud.setObject (%![mType preferencesSwiftSetter !mAttributeName]%, forKey:"%!PREFERENCES_NAME%:%!mAttributeName%")\n%
end
foreach ARRAY_MAP do
%  { NSMutableArray * array = [NSMutableArray new] ;
    for (%!mElementType->mTypeName->string% * object in self.%!lkey->string%) {
      [array addObject:[NSDictionary
        dictionaryWithObjectsAndKeys:
%foreach mAttributeListForImplementation do
%          %![mType preferencesSetterTransformerFunctionName]%(object.%!mAttributeName%), @"%!mAttributeName%",\n%
end
%          nil
        ]
      ] ;
    }
    [ud setObject:array forKey:@"%!PREFERENCES_NAME%:%!lkey->string%"] ;
  }
%
end
%  }

  //-------------------------------------------------------------------------------------------------------------------*

}

//---------------------------------------------------------------------------------------------------------------------*
