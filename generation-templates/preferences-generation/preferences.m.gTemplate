#import "%!PREFERENCES_NAME%.h"
#import "easy-bindings-utilities.h"
%if [TRANSIENT_LIST_FOR_IMPLEMENTATION length] > 0 then
  %#import "%!PREFERENCES_NAME%-transient-computations.h"%
end if%

//----------------------------------------------------------------------------*

%!PREFERENCES_NAME% * g_%!PREFERENCES_NAME% ;

//----------------------------------------------------------------------------*

@implementation %!PREFERENCES_NAME%

//----------------------------------------------------------------------------*
//    Synthesize properties                                                   *
//----------------------------------------------------------------------------*

%foreach ATTRIBUTE_LIST_FOR_GENERATION do
%@synthesize %!mPropertyName% ;\n%
end foreach%
//----------------------------------------------------------------------------*
//    Init                                                                    *
//----------------------------------------------------------------------------*

- (id) init {
  #ifdef EASY_BINDINGS_DEBUG
    NSLog (@"\%s", __PRETTY_FUNCTION__) ;
  #endif
  self = [super init] ;
  if (self) {
    #ifdef PM_COCOA_DEBUG
      objectHasBeenAllocated (self) ;
    #endif
    g_%!PREFERENCES_NAME% = self ;
  //---
%foreach ATTRIBUTE_LIST_FOR_GENERATION
  before
    %    NSUserDefaults * ud = [NSUserDefaults standardUserDefaults] ;\n%
    %    id value ;\n%
  do
    %    value = [ud objectForKey:@"%!PREFERENCES_NAME%:%!mPropertyName%"] ;\n%
    %    if (nil == value) {\n%
    %      %!mPropertyName% = %!mDefaultValueAsObjectiveCObject% ;\n%
    %    }else{\n%
    %      %!mPropertyName% = %![mType preferencesGetterTransformerFunctionName]% (value) ;\n%
    %    }\n%
end foreach
%  //---
    [[NSNotificationCenter defaultCenter]
      addObserver:self
      selector:@selector(applicationWillTerminateAction:)
      name:NSApplicationWillTerminateNotification
      object:nil
    ] ;
  }
  return self ;
}

//----------------------------------------------------------------------------*
//    applicationWillTerminateAction:                                         *
//----------------------------------------------------------------------------*

- (void) applicationWillTerminateAction: (NSNotification *) inNotification {
%foreach ATTRIBUTE_LIST_FOR_GENERATION
  before
    %  NSUserDefaults * ud = [NSUserDefaults standardUserDefaults] ;\n%
  do
    %  [ud setObject:%![mType preferencesSetterTransformerFunctionName]% (%!mPropertyName%) forKey:@"%!PREFERENCES_NAME%:%!mPropertyName%"] ;\n%
end foreach%}

//----------------------------------------------------------------------------*
//                    presentOutletErrorOnLine:message:                       *
//----------------------------------------------------------------------------*

- (void) presentOutletErrorOnLine: (int) inLineNumber message: (NSString *) inMessage {
  NSString * f = [[NSString stringWithCString:__FILE__ encoding:NSASCIIStringEncoding] lastPathComponent] ;
  NSMutableString * message = [NSMutableString stringWithCapacity:1000] ;
  [message appendFormat:@"File: \%@\\n", f] ;
  [message appendFormat:@"Line: \%d\\n\\n", inLineNumber] ;
  [message appendFormat:@"Message: \%@", inMessage] ;
  static NSPoint origin = {20.0F, 20.0F} ;
  const NSRect r = {origin, {300.0F, 200.0F}} ;
  origin.x += 20.0F ;
  origin.y += 20.0F ;
  NSWindow * window = [[NSWindow alloc] initWithContentRect:r
    styleMask:NSTitledWindowMask | NSClosableWindowMask
    backing:NSBackingStoreBuffered
    defer:YES
    screen:nil
  ] ;
  [window setTitle:@"Outlet Error"] ;
  NSView * contentView = [window contentView] ;
  const NSRect tfRect = NSInsetRect ([contentView bounds], 10.0F, 10.0F) ;
  NSTextField * tf = [[NSTextField alloc] initWithFrame:tfRect] ;
  [tf setEditable:NO] ;
  [tf setSelectable:YES] ;
  [tf setFont:[NSFont boldSystemFontOfSize:0.0F]] ;
  [tf setTextColor:[NSColor redColor]] ;
  [tf setStringValue:message] ;
  [contentView addSubview:tf] ;
  NSBeep () ;
  [window makeKeyAndOrderFront:nil] ;
}

//----------------------------------------------------------------------------*
//    awakeFromNib                                                            *
//----------------------------------------------------------------------------*

- (void) awakeFromNib {
  #ifdef EASY_BINDINGS_DEBUG
    NSLog (@"\%s", __PRETTY_FUNCTION__) ;
  #endif
%
foreach OUTLET_DECLARATION_LIST do
   %//--- check %!mOutletName%' outlet not nil\n%
   %  if (nil == %!mOutletName%) {\n%
   %    [self presentOutletErrorOnLine:__LINE__ message:@"the '%!mOutletName%' outlet is nil"] ;\n%
   %  }\n%
  foreach mOutletBindingList do
   %//--- '%!mOutletName%' outlet: %!mBindingName%' binding\n%
   %  [%!mOutletName%\n%
   %    bind:@"%!mBindingName%"\n%
   %    toObject:%!mObservedObjectName%\n%
   %    withKeyPath:@"%!mObservableAttributeName%"\n%
   %    options:%
   if [mOutletBindingOptionList length] == 0 then
     %nil\n%
   else
     %[NSDictionary dictionaryWithObjectsAndKeys:\n%
     foreach mOutletBindingOptionList do
       %      %!mValue1%, @%![mValue0 utf8Representation]%,\n%
     end foreach
     %      nil\n%
     %    ]\n%
   end if
   %  ] ;\n%
  end foreach
end foreach
%}

//----------------------------------------------------------------------------*
//    willChangeValueForKey                                                   *
//----------------------------------------------------------------------------*

- (void) willChangeValueForKey:(NSString *) inKey {
  // NSLog (@"\%s:'\%@'", __PRETTY_FUNCTION__, inKey) ;
%
foreach TRIGGERED_KEYS
  before %  if %
  do
  %([inKey isEqualToString:@"%!key%"]) {\n%
  foreach mList do
    %    %!mValue%_hasBeenComputed = NO ;\n%
  end foreach
  %  }%
  between
    %else if %
  after
    %\n%
end foreach
%  [super willChangeValueForKey:inKey] ;
}

%foreach TRANSIENT_LIST_FOR_IMPLEMENTATION do
  %//----------------------------------------------------------------------------*\n%
  %//    '%!mTransientName%' transient                                  *\n%
  %//----------------------------------------------------------------------------*\n\n%
  %+ (NSSet *) keyPathsForValuesAffecting%![mTransientName stringByCapitalizingFirstCharacter]% {\n%
  %  return [NSSet setWithObjects:%
  foreach mDependencyList do
    % @"%!mMasterName%", %
  end foreach
  %nil] ;\n%
  %}\n\n%
  %//----------------------------------------------------------------------------*\n\n%
  %- (%![mType ocTypeName]%) %!mTransientName% {\n%
  %  if (!%!mTransientName%_hasBeenComputed) {\n%
  %    %!mTransientName%_hasBeenComputed = YES ;\n%
  %    %!mTransientName%_cachedValue = %
  if [mType copyOnAssign] then %[% end if
  %compute_%!PREFERENCES_NAME%_%!mTransientName% (%
  foreach mDependencyList
  do %[self %!mMasterName%]%
  between %, %
  end foreach
  %)%
  if [mType copyOnAssign] then % copy]% end if
  % ;\n%
  %  }\n%
  %  return %!mTransientName%_cachedValue ;\n%
  %}\n\n%
  %//----------------------------------------------------------------------------*\n\n%
  %- (void) set%![mTransientName stringByCapitalizingFirstCharacter]%: (%![mType ocTypeName]%) inUnusedValue {\n%
  %  // A transient property cannot be set: this method has no effect\n%
  %}\n\n%
end foreach
%//----------------------------------------------------------------------------*

@end

