#import "easy-bindings-utilities.h"
#import "PMAllocationDebug.h"
#import "PMTransientDependancyManager.h"
#import "%!PREFERENCES_NAME%.h"
%if [TRANSIENT_LIST_FOR_IMPLEMENTATION length] > 0 then
  %#import "%!PREFERENCES_NAME%-computations.h"\n%
end if
foreach INCLUSION_SET do
  %#import "%!key%.h"\n%
end foreach

foreach ARRAY_MAP do
%#import "%!mClassName%.h"\n%
end foreach

%#import <objc/runtime.h>

//----------------------------------------------------------------------------*

%!PREFERENCES_NAME% * g_%!PREFERENCES_NAME% ;

//----------------------------------------------------------------------------*

@implementation %!PREFERENCES_NAME%

//----------------------------------------------------------------------------*
//    Synthesize properties                                                   *
//----------------------------------------------------------------------------*

%foreach ATTRIBUTE_LIST_FOR_GENERATION do
%@synthesize %!mPropertyName% ;\n%
end foreach
foreach ARRAY_MAP do
%@synthesize %!lkey->string% ;\n%
end foreach
%
//----------------------------------------------------------------------------*
//    Init                                                                    *
//----------------------------------------------------------------------------*

- (id) init {
  #ifdef EASY_BINDINGS_DEBUG
    NSLog (@"\%s", __PRETTY_FUNCTION__) ;
  #endif
  self = [super init] ;
  if (self) {
    macroNoteObjectAllocation (self) ;
    g_%!PREFERENCES_NAME% = self ;
  //---
%foreach ATTRIBUTE_LIST_FOR_GENERATION
  before
    %    NSUserDefaults * ud = [NSUserDefaults standardUserDefaults] ;\n%
    %    id value ;\n%
  do
    %    value = [ud objectForKey:@"%!PREFERENCES_NAME%:%!mPropertyName%"] ;\n%
    %    if (nil == value) {\n%
    %      self.%!mPropertyName% = %!mDirectDefaultValue% ;\n%
    %    }else{\n%
    %      self.%!mPropertyName% = %![mType preferencesGetterTransformerFunctionName]% (value) ;\n%
    %    }\n%
end foreach


foreach ARRAY_MAP do
%    { NSMutableArray * array = [NSMutableArray new] ;
      for (NSDictionary * dict in [ud objectForKey:@"%!PREFERENCES_NAME%:%!lkey->string%"]) {
        %!mClassName% * object = [[%!mClassName% alloc]
%foreach mAttributeListForImplementation
before %          initWith%
do     ![mPropertyName stringByCapitalizingFirstCharacter]%:%![mType preferencesGetterTransformerFunctionName]%([dict objectForKey:@"%!mPropertyName%"])\n%
between %          with%
end foreach
%        ] ;
        [array addObject:object] ;
      }
      self.pathes = array ;
    }
%
end foreach


%  //---
    [[NSNotificationCenter defaultCenter]
      addObserver:self
      selector:@selector(applicationWillTerminateAction:)
      name:NSApplicationWillTerminateNotification
      object:nil
    ] ;
  //---
    [self %!PREFERENCES_NAME%_did_init] ;
  }
  return self ;
}

//----------------------------------------------------------------------------*
//    Dealloc                                                                 *
//----------------------------------------------------------------------------*

- (void) dealloc {
  macroNoteObjectDeallocation (self) ;
}

//----------------------------------------------------------------------------*
//    applicationWillTerminateAction:                                         *
//----------------------------------------------------------------------------*

- (void) applicationWillTerminateAction: (NSNotification *) inNotification {
%foreach ATTRIBUTE_LIST_FOR_GENERATION
  before
    %  NSUserDefaults * ud = [NSUserDefaults standardUserDefaults] ;\n%
  do
    %  [ud setObject:%![mType preferencesSetterTransformerFunctionName]% (%!mPropertyName%) forKey:@"%!PREFERENCES_NAME%:%!mPropertyName%"] ;\n%
end foreach
foreach ARRAY_MAP do
%  { NSMutableArray * array = [NSMutableArray new] ;
    for (%!mClassName% * object in self.%!lkey->string%) {
      [array addObject:[NSDictionary
        dictionaryWithObjectsAndKeys:
%foreach mAttributeListForImplementation do
%          %![mType preferencesSetterTransformerFunctionName]%(object.%!mPropertyName%), @"%!mPropertyName%",\n%
end foreach
%          nil
        ]
      ] ;
    }
    [ud setObject:array forKey:@"%!PREFERENCES_NAME%:%!lkey->string%"] ;
  }
%
end foreach

%}

//----------------------------------------------------------------------------*
//    awakeFromNib                                                            *
//----------------------------------------------------------------------------*

- (void) awakeFromNib {
  #ifdef EASY_BINDINGS_DEBUG
    NSLog (@"\%s", __PRETTY_FUNCTION__) ;
  #endif
%
foreach CONTROLLER_MAP do
  %//--- '%!lkey->string%' controller instanciation\n%
  %  %!lkey->string% = [%!mControllerClassName% new] ;\n%
  %  [%!lkey->string% setObjectClass:[%!mControlledClassOrEntityName->string% class]] ;\n%
end foreach

foreach CONTROLLER_MAP do
  foreach mControllerBindingList
  before 
    %//--- '%!lkey->string%' controller bindings\n%
  do
   ![mBinding generateBinding !lkey->string]
  end foreach
end foreach

foreach OUTLET_DECLARATION_LIST do
   %//--- check %!mOutletName%' outlet not nil\n%
   %  if (nil == %!mOutletName%) {\n%
   %    presentErrorWindow (__FILE__, __LINE__, @"the '%!mOutletName%' outlet is nil") ;\n%
   %  }\n%
  foreach mOutletBindingList do
    ![mBinding generateBinding !mOutletName]
  end foreach
end foreach
%
//---
  [self %!PREFERENCES_NAME%_did_awakeFromNib] ;
}

%if [ATTRIBUTE_LIST_FOR_GENERATION length] > 0 then
%//----------------------------------------------------------------------------*
//    Swizzle                                                                 *
//----------------------------------------------------------------------------*

+ (void) load {
  Method original, swizzled ;
%
foreach ATTRIBUTE_LIST_FOR_GENERATION do
%  original = class_getInstanceMethod (self, @selector (set%![mPropertyName stringByCapitalizingFirstCharacter]%:));
  swizzled = class_getInstanceMethod (self, @selector (set%![mPropertyName stringByCapitalizingFirstCharacter]%_swizzle:));
  method_exchangeImplementations (original, swizzled) ;
%end foreach
%}

%
end if

foreach ATTRIBUTE_LIST_FOR_GENERATION do
%//----------------------------------------------------------------------------*
//    '%!mPropertyName%' attribute                                            *
//----------------------------------------------------------------------------*

- (void) set%![mPropertyName stringByCapitalizingFirstCharacter]%_swizzle: (%![mType ocTypeName]%) inObject {
%if [mType equalMethod] == "" then
%  if (%!mPropertyName% != inObject) {
%else
%  if (! [self.%!mPropertyName% %![mType equalMethod]%:inObject]) {
%end if%    [self set%![mPropertyName stringByCapitalizingFirstCharacter]%_swizzle:inObject] ;
    [%!mPropertyName%_observers makeObjectsPerformSelector:@selector (%!["preference." . PREFERENCES_NAME . "." . mPropertyName identifierRepresentation]%_didChange)] ;
%!generateTransientTriggering [!mPropertyName !PREFERENCES_NAME !TRANSIENT_LIST_FOR_IMPLEMENTATION !"preference"]

%  }
}

//----------------------------------------------------------------------------*

- (void) addObserverOf_%!mPropertyName%: (id) inObserver {
  if (nil == %!mPropertyName%_observers) {
    %!mPropertyName%_observers = [NSMutableSet new] ;
  }
  [%!mPropertyName%_observers addObject:inObserver] ;
  [inObserver performSelector:@selector (%!["preference." . PREFERENCES_NAME . "." . mPropertyName identifierRepresentation]%_didChange)] ;
}

//----------------------------------------------------------------------------*

- (void) removeObserverOf_%!mPropertyName%: (id) inObserver {
  [%!mPropertyName%_observers removeObject:inObserver] ;
  [inObserver performSelector:@selector (%!["preference." . PREFERENCES_NAME . "." . mPropertyName identifierRepresentation]%_didChange)] ;
}

%end foreach

!generateTransientCacheRoutine [!PREFERENCES_NAME !TRANSIENT_LIST_FOR_IMPLEMENTATION]

%//----------------------------------------------------------------------------*


