//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

@objc(%!DOCUMENT_NAME%) class %!DOCUMENT_NAME% : EBManagedDocument {

  //····················································································································
  //    Outlets
  //····················································································································

%
for () in OUTLET_GENERATION_MAP do
%  @IBOutlet var %!lkey.string% : %!mOutletTypeName%?\n%
end
%
  //····················································································································
  //    Properties
  //····················································································································

%
for () in SIMPLE_PROPERTY_LIST_FOR_GENERATION do
%  var %!mStoredPropertyName%_property = EBEntityProperty <%![mType swiftTypeName]%> (%!mDefaultValueInSwift%)\n%
end


%
  //····················································································································
  //    Transient properties
  //····················································································································

%

for () in TRANSIENT_LIST_FOR_IMPLEMENTATION do
  if not mIsArray then
    %  var %!mTransientName%_property = EBTransientProperty_%![mTransientType swiftTypeName]% ()\n%
  end
end

%
  //····················································································································
  //    Transient arraies
  //····················································································································

%

for () in TRANSIENT_LIST_FOR_IMPLEMENTATION do
  if mIsArray then
    %  var %!mTransientName%_property = TransientArrayOf_%![mTransientType swiftTypeName]% ()\n%
  end
end

%
  //····················································································································
  //    Array Controllers
  //····················································································································

%
for () in ARRAY_CONTROLLER_LIST do
%  var %!mControllerName% = ArrayController_%!mOwnerName%_%!mControllerName% ()\n%
end
%
  //····················································································································
  //    Selection Controllers
  //····················································································································

%
for () in SELECTION_CONTROLLER_LIST do
%  var %!mSelectionControllerName% = SelectionController_%!mOwnerName%_%!mSelectionControllerName% ()\n%
end
%
  //····················································································································
  //    Custom object Controllers
  //····················································································································

%
for () in CUSTOM_OBJECT_CONTROLLER_LIST do
%  var %!mCustomObjectControllerName% = %!mClassNameForSwift% ()\n%
end
%
  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
%
for () in ARRAY_CONTROLLER_LIST do
%    %!mControllerName%.addExplorer (name: "%!mControllerName%", y:&y, view:view)\n%
end
for () in SELECTION_CONTROLLER_LIST do
%    %!mSelectionControllerName%.addExplorer (name: "%!mSelectionControllerName%", y:&y, view:view)\n%
end
%    super.populateExplorerWindow (&y, view:view)
  }

  //····················································································································
  //    windowNibName
  //····················································································································

  override var windowNibName: String {
    return "%!DOCUMENT_NAME%"
  }

  //····················································································································
  //    rootEntityClassName
  //····················································································································

  override func rootEntityClassName () -> String {
    return "%!ROOT_ENTITY_NAME%"
  }

  //····················································································································
  //    rootObject
  //····················································································································

  var rootObject : %!ROOT_ENTITY_NAME% { get { return mRootObject as! %!ROOT_ENTITY_NAME% } }

  //····················································································································
  //    windowControllerDidLoadNib
  //····················································································································

  override func windowControllerDidLoadNib (_ aController: NSWindowController) {
  //--------------------------- Outlet checking
%

for () in OUTLET_GENERATION_MAP do
   %    if nil == %!lkey.string% {\n%
   %      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the '%!lkey.string%' outlet is nil") ;\n%
   %//    }else if !%!lkey.string%!.isKindOfClass (%!mOutletTypeName%) {\n%
   %//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the '%!lkey.string%' outlet is not an instance of '%!mOutletTypeName%'") ;\n%
   %    }\n%
end
%  //--------------------------- Array controllers
%
for () in ARRAY_CONTROLLER_LIST do
%    self.%!mControllerName%.bind_modelAndView (
      model: %!mModelString%,
      tableViewArray: [%
      ![TABLE_VALUE_BINDING_GENERATION_LIST outletNameListForController !mControllerName]
      %],
      file: #file,
      line: #line
    )\n%
end
%  //--------------------------- Selection controllers
%
for () in SELECTION_CONTROLLER_LIST do
%    %!mSelectionControllerName%.bind_selection (
      model: %!mBoundControllerName%.%!mBoundControllerPropertyName%_property,
      file: #file,
      line: #line
    )\n%
end
%  //--------------------------- Custom object controllers
%
for () in CUSTOM_OBJECT_CONTROLLER_LIST do
%    %!mCustomObjectControllerName%.setModel (self.rootObject)\n%
end
%  //--------------------------- Transient compute functions
%
for () in TRANSIENT_LIST_FOR_IMPLEMENTATION do
  %    self.%!mTransientName%_property.readModelFunction = { [weak self] in\n%
  %      if let unwSelf = self {\n%
  ![mDependencyList transientComputeFunctionCall !DOCUMENT_NAME !mTransientName]
  %      }else{\n%
  %        return .empty\n%
  %      }\n%
  %    }\n%
end
%  //--------------------------- Install property observers for transients
%
for () in TRANSIENT_LIST_FOR_IMPLEMENTATION do
for () in mDependencyList do
%    %![mDependency generateAddObserverCall]% (self.%!mTransientName%_property)\n%
end
end
%  //--------------------------- Install regular bindings
%
for () in REGULAR_BINDINGS_GENERATION_LIST do
  %    %!mOutletName%?.bind_%!mBindingName% (%
  for () in mBoundObjectList do
    !mBoundObjectString%, %
  end
  %file: #file, line: #line%!mBindingOptionsString%)\n%
end
%  //--------------------------- Install multiple bindings
%
for () in MULTIPLE_BINDING_GENERATION_LIST do
  %    do{\n%
  %      let controller = MultipleBindingController_%!mBindingName% (\n%
  %        computeFunction:{\n%
  %          return %![mBoundObjectExpression expressionString]%\n%
  %        },\n%
  %        outlet:self.%!mOutletName%\n%
  %      )\n%
  for () in [mBoundObjectExpression observedModelSet] do
  %      %!key%.addEBObserver (controller)\n%
  end
  %      mController_%!mOutletName%_%!mBindingName% = controller\n%
  %    }\n%
end
%  //--------------------------- Set targets / actions
%for () in TARGET_ACTION_LIST do
%    %!mOutletName%?.target = %!mTargetName%\n%
%    %!mOutletName%?.action = #selector (%!mTargetTypeName%.%!mActionName% (_:))\n%
end
%  //--------------------------- Update display
    super.windowControllerDidLoadNib (aController)
    flushOutletEvents ()
  }

  //····················································································································
  //   removeWindowController
  //····················································································································

  override func removeUserInterface () {
  //--------------------------- Unbind regular bindings
%
for () in REGULAR_BINDINGS_GENERATION_LIST do
  %    %!mOutletName%?.unbind_%!mBindingName% ()\n%
end
%  //--------------------------- Unbind multiple bindings
%
for () in MULTIPLE_BINDING_GENERATION_LIST do
  for () in [mBoundObjectExpression observedModelSet] do
  %    %!key%.removeEBObserver (mController_%!mOutletName%_%!mBindingName%!)\n%
  end
  %    mController_%!mOutletName%_%!mBindingName% = nil\n%
end
%  //--------------------------- Uninstall compute functions for transients
%
for () in TRANSIENT_LIST_FOR_IMPLEMENTATION do
  %    self.%!mTransientName%_property.readModelFunction = nil\n%
end
%  //--------------------------- Unbind array controllers
%
for () in ARRAY_CONTROLLER_LIST do
%    %!mControllerName%.unbind_modelAndView ()\n%
end
%  //--------------------------- Unbind selection controllers
%
for () in SELECTION_CONTROLLER_LIST do
%    %!mSelectionControllerName%.unbind_selection ()\n%
end
%  //--------------------------- Uninstall property observers for transients
%
for () in TRANSIENT_LIST_FOR_IMPLEMENTATION do
for () in mDependencyList do
%    %![mDependency generateRemoveObserverCall]% (self.%!mTransientName%_property)\n%
end
end
%  //--------------------------- Remove targets / actions
%for () in TARGET_ACTION_LIST do
%    %!mOutletName%?.target = nil\n%
end
%  //--------------------------- Clean up outlets
%for () in OUTLET_GENERATION_MAP do
   %    self.%!lkey.string%?.ebCleanUp ()\n%
end
%  }

  //····················································································································
  //    Multiple bindings controller
  //····················································································································

%for () in MULTIPLE_BINDING_GENERATION_LIST do
  %  fileprivate var mController_%!mOutletName%_%!mBindingName% : MultipleBindingController_%!mBindingName%?\n%
end
%
  //····················································································································

}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

