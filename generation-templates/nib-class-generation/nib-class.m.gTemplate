#import "easy-bindings-utilities.h"
#import "PMAllocationDebug.h"
#import "PMApplication.h"
#import "%!PREFERENCES_NAME%.h"
%if [TRANSIENT_LIST_FOR_IMPLEMENTATION length] > 0 then
  %#import "%!PREFERENCES_NAME%-computations.h"\n%
end
foreach INCLUSION_SET do
  %#import "%!key%.h"\n%
end

foreach ARRAY_MAP do
%#import "%!mElementType->mTypeName->string%.h"\n%
end

%#import <objc/runtime.h>

//----------------------------------------------------------------------------*

@implementation %!PREFERENCES_NAME%

//----------------------------------------------------------------------------*
//    Synthesize properties                                                   *
//----------------------------------------------------------------------------*

%foreach ATTRIBUTE_LIST_FOR_GENERATION do
%@synthesize %!mAttributeName% ;\n%
end
foreach ARRAY_MAP do
%@synthesize %!lkey->string% ;\n%
end
%
//----------------------------------------------------------------------------*
//    Init                                                                    *
//----------------------------------------------------------------------------*

- (instancetype) init {
  #ifdef EASY_BINDINGS_DEBUG
    NSLog (@"\%s", __PRETTY_FUNCTION__) ;
  #endif
  self = [super init] ;
  if (self) {
    macroNoteObjectAllocation ;
  //---
%
foreach ATTRIBUTE_LIST_FOR_GENERATION do
  %    self.%!mAttributeName% = %!mDirectOCDefaultValue% ;\n%
end

foreach ARRAY_MAP do
  %    self.%!lkey->string% = [NSMutableArray new] ;\n%
end

%  //--- Load NIB
    const BOOL ok = [NSBundle loadNibNamed:@"%!PREFERENCES_NAME%" owner:self] ;
    if (! ok) {
      presentErrorWindow (__FILE__, __LINE__, @"%!PREFERENCES_NAME% cannot load NIB") ;
      self = nil ;
    }
  }
  return self ;
}

//----------------------------------------------------------------------------*
//    Dealloc                                                                 *
//----------------------------------------------------------------------------*

- (void) dealloc {
  macroNoteObjectDeallocation ;
  macroSuperDealloc ;
}

//----------------------------------------------------------------------------*
//    awakeFromNib                                                            *
//----------------------------------------------------------------------------*

- (void) awakeFromNib {
  #ifdef EASY_BINDINGS_DEBUG
    NSLog (@"\%s", __PRETTY_FUNCTION__) ;
  #endif
%
foreach CONTROLLER_MAP do
  %//--- '%!lkey->string%' controller instanciation\n%
  %  %!lkey->string% = [%!mControllerClassName% new] ;\n%
  %  [%!lkey->string% setObjectClass:[%!mControlledClassOrEntityName->string% class]] ;\n%
end

foreach CONTROLLER_MAP do
  foreach mControllerBindingList
  before 
    %//--- '%!lkey->string%' controller bindings\n%
  do
   ![mBinding generateObjectiveCBinding !lkey->string]
  end
end

foreach OUTLET_DECLARATION_LIST do
   %//--- check %!mOutletName%' outlet not nil\n%
   %  if (nil == %!mOutletName%) {\n%
   %    presentErrorWindow (__FILE__, __LINE__, @"the '%!mOutletName%' outlet is nil") ;\n%
   %  }\n%
  foreach mOutletBindingList do
    ![mBinding generateObjectiveCBinding !mOutletName]
  end
end
%
//---
  [self %!PREFERENCES_NAME%_did_awakeFromNib] ;
}

//----------------------------------------------------------------------------*
//   reset                                                                    *
//----------------------------------------------------------------------------*

- (void) reset {
  //NSLog (@"\%s", __PRETTY_FUNCTION__) ;
//--------------------------- Add Signature observer
%
%//--- Unbind Outlets
%foreach OUTLET_DECLARATION_LIST do
  foreach > mOutletBindingList do
    ![mBinding generateObjectiveCRemoveBinding !mOutletName]
  end
end
%//--- Unbind Controllers
%foreach CONTROLLER_MAP do
  foreach mControllerBindingList do
   ![mBinding generateObjectiveCRemoveBinding !lkey->string]
  end
end
%//--- Remove Transient observers
%!generateRemoveOCObserverForTransients [!TRANSIENT_LIST_FOR_IMPLEMENTATION]
%//--- Release controllers
%foreach CONTROLLER_MAP do
  %  %!lkey->string%.content = nil ;\n%
  %  macroReleaseSetToNil (%!lkey->string%) ;\n%
end
%//--- Remove circularities in outlets
%foreach OUTLET_DECLARATION_LIST do
  if mImplementsDeallocProtocol then
    %  [%!mOutletName% objectWillBeDeallocated] ;\n%
  end 
end
%}


%if [ATTRIBUTE_LIST_FOR_GENERATION length] > 0 then
%//----------------------------------------------------------------------------*
//    Swizzle                                                                 *
//----------------------------------------------------------------------------*

+ (void) load {
  Method original, swizzled ;
%
foreach ATTRIBUTE_LIST_FOR_GENERATION do
%  original = class_getInstanceMethod (self, @selector (set%![mAttributeName stringByCapitalizingFirstCharacter]%:));
  swizzled = class_getInstanceMethod (self, @selector (set%![mAttributeName stringByCapitalizingFirstCharacter]%_swizzle:));
  method_exchangeImplementations (original, swizzled) ;
%end
%}

%
end

foreach ATTRIBUTE_LIST_FOR_GENERATION do
%//----------------------------------------------------------------------------*
//    '%!mAttributeName%' attribute                                            *
//----------------------------------------------------------------------------*

- (void) set%![mAttributeName stringByCapitalizingFirstCharacter]%_swizzle: (%![mType ocTypeName]%) inObject {
  if (! (%![mType equalExpression!"self." . mAttributeName !"inObject"]%)) {
    [self set%![mAttributeName stringByCapitalizingFirstCharacter]%_swizzle:inObject] ;
    [%!mAttributeName%_observers makeObjectsPerformSelector:@selector (%!["preference." . PREFERENCES_NAME . "." . mAttributeName identifierRepresentation]%_didChange)] ;
%!generateObjectiveCTransientTriggering [!mAttributeName !PREFERENCES_NAME !TRANSIENT_LIST_FOR_IMPLEMENTATION !"preference"]
%  }
}

//----------------------------------------------------------------------------*

- (void) addObserverOf_%!mAttributeName%: (id) inObserver {
  if (nil == %!mAttributeName%_observers) {
    %!mAttributeName%_observers = [NSMutableSet new] ;
  }
  [%!mAttributeName%_observers addObject:inObserver] ;
  [inObserver performSelector:@selector (%!["preference." . PREFERENCES_NAME . "." . mAttributeName identifierRepresentation]%_didChange)] ;
}

//----------------------------------------------------------------------------*

- (void) removeObserverOf_%!mAttributeName%: (id) inObserver {
  [%!mAttributeName%_observers removeObject:inObserver] ;
  [inObserver performSelector:@selector (%!["preference." . PREFERENCES_NAME . "." . mAttributeName identifierRepresentation]%_didChange)] ;
}

%end

!generateObjectiveCTransientCacheRoutine [!PREFERENCES_NAME !TRANSIENT_LIST_FOR_IMPLEMENTATION]

%//----------------------------------------------------------------------------*


