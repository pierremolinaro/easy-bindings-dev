
import Foundation

//----------------------------------------------------------------------------*

enum %!ENUM_TYPE_NAME% : Int {
%
for () in CONSTANT_ORDERED_LIST do index idx
   %  case %!mValue->string% = %![idx string]%\n%
end
%
  
  func string () -> String {
    switch self {
%
for () in CONSTANT_ORDERED_LIST do index idx
   %      case %!mValue->string% : return "%!mValue->string%" // %![idx string]%\n%
end
%    }
  }
}

//----------------------------------------------------------------------------*

/*  func storeInDictionary (inKey : String,
                          inout ioDictionary : NSMutableDictionary) {
    ioDictionary.setObject (NSNumber.numberWithInteger (toRaw ()), forKey: inKey)
  }*/
 
 //----------------------------------------------------------------------------*

extension NSDictionary {
  func read%!ENUM_TYPE_NAME%  (inKey : String) -> %!ENUM_TYPE_NAME% {
    let v : Int? = objectForKey (inKey)?.integerValue
    var result = %!ENUM_TYPE_NAME%.%![CONSTANT_ORDERED_LIST mValueAtIndex !0]->string%
    if v != nil {
      let e : %!ENUM_TYPE_NAME%? = %!ENUM_TYPE_NAME%.fromRaw (v!)
      if e != nil {
        result = e!
      }
    }
    return result
  }
}

//----------------------------------------------------------------------------*

