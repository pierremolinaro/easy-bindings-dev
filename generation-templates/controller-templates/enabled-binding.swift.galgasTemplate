@objc(EnableController_%!OUTLET_PROPRIETARY_CLASS_NAME%_%!OUTLET_NAME%)
class EnableController_%!OUTLET_PROPRIETARY_CLASS_NAME%_%!OUTLET_NAME% : NSObject, PMTransientEventProtocol, PMUserClassName {

%for () in [ENABLE_EXPRESSION observedObjectTypeNameList] do index idx
  %  weak var mObject%![idx string]% : %!mValue%? = nil\n%
end
%  weak var mOutlet : PMEnableProtocol? = nil

  //-------------------------------------------------------------------------------------------------------------------*
 
  func userClassName () -> String { return "EnableController_%!OUTLET_PROPRIETARY_CLASS_NAME%_%!OUTLET_NAME%" }

  //-------------------------------------------------------------------------------------------------------------------*

  private let mPrivateUniqueIndex : Int ;
  var uniqueIndex : Int { get { return mPrivateUniqueIndex } }

  //-------------------------------------------------------------------------------------------------------------------*

  init (%
for () in [ENABLE_EXPRESSION observedObjectTypeNameList] do index idx
  %object%![idx string]% : %!mValue%?, %
end  
%outlet : PMEnableProtocol?, file : String, line : Int) {
    mPrivateUniqueIndex = getUniqueIndex ()
%
for () in [ENABLE_EXPRESSION observedObjectTypeNameList] do index idx
  %    mObject%![idx string]% = object%![idx string]%\n%
end  
%    super.init ()
    noteObjectAllocation (self)
    if let unwrappedOutlet = outlet {
      mOutlet = unwrappedOutlet
    }
%
for () in [ENABLE_EXPRESSION observedModelNameList] do index idx
  %    mObject%![idx string]%?.%!mValue%.addObserver (self, inTrigger:true)\n%
end  
%  }

  //-------------------------------------------------------------------------------------------------------------------*
  
  func unregister () {
%
for () in [ENABLE_EXPRESSION observedModelNameList] do index idx
  %    mObject%![idx string]%?.%!mValue%.removeObserver(self, inTrigger:true)\n%
end  
%  }

  //-------------------------------------------------------------------------------------------------------------------*
  
  deinit {
    noteObjectDeallocation (self)
  }
  
  //-------------------------------------------------------------------------------------------------------------------*

  func noteModelDidChange () {
  }

  //-------------------------------------------------------------------------------------------------------------------*

  func trigger () {
    if let outlet = mOutlet {
%
for () in [ENABLE_EXPRESSION observedModelNameList] do index idx
  %      if let object%![idx string]% = mObject%![idx string]% {\n%
end  
%        outlet.setEnableFromBinding (%![ENABLE_EXPRESSION enableExpressionString]%)
%for () in [ENABLE_EXPRESSION observedModelNameList] do index idx
  %      }\n%
end  
%    }
  }

  //-------------------------------------------------------------------------------------------------------------------*

  var transientEventIndex : PMTransientIndex { get { return PMTransientIndex.kTriggerOutletDisplay } }

  //-------------------------------------------------------------------------------------------------------------------*

  func noteTransientChanged () {
  }
  
  //-------------------------------------------------------------------------------------------------------------------*
}

