@objc(Controller_$OBJECTCLASS$_$MODEL$_PMColorWell_color)
class Controller_$OBJECTCLASS$_$MODEL$_PMColorWell_color : NSObject, PMTriggerProtocol {

  weak var mObject : $OBJECTCLASS$? = nil
  weak var mOutlet: PMColorWell? = nil
  var mSendContinously : Bool

  //-------------------------------------------------------------------------------------------------------------------*

  init (object : $OBJECTCLASS$, outlet : PMColorWell?, file : String, line : Int, sendContinously : Bool) {
    mObject = object
    mOutlet = outlet
    mSendContinously = sendContinously
    super.init ()
    noteObjectAllocation (self)
    if let outlet = mOutlet {
      outlet.target = self
      outlet.action = "action:"
      outlet.continuous = true
    }
    mObject?.addObserverOf_$MODEL$ (self)
  }

  //-------------------------------------------------------------------------------------------------------------------*
  
  deinit {
    noteObjectDeallocation (self)
    mOutlet?.target = nil
    mOutlet?.action = nil
    mObject?.removeObserverOf_$MODEL$ (self)
  }
  
  //-------------------------------------------------------------------------------------------------------------------*

  func trigger () {
    if (mOutlet != nil) && (mObject != nil) && (mOutlet!.color != mObject!.$MODEL$) {
      mOutlet!.color = mObject!.$MODEL$
    }
  }

  //-------------------------------------------------------------------------------------------------------------------*

  func action (sender : AnyObject!) {
    if (mOutlet != nil) && (mObject != nil) && (mOutlet!.color != mObject!.$MODEL$) {
      mObject!.$MODEL$ = mOutlet!.color
      if mSendContinously {
        runTriggers ()
      }
    }
  }

  //-------------------------------------------------------------------------------------------------------------------*

  var mTransientIndex = kTriggerOutletDisplay

  //-------------------------------------------------------------------------------------------------------------------*

  func noteTransientChanged () {
  }
  
  //-------------------------------------------------------------------------------------------------------------------*
}

