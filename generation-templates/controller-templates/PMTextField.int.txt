@objc(Controller_$OBJECTCLASS$_$MODEL$_PMTextField_int)
class Controller_$OBJECTCLASS$_$MODEL$_PMTextField_int : NSObject, PMTriggerProtocol, NSTextFieldDelegate {

  weak var mObject : $OBJECTCLASS$? = nil
  weak var mOutlet: PMTextField? = nil

  //-------------------------------------------------------------------------------------------------------------------*

  init (object : $OBJECTCLASS$, outlet : PMTextField?, file : String, line : Int) {
    mObject = object
    mOutlet = outlet
    super.init ()
    noteObjectAllocation (self)
    if let outlet = mOutlet {
      outlet.target = self
      outlet.action = "action:"
      outlet.delegate = self // For calling control: didFailToFormatString:errorDescription
      if outlet.formatter == nil {
        presentErrorWindow (file, line, "the outlet has no formatter")
      }else{
        let formatter : NSFormatter = outlet.formatter as NSFormatter
        if !formatter.isKindOfClass (NSNumberFormatter) {
          presentErrorWindow (file, line, "the formatter should be an NSNumberFormatter")
        }
      }
    }
    mObject?.addObserverOf_$MODEL$ (self)
  }

  //-------------------------------------------------------------------------------------------------------------------*
  
  deinit {
    noteObjectDeallocation (self)
    mOutlet?.target = nil
    mOutlet?.action = nil
    mOutlet?.delegate = nil
    mObject?.removeObserverOf_$MODEL$ (self)
  }
  
  //-------------------------------------------------------------------------------------------------------------------*

  func trigger () {
    if (mOutlet != nil) && (mObject != nil) && (mOutlet!.integerValue != Int (mObject!.$MODEL$)) {
      mOutlet!.integerValue = Int (mObject!.$MODEL$)
    }
  }

  //-------------------------------------------------------------------------------------------------------------------*

  func action (sender : AnyObject!) {
    if (mOutlet != nil) && (mObject != nil) && (mOutlet!.integerValue != Int (mObject!.$MODEL$)) {
      mObject!.$MODEL$ = Int64 (mOutlet!.integerValue)
    }
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    NSTextFieldDelegate delegate function                                                                          *
  //-------------------------------------------------------------------------------------------------------------------*
  
  func control (control: NSControl!,
                didFailToFormatString string: String!,
                errorDescription error: String!) -> Bool {
    let alert = NSAlert ()
    alert.messageText = error
    alert.informativeText = "Please provide a valid value."
    alert.addButtonWithTitle ("Ok")
    alert.addButtonWithTitle ("Discard Change")
    alert.beginSheetModalForWindow (mOutlet!.window, completionHandler:{(response : NSModalResponse) -> Void in
      if response == NSAlertSecondButtonReturn { // Discard Change
        self.mOutlet!.integerValue = Int (self.mObject!.$MODEL$)
      }
    })
    return false
  }

  //-------------------------------------------------------------------------------------------------------------------*

  var mTransientIndex = kTriggerOutletDisplay

  //-------------------------------------------------------------------------------------------------------------------*

  func noteTransientChanged () {
  }
  
  //-------------------------------------------------------------------------------------------------------------------*
}

