import Cocoa

//---------------------------------------------------------------------------------------------------------------------*

@objc(%!ENTITY_NAME%) class %!ENTITY_NAME% : PMManagedObject {

%for () in ATTRIBUTE_LIST_FOR_GENERATION do
%
  //-------------------------------------------------------------------------------------------------------------------*
  //    %!["Attribute: " + mAttributeName stringByRightPadding !111 !' ']%*
  //-------------------------------------------------------------------------------------------------------------------*\n\n%
%  private var %!mAttributeName%_explorer : NSTextField? = nil\n%
%  private var %!mAttributeName%_observers = NSMutableSet ()\n%
%  var %!mAttributeName% : %![mAttributeType swiftTypeName]% = %!mDefaultValueInSwift% {
    didSet {
      if %!mAttributeName% != oldValue {
        mUndoManager?.registerUndoWithTarget (self, selector:"undoFor_%!mAttributeName%:", object:%![mAttributeType transformerForRegisterUndoWithTarget !"oldValue"]%)
        %!mAttributeName%_explorer?.stringValue = %![mAttributeType valueAccessorForExplorerWindow !mAttributeName]%
        for anyObject in %!mAttributeName%_observers {
          let object = anyObject as PMTriggerProtocol
          enterTriggerWithObject (object)
        }
      }
    }
  }

  func undoFor_%!mAttributeName% (value : %![mAttributeType swiftTypeUndoArgument]%) {
    %!mAttributeName% = %![mAttributeType transformerForUndo !"value"]%
  }

  func addObserverOf_%!mAttributeName% (inObserver : PMTriggerProtocol) {
    %!mAttributeName%_observers.addObject (inObserver)
    enterTriggerWithObject (inObserver)
  }
 
  func removeObserverOf_%!mAttributeName% (inObserver : PMTriggerProtocol) {
    %!mAttributeName%_observers.removeObject (inObserver)
    enterTriggerWithObject (inObserver)
  }

%
end
for () in ENTITY_CURRENT_RELATIONSHIP_LIST do
  if mIsToMany then
%  //-------------------------------------------------------------------------------------------------------------------*
  //    %!["To many relationship: " + mRelationshipName stringByRightPadding !111 !' ']%*
  //-------------------------------------------------------------------------------------------------------------------*

  var %!mRelationshipName%_observers = NSMutableSet ()
  var %!mRelationshipName%_explorer : NSPopUpButton?
  var %!mRelationshipName% : NSMutableArray = NSMutableArray () { // Set of %![mRelationshipType key]% entities
    didSet {
      if (oldValue !== %!mRelationshipName%) {
      //--- Register old value in undo manager
        mUndoManager?.registerUndoWithTarget (self, selector:"undoFor_%!mRelationshipName%:", object:oldValue)
      //--- Update explorer
        if %!mRelationshipName%_explorer != nil {
          updateManagedObjectToManyRelationshipDisplayForKey ("%!mRelationshipName%", popUpButton:%!mRelationshipName%_explorer)
        }
      //--- Removed object set
        var removedObjectSet = NSMutableSet ()
        removedObjectSet.addObjectsFromArray (oldValue)
        removedObjectSet.minusSet (NSSet (array:%!mRelationshipName%))
        for object : AnyObject in removedObjectSet {
          let managedObject = object as %![mRelationshipType key]%
          managedObject.%!mOppositeRelationshipName% = nil ;
        }
      //--- Added object set
        var addedObjectSet = NSMutableSet ()
        addedObjectSet.addObjectsFromArray (%!mRelationshipName%)
        addedObjectSet.minusSet (NSSet (array:oldValue))
        for object : AnyObject in addedObjectSet {
          let managedObject = object as %![mRelationshipType key]%
          managedObject.%!mOppositeRelationshipName% = self
        }
      //--- Notify observers object count did change
        for anyObject in %!mRelationshipName%_observers {
          let object = anyObject as PMTriggerProtocol
          enterTriggerWithObject (object)
        }
      }
    }
  }

  func undoFor_%!mRelationshipName% (object:NSMutableArray) {
    %!mRelationshipName% = object
  }
   
  func addObserverOf_%!mRelationshipName% (inObserver : PMTriggerProtocol) {
    %!mRelationshipName%_observers.addObject (inObserver)
    enterTriggerWithObject (inObserver)
  }

  func removeObserverOf_%!mRelationshipName% (inObserver : PMTriggerProtocol) {
    %!mRelationshipName%_observers.removeObject (inObserver)
    enterTriggerWithObject (inObserver)
  }
%
  end
end

for () in ENTITY_CURRENT_RELATIONSHIP_LIST do
  if not mIsToMany then
%  //-------------------------------------------------------------------------------------------------------------------*
  //    %!["To one relationship: " + mRelationshipName stringByRightPadding !111 !' ']%*
  //-------------------------------------------------------------------------------------------------------------------*

  private var %!mRelationshipName%_observers = NSMutableSet ()
  private var %!mRelationshipName%_explorer : NSButton?
  var %!mRelationshipName% : %![mRelationshipType key]%? = nil {
    didSet {
      if oldValue !== %!mRelationshipName% {
      //--- Register old value in undo manager
        mUndoManager?.registerUndoWithTarget (self, selector:"undoFor_%!mRelationshipName%:", object:oldValue)
      //--- Update explorer
        if %!mRelationshipName%_explorer != nil {
          updateManagedObjectToOneRelationshipDisplayForKey ("%!mRelationshipName%", button : %!mRelationshipName%_explorer)
        }
%    if mOppositeRelationshipIsToMany then
%      //--- Reset old opposite relation ship
        if let unwrappedOldValue = oldValue {
          let idx = unwrappedOldValue.%!mOppositeRelationshipName%.indexOfObjectIdenticalTo (self)
          if idx != NSNotFound {
            var array = unwrappedOldValue.%!mOppositeRelationshipName%.mutableCopy () as NSMutableArray
            array.removeObjectAtIndex (idx)
            unwrappedOldValue.%!mOppositeRelationshipName% = array
          }
        }
      //--- Set new opposite relation ship
        if let root = %!mRelationshipName% {
          let idx = root.%!mOppositeRelationshipName%.indexOfObjectIdenticalTo (self)
          if idx == NSNotFound {
            var array = root.%!mOppositeRelationshipName%.mutableCopy () as NSMutableArray
            array.addObject (self)
            root.%!mOppositeRelationshipName% = array
          }
        }
%    else
%     //--- Reset old opposite relation ship
        oldValue?.%!mOppositeRelationshipName% = nil
      //--- Set new opposite relation ship
        %!mRelationshipName%?.%!mOppositeRelationshipName% = self
%    end
%      //--- Notify observers
        for anyObject in %!mRelationshipName%_observers {
          let object = anyObject as PMTriggerProtocol
          enterTriggerWithObject (object)
        }
      }
    }
  }

  func undoFor_%!mRelationshipName% (object:%![mRelationshipType key]%) {
    %!mRelationshipName% = object
  }

  func addObserverOf_%!mRelationshipName% (inObserver : AnyObject) {
    %!mRelationshipName%_observers.addObject (inObserver)
    NSApp.sendAction ("%!["entity." + ENTITY_NAME + "." + mRelationshipName identifierRepresentation]%_didChange", to:inObserver, from:self)
  }

  func removeObserverOf_%!mRelationshipName% (inObserver : AnyObject) {
    %!mRelationshipName%_observers.removeObject (inObserver)
    NSApp.sendAction ("%!["entity." + ENTITY_NAME + "." + mRelationshipName identifierRepresentation]%_didChange", to:inObserver, from:self)
  }
%
  end
end

%
  //-------------------------------------------------------------------------------------------------------------------*
  //    init                                                                                                           *
  //-------------------------------------------------------------------------------------------------------------------*

  override init (undoManager : NSUndoManager) {
    super.init (undoManager:undoManager)
  //--- Register trigger objects
%
for () in TRANSIENT_MAP_FOR_IMPLEMENTATION do
for () in mDependencyList do
%    %![mDependency generateAddObserverCall]% (triggerObjectFor_%!["entity." + ENTITY_NAME + "." + lkey.string identifierRepresentation]%)\n%
end
end
%  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    deinit                                                                                                         *
  //-------------------------------------------------------------------------------------------------------------------*

  deinit {
  //--- Unregister trigger objects
%
for () in TRANSIENT_MAP_FOR_IMPLEMENTATION do
for () in mDependencyList do
%    %![mDependency generateRemoveObserverCall]% (triggerObjectFor_%!["entity." + ENTITY_NAME + "." + lkey.string identifierRepresentation]%)\n%
end
end
%  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    populateExplorerWindow                                                                                         *
  //-------------------------------------------------------------------------------------------------------------------*

  override func populateExplorerWindowWithRect (inout ioRect : NSRect, view : NSView) {
%for () in ATTRIBUTE_LIST_FOR_GENERATION do
%    %!mAttributeName%_explorer = createEntryForAttributeNamed ("%!mAttributeName%", ioRect:&ioRect, view:view)\n%
%    if let explorer = %!mAttributeName%_explorer {\n%
%      explorer.stringValue = %![mAttributeType valueAccessorForExplorerWindow !mAttributeName]%\n%
%    }\n%
end
%  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    clearObjectExplorer                                                                                            *
  //-------------------------------------------------------------------------------------------------------------------*

  override func clearObjectExplorer () {
%for () in ATTRIBUTE_LIST_FOR_GENERATION do
%    %!mAttributeName%_explorer = nil\n%
end
%    super.clearObjectExplorer ()
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    saveIntoDictionary                                                                                             *
  //-------------------------------------------------------------------------------------------------------------------*

  override func saveIntoDictionary (ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
%for () in ATTRIBUTE_LIST_FOR_GENERATION do
%    ioDictionary.setValue (%![mAttributeType transformForSavingInDictionary !mAttributeName]%, forKey: "%!mAttributeName%")\n%
end
%  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    setUpWithDictionary                                                                                            *
  //-------------------------------------------------------------------------------------------------------------------*

  override func setUpWithDictionary (inDictionary : NSDictionary,
                                     managedObjectArray : NSArray) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:managedObjectArray)
%for () in ATTRIBUTE_LIST_FOR_GENERATION do
%    %!mAttributeName% = inDictionary.read%![mAttributeType swiftTypeName]% ("%!mAttributeName%")\n%
end
%  }

%
for () in TRANSIENT_MAP_FOR_IMPLEMENTATION do
%  //-------------------------------------------------------------------------------------------------------------------*
  //    %!["Transient: " + lkey.string stringByRightPadding !111 !' ']%*
  //-------------------------------------------------------------------------------------------------------------------*\n\n%
%  var %!lkey.string%_observers = NSMutableSet ()\n%
%  var %!lkey.string%_cache : %![mTransientType swiftTypeName]%?\n%
%  var %!lkey.string% : %![mTransientType swiftTypeName]% {\n%
%    get {\n%
%      if %!lkey.string%_cache == nil {\n%
%        %!lkey.string%_cache = compute_%!ENTITY_NAME%_%!lkey.string% (%
for () in mDependencyList
do ![mDependency generateForComputeFunction]
between %, %
end
%)\n%
%      }\n%
%      return %!lkey.string%_cache!\n%
%    }
    set {
    }
  }

  func %!["entity." + ENTITY_NAME + "." + lkey.string identifierRepresentation]%_didChange () {
    for anyObject in %!lkey.string%_observers {
      let object = anyObject as PMTriggerProtocol
      enterTriggerWithObject (object)
    }
  }

   func addObserverOf_%!lkey.string% (inObserver : PMTriggerProtocol) {
    %!lkey.string%_observers.addObject (inObserver)
    enterTriggerWithObject (inObserver)
  }
 
  func removeObserverOf_%!lkey.string% (inObserver : PMTriggerProtocol) {
    %!lkey.string%_observers.removeObject (inObserver)
    enterTriggerWithObject (inObserver)
  }

  var triggerObjectFor_%!["entity." + ENTITY_NAME + "." + lkey.string identifierRepresentation]%_cache : PMTrigger_%!["entity." + ENTITY_NAME + "." + lkey.string identifierRepresentation]%? = nil
  var triggerObjectFor_%!["entity." + ENTITY_NAME + "." + lkey.string identifierRepresentation]% : PMTrigger_%!["entity." + ENTITY_NAME + "." + lkey.string identifierRepresentation]% {
    if nil == triggerObjectFor_%!["entity." + ENTITY_NAME + "." + lkey.string identifierRepresentation]%_cache {
      triggerObjectFor_%!["entity." + ENTITY_NAME + "." + lkey.string identifierRepresentation]%_cache = PMTrigger_%!["entity." + ENTITY_NAME + "." + lkey.string identifierRepresentation]% (object:self)
    }
    return triggerObjectFor_%!["entity." + ENTITY_NAME + "." + lkey.string identifierRepresentation]%_cache!
  }
 
%
end
%  //-------------------------------------------------------------------------------------------------------------------*
  //   accessibleObjects                                                                                               *
  //-------------------------------------------------------------------------------------------------------------------*

  override func accessibleObjects (inout objects : NSMutableArray) {
    super.accessibleObjects (&objects)
  }

  //-------------------------------------------------------------------------------------------------------------------*

}

