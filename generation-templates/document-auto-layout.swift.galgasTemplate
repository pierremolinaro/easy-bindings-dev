//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(%!DOCUMENT_CLASS_NAME%) class %!DOCUMENT_CLASS_NAME% : %!DOCUMENT_SUPER_CLASS_NAME%, NSToolbarDelegate {

%
for (mProperty) in DOCUMENT_PROPERTY_LIST do
  ![mProperty propertyDeclarationCode !false ![@stringset emptySet]]
end
%  //····················································································································
  //    Outlets
  //····················································································································

%
for (lkey mAutoLayoutOutletTypeName) in AUTO_LAYOUT_OUTLET_MAP do
%  weak final var %!lkey.string% : AutoLayout%!mAutoLayoutOutletTypeName%? = nil\n%
end
%
  //····················································································································
  //    Outlets
  //····················································································································

%
for (lkey mOutletTypeName) in OUTLET_GENERATION_MAP do
%  @IBOutlet final var %!lkey.string% : %!mOutletTypeName%? = nil\n%
end
%
  //····················································································································
  //    Multiple bindings controllers
  //····················································································································

%for (mOutletName mBindingName mBoundObjectExpression) in MULTIPLE_BINDING_GENERATION_LIST do
  %//  final var mController_%!mOutletName%_%!mBindingName% : MultipleBindingController_%!mBindingName%? = nil\n%
end
%
  //····················································································································
  //    displayName
  //····················································································································

  override var displayName : String? {
    get { return super.displayName }
    set {
      super.displayName = newValue
      self.documentFileName_property.observedObjectDidChange ()
    }
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
%
for (mProperty) in DOCUMENT_PROPERTY_LIST do
  ![mProperty populateExplorerWindowCode]
end
%   //---
      super.populateExplorerWindow (&y, view:view)
    }
  #endif

  //····················································································································
  //    rootEntityClassName
  //····················································································································

  override final func rootEntityClassName () -> String {
    return "%!ROOT_ENTITY_NAME%"
  }

  //····················································································································
  //    rootObject
  //····················································································································

  final var rootObject : %!ROOT_ENTITY_NAME% { return self.mRootObject as! %!ROOT_ENTITY_NAME% }

%
for (mViewName mView) in VIEW_GENERATION_LIST do
  %  //····················································································································\n%
  %  //    VIEW %!mViewName%\n%
  %  //····················································································································\n\n%
  ![mView generate !prefs: false !mViewName]
end
for (mInstruction) in IMPLICIT_VIEW_GENERATION_FUNCTION_LIST do index idx
  %  //····················································································································\n%
  %  //    IMPLICIT VIEW %![idx string]%\n%
  %  //····················································································································\n\n%
%  fileprivate final func computeImplicitView_%![idx string]% () -> NSView {\n%
![mInstruction generate !prefs: false !"view" !"    "]
%    return view\n%
%  }\n\n%
end
%  //····················································································································
  //    Build User Interface
  //····················································································································

  override func ebBuildUserInterface () {
  %if [TOOLBAR_ITEM_LIST length] > 0 then
  %//--- Build tool bar
    let toolbar = NSToolbar (identifier: NSToolbar.Identifier ("%!DOCUMENT_CLASS_NAME%"))
    toolbar.allowsUserCustomization = false
    toolbar.displayMode = .default
    toolbar.delegate = self
    self.windowForSheet?.toolbar = toolbar
  %end
  %  //--------------------------- Read documentFileName model
    self.documentFileName_property.mReadModelFunction = { [weak self] in
      if let r = self?.displayName {
        return .single (r)
      }else{
        return .single ("")
      }
    }
  //--- Build window content view
    self.configureProperties ()
    let mainView = self.%!MAIN_VIEW_NAME%
  //--- Call outlet linkers\n%
     for (mLinkerName mOutletNameAndTypeNameList) in AUTO_LAYOUT_LINKER_LIST do
     %    self.linker_%!mLinkerName% (%
       for (mValue0 mValue1) in mOutletNameAndTypeNameList
       do %self.% !mValue0
       between %, %
       end
     %)\n%
     end
%  //--- Assign main view to window
    self.windowForSheet?.contentView = AutoLayoutWindowContentView (view: mainView)
  }

  //····················································································································
  //    Toolbar
  //····················································································································

/*  final func toolbarAllowedItemIdentifiers (_ toolbar: NSToolbar) -> [NSToolbarItem.Identifier] {
    return self.toolbarDefaultItemIdentifiers (toolbar)
  } */

  //····················································································································

/*  final func toolbarDefaultItemIdentifiers (_ toolbar: NSToolbar) -> [NSToolbarItem.Identifier] {
    return [%
    for (mItem) in TOOLBAR_ITEM_LIST
      do index idx
        switch mItem
        case space :
          !".flexibleSpace"
        case view (2*) :
          !"NSToolbarItem.Identifier (\"" ![idx string] !"\")"
        end
      between !", "
    end
    %]
  } */

  //····················································································································

/*  final func toolbar (_ toolbar: NSToolbar,
                      itemForItemIdentifier itemIdentifier: NSToolbarItem.Identifier,
                      willBeInsertedIntoToolbar flag: Bool) -> NSToolbarItem? {
    switch itemIdentifier.rawValue {
%for (mItem) in TOOLBAR_ITEM_LIST do index idx
      switch mItem
      case space :
%    case NSToolbarItem.Identifier.flexibleSpace.rawValue :\n%
%      return NSToolbarItem (itemIdentifier: .flexibleSpace)\n%
case view (title instruction) :
%    case "%![idx string]%" :\n%
%      let itemId = NSToolbarItem.Identifier ("%![idx string]%")\n%
%      let toolbarItem = NSToolbarItem (itemIdentifier: itemId)\n%
%      toolbarItem.label = %![title utf8Representation]%\n%
%      toolbarItem.isEnabled = true\n%
![instruction generate !prefs: false !"view" !"      "]
%      toolbarItem.view = view\n%
%      return toolbarItem\n%
    end
  end
%    default :\n%
%      return nil\n%
%    }\n%
%  } */

  //····················································································································
  //    configureProperties
  //····················································································································

  final private func configureProperties () {
    let start = Date ()
    var opIdx = 0
%
for (mProperty) in DOCUMENT_PROPERTY_LIST do
  ![mProperty configurationCode !false]
%    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
%end
%    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Configure properties \(durationMS) ms")
    }
  }

  //····················································································································
  //   removeUserInterface
  //····················································································································

  override func removeUserInterface () {
    super.removeUserInterface ()
  //--------------------------- Unbind regular bindings
%
for (mOutletName mBindingName mBoundObjectList mBindingOptionsString) in REGULAR_BINDINGS_GENERATION_LIST do
  %    self.%!mOutletName%?.unbind_%!mBindingName% ()\n%
end
%  //--------------------------- Unbind array controllers
%
for (mTableValueBindingOutletName mTableValueBindingControllerName) in TABLE_VALUE_BINDING_GENERATION_LIST do
  %    self.%!mTableValueBindingControllerName%.unbind_tableView (self.%!mTableValueBindingOutletName%)\n%
end
for (mEBViewOutletName mArrayControllerControllerName) in EB_VIEW_GRAPHIC_CONTROLLER_BINDING_GENERATION_LIST do
  %    self.%!mArrayControllerControllerName%.unbind_ebView (self.%!mEBViewOutletName%)\n%
end
for (mProperty) in DOCUMENT_PROPERTY_LIST do
  ![mProperty terminationCode !false]
end
%  //--------------------------- Remove targets / actions
%for (mOutletName mTargetName mActionName mTargetTypeName) in TARGET_ACTION_LIST do
%    self.%!mOutletName%?.target = nil\n%
end
%  //--------------------------- Clean up outlets
%
for (lkey mOutletTypeName) in OUTLET_GENERATION_MAP do
   %    self.%!lkey.string%?.ebCleanUp ()\n%
end
%  //--------------------------- Detach outlets
%
for (lkey mOutletTypeName) in OUTLET_GENERATION_MAP do
   %    self.%!lkey.string% = nil\n%
end
%  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

