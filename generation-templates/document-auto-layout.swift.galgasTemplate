//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------

@objc(%!DOCUMENT_NAME%) class %!DOCUMENT_NAME% : EBAutoLayoutManagedDocument, NSToolbarDelegate {

%
for () in DOCUMENT_PROPERTY_LIST do
  ![mProperty propertyDeclarationCode !false ![@stringset emptySet]]
end
%
  //····················································································································
  //    Outlets
  //····················································································································

%
for () in OUTLET_GENERATION_MAP do
%  @IBOutlet var %!lkey.string% : %!mOutletTypeName%? = nil\n%
end
%
  //····················································································································
  //    Multiple bindings controllers
  //····················································································································

%for () in MULTIPLE_BINDING_GENERATION_LIST do
  %//  var mController_%!mOutletName%_%!mBindingName% : MultipleBindingController_%!mBindingName%? = nil\n%
end
%
  //····················································································································
  //    Document file path
  //····················································································································
  // Cette méthode est appelée après tout enregistrement, qu'il y ait changement de nom ou pas.

  override var fileModificationDate : Date? {
    get {
      return super.fileModificationDate
    }
    set{
      super.fileModificationDate = newValue
      self.documentFilePath_property.postEvent ()
    }
  }

  //····················································································································

  func computeTransient_documentFilePath () -> String {
    var documentFilePath = ""
    if let url = self.fileURL {
      documentFilePath = url.path
    }
    return documentFilePath
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
%
for () in DOCUMENT_PROPERTY_LIST do
  ![mProperty populateExplorerWindowCode]
end
%  //---
    super.populateExplorerWindow (&y, view:view)
  }

  //····················································································································
  //    rootEntityClassName
  //····················································································································

  override func rootEntityClassName () -> String {
    return "%!ROOT_ENTITY_NAME%"
  }

  //····················································································································
  //    rootObject
  //····················································································································

  var rootObject : %!ROOT_ENTITY_NAME% { return self.mRootObject as! %!ROOT_ENTITY_NAME% }

%
for () in VIEW_GENERATION_LIST do
  %  //····················································································································\n%
  %  //    VIEW %!mViewName%\n%
  %  //····················································································································\n\n%
  ![mView generate !mViewName]
end
%  //····················································································································
  //    Build User Interface
  //····················································································································

  override func ebBuildUserInterface () {
  %if [TOOLBAR_ITEM_LIST length] > 0 then%//--- Build tool bar
    let toolbar = NSToolbar (identifier: NSToolbar.Identifier ("%!DOCUMENT_NAME%"))
    toolbar.allowsUserCustomization = false
    toolbar.displayMode = .default
    toolbar.delegate = self
    self.windowForSheet?.toolbar = toolbar
  %end%//--- Build window content view
    // showDebugBackground ()
    self.configureProperties ()
    self.windowForSheet?.contentView = self.%!MAIN_VIEW_NAME%
  }
  
  //····················································································································
  //    Toolbar
  //····················································································································
  
  func toolbarAllowedItemIdentifiers (_ toolbar: NSToolbar) -> [NSToolbarItem.Identifier] {
    return self.toolbarDefaultItemIdentifiers (toolbar)
  }

  //····················································································································

  func toolbarDefaultItemIdentifiers (_ toolbar: NSToolbar) -> [NSToolbarItem.Identifier] {
    return [%
    for () in TOOLBAR_ITEM_LIST
      do index idx
        switch mItem
        case space :
          !".flexibleSpace"
        case view (2*) :
          !"NSToolbarItem.Identifier (\"" ![idx string] !"\")"
        end
      between !", "
    end
    %]
  }

  //····················································································································

  func toolbar(_ toolbar: NSToolbar,
               itemForItemIdentifier itemIdentifier: NSToolbarItem.Identifier,
               willBeInsertedIntoToolbar flag: Bool) -> NSToolbarItem? {
    switch itemIdentifier.rawValue {
%for () in TOOLBAR_ITEM_LIST do index idx
      switch mItem
      case space :
%    case NSToolbarItem.Identifier.flexibleSpace.rawValue :\n%
%      return NSToolbarItem (itemIdentifier: .flexibleSpace)\n%
case view (title instruction) :
%    case "%![idx string]%" :\n%
%      let itemId = NSToolbarItem.Identifier ("%![idx string]%")\n%
%      let toolbarItem = NSToolbarItem (itemIdentifier: itemId)\n%
%      toolbarItem.label = %![title utf8Representation]%\n%
%      toolbarItem.isEnabled = true\n%
![instruction generate !"view" !"      "]
%      toolbarItem.view = view\n%
%      return toolbarItem\n%
    end
  end
%    default :\n%
%      return nil\n%
%    }\n%
%  }

  //····················································································································
  //    check outlet connections
  //····················································································································

//  private func checkOutletConnections () {
//    let start = Date ()
%for () in OUTLET_GENERATION_MAP do
%//    checkOutletConnection (self.%!lkey.string%, "%!lkey.string%", %!mOutletTypeName%.self, #file, #line)\n%
end
%//    if LOG_OPERATION_DURATION {
//      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
//      Swift.print ("Check outlet connections \(durationMS) ms")
//    }
//  }
  
  //····················································································································
  
  final private func configureProperties () {
    let start = Date ()
    var opIdx = 0
%
for () in DOCUMENT_PROPERTY_LIST do
  ![mProperty configurationCode !false]
%    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
%end
%    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Configure properties \(durationMS) ms")
    }
  }

  //····················································································································
  
/*  final private func installBindings () {
    let start = Date ()
  //--------------------------- Install table view bindings
%
for () in TABLE_VALUE_BINDING_GENERATION_LIST do
  %    self.%!mTableValueBindingControllerName%.bind_tableView (self.%!mTableValueBindingOutletName%, file: #file, line: #line)\n%
end
%  //--------------------------- Install ebView bindings
%
for () in EB_VIEW_GRAPHIC_CONTROLLER_BINDING_GENERATION_LIST do
  %    self.%!mArrayControllerControllerName%.bind_ebView (self.%!mEBViewOutletName%)\n%
end
%  //--------------------------- Install regular bindings
%
for () in REGULAR_BINDINGS_GENERATION_LIST do
  %    self.%!mOutletName%?.bind_%!mBindingName% (%
  for () in mBoundObjectList do
    !mBoundObjectString%, %
  end
  %file: #file, line: #line%!mBindingOptionsString%)\n%
end
%  //--------------------------- Install multiple bindings
%
for () in MULTIPLE_BINDING_GENERATION_LIST do
  %    do{\n%
  %      let controller = MultipleBindingController_%!mBindingName% (\n%
  %        computeFunction: {\n%
  %          return %![mBoundObjectExpression expressionString]%\n%
  %        },\n%
  %        outlet: self.%!mOutletName%\n%
  %      )\n%
  for () in [mBoundObjectExpression observedModelSet] do
  %      %!key%.addEBObserver (controller)\n%
  end
  %      self.mController_%!mOutletName%_%!mBindingName% = controller\n%
  %    }\n%
end
%    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Install bindings \(durationMS) ms")
    }
  } */

  //····················································································································
  
/*  final private func setTargetsAndActions () {
     let start = Date ()
   //--------------------------- Set targets / actions
%for () in TARGET_ACTION_LIST do
%    self.%!mOutletName%?.target = %!mTargetName%\n%
%    self.%!mOutletName%?.action = #selector (%!mTargetTypeName%.%!mActionName% (_:))\n%
end
%    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Set target and actions \(durationMS) ms")
    }
  } */

  //····················································································································
  //    windowControllerDidLoadNib
  //····················································································································

/*  override func windowControllerDidLoadNib (_ aController: NSWindowController) {
    super.windowControllerDidLoadNib (aController)
    self.checkOutletConnections ()
    self.configureProperties ()
    self.installBindings ()
    self.setTargetsAndActions ()
  //--------------------------- Read documentFilePath model 
    self.documentFilePath_property.mReadModelFunction = { [weak self] in
      if let r = self?.computeTransient_documentFilePath () {
        return .single (r)
      }else{
        return .empty
      }
    }
  } */

  //····················································································································
  //   removeUserInterface
  //····················································································································

/*  override func removeUserInterface () {
    super.removeUserInterface ()
  //--------------------------- Unbind regular bindings
%
for () in REGULAR_BINDINGS_GENERATION_LIST do
  %    self.%!mOutletName%?.unbind_%!mBindingName% ()\n%
end
%  //--------------------------- Unbind multiple bindings
%
for () in MULTIPLE_BINDING_GENERATION_LIST do
  for () in [mBoundObjectExpression observedModelSet] do
  %    %!key%.removeEBObserver (self.mController_%!mOutletName%_%!mBindingName%!)\n%
  end
  %    self.mController_%!mOutletName%_%!mBindingName% = nil\n%
end
%  //--------------------------- Unbind array controllers
%
for () in TABLE_VALUE_BINDING_GENERATION_LIST do
  %    self.%!mTableValueBindingControllerName%.unbind_tableView (self.%!mTableValueBindingOutletName%)\n%
end
for () in EB_VIEW_GRAPHIC_CONTROLLER_BINDING_GENERATION_LIST do
  %    self.%!mArrayControllerControllerName%.unbind_ebView (self.%!mEBViewOutletName%)\n%
end
for () in DOCUMENT_PROPERTY_LIST do
  ![mProperty terminationCode !false]
end
%  //--------------------------- Remove targets / actions
%for () in TARGET_ACTION_LIST do
%    self.%!mOutletName%?.target = nil\n%
end
%  //--------------------------- Clean up outlets
%
for () in OUTLET_GENERATION_MAP do
   %    self.%!lkey.string%?.ebCleanUp ()\n%
end
%  //--------------------------- Detach outlets
%
for () in OUTLET_GENERATION_MAP do
   %    self.%!lkey.string% = nil\n%
end
%  } */

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------

