
#import "PMAllocationDebug.h"
#import "debugMacros.h"
#import "easy-bindings-utilities.h"
#import "%!CONTROLLER_CLASS_NAME%.h"

//---------------------------------------------------------------------------*

#import <objc/runtime.h>

//---------------------------------------------------------------------------*

@implementation %!CONTROLLER_CLASS_NAME%

//---------------------------------------------------------------------------*

%for () in OBSERVABLE_PROPERTY_MAP do
%@synthesize %!lkey->string% ;\n%
end
%
//---------------------------------------------------------------------------*
//                                                                           *
//                                   init                                    *
//                                                                           *
//---------------------------------------------------------------------------*

- (instancetype) init {
  #ifdef EASY_BINDINGS_DEBUG
    NSLog (@"\%s", __PRETTY_FUNCTION__) ;
  #endif
  self = [super init] ;
  if (self) {
    macroNoteObjectAllocation ;
  }
  return self ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                           dealloc                                         *
//                                                                           *
//---------------------------------------------------------------------------*

#ifdef PM_COCOA_DEBUG
  - (void) dealloc {
    #ifdef EASY_BINDINGS_DEBUG
      NSLog (@"\%s", __PRETTY_FUNCTION__) ;
    #endif
    macroNoteObjectDeallocation ;
    macroSuperDealloc ;
  }
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                                initialize                                 *
//                                                                           *
//---------------------------------------------------------------------------*

+ (void) initialize {
  #ifdef EASY_BINDINGS_DEBUG
    NSLog (@"\%s", __PRETTY_FUNCTION__) ;
  #endif
%for () in BINDING_MAP do
%  [%!CONTROLLER_CLASS_NAME% exposeBinding:@"%!lkey->string%"] ;\n%
end
%}

%for () in OBSERVABLE_PROPERTY_MAP do%
//---------------------------------------------------------------------------*

- (void) set_%!lkey->string%_fromBindingChange: (%![mType ocClassName]% *) inValue {
  #ifdef EASY_BINDINGS_DEBUG
    NSLog (@"\%s", __PRETTY_FUNCTION__) ;
  #endif
  if (! [self.%!lkey->string% isEqual:inValue]) {
    self.%!lkey->string% = inValue ;
  }
}

%end

if [OBSERVABLE_PROPERTY_MAP count] > 0 then
%//---------------------------------------------------------------------------*
//                                                                           *
//       didChangeValueForKey:                                               *
//                                                                           *
//---------------------------------------------------------------------------*

- (void) didChangeValueForKey:(NSString *) inKey {
  #ifdef EASY_BINDINGS_DEBUG
    NSLog (@"\%s", __PRETTY_FUNCTION__) ;
  #endif
  [super didChangeValueForKey:inKey] ;
 %for () in OBSERVABLE_PROPERTY_MAP do
% if ([inKey isEqualToString:@%![lkey utf8Representation]%]) {
    [self %!lkey->string%_model_did_change] ; 
%
  between %  }else%
end
%  }
}

%end


if [BINDING_MAP count] > 0 then
%//---------------------------------------------------------------------------*
//                                                                           *
//                    bind:toObject:withKeyPath:options:                     *
//                                                                           *
//---------------------------------------------------------------------------*

- (void) bind:(NSString *) inBindingName
         toObject:(id) inObservableObject
         withKeyPath:(NSString *) inObservableKeyPath
         options:(NSDictionary *) inOptions {
  #ifdef EASY_BINDINGS_DEBUG
    NSLog (@"\%s", __PRETTY_FUNCTION__) ;
  #endif
 %for () in BINDING_MAP do
% if ([inBindingName isEqualToString:@%![lkey utf8Representation]%]) {
    mBoundObjectFor_%!lkey->string% = inObservableObject ;
    mKeyPathFor_%!lkey->string% = inObservableKeyPath.copy ; 
    [inObservableObject
      addObserver:self
      forKeyPath:inObservableKeyPath.copy
      options:0
      context:nil
    ] ;
    [self valueFor_%!lkey->string%_binding_didChange] ;
%
  between %  }else%
end
%  }else{
    [super
      bind:inBindingName
      toObject:inObservableObject
      withKeyPath:inObservableKeyPath
      options:inOptions
    ] ;
  }
}

%end

if [BINDING_MAP count] > 0 then
%//---------------------------------------------------------------------------*
//                                                                           *
//                                 unbind:                                   *
//                                                                           *
//---------------------------------------------------------------------------*

- (void) unbind:(NSString *) inBindingName {
  #ifdef EASY_BINDINGS_DEBUG
    NSLog (@"\%s", __PRETTY_FUNCTION__) ;
  #endif
 %for () in BINDING_MAP do
% if ([inBindingName isEqualToString:@%![lkey utf8Representation]%]) {
    [mBoundObjectFor_%!lkey->string% removeObserver:self forKeyPath:mKeyPathFor_%!lkey->string%] ;
    mBoundObjectFor_%!lkey->string% = nil ; 
    mKeyPathFor_%!lkey->string% = nil ; 
%
  between %  }else%
end
%  }else{
    [super unbind:inBindingName] ;
  }
}

%end


if [BINDING_MAP count] > 0 then
%//---------------------------------------------------------------------------*
//                                                                           *
//             observeValueForKeyPath:ofObject:change:context:               *
//                                                                           *
//---------------------------------------------------------------------------*

- (void) observeValueForKeyPath:(NSString *) inKeyPath
         ofObject:(id) inObject
         change:(NSDictionary *) inChangeDictionary
         context:(void *) inContext {
  #ifdef EASY_BINDINGS_DEBUG
    NSLog (@"\%s", __PRETTY_FUNCTION__) ;
  #endif
 %for () in BINDING_MAP do
% if ((mBoundObjectFor_%!lkey->string% == inObject) && [inKeyPath isEqualToString:mKeyPathFor_%!lkey->string%]) {
    [self valueFor_%!lkey->string%_binding_didChange] ;
%
  between %  }else%
end
%  }else{
    [super
      observeValueForKeyPath:inKeyPath
      ofObject:inObject
      change:inChangeDictionary
      context:inContext
    ] ;
  }
}

%end

%//---------------------------------------------------------------------------*

#pragma mark Specific Binding Methods

%for () in BINDING_MAP do%
//---------------------------------------------------------------------------*
//                                                                           *
//                  Method for '%!lkey->string%' binding                   *
//                                                                           *
//---------------------------------------------------------------------------*

- (void) setValueFor_%!lkey->string%_binding: (id) inValue {
  #ifdef EASY_BINDINGS_DEBUG
    NSLog (@"\%s", __PRETTY_FUNCTION__) ;
  #endif
  [mBoundObjectFor_%!lkey->string% setValue:inValue forKeyPath:mKeyPathFor_%!lkey->string%] ;
}

//---------------------------------------------------------------------------*

- (id) valueFor_%!lkey->string%_binding {
  #ifdef EASY_BINDINGS_DEBUG
    NSLog (@"\%s", __PRETTY_FUNCTION__) ;
  #endif
  return [mBoundObjectFor_%!lkey->string% valueForKeyPath:mKeyPathFor_%!lkey->string%] ;
}

%end%
//---------------------------------------------------------------------------*

