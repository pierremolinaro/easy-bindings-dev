import Cocoa

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
//    %!["SelectionController_" + OWNER_NAME + "_" + SELECTION_CONTROLLER_NAME stringByRightPadding !113 !' ']%*
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

class SelectionController_%!OWNER_NAME%_%!SELECTION_CONTROLLER_NAME% : EBObject {
  private var mModel : ReadOnlyArrayOf_%!ELEMENT_TYPE_NAME%?

  //···················································································································* 
  //   SELECTION OBSERVABLE PROPERTIES                                                                                 *
  //···················································································································* 

%for () in SELECTION_OBSERVABLE_PROPERTY_MAP do
if not [mType isEntityType] then
%  var %!lkey.string% = EBPropertyProxy_%![mType swiftTypeName]% () \n%
end
end%
  //···················································································································* 
  //   BIND SELECTION                                                                                                  *
  //···················································································································* 

  func bind_selection (model : ReadOnlyArrayOf_%!ELEMENT_TYPE_NAME%, file:String, line:Int) {
    mModel = model
%for () in SELECTION_OBSERVABLE_PROPERTY_MAP do
if not [mType isEntityType] then
%    bind_property_%!lkey.string% (model)\n%
end
end%  }

  //···················································································································*
  //    Explorer
  //···················································································································*

  final func addExplorer (name : String,
                          inout y : CGFloat,
                          view : NSView) {
  }
  

%for () in SELECTION_OBSERVABLE_PROPERTY_MAP do
if not [mType isEntityType] then
%  //···················································································································*\n\n% 
%  private final func bind_property_%!lkey.string% (model : ReadOnlyArrayOf_%!ELEMENT_TYPE_NAME%) {\n%
%    model.addObserverOf_%!lkey.string% (%!lkey.string%, postEvent:true)\n%
%    model.addObserver (%!lkey.string%, postEvent:true)\n%
%    %!lkey.string%.readModelFunction = {\n%
%      if let model = self.mModel {\n%
%        switch model.prop {\n%
%        case .noSelection :\n%
%          return .noSelection\n%
%        case .multipleSelection :\n%
%          return .multipleSelection\n%
%        case .singleSelection (let v) :\n%
%          var s = Set<%![mType swiftTypeName]%> ()\n%
%          var isMultipleSelection = false\n%
%          for object in v {\n%
%            switch object.%!lkey.string%.prop {\n%
%            case .noSelection :\n%
%              return .noSelection\n%
%            case .multipleSelection :\n%
%              isMultipleSelection = true\n%
%            case .singleSelection (let vProp) :\n%
%              s.insert (vProp)\n%
%            }\n%
%          }\n%
%          if isMultipleSelection {\n%
%            return .multipleSelection\n%
%          }else if s.count == 0 {\n%
%            return .noSelection\n%
%          }else if s.count == 1 {\n%
%            return .singleSelection (s.first!)\n%
%          }else{\n%
%            return .multipleSelection\n%
%          }\n%
%        }\n%
%      }else{\n%
%        return .noSelection\n%
%      }\n%
%    }\n%
%    %!lkey.string%.writeModelFunction = { (inValue : %![mType swiftTypeName]%) in\n%
%      if let model = self.mModel {\n%
%        switch model.prop {\n%
%        case .noSelection, .multipleSelection :\n%
%          break\n%
%        case .singleSelection (let v) :\n%
%          for object in v {\n%
%            object.%!lkey.string%.setProp (inValue)\n%
%          }\n%
%        }\n%
%      }\n%
%    }\n%
%    %!lkey.string%.validateAndWriteModelFunction = { (candidateValue : %![mType swiftTypeName]%, windowForSheet : NSWindow?) in\n%
%      if let model = self.mModel {\n%
%        switch model.prop {\n%
%        case .noSelection, .multipleSelection :\n%
%          return false\n%
%        case .singleSelection (let v) :\n%
%          for object in v {\n%
%            let result = object.%!lkey.string%.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)\n%
%            if !result {\n%
%              return false\n%
%            }\n%
%          }\n%
%          return true\n%
%        }\n%
%      }else{\n%
%        return false\n%
%      }\n%
%    }\n%
%  }\n\n%
end
end%

  //···················································································································* 
  //   UNBIND SELECTION                                                                                                *
  //···················································································································* 

  func unbind_selection () {
%for () in SELECTION_OBSERVABLE_PROPERTY_MAP do
if not [mType isEntityType] then
%  //--- %!lkey.string%\n%
%    %!lkey.string%.readModelFunction = nil \n%
%    %!lkey.string%.writeModelFunction = nil \n%
%    %!lkey.string%.validateAndWriteModelFunction = nil \n%
%    mModel?.removeObserverOf_%!lkey.string% (%!lkey.string%, postEvent:false)\n%
%    mModel?.removeObserver (%!lkey.string%, postEvent:false)\n%
end
end%    mModel = nil    
  }

  //···················································································································* 

}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

