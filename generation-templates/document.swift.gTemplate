
import Cocoa

//---------------------------------------------------------------------------------------------------------------------*

@objc(%!DOCUMENT_NAME%) class %!DOCUMENT_NAME% : PMManagedDocument {

  //-------------------------------------------------------------------------------------------------------------------*
  //    Outlets                                                                                                        *
  //-------------------------------------------------------------------------------------------------------------------*

%
for () in OUTLET_GENERATION_MAP do
%  @IBOutlet var %!lkey.string% : %!mOutletTypeName.string%?\n%
end
%
  //-------------------------------------------------------------------------------------------------------------------*
  //    Controllers                                                                                                    *
  //-------------------------------------------------------------------------------------------------------------------*

  //-------------------------------------------------------------------------------------------------------------------*
  //    Document attributes                                                                                            *
  //-------------------------------------------------------------------------------------------------------------------*

%

for () in ATTRIBUTE_LIST do
%
  //-------------------------------------------------------------------------------------------------------------------*
  //    %!["Attribute: " + mAttributeName stringByRightPadding !111 !' ']%*
  //-------------------------------------------------------------------------------------------------------------------*\n\n%
%  var %!mAttributeName%_observers = NSMutableSet ()\n%
%  var %!mAttributeName% : %![mAttributeType swiftTypeName]% = %!mDefaultValueInSwift% {
    didSet {
      if %!mAttributeName% != oldValue {
        for anyObject in %!mAttributeName%_observers {
          let object = anyObject as PMTriggerProtocol
          enterTriggerWithObject (object)
        }
      }
    }
  }

  func addObserverOf_%!mAttributeName% (inObserver : PMTriggerProtocol) {
    %!mAttributeName%_observers.addObject (inObserver)
    enterTriggerWithObject (inObserver)
  }
 
  func removeObserverOf_%!mAttributeName% (inObserver : PMTriggerProtocol) {
    %!mAttributeName%_observers.removeObject (inObserver)
    enterTriggerWithObject (inObserver)
  }

%
end
%
  //-------------------------------------------------------------------------------------------------------------------*
  //    init                                                                                                           *
  //-------------------------------------------------------------------------------------------------------------------*

  override init () {
    super.init ()
  }
  
  //-------------------------------------------------------------------------------------------------------------------*
  //    windowNibName                                                                                                  *
  //-------------------------------------------------------------------------------------------------------------------*

  override var windowNibName: String {
    return "%!DOCUMENT_NAME%"
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    rootEntityClassName                                                                                            *
  //-------------------------------------------------------------------------------------------------------------------*

  override func rootEntityClassName () -> String {
    return "%!ROOT_ENTITY_NAME%"
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    rootObject                                                                                                     *
  //-------------------------------------------------------------------------------------------------------------------*

  var rootObject : MyRootEntity {
    get {
      return mRootObject as %!ROOT_ENTITY_NAME%
    }
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //    windowControllerDidLoadNib                                                                                     *
  //-------------------------------------------------------------------------------------------------------------------*

%if [CONTROLLER_INSTANCIATION_LIST length] > 0 then
%  var mControllerArray = NSMutableArray ()\n\n%
%  //-------------------------------------------------------------------------------------------------------------------*\n\n%
end
for () in ARRAY_CONTROLLER_LIST
do %  var %!mControllerName% : ArrayController_%!mObjectTypeName%_%!mTomanyRelationshipName%_%!mTableViewOutletName%? = nil\n%
after %\n  //-------------------------------------------------------------------------------------------------------------------*\n\n%
end
%  override func windowControllerDidLoadNib (aController: NSWindowController) {
    super.windowControllerDidLoadNib (aController)
  //--------------------------- Outlet checking
%

for () in OUTLET_GENERATION_MAP do
   %    if nil == %!lkey.string% {\n%
   %      presentErrorWindow (__FILE__, __LINE__, "the '%!lkey.string%' outlet is nil") ;\n%
   %    }\n%
end
%  //--------------------------- Transient observers
%
for () in TRANSIENT_MAP_FOR_IMPLEMENTATION do
for () in mDependencyList do
%    %![mDependency generateAddObserverCall]% (triggerObjectFor_%!["document." + DOCUMENT_NAME + "." + lkey.string identifierRepresentation]%)\n%
end
end
%  //--------------------------- Array controller
%
for () in ARRAY_CONTROLLER_LIST do
%    %!mControllerName% = ArrayController_%!mObjectTypeName%_%!mTomanyRelationshipName%_%!mTableViewOutletName% (
      object:rootObject,
      tableView:%!mTableViewOutletName%,
      file:__FILE__,
      line:__LINE__
    )\n%
end
%  //--------------------------- Simple controller
%for () in CONTROLLER_INSTANCIATION_LIST do
%    mControllerArray.addObject (%!mValue%)\n%
end
%  //--------------------------- Set targets / actions
%for () in TARGET_ACTION_LIST do
%    %!mOutletName%?.target = %!mTargetName%\n%
%    %!mOutletName%?.action = "%!mActionName%:"\n%
end
%  //--------------------------- Update display
    flushTriggers ()
  }

  //-------------------------------------------------------------------------------------------------------------------*
  //   removeWindowController                                                                                          *
  //-------------------------------------------------------------------------------------------------------------------*

  override func removeWindowController (inWindowController : NSWindowController) {
  //--------------------------- Remove controllers
%
for () in ARRAY_CONTROLLER_LIST do
%    %!mControllerName%?.unregister ()\n%
end
if [CONTROLLER_INSTANCIATION_LIST length] > 0 then
%    for object in mControllerArray {
      let controller = object as PMTriggerProtocol
      controller.unregister ()
    }
    mControllerArray.removeAllObjects ()
%
end
%  //--------------------------- Remove targets / actions
%for () in TARGET_ACTION_LIST do
%    %!mOutletName%?.target = nil\n%
end
%  //---
    super.removeWindowController (inWindowController)
  }

%

for () in TRANSIENT_MAP_FOR_IMPLEMENTATION do
%  //-------------------------------------------------------------------------------------------------------------------*
  //    %!["Transient: " + lkey stringByRightPadding !111 !' ']%*
  //-------------------------------------------------------------------------------------------------------------------*\n\n%
%  var %!lkey.string%_observers = NSMutableSet ()\n%
%  var %!lkey.string%_cache : %![mTransientType swiftTypeName]%?\n%
%  var %!lkey.string% : %![mTransientType swiftTypeName]% {\n%
%    get {\n%
%      if %!lkey.string%_cache == nil {\n%
%        %!lkey.string%_cache = compute_%!DOCUMENT_NAME%_%!lkey.string% (%
for () in mDependencyList
do ![mDependency generateForComputeFunction]
between %, %
end
%)\n%
%      }\n%
%      return %!lkey.string%_cache!\n%
%    }
    set {
    }
  }

  func %!["document." + DOCUMENT_NAME + "." + lkey.string identifierRepresentation]%_didChange () {
    for anyObject in %!lkey.string%_observers {
      let object = anyObject as PMTriggerProtocol
      enterTriggerWithObject (object)
    }
  }
 
   func addObserverOf_%!lkey.string% (inObserver : PMTriggerProtocol) {
    %!lkey.string%_observers.addObject (inObserver)
    enterTriggerWithObject (inObserver)
  }
 
  func removeObserverOf_%!lkey.string% (inObserver : PMTriggerProtocol) {
    %!lkey.string%_observers.removeObject (inObserver)
    enterTriggerWithObject (inObserver)
  }

  var triggerObjectFor_%!["document." + DOCUMENT_NAME + "." + lkey.string identifierRepresentation]%_cache : PMTrigger_%!["document." + DOCUMENT_NAME + "." + lkey.string identifierRepresentation]%? = nil
  var triggerObjectFor_%!["document." + DOCUMENT_NAME + "." + lkey.string identifierRepresentation]% : PMTrigger_%!["document." + DOCUMENT_NAME + "." + lkey.string identifierRepresentation]% {
    if triggerObjectFor_%!["document." + DOCUMENT_NAME + "." + lkey.string identifierRepresentation]%_cache == nil {
      triggerObjectFor_%!["document." + DOCUMENT_NAME + "." + lkey.string identifierRepresentation]%_cache = PMTrigger_%!["document." + DOCUMENT_NAME + "." + lkey.string identifierRepresentation]% (object:self)
    }
    return triggerObjectFor_%!["document." + DOCUMENT_NAME + "." + lkey.string identifierRepresentation]%_cache!
  }\n
%end
%

//---------------------------------------------------------------------------------------------------------------------*

}

