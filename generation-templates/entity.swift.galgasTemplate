//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

%
for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
%//----------------------------------------------------------------------------------------------------------------------

protocol %!ENTITY_NAME%_%![mProperty mPropertyName]% : class {
  var %![mProperty mPropertyName]% : %![[mProperty mType] swiftTypeName]% { get }
}

%
end
for () in PROXY_LIST_FOR_GENERATION do
%//----------------------------------------------------------------------------------------------------------------------

protocol %!ENTITY_NAME%_%![mProperty mPropertyName]% : class {
  var %![mProperty mPropertyName]% : %![[mProperty mType] swiftTypeName]%? { get }
}

%
end
for () in TRANSIENT_LIST_FOR_IMPLEMENTATION do
%//----------------------------------------------------------------------------------------------------------------------

protocol %!ENTITY_NAME%_%![mProperty mPropertyName]% : class {
  var %![mProperty mPropertyName]% : %![[mProperty mType] swiftTypeName]%? { get }
}

%
end
%//----------------------------------------------------------------------------------------------------------------------
//    %!"Entity: " + ENTITY_NAME%
//----------------------------------------------------------------------------------------------------------------------

class %!ENTITY_NAME% : %!SUPER_CLASS_NAME
for () in PROPERTY_LIST_FOR_GENERATION do
  if (mProperty is == @atomicPropertyGeneration) | (mProperty is == @transientPropertyGeneration)  | (mProperty is == @atomicProxyGeneration) then
    %,\n         %!ENTITY_NAME%_%![mProperty mPropertyName]
  end
end
% {

%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty propertyDeclarationCode !false !OVERRIDEN_TRANSIENTS]
end
%  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty initCode]
end
%    super.init (ebUndoManager)
    self.configureObject ()
  }
  
  //····················································································································

  private final func configureObject () {
%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty configurationCode !false]
end
%  //--- Install undoers and opposite setter for relationships
%
for () in TO_MANY_RELATIONSHIP_LIST do
  switch [mProperty mOption]
  case none :

  case hasDependance (@string masterPropertyName *) :
    %    self.%![mProperty mPropertyName]%_property.setDataProvider (self.%!masterPropertyName%_property)\n%
  case hasOpposite (@string oppositeName) :
    %    self.%![mProperty mPropertyName]%_property.setOppositeRelationShipFunctions (\n%
    %      setter: { [weak self] inObject in if let me = self { inObject.%!oppositeName%_property.setProp (me) } },\n%
    %      resetter: { inObject in inObject.%!oppositeName%_property.setProp (nil) }\n%
    %    )\n%
  end
end
%  //--- Register properties for handling signature
%
for () in SIGNATURE_SET do
  %    self.%!key%_property.setSignatureObserver (observer: self)\n%
end
%  //--- Extern delegates
%
  for () in EXTERN_DELEGATE_LIST_FOR_IMPLEMENTATION do index idx
    %    self.mExternDelegate%![idx string]% = %!mExternSwiftDelegateName.string% (object: self)\n%
  end
%  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty terminationCode !false]
end
for () in TO_MANY_RELATIONSHIP_LIST do
  switch [mProperty mOption]
  case none :
  case hasDependance (2*) :
    %    self.%![mProperty mPropertyName]%_property.setDataProvider (nil)\n%
  case hasOpposite (*) :
  end
end
%  //--- Unregister properties for handling signature
%
for () in SIGNATURE_SET do
  %    self.%!key%_property.setSignatureObserver (observer: nil)\n%
end
%  }

  //····················································································································
  //    Extern delegates
  //····················································································································

%
  for () in EXTERN_DELEGATE_LIST_FOR_IMPLEMENTATION do index idx
    %  var mExternDelegate%![idx string]% : %!mExternSwiftDelegateName.string%? = nil\n%
  end
%
  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
%for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %    createEntryForPropertyNamed (\n%
  %      "%![mProperty mPropertyName]%",\n%
  %      idx: self.%![mProperty mPropertyName]%_property.ebObjectIndex,\n%
  %      y: &y,\n%
  %      view: view,\n%
  %      observerExplorer: &self.%![mProperty mPropertyName]%_property.mObserverExplorer,\n%
  %      valueExplorer: &self.%![mProperty mPropertyName]%_property.mValueExplorer\n%
  %    )\n%
end
%    createEntryForTitle ("Properties", y: &y, view: view)\n%
for () in TRANSIENT_LIST_FOR_IMPLEMENTATION do
  %    createEntryForPropertyNamed (\n%
  %      "%![mProperty mPropertyName]%",\n%
  %      idx: self.%![mProperty mPropertyName]%_property.ebObjectIndex,\n%
  %      y: &y,\n%
  %      view: view,\n%
  %      observerExplorer: &self.%![mProperty mPropertyName]%_property.mObserverExplorer,\n%
  %      valueExplorer: &self.%![mProperty mPropertyName]%_property.mValueExplorer\n%
  %    )\n%
end
%    createEntryForTitle ("Transients", y: &y, view: view)\n%
for () in TO_MANY_RELATIONSHIP_LIST do
  if not [[mProperty mOption] isHasDependance] then
    %    createEntryForToManyRelationshipNamed (\n%
    %      "%![mProperty mPropertyName]%",\n%
    %      idx:%![mProperty mPropertyName]%_property.ebObjectIndex,\n%
    %      y: &y,\n%
    %      view: view,\n%
    %      valueExplorer:&%![mProperty mPropertyName]%_property.mValueExplorer\n%
    %    )\n%
  end
end
%    createEntryForTitle ("ToMany Relationships", y: &y, view: view)\n%
for () in TO_ONE_RELATIONSHIP_LIST do
  %    createEntryForToOneRelationshipNamed (\n%
  %      "%![mProperty mPropertyName]%",\n%
  %      idx:self.%![mProperty mPropertyName]%_property.ebObjectIndex,\n%
  %      y: &y,\n%
  %      view: view,\n%
  %      valueExplorer:&self.%![mProperty mPropertyName]%_property.mValueExplorer\n%
  %    )\n%
end%    createEntryForTitle ("ToOne Relationships", y: &y, view: view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty clearObjectExplorerCode]
end
%  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
%
for () in TO_MANY_RELATIONSHIP_LIST do
  if not [[mProperty mOption] isHasDependance] then
    %    self.%![mProperty mPropertyName]% = []\n%
  end
end
%  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
%
for () in TO_ONE_RELATIONSHIP_LIST do
  %    self.%![mProperty mPropertyName]% = nil\n%
end
%  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty saveIntoDictionaryCode]
end
%  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: &managedObjectArray)
%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty setupRelationshipFromDictionaryCode]
end
%  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty setupAtomicPropertyFromDictionaryCode]
end
%  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
%
for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %    ioString += "%![mProperty mPropertyName]%\\n"\n% 
end
%  //--- To one relationships
%for () in TO_ONE_RELATIONSHIP_LIST do
  %    ioString += "%![mProperty mPropertyName]%\\n"\n% 
end
%  //--- To many relationships
%for () in TO_MANY_RELATIONSHIP_LIST do
  %    ioString += "%![mProperty mPropertyName]%\\n"\n% 
end
%  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
%
for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %    self.%![mProperty mPropertyName]%.appendPropertyValueTo (&ioData)\n% 
  %    ioData.append (ascii: .lineFeed)\n%
end
%  //--- To one relationships
%for () in TO_ONE_RELATIONSHIP_LIST do
  %    if let object = self.%![mProperty mPropertyName]% {\n% 
  %      ioData.append (base62Encoded: object.savingIndex)\n% 
  %    }\n% 
  %    ioData.append (ascii: .lineFeed)\n% 
end
%  //--- To many relationships
%for () in TO_MANY_RELATIONSHIP_LIST do
  if not [[mProperty mOption] isHasDependance] then
    %    do{\n% 
    %      var optionalFirstIndex : Int? = nil\n% 
    %      var rangeCount = 0\n% 
    %      for object in self.%![mProperty mPropertyName]% {\n% 
    %        if let firstIndex = optionalFirstIndex {\n% 
    %          if object.savingIndex == (firstIndex + 1) {\n% 
    %            rangeCount += 1\n% 
    %            optionalFirstIndex = object.savingIndex\n% 
    %          }else if rangeCount > 0 {\n% 
    %            ioData.append (ascii: .colon)\n% 
    %            ioData.append (base62Encoded: rangeCount)\n% 
    %            ioData.append (ascii: .space)\n% 
    %            ioData.append (base62Encoded: object.savingIndex)\n% 
    %            rangeCount = 0\n% 
    %            optionalFirstIndex = object.savingIndex\n% 
    %          }else{\n% 
    %            ioData.append (ascii: .space)\n% 
    %            ioData.append (base62Encoded: object.savingIndex)\n% 
    %            optionalFirstIndex = object.savingIndex\n% 
    %          }\n% 
    %        }else{\n% 
    %          ioData.append (base62Encoded: object.savingIndex)\n% 
    %          optionalFirstIndex = object.savingIndex\n% 
    %        }\n% 
    %      }\n% 
    %      if optionalFirstIndex != nil, rangeCount > 0 {\n% 
    %        ioData.append (ascii: .colon)\n% 
    %        ioData.append (base62Encoded: rangeCount)\n% 
    %      }\n% 
    %      ioData.append (ascii: .lineFeed)\n% 
    %    }\n%
  end
end
%  }

%
if ([SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION length] + [TO_ONE_RELATIONSHIP_LIST length] + [TO_MANY_RELATIONSHIP_LIST length]) > 0 then
%  //····················································································································
  //    setUpWithTextDictionary
  //····················································································································

  override func setUpWithTextDictionary (_ inDictionary : [String : NSRange],
                                         _ inObjectArray : [EBManagedObject],
                                         _ inData : Data,
                                         _ inParallelObjectSetupContext : ParallelObjectSetupContext) {
    super.setUpWithTextDictionary (inDictionary, inObjectArray, inData, inParallelObjectSetupContext)
    inParallelObjectSetupContext.mOperationQueue.addOperation {
    //--- Atomic properties
%
for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %      if let range = inDictionary ["%![mProperty mPropertyName]%"], let value = %![[mProperty mType] swiftTypeName]%.unarchiveFromDataRange (inData, range) {\n% 
  %        self.%![mProperty mPropertyName]% = value\n%
  %      }\n% 
end
%    //--- To one relationships
%for () in TO_ONE_RELATIONSHIP_LIST do
  %      if let range = inDictionary ["%![mProperty mPropertyName]%"], let objectIndex = inData.base62EncodedInt (range: range) {\n% 
  %        inParallelObjectSetupContext.mMutex.wait ()\n%
  %        inParallelObjectSetupContext.mToOneSetUpOperationList.append ({ self.%![mProperty mPropertyName]% = inObjectArray [objectIndex] as? %![[mProperty mRelationshipType] swiftTypeName]% })\n%
  %        inParallelObjectSetupContext.mMutex.signal ()\n%
  %      }\n% 
end
%    //--- To many relationships
%for () in TO_MANY_RELATIONSHIP_LIST do
  if not [[mProperty mOption] isHasDependance] then
    %      if let range = inDictionary ["%![mProperty mPropertyName]%"], range.length > 0 {\n% 
    %        var relationshipArray = [%![[mProperty mRelationshipType] swiftTypeName]%] ()\n%
    %        let indexArray = inData.base62EncodedIntArray (fromRange: range)\n%
    %        for idx in indexArray {\n%
    %          relationshipArray.append (inObjectArray [idx] as! %![[mProperty mRelationshipType] swiftTypeName]%)\n%
    %        }\n%
    %        inParallelObjectSetupContext.mMutex.wait ()\n%
    %        inParallelObjectSetupContext.mToManySetUpOperationList.append ({ self.%![mProperty mPropertyName]% = relationshipArray })\n%
    %        inParallelObjectSetupContext.mMutex.signal ()\n%
    %      }\n% 
  end
end
%    }\n% 
%  //--- End of addOperation\n%
%  }

%
end
%  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty objectAccessibilityCode]
end
%  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty objectAccessibilityCodeForSaveOperation]
end
%  }

%
if [SIGNATURE_SET count] > 0 then
%  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
%
for () in SIGNATURE_SET do
  %    crc.accumulateUInt32 (self.%!key%_property.signature ())\n%
end
%    return crc
  }

%
end
%  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------

