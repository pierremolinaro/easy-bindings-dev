//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

%
for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
%//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol %!ENTITY_NAME%_%![mProperty mPropertyName]% : class {
  var %![mProperty mPropertyName]% : %![[mProperty mType] swiftTypeName]% { get }
}

%
end
for () in PROXY_LIST_FOR_GENERATION do
%//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol %!ENTITY_NAME%_%![mProperty mPropertyName]% : class {
  var %![mProperty mPropertyName]% : %![[mProperty mType] swiftTypeName]%? { get }
}

%
end
for () in TRANSIENT_LIST_FOR_IMPLEMENTATION do
%//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol %!ENTITY_NAME%_%![mProperty mPropertyName]% : class {
  var %![mProperty mPropertyName]% : %![[mProperty mType] swiftTypeName]%? { get }
}

%
end
%//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"Entity: " + ENTITY_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class %!ENTITY_NAME% : %!SUPER_CLASS_NAME
for () in PROPERTY_LIST_FOR_GENERATION do
  if (mProperty is == @atomicPropertyGeneration) | (mProperty is == @transientPropertyGeneration)  | (mProperty is == @atomicProxyGeneration) then
    %,\n         %!ENTITY_NAME%_%![mProperty mPropertyName]
  end
end
% {

%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty propertyDeclarationCode !OVERRIDEN_TRANSIENTS]
end
%  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty configurationCode]
end
%  //--- Install undoers and opposite setter for relationships
%
for () in TO_MANY_RELATIONSHIP_LIST do
  switch [mProperty mOption]
  case none :

  case hasDependance (@string masterPropertyName *) :
    %    self.%![mProperty mPropertyName]%_property.setDataProvider (self.%!masterPropertyName%_property)\n%
    %    /* self.%![mProperty mPropertyName]%_property.mReadModelFunction =  { [weak self] in\n%
    %      if let model = self?.%!masterPropertyName%_property {\n%
    %        switch model.prop {\n%
    %        case .empty :\n%
    %          return .empty\n%
    %        case .multiple :\n%
    %          return .multiple\n%
    %        case .single (let modelArray) :\n%
    %          var array = [%![[mProperty mRelationshipType] swiftTypeName]%] ()\n%
    %          for baseObject in modelArray {\n%
    %            if let object = baseObject as? %![[mProperty mRelationshipType] swiftTypeName]% {\n%
    %              array.append (object)\n%
    %            }\n%
    %          }\n%
    %          return .single (array)\n%
    %        }\n%
    %      }else{\n%
    %        return .empty\n%
    %      }\n%
    %    }\n%
    %    self.%!masterPropertyName%_property.addEBObserver (self.%![mProperty mPropertyName]%_property) */\n%
  case hasOpposite (@string oppositeName) :
    %    self.%![mProperty mPropertyName]%_property.setOppositeRelationShipFunctions (\n%
    %      setter: { [weak self] inObject in if let me = self { inObject.%!oppositeName%_property.setProp (me) } },\n%
    %      resetter: { inObject in inObject.%!oppositeName%_property.setProp (nil) }\n%
    %    )\n%
  end
end
%  //--- Register properties for handling signature
%
for () in SIGNATURE_SET do
  %    self.%!key%_property.setSignatureObserver (observer: self)\n%
end
%  //--- Extern delegates
%
  for () in EXTERN_DELEGATE_LIST_FOR_IMPLEMENTATION do index idx
    %    self.mExternDelegate%![idx string]% = %!mExternSwiftDelegateName.string% (object: self)\n%
  end
%  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty terminationCode]
end
for () in TO_MANY_RELATIONSHIP_LIST do
  switch [mProperty mOption]
  case none :
  case hasDependance (@string masterPropertyName *) :
    %    self.%![mProperty mPropertyName]%_property.setDataProvider (nil)\n%
  case hasOpposite (*) :
  end
end
%  //--- Unregister properties for handling signature
%
for () in SIGNATURE_SET do
  %    self.%!key%_property.setSignatureObserver (observer: nil)\n%
end
%  }

  //····················································································································
  //    Extern delegates
  //····················································································································

%
  for () in EXTERN_DELEGATE_LIST_FOR_IMPLEMENTATION do index idx
    %  var mExternDelegate%![idx string]% : %!mExternSwiftDelegateName.string%? = nil\n%
  end
%
  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
%for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %    createEntryForPropertyNamed (\n%
  %      "%![mProperty mPropertyName]%",\n%
  %      idx: self.%![mProperty mPropertyName]%_property.ebObjectIndex,\n%
  %      y: &y,\n%
  %      view: view,\n%
  %      observerExplorer: &self.%![mProperty mPropertyName]%_property.mObserverExplorer,\n%
  %      valueExplorer: &self.%![mProperty mPropertyName]%_property.mValueExplorer\n%
  %    )\n%
end
%    createEntryForTitle ("Properties", y: &y, view: view)\n%
for () in TRANSIENT_LIST_FOR_IMPLEMENTATION do
  %    createEntryForPropertyNamed (\n%
  %      "%![mProperty mPropertyName]%",\n%
  %      idx: self.%![mProperty mPropertyName]%_property.ebObjectIndex,\n%
  %      y: &y,\n%
  %      view: view,\n%
  %      observerExplorer: &self.%![mProperty mPropertyName]%_property.mObserverExplorer,\n%
  %      valueExplorer: &self.%![mProperty mPropertyName]%_property.mValueExplorer\n%
  %    )\n%
end
%    createEntryForTitle ("Transients", y: &y, view: view)\n%
for () in TO_MANY_RELATIONSHIP_LIST do
  if not [[mProperty mOption] isHasDependance] then
    %    createEntryForToManyRelationshipNamed (\n%
    %      "%![mProperty mPropertyName]%",\n%
    %      idx:%![mProperty mPropertyName]%_property.ebObjectIndex,\n%
    %      y: &y,\n%
    %      view: view,\n%
    %      valueExplorer:&%![mProperty mPropertyName]%_property.mValueExplorer\n%
    %    )\n%
  end
end
%    createEntryForTitle ("ToMany Relationships", y: &y, view: view)\n%
for () in TO_ONE_RELATIONSHIP_LIST do
  %    createEntryForToOneRelationshipNamed (\n%
  %      "%![mProperty mPropertyName]%",\n%
  %      idx:self.%![mProperty mPropertyName]%_property.ebObjectIndex,\n%
  %      y: &y,\n%
  %      view: view,\n%
  %      valueExplorer:&self.%![mProperty mPropertyName]%_property.mValueExplorer\n%
  %    )\n%
end%    createEntryForTitle ("ToOne Relationships", y: &y, view: view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty clearObjectExplorerCode]
end
%  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
%
for () in TO_MANY_RELATIONSHIP_LIST do
  if not [[mProperty mOption] isHasDependance] then
    %    self.%![mProperty mPropertyName]%_property.setProp ([])\n%
  end
end
%  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
%
for () in TO_ONE_RELATIONSHIP_LIST do
  %    self.%![mProperty mPropertyName]%_property.setProp (nil)\n%
end
%  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty saveIntoDictionaryCode]
end
%  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty setupRelationshipFromDictionaryCode]
end
%  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty setupAtomicPropertyFromDictionaryCode]
end
%  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty objectAccessibilityCode]
end
%  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty objectAccessibilityCodeForSaveOperation]
end
%  }

%
if [SIGNATURE_SET count] > 0 then
%  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
%
for () in SIGNATURE_SET do
  %    crc.accumulateUInt32 (self.%!key%_property.signature ())\n%
end
%    return crc
  }

%
end
%  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"ReadOnlyArrayOf_" + ENTITY_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_%!ENTITY_NAME% : ReadOnlyAbstractArrayProperty <%!ENTITY_NAME%> {

  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <%!ENTITY_NAME%>, addedSet inAddedSet : Set <%!ENTITY_NAME%>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
%for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %    self.removeEBObserversOf_%![mProperty mPropertyName]%_fromElementsOfSet (inRemovedSet) // Stored property\n%
end
for () in TRANSIENT_LIST_FOR_IMPLEMENTATION do
  %    self.removeEBObserversOf_%![mProperty mPropertyName]%_fromElementsOfSet (inRemovedSet) // Transient property\n%
end
%  //--- Add observers to added objects
%for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %    self.addEBObserversOf_%![mProperty mPropertyName]%_toElementsOfSet (inAddedSet) // Stored property\n%
end
for () in TRANSIENT_LIST_FOR_IMPLEMENTATION do
  %    self.addEBObserversOf_%![mProperty mPropertyName]%_toElementsOfSet (inAddedSet) // Transient property\n%
end
%  }

%
for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
%  //····················································································································
  //   Observers of '%![mProperty mPropertyName]%' stored property
  //····················································································································

  private var mObserversOf_%![mProperty mPropertyName]% = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_%![mProperty mPropertyName]% (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_%![mProperty mPropertyName]%.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.%![mProperty mPropertyName]%_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_%![mProperty mPropertyName]% (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_%![mProperty mPropertyName]%.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.%![mProperty mPropertyName]%_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_%![mProperty mPropertyName]%_toElementsOfSet (_ inSet : Set<%!ENTITY_NAME%>) {
    for managedObject in inSet {
      self.mObserversOf_%![mProperty mPropertyName]%.apply { (_ observer : EBEvent) in
        managedObject.%![mProperty mPropertyName]%_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_%![mProperty mPropertyName]%_fromElementsOfSet (_ inSet : Set<%!ENTITY_NAME%>) {
    self.mObserversOf_%![mProperty mPropertyName]%.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.%![mProperty mPropertyName]%_property.removeEBObserver (observer)
      }
    }
  }

%
end
for () in PROXY_LIST_FOR_GENERATION do
%  //····················································································································
  //   Observers of '%![mProperty mPropertyName]%' proxy property
  //····················································································································

  private var mObserversOf_%![mProperty mPropertyName]% = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_%![mProperty mPropertyName]% (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_%![mProperty mPropertyName]%.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.%![mProperty mPropertyName]%_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_%![mProperty mPropertyName]% (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_%![mProperty mPropertyName]%.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.%![mProperty mPropertyName]%_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_%![mProperty mPropertyName]%_toElementsOfSet (_ inSet : Set<%!ENTITY_NAME%>) {
    for managedObject in inSet {
      self.mObserversOf_%![mProperty mPropertyName]%.apply { (_ observer : EBEvent) in
        managedObject.%![mProperty mPropertyName]%_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_%![mProperty mPropertyName]%_fromElementsOfSet (_ inSet : Set<%!ENTITY_NAME%>) {
    self.mObserversOf_%![mProperty mPropertyName]%.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.%![mProperty mPropertyName]%_property.removeEBObserver (observer)
      }
    }
  }

%
end
for () in TRANSIENT_LIST_FOR_IMPLEMENTATION do
%  //····················································································································
  //   Observers of '%![mProperty mPropertyName]%' transient property
  //····················································································································

  private var mObserversOf_%![mProperty mPropertyName]% = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_%![mProperty mPropertyName]% (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_%![mProperty mPropertyName]%.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.%![mProperty mPropertyName]%_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_%![mProperty mPropertyName]% (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_%![mProperty mPropertyName]%.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.%![mProperty mPropertyName]%_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_%![mProperty mPropertyName]%_toElementsOfSet (_ inSet : Set<%!ENTITY_NAME%>) {
    for managedObject in inSet {
      self.mObserversOf_%![mProperty mPropertyName]%.apply { (_ observer : EBEvent) in
        managedObject.%![mProperty mPropertyName]%_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_%![mProperty mPropertyName]%_fromElementsOfSet (_ inSet : Set<%!ENTITY_NAME%>) {
    for managedObject in inSet {
      self.mObserversOf_%![mProperty mPropertyName]%.apply { (_ observer : EBEvent) in
        managedObject.%![mProperty mPropertyName]%_property.removeEBObserver (observer)
      }
    }
  }

%
end
%  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf %!ENTITY_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_%!ENTITY_NAME% : ReadOnlyArrayOf_%!ENTITY_NAME% {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyArrayOf_%!ENTITY_NAME%? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyArrayOf_%!ENTITY_NAME%?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newArray : [%!ENTITY_NAME%] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        newArray = v
        self.mTransientKind = .single
       case .multiple :
        newArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newArray = []
      self.mTransientKind = .empty
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [%!ENTITY_NAME%] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [%!ENTITY_NAME%] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf %!ENTITY_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOfSuperOf_%!ENTITY_NAME% <SUPER : EBManagedObject> : ReadOnlyArrayOf_%!ENTITY_NAME% {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    var newModelArray : [SUPER] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newModelArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        newModelArray = v
        self.mTransientKind = .single
       case .multiple :
        newModelArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newModelArray = []
      self.mTransientKind = .empty
    }
    var newArray = [%!ENTITY_NAME%] ()
    for superObject in newModelArray {
      if let object = superObject as? %!ENTITY_NAME% {
        newArray.append (object)
      }
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [%!ENTITY_NAME%] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [%!ENTITY_NAME%] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"To many relationship read write: " + ENTITY_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_%!ENTITY_NAME% : ReadOnlyArrayOf_%!ENTITY_NAME% {

  //····················································································································
 
  func setProp (_ value :  [%!ENTITY_NAME%]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_%!ENTITY_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_%!ENTITY_NAME% : ReadWriteArrayOf_%!ENTITY_NAME% {

  //····················································································································

  private var mModel : ReadWriteArrayOf_%!ENTITY_NAME%? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteArrayOf_%!ENTITY_NAME%?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModelArray : [%!ENTITY_NAME%]
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModelArray = []
      case .single (let v) :
        newModelArray = v
       case .multiple :
        newModelArray = []
      }
    }else{
      newModelArray = []
    }
    self.mInternalArrayValue = newModelArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inArrayValue : [%!ENTITY_NAME%]) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var prop : EBSelection < [%!ENTITY_NAME%] > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : [%!ENTITY_NAME%] {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"To many relationship: " + ENTITY_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_%!ENTITY_NAME% : ReadWriteArrayOf_%!ENTITY_NAME%, EBSignatureObserverProtocol {

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : %!ENTITY_NAME%) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : %!ENTITY_NAME%) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : %!ENTITY_NAME%) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : %!ENTITY_NAME%) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································
  //  Init
  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [%!ENTITY_NAME%] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "%!ENTITY_NAME%") as? %!ENTITY_NAME% {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : [%!ENTITY_NAME%]) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object: inOldValue)
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································

  @objc func performUndo (_ oldValue : [%!ENTITY_NAME%]) {
    self.mInternalArrayValue = oldValue
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToManyRelationshipDisplay (objectArray: self.mInternalArrayValue, popUpButton: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //--- Write in preferences ?
    self.writeInPreferences ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers 
  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <%!ENTITY_NAME%>, addedSet inAddedSet : Set <%!ENTITY_NAME%>) {
    for managedObject in inRemovedSet {
      managedObject.setSignatureObserver (observer: nil)
      self.mResetOppositeRelationship? (managedObject)
    }
  //---
    for managedObject in inAddedSet {
      managedObject.setSignatureObserver (observer: self)
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }
 
  //····················································································································

  override var prop : EBSelection < [%!ENTITY_NAME%] > { return .single (self.mInternalArrayValue) }

  //····················································································································

  override func setProp (_ inValue : [%!ENTITY_NAME%]) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : [%!ENTITY_NAME%] { return self.mInternalArrayValue }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mInternalArrayValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  func remove (_ object : %!ENTITY_NAME%) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }
  
  //····················································································································

  func add (_ object : %!ENTITY_NAME%) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mInternalArrayValue {
      object.setSignatureObserver (observer: observer)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyObject_%!ENTITY_NAME% 
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyObject_%!ENTITY_NAME% : ReadOnlyAbstractObjectProperty <%!ENTITY_NAME%> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : %!ENTITY_NAME%?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
%for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %    inOldValue?.%![mProperty mPropertyName]%_property.removeEBObserversFrom (&self.mObserversOf_%![mProperty mPropertyName]%) // Stored property\n%
end
for () in TRANSIENT_LIST_FOR_IMPLEMENTATION do
  %    inOldValue?.%![mProperty mPropertyName]%_property.removeEBObserversFrom (&self.mObserversOf_%![mProperty mPropertyName]%) // Transient property\n%
end
%  //--- Add observers to added objects
%for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %    self.mInternalValue?.%![mProperty mPropertyName]%_property.addEBObserversFrom (&self.mObserversOf_%![mProperty mPropertyName]%) // Stored property\n%
end
for () in TRANSIENT_LIST_FOR_IMPLEMENTATION do
  %    self.mInternalValue?.%![mProperty mPropertyName]%_property.addEBObserversFrom (&self.mObserversOf_%![mProperty mPropertyName]%) // Transient property\n%
end
%  }

%
for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
%  //····················································································································
  //   Observers of '%![mProperty mPropertyName]%' stored property
  //····················································································································

  private var mObserversOf_%![mProperty mPropertyName]% = EBWeakEventSet ()

  //····················································································································

  var %![mProperty mPropertyName]%_property_selection : EBSelection <%![[mProperty mType] swiftTypeName]%?> {
    if let model = self.propval {
      switch (model.%![mProperty mPropertyName]%_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_%![mProperty mPropertyName]% (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_%![mProperty mPropertyName]%.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.%![mProperty mPropertyName]%_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_%![mProperty mPropertyName]% (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_%![mProperty mPropertyName]%.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.%![mProperty mPropertyName]%_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_%![mProperty mPropertyName]%_toElementsOfSet (_ inSet : Set<%!ENTITY_NAME%>) {
    for managedObject in inSet {
      self.mObserversOf_%![mProperty mPropertyName]%.apply { (_ observer : EBEvent) in
        managedObject.%![mProperty mPropertyName]%_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_%![mProperty mPropertyName]%_fromElementsOfSet (_ inSet : Set<%!ENTITY_NAME%>) {
    self.mObserversOf_%![mProperty mPropertyName]%.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.%![mProperty mPropertyName]%_property.removeEBObserver (observer)
      }
    }
  }

%
end
for () in PROXY_LIST_FOR_GENERATION do
%  //····················································································································
  //   Observers of '%![mProperty mPropertyName]%' proxy property
  //····················································································································

  private var mObserversOf_%![mProperty mPropertyName]% = EBWeakEventSet ()

  //····················································································································

  var %![mProperty mPropertyName]%_property_selection : EBSelection <%![[mProperty mType] swiftTypeName]%?> {
    if let model = self.propval {
      switch (model.%![mProperty mPropertyName]%_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_%![mProperty mPropertyName]% (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_%![mProperty mPropertyName]%.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.%![mProperty mPropertyName]%_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_%![mProperty mPropertyName]% (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_%![mProperty mPropertyName]%.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.%![mProperty mPropertyName]%_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_%![mProperty mPropertyName]%_toElementsOfSet (_ inSet : Set<%!ENTITY_NAME%>) {
    for managedObject in inSet {
      self.mObserversOf_%![mProperty mPropertyName]%.apply { (_ observer : EBEvent) in
        managedObject.%![mProperty mPropertyName]%_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_%![mProperty mPropertyName]%_fromElementsOfSet (_ inSet : Set<%!ENTITY_NAME%>) {
    self.mObserversOf_%![mProperty mPropertyName]%.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.%![mProperty mPropertyName]%_property.removeEBObserver (observer)
      }
    }
  }

%
end
for () in TRANSIENT_LIST_FOR_IMPLEMENTATION do
%  //····················································································································
  //   Observers of '%![mProperty mPropertyName]%' transient property
  //····················································································································

  private var mObserversOf_%![mProperty mPropertyName]% = EBWeakEventSet ()

  //····················································································································

  var %![mProperty mPropertyName]%_property_selection : EBSelection <%![[mProperty mType] swiftTypeName]%?> {
    if let model = self.propval {
      switch (model.%![mProperty mPropertyName]%_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_%![mProperty mPropertyName]% (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_%![mProperty mPropertyName]%.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.%![mProperty mPropertyName]%_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_%![mProperty mPropertyName]% (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_%![mProperty mPropertyName]%.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.%![mProperty mPropertyName]%_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_%![mProperty mPropertyName]%_toElementsOfSet (_ inSet : Set<%!ENTITY_NAME%>) {
    for managedObject in inSet {
      self.mObserversOf_%![mProperty mPropertyName]%.apply { (_ observer : EBEvent) in
        managedObject.%![mProperty mPropertyName]%_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_%![mProperty mPropertyName]%_fromElementsOfSet (_ inSet : Set<%!ENTITY_NAME%>) {
    for managedObject in inSet {
      self.mObserversOf_%![mProperty mPropertyName]%.apply { (_ observer : EBEvent) in
        managedObject.%![mProperty mPropertyName]%_property.removeEBObserver (observer)
      }
    }
  }

%
end
for () in TO_MANY_RELATIONSHIP_LIST do
  %  //····················································································································\n%
  %  //   Observable toMany property: %![mProperty mPropertyName]%\n%
  %  //····················································································································\n\n%
  %  private var mObserversOf_%![mProperty mPropertyName]% = EBWeakEventSet ()\n\n%
  %  //····················································································································\n\n%
  %  var %![mProperty mPropertyName]%_property_selection : EBSelection <[%![[mProperty mRelationshipType] swiftTypeName]%]> {\n%
  %    if let model = self.propval {\n%
  %      switch (model.%![mProperty mPropertyName]%_property_selection) {\n%
  %      case .empty :\n%
  %        return .empty\n%
  %      case .multiple :\n%
  %        return .multiple\n%
  %      case .single (let v) :\n%
  %        return .single (v)\n%
  %      }\n%
  %    }else{\n%
  %      return .empty\n%
  %    }\n%
  %  }\n\n%
  %  //····················································································································\n\n%
  %  final func addEBObserverOf_%![mProperty mPropertyName]% (_ inObserver : EBEvent) {\n%
  %    self.mObserversOf_%![mProperty mPropertyName]%.insert (inObserver)\n%
  %    if let object = self.propval {\n%
  %      object.%![mProperty mPropertyName]%_property.addEBObserver (inObserver)\n%
  %    }\n%
  %  }\n\n%
  %  //····················································································································\n\n%
  %  final func removeEBObserverOf_%![mProperty mPropertyName]% (_ inObserver : EBEvent) {\n%
  %    self.mObserversOf_%![mProperty mPropertyName]%.remove (inObserver)\n%
  %    if let object = self.propval {\n%
  %      object.%![mProperty mPropertyName]%_property.removeEBObserver (inObserver)\n%
  %    }\n%
  %  }\n\n%
end
for () in TO_ONE_RELATIONSHIP_LIST do
end
%  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientObject %!ENTITY_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientObject_%!ENTITY_NAME% : ReadOnlyObject_%!ENTITY_NAME% {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_%!ENTITY_NAME%? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_%!ENTITY_NAME%?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : %!ENTITY_NAME%? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < %!ENTITY_NAME%? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : %!ENTITY_NAME%? { return self.mInternalValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadWriteObject_%!ENTITY_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteObject_%!ENTITY_NAME% : ReadOnlyObject_%!ENTITY_NAME% {

  //····················································································································
 
  func setProp (_ inValue : %!ENTITY_NAME%?) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyObject_%!ENTITY_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyObject_%!ENTITY_NAME% : ReadWriteObject_%!ENTITY_NAME% {

  //····················································································································

  private var mModel : ReadWriteObject_%!ENTITY_NAME%? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_%!ENTITY_NAME%?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : %!ENTITY_NAME%?
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : %!ENTITY_NAME%?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var prop : EBSelection < %!ENTITY_NAME%? > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : %!ENTITY_NAME%? {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    StoredObject_%!ENTITY_NAME% 
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredObject_%!ENTITY_NAME% : ReadWriteObject_%!ENTITY_NAME%, EBSignatureObserverProtocol {

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : %!ENTITY_NAME%) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : %!ENTITY_NAME%) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : %!ENTITY_NAME%) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : %!ENTITY_NAME%) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : %!ENTITY_NAME%?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object: inOldValue)
  //---
    if let object = inOldValue {
      object.setSignatureObserver (observer: nil)
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      object.setSignatureObserver (observer: self)
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································

  @objc func performUndo (_ oldValue : %!ENTITY_NAME%?) {
    self.mInternalValue = oldValue
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < %!ENTITY_NAME%? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : %!ENTITY_NAME%?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : %!ENTITY_NAME%? { return self.mInternalValue }

  //····················································································································

  func remove (_ object : %!ENTITY_NAME%) {
    if object === self.mInternalValue {
      self.mInternalValue = nil
    }
  }
  
  //····················································································································

  func add (_ object : %!ENTITY_NAME%) {
    if object !== self.mInternalValue {
      self.mInternalValue = object
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    self.mInternalValue?.setSignatureObserver (observer: observer)
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

