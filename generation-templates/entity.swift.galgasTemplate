import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"ReadOnlyArrayOf_" + ENTITY_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(ReadOnlyArrayOf_%!ENTITY_NAME%)
class ReadOnlyArrayOf_%!ENTITY_NAME% : EBObject {

  var prop : EBProperty <Array<%!ENTITY_NAME%> > { get { return .noSelection } }

  //····················································································································

%
for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
%  var mObserversOf_%!mStoredPropertyName% = Set<EBEvent> ()

  final func addObserverOf_%!mStoredPropertyName% (inObserver : EBEvent, postEvent inTrigger:Bool) {
    mObserversOf_%!mStoredPropertyName%.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.%!mStoredPropertyName%.addObserver (inObserver, postEvent:inTrigger)
      }
    }
  }

  final func removeObserverOf_%!mStoredPropertyName% (inObserver : EBEvent, postEvent inTrigger:Bool) {
    mObserversOf_%!mStoredPropertyName%.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.%!mStoredPropertyName%.removeObserver (inObserver, postEvent:inTrigger)
      }
    }
  }

  //····················································································································

%
end
%}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"TransientArrayOf_" + ENTITY_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(TransientArrayOf_%!ENTITY_NAME%)
class TransientArrayOf_%!ENTITY_NAME% : ReadOnlyArrayOf_%!ENTITY_NAME% {

  var computeFunction : Optional<() -> EBProperty <Array<%!ENTITY_NAME%> > >
  
  var count = EBTransientProperty_Int ()

  private var prop_cache : EBProperty <Array<%!ENTITY_NAME%> >? 

  //····················································································································

  override init () {
    super.init ()
    count.computeFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          return .singleSelection (v.count)
        }
      }else{
        return .noSelection
      }
    }
  }

  //····················································································································

  private var mSet = Set <%!ENTITY_NAME%> ()

  override var prop : EBProperty <Array<%!ENTITY_NAME%> > {
    get {
      if let unwrappedComputeFunction = computeFunction where prop_cache == nil {
        prop_cache = unwrappedComputeFunction ()
        let newSet : Set <%!ENTITY_NAME%>
        switch prop_cache! {
        case .multipleSelection, .noSelection :
          newSet = Set <%!ENTITY_NAME%> ()
        case .singleSelection (let array) :
          newSet = Set (array)
        }
%
if [SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION length] > 0 then
%     //--- Removed object set
        for managedObject : %!ENTITY_NAME% in mSet.subtract (newSet) {
%for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
%          for observer in mObserversOf_%!mStoredPropertyName% {
            managedObject.%!mStoredPropertyName%.removeObserver (observer, postEvent:true)
          }
%end
%        }
      //--- Added object set
        for managedObject : %!ENTITY_NAME% in newSet.subtract (mSet) {
%for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
%          for observer in mObserversOf_%!mStoredPropertyName% {
            managedObject.%!mStoredPropertyName%.addObserver (observer, postEvent:true)
          }
%end
%        }
%
end
%        mSet = newSet
      }
      if prop_cache == nil {
        prop_cache = .noSelection
      }
      return prop_cache!
    }
  }

  //····················································································································

  func postEvent () {
    if prop_cache != nil {
      prop_cache = nil
%
for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %      for observer in mObserversOf_%!mStoredPropertyName% {\n%
  %        observer.postEvent ()\n%
  %      }\n%
end
%      count.postEvent ()
    }
  }

  //····················································································································

}

%
for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
%//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(%!ENTITY_NAME%_%!mStoredPropertyName%) protocol %!ENTITY_NAME%_%!mStoredPropertyName% {
  var %!mStoredPropertyName% : EBStoredProperty_%![mType swiftTypeName]% { get }
}

%
end

for () in TO_MANY_RELATIONSHIP_LIST do
%//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"To many relationship: " + mToManyRelationshipName%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(ToManyRelationship_%!ENTITY_NAME%_%!mToManyRelationshipName%)
final class ToManyRelationship_%!ENTITY_NAME%_%!mToManyRelationshipName% :
ReadOnlyArrayOf_%![mRelationshipType swiftTypeName]%, EBSignatureObserverProtocol {
  weak var owner : %!ENTITY_NAME%?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .noSelection, .multipleSelection :
          break ;
        case .singleSelection (let v) :
          updateManagedObjectToManyRelationshipDisplay (v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    count.computeFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          return .singleSelection (v.count)
        }
      }else{
        return .noSelection
      }
    }
  }

  //····················································································································

  var count = EBTransientProperty_Int ()

  //····················································································································

  private var mSet = Set<%![mRelationshipType swiftTypeName]%> ()
  private var mValue = Array<%![mRelationshipType swiftTypeName]%> () {
    didSet {
      if oldValue != mValue {
        clearSignatureCache ()
        mSet = Set (mValue)
        let oldSet = Set (oldValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndoWithTarget (self, selector:"performUndo:", object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (mValue, popUpButton:valueExplorer)
        }
      //--- Removed object set
        for managedObject : %![mRelationshipType swiftTypeName]% in oldSet.subtract (mSet) {
          managedObject.setSignatureObserver (nil)
%for () in mDestinationEntityObservablePropertyMap do
if (not [mMultiplicity isCollection]) & not [mType isEntityType] then
%          for observer in mObserversOf_%!lkey.string% {
            managedObject.%!lkey.string%.removeObserver (observer, postEvent:true)
          }
%end
end
%          managedObject.%!mOppositeRelationshipName%.owner = nil ;
        }
      //--- Added object set
        for managedObject : %![mRelationshipType swiftTypeName]% in mSet.subtract (oldSet) {
          managedObject.setSignatureObserver (self)
%for () in mDestinationEntityObservablePropertyMap do
if (not [mMultiplicity isCollection]) & not [mType isEntityType] then
%          for observer in mObserversOf_%!lkey.string% {
            managedObject.%!lkey.string%.addObserver (observer, postEvent:true)
          }
%end
end
%          managedObject.%!mOppositeRelationshipName%.setProp (owner)
        }
      //--- Notify observers object count did change
        // postEvent ()
        if oldValue.count != mValue.count {
          count.postEvent ()
        }
      }
    }
  }

  override var prop : EBProperty <Array<%![mRelationshipType swiftTypeName]%> > {
    get {
      return .singleSelection (mValue ?? Array<%![mRelationshipType swiftTypeName]%> ())
    }
  }

  func setProp (inValue :  Array<%![mRelationshipType swiftTypeName]%>) { mValue = inValue }

  var propval : Array<%![mRelationshipType swiftTypeName]%> { get { return mValue ?? Array<%![mRelationshipType swiftTypeName]%> () } }

  //····················································································································

  func performUndo (oldValue : Array<%![mRelationshipType swiftTypeName]%>) {
    mValue = oldValue
  }

  //····················································································································

  func remove (object : %![mRelationshipType swiftTypeName]%) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.indexOf (object)
      array.removeAtIndex (idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (object : %![mRelationshipType swiftTypeName]%) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   setSignatureObserver
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (self)
    }
  }

  //····················································································································
  //   signature
  //····················································································································

  private var mSignatureCache : UInt32?
 
  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································
  //   computeSignature
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
%
end

for () in TO_ONE_RELATIONSHIP_LIST do
%//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"To one relationship: " + mToOneRelationshipName%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(ToOneRelationship_%!ENTITY_NAME%_%!mToOneRelationshipName%)
final class ToOneRelationship_%!ENTITY_NAME%_%!mToOneRelationshipName% : EBAbstractProperty {
  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .noSelection, .multipleSelection :
          break ;
        case .singleSelection (let v) :
          updateManagedObjectToOneRelationshipDisplay (v, button:unwrappedExplorer)
        }
      }
    }
  }

  weak var owner : %!ENTITY_NAME%? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        updateManagedObjectToOneRelationshipDisplay (propval, button:unwrappedExplorer)
      }
    }
  }
 
  weak private var mValue : %![mRelationshipType swiftTypeName]%? {
    didSet {
      if let unwrappedOwner = owner where oldValue !== mValue {
      //--- Register old value in undo manager
        unwrappedOwner.undoManager()?.registerUndoWithTarget (self, selector:"performUndo:", object:oldValue)
      //--- Update explorer
        if let unwrappedExplorer = mValueExplorer {
          updateManagedObjectToOneRelationshipDisplay (mValue, button:unwrappedExplorer)
        }
%    if [mInverseRelationMultiplicity isCollection] then
%      //--- Reset old opposite relation ship
        if let unwrappedOldValue = oldValue {
          unwrappedOldValue.%!mOppositeRelationshipName%.remove (unwrappedOwner)
        }
      //--- Set new opposite relation ship
        if let unwrappedValue = mValue {
          unwrappedValue.%!mOppositeRelationshipName%.add (unwrappedOwner)
        }
%    else
%     //--- Reset old opposite relation ship
        oldValue?.%!mOppositeRelationshipName% = nil
      //--- Set new opposite relation ship
        %!mToOneRelationshipName%?.%!mOppositeRelationshipName% = self
%    end
%      //--- Notify observers
        postEvent ()
      }
    }
  }

  var propval : %![mRelationshipType swiftTypeName]%? { get { return mValue } }

  var prop : EBProperty <%![mRelationshipType swiftTypeName]%?> { get { return .singleSelection (mValue) } }

  func setProp (value : %![mRelationshipType swiftTypeName]%?) { mValue = value }

  //····················································································································

  func performUndo (oldValue : %![mRelationshipType swiftTypeName]%?) {
    mValue = oldValue
  }

  //····················································································································

  func remove (object : %![mRelationshipType swiftTypeName]%) {
    if mValue === object {
      mValue = nil
    }
  }
  
  //····················································································································

  func add (object : %![mRelationshipType swiftTypeName]%) {
    mValue = object
  }

}
%
end
%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"Entity: " + ENTITY_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(%!ENTITY_NAME%) class %!ENTITY_NAME% : EBManagedObject%
for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %, %!ENTITY_NAME%_%!mStoredPropertyName
end
% {

  //····················································································································
  //    Properties
  //····················································································································

%
for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %  var %!mStoredPropertyName% = EBStoredProperty_%![mType swiftTypeName]% (%!mDefaultValueInSwift%)\n%
  %  var %!mStoredPropertyName%_keyCodingValue : %![mType swiftTypeName]% {\n%
  %    get {\n%
  %      switch %!mStoredPropertyName%.prop {\n%
  %      case .noSelection, .multipleSelection :\n%
  %        return %![mType defaultSwiftTypeValueAsString]%\n%
  %      case .singleSelection (let v) :\n%
  %        return v\n%
  %      }\n%
  %    }\n%
  %  }\n\n%
end
%  //····················································································································
  //    Transient properties
  //····················································································································

%

for () in TRANSIENT_LIST_FOR_IMPLEMENTATION do
%  var %!mTransientName% = EBTransientProperty_%![mTransientType swiftTypeName]% ()\n%
end

%
  //····················································································································
  //    Relationships
  //····················································································································

%
for () in TO_MANY_RELATIONSHIP_LIST do
  %  var %!mToManyRelationshipName% = ToManyRelationship_%!ENTITY_NAME%_%!mToManyRelationshipName% ()\n%
end
for () in TO_ONE_RELATIONSHIP_LIST do
  %  var %!mToOneRelationshipName% = ToOneRelationship_%!ENTITY_NAME%_%!mToOneRelationshipName% ()\n%
end
%
  //····················································································································
  //    init
  //····················································································································

  override init (managedObjectContext : EBManagedObjectContext) {
    super.init (managedObjectContext:managedObjectContext)
%
for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  if mNeedsValidation then
%    %!mStoredPropertyName%.setValidationFunction (self.validate_%!mStoredPropertyName%)\n%
  end
end
%  //--- Install compute functions for transients
%
for () in TRANSIENT_LIST_FOR_IMPLEMENTATION do
  if [mDependencyList needs_unwSelf] then
    %    %!mTransientName%.computeFunction = { [weak self] in\n%
    %      if let unwSelf = self {\n%
    ![mDependencyList transientComputeFunctionCall !ENTITY_NAME !mTransientName]
    %      }else{\n%
    %        return .noSelection\n%
    %      }\n%
    %    }\n%
  else
    %    %!mTransientName%.computeFunction = {\n%
    ![mDependencyList transientComputeFunctionCall !ENTITY_NAME !mTransientName]
    %    }\n%
  end
end
%  //--- Install property observers for transients
%
for () in TRANSIENT_LIST_FOR_IMPLEMENTATION do
  for () in mDependencyList do
    %    %![mDependency generateAddObserverCall]% (%!mTransientName%, postEvent:true)\n%
  end
end
%  //--- Install undoers for properties
%
for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %    %!mStoredPropertyName%.undoManager = undoManager ()\n%
end
%  //--- Install owner for relationships
%
for () in TO_ONE_RELATIONSHIP_LIST do
  %    %!mToOneRelationshipName%.owner = self\n%
end
for () in TO_MANY_RELATIONSHIP_LIST do
  %    %!mToManyRelationshipName%.owner = self\n%
end
%  //--- register properties for handling signature
%
for () in SIGNATURE_SET do
  %    %!key%.setSignatureObserver (self)\n%
end
%  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (inout y : CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
%for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %    createEntryForPropertyNamed (\n%
  %      "%!mStoredPropertyName%",\n%
  %      idx:%!mStoredPropertyName%.mExplorerObjectIndex,\n%
  %      y:&y,\n%
  %      view:view,\n%
  %      observerExplorer:&%!mStoredPropertyName%.mObserverExplorer,\n%
  %      valueExplorer:&%!mStoredPropertyName%.mValueExplorer\n%
  %    )\n%
end
for () in TO_MANY_RELATIONSHIP_LIST do
  %    createEntryForToManyRelationshipNamed (\n%
  %      "%!mToManyRelationshipName%",\n%
  %      idx:%!mToManyRelationshipName%.mExplorerObjectIndex,\n%
  %      y: &y,\n%
  %      view: view,\n%
  %      valueExplorer:&%!mToManyRelationshipName%.mValueExplorer\n%
  %    )\n%
end
for () in TO_ONE_RELATIONSHIP_LIST do
  %    createEntryForToOneRelationshipNamed (\n%
  %      "%!mToOneRelationshipName%",\n%
  %      idx:%!mToOneRelationshipName%.mExplorerObjectIndex,\n%
  %      y: &y,\n%
  %      view: view,\n%
  %      valueExplorer:&%!mToOneRelationshipName%.mValueExplorer\n%
  %    )\n%
end%  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
%for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
%    %!mStoredPropertyName%.mObserverExplorer = nil\n%
%    %!mStoredPropertyName%.mValueExplorer = nil\n%
end
for () in TO_ONE_RELATIONSHIP_LIST do
%    %!mToOneRelationshipName%.mObserverExplorer = nil\n%
%    %!mToOneRelationshipName%.mValueExplorer = nil\n%
end
for () in TO_MANY_RELATIONSHIP_LIST do
%    // %!mToManyRelationshipName%.mObserverExplorer = nil\n%
%    %!mToManyRelationshipName%.mValueExplorer = nil\n%
end
%    super.clearObjectExplorer ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
%for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
%    %!mStoredPropertyName%.storeInDictionary (ioDictionary, forKey: "%!mStoredPropertyName%")\n%
end
for () in TO_MANY_RELATIONSHIP_LIST do
%    storeEntityArrayInDictionary (%!mToManyRelationshipName%.propval, inRelationshipName:"%!mToManyRelationshipName%", ioDictionary:ioDictionary) ;\n%
end
for () in TO_ONE_RELATIONSHIP_LIST do
  if [mInverseRelationMultiplicity isSingle] then
%    storeEntityInDictionary (%!mToOneRelationshipName%.propval, inRelationshipName:"%!mToOneRelationshipName%", ioDictionary:ioDictionary) ;\n%
end
end
%  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (inDictionary : NSDictionary,
                                     managedObjectArray : Array<EBManagedObject>) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:managedObjectArray)
%for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
%    %!mStoredPropertyName%.readFromDictionary (inDictionary, forKey:"%!mStoredPropertyName%")\n%
end
for () in TO_MANY_RELATIONSHIP_LIST do
%    %!mToManyRelationshipName%.setProp (readEntityArrayFromDictionary (
      "%!mToManyRelationshipName%",
      inDictionary:inDictionary,
      managedObjectArray:managedObjectArray
    ) as! Array<%![mRelationshipType swiftTypeName]%>)\n%
end
for () in TO_ONE_RELATIONSHIP_LIST do
  if [mInverseRelationMultiplicity isSingle] then
%    %!mToOneRelationshipName%.prop = readEntityFromDictionary (
        "%!mToOneRelationshipName%",
        inDictionary:inDictionary,
        managedObjectArray:managedObjectArray
      ) as? %![mRelationshipType swiftTypeName]%\n%
  end
end
%  }

%if [TO_MANY_RELATIONSHIP_LIST length] > 0 then
%  //····················································································································
  //   resetToManyRelationships
  //····················································································································

  override func resetToManyRelationships () {
    super.resetToManyRelationships ()
%
for () in TO_MANY_RELATIONSHIP_LIST do
%    %!mToManyRelationshipName%.setProp (Array ())\n%
end
%  }

%end

if [TO_ONE_RELATIONSHIP_LIST length] > 0 then
%  //····················································································································
  //   resetToOneRelationships
  //····················································································································

  override func resetToOneRelationships () {
    super.resetToOneRelationships ()
%
for () in TO_ONE_RELATIONSHIP_LIST do
%    %!mToOneRelationshipName%.setProp (nil)\n%
end
%  }

%end
%  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (inout objects : Array<EBManagedObject>) {
    super.accessibleObjects (&objects)
%
for () in TO_MANY_RELATIONSHIP_LIST do
%    for managedObject : EBManagedObject in %!mToManyRelationshipName%.propval {
      objects.append (managedObject)
    }\n%
end
for () in TO_ONE_RELATIONSHIP_LIST do
%    if let object = %!mToOneRelationshipName%.propval {\n%
%      objects.append (object)\n%
%    }\n%
end
%  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
%
for () in SIGNATURE_SET do
  %    crc.accumulateUInt32 (%!key%.signature ())\n%
end
%    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

