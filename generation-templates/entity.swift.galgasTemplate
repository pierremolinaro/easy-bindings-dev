//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

%
for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
%//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol %!ENTITY_NAME%_%![mProperty mPropertyName]% : class {
  var %![mProperty mPropertyName]% : %![[mProperty mType] swiftTypeName]% { get }
}

%
end
for () in PROXY_LIST_FOR_GENERATION do
%//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol %!ENTITY_NAME%_%![mProperty mPropertyName]% : class {
  var %![mProperty mPropertyName]% : %![[mProperty mType] swiftTypeName]%? { get }
}

%
end
for () in TRANSIENT_LIST_FOR_IMPLEMENTATION do
%//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol %!ENTITY_NAME%_%![mProperty mPropertyName]% : class {
  var %![mProperty mPropertyName]% : %![[mProperty mType] swiftTypeName]%? { get }
}

%
end
%//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"Entity: " + ENTITY_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class %!ENTITY_NAME% : %!SUPER_CLASS_NAME
for () in PROPERTY_LIST_FOR_GENERATION do
  if (mProperty is == @atomicPropertyGeneration) | (mProperty is == @transientPropertyGeneration)  | (mProperty is == @atomicProxyGeneration) then
    %,\n         %!ENTITY_NAME%_%![mProperty mPropertyName]
  end
end
% {

%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty propertyDeclarationCode !OVERRIDEN_TRANSIENTS]
end
%  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty configurationCode]
end
%  //--- Install undoers and opposite setter for relationships
%
for () in TO_MANY_RELATIONSHIP_LIST do
  switch [mProperty mOption]
  case none :

  case hasDependance (@string masterPropertyName *) :
    %    self.%![mProperty mPropertyName]%_property.setDataProvider (self.%!masterPropertyName%_property)\n%
    %    /* self.%![mProperty mPropertyName]%_property.mReadModelFunction =  { [weak self] in\n%
    %      if let model = self?.%!masterPropertyName%_property {\n%
    %        switch model.prop {\n%
    %        case .empty :\n%
    %          return .empty\n%
    %        case .multiple :\n%
    %          return .multiple\n%
    %        case .single (let modelArray) :\n%
    %          var array = [%![[mProperty mRelationshipType] swiftTypeName]%] ()\n%
    %          for baseObject in modelArray {\n%
    %            if let object = baseObject as? %![[mProperty mRelationshipType] swiftTypeName]% {\n%
    %              array.append (object)\n%
    %            }\n%
    %          }\n%
    %          return .single (array)\n%
    %        }\n%
    %      }else{\n%
    %        return .empty\n%
    %      }\n%
    %    }\n%
    %    self.%!masterPropertyName%_property.addEBObserver (self.%![mProperty mPropertyName]%_property) */\n%
  case hasOpposite (@string oppositeName) :
    %    self.%![mProperty mPropertyName]%_property.setOppositeRelationShipFunctions (\n%
    %      setter: { [weak self] inObject in if let me = self { inObject.%!oppositeName%_property.setProp (me) } },\n%
    %      resetter: { inObject in inObject.%!oppositeName%_property.setProp (nil) }\n%
    %    )\n%
  end
end
%  //--- Register properties for handling signature
%
for () in SIGNATURE_SET do
  %    self.%!key%_property.setSignatureObserver (observer: self)\n%
end
%  //--- Extern delegates
%
  for () in EXTERN_DELEGATE_LIST_FOR_IMPLEMENTATION do index idx
    %    self.mExternDelegate%![idx string]% = %!mExternSwiftDelegateName.string% (object: self)\n%
  end
%  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty terminationCode]
end
for () in TO_MANY_RELATIONSHIP_LIST do
  switch [mProperty mOption]
  case none :
  case hasDependance (2*) :
    %    self.%![mProperty mPropertyName]%_property.setDataProvider (nil)\n%
  case hasOpposite (*) :
  end
end
%  //--- Unregister properties for handling signature
%
for () in SIGNATURE_SET do
  %    self.%!key%_property.setSignatureObserver (observer: nil)\n%
end
%  }

  //····················································································································
  //    Extern delegates
  //····················································································································

%
  for () in EXTERN_DELEGATE_LIST_FOR_IMPLEMENTATION do index idx
    %  var mExternDelegate%![idx string]% : %!mExternSwiftDelegateName.string%? = nil\n%
  end
%
  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
%for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %    createEntryForPropertyNamed (\n%
  %      "%![mProperty mPropertyName]%",\n%
  %      idx: self.%![mProperty mPropertyName]%_property.ebObjectIndex,\n%
  %      y: &y,\n%
  %      view: view,\n%
  %      observerExplorer: &self.%![mProperty mPropertyName]%_property.mObserverExplorer,\n%
  %      valueExplorer: &self.%![mProperty mPropertyName]%_property.mValueExplorer\n%
  %    )\n%
end
%    createEntryForTitle ("Properties", y: &y, view: view)\n%
for () in TRANSIENT_LIST_FOR_IMPLEMENTATION do
  %    createEntryForPropertyNamed (\n%
  %      "%![mProperty mPropertyName]%",\n%
  %      idx: self.%![mProperty mPropertyName]%_property.ebObjectIndex,\n%
  %      y: &y,\n%
  %      view: view,\n%
  %      observerExplorer: &self.%![mProperty mPropertyName]%_property.mObserverExplorer,\n%
  %      valueExplorer: &self.%![mProperty mPropertyName]%_property.mValueExplorer\n%
  %    )\n%
end
%    createEntryForTitle ("Transients", y: &y, view: view)\n%
for () in TO_MANY_RELATIONSHIP_LIST do
  if not [[mProperty mOption] isHasDependance] then
    %    createEntryForToManyRelationshipNamed (\n%
    %      "%![mProperty mPropertyName]%",\n%
    %      idx:%![mProperty mPropertyName]%_property.ebObjectIndex,\n%
    %      y: &y,\n%
    %      view: view,\n%
    %      valueExplorer:&%![mProperty mPropertyName]%_property.mValueExplorer\n%
    %    )\n%
  end
end
%    createEntryForTitle ("ToMany Relationships", y: &y, view: view)\n%
for () in TO_ONE_RELATIONSHIP_LIST do
  %    createEntryForToOneRelationshipNamed (\n%
  %      "%![mProperty mPropertyName]%",\n%
  %      idx:self.%![mProperty mPropertyName]%_property.ebObjectIndex,\n%
  %      y: &y,\n%
  %      view: view,\n%
  %      valueExplorer:&self.%![mProperty mPropertyName]%_property.mValueExplorer\n%
  %    )\n%
end%    createEntryForTitle ("ToOne Relationships", y: &y, view: view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty clearObjectExplorerCode]
end
%  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
%
for () in TO_MANY_RELATIONSHIP_LIST do
  if not [[mProperty mOption] isHasDependance] then
    %    self.%![mProperty mPropertyName]% = []\n%
  end
end
%  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
%
for () in TO_ONE_RELATIONSHIP_LIST do
  %    self.%![mProperty mPropertyName]% = nil\n%
end
%  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty saveIntoDictionaryCode]
end
%  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty setupRelationshipFromDictionaryCode]
end
%  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty setupAtomicPropertyFromDictionaryCode]
end
%  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty objectAccessibilityCode]
end
%  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty objectAccessibilityCodeForSaveOperation]
end
%  }

%
if [SIGNATURE_SET count] > 0 then
%  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
%
for () in SIGNATURE_SET do
  %    crc.accumulateUInt32 (self.%!key%_property.signature ())\n%
end
%    return crc
  }

%
end
%  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

