import Cocoa

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
//    %!["ReadOnlyArrayOf_" + ENTITY_NAME stringByRightPadding !113 !' ']%*
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

class ReadOnlyArrayOf_%!ENTITY_NAME% : PMAbstractProperty {

  var prop : PMProperty <Array<%!ENTITY_NAME%> > { get { return .noSelection } }

  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

%
for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
%  var mObserversOf_%!mStoredPropertyName% = Set<PMEvent> ()

  func addObserverOf_%!mStoredPropertyName% (inObserver : PMEvent, postEvent inTrigger:Bool) {
    mObserversOf_%!mStoredPropertyName%.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.%!mStoredPropertyName%.addObserver (inObserver, postEvent:inTrigger)
      }
    }
  }

  func removeObserverOf_%!mStoredPropertyName% (inObserver : PMEvent, postEvent inTrigger:Bool) {
    mObserversOf_%!mStoredPropertyName%.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.%!mStoredPropertyName%.removeObserver (inObserver, postEvent:inTrigger)
      }
    }
  }

  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

%
end
%}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
//    %!["TransientArrayOf_" + ENTITY_NAME stringByRightPadding !113 !' ']%*
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

class TransientArrayOf_%!ENTITY_NAME% : ReadOnlyArrayOf_%!ENTITY_NAME% {

  var computeFunction : Optional<() -> PMProperty <Array<%!ENTITY_NAME%> > >
  
  var count = PMTransientProperty_Int ()

  private var prop_cache : PMProperty <Array<%!ENTITY_NAME%> >? 

  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

  override init () {
    super.init ()
    count.computeFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          return .singleSelection (v.count)
        }
      }else{
        return .noSelection
      }
    }
  }

  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

  override var prop : PMProperty <Array<%!ENTITY_NAME%> > {
    get {
      if let unwrappedComputeFunction = computeFunction where prop_cache == nil {
        prop_cache = unwrappedComputeFunction ()
      }
      if prop_cache == nil {
        prop_cache = .noSelection
      }
      return prop_cache!
    }
  }

  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

  override func postEvent () {
    if prop_cache != nil {
      prop_cache = nil
      count.postEvent ()
      super.postEvent ()
    }
  }

  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

}

%
for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
%//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

@objc(%!ENTITY_NAME%_%!mStoredPropertyName%) protocol %!ENTITY_NAME%_%!mStoredPropertyName% {
  var %!mStoredPropertyName% : PMStoredProperty_%![mType swiftTypeName]% { get }
}

%
end

for () in TO_MANY_RELATIONSHIP_LIST do
%//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
//    %!["To many relationship: " + mToManyRelationshipName stringByRightPadding !113 !' ']%*
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

class ToManyRelationship_%!ENTITY_NAME%_%!mToManyRelationshipName% : ReadOnlyArrayOf_%![mRelationshipType swiftTypeName]% {
  weak var owner : %!ENTITY_NAME%?

  var explorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = explorer, unwrappedOwner = owner {
        switch prop {
        case .noSelection, .multipleSelection :
          break ;
        case .singleSelection (let v) :
          unwrappedOwner.updateManagedObjectToManyRelationshipDisplay (v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

  override init () {
    super.init ()
    count.computeFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          return .singleSelection (v.count)
        }
      }else{
        return .noSelection
      }
    }
  }

  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

  var count = PMTransientProperty_Int ()

  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

  var mSet = Set<%![mRelationshipType swiftTypeName]%> ()
  var mValue : Array<%![mRelationshipType swiftTypeName]%> = Array<%![mRelationshipType swiftTypeName]%> () {
    didSet {
      if oldValue != mValue {
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndoWithTarget (self, selector:"performUndo:", object:oldValue)
      //--- Update explorer
        if explorer != nil {
          owner?.updateManagedObjectToManyRelationshipDisplay (mValue, popUpButton:explorer!)
        }
      //--- Removed object set
        var removedObjectSet : Set<%![mRelationshipType swiftTypeName]%> = Set (oldValue)
        removedObjectSet.subtractInPlace (mValue)
        for managedObject : %![mRelationshipType swiftTypeName]% in removedObjectSet {
%for () in mDestinationEntityObservablePropertyMap do
if (not [mMultiplicity isCollection]) & not [mType isEntityType] then
%          for observer in mObserversOf_%!lkey.string% {
            managedObject.%!lkey.string%.removeObserver (observer, postEvent:true)
          }
%end
end
%          managedObject.%!mOppositeRelationshipName%.owner = nil ;
        }
      //--- Added object set
        var addedObjectSet : Set<%![mRelationshipType swiftTypeName]%> = Set (mValue)
        addedObjectSet.subtractInPlace (oldValue)
        for managedObject : %![mRelationshipType swiftTypeName]% in addedObjectSet {
%for () in mDestinationEntityObservablePropertyMap do
if (not [mMultiplicity isCollection]) & not [mType isEntityType] then
%          for observer in mObserversOf_%!lkey.string% {
            managedObject.%!lkey.string%.addObserver (observer, postEvent:true)
          }
%end
end
%          managedObject.%!mOppositeRelationshipName%.setProp (owner)
        }
      //--- Notify observers object count did change
        postEvent ()
        if oldValue.count != mValue.count {
          count.postEvent ()
        }
      }
    }
  }

  override var prop : PMProperty <Array<%![mRelationshipType swiftTypeName]%> > {
    get {
      return .singleSelection (mValue)
    }
  }

  func setProp (inValue :  Array<%![mRelationshipType swiftTypeName]%>) { mValue = inValue }

  var propval : Array<%![mRelationshipType swiftTypeName]%> { get { return mValue } }

  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

  func performUndo (oldValue : Array<%![mRelationshipType swiftTypeName]%>) {
    mValue = oldValue
  }

  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

  func remove (object : %![mRelationshipType swiftTypeName]%) {
    if mSet.contains (object) {
      var array = mValue
      let idx = find (array, object)
      array.removeAtIndex (idx!)
      mValue = array
    }
  }
  
  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

  func add (object : %![mRelationshipType swiftTypeName]%) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*
 
}
%
end

for () in TO_ONE_RELATIONSHIP_LIST do
%//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
//    %!["To one relationship: " + mToOneRelationshipName stringByRightPadding !113 !' ']%*
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

class ToOneRelationship_%!ENTITY_NAME%_%!mToOneRelationshipName% : PMAbstractProperty {
  var explorer : NSButton?
  weak var owner : %!ENTITY_NAME%? {
    didSet {
      if let unwrappedExplorer = explorer, unwrappedOwner = owner {
        unwrappedOwner.updateManagedObjectToOneRelationshipDisplay (propval, button : unwrappedExplorer)
      }
    }
  }
 
  weak private var mValue : %![mRelationshipType swiftTypeName]%? {
    didSet {
      if let unwrappedOwner = owner where oldValue !== mValue {
      //--- Register old value in undo manager
        unwrappedOwner.undoManager()?.registerUndoWithTarget (self, selector:"performUndo:", object:oldValue)
      //--- Update explorer
        if let unwrappedExplorer = explorer {
          unwrappedOwner.updateManagedObjectToOneRelationshipDisplay (mValue, button : unwrappedExplorer)
        }
%    if [mInverseRelationMultiplicity isCollection] then
%      //--- Reset old opposite relation ship
        if let unwrappedOldValue = oldValue {
          if unwrappedOldValue.%!mOppositeRelationshipName%.mSet.contains (unwrappedOwner) {
            var array = unwrappedOldValue.%!mOppositeRelationshipName%.propval
            let idx = find (array, unwrappedOwner)
            array.removeAtIndex (idx!)
            unwrappedOldValue.%!mOppositeRelationshipName%.setProp (array)
          }
        }
      //--- Set new opposite relation ship
        if let unwrappedValue = mValue {
          if !unwrappedValue.%!mOppositeRelationshipName%.mSet.contains (unwrappedOwner) {
            unwrappedValue.%!mOppositeRelationshipName%.mValue.append (unwrappedOwner)
          }
        }
%    else
%     //--- Reset old opposite relation ship
        oldValue?.%!mOppositeRelationshipName% = nil
      //--- Set new opposite relation ship
        %!mToOneRelationshipName%?.%!mOppositeRelationshipName% = self
%    end
%      //--- Notify observers
        postEvent ()
      }
    }
  }

  var propval : %![mRelationshipType swiftTypeName]%? { get { return mValue } }

  var prop : PMProperty <%![mRelationshipType swiftTypeName]%?> { get { return .singleSelection (mValue) } }

  func setProp (value : %![mRelationshipType swiftTypeName]%?) { mValue = value }

  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

  func performUndo (oldValue : %![mRelationshipType swiftTypeName]%?) {
    mValue = oldValue
  }

  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

  func remove (object : %![mRelationshipType swiftTypeName]%) {
    if mValue === object {
      mValue = nil
    }
  }
  
  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

  func add (object : %![mRelationshipType swiftTypeName]%) {
    mValue = object
  }

}
%
end
%
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
//    %!["Entity: " + ENTITY_NAME stringByRightPadding !113 !' ']%*
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

@objc(%!ENTITY_NAME%) class %!ENTITY_NAME% : PMManagedObject%
for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %, %!ENTITY_NAME%_%!mStoredPropertyName
end
% {

  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*
  //    Properties                                                                                                     *
  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

%
for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %  var %!mStoredPropertyName% = PMStoredProperty_%![mType swiftTypeName]% (%!mDefaultValueInSwift%)\n%
  %  var %!mStoredPropertyName%_keyCodingValue : %![mType swiftTypeName]% {\n%
  %    get {\n%
  %      switch %!mStoredPropertyName%.prop {\n%
  %      case .noSelection, .multipleSelection :\n%
  %        return %![mType defaultSwiftTypeValueAsString]%\n%
  %      case .singleSelection (let v) :\n%
  %        return v\n%
  %      }\n%
  %    }\n%
  %  }\n\n%
end
%  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*
  //    Transient properties                                                                                           *
  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

%

for () in TRANSIENT_LIST_FOR_IMPLEMENTATION do
%  var %!mTransientName% = PMTransientProperty_%![mTransientType swiftTypeName]% ()\n%
end

%
  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*
  //    Relationships                                                                                                  *
  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

%
for () in TO_MANY_RELATIONSHIP_LIST do
  %  var %!mToManyRelationshipName% = ToManyRelationship_%!ENTITY_NAME%_%!mToManyRelationshipName% ()\n%
end
for () in TO_ONE_RELATIONSHIP_LIST do
  %  var %!mToOneRelationshipName% = ToOneRelationship_%!ENTITY_NAME%_%!mToOneRelationshipName% ()\n%
end
%
  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*
  //    init                                                                                                           *
  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

  override init (managedObjectContext : PMManagedObjectContext) {
    super.init (managedObjectContext:managedObjectContext)
%
for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  if mNeedsValidation then
%    %!mStoredPropertyName%.setValidationFunction (self.validate_%!mStoredPropertyName%)\n%
  end
end
%  //--- Install compute functions for transients
%
for () in TRANSIENT_LIST_FOR_IMPLEMENTATION do
  %    %!mTransientName%.computeFunction = {  [weak self] in\n%
  %      if let unwSelf = self {\n%
  ![mDependencyList transientComputeFunctionCall !ENTITY_NAME !mTransientName]
  %      }else{\n%
  %        return .noSelection\n%
  %      }\n%
  %    }\n%
end
%  //--- Install property observers for transients
%
for () in TRANSIENT_LIST_FOR_IMPLEMENTATION do
  for () in mDependencyList do
    %    %![mDependency generateAddObserverCall]% (%!mTransientName%, postEvent:true)\n%
  end
end
%  //--- Install undoers for properties
%
for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %    %!mStoredPropertyName%.undoManager = undoManager ()\n%
end
%  //--- Install owner for relationships
%
for () in TO_ONE_RELATIONSHIP_LIST do
  %    %!mToOneRelationshipName%.owner = self\n%
end
for () in TO_MANY_RELATIONSHIP_LIST do
  %    %!mToManyRelationshipName%.owner = self\n%
end
%  }

  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*
  //    populateExplorerWindowWithRect                                                                                 *
  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

  override func populateExplorerWindowWithRect (inout ioRect : NSRect, view : NSView) {
    super.populateExplorerWindowWithRect (&ioRect, view:view)
%for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %    %!mStoredPropertyName%.explorer = createEntryForAttributeNamed ("%!mStoredPropertyName%", ioRect:&ioRect, view:view)\n%
end
for () in TO_MANY_RELATIONSHIP_LIST do
%    %!mToManyRelationshipName%.explorer = createEntryForToManyRelationshipNamed ("%!mToManyRelationshipName%", ioRect: &ioRect, view: view)\n%
end
for () in TO_ONE_RELATIONSHIP_LIST do
%    %!mToOneRelationshipName%.explorer = createEntryForToOneRelationshipNamed ("%!mToOneRelationshipName%", ioRect: &ioRect, view: view)\n%
end%  }

  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*
  //    clearObjectExplorer                                                                                            *
  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

  override func clearObjectExplorer () {
%for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
%    %!mStoredPropertyName%.explorer = nil\n%
end
for () in TO_ONE_RELATIONSHIP_LIST do
%    %!mToOneRelationshipName%.explorer = nil\n%
end
for () in TO_MANY_RELATIONSHIP_LIST do
%    %!mToManyRelationshipName%.explorer = nil\n%
end
%    super.clearObjectExplorer ()
  }

  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*
  //    saveIntoDictionary                                                                                             *
  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

  override func saveIntoDictionary (ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
%for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
%    %!mStoredPropertyName%.storeInDictionary (ioDictionary, forKey: "%!mStoredPropertyName%")\n%
end
for () in TO_MANY_RELATIONSHIP_LIST do
%    storeEntityArrayInDictionary (%!mToManyRelationshipName%.propval, inRelationshipName:"%!mToManyRelationshipName%", ioDictionary:ioDictionary) ;\n%
end
for () in TO_ONE_RELATIONSHIP_LIST do
  if [mInverseRelationMultiplicity isSingle] then
%    storeEntityInDictionary (%!mToOneRelationshipName%.propval, inRelationshipName:"%!mToOneRelationshipName%", ioDictionary:ioDictionary) ;\n%
end
end
%  }

  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*
  //    setUpWithDictionary                                                                                            *
  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

  override func setUpWithDictionary (inDictionary : NSDictionary,
                                     managedObjectArray : Array<PMManagedObject>) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:managedObjectArray)
%for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
%    %!mStoredPropertyName%.readFromDictionary (inDictionary, forKey:"%!mStoredPropertyName%")\n%
end
for () in TO_MANY_RELATIONSHIP_LIST do
%    %!mToManyRelationshipName%.setProp (readEntityArrayFromDictionary (
      "%!mToManyRelationshipName%",
      inDictionary:inDictionary,
      managedObjectArray:managedObjectArray
    ) as! Array<%![mRelationshipType swiftTypeName]%>)\n%
end
for () in TO_ONE_RELATIONSHIP_LIST do
  if [mInverseRelationMultiplicity isSingle] then
%    %!mToOneRelationshipName%.prop = readEntityFromDictionary (
        "%!mToOneRelationshipName%",
        inDictionary:inDictionary,
        managedObjectArray:managedObjectArray
      ) as? %![mRelationshipType swiftTypeName]%\n%
  end
end
%  }

  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*
  //   accessibleObjects                                                                                               *
  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

  override func accessibleObjects (inout objects : NSMutableArray) {
    super.accessibleObjects (&objects)
%
for () in TO_MANY_RELATIONSHIP_LIST do
%    for managedObject : PMManagedObject in %!mToManyRelationshipName%.propval {
      objects.addObject (managedObject)
    }\n%
end
for () in TO_ONE_RELATIONSHIP_LIST do
%    if let object = %!mToOneRelationshipName%.propval {\n%
%      objects.addObject (object)\n%
%    }\n%
end
%  }

  //•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••*

}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

