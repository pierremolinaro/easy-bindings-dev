//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

%
for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
%//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol %!ENTITY_NAME%_%![mProperty mPropertyName]% : class {
  var %![mProperty mPropertyName]% : %![[mProperty mType] swiftTypeName]% { get }
}

%
end
for () in TRANSIENT_LIST_FOR_IMPLEMENTATION do
%//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol %!ENTITY_NAME%_%![mProperty mPropertyName]% : class {
  var %![mProperty mPropertyName]% : %![[mProperty mType] swiftTypeName]%? { get }
}

%
end
%//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"Entity: " + ENTITY_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class %!ENTITY_NAME% : %!SUPER_CLASS_NAME
for () in PROPERTY_LIST_FOR_GENERATION do
  if (mProperty is == @atomicPropertyGeneration) | (mProperty is == @transientPropertyGeneration) then
    %,\n         %!ENTITY_NAME%_%![mProperty mPropertyName]
  end
end
% {

%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty declarationCode !OVERRIDEN_TRANSIENTS]
end
%  //····················································································································
  //    init
  //····················································································································

  override init (managedObjectContext : EBManagedObjectContext) {
    super.init (managedObjectContext:managedObjectContext)
%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty configurationCode]
end
%  //--- Install undoers and opposite setter for relationships
%
for () in TO_MANY_RELATIONSHIP_LIST do
  %    self.%![mProperty mPropertyName]%_property.undoManager = self.undoManager\n%
  if [mProperty mOppositeRelationshipName] != "" then
  %    self.%![mProperty mPropertyName]%_property.setOppositeRelationship = { [weak self] (_ inManagedObject : %![[mProperty mRelationshipType] swiftTypeName]%?) in\n%
  %      inManagedObject?.%![mProperty mOppositeRelationshipName]%_property.setProp (self)\n%
  %    }\n%
  end
end
%  //--- register properties for handling signature
%
for () in SIGNATURE_SET do
  %    self.%!key%_property.setSignatureObserver (observer:self)\n%
end
%  }

  //····················································································································

  deinit {
  //--- Remove observers
%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty terminationCode]
end
%  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
%for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %    createEntryForPropertyNamed (\n%
  %      "%![mProperty mPropertyName]%",\n%
  %      idx:self.%![mProperty mPropertyName]%_property.mEasyBindingsObjectIndex,\n%
  %      y:&y,\n%
  %      view:view,\n%
  %      observerExplorer:&self.%![mProperty mPropertyName]%_property.mObserverExplorer,\n%
  %      valueExplorer:&self.%![mProperty mPropertyName]%_property.mValueExplorer\n%
  %    )\n%
end
%    createEntryForTitle ("Properties", y:&y, view:view)\n%
for () in TRANSIENT_LIST_FOR_IMPLEMENTATION do
  %    createEntryForPropertyNamed (\n%
  %      "%![mProperty mPropertyName]%",\n%
  %      idx:self.%![mProperty mPropertyName]%_property.mEasyBindingsObjectIndex,\n%
  %      y:&y,\n%
  %      view:view,\n%
  %      observerExplorer:&self.%![mProperty mPropertyName]%_property.mObserverExplorer,\n%
  %      valueExplorer:&self.%![mProperty mPropertyName]%_property.mValueExplorer\n%
  %    )\n%
end
%    createEntryForTitle ("Transients", y:&y, view:view)\n%
for () in TO_MANY_RELATIONSHIP_LIST do
  %    createEntryForToManyRelationshipNamed (\n%
  %      "%![mProperty mPropertyName]%",\n%
  %      idx:%![mProperty mPropertyName]%_property.mEasyBindingsObjectIndex,\n%
  %      y: &y,\n%
  %      view: view,\n%
  %      valueExplorer:&%![mProperty mPropertyName]%_property.mValueExplorer\n%
  %    )\n%
end
%    createEntryForTitle ("ToMany Relationships", y:&y, view:view)\n%
for () in TO_ONE_RELATIONSHIP_LIST do
  %    createEntryForToOneRelationshipNamed (\n%
  %      "%![mProperty mPropertyName]%",\n%
  %      idx:self.%![mProperty mPropertyName]%_property.mEasyBindingsObjectIndex,\n%
  %      y: &y,\n%
  %      view: view,\n%
  %      valueExplorer:&self.%![mProperty mPropertyName]%_property.mValueExplorer\n%
  %    )\n%
end%    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty clearObjectExplorerCode]
end
%  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty saveIntoDictionaryCode]
end
%  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty setupFromDictionaryCode]
end
%  }

  //····················································································································
  //   cascadeObjectRemoving
  //····················································································································

  override func cascadeObjectRemoving (_ ioObjectsToRemove : inout Set <EBManagedObject>) {
%
for () in TO_MANY_RELATIONSHIP_LIST do
  if [mProperty mCascading] then
    %  //--- Cascading toMany %![mProperty mPropertyName]%\n%
    %    do{\n%
    %      let objects = self.%![mProperty mPropertyName]%_property.propval\n%
    %      self.%![mProperty mPropertyName]%_property.setProp ([])\n%
    %      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc\n%
    %    }\n%
  else
    %  //--- Nullify toMany %![mProperty mPropertyName]%\n%
    %    self.%![mProperty mPropertyName]%_property.setProp ([]) // Set relationship to empty array\n%
  end
end
for () in TO_ONE_RELATIONSHIP_LIST do
  if [mProperty mCascading] then
    %  //--- Cascading toOne %![mProperty mPropertyName]%\n%
    %    if let object = self.%![mProperty mPropertyName]%_property.propval {\n%
    %      self.%![mProperty mPropertyName]%_property.setProp (nil)\n%
    %      self.managedObjectContext ()?.internalRemoveManagedObject (object, &ioObjectsToRemove) // Cascade removing from moc\n%
    %    }\n%
  else
    %  //--- Nullify toOne %![mProperty mPropertyName]%\n%
    %    self.%![mProperty mPropertyName]%_property.setProp (nil) // Set relationship to nil\n%
  end
end
%  //---
    super.cascadeObjectRemoving (&ioObjectsToRemove)
  }

  //····················································································································
  //   resetControllers
  //····················································································································

  override func resetControllers () {
    super.resetControllers ()
  }

  //····················································································································
  //   resetToManyRelationships
  //····················································································································

  override func resetToManyRelationships () {
    super.resetToManyRelationships ()
%
for () in PROPERTY_LIST_FOR_GENERATION do
  if mProperty is == @toManyPropertyGeneration then
    %    self.%![mProperty mPropertyName]%_property.setProp ([])\n%
  end
end
%  }

  //····················································································································
  //   resetToOneRelationships
  //····················································································································

  override func resetToOneRelationships () {
    super.resetToOneRelationships ()
%
for () in PROPERTY_LIST_FOR_GENERATION do
  if mProperty is == @toOnePropertyGeneration then
    %    self.%![mProperty mPropertyName]%_property.setProp (nil)\n%
  end
end
%  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty objectAccessibilityCode]
end
%  }

%
if [SIGNATURE_SET count] > 0 then
%  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
%
for () in SIGNATURE_SET do
  %    crc.accumulateUInt32 (self.%!key%_property.signature ())\n%
end
%    return crc
  }

%
end
%  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"ReadOnlyArrayOf_" + ENTITY_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_%!ENTITY_NAME% : ReadOnlyAbstractArrayProperty <%!ENTITY_NAME%> {

  //····················································································································

  weak var undoManager : EBUndoManager? // SOULD BE WEAK

  //····················································································································

  var propval : [%!ENTITY_NAME%] { return [] } // Abstract method

%
for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
%  //····················································································································
  //   Observers of '%![mProperty mPropertyName]%' stored property
  //····················································································································

  private var mObserversOf_%![mProperty mPropertyName]% = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_%![mProperty mPropertyName]% (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_%![mProperty mPropertyName]%.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.%![mProperty mPropertyName]%_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_%![mProperty mPropertyName]% (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_%![mProperty mPropertyName]%.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.%![mProperty mPropertyName]%_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_%![mProperty mPropertyName]%_toElementsOfSet (_ inSet : Set<%!ENTITY_NAME%>) {
    for managedObject in inSet {
      for observer in mObserversOf_%![mProperty mPropertyName]% {
        managedObject.%![mProperty mPropertyName]%_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_%![mProperty mPropertyName]%_fromElementsOfSet (_ inSet : Set<%!ENTITY_NAME%>) {
    for observer in mObserversOf_%![mProperty mPropertyName]% {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.%![mProperty mPropertyName]%_property.removeEBObserver (observer)
      }
    }
  }

%
end
for () in TRANSIENT_LIST_FOR_IMPLEMENTATION do
%  //····················································································································
  //   Observers of '%![mProperty mPropertyName]%' transient property
  //····················································································································

  private var mObserversOf_%![mProperty mPropertyName]% = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_%![mProperty mPropertyName]% (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_%![mProperty mPropertyName]%.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.%![mProperty mPropertyName]%_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_%![mProperty mPropertyName]% (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_%![mProperty mPropertyName]%.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.%![mProperty mPropertyName]%_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_%![mProperty mPropertyName]%_toElementsOfSet (_ inSet : Set<%!ENTITY_NAME%>) {
    for managedObject in inSet {
      for observer in mObserversOf_%![mProperty mPropertyName]% {
        managedObject.%![mProperty mPropertyName]%_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_%![mProperty mPropertyName]%_fromElementsOfSet (_ inSet : Set<%!ENTITY_NAME%>) {
    for managedObject in inSet {
      for observer in mObserversOf_%![mProperty mPropertyName]% {
        managedObject.%![mProperty mPropertyName]%_property.removeEBObserver (observer)
      }
    }
  }

%
end
%  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"TransientArrayOf_" + ENTITY_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_%!ENTITY_NAME% : ReadOnlyArrayOf_%!ENTITY_NAME% {

  var readModelFunction : Optional<() -> EBSelection < [%!ENTITY_NAME%] > >

  //····················································································································

   private var prop_cache : EBSelection < [%!ENTITY_NAME%] >? 

  //····················································································································

  override var propval : [%!ENTITY_NAME%] {
    if let value = prop_cache {
      switch value {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <%!ENTITY_NAME%> ()

  override var prop : EBSelection < [%!ENTITY_NAME%] > {
    get {
      if let unwrappedComputeFunction = readModelFunction, prop_cache == nil {
        prop_cache = unwrappedComputeFunction ()
        let newSet : Set <%!ENTITY_NAME%>
        switch prop_cache! {
        case .multiple, .empty :
          newSet = Set <%!ENTITY_NAME%> ()
        case .single (let array) :
          newSet = Set (array)
        }
%
if [SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION length] > 0 then
%     //--- Removed object set
        let removedSet = mSet.subtracting (newSet)
      //--- Remove observers of stored properties
%for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %        removeEBObserversOf_%![mProperty mPropertyName]%_fromElementsOfSet (removedSet)\n%
end
%      //--- Remove observers of transient properties
%for () in TRANSIENT_LIST_FOR_IMPLEMENTATION do
  %        removeEBObserversOf_%![mProperty mPropertyName]%_fromElementsOfSet (removedSet)\n%
end
%      //--- Added object set
        let addedSet = newSet.subtracting (mSet)
       //--- Add observers of stored properties
%for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %        addEBObserversOf_%![mProperty mPropertyName]%_toElementsOfSet (addedSet)\n%
end
%       //--- Add observers of transient properties
%for () in TRANSIENT_LIST_FOR_IMPLEMENTATION do
  %        addEBObserversOf_%![mProperty mPropertyName]%_toElementsOfSet (addedSet)\n%
end
end
%      //--- Update object set
        mSet = newSet
      }
      if prop_cache == nil {
        prop_cache = .empty
      }
      return prop_cache!
    }
  }

  //····················································································································

  override func postEvent () {
    if prop_cache != nil {
      prop_cache = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) propagation\\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) nil\\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"To many relationship read write: " + ENTITY_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_%!ENTITY_NAME% : ReadOnlyArrayOf_%!ENTITY_NAME% {

  //····················································································································
 
  func setProp (_ value :  [%!ENTITY_NAME%]) { } // Abstract method
 
  // var propval : [%!ENTITY_NAME%] { return [] } // Abstract method
 
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"To many relationship: " + ENTITY_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_%!ENTITY_NAME% : ReadWriteArrayOf_%!ENTITY_NAME%, EBSignatureObserverProtocol {

  //····················································································································

  var setOppositeRelationship : Optional < (_ inManagedObject : %!ENTITY_NAME%?) -> Void > = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set <%!ENTITY_NAME%> ()
  private var mValue = [%!ENTITY_NAME%] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        self.undoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
          self.setOppositeRelationship? (nil)
        }
%for () in PROPERTY_LIST_FOR_GENERATION do
  if (mProperty is == @atomicPropertyGeneration) | (mProperty is == @transientPropertyGeneration) then
    %        removeEBObserversOf_%![mProperty mPropertyName]%_fromElementsOfSet (removedObjectSet)\n%
  end
end
%      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : %!ENTITY_NAME% in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
          self.setOppositeRelationship? (managedObject)
        }
%for () in PROPERTY_LIST_FOR_GENERATION do
  if (mProperty is == @atomicPropertyGeneration) | (mProperty is == @transientPropertyGeneration) then
    %        addEBObserversOf_%![mProperty mPropertyName]%_toElementsOfSet (addedObjectSet)\n%
  end
end
%      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [%!ENTITY_NAME%] > { return .single (mValue) }

  override func setProp (_ inValue : [%!ENTITY_NAME%]) { mValue = inValue }

  override var propval : [%!ENTITY_NAME%] { return mValue }

  //····················································································································

  @objc func performUndo (_ oldValue : [%!ENTITY_NAME%]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : %!ENTITY_NAME%) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : %!ENTITY_NAME%) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? // SOULD BE WEAK
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
%
for () in TO_ONE_RELATIONSHIP_LIST do
%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"To one relationship: " + [mProperty mPropertyName]%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToOneRelationship_%!ENTITY_NAME%_%![mProperty mPropertyName]% : EBAbstractProperty {

  //····················································································································
  //   Value explorer
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button:unwrappedExplorer)
        }
      }
    }
  }

  weak var owner : %!ENTITY_NAME%? { // SOULD BE WEAK
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        updateManagedObjectToOneRelationshipDisplay (object: propval, button:unwrappedExplorer)
      }
    }
  }
 
  weak private var mValue : %![[mProperty mRelationshipType] swiftTypeName]%? { // SOULD BE WEAK
    didSet {
      if let unwrappedOwner = owner, oldValue !== mValue {
      //--- Register old value in undo manager
        unwrappedOwner.undoManager?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let unwrappedExplorer = mValueExplorer {
          updateManagedObjectToOneRelationshipDisplay (object: mValue, button:unwrappedExplorer)
        }
%   if [mProperty mOppositeRelationshipName] != "" then
      if [[mProperty mInverseRelationMultiplicity] isCollection] then
%      //--- Reset old opposite relation ship
        if let unwrappedOldValue = oldValue {
          unwrappedOldValue.%![mProperty mOppositeRelationshipName]%_property.remove (unwrappedOwner)
        }
      //--- Set new opposite relation ship
        if let unwrappedValue = mValue {
          unwrappedValue.%![mProperty mOppositeRelationshipName]%_property.add (unwrappedOwner)
        }
%      else
%     //--- Reset old opposite relation ship
        oldValue?.%![mProperty mOppositeRelationshipName]% = nil
      //--- Set new opposite relation ship
        %![mProperty mPropertyName]%?.%![mProperty mOppositeRelationshipName]% = self
%      end
     end
%      //--- Remove property observers of old object
%    for () in [mProperty mDestinationEntityObservablePropertyMap] do
       if [mKind isProperty] then
       %        oldValue?.%!lkey.string%_property.removeEBObserversFrom (mObserversOf_%!lkey.string%)\n%
       end
     end
%      //--- Add property observers to new object
%    for () in [mProperty mDestinationEntityObservablePropertyMap] do
       if [mKind isProperty] then
       %        mValue?.%!lkey.string%_property.addEBObserversFrom (mObserversOf_%!lkey.string%)\n%
       end
     end
%       //--- Notify observers
        postEvent ()
      }
    }
  }

  var propval : %![[mProperty mRelationshipType] swiftTypeName]%? { get { return mValue } }

  var prop : EBSelection <%![[mProperty mRelationshipType] swiftTypeName]%?> { get { return .single (mValue) } }

  func setProp (_ value : %![[mProperty mRelationshipType] swiftTypeName]%?) { mValue = value }

  //····················································································································

  @objc func performUndo (_ oldValue : %![[mProperty mRelationshipType] swiftTypeName]%?) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : %![[mProperty mRelationshipType] swiftTypeName]%) {
    if mValue === object {
      mValue = nil
    }
  }
  
  //····················································································································

  func add (_ object : %![[mProperty mRelationshipType] swiftTypeName]%) {
    mValue = object
  }

%
for () in [mProperty mDestinationEntityObservablePropertyMap] do
  if [mKind isProperty] then
  %  //····················································································································\n%
  %  //   Observable property: %!lkey.string%\n%
  %  //····················································································································\n\n%
  %  private var mObserversOf_%!lkey.string% = EBWeakEventSet ()\n\n%
  %  //····················································································································\n\n%
  %  var %!lkey.string%_property_selection : EBSelection <%![mKind swiftTypeName]%?> {\n%
  %    get {\n%
  %      if let model = self.propval {\n%
  %        switch (model.%!lkey.string%_property_selection) {\n%
  %        case .empty :\n%
  %          return .empty\n%
  %        case .multiple :\n%
  %          return .multiple\n%
  %        case .single (let v) :\n%
  %          return .single (v)\n%
  %        }\n%
  %      }else{\n%
  %        return .single (nil)\n%
  %      }\n%
  %    }\n%
  %  }\n\n%
  %  //····················································································································\n\n%
  %  final func addEBObserverOf_%!lkey.string% (_ inObserver : EBEvent) {\n%
  %    mObserversOf_%!lkey.string%.insert (inObserver)\n%
  %    if let object = self.propval {\n%
  %      object.%!lkey.string%_property.addEBObserver (inObserver)\n%
  %    }\n%
  %  }\n\n%
  %  //····················································································································\n\n%
  %  final func removeEBObserverOf_%!lkey.string% (_ inObserver : EBEvent) {\n%
  %    mObserversOf_%!lkey.string%.remove (inObserver)\n%
  %    if let object = self.propval {\n%
  %      object.%!lkey.string%_property.removeEBObserver (inObserver)\n%
  %    }\n%
  %  }\n\n%
end
end
%  //····················································································································

}
%
end
%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
