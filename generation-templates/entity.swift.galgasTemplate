//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

%
for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
%//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol %!ENTITY_NAME%_%![mProperty mPropertyName]% : class {
  var %![mProperty mPropertyName]% : %![[mProperty mType] swiftTypeName]% { get }
}

%
end
for () in TRANSIENT_LIST_FOR_IMPLEMENTATION do
%//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol %!ENTITY_NAME%_%![mProperty mPropertyName]% : class {
  var %![mProperty mPropertyName]% : %![[mProperty mType] swiftTypeName]%? { get }
}

%
end
%//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"Entity: " + ENTITY_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class %!ENTITY_NAME% : %!SUPER_CLASS_NAME
for () in PROPERTY_LIST_FOR_GENERATION do
  if (mProperty is == @atomicPropertyGeneration) | (mProperty is == @transientPropertyGeneration) then
    %,\n         %!ENTITY_NAME%_%![mProperty mPropertyName]
  end
end
% {

%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty propertyDeclarationCode !OVERRIDEN_TRANSIENTS]
end
%  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty configurationCode]
end
%  //--- Install undoers and opposite setter for relationships
%
for () in TO_MANY_RELATIONSHIP_LIST do
  switch [mProperty mOption]
  case none :

  case hasDependance (@lstring masterPropertyName) :
    %    self.%![masterPropertyName string]%_property.addEBObserver (self.%![mProperty mPropertyName]%_property)\n%
    %    self.%![mProperty mPropertyName]%_property.mReadModelFunction =  { [weak self] in\n%
    %      if let model = self?.%!masterPropertyName.string%_property {\n%
    %        switch model.prop {\n%
    %        case .empty :\n%
    %          return .empty\n%
    %        case .multiple :\n%
    %          return .multiple\n%
    %        case .single (let modelArray) :\n%
    %          var array = [%![[mProperty mRelationshipType] swiftTypeName]%] ()\n%
    %          for baseObject in modelArray {\n%
    %            if let object = baseObject as? %![[mProperty mRelationshipType] swiftTypeName]% {\n%
    %              array.append (object)\n%
    %            }\n%
    %          }\n%
    %          return .single (array)\n%
    %        }\n%
    %      }else{\n%
    %        return .empty\n%
    %      }\n%
    %    }\n%
  case hasOpposite (@lstring oppositeName) :
    %    self.%![mProperty mPropertyName]%_property.setOppositeRelationship = { [weak self] (_ inManagedObject : %![[mProperty mRelationshipType] swiftTypeName]%?) in\n%
    %      inManagedObject?.%!oppositeName.string%_property.setProp (self)\n%
    %    }\n%
  end
end
%  //--- register properties for handling signature
%
for () in SIGNATURE_SET do
  %    self.%!key%_property.setSignatureObserver (observer: self)\n%
end
%  //--- Extern delegates
%
  for () in EXTERN_DELEGATE_LIST_FOR_IMPLEMENTATION do index idx
    %    self.mExternDelegate%![idx string]% = %!mExternSwiftDelegateName.string% (object: self)\n%
  end
%  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty terminationCode]
end
%  }

  //····················································································································
  //    Extern delegates
  //····················································································································

%
  for () in EXTERN_DELEGATE_LIST_FOR_IMPLEMENTATION do index idx
    %  var mExternDelegate%![idx string]% : %!mExternSwiftDelegateName.string%? = nil\n%
  end
%
  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
%for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %    createEntryForPropertyNamed (\n%
  %      "%![mProperty mPropertyName]%",\n%
  %      idx:self.%![mProperty mPropertyName]%_property.ebObjectIndex,\n%
  %      y:&y,\n%
  %      view:view,\n%
  %      observerExplorer:&self.%![mProperty mPropertyName]%_property.mObserverExplorer,\n%
  %      valueExplorer:&self.%![mProperty mPropertyName]%_property.mValueExplorer\n%
  %    )\n%
end
%    createEntryForTitle ("Properties", y:&y, view:view)\n%
for () in TRANSIENT_LIST_FOR_IMPLEMENTATION do
  %    createEntryForPropertyNamed (\n%
  %      "%![mProperty mPropertyName]%",\n%
  %      idx:self.%![mProperty mPropertyName]%_property.ebObjectIndex,\n%
  %      y:&y,\n%
  %      view:view,\n%
  %      observerExplorer:&self.%![mProperty mPropertyName]%_property.mObserverExplorer,\n%
  %      valueExplorer:&self.%![mProperty mPropertyName]%_property.mValueExplorer\n%
  %    )\n%
end
%    createEntryForTitle ("Transients", y:&y, view:view)\n%
for () in TO_MANY_RELATIONSHIP_LIST do
  if not [[mProperty mOption] isHasDependance] then
    %    createEntryForToManyRelationshipNamed (\n%
    %      "%![mProperty mPropertyName]%",\n%
    %      idx:%![mProperty mPropertyName]%_property.ebObjectIndex,\n%
    %      y: &y,\n%
    %      view: view,\n%
    %      valueExplorer:&%![mProperty mPropertyName]%_property.mValueExplorer\n%
    %    )\n%
  end
end
%    createEntryForTitle ("ToMany Relationships", y:&y, view:view)\n%
for () in TO_ONE_RELATIONSHIP_LIST do
  %    createEntryForToOneRelationshipNamed (\n%
  %      "%![mProperty mPropertyName]%",\n%
  %      idx:self.%![mProperty mPropertyName]%_property.ebObjectIndex,\n%
  %      y: &y,\n%
  %      view: view,\n%
  %      valueExplorer:&self.%![mProperty mPropertyName]%_property.mValueExplorer\n%
  %    )\n%
end%    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty clearObjectExplorerCode]
end
%  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
%
for () in TO_MANY_RELATIONSHIP_LIST do
  if not [[mProperty mOption] isHasDependance] then
    %    self.%![mProperty mPropertyName]%_property.setProp ([])\n%
  end
end
%  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
%
for () in TO_ONE_RELATIONSHIP_LIST do
  %    self.%![mProperty mPropertyName]%_property.setProp (nil)\n%
end
%  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty saveIntoDictionaryCode]
end
%  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty setupRelationshipFromDictionaryCode]
end
%  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty setupAtomicPropertyFromDictionaryCode]
end
%  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
%
for () in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty objectAccessibilityCode]
end
%  }

%
if [SIGNATURE_SET count] > 0 then
%  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
%
for () in SIGNATURE_SET do
  %    crc.accumulateUInt32 (self.%!key%_property.signature ())\n%
end
%    return crc
  }

%
end
%  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"ReadOnlyArrayOf_" + ENTITY_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_%!ENTITY_NAME% : ReadOnlyAbstractArrayProperty <%!ENTITY_NAME%> {

%
for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
%  //····················································································································
  //   Observers of '%![mProperty mPropertyName]%' stored property
  //····················································································································

  private var mObserversOf_%![mProperty mPropertyName]% = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_%![mProperty mPropertyName]% (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_%![mProperty mPropertyName]%.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.%![mProperty mPropertyName]%_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_%![mProperty mPropertyName]% (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_%![mProperty mPropertyName]%.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.%![mProperty mPropertyName]%_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_%![mProperty mPropertyName]%_toElementsOfSet (_ inSet : Set<%!ENTITY_NAME%>) {
    for managedObject in inSet {
      self.mObserversOf_%![mProperty mPropertyName]%.apply ( {(_ observer : EBEvent) in
        managedObject.%![mProperty mPropertyName]%_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_%![mProperty mPropertyName]%_fromElementsOfSet (_ inSet : Set<%!ENTITY_NAME%>) {
    self.mObserversOf_%![mProperty mPropertyName]%.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.%![mProperty mPropertyName]%_property.removeEBObserver (observer)
      }
    })
  }

%
end
for () in TRANSIENT_LIST_FOR_IMPLEMENTATION do
%  //····················································································································
  //   Observers of '%![mProperty mPropertyName]%' transient property
  //····················································································································

  private var mObserversOf_%![mProperty mPropertyName]% = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_%![mProperty mPropertyName]% (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_%![mProperty mPropertyName]%.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.%![mProperty mPropertyName]%_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_%![mProperty mPropertyName]% (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_%![mProperty mPropertyName]%.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.%![mProperty mPropertyName]%_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_%![mProperty mPropertyName]%_toElementsOfSet (_ inSet : Set<%!ENTITY_NAME%>) {
    for managedObject in inSet {
      self.mObserversOf_%![mProperty mPropertyName]%.apply ( {(_ observer : EBEvent) in
        managedObject.%![mProperty mPropertyName]%_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_%![mProperty mPropertyName]%_fromElementsOfSet (_ inSet : Set<%!ENTITY_NAME%>) {
    for managedObject in inSet {
      self.mObserversOf_%![mProperty mPropertyName]%.apply ( {(_ observer : EBEvent) in
        managedObject.%![mProperty mPropertyName]%_property.removeEBObserver (observer)
      })
    }
  }

%
end
%  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"TransientArrayOf_" + ENTITY_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_%!ENTITY_NAME% : ReadOnlyArrayOf_%!ENTITY_NAME% {

  //····················································································································

  var mReadModelFunction : Optional < () -> EBSelection < [%!ENTITY_NAME%] > > = nil

  //····················································································································

  override var propset : Set <%!ENTITY_NAME%> {
    self.computeArrayAndSet ()
    return self.mSet
  }

  //····················································································································

  override var prop : EBSelection < [%!ENTITY_NAME%] > {
    self.computeArrayAndSet ()
    return self.mCachedValue!  
  }
 
  //····················································································································

  override var propval : [%!ENTITY_NAME%] {
    self.computeArrayAndSet ()
    if let value = self.mCachedValue {
      switch value {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <%!ENTITY_NAME%> ()

  //····················································································································

  private var mCachedValue : EBSelection < [%!ENTITY_NAME%] >? = nil

  //····················································································································

  private func computeArrayAndSet () {
    if let unwrappedComputeFunction = self.mReadModelFunction, self.mCachedValue == nil {
      self.mCachedValue = unwrappedComputeFunction ()
      let newSet : Set <%!ENTITY_NAME%>
      switch self.mCachedValue! {
      case .multiple, .empty :
        newSet = Set <%!ENTITY_NAME%> ()
      case .single (let array) :
       newSet = Set (array)
      }
%
if [SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION length] > 0 then
%    //--- Removed object set
      let removedSet = self.mSet.subtracting (newSet)
    //--- Remove observers of stored properties
%for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %      self.removeEBObserversOf_%![mProperty mPropertyName]%_fromElementsOfSet (removedSet)\n%
end
%    //--- Remove observers of transient properties
%for () in TRANSIENT_LIST_FOR_IMPLEMENTATION do
  %      self.removeEBObserversOf_%![mProperty mPropertyName]%_fromElementsOfSet (removedSet)\n%
end
%    //--- Added object set
      let addedSet = newSet.subtracting (self.mSet)
     //--- Add observers of stored properties
%for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %      self.addEBObserversOf_%![mProperty mPropertyName]%_toElementsOfSet (addedSet)\n%
end
%     //--- Add observers of transient properties
%for () in TRANSIENT_LIST_FOR_IMPLEMENTATION do
  %      self.addEBObserversOf_%![mProperty mPropertyName]%_toElementsOfSet (addedSet)\n%
end
end
%    //--- Update object set
      self.mSet = newSet
    }
    if self.mCachedValue == nil {
      self.mCachedValue = .empty
    }
  }

  //····················································································································

  override func postEvent () {
    if self.mCachedValue != nil {
      self.mCachedValue = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) propagation\\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) nil\\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"To many relationship read write: " + ENTITY_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_%!ENTITY_NAME% : ReadOnlyArrayOf_%!ENTITY_NAME% {

  //····················································································································
 
  func setProp (_ value :  [%!ENTITY_NAME%]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"To many relationship: " + ENTITY_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_%!ENTITY_NAME% : ReadWriteArrayOf_%!ENTITY_NAME%, EBSignatureObserverProtocol {

  //····················································································································

  var setOppositeRelationship : Optional < (_ inManagedObject : %!ENTITY_NAME%?) -> Void > = nil

  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [%!ENTITY_NAME%] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "%!ENTITY_NAME%") as? %!ENTITY_NAME% {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

 //····················································································································

  private var mSet = Set <%!ENTITY_NAME%> ()
  private var mValue = [%!ENTITY_NAME%] () {
    didSet {
     // self.postEvent ()
      if oldValue != self.mValue {
        let oldSet = self.mSet
        self.mSet = Set (self.mValue)
      //--- Register old value in undo manager
        self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = self.mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: self.mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (self.mSet)
        if removedObjectSet.count > 0 {
          for managedObject in removedObjectSet {
            managedObject.setSignatureObserver (observer: nil)
            self.setOppositeRelationship? (nil)
%for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
    %            managedObject.%![mProperty mPropertyName]%_property.mSetterDelegate = nil\n%
end
%          }
%for () in PROPERTY_LIST_FOR_GENERATION do
  if (mProperty is == @atomicPropertyGeneration) | (mProperty is == @transientPropertyGeneration) then
    %          self.removeEBObserversOf_%![mProperty mPropertyName]%_fromElementsOfSet (removedObjectSet)\n%
  end
end
%        }
       //--- Added object set
        let addedObjectSet = self.mSet.subtracting (oldSet)
        if addedObjectSet.count > 0 {
          for managedObject : %!ENTITY_NAME% in addedObjectSet {
            managedObject.setSignatureObserver (observer: self)
            self.setOppositeRelationship? (managedObject)
%for () in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
    %            managedObject.%![mProperty mPropertyName]%_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }\n%
end
%          }
%for () in PROPERTY_LIST_FOR_GENERATION do
  if (mProperty is == @atomicPropertyGeneration) | (mProperty is == @transientPropertyGeneration) then
    %          self.addEBObserversOf_%![mProperty mPropertyName]%_toElementsOfSet (addedObjectSet)\n%
  end
end
%        }
      //--- Notify observers
        self.postEvent ()
        self.clearSignatureCache ()
      //--- Write in preferences ?
        self.writeInPreferences ()
      }
    }
  }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  override var prop : EBSelection < [%!ENTITY_NAME%] > { return .single (self.mValue) }

  //····················································································································

  override func setProp (_ inValue : [%!ENTITY_NAME%]) { self.mValue = inValue }

  //····················································································································

  override var propval : [%!ENTITY_NAME%] { return self.mValue }

  //····················································································································

  override var propset : Set <%!ENTITY_NAME%> { return self.mSet }

 //····················································································································

  @objc func performUndo (_ oldValue : [%!ENTITY_NAME%]) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : %!ENTITY_NAME%) {
    if self.mSet.contains (object) {
      var array = self.mValue
      let idx = array.firstIndex (of: object)
      array.remove (at: idx!)
      self.mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : %!ENTITY_NAME%) {
    if !self.mSet.contains (object) {
      var array = self.mValue
      array.append (object)
      self.mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}
%
for () in TO_ONE_RELATIONSHIP_LIST do
%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"To one relationship: " + [mProperty mPropertyName]%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToOneRelationship_%!ENTITY_NAME%_%![mProperty mPropertyName]% : EBAbstractProperty {

  //····················································································································
  //   Value explorer
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  weak var owner : %!ENTITY_NAME%? { // SOULD BE WEAK
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        updateManagedObjectToOneRelationshipDisplay (object: propval, button:unwrappedExplorer)
      }
    }
  }
 
  //····················································································································

  private var mValue : %![[mProperty mRelationshipType] swiftTypeName]%? {
    didSet {
      if let unwrappedOwner = self.owner, oldValue !== self.mValue {
      //--- Register old value in undo manager
        unwrappedOwner.ebUndoManager?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let unwrappedExplorer = self.mValueExplorer {
          updateManagedObjectToOneRelationshipDisplay (object: self.mValue, button:unwrappedExplorer)
        }
%   if [mProperty mOppositeRelationshipName] != "" then
      if [[mProperty mInverseRelationMultiplicity] isCollection] then
%      //--- Reset old opposite relation ship
        oldValue?.%![mProperty mOppositeRelationshipName]%_property.remove (unwrappedOwner)
      //--- Set new opposite relation ship
        self.mValue?.%![mProperty mOppositeRelationshipName]%_property.add (unwrappedOwner)
%      else
%     //--- Reset old opposite relation ship
        oldValue?.%![mProperty mOppositeRelationshipName]%_property.setProp (nil)
      //--- Set new opposite relation ship
        self.mValue?.%![mProperty mOppositeRelationshipName]%_property.setProp (unwrappedOwner)
%      end
     end
%      //--- Remove property observers of old object
%    for () in [mProperty mDestinationEntityObservablePropertyMap] do
       if [mKind isProperty] then
       %        oldValue?.%!lkey.string%_property.removeEBObserversFrom (&self.mObserversOf_%!lkey.string%)\n%
       end
     end
%      //--- Add property observers to new object
%    for () in [mProperty mDestinationEntityObservablePropertyMap] do
       if [mKind isProperty] then
       %        self.mValue?.%!lkey.string%_property.addEBObserversFrom (&self.mObserversOf_%!lkey.string%)\n%
       end
     end
%       //--- Notify observers
        self.postEvent ()
      }
    }
  }

  //····················································································································

  var propval : %![[mProperty mRelationshipType] swiftTypeName]%? { return self.mValue }

  var prop : EBSelection <%![[mProperty mRelationshipType] swiftTypeName]%?> { return .single (self.mValue) }

  func setProp (_ value : %![[mProperty mRelationshipType] swiftTypeName]%?) { self.mValue = value }

  //····················································································································

  @objc func performUndo (_ oldValue : %![[mProperty mRelationshipType] swiftTypeName]%?) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : %![[mProperty mRelationshipType] swiftTypeName]%) {
    if self.mValue === object {
      self.mValue = nil
    }
  }

%
for () in [mProperty mDestinationEntityObservablePropertyMap] do
  if [mKind isProperty] then
  %  //····················································································································\n%
  %  //   Observable property: %!lkey.string%\n%
  %  //····················································································································\n\n%
  %  private var mObserversOf_%!lkey.string% = EBWeakEventSet ()\n\n%
  %  //····················································································································\n\n%
  %  var %!lkey.string%_property_selection : EBSelection <%![mKind swiftTypeName]%?> {\n%
  %    if let model = self.propval {\n%
  %      switch (model.%!lkey.string%_property_selection) {\n%
  %      case .empty :\n%
  %        return .empty\n%
  %      case .multiple :\n%
  %        return .multiple\n%
  %      case .single (let v) :\n%
  %        return .single (v)\n%
  %      }\n%
  %    }else{\n%
  %      return .single (nil)\n%
  %    }\n%
  %  }\n\n%
  %  //····················································································································\n\n%
  %  final func addEBObserverOf_%!lkey.string% (_ inObserver : EBEvent) {\n%
  %    self.mObserversOf_%!lkey.string%.insert (inObserver)\n%
  %    if let object = self.propval {\n%
  %      object.%!lkey.string%_property.addEBObserver (inObserver)\n%
  %    }\n%
  %  }\n\n%
  %  //····················································································································\n\n%
  %  final func removeEBObserverOf_%!lkey.string% (_ inObserver : EBEvent) {\n%
  %    self.mObserversOf_%!lkey.string%.remove (inObserver)\n%
  %    if let object = self.propval {\n%
  %      object.%!lkey.string%_property.removeEBObserver (inObserver)\n%
  %    }\n%
  %  }\n\n%
end
end
%  //····················································································································

}
%
end
%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
