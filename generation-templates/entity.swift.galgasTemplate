//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import AppKit

%
for (mProperty) in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
%//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol %!ENTITY_NAME%_%!mProperty.mPropertyName% : AnyObject {
  var %!mProperty.mPropertyName% : %![mProperty.mType swiftTypeName]% { get }
}

%
end
for (mProperty) in PROXY_LIST_FOR_GENERATION do
%//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol %!ENTITY_NAME%_%!mProperty.mPropertyName% : AnyObject {
  var %!mProperty.mPropertyName% : %![mProperty.mType swiftTypeName]%? { get }
}

%
end
for (mProperty) in TRANSIENT_LIST_FOR_IMPLEMENTATION do
%//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@MainActor protocol %!ENTITY_NAME%_%!mProperty.mPropertyName% : AnyObject {
  var %!mProperty.mPropertyName% : %![mProperty.mType swiftTypeName]%? { get }
}

%
end
%//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"Entity: " + ENTITY_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

%
if not HAS_SUB_ENTITY then
  %final %
end
%class %!ENTITY_NAME% : %!SUPER_CLASS_NAME
for (mProperty) in PROPERTY_LIST_FOR_GENERATION do
  if (mProperty is == @atomicPropertyGeneration) | (mProperty is == @transientPropertyGeneration)  | (mProperty is == @atomicProxyGeneration) then
    %,\n         %!ENTITY_NAME%_%!mProperty.mPropertyName
  end
end
% {

%
for (mProperty) in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty propertyDeclarationCode !false !OVERRIDEN_TRANSIENTS]
end
%  //····················································································································
  //    init
  //····················································································································

  required init (_ inUndoManager : UndoManager?) {
%
for (mProperty) in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty initCode]
end
%    super.init (inUndoManager)
%
for (mProperty) in TO_ONE_RELATIONSHIP_LIST do
%    self.%!mProperty.mPropertyName%_none.mReadModelFunction = { [weak self] in\n%
%      if let uwSelf = self {\n%
%        return .single (uwSelf.%!mProperty.mPropertyName%_property.propval == nil)\n%
%      }else{\n%
%        return .empty\n%
%      }\n%
%    }\n%
%    self.%!mProperty.mPropertyName%_property.addEBObserver (self.%!mProperty.mPropertyName%_none)\n%
end
%//    gInitSemaphore.wait ()
%for (mProperty) in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty configurationCode !false]
end
%//    gInitSemaphore.signal ()
  //--- Install undoers and opposite setter for relationships
%
for (mProperty) in TO_MANY_RELATIONSHIP_LIST do
  switch mProperty.mOption
  case none :

  case hasDependance (@string masterPropertyName *) :
    %    self.%!mProperty.mPropertyName%_property.setDataProvider (self.%!masterPropertyName%_property)\n%
  case hasOpposite (@string oppositeName) :
    %    self.%!mProperty.mPropertyName%_property.setOppositeRelationShipFunctions (\n%
    %      setter: { [weak self] inObject in if let me = self { inObject.%!oppositeName%_property.setProp (me) } },\n%
    %      resetter: { inObject in inObject.%!oppositeName%_property.setProp (nil) }\n%
    %    )\n%
  end
end
%  //--- Register properties for handling signature
%
for (key) in SIGNATURE_SET do
  %    self.%!key%_property.setSignatureObserver (observer: self)\n%
end
%  //--- Extern delegates
%
  for (mExternSwiftDelegateName) in EXTERN_DELEGATE_LIST_FOR_IMPLEMENTATION do (idx)
    %    self.mExternDelegate%![idx string]% = %!mExternSwiftDelegateName.string% (object: self)\n%
  end
%   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································

%
  for (mExternSwiftDelegateName) in EXTERN_DELEGATE_LIST_FOR_IMPLEMENTATION do (idx)
    %  final var mExternDelegate%![idx string]% : %!mExternSwiftDelegateName.string%? = nil\n%
  end
%

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

/*  override func saveIntoDictionary (_ ioDictionary : inout [String  : Any]) {
    super.saveIntoDictionary (&ioDictionary)
%
for (mProperty) in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty saveIntoDictionaryCode]
end
%  } */

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : [String : Any],
                                     managedObjectArray inManagedObjectArray : [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: inManagedObjectArray)
%
for (mProperty) in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty setupRelationshipFromDictionaryCode]
end
%  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : [String : Any]) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
%
for (mProperty) in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty setupAtomicPropertyFromDictionaryCode]
end
%  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
%
for (mProperty) in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %    ioString += "%!mProperty.mPropertyName%\\n"\n%
end
%  //--- To one relationships
%for (mProperty) in TO_ONE_RELATIONSHIP_LIST do
  %    ioString += "%!mProperty.mPropertyName%\\n"\n%
end
%  //--- To many relationships
%for (property) in TO_MANY_RELATIONSHIP_LIST do
  if not [property.mOption isHasDependance] then
  %    ioString += "%!property.mPropertyName%\\n"\n%
  end
end
%  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
%
for (mProperty) in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %    self.%!mProperty.mPropertyName%.appendPropertyValueTo (&ioData)\n%
  %    ioData.append (ascii: .lineFeed)\n%
end
%  //--- To one relationships
%for (mProperty) in TO_ONE_RELATIONSHIP_LIST do
  %    if let object = self.%!mProperty.mPropertyName% {\n%
  %      ioData.append (base62Encoded: object.savingIndex)\n%
  %    }\n%
  %    ioData.append (ascii: .lineFeed)\n%
end
%  //--- To many relationships
%for (mProperty) in TO_MANY_RELATIONSHIP_LIST do
  if mProperty.mCustomStore then
    %    ioData.append (customStore_%![mProperty.mRelationshipType swiftTypeName]%_%!mProperty.mPropertyName% (self.%!mProperty.mPropertyName%_property.propval.values).data (using: .utf8)!)\n%
  %    ioData.append (ascii: .lineFeed)\n%
  elsif not [mProperty.mOption isHasDependance] then
    %    enterToManyRelationshipObjectIndexes (from: self.%!mProperty.mPropertyName%.values, into: &ioData)\n%
  end
end
%  }

%
if [SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION length] > 0 then
%  //····················································································································
  //    setUpPropertiesWithTextDictionary
  //····················································································································

  override func setUpPropertiesWithTextDictionary (_ inDictionary : [String : NSRange],
                                                   _ inData : Data) {
    super.setUpPropertiesWithTextDictionary (inDictionary, inData)
%
for (mProperty) in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %    if let range = inDictionary ["%!mProperty.mPropertyName%"], let value = %![mProperty.mType swiftTypeName]%.unarchiveFromDataRange (inData, range) {\n%
  %      self.%!mProperty.mPropertyName% = value\n%
  %    }\n%
end
%  }

%
end
if [TO_ONE_RELATIONSHIP_LIST length] > 0 then
%  //····················································································································
  //    setUpToOneRelationshipsWithTextDictionary
  //····················································································································

  override func setUpToOneRelationshipsWithTextDictionary (_ inDictionary : [String : NSRange],
                                                           _ inRawObjectArray : [RawObject],
                                                           _ inData : Data) {
    super.setUpToOneRelationshipsWithTextDictionary (inDictionary, inRawObjectArray, inData)
%for (mProperty) in TO_ONE_RELATIONSHIP_LIST do
  %    if let range = inDictionary ["%!mProperty.mPropertyName%"], let idx = inData.base62EncodedInt (range: range) {\n%
  %      let object = inRawObjectArray [idx].object as! %![mProperty.mRelationshipType swiftTypeName]%\n%
  %      self.%!mProperty.mPropertyName% = object\n%
  %    }\n%
end
%  }

%
end
if [TO_MANY_RELATIONSHIP_LIST length] > 0 then
%  //····················································································································
  //    setUpToManyRelationshipsWithTextDictionary
  //····················································································································

  override func setUpToManyRelationshipsWithTextDictionary (_ inDictionary : [String : NSRange],
                                                            _ inRawObjectArray : [RawObject],
                                                            _ inData : Data) {
    super.setUpToManyRelationshipsWithTextDictionary (inDictionary, inRawObjectArray, inData)
%for (property) in TO_MANY_RELATIONSHIP_LIST do
  if property.mCustomStore then
    %  //--- To many %!property.mPropertyName% (custom store)\n%
    %    if let range = inDictionary ["%!property.mPropertyName%"], range.length > 0, let s = String (data: inData [range.location ..< range.location + range.length], encoding: .utf8) {\n%
    %      let array = customRead_%![property.mRelationshipType swiftTypeName]%_%!property.mPropertyName% (fromString: s, with: self.undoManager)\n%
    %      self.%!property.mPropertyName% = EBReferenceArray (array)\n%
    %    }\n%
  elsif not [property.mOption isHasDependance] then
    %  //--- To many %!property.mPropertyName%\n%
    %    if let range = inDictionary ["%!property.mPropertyName%"], range.length > 0 {\n%
    %      var relationshipArray = EBReferenceArray <%![property.mRelationshipType swiftTypeName]%> ()\n%
    %      let indexArray = inData.base62EncodedIntArray (fromRange: range)\n%
    %      for idx in indexArray {\n%
    %        relationshipArray.append (inRawObjectArray [idx].object as! %![property.mRelationshipType swiftTypeName]%)\n%
    %      }\n%
    %      self.%!property.mPropertyName% = relationshipArray\n%
    %    }\n%
  end
end
%  }

%
end
%  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects ioObjectArray : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &ioObjectArray)
%
for (mProperty) in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty objectAccessibilityCodeForSaveOperation]
end
%  }

%
if [SIGNATURE_SET count] > 0 then
%  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
%
for (key) in SIGNATURE_SET do
  %    crc.accumulate (u32: self.%!key%_property.signature ())\n%
end
%    return crc
  }

%
end
if IS_GRAPHIC_ENTITY & not IS_ABSTRACT then
%  //····················································································································

  override func cursorForKnob (knob inKnobIndex: Int) -> NSCursor? {
    return self.cursorForKnob_%!ENTITY_NAME% (knob: inKnobIndex)
  }

  //····················································································································
  //  Translate
  //····················································································································

  override func acceptedTranslation (xBy inDx: Int, yBy inDy: Int) -> CanariPoint {
    return self.acceptedTranslation_%!ENTITY_NAME% (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func acceptToTranslate (xBy inDx: Int, yBy inDy: Int) -> Bool {
    return self.acceptToTranslate_%!ENTITY_NAME% (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func translate (xBy inDx: Int, yBy inDy: Int,
                           userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.translate_%!ENTITY_NAME% (xBy: inDx, yBy: inDy, userSet: &ioSet)
  }

  //····················································································································
  //   Move
  //····················································································································

  override func canMove (knob inKnobIndex : Int,
                         proposedUnalignedAlignedTranslation inProposedUnalignedTranslation : CanariPoint,
                         proposedAlignedTranslation inProposedAlignedTranslation : CanariPoint,
                         unalignedMouseDraggedLocation inUnalignedMouseDraggedLocation : CanariPoint,
                         shift inShift : Bool) -> CanariPoint {
    return self.canMove_%!ENTITY_NAME% (
      knob: inKnobIndex,
      proposedUnalignedAlignedTranslation: inProposedUnalignedTranslation,
      proposedAlignedTranslation: inProposedAlignedTranslation,
      unalignedMouseDraggedLocation: inUnalignedMouseDraggedLocation,
      shift: inShift
    )
  }

  //····················································································································

  override func move (knob inKnobIndex: Int,
                      proposedDx inDx: Int,
                      proposedDy inDy: Int,
                      unalignedMouseLocationX inUnlignedMouseLocationX : Int,
                      unalignedMouseLocationY inUnlignedMouseLocationY : Int,
                      alignedMouseLocationX inAlignedMouseLocationX : Int,
                      alignedMouseLocationY inAlignedMouseLocationY : Int,
                      shift inShift : Bool) {
    self.move_%!ENTITY_NAME% (
      knob: inKnobIndex,
      proposedDx: inDx,
      proposedDy: inDy,
      unalignedMouseLocationX: inUnlignedMouseLocationX,
      unalignedMouseLocationY: inUnlignedMouseLocationY,
      alignedMouseLocationX: inAlignedMouseLocationX,
      alignedMouseLocationY: inAlignedMouseLocationY,
      shift: inShift
    )
  }

  //····················································································································
  //  Snap to grid
  //····················································································································

  override func snapToGrid (_ inGrid : Int) {
    self.snapToGrid_%!ENTITY_NAME% (inGrid)
  }

  //····················································································································

  override func canSnapToGrid (_ inGrid : Int) -> Bool {
    return self.canSnapToGrid_%!ENTITY_NAME% (inGrid)
  }

  //····················································································································
  //  HORIZONTAL FLIP
  //····················································································································

  override func flipHorizontally () {
    self.flipHorizontally_%!ENTITY_NAME% ()
  }

  //····················································································································

  override func canFlipHorizontally () -> Bool {
    return self.canFlipHorizontally_%!ENTITY_NAME% ()
  }

  //····················································································································
  //  VERTICAL FLIP
  //····················································································································

  override func flipVertically () {
    self.flipVertically_%!ENTITY_NAME% ()
  }

  //····················································································································

  override func canFlipVertically () -> Bool {
    return self.canFlipVertically_%!ENTITY_NAME% ()
  }

  //····················································································································
  //  ROTATE 90
  //····················································································································

  override func canRotate90 (accumulatedPoints : inout Set <CanariPoint>) -> Bool {
    return self.canRotate90_%!ENTITY_NAME% (accumulatedPoints: &accumulatedPoints)
  }

  //····················································································································

  override func rotate90Clockwise (from inRotationCenter : CanariPoint,
                                   userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90Clockwise_%!ENTITY_NAME% (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································

  override func rotate90CounterClockwise (from inRotationCenter : CanariPoint,
                                          userSet ioSet : inout EBReferenceSet <EBManagedObject>) {
    self.rotate90CounterClockwise_%!ENTITY_NAME% (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································
  //  Save into additional dictionary
  //····················································································································

  override func saveIntoAdditionalDictionary (_ ioDictionary : inout [String : Any]) {
    self.saveIntoAdditionalDictionary_%!ENTITY_NAME% (&ioDictionary)
  }

  //····················································································································
  //  operationAfterPasting
  //····················································································································

  override func operationAfterPasting (additionalDictionary inDictionary : [String : Any],
                                       optionalDocument inOptionalDocument : EBAutoLayoutManagedDocument?,
                                       objectArray inObjectArray : [EBGraphicManagedObject]) -> String {
    return self.operationAfterPasting_%!ENTITY_NAME% (additionalDictionary: inDictionary,
                                                      optionalDocument: inOptionalDocument,
                                                      objectArray: inObjectArray)
  }

  //····················································································································
  //  Alignment Points
  //····················································································································

  override func alignmentPoints () -> Set <CanariPoint> {
    return self.alignmentPoints_%!ENTITY_NAME% ()
  }

  //····················································································································
  //  operationBeforeRemoving
  //····················································································································

  override func operationBeforeRemoving () {
    self.operationBeforeRemoving_%!ENTITY_NAME% ()
  }

%
if OPTION_CanCopyAndPaste then
%  //····················································································································
  //  COPY AND PASTE
  //····················································································································

  override func canCopyAndPaste () -> Bool {
    return true
  }

%end
if OPTION_CannotBeDeleted then
%  //····················································································································
  //  Can be deleted
  //····················································································································

  override func canBeDeleted () -> Bool {
    return false
  }

%end
end
%  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

