//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

%
for (mProperty) in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
%//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol %!ENTITY_NAME%_%!mProperty.mPropertyName% : AnyObject {
  var %!mProperty.mPropertyName% : %![mProperty.mType swiftTypeName]% { get }
}

%
end
for (mProperty) in PROXY_LIST_FOR_GENERATION do
%//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol %!ENTITY_NAME%_%!mProperty.mPropertyName% : AnyObject {
  var %!mProperty.mPropertyName% : %![mProperty.mType swiftTypeName]%? { get }
}

%
end
for (mProperty) in TRANSIENT_LIST_FOR_IMPLEMENTATION do
%//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol %!ENTITY_NAME%_%!mProperty.mPropertyName% : AnyObject {
  var %!mProperty.mPropertyName% : %![mProperty.mType swiftTypeName]%? { get }
}

%
end
%//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    %!"Entity: " + ENTITY_NAME%
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

%
if not HAS_SUB_ENTITY then
  %final %
end
%class %!ENTITY_NAME% : %!SUPER_CLASS_NAME
for (mProperty) in PROPERTY_LIST_FOR_GENERATION do
  if (mProperty is == @atomicPropertyGeneration) | (mProperty is == @transientPropertyGeneration)  | (mProperty is == @atomicProxyGeneration) then
    %,\n         %!ENTITY_NAME%_%!mProperty.mPropertyName
  end
end
% {

%
for (mProperty) in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty propertyDeclarationCode !false !OVERRIDEN_TRANSIENTS]
end
%  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
%
for (mProperty) in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty initCode]
end
%    super.init (ebUndoManager)
%
for (mProperty) in TO_ONE_RELATIONSHIP_LIST do
%    self.%!mProperty.mPropertyName%_none.mReadModelFunction = { [weak self] in\n%
%      if let uwSelf = self {\n%
%        return .single (uwSelf.%!mProperty.mPropertyName%_property.propval == nil)\n%
%      }else{\n%
%        return .empty\n%
%      }\n%
%    }\n%
%    self.%!mProperty.mPropertyName%_property.addEBObserver (self.%!mProperty.mPropertyName%_none)\n%
end
%    gInitSemaphore.wait ()
%for (mProperty) in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty configurationCode !false]
end
%    gInitSemaphore.signal ()
  //--- Install undoers and opposite setter for relationships
%
for (mProperty) in TO_MANY_RELATIONSHIP_LIST do
  switch mProperty.mOption
  case none :

  case hasDependance (@string masterPropertyName *) :
    %    self.%!mProperty.mPropertyName%_property.setDataProvider (self.%!masterPropertyName%_property)\n%
  case hasOpposite (@string oppositeName) :
    %    self.%!mProperty.mPropertyName%_property.setOppositeRelationShipFunctions (\n%
    %      setter: { [weak self] inObject in if let me = self { inObject.%!oppositeName%_property.setProp (me) } },\n%
    %      resetter: { inObject in inObject.%!oppositeName%_property.setProp (nil) }\n%
    %    )\n%
  end
end
%  //--- Register properties for handling signature
%
for (key) in SIGNATURE_SET do
  %    self.%!key%_property.setSignatureObserver (observer: self)\n%
end
%  //--- Extern delegates
%
  for (mExternSwiftDelegateName) in EXTERN_DELEGATE_LIST_FOR_IMPLEMENTATION do (idx)
    %    self.mExternDelegate%![idx string]% = %!mExternSwiftDelegateName.string% (object: self)\n%
  end
%   }
  
  //····················································································································
  //    Extern delegates
  //····················································································································

%
  for (mExternSwiftDelegateName) in EXTERN_DELEGATE_LIST_FOR_IMPLEMENTATION do (idx)
    %  final var mExternDelegate%![idx string]% : %!mExternSwiftDelegateName.string%? = nil\n%
  end
%
  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
      super.populateExplorerWindow (&y, view:view)
%for (mProperty) in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %      createEntryForPropertyNamed (\n%
  %        "%!mProperty.mPropertyName%",\n%
  %        object: self.%!mProperty.mPropertyName%_property,\n%
  %        y: &y,\n%
  %        view: view,\n%
  %        observerExplorer: &self.%!mProperty.mPropertyName%_property.mObserverExplorer,\n%
  %        valueExplorer: &self.%!mProperty.mPropertyName%_property.mValueExplorer\n%
  %      )\n%
end
%      createEntryForTitle ("Properties", y: &y, view: view)\n%
for (mProperty) in TRANSIENT_LIST_FOR_IMPLEMENTATION do
  %      createEntryForPropertyNamed (\n%
  %        "%!mProperty.mPropertyName%",\n%
  %        object: self.%!mProperty.mPropertyName%_property,\n%
  %        y: &y,\n%
  %        view: view,\n%
  %        observerExplorer: &self.%!mProperty.mPropertyName%_property.mObserverExplorer,\n%
  %        valueExplorer: &self.%!mProperty.mPropertyName%_property.mValueExplorer\n%
  %      )\n%
end
%      createEntryForTitle ("Transients", y: &y, view: view)\n%
for (mProperty) in TO_MANY_RELATIONSHIP_LIST do
  if not [mProperty.mOption isHasDependance] then
    %      createEntryForToManyRelationshipNamed (\n%
    %        "%!mProperty.mPropertyName%",\n%
    %        object: %!mProperty.mPropertyName%_property,\n%
    %        y: &y,\n%
    %        view: view,\n%
    %        valueExplorer:&%!mProperty.mPropertyName%_property.mValueExplorer\n%
    %      )\n%
  end
end
%      createEntryForTitle ("ToMany Relationships", y: &y, view: view)\n%
for (mProperty) in TO_ONE_RELATIONSHIP_LIST do
  %      createEntryForToOneRelationshipNamed (\n%
  %        "%!mProperty.mPropertyName%",\n%
  %        object: self.%!mProperty.mPropertyName%_property,\n%
  %        y: &y,\n%
  %        view: view,\n%
  %        valueExplorer:&self.%!mProperty.mPropertyName%_property.mValueExplorer\n%
  %      )\n%
end%      createEntryForTitle ("ToOne Relationships", y: &y, view: view)
    }
  #endif

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  #if BUILD_OBJECT_EXPLORER
    override func clearObjectExplorer () {
%
for (mProperty) in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty clearObjectExplorerCode]
end
%    //---
      super.clearObjectExplorer ()
    }
  #endif

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override func cleanUpToManyRelationships () {
%
for (mProperty) in TO_MANY_RELATIONSHIP_LIST do
  if not [mProperty.mOption isHasDependance] then
    %    self.%!mProperty.mPropertyName%.removeAll ()\n%
  end
end
%  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override func cleanUpToOneRelationships () {
%
for (mProperty) in TO_ONE_RELATIONSHIP_LIST do
  %    self.%!mProperty.mPropertyName% = nil\n%
end
%  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
%
for (mProperty) in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty saveIntoDictionaryCode]
end
%  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: &managedObjectArray)
%
for (mProperty) in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty setupRelationshipFromDictionaryCode]
end
%  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
%
for (mProperty) in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty setupAtomicPropertyFromDictionaryCode]
end
%  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
%
for (mProperty) in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %    ioString += "%!mProperty.mPropertyName%\\n"\n%
end
%  //--- To one relationships
%for (mProperty) in TO_ONE_RELATIONSHIP_LIST do
  %    ioString += "%!mProperty.mPropertyName%\\n"\n%
end
%  //--- To many relationships
%for (mProperty) in TO_MANY_RELATIONSHIP_LIST do
  %    ioString += "%!mProperty.mPropertyName%\\n"\n%
end
%  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
%
for (mProperty) in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %    self.%!mProperty.mPropertyName%.appendPropertyValueTo (&ioData)\n%
  %    ioData.append (ascii: .lineFeed)\n%
end
%  //--- To one relationships
%for (mProperty) in TO_ONE_RELATIONSHIP_LIST do
  %    if let object = self.%!mProperty.mPropertyName% {\n%
  %      ioData.append (base62Encoded: object.savingIndex)\n%
  %    }\n%
  %    ioData.append (ascii: .lineFeed)\n%
end
%  //--- To many relationships
%for (mProperty) in TO_MANY_RELATIONSHIP_LIST do
  if not [mProperty.mOption isHasDependance] then
    %    do{\n%
    %      var optionalFirstIndex : Int? = nil\n%
    %      var rangeCount = 0\n%
    %      for object in self.%!mProperty.mPropertyName%.values {\n%
    %        if let firstIndex = optionalFirstIndex {\n%
    %          if object.savingIndex == (firstIndex + 1) {\n%
    %            rangeCount += 1\n%
    %            optionalFirstIndex = object.savingIndex\n%
    %          }else if rangeCount > 0 {\n%
    %            ioData.append (ascii: .colon)\n%
    %            ioData.append (base62Encoded: rangeCount)\n%
    %            ioData.append (ascii: .space)\n%
    %            ioData.append (base62Encoded: object.savingIndex)\n%
    %            rangeCount = 0\n%
    %            optionalFirstIndex = object.savingIndex\n%
    %          }else{\n%
    %            ioData.append (ascii: .space)\n%
    %            ioData.append (base62Encoded: object.savingIndex)\n%
    %            optionalFirstIndex = object.savingIndex\n%
    %          }\n%
    %        }else{\n%
    %          ioData.append (base62Encoded: object.savingIndex)\n%
    %          optionalFirstIndex = object.savingIndex\n%
    %        }\n%
    %      }\n%
    %      if optionalFirstIndex != nil, rangeCount > 0 {\n%
    %        ioData.append (ascii: .colon)\n%
    %        ioData.append (base62Encoded: rangeCount)\n%
    %      }\n%
    %      ioData.append (ascii: .lineFeed)\n%
    %    }\n%
  end
end
%  }

%
if [SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION length] > 0 then
%  //····················································································································
  //    setUpPropertiesWithTextDictionary
  //····················································································································

  override func setUpPropertiesWithTextDictionary (_ inDictionary : [String : NSRange],
                                                   _ inData : Data /* ,
                                                   _ ioParallelObjectSetupContext : inout ParallelObjectSetupContext */) {
    super.setUpPropertiesWithTextDictionary (inDictionary, inData) //, &ioParallelObjectSetupContext)
 //   ioParallelObjectSetupContext.addOperation {
%
for (mProperty) in SIMPLE_STORED_PROPERTY_LIST_FOR_GENERATION do
  %      if let range = inDictionary ["%!mProperty.mPropertyName%"], let value = %![mProperty.mType swiftTypeName]%.unarchiveFromDataRange (inData, range) {\n%
  %        self.%!mProperty.mPropertyName% = value\n%
  %      }\n%
end
% //   }\n%
%  //--- End of addOperation\n%
%  }

%
end
if [TO_ONE_RELATIONSHIP_LIST length] > 0 then
%  //····················································································································
  //    setUpToOneRelationshipsWithTextDictionary
  //····················································································································

  override func setUpToOneRelationshipsWithTextDictionary (_ inDictionary : [String : NSRange],
                                                           _ inRawObjectArray : [RawObject],
                                                           _ inData : Data) {
    super.setUpToOneRelationshipsWithTextDictionary (inDictionary, inRawObjectArray, inData)
%for (mProperty) in TO_ONE_RELATIONSHIP_LIST do
  %    if let range = inDictionary ["%!mProperty.mPropertyName%"], let objectIndex = inData.base62EncodedInt (range: range) {\n%
  %      let object = inRawObjectArray [objectIndex].object as! %![mProperty.mRelationshipType swiftTypeName]%\n%
  %      self.%!mProperty.mPropertyName% = object\n%
  %    }\n%
end
%  }

%
end
if [TO_MANY_RELATIONSHIP_LIST length] > 0 then
%  //····················································································································
  //    setUpToManyRelationshipsWithTextDictionary
  //····················································································································

  override func setUpToManyRelationshipsWithTextDictionary (_ inDictionary : [String : NSRange],
                                                            _ inRawObjectArray : [RawObject],
                                                            _ inData : Data) {
    super.setUpToManyRelationshipsWithTextDictionary (inDictionary, inRawObjectArray, inData)
%for (mProperty) in TO_MANY_RELATIONSHIP_LIST do
  if not [mProperty.mOption isHasDependance] then
    %      if let range = inDictionary ["%!mProperty.mPropertyName%"], range.length > 0 {\n%
    %        var relationshipArray = EBReferenceArray <%![mProperty.mRelationshipType swiftTypeName]%> ()\n%
    %        let indexArray = inData.base62EncodedIntArray (fromRange: range)\n%
    %        for idx in indexArray {\n%
    %          relationshipArray.append (inRawObjectArray [idx].object as! %![mProperty.mRelationshipType swiftTypeName]%)\n%
    %        }\n%
    %        self.%!mProperty.mPropertyName% = relationshipArray\n%
    %      }\n%
  end
end
%  }

%
end
%  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
%
for (mProperty) in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty objectAccessibilityCode]
end
%  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
%
for (mProperty) in PROPERTY_LIST_FOR_GENERATION do
  ![mProperty objectAccessibilityCodeForSaveOperation]
end
%  }

%
if [SIGNATURE_SET count] > 0 then
%  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
%
for (key) in SIGNATURE_SET do
  %    crc.accumulateUInt32 (self.%!key%_property.signature ())\n%
end
%    return crc
  }

%
end
if IS_GRAPHIC_ENTITY & not IS_ABSTRACT then
%  //····················································································································

  override func cursorForKnob (knob inKnobIndex: Int) -> NSCursor? {
    return cursorForKnob_%!ENTITY_NAME% (knob: inKnobIndex)
  }

  //····················································································································
  //  Translate
  //····················································································································

  override func acceptedTranslation (xBy inDx: Int, yBy inDy: Int) -> CanariPoint {
    return acceptedTranslation_%!ENTITY_NAME% (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func acceptToTranslate (xBy inDx: Int, yBy inDy: Int) -> Bool {
    return acceptToTranslate_%!ENTITY_NAME% (xBy: inDx, yBy: inDy)
  }

  //····················································································································

  override func translate (xBy inDx: Int, yBy inDy: Int, userSet ioSet : inout EBReferenceSet <AnyObject>) {
    translate_%!ENTITY_NAME% (xBy: inDx, yBy: inDy, userSet: &ioSet)
  }

  //····················································································································
  //   Move
  //····················································································································

  override func canMove (knob inKnobIndex : Int,
                         proposedUnalignedAlignedTranslation inProposedUnalignedTranslation : CanariPoint,
                         proposedAlignedTranslation inProposedAlignedTranslation : CanariPoint,
                         unalignedMouseDraggedLocation inUnalignedMouseDraggedLocation : CanariPoint,
                         shift inShift : Bool) -> CanariPoint {
    return canMove_%!ENTITY_NAME% (
      knob: inKnobIndex,
      proposedUnalignedAlignedTranslation: inProposedUnalignedTranslation,
      proposedAlignedTranslation: inProposedAlignedTranslation,
      unalignedMouseDraggedLocation: inUnalignedMouseDraggedLocation,
      shift: inShift
    )
  }

  //····················································································································

  override func move (knob inKnobIndex: Int,
                      proposedDx inDx: Int,
                      proposedDy inDy: Int,
                      unalignedMouseLocationX inUnlignedMouseLocationX : Int,
                      unalignedMouseLocationY inUnlignedMouseLocationY : Int,
                      alignedMouseLocationX inAlignedMouseLocationX : Int,
                      alignedMouseLocationY inAlignedMouseLocationY : Int,
                      shift inShift : Bool) {
    move_%!ENTITY_NAME% (
      knob: inKnobIndex,
      proposedDx: inDx,
      proposedDy: inDy,
      unalignedMouseLocationX: inUnlignedMouseLocationX,
      unalignedMouseLocationY: inUnlignedMouseLocationY,
      alignedMouseLocationX: inAlignedMouseLocationX,
      alignedMouseLocationY: inAlignedMouseLocationY,
      shift: inShift
    )
  }

  //····················································································································
  //  Snap to grid
  //····················································································································

  override func snapToGrid (_ inGrid : Int) {
    snapToGrid_%!ENTITY_NAME% (inGrid)
  }

  //····················································································································

  override func canSnapToGrid (_ inGrid : Int) -> Bool {
    return canSnapToGrid_%!ENTITY_NAME% (inGrid)
  }

  //····················································································································
  //  HORIZONTAL FLIP
  //····················································································································

  override func flipHorizontally () {
    flipHorizontally_%!ENTITY_NAME% ()
  }

  //····················································································································

  override func canFlipHorizontally () -> Bool {
    return canFlipHorizontally_%!ENTITY_NAME% ()
  }

  //····················································································································
  //  VERTICAL FLIP
  //····················································································································

  override func flipVertically () {
    flipVertically_%!ENTITY_NAME% ()
  }

  //····················································································································

  override func canFlipVertically () -> Bool {
    return canFlipVertically_%!ENTITY_NAME% ()
  }

  //····················································································································
  //  ROTATE 90
  //····················································································································

  override func canRotate90 (accumulatedPoints : inout Set <CanariPoint>) -> Bool {
    return canRotate90_%!ENTITY_NAME% (accumulatedPoints: &accumulatedPoints)
  }

  //····················································································································

  override func rotate90Clockwise (from inRotationCenter : CanariPoint, userSet ioSet : inout EBReferenceSet <AnyObject>) {
    rotate90Clockwise_%!ENTITY_NAME% (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································

  override func rotate90CounterClockwise (from inRotationCenter : CanariPoint, userSet ioSet : inout EBReferenceSet <AnyObject>) {
    rotate90CounterClockwise_%!ENTITY_NAME% (from: inRotationCenter, userSet: &ioSet)
  }

  //····················································································································
  //  Save into additional dictionary
  //····················································································································

  override func saveIntoAdditionalDictionary (_ ioDictionary : NSMutableDictionary) {
    saveIntoAdditionalDictionary_%!ENTITY_NAME% (ioDictionary)
  }

  //····················································································································
  //  operationAfterPasting
  //····················································································································

  override func operationAfterPasting (additionalDictionary inDictionary : NSDictionary,
                                       optionalDocument inOptionalDocument : EBAutoLayoutManagedDocument?,
                                       objectArray inObjectArray : [EBGraphicManagedObject]) -> String {
    return operationAfterPasting_%!ENTITY_NAME% (additionalDictionary: inDictionary,
                                                 optionalDocument: inOptionalDocument,
                                                 objectArray: inObjectArray)
  }

  //····················································································································
  //  Alignment Points
  //····················································································································

  override func alignmentPoints () -> Set <CanariPoint> {
    return alignmentPoints_%!ENTITY_NAME% ()
  }

  //····················································································································
  //  operationBeforeRemoving
  //····················································································································

  override func operationBeforeRemoving () {
    operationBeforeRemoving_%!ENTITY_NAME% ()
  }

%
if OPTION_CanCopyAndPaste then
%  //····················································································································
  //  COPY AND PASTE
  //····················································································································

  override func canCopyAndPaste () -> Bool {
    return true
  }

%end
if OPTION_CannotBeDeleted then
%  //····················································································································
  //  Can be deleted
  //····················································································································

  override func canBeDeleted () -> Bool {
    return false
  }

%end
end
%  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

