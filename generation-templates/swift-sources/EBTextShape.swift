//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    EBTextShape
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBTextShape : EBShape {

  //····················································································································

  private let mFilledBezierPath : EBBezierPath
  private let mForeColor : NSColor
  private let mOptionalBackColor : NSColor?

  //····················································································································
  //  Init
  //····················································································································

  init (_ inString: String,
        _ inOrigin : CGPoint,
        _ inTextAttributes : [NSAttributedString.Key : Any],
        _ inHorizontalAlignment : EBTextHorizontalAlignment,
        _ inVerticalAlignment : EBTextVerticalAlignment) {
  //--- Forecolor
    if let c = inTextAttributes [NSAttributedString.Key.foregroundColor] as? NSColor {
      mForeColor = c
    }else{
      mForeColor = .black
    }
  //--- Back Color
    if let c = inTextAttributes [NSAttributedString.Key.backgroundColor] as? NSColor {
      mOptionalBackColor = c
    }else{
      mOptionalBackColor = nil
    }
  //--- Transform text into filled bezier path
    mFilledBezierPath = EBBezierPath (
      with: inString,
      at: inOrigin,
      inHorizontalAlignment,
      inVerticalAlignment,
      withAttributes: inTextAttributes
    )
    super.init ()
  }

  //····················································································································

  private init (_ inBezierPath : EBBezierPath, _ inForeColor : NSColor, _ inBackColor : NSColor?) {
    mFilledBezierPath = inBezierPath
    mForeColor = inForeColor
    mOptionalBackColor = inBackColor
    super.init ()
  }

  //····················································································································
  //  transformedBy
  //····················································································································

  override func transformed (by inAffineTransform : AffineTransform) -> EBTextShape {
    let result = EBTextShape (self.mFilledBezierPath.transformed (by: inAffineTransform), self.mForeColor, self.mOptionalBackColor)
    self.internalTransform (result, by: inAffineTransform)
    return result
  }

  //····················································································································
  //  Draw
  //····················································································································

  override func draw (_ inView : NSView, _ inDirtyRect : NSRect) {
    if inView.needsToDraw (self.mFilledBezierPath.bounds) {
      if let backColor = self.mOptionalBackColor {
        backColor.setFill ()
        NSBezierPath.fill (self.mFilledBezierPath.bounds)
      }
      self.mForeColor.setFill ()
      self.mFilledBezierPath.fill ()
    }
    super.draw (inView, inDirtyRect)
  }

  //····················································································································
  // boundingBox
  //····················································································································

  override internal func internalBoundingBox () -> NSRect {
    return self.mFilledBezierPath.bounds
//    return self.mFilledBezierPath.isEmpty ? .null : self.mFilledBezierPath.bounds
  }

  //····················································································································
  //   Contains point
  //····················································································································

  override func contains (point inPoint : NSPoint) -> Bool {
    var result = super.contains (point: inPoint)
    if !result {
      result = self.mFilledBezierPath.bounds.contains (inPoint)
    }
    return result
  }

  //····················································································································
  //   intersects
  //····················································································································

  override func intersects (rect inRect : NSRect) -> Bool {
    var result = super.intersects (rect: inRect)
    if !result {
      result = self.mFilledBezierPath.bounds.intersects (inRect)
    }
    return result
  }

  //····················································································································
  /// The hash value.
  ///
  /// Hash values are not guaranteed to be equal across different executions of
  /// your program. Do not save hash values to use during a future execution.
  //····················································································································

  override func hash (into hasher: inout Hasher) {
    super.hash (into: &hasher)
    self.mFilledBezierPath.hash (into: &hasher)
    self.mForeColor.hash (into: &hasher)
    self.mOptionalBackColor.hash (into: &hasher)
  }

  //····················································································································
  //   isEqualToShape
  //····················································································································

  override func isEqualToShape (_ inOperand : EBShape) -> Bool {
    var equal = false
    if let operand = inOperand as? EBTextShape {
      equal = self.mFilledBezierPath == operand.mFilledBezierPath
      if equal {
        equal = self.mForeColor == operand.mForeColor
      }
      if equal {
        equal = self.mOptionalBackColor == operand.mOptionalBackColor
      }
      if equal {
        equal = super.isEqualToShape (operand)
      }
    }
    return equal
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
