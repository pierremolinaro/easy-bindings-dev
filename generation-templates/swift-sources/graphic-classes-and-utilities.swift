//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  EBGraphicManagedObject
//  dynamic before func is required in order to make functions overriden in extensions
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBGraphicManagedObject : EBManagedObject {

  //····················································································································

  var selectionLayer_property = EBTransientProperty_EBShapes ()

  //····················································································································

  @objc dynamic func acceptedTranslation (by inValue: CGPoint) -> CGPoint {
    return inValue
  }

  //····················································································································

  @objc dynamic func acceptToTranslate (xBy inDx: CGFloat, yBy inDy: CGFloat) -> Bool {
    return false
  }

  //····················································································································

  @objc dynamic func translate (xBy inDx: CGFloat, yBy inDy: CGFloat) {
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    StrokeOrFill
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum StrokeOrFill : Int {
  case stroke
  case fill
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    EBShapes
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBShapes : Hashable, EBUserClassNameProtocol {

  //····················································································································
  //  Properties
  //····················································································································

  private var paths : [([NSBezierPath], NSColor, StrokeOrFill)]
  private var cachedBoundingBox : NSRect?

  //····················································································································
  //  init
  //····················································································································

  init () {
    paths = []
    cachedBoundingBox = nil
    noteObjectAllocation (self)
  }

  //····················································································································

  init (_ inPaths : [([NSBezierPath], NSColor, StrokeOrFill)]) {
    paths = inPaths
    cachedBoundingBox = nil
    noteObjectAllocation (self)
  }

  //····················································································································

  init (_ inBezierPaths : [NSBezierPath], _ inColor : NSColor, _ inOperation : StrokeOrFill) {
    paths = []
    cachedBoundingBox = nil
    noteObjectAllocation (self)
    self.paths.append ((inBezierPaths, inColor, inOperation))
  }

  //····················································································································
  //  deinit
  //····················································································································

  deinit {
    noteObjectDeallocation (self)
  }

  //····················································································································
  //  append
  //····················································································································

  func append (_ inBezierPaths : [NSBezierPath], _ inColor : NSColor, _ inOperation : StrokeOrFill) {
    self.paths.append ((inBezierPaths, inColor, inOperation))
    self.cachedBoundingBox = nil
  }

  //····················································································································
  //  +=
  //····················································································································

  public static func += (ioShapes : inout EBShapes, inShapes : EBShapes) {
    ioShapes.paths += inShapes.paths
    ioShapes.cachedBoundingBox = nil
  }

  //····················································································································
  //  Draw Rect
  //····················································································································

  func draw (_ dirtyRect: NSRect) {
    for (paths, color, operation) in self.paths {
      switch operation {
      case .stroke :
        color.setStroke ()
        for bp in paths {
          bp.stroke ()
        }
      case .fill :
        color.setFill ()
        for bp in paths {
          bp.fill ()
        }
      }
    }
  }

  //····················································································································
  // boundingBox
  //····················································································································

  var boundingBox : NSRect {
    if let cbb = cachedBoundingBox {
      return cbb
    }else{
      var r = NSZeroRect
      for (bps, _, operation) in self.paths {
        switch operation {
        case .fill :
          for bp in bps {
            r = r.union (bp.bounds)
          }
        case .stroke :
          for bp in bps {
            let lineWidth = max (bp.lineWidth, 1.0)
            r = r.union (bp.bounds.insetBy (dx: -lineWidth, dy: -lineWidth))
          }
        }
      }
      self.cachedBoundingBox = r
      return r
    }
  }

  //····················································································································
  //   intersects
  //····················································································································

  func intersects (_ inRect : NSRect) -> Bool {
    return self.boundingBox.intersects (inRect)
  }

  //····················································································································
  /// Returns a Boolean value indicating whether two values are equal.
  ///
  /// Equality is the inverse of inequality. For any values `a` and `b`,
  /// `a == b` implies that `a != b` is `false`.
  ///
  /// - Parameters:
  ///   - lhs: A value to compare.
  ///   - rhs: Another value to compare.
  //····················································································································

  public static func == (lhs: EBShapes, rhs: EBShapes) -> Bool {
    var equal = lhs.paths.count == rhs.paths.count
    if equal {
      var idx = 0
      while idx < lhs.paths.count {
        equal = (lhs.paths [idx].0.count == rhs.paths [idx].0.count) && (lhs.paths [idx].1 == rhs.paths [idx].1) && (lhs.paths [idx].2 == rhs.paths [idx].2)
        if equal {
          var idy = 0
          while idy < lhs.paths [idx].0.count {
            equal = lhs.paths [idx].0 [idy] == rhs.paths [idx].0 [idy]
            if !equal {
              break
            }
            idy += 1
          }
        }
        if !equal {
          break
        }
        idx += 1
      }
    }
    return equal
  }

  //····················································································································
  /// The hash value.
  ///
  /// Hash values are not guaranteed to be equal across different executions of
  /// your program. Do not save hash values to use during a future execution.
  //····················································································································

  public var hashValue : Int {
    var h = 0
    for (bps, color, op) in self.paths {
      h ^= color.hashValue ^ op.rawValue.hashValue
      for pb in bps {
        h ^= pb.hashValue
      }
    }
    return h
  }


  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Build PDF image
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func buildPDFimage (frame inFrame: CGRect,
                    shapes inShapes: EBShapes,
                    backgroundColor inBackColor : NSColor? = nil) -> Data {
  let view = EBOffscreenView (frame: inFrame)
  view.setBackColor (inBackColor)
  view.setPaths (inShapes)
  return view.dataWithPDF (inside: inFrame)
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBOffscreenView
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

fileprivate final class EBOffscreenView : NSView, EBUserClassNameProtocol {

  private var mShapes = EBShapes ()
  private var mBackColor : NSColor? = nil

  //····················································································································

  override init (frame frameRect: NSRect) {
    super.init (frame: frameRect)
    noteObjectAllocation (self)
  }

  //····················································································································

  required init? (coder: NSCoder) {
    super.init (coder: coder)
    noteObjectAllocation (self)
  }

  //····················································································································

  deinit {
    noteObjectDeallocation (self)
  }

  //····················································································································
  //  Set paths
  //····················································································································

  func setPaths (_ inShapes : EBShapes) {
    self.mShapes = inShapes
  }

  //····················································································································
  //  Set back color
  //····················································································································

  func setBackColor (_ inColor : NSColor?) {
    self.mBackColor = inColor
  }

  //····················································································································
  //  Draw Rect
  //····················································································································

  override func draw (_ inDirtyRect: NSRect) {
    if let backColor = mBackColor {
      backColor.setFill ()
      #if swift(>=4)
        __NSRectFill (inDirtyRect)
      #else
        NSRectFill (inDirtyRect)
      #endif
    }
  //--- Bezier paths
    self.mShapes.draw (inDirtyRect)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    EBShapeLayer
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct EBShapeLayer : Hashable {

  //····················································································································
  //   Properties
  //····················································································································

  private let mShapes : EBShapes
  private let mTransform : NSAffineTransform
  var userIndex = -1
  var userSecondaryIndex = -1

  //····················································································································
  //   Init
  //····················································································································

  init () {
    mShapes = EBShapes ()
    mTransform = NSAffineTransform ()
  }

  //····················································································································

  init (_ inShapes : EBShapes, transform inTransform : NSAffineTransform = NSAffineTransform ()) {
    mShapes = inShapes
    mTransform = inTransform
  }

  //····················································································································
  // Equatable protocol
  //····················································································································

  public static func == (lhs: EBShapeLayer, rhs: EBShapeLayer) -> Bool {
    return (lhs.userIndex == rhs.userIndex)
      && (lhs.userSecondaryIndex == rhs.userSecondaryIndex)
      && (lhs.mShapes == rhs.mShapes)
      && (lhs.mTransform == rhs.mTransform)
  }

  //····················································································································
  // Hashable protocol
  //····················································································································

  public var hashValue: Int {
    var h = self.userIndex
    h ^= self.userSecondaryIndex
    h ^= self.mTransform.hashValue
    h ^= self.mShapes.hashValue
    return h
  }

  //····················································································································
  // boundingBox
  //····················································································································

  var boundingBox : NSRect {
    let r = self.mShapes.boundingBox
    let bottomLeft = self.mTransform.transform (r.origin)
    let bottomRight = self.mTransform.transform (NSPoint (x:r.maxX, y:r.minY))
    let topRight = self.mTransform.transform (NSPoint (x:r.maxX, y:r.maxY))
    let topLeft = self.mTransform.transform (NSPoint (x:r.minX, y:r.maxY))
    let minX = min (bottomRight.x, bottomLeft.x, topRight.x, topLeft.x)
    let maxX = max (bottomRight.x, bottomLeft.x, topRight.x, topLeft.x)
    let minY = min (bottomRight.y, bottomLeft.y, topRight.y, topLeft.y)
    let maxY = max (bottomRight.y, bottomLeft.y, topRight.y, topLeft.y)
    return NSRect (x: minX, y: minY, width: maxX - minX, height: maxY - minY)
  }
  
  //····················································································································
  // draw
  //····················································································································

  func draw (_ inDirtyRect: NSRect) {
    if self.boundingBox.intersects (inDirtyRect) {
      self.mTransform.concat ()
      self.mShapes.draw (inDirtyRect)
      let at = self.mTransform.copy () as! NSAffineTransform
      at.invert ()
      at.concat ()
    }
  }

  //····················································································································

  func sameDisplay (as inObject : EBShapeLayer) -> Bool {
    return (self.mTransform == inObject.mTransform) && (self.mShapes == inObject.mShapes)
  }

  //····················································································································
  //   intersects rectangle
  //····················································································································

  func intersects (_ inRect : NSRect) -> Bool {
    return self.boundingBox.intersects (inRect)
  }

  //····················································································································
  //   Contains point
  //····················································································································

  func contains (_ inPoint : NSPoint) -> Bool {
    return self.boundingBox.contains (inPoint)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    EBShapeLayerArray
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct EBShapeLayerArray : Hashable {

  //····················································································································
  //   Properties
  //····················································································································

  let objects : [EBShapeLayer]

  //····················································································································
  //   Init
  //····················································································································

  init (_ inObjects : [EBShapeLayer]) {
    objects = inObjects
  }

  //····················································································································
  // Equatable protocol
  //····················································································································

  public static func == (lhs: EBShapeLayerArray, rhs: EBShapeLayerArray) -> Bool {
    if lhs.objects.count != rhs.objects.count {
      return false
    }else{
      var idx = 0
      while idx < lhs.objects.count {
        if lhs.objects [idx] != rhs.objects [idx] {
          return false
        }
        idx += 1
      }
      return true
    }
  }

  //····················································································································
  // Hashable protocol
  //····················································································································

  public var hashValue: Int {
    var h = 0
    for object in objects {
      h ^= object.hashValue
    }
    return h
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
