//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//   EBGenericPropertyProxy <T : EBPropertyProtocol>
//----------------------------------------------------------------------------------------------------------------------

final class EBGenericPropertyProxy <T : EBPropertyProtocol> : EBGenericReadWriteProperty <T> {

  //····················································································································

  init (getter inGetter : @escaping () -> EBSelection <T>, setter inSetter : @escaping (T) -> Void) {
    self.mReadModelFunction = inGetter
    self.mWriteModelFunction = inSetter
    super.init ()
  }

  //····················································································································

  private var mReadModelFunction : () -> EBSelection <T>
  private var mWriteModelFunction : (T) -> Void
  var mValidateAndWriteModelFunction : Optional < (T, NSWindow?) -> Bool > = nil
  private var mCachedValue : EBSelection <T>? = nil

  //····················································································································

  var mValueExplorer : NSTextField? {
    didSet {
      self.updateValueExplorer (possibleValue: self.mCachedValue)
    }
  }

  //····················································································································

  private func updateValueExplorer (possibleValue : EBSelection <T>?) {
    if let value = possibleValue {
      switch value {
      case .empty :
        self.mValueExplorer?.stringValue = "-"
      case .multiple :
        self.mValueExplorer?.stringValue = "-"
      case .single (let value) :
        self.mValueExplorer?.stringValue = "\(value)"
      }
    }else{
      self.mValueExplorer?.stringValue = "nil"
    }
  }

  //····················································································································

  override func postEvent () {
    if self.mCachedValue != nil {
      self.mCachedValue = nil
      if logEvents () {
        appendMessageString ("Proxy \(explorerIndexString (self.ebObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("Proxy \(explorerIndexString (self.ebObjectIndex)) nil\n")
    }
  }

  //····················································································································

  override var selection : EBSelection <T> {
    if self.mCachedValue == nil {
      self.mCachedValue = self.mReadModelFunction ()
      self.updateValueExplorer (possibleValue: self.mCachedValue)
    }
    if self.mCachedValue == nil {
      self.mCachedValue = .empty
    }
    return self.mCachedValue!
  }

  //····················································································································

  override func setProp (_ value : T) {
    self.mWriteModelFunction (value)
  }

  //····················································································································

  override func validateAndSetProp (_ candidateValue : T,
                                    windowForSheet inWindow : NSWindow?) -> Bool {
    var result = false
    if let unwValidateAndWriteModelFunction = self.mValidateAndWriteModelFunction {
      result = unwValidateAndWriteModelFunction (candidateValue, inWindow)
    }
    return result
  }

  //····················································································································
  //  Façade
  //····················································································································

  private lazy var mFaçade = ReadWriteFaçade <T> (
    getter: { [weak self] in return self?.selection ?? .empty },
    setter: { [weak self] in self?.mWriteModelFunction ($0) }
  )

  //····················································································································

  var projectedValue : ReadWriteFaçade <T> { self.mFaçade }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
