//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//   EBWeakObserverSetElement
//----------------------------------------------------------------------------------------------------------------------

fileprivate struct EBWeakObserverSetElement {

  //····················································································································

  private weak var mObserver : EBEvent? = nil // SOULD BE WEAK

  //····················································································································

  fileprivate var observer : EBEvent? { return self.mObserver }

  //····················································································································

  init (observer : EBEvent) {
    mObserver = observer
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//   EBWeakEventSet
//----------------------------------------------------------------------------------------------------------------------

struct EBWeakEventSet {

  //····················································································································

  fileprivate var mDictionary = [Int : EBWeakObserverSetElement] ()

  //····················································································································

  mutating func insert (_ inObserver : EBEvent) {
    let address : Int = inObserver.ebObjectIndex
    self.mDictionary [address] = EBWeakObserverSetElement (observer:inObserver)
  }

  //····················································································································

  mutating func remove (_ inObserver : EBEvent) {
    let address : Int = inObserver.ebObjectIndex
    self.mDictionary [address] = nil
  }

  //····················································································································

  mutating func apply (_ inFunction : (_ : EBEvent) -> Void) {
    for (key, entry) in self.mDictionary {
      if let observer = entry.observer {
        inFunction (observer)
      }else{
        self.mDictionary [key] = nil
      }
    }
  }

  //····················································································································

  var count : Int {
    var n = 0
    for (_, entry) in self.mDictionary {
      if entry.observer != nil {
        n += 1
      }
    }
    return n
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
