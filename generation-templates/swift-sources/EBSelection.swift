//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBSelection
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum EBSelection <T> : Equatable where T : Equatable {

  //····················································································································

  case empty
  case multiple
  case single (T)

  //····················································································································

  static func == (lhs : EBSelection <T>, rhs : EBSelection <T>) -> Bool {
    switch (lhs, rhs) {
    case (.empty, .empty) :
      return true
    case (.multiple, .multiple) :
      return true
    case (.single (let left), .single (let right)) :
      return left == right
    default :
      return false
    }
  }

  //····················································································································

  func kind () -> PropertyKind {
    switch self {
    case .empty : return .empty
    case .multiple : return .multiple
    case .single : return .single
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

fileprivate func compareIntProperties (left : EBSelection <Int>,
                                       right : EBSelection <Int>,
                                       function : (Int, Int) -> Bool) -> EBSelection <Bool> {
  switch left {
  case .empty :
    return .empty
  case .multiple :
    switch right {
    case .empty :
      return .empty
    case .multiple, .single :
      return .multiple
    }
  case .single (let vg) :
    switch right {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let vd) :
      return .single (function (vg, vd))
    }
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func > (left : EBSelection <Int>, right : EBSelection <Int>) -> EBSelection <Bool> {
  return compareIntProperties (left: left, right: right) {$0 > $1}
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func >= (left : EBSelection <Int>, right : EBSelection <Int>) -> EBSelection <Bool> {
  return compareIntProperties (left: left, right: right) {$0 >= $1}
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func < (left : EBSelection <Int>, right : EBSelection <Int>) -> EBSelection <Bool> {
  return compareIntProperties (left: left, right: right) {$0 < $1}
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func <= (left : EBSelection <Int>, right : EBSelection<Int>) -> EBSelection <Bool> {
  return compareIntProperties (left: left, right: right) {$0 <= $1}
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func == (left : EBSelection <Int>, right : EBSelection <Int>) -> EBSelection <Bool> {
  return compareIntProperties (left: left, right: right) {$0 == $1}
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func != (left : EBSelection <Int>, right : EBSelection <Int>) -> EBSelection <Bool> {
  return compareIntProperties (left: left, right: right) {$0 != $1}
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

fileprivate func combineBoolProperties (left : EBSelection <Bool>,
                                        right : EBSelection <Bool>,
                                        function : (Bool, Bool) -> Bool) -> EBSelection <Bool> {
  switch left {
  case .empty :
    return .empty
  case .multiple :
    switch right {
    case .empty :
      return .empty
    case .multiple, .single :
      return .multiple
    }
  case .single (let vg) :
    switch right {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let vd) :
      return .single (function (vg, vd))
    }
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func && (left : EBSelection <Bool>, right : EBSelection <Bool>) -> EBSelection <Bool> {
  return combineBoolProperties (left: left, right: right, function: {$0 && $1})
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func || (left : EBSelection <Bool>, right : EBSelection <Bool>) -> EBSelection <Bool> {
  return combineBoolProperties (left: left, right: right, function: {$0 || $1})
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func ^ (left : EBSelection <Bool>, right : EBSelection <Bool>) -> EBSelection <Bool> {
  return combineBoolProperties (left: left, right: right, function: {$0 != $1})
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

prefix func ! (operand : EBSelection <Bool>) -> EBSelection <Bool> {
  switch operand {
  case .empty :
    return .empty
  case .multiple :
    return .multiple
  case .single (let v) :
    return .single (!v)
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
