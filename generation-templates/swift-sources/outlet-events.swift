//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    EBOutletEvent class
//----------------------------------------------------------------------------------------------------------------------

fileprivate var gPendingOutletEventsEx = [EBOutletEvent] ()

//----------------------------------------------------------------------------------------------------------------------

class EBOutletEvent : EBEvent {

  //····················································································································
  //   Properties
  //····················································································································

  final var mEventCallBack : Optional < () -> Void > = nil
  fileprivate final var mEventIsPosted = false

  //····················································································································
  //   postEvent
  //····················································································································

  override func postEvent () {
    if logEvents () {
      if gPendingOutletEventsEx.count == 0 {
        appendMessageString ("Post events\n")
      }
      let str = "  " +  explorerIndexString (self.ebObjectIndex) + self.className + "\n"
      if !self.mEventIsPosted {
        appendMessageString (str)
      }else{ // Event already posted
        appendMessageString (str, color: NSColor.brown)
      }
    }
    if !self.mEventIsPosted {
      self.mEventIsPosted = true
      gPendingOutletEventsEx.append (self)
    }
  }

  //····················································································································
  //   sendUpdateEvent
  //····················································································································

  final func sendUpdateEvent () {
    self.mEventIsPosted = false
    self.mEventCallBack? ()
  }

  //····················································································································
  //  unregister
  //····················································································································

  func unregister () {
    self.mEventCallBack = nil
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    flushOutletEvents
//----------------------------------------------------------------------------------------------------------------------

func flushOutletEvents () {
  if gPendingOutletEventsEx.count > 0 {
    if logEvents () {
      appendMessageString ("Flush outlet events\n", color: NSColor.blue)
    }
//    let startOperationQueue = Date ()
//    let operationQueue = OperationQueue ()
//    for event in gPendingOutletEvents {
//      event.computeAsynchronously (operationQueue)
//    }
//    operationQueue.waitUntilAllOperationsAreFinished ()
//    if LOG_OPERATION_DURATION {
//      let durationMS = Int (Date ().timeIntervalSince (startOperationQueue) * 1000.0)
//      Swift.print ("Compute \(gPendingOutletEvents.count) transient properties: \(durationMS) ms")
//    }
    let startFlushOutletEvent = Date ()
    while gPendingOutletEventsEx.count > 0 {
      let pendingOutletEvents = gPendingOutletEventsEx
      gPendingOutletEventsEx.removeAll ()
      for event in pendingOutletEvents {
        event.mEventIsPosted = false
      }
      for event in pendingOutletEvents {
        if logEvents () {
          let message = "  " +  explorerIndexString (event.ebObjectIndex) + event.className + "\n"
          appendMessageString (message, color: NSColor.blue)
        }
        event.sendUpdateEvent ()
      }
      if gPendingOutletEventsEx.count > 0 && logEvents () {
        let message = String (gPendingOutletEventsEx.count) +  " outlet event(s) posted during flush\n"
        appendMessageString (message, color: NSColor.red)
      }
    }
    if LOG_OPERATION_DURATION {
      let durationFlushMS = Int (Date ().timeIntervalSince (startFlushOutletEvent) * 1000.0)
      Swift.print ("Flush Outlet Events \(durationFlushMS) ms")
    }
    if logEvents () {
      appendMessageString ("--------------------------------------\n", color: NSColor.blue)
    }
  }
}

//----------------------------------------------------------------------------------------------------------------------
//    A P P E N D    T O    T R A N S I E N T    E V E N T    L O G
//----------------------------------------------------------------------------------------------------------------------

func logEvents () -> Bool {
  let theApp = NSApp as! EBApplication
  return theApp.logEvents ()
}

//----------------------------------------------------------------------------------------------------------------------

func appendToTransientEventLog (_ message : String) {
  let theApp = NSApp as! EBApplication
  theApp.appendToTransientEventLog (message)
}

//----------------------------------------------------------------------------------------------------------------------

func appendMessageString (_ message : String) {
  let theApp = NSApp as! EBApplication
  theApp.mTransientEventExplorerTextView?.appendMessageString (message)
}

//----------------------------------------------------------------------------------------------------------------------

func appendMessageString (_ message : String, color : NSColor) {
  let theApp = NSApp as! EBApplication
  theApp.mTransientEventExplorerTextView?.appendMessageString (message, color:color)
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol OutletEventProtocol : AnyObject {
  func postEvent ()
  func updateOutlets ()
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadFaçade <T> : OutletEventProtocol, EBUserClassNameProtocol where T : Equatable {

  //····················································································································

  init (getter inGetter : @escaping () -> EBSelection <T>) {
   self.mGetter = inGetter
   noteObjectAllocation (self)
  }

  //····················································································································

  deinit {
   noteObjectDeallocation (self)
  }

  //····················································································································

  private final var mEvents = [OutletEventProtocol] ()
  private final var mEventHasBeenSent = false

  final func addEBObserver (_ inObserver : OutletEventProtocol) {
    self.mEvents.append (inObserver)
    inObserver.postEvent ()
  }

  final func removeEBObserver (_ inObserver : OutletEventProtocol) {
    inObserver.postEvent ()
    var idx = 0
    while idx < self.mEvents.count {
      if self.mEvents [idx] === inObserver {
        self.mEvents.remove (at: idx)
        idx = self.mEvents.count
      }else{
        idx += 1
      }
    }
  }

  final func postEvent () {
    if !mEventHasBeenSent {
      self.mEventHasBeenSent = true
      for event in self.mEvents {
        event.postEvent ()
      }
//      if self.mOutletCallBacks.count > 0 {
        if gOutletEvents.isEmpty {
          DispatchQueue.main.async { flushPendingOutletEvents () }
        }
        gOutletEvents.append (self)
//      }
    }
  }

  final let mGetter : () -> EBSelection <T>

  final var selection : EBSelection <T> {
    self.mEventHasBeenSent = false
    return self.mGetter ()
  }

  private final var mOutletCallBacks = [ () -> Void]  ()

  final func registerCallBack (_ inCallBack : @escaping () -> Void) {
    self.mOutletCallBacks.append (inCallBack)
    self.postEvent ()
  }

  final func updateOutlets () {
    for callBack in self.mOutletCallBacks {
      callBack ()
    }
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteFaçade <T> : ReadFaçade <T> where T : Equatable {

  private final let mSetter : (T) -> Void

  final func setProperty (_ inValue : T) {
    self.mSetter (inValue)
  }

  init (getter inGetter : @escaping () -> EBSelection <T>, setter inSetter : @escaping (T) -> Void) {
   self.mSetter = inSetter
   super.init (getter: inGetter)
  }
}

//----------------------------------------------------------------------------------------------------------------------

fileprivate var gOutletEvents = [OutletEventProtocol] ()

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    flushPendingOutletEvents
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func flushPendingOutletEvents () {
  if gOutletEvents.count > 0 {
    if logEvents () {
      appendMessageString ("Flush outlet events\n", color: NSColor.blue)
    }
    let startFlushOutletEvent = Date ()
    while gOutletEvents.count > 0 {
      let pendingOutletEvents = gOutletEvents
      gOutletEvents.removeAll ()
      for event in pendingOutletEvents {
        event.updateOutlets ()
      }
//      for event in pendingOutletEvents {
//        if logEvents () {
//          let message = "  " +  explorerIndexString (event.ebObjectIndex) + event.className + "\n"
//          appendMessageString (message, color: NSColor.blue)
//        }
//        event.sendUpdateEvent ()
//      }
      if gOutletEvents.count > 0 && logEvents () {
        let message = String (gOutletEvents.count) +  " outlet event(s) posted during flush\n"
        appendMessageString (message, color: NSColor.red)
      }
    }
    if LOG_OPERATION_DURATION {
      let durationFlushMS = Int (Date ().timeIntervalSince (startFlushOutletEvent) * 1000.0)
      Swift.print ("Flush Outlet Events \(durationFlushMS) ms")
    }
    if logEvents () {
      appendMessageString ("--------------------------------------\n", color: NSColor.blue)
    }
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
