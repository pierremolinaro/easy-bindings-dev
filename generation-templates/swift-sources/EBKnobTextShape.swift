//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    EBTextKnobShape
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBTextKnobShape : EBShape {
  private let mFilledBezierPath : EBBezierPath
  private var mIndex : Int

  //····················································································································
  //  Init
  //····················································································································

  init (_ inString : String,
        _ inOrigin : CGPoint,
        _ inFont : NSFont,
        _ inHorizontalAlignment : EBTextHorizontalAlignment,
        _ inVerticalAlignment : EBTextVerticalAlignment,
        _ inIndex : Int) {
    mIndex = inIndex
    let textAttributes : [NSAttributedString.Key : Any] = [
      NSAttributedString.Key.font : inFont
    ]
    mFilledBezierPath = EBBezierPath (with: inString, at: inOrigin, inHorizontalAlignment, inVerticalAlignment, withAttributes: textAttributes)
    super.init ()
  }

  //····················································································································

  private init (_ inBezierPath : EBBezierPath, _ inIndex : Int) {
    mFilledBezierPath = inBezierPath
    mIndex = inIndex
    super.init ()
  }

  //····················································································································
  //  transformedBy
  //····················································································································

  override func transformed (by inAffineTransform : AffineTransform) -> EBTextKnobShape {
    let result = EBTextKnobShape (self.mFilledBezierPath.transformed (by: inAffineTransform), self.mIndex)
    self.internalTransform (result, by: inAffineTransform)
    return result
  }

  //····················································································································

  private var knobRect : NSRect {
    return self.mFilledBezierPath.bounds.insetBy (dx: -1.0, dy: -1.0)
  }

  //····················································································································
  //   Knob Index
  //····················································································································

  override func knobIndex (at inPoint : NSPoint) -> Int? {
    if self.knobRect.contains (inPoint) {
      return self.mIndex
    }else{
      return super.knobIndex (at: inPoint)
    }
  }

  //····················································································································
  //  Draw Rect
  //····················································································································

  override func draw (_ inView : NSView, _ inDirtyRect: NSRect) {
    if inView.needsToDraw (self.knobRect) {
      NSColor.white.setFill ()
      NSBezierPath.fill (self.knobRect)
//      NSBezierPath.defaultLineWidth = 0.0
//      NSColor.black.setStroke ()
//      NSBezierPath.stroke (self.knobRect)
      NSColor.black.setFill ()
      self.mFilledBezierPath.fill ()
    }
    super.draw (inView, inDirtyRect)
  }

  //····················································································································
  // boundingBox
  //····················································································································

  override internal func internalBoundingBox () -> NSRect {
    return self.knobRect
  }

  //····················································································································
  //   Contains point
  //····················································································································

  override func contains (point inPoint : NSPoint) -> Bool {
    var result = super.contains (point: inPoint)
    if !result {
      result = self.mFilledBezierPath.bounds.contains (inPoint)
    }
    return result
  }

  //····················································································································
  //   intersects
  //····················································································································

  override func intersects (rect inRect : NSRect) -> Bool {
    var result = super.intersects (rect: inRect)
    if !result {
      result = self.mFilledBezierPath.bounds.intersects (inRect)
    }
    return result
  }

  //····················································································································
  /// The hash value.
  ///
  /// Hash values are not guaranteed to be equal across different executions of
  /// your program. Do not save hash values to use during a future execution.
  //····················································································································

  override func hash (into hasher: inout Hasher) {
    super.hash (into: &hasher)
    self.mFilledBezierPath.hash (into: &hasher)
    self.mIndex.hash (into: &hasher)
  }

  //····················································································································
  //   isEqualToShape
  //····················································································································

  override func isEqualToShape (_ inOperand : EBShape) -> Bool {
    var equal = false
    if let operand = inOperand as? EBTextKnobShape {
      equal = self.mFilledBezierPath == operand.mFilledBezierPath
      if equal {
        equal = self.mIndex == operand.mIndex
      }
      if equal {
        equal = super.isEqualToShape (operand)
      }
    }
    return equal
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
