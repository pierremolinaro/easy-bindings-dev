//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extension EBView : NSDraggingSource {

  //····················································································································

  func draggingSession (_ session: NSDraggingSession,
                        sourceOperationMaskFor context: NSDraggingContext) -> NSDragOperation {
    return .generic
  }

  //····················································································································

  internal func ebStartDragging (with inEvent : NSEvent, dragType : NSPasteboard.PasteboardType) {
    let selectedObjectSet = self.viewController?.selectedGraphicObjectSet ?? Set ()
 //--- Build dragging item
    let pasteboardItem = NSPasteboardItem ()
    let draggingItem = NSDraggingItem (pasteboardWriter: pasteboardItem)
  //--- Buils image ans data
    let objectArray = self.viewController?.objectArray ?? []
    let displayShape = EBShape ()
    var objectDictionaryArray = [NSDictionary] ()
    for object in objectArray {
      if selectedObjectSet.contains (object), let objectShape = object.objectDisplay {
        displayShape.append (objectShape)
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        objectDictionaryArray.append (d)
      }
    }
  //--- Transform image by scaling and translating
    let mouseDownLocation = self.convert (inEvent.locationInWindow, from:nil).aligned (onGrid: SYMBOL_GRID_IN_COCOA_UNIT)
    let transform = NSAffineTransform ()
    transform.scale (by: self.actualScale ())
    transform.translateX (by: -displayShape.boundingBox.origin.x, yBy: -displayShape.boundingBox.origin.y)
    let finalShape = displayShape.transformedBy (transform)
  //--- Build image
    let rect = finalShape.boundingBox
    let imagePDFData = buildPDFimage (frame: rect, shape: finalShape)
    let image = NSImage (data: imagePDFData)
  //--- Move image rect origin to mouse click location
    Swift.print ("\(mouseDownLocation) | \(displayShape.boundingBox)")
    var p = mouseDownLocation
//    var p = displayShape.boundingBox.origin //
//      p.x -= displayShape.boundingBox.origin.x
//      p.y -= displayShape.boundingBox.origin.y
    p.x -= displayShape.boundingBox.size.width  / 2.0
    p.y -= displayShape.boundingBox.size.height / 2.0
    let draggingFrame = NSRect (origin: p, size: rect.size)
  //--- Associated data
    let dataDictionary : NSDictionary = [
      "OBJECTS" : objectDictionaryArray,
      "START" : NSStringFromPoint (mouseDownLocation)
    ]
    pasteboardItem.setPropertyList (dataDictionary, forType: dragType)
  //--- Set dragged image
    draggingItem.setDraggingFrame (draggingFrame, contents: image)
  //--- Begin
    self.beginDraggingSession (with: [draggingItem], event: inEvent, source: self)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
