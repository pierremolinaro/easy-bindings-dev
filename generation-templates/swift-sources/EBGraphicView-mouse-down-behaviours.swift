//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------

class DefaultBehaviourOnMouseDown {

  //····················································································································

  public func onMouseDraggedOrModifierFlagsChanged (_ inMouseDraggedUnalignedLocation : NSPoint,
                                                    _ inModifierFlags : NSEvent.ModifierFlags,
                                                    _ inGraphicView : EBGraphicView) {
  }

  //····················································································································

  public func abortOperation (_ inGraphicView : EBGraphicView) {
  }

  //····················································································································

  public func onMouseUp (_ inUnalignedMouseUpLocation : NSPoint,
                         _ inGraphicView : EBGraphicView) {
  }

  //····················································································································
}

//----------------------------------------------------------------------------------------------------------------------

final class MouseDownOutsideAnyObjectBehaviour : DefaultBehaviourOnMouseDown { // Mouse down without any modifier, outside any object

  //····················································································································

  private let mMouseDownUnalignedLocation : NSPoint

  //····················································································································

  public init (_ inUnalignedLocation : NSPoint, _ inViewController : EBGraphicViewControllerProtocol) {
    self.mMouseDownUnalignedLocation = inUnalignedLocation
    inViewController.clearSelection ()
  }

  //····················································································································

  public override func onMouseDraggedOrModifierFlagsChanged (_ inMouseDraggedUnalignedLocation : NSPoint,
                                                             _ inModifierFlags : NSEvent.ModifierFlags,
                                                             _ inGraphicView : EBGraphicView) {
    let r = NSRect (point: self.mMouseDownUnalignedLocation, point: inMouseDraggedUnalignedLocation)
    inGraphicView.mSelectionRectangle = r
    let indexSet : Set <Int> = inGraphicView.indexesOfObjects (intersecting: r)
    inGraphicView.viewController?.setSelection (objectsWithIndexes: Array (indexSet))
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------

final class MouseDownOnObjectBehaviour : DefaultBehaviourOnMouseDown { // Mouse down without any modifier, on an object

  //····················································································································

  private var mLastMouseDraggedAlignedLocation : CanariPoint
  private let mObjectIndex : Int
  private let mPossibleKnobIndex : Int? //  knob index
  private var mBeginUndoGroupingDone = false

  //····················································································································

  public init (_ inUnalignedLocation : NSPoint,
               objectIndex inObjectIndex : Int,
               possibleKnobIndex inPossibleKnobIndex : Int?,
               _ inGraphicView : EBGraphicView,
               _ inViewController : EBGraphicViewControllerProtocol) {
    self.mLastMouseDraggedAlignedLocation = inUnalignedLocation.canariPointAligned (onCanariGrid: inGraphicView.mouseGridInCanariUnit)
    self.mObjectIndex = inObjectIndex
    let objectWasSelected = inViewController.selectedIndexesSet.contains (inObjectIndex)
    if !objectWasSelected {
      inViewController.setSelection (objectsWithIndexes: [inObjectIndex])
      self.mPossibleKnobIndex = inGraphicView.knobIndex (ofSelectedObjectIndex: inObjectIndex, at: inUnalignedLocation)
    }else{
      self.mPossibleKnobIndex = inPossibleKnobIndex
    }
  }

  //····················································································································

  public override func onMouseDraggedOrModifierFlagsChanged (_ inMouseDraggedUnalignedLocation : NSPoint,
                                                             _ inModifierFlags : NSEvent.ModifierFlags,
                                                             _ inGraphicView : EBGraphicView) {
    let mouseDraggedCanariAlignedLocation = inMouseDraggedUnalignedLocation.canariPointAligned (onCanariGrid: inGraphicView.mouseGridInCanariUnit)
    let proposedTranslation = CanariPoint (
      x: mouseDraggedCanariAlignedLocation.x - self.mLastMouseDraggedAlignedLocation.x,
      y: mouseDraggedCanariAlignedLocation.y - self.mLastMouseDraggedAlignedLocation.y
    )
    if !self.mBeginUndoGroupingDone {
      self.mBeginUndoGroupingDone = true
      inGraphicView.viewController?.ebUndoManager?.beginUndoGrouping ()
    }
    inGraphicView.guideFor (objectIndexes: [self.mObjectIndex])
    inGraphicView.drag (
      possibleKnob: inModifierFlags.contains(.command) ? nil : self.mPossibleKnobIndex,
      objectIndex: self.mObjectIndex,
      proposedTranslation,
      self.mLastMouseDraggedAlignedLocation
    )
    self.mLastMouseDraggedAlignedLocation = mouseDraggedCanariAlignedLocation
  }

  //····················································································································

  override public func onMouseUp (_ inUnalignedMouseUpLocation : NSPoint,
                                  _ inGraphicView : EBGraphicView) {
    if self.mBeginUndoGroupingDone {
      inGraphicView.viewController?.ebUndoManager?.endUndoGrouping ()
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------

final class ShiftMouseDownBehaviour : DefaultBehaviourOnMouseDown { // Mouse down without only shift modifier

  //····················································································································

  private let mMouseDownUnalignedLocation : NSPoint
  private let mSelectedObjectIndexSet : Set <Int>
  private let mPossibleObjectIndex : Int?

  //····················································································································

  public init (_ inUnalignedLocation : NSPoint, _ inPossibleObjectIndex : Int?, _ inViewController : EBGraphicViewControllerProtocol) {
    self.mMouseDownUnalignedLocation = inUnalignedLocation
    self.mSelectedObjectIndexSet = inViewController.selectedIndexesSet
    self.mPossibleObjectIndex = inPossibleObjectIndex
    if let objectIndex = inPossibleObjectIndex {
      inViewController.setSelection (objectsWithIndexes: Array (self.mSelectedObjectIndexSet.symmetricDifference ([objectIndex])))
    }
  }

  //····················································································································

  public override func onMouseDraggedOrModifierFlagsChanged (_ inMouseDraggedUnalignedLocation : NSPoint,
                                                             _ inModifierFlags : NSEvent.ModifierFlags,
                                                             _ inGraphicView : EBGraphicView) {
    let r = NSRect (point: self.mMouseDownUnalignedLocation, point: inMouseDraggedUnalignedLocation)
    inGraphicView.mSelectionRectangle = r
    let indexSet : Set <Int> = inGraphicView.indexesOfObjects (intersecting: r)
    inGraphicView.viewController?.setSelection (objectsWithIndexes: Array (indexSet.symmetricDifference (self.mSelectedObjectIndexSet)))
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------

final class OptionMouseDownBehaviour : DefaultBehaviourOnMouseDown { // Mouse down without only option modifier

  //····················································································································

  private var mOperationInProgress : Bool

  //····················································································································

  public init (_ inUnalignedLocation : NSPoint,
               _ inGraphicView : EBGraphicView,
               _ inViewController : EBGraphicViewControllerProtocol) {
    self.mOperationInProgress = true
    inViewController.ebUndoManager?.beginUndoGrouping ()
    inGraphicView.mStartOptionMouseDownCallback? (inUnalignedLocation)
  }

  //····················································································································

  public override func onMouseDraggedOrModifierFlagsChanged (_ inMouseDraggedUnalignedLocation : NSPoint,
                                                             _ inModifierFlags : NSEvent.ModifierFlags,
                                                             _ inGraphicView : EBGraphicView) {
    if self.mOperationInProgress {
      inGraphicView.mContinueOptionMouseDraggedCallback? (inMouseDraggedUnalignedLocation, inModifierFlags)
    }
  }

  //····················································································································

  override public func abortOperation (_ inGraphicView : EBGraphicView) {
    if self.mOperationInProgress {
      self.mOperationInProgress = false
      inGraphicView.mAbortOptionMouseOperationCallback? ()
      inGraphicView.viewController?.ebUndoManager?.endUndoGrouping ()
      inGraphicView.viewController?.ebUndoManager?.undo ()
    }
  }

  //····················································································································

  override public func onMouseUp (_ inUnalignedMouseUpLocation : NSPoint,
                                  _ inGraphicView : EBGraphicView) {
    if self.mOperationInProgress {
      let accepts = inGraphicView.mStopOptionMouseUpCallback? (inUnalignedMouseUpLocation) ?? true
      inGraphicView.viewController?.ebUndoManager?.endUndoGrouping ()
      if !accepts {
        inGraphicView.viewController?.ebUndoManager?.undo ()
      }
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
