//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

fileprivate let OPAQUE_LAYERS = true ;
fileprivate let DRAWS_ASYNCHRONOUSLY = true ;

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBViewControllerProtocol
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc protocol EBViewControllerProtocol {

  var objectCount : Int { get }

  func mouseDown (with inEvent: NSEvent, objectIndex inObjectIndex : Int)
  func mouseDragged (with inEvent : NSEvent)
  func mouseUp (with inEvent : NSEvent)

  func keyDown (with inEvent: NSEvent)

  func selectAllObjects ()

  func canBringForward () -> Bool
  func bringForward ()

  func canBringToFront () -> Bool
  func bringToFront ()

  func canSendBackward () -> Bool
  func sendBackward ()

  func canSendToBack () -> Bool
  func sendToBack ()

  var      arrowKeyMagnitude : CGFloat { get set }
  var shiftArrowKeyMagnitude : CGFloat { get set }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBView
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBView) class EBView : NSView, EBUserClassNameProtocol {

  //····················································································································

  required init? (coder: NSCoder) {
    super.init (coder:coder)
    noteObjectAllocation (self)
  }

  //····················································································································

  override init (frame:NSRect) {
    super.init (frame:frame)
    noteObjectAllocation (self)
  }
  
  //····················································································································

  deinit {
    noteObjectDeallocation (self)
  }

  //····················································································································
  //  Properties
  //····················································································································

   private weak var mViewController : EBViewControllerProtocol? = nil
   fileprivate var mObjectLayer = CALayer ()
   private var mObjectSelectionLayer = CALayer ()

  //····················································································································
  //  awakeFromNib
  //····················································································································

  final override func awakeFromNib () {
    self.layer?.drawsAsynchronously = DRAWS_ASYNCHRONOUSLY
    self.layer?.isOpaque = OPAQUE_LAYERS

    self.mObjectLayer.drawsAsynchronously = DRAWS_ASYNCHRONOUSLY
    self.mObjectLayer.isOpaque = OPAQUE_LAYERS
    self.layer?.addSublayer (mObjectLayer)
    self.layer?.addSublayer (mObjectSelectionLayer)
  }

  //····················································································································
  //    set controller
  //····················································································································

  func set (controller inController : EBViewControllerProtocol?) {
    mViewController = inController
  }

  //····················································································································
  //    Object Layer
  //····················································································································

  private var mObjectLayerController : Controller_EBView_objectLayer?

  func bind_objectLayer (_ layer:EBReadOnlyProperty_CALayer, file:String, line:Int) {
    mObjectLayerController = Controller_EBView_objectLayer (layer:layer, outlet:self)
  }

  //····················································································································

  func unbind_objectLayer () {
    mObjectLayerController?.unregister ()
    mObjectLayerController = nil
  }

  //····················································································································
  //    Selection Layer
  //····················································································································

  var objectSelectionLayer : CALayer { return mObjectSelectionLayer }

  //····················································································································
  //    Selection Rectangle Layer
  //····················································································································

  var selectionRectangleLayer : EBShapeLayer? = nil {
    didSet {
      if let oldSelectionRectangleLayer = oldValue {
        self.setNeedsDisplay (oldSelectionRectangleLayer.boundingBox)
      }
      if let newSelectionRectangleLayer = selectionRectangleLayer {
        self.setNeedsDisplay (newSelectionRectangleLayer.boundingBox)
      }
    }
  }

  //····················································································································

  func indexesOfObjects (intersecting inRect : CGRect) -> Set <Int> {
    var result = Set <Int> ()
    for object in self.mObjects {
      if (object.userIndex >= 0) && object.intersects (inRect) {
        result.insert (object.userIndex)
      }
    }
    return result
  }

  //····················································································································
  // Mouse Events
  //····················································································································

  override func mouseDown (with inEvent: NSEvent) {
    let mouseDownLocation = self.convert (inEvent.locationInWindow, from:nil)
    if let result = self.mObjectLayer.findLayer (at: mouseDownLocation) {
      if let name = result.name, let idx = Int (name) {
        mViewController?.mouseDown (with:inEvent, objectIndex:idx) // No object
      }else{
        mViewController?.mouseDown (with:inEvent, objectIndex:-1) // No object
      }
    }else{
      mViewController?.mouseDown (with: inEvent, objectIndex: -1) // No object
    }
    super.mouseDown (with: inEvent)
  }

  //····················································································································

  override func mouseDragged (with inEvent : NSEvent) {
    mViewController?.mouseDragged (with: inEvent)
  }

  //····················································································································

  override func mouseUp (with inEvent : NSEvent) {
    mViewController?.mouseUp (with: inEvent)
  }

  //····················································································································
  // key Events
  //····················································································································

  override func keyDown (with inEvent: NSEvent) {
    mViewController?.keyDown (with:inEvent)
  }

  //····················································································································
  // Menu Events
  //····················································································································

  override func validateMenuItem (_ inMenuItem : NSMenuItem) -> Bool {
    let validate : Bool
    let action = inMenuItem.action
    if action == #selector (EBView.selectAll(_:)) {
      validate = (mViewController?.objectCount ?? 0) > 0
    }else if action == #selector (EBView.bringToFront(_:)) {
      validate = mViewController?.canBringToFront () ?? false
    }else if action == #selector (EBView.bringForward(_:)) {
      validate = mViewController?.canBringForward () ?? false
    }else if action == #selector (EBView.sendToBack(_:)) {
      validate = mViewController?.canSendToBack () ?? false
    }else if action == #selector (EBView.sendBackward(_:)) {
      validate = mViewController?.canSendBackward () ?? false
    }else{
      validate = super.validateMenuItem (inMenuItem)
    }
    // NSLog ("VALIDATE \(action) -> \(validate)")
    return validate
  }

  //····················································································································

  override func selectAll (_ : Any?) {
    mViewController?.selectAllObjects ()
  }

  //····················································································································

  func bringToFront (_ : Any?) {
    mViewController?.bringToFront ()
  }

  //····················································································································

  func bringForward (_ : Any?) {
    mViewController?.bringForward ()
  }

  //····················································································································

  func sendToBack (_ : Any?) {
    mViewController?.sendToBack ()
  }

  //····················································································································

  func sendBackward (_ : Any?) {
    mViewController?.sendBackward ()
  }

  //····················································································································
  //    Arrow Key Magnitude
  //····················································································································

  private var mArrowKeyMagnitudeController : Controller_EBView_arrowKeyMagnitude?

  func bind_arrowKeyMagnitude (_ property:EBReadOnlyProperty_CGFloat, file:String, line:Int) {
    mArrowKeyMagnitudeController = Controller_EBView_arrowKeyMagnitude (property, outlet:self)
  }

  func unbind_arrowKeyMagnitude () {
    mArrowKeyMagnitudeController?.unregister ()
    mArrowKeyMagnitudeController = nil
  }

  //····················································································································

  func set (arrowKeyMagnitude : CGFloat) {
    mViewController?.arrowKeyMagnitude = arrowKeyMagnitude
  }

  //····················································································································
  //    Shift Arrow Key Magnitude
  //····················································································································

  private var mShiftArrowKeyMagnitudeController : Controller_EBView_shiftArrowKeyMagnitude?

  func bind_shiftArrowKeyMagnitude (_ property:EBReadOnlyProperty_CGFloat, file:String, line:Int) {
    mShiftArrowKeyMagnitudeController = Controller_EBView_shiftArrowKeyMagnitude (property, outlet:self)
  }

  func unbind_shiftArrowKeyMagnitude () {
    mShiftArrowKeyMagnitudeController?.unregister ()
    mShiftArrowKeyMagnitudeController = nil
  }

  //····················································································································

  func set (shiftArrowKeyMagnitude : CGFloat) {
    mViewController?.shiftArrowKeyMagnitude = shiftArrowKeyMagnitude
  }

  //····················································································································
  //    $objects binding
  //····················································································································

  private var mObjectsController : Controller_EBView_objects?

  func bind_objects (_ objects:EBReadOnlyProperty_EBShapeLayerArray, file:String, line:Int) {
    mObjectsController = Controller_EBView_objects (objects, outlet:self)
  }

  func unbind_objects () {
    mObjectsController?.unregister ()
    mObjectsController = nil
  }

  //····················································································································

   private var mObjects = [EBShapeLayer] ()

  //····················································································································

  func setObjects (_ inObjects : [EBShapeLayer]) {
    var invalidRect = NSZeroRect
    let commonCount = min (self.mObjects.count, inObjects.count)
    var idx = 0
    while idx < commonCount {
      let currentObjet = self.mObjects [idx]
      let newObject = inObjects [idx]
      if !newObject.sameDisplay(as: currentObjet) {
        invalidRect = invalidRect.union (currentObjet.boundingBox)
        invalidRect = invalidRect.union (newObject.boundingBox)
      }
      idx += 1
    }
  //--- Enter in invalid rect removed objects
    while idx < self.mObjects.count {
      invalidRect = invalidRect.union (self.mObjects [idx].boundingBox)
      idx += 1
    }
  //--- Enter in invalid rect new objects
    idx = commonCount
    while idx < inObjects.count {
      invalidRect = invalidRect.union (inObjects [idx].boundingBox)
      idx += 1
    }
    self.mObjects = inObjects
    self.setNeedsDisplay (invalidRect)
  }

  //····················································································································
  //  Draw Dirty rect
  //····················································································································

  override func draw (_ inDirtyRect: NSRect) {
    for object in self.mObjects {
      object.draw (inDirtyRect)
    }
    self.selectionRectangleLayer?.draw (inDirtyRect)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Controller_EBView_objectLayer
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class Controller_EBView_objectLayer : EBSimpleController {

  private let mLayer : EBReadOnlyProperty_CALayer
  private let mOutlet : EBView

  //····················································································································

  init (layer : EBReadOnlyProperty_CALayer, outlet : EBView) {
    mLayer = layer
    mOutlet = outlet
    super.init (observedObjects:[layer], outlet:outlet)
    self.eventCallBack = { [weak self] in self?.updateOutlet () }
  }

  //····················································································································

  private func updateOutlet () {
    switch mLayer.prop {
    case .empty :
      mOutlet.mObjectLayer.sublayers = nil
    case .single (let v) :
      mOutlet.mObjectLayer.sublayers = [v]
    case .multiple :
      mOutlet.mObjectLayer.sublayers = nil
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Controller_EBView_arrowKeyMagnitude
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class Controller_EBView_arrowKeyMagnitude : EBSimpleController {

  private let mProperty : EBReadOnlyProperty_CGFloat
  private let mOutlet : EBView

  //····················································································································

  init (_ property : EBReadOnlyProperty_CGFloat, outlet : EBView) {
    mProperty = property
    mOutlet = outlet
    super.init (observedObjects:[property], outlet:outlet)
    self.eventCallBack = { [weak self] in self?.updateOutlet () }
  }

  //····················································································································

  private func updateOutlet () {
    switch mProperty.prop {
    case .empty :
      break
    case .single (let v) :
      mOutlet.set (arrowKeyMagnitude:v)
    case .multiple :
      break
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Controller_EBView_shiftArrowKeyMagnitude
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class Controller_EBView_shiftArrowKeyMagnitude : EBSimpleController {

  private let mProperty : EBReadOnlyProperty_CGFloat
  private let mOutlet : EBView

  //····················································································································

  init (_ property : EBReadOnlyProperty_CGFloat, outlet : EBView) {
    mProperty = property
    mOutlet = outlet
    super.init (observedObjects:[property], outlet:outlet)
    self.eventCallBack = { [weak self] in self?.updateOutlet () }
  }

  //····················································································································

  private func updateOutlet () {
    switch mProperty.prop {
    case .empty :
      break
    case .single (let v) :
      mOutlet.set (shiftArrowKeyMagnitude:v)
    case .multiple :
      break
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Controller_EBView_objects
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class Controller_EBView_objects : EBSimpleController {

  private let mLayer : EBReadOnlyProperty_EBShapeLayerArray
  private let mOutlet : EBView

  //····················································································································

  init (_ layer : EBReadOnlyProperty_EBShapeLayerArray, outlet : EBView) {
    mLayer = layer
    mOutlet = outlet
    super.init (observedObjects:[layer], outlet:outlet)
    self.eventCallBack = { [weak self] in self?.updateOutlet () }
  }

  //····················································································································

  private func updateOutlet () {
    switch mLayer.prop {
    case .empty :
      mOutlet.setObjects ([])
    case .single (let v) :
      mOutlet.setObjects (v.objects)
    case .multiple :
      mOutlet.setObjects ([])
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
