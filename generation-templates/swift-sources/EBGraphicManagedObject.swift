//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  EBGraphicManagedObject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBGraphicManagedObject : EBManagedObject {

  //····················································································································
  //   Transient property: selectionDisplay
  //····················································································································

  var selectionDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································

  var selectionDisplay_property_selection : EBSelection <EBShape> {
    return self.selectionDisplay_property.prop
  }

  //····················································································································

  var selectionDisplay : EBShape? {
    switch self.selectionDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: objectDisplay
  //····················································································································

  var objectDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································

  var objectDisplay_property_selection : EBSelection <EBShape> {
    return self.objectDisplay_property.prop
  }

  //····················································································································

  var objectDisplay : EBShape? {
    switch self.objectDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //  Translation
  //  @objc dynamic before func is required in order to allow function overriding in extensions
  //  Only types that can be represented in Objective-C are accepted
  //····················································································································

  @objc dynamic func acceptedTranslation (xBy inDx: Int, yBy inDy: Int) -> OCCanariPoint {
    return OCCanariPoint (x: inDx, y: inDy)
  }

  //····················································································································

  @objc dynamic func acceptToTranslate (xBy inDx: Int, yBy inDy: Int) -> Bool {
    return false
  }

  //····················································································································

  @objc dynamic func translate (xBy inDx: Int, yBy inDy: Int) {
  }

  //····················································································································
  //  Knob
  //  @objc dynamic before func is required in order to allow function overriding in extensions
  //  Only types that can be represented in Objective-C are accepted
  //····················································································································

  @objc dynamic func canMove (knob inKnobIndex : Int, xBy inDx: Int, yBy inDy: Int) -> OCCanariPoint {
    return OCCanariPoint (x: inDx, y: inDy)
  }

  //····················································································································

  @objc dynamic func move (knob inKnobIndex: Int, xBy inDx: Int, yBy inDy: Int) {
  }

  //····················································································································
  //  Snap to grid
  //  @objc dynamic before func is required in order to allow function overriding in extensions
  //  Only types that can be represented in Objective-C are accepted
  //····················································································································

  @objc dynamic func snapToGrid (_ inGrid : Int) {
  }

  //····················································································································

  @objc dynamic func canSnapToGrid (_ inGrid : Int) -> Bool {
    return false
  }

  //····················································································································
  //  HORIZONTAL FLIP
  //  @objc dynamic before func is required in order to allow function overriding in extensions
  //  Only types that can be represented in Objective-C are accepted
  //····················································································································

  @objc dynamic func flipHorizontally () {
  }

  //····················································································································

  @objc dynamic func canFlipHorizontally () -> Bool {
    return false
  }

  //····················································································································
  //  VERTICAL FLIP
  //  @objc dynamic before func is required in order to allow function overriding in extensions
  //  Only types that can be represented in Objective-C are accepted
  //····················································································································

  @objc dynamic func flipVertically () {
  }

  //····················································································································

  @objc dynamic func canFlipVertically () -> Bool {
    return false
  }

  //····················································································································
  //  ROTATE 90 CLOCKWISE
  //  @objc dynamic before func is required in order to allow function overriding in extensions
  //  Only types that can be represented in Objective-C are accepted
  //····················································································································

  @objc dynamic func rotate90Clockwise () {
  }

  //····················································································································

  @objc dynamic func canRotate90Clockwise () -> Bool {
    return false
  }

  //····················································································································
  //  ROTATE 90 COUNTER CLOCKWISE
  //  @objc dynamic before func is required in order to allow function overriding in extensions
  //  Only types that can be represented in Objective-C are accepted
  //····················································································································

  @objc dynamic func rotate90CounterClockwise () {
  }

  //····················································································································

  @objc dynamic func canRotate90CounterClockwise () -> Bool {
    return false
  }

  //····················································································································
  //  COPY AND PASTE
  //  @objc dynamic before func is required in order to allow function overriding in extensions
  //  Only types that can be represented in Objective-C are accepted
  //····················································································································

  @objc dynamic func canCopyAndPaste () -> Bool {
    return false
  }

  //····················································································································

  @objc dynamic func operationAfterPasting () {
  }

  //····················································································································
  //  Alignment Points
  //  @objc dynamic before func is required in order to allow function overriding in extensions
  //  Only types that can be represented in Objective-C are accepted
  //····················································································································

  @objc dynamic func alignmentPoints () -> OCCanariPointArray {
    return OCCanariPointArray ()
  }

  //····················································································································
  //  Can be deleted
  //  @objc dynamic before func is required in order to allow function overriding in extensions
  //  Only types that can be represented in Objective-C are accepted
  //····················································································································

  @objc dynamic func canBeDeleted () -> Bool {
    return true
  }

  //····················································································································

  @objc dynamic func operationAfterRemoving () {
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc class OCCanariPoint : EBObject {

  //····················································································································

  let x : Int
  let y : Int

  //····················································································································

  init (x inX : Int, y inY : Int) {
    x = inX
    y = inY
    super.init ()
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc class OCCanariPointArray : EBObject {

  //····················································································································

  var points = [CanariPoint] ()

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
