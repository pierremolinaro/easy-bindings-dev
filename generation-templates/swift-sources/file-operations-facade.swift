//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//  EBManagedDocumentFileFormat
//----------------------------------------------------------------------------------------------------------------------

enum EBManagedDocumentFileFormat {
  case binary
  case textual
}

//----------------------------------------------------------------------------------------------------------------------
//  EBDocumentData
//----------------------------------------------------------------------------------------------------------------------

struct EBDocumentData {
  let documentMetadataStatus : UInt8
  let documentMetadataDictionary : [String : Any]
  let documentRootObject : EBManagedObject
  let documentFileFormat : EBManagedDocumentFileFormat
}

//----------------------------------------------------------------------------------------------------------------------
//  EBDocumentRootObjectDictionary
//----------------------------------------------------------------------------------------------------------------------

typealias EBDocumentRootObjectDictionary = [String : Any]

//----------------------------------------------------------------------------------------------------------------------
//     loadEasyBindingFile fromURL
//----------------------------------------------------------------------------------------------------------------------

func loadEasyBindingFile (fromURL inURL: URL) throws -> EBDocumentData {
  let data = try Data (contentsOf: inURL)
  return try loadEasyBindingFile (fromData: data, undoManager: nil)
}

//----------------------------------------------------------------------------------------------------------------------
//     loadEasyBindingFile
//----------------------------------------------------------------------------------------------------------------------

func loadEasyBindingFile (fromData inData: Data, undoManager inUndoManager : EBUndoManager?) throws -> EBDocumentData {
//---- Define input data scanner
  var dataScanner = EBDataScanner (data: inData)
//--- Check Signature
  if dataScanner.testString (string: PM_BINARY_FORMAT_SIGNATURE) {
    return try loadEasyBindingBinaryFile (inUndoManager, from: &dataScanner)
  }else if dataScanner.testString (string: PM_TEXTUAL_FORMAT_SIGNATURE) {
    return try loadEasyBindingTextFile (inUndoManager, from: &dataScanner)
  }else{
    let dictionary = [
      "Cannot Open Document" : NSLocalizedDescriptionKey,
      "The file has an invalid format" : NSLocalizedRecoverySuggestionErrorKey
    ]
    throw NSError (domain: Bundle.main.bundleIdentifier!, code: 1, userInfo: dictionary)
  }
}

//----------------------------------------------------------------------------------------------------------------------
//     loadEasyRootObjectDictionary
//----------------------------------------------------------------------------------------------------------------------

func loadEasyRootObjectDictionary (from inData : Data) throws -> EBDocumentRootObjectDictionary {
  var dataScanner = EBDataScanner (data: inData)
  if dataScanner.testString (string: PM_BINARY_FORMAT_SIGNATURE) {
    return try loadEasyRootObjectDictionary (fromBinaryDataScanner: &dataScanner)
  }else if dataScanner.testString (string: PM_TEXTUAL_FORMAT_SIGNATURE) {
    return try loadEasyRootObjectDictionary (fromTextDataScanner: &dataScanner)
  }else{
    let dictionary = [
      "Cannot Open Document" : NSLocalizedDescriptionKey,
      "The file has an invalid format" : NSLocalizedRecoverySuggestionErrorKey
    ]
    throw NSError (domain: Bundle.main.bundleIdentifier!, code: 1, userInfo: dictionary)
  }
}

//----------------------------------------------------------------------------------------------------------------------
//     dataForSaveOperation
//----------------------------------------------------------------------------------------------------------------------

func dataForSaveOperation (from inDocumentData : EBDocumentData) throws -> Data {
  switch inDocumentData.documentFileFormat {
  case .textual :
    return try dataForTextualSaveOperation (from: inDocumentData)
  case .binary :
    return try dataForBinarySaveOperation (from: inDocumentData)
  }
}

//----------------------------------------------------------------------------------------------------------------------
//   save
//----------------------------------------------------------------------------------------------------------------------

func save (documentData inDocumentData : EBDocumentData, toURL inURL : URL) throws {
  let data = try dataForSaveOperation (from: inDocumentData)
  try data.write(to: inURL)
}

//----------------------------------------------------------------------------------------------------------------------
