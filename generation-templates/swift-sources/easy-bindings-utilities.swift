//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  Extension NSBezierPath
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extension NSBezierPath {

  //····················································································································
  // https://stackoverflow.com/questions/1815568/how-can-i-convert-nsbezierpath-to-cgpath

  public var cgPath: CGPath {
    let path = CGMutablePath ()
    var points = [CGPoint] (repeating: .zero, count: 3)
    for idx in 0 ..< self.elementCount {
      let type = self.element (at: idx, associatedPoints: &points)
      switch type {
      case .moveTo:
        path.move (to: points[0])
      case .lineTo:
        path.addLine (to: points[0])
      case .curveTo:
        path.addCurve (to: points[2], control1: points[0], control2: points[1])
      case .closePath:
        path.closeSubpath ()
      }
    }
    return path
  }

  //····················································································································

  public var pathByStroking : CGPath {
    let lineCap : CGLineCap
    switch self.lineCapStyle {
    case .butt : lineCap = .butt
    case .round : lineCap = .round
    case .square : lineCap = .square
    }
    let lineJoin : CGLineJoin
    switch self.lineJoinStyle {
    case .bevel : lineJoin = .bevel
    case .miter : lineJoin = .miter
    case .round : lineJoin = .round
    }
    return self.cgPath.copy (
      strokingWithWidth: self.lineWidth,
      lineCap: lineCap,
      lineJoin: lineJoin,
      miterLimit: self.miterLimit
    )
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  String path utilities
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extension String {

  //····················································································································
  
  var lastPathComponent : String { return (self as NSString).lastPathComponent }

  //····················································································································
  
  var deletingPathExtension : String { return (self as NSString).deletingPathExtension }

  //····················································································································
  
  var pathExtension : String { return (self as NSString).pathExtension }

  //····················································································································

  var deletingLastPathComponent : String { return (self as NSString).deletingLastPathComponent }

  //····················································································································

  func appendingPathComponent (_ path : String) -> String {
    return (self as NSString).appendingPathComponent (path)
  }
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  EBSignatureObserverProtocol
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBSignatureObserverProtocol) protocol EBSignatureObserverProtocol {
  func clearSignatureCache ()
  func signature () -> UInt32
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBWeakEventSetElement
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBWeakEventSetElement : EBObject {

  fileprivate weak var mObserver : EBEvent? = nil { // SOULD BE WEAK
    didSet {
      if mObserver == nil, let object = mObject {
        object.mDictionary [mObserverObjectIndex] = nil
      }
    }
  }

  private weak var mObject : EBWeakEventSet? = nil // SOULD BE WEAK
  private var mObserverObjectIndex : Int
  private var mObserverRetainCount = 1

  //····················································································································
  
  init (object : EBWeakEventSet, observer : EBEvent) {
    mObserver = observer
    mObject = object
    mObserverObjectIndex = observer.mEasyBindingsObjectIndex
    super.init ()
  }

  //····················································································································
  
  final func retainObserver () {
    mObserverRetainCount += 1
  }

  //····················································································································
  
  final func releaseObserver () -> Int {
    mObserverRetainCount -= 1
    return mObserverRetainCount
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBWeakEventSet
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBWeakEventSet : EBObject, Sequence {
  fileprivate var mDictionary = [Int : EBWeakEventSetElement] ()

  //····················································································································
  
  func insert (_ inObserver : EBEvent) {
    let address : Int = inObserver.mEasyBindingsObjectIndex
    if let entry = mDictionary [address] {
      entry.retainObserver ()
    }else{
      mDictionary [address] = EBWeakEventSetElement (object:self, observer:inObserver)
    }
  }

  //····················································································································
  
  func remove (_ inObserver : EBEvent) {
    let address : Int = inObserver.mEasyBindingsObjectIndex
    if let entry = mDictionary [address] {
      if entry.releaseObserver () == 0 {
        mDictionary [address] = nil
      }
    }
  }

  //····················································································································

  func makeIterator () -> IndexingIterator <[EBEvent]> {
    var array = [EBEvent] ()
    for (_, entry) in mDictionary {
      if let observer = entry.mObserver {
        array.append(observer)
      }
    }
    return array.makeIterator ()
  }

  //····················································································································
  
  var count : Int {
    get {
      return mDictionary.count
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Extension Int : rotateLeft
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extension Int {
  mutating func rotateLeft () {
    let b0 = self >> 31
    let bl = self << 1
    self = b0 | bl
  }

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    EBShape
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBShape : Hashable, EBUserClassNameProtocol {

  //····················································································································
  //  Properties
  //····················································································································

  private var mShapes : [EBShape]
  private var mCachedBoundingBox : NSRect?

  //····················································································································
  //  init
  //····················································································································

  init () {
    mShapes = []
    mCachedBoundingBox = nil
    noteObjectAllocation (self)
  }

  //····················································································································

  init (shape inShape : EBShape) {
    mShapes = [inShape]
    mCachedBoundingBox = nil
    noteObjectAllocation (self)
  }

  //····················································································································

  init (shapes inShapes : [EBShape]) {
    mShapes = inShapes
    mCachedBoundingBox = nil
    noteObjectAllocation (self)
  }

  //····················································································································
  //  deinit
  //····················································································································

  deinit {
    noteObjectDeallocation (self)
  }

  //····················································································································
  //  append
  //····················································································································

  func append (shape inShape : EBShape) {
    self.mShapes.append (inShape)
    self.mCachedBoundingBox = nil
  }

  //····················································································································

  func append (shapes inShapes : [EBShape]) {
    self.mShapes += inShapes
    self.mCachedBoundingBox = nil
  }

  //····················································································································
  //  Transformed shape using NSAffineTransform object
  //····················································································································

  func transformedBy (_ inAffineTransform : NSAffineTransform) -> EBShape {
    let result = EBShape ()
    self.internalTransform (result, by: inAffineTransform)
    return result
  }

  //····················································································································

  fileprivate final func internalTransform (_ result : EBShape, by inAffineTransform : NSAffineTransform) {
    for shape in self.mShapes {
      result.append (shape: shape.transformedBy (inAffineTransform))
    }
  }

  //····················································································································
  //  Draw Rect
  //····················································································································

  func draw (_ inDirtyRect: NSRect) {
    for shape in self.mShapes {
      shape.draw (inDirtyRect)
    }
  }

  //····················································································································
  // boundingBox
  //····················································································································

  var boundingBox : NSRect {
    if let cbb = mCachedBoundingBox {
      return cbb
    }else{
      var r = NSZeroRect
      for shape in self.mShapes {
        r = r.union (shape.boundingBox)
      }
      self.mCachedBoundingBox = r
      return r
    }
  }

  //····················································································································
  //   intersects
  //····················································································································

  func intersects (rect inRect : NSRect) -> Bool {
    var result = false
    var idx = 0
    while (idx < self.mShapes.count) && !result {
      let shape = self.mShapes [idx]
      idx += 1
      result = shape.intersects (rect: inRect)
    }
    return result
  }

  //····················································································································
  //   Contains point
  //····················································································································

  func contains (point inPoint : NSPoint) -> Bool {
    for shape in self.mShapes {
      if shape.contains (point: inPoint) {
        return true
      }
    }
    return false
  }

  //····················································································································
  //   Knob Index
  //····················································································································

  func knobIndex (at inPoint : NSPoint) -> Int? {
    for shape in self.mShapes.reversed () {
      if let idx = shape.knobIndex (at: inPoint) {
        return idx
      }
    }
    return nil
  }

  //····················································································································
  /// Returns a Boolean value indicating whether two values are equal.
  ///
  /// Equality is the inverse of inequality. For any values `a` and `b`,
  /// `a == b` implies that `a != b` is `false`.
  ///
  /// - Parameters:
  ///   - lhs: A value to compare.
  ///   - rhs: Another value to compare.
  //····················································································································

  public static func == (lhs: EBShape, rhs: EBShape) -> Bool {
    return (lhs === rhs) || lhs.isEqualTo (rhs)
  }

  //····················································································································

  func isEqualTo (_ inOperand : EBShape) -> Bool {
    var equal = self.mShapes.count == inOperand.mShapes.count
    var idx = 0
    while (idx < self.mShapes.count) && equal {
      equal = self.mShapes [idx] == inOperand.mShapes [idx]
      idx += 1
    }
    return equal
  }

  //····················································································································
  /// The hash value.
  ///
  /// Hash values are not guaranteed to be equal across different executions of
  /// your program. Do not save hash values to use during a future execution.
  //····················································································································

  public var hashValue : Int {
    var h = 0
    for shape in self.mShapes {
      h.rotateLeft ()
      h ^= shape.hashValue
    }
    return h
  }

  //····················································································································

  func computeInvalidRect (_ inObjects : EBShape) -> NSRect {
    var invalidRect = NSZeroRect
    let commonCount = min (self.mShapes.count, inObjects.mShapes.count)
    var idx = 0
    while idx < commonCount {
      let currentObjet = self.mShapes [idx]
      let newObject = inObjects.mShapes [idx]
      if newObject != currentObjet {
        invalidRect = invalidRect.union (currentObjet.boundingBox)
        invalidRect = invalidRect.union (newObject.boundingBox)
      }
      idx += 1
    }
  //--- Enter in invalid rect removed objects
    while idx < self.mShapes.count {
      invalidRect = invalidRect.union (self.mShapes [idx].boundingBox)
      idx += 1
    }
  //--- Enter in invalid rect new objects
    idx = commonCount
    while idx < inObjects.mShapes.count {
      invalidRect = invalidRect.union (inObjects.mShapes [idx].boundingBox)
      idx += 1
    }
    return invalidRect
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    EBKnobShape
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum EBKnobKind {
  case rect
  case circ
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBKnobShape : EBShape {
  private let mKnobSize : CGFloat = 2.0
  private let mPoint : CGPoint
  private let mIndex : Int
  private let mKind : EBKnobKind

  //····················································································································
  //  Init
  //····················································································································

  init (at inPoint: CGPoint, index inIndex : Int, _ inKind : EBKnobKind) {
    mPoint = inPoint
    mIndex = inIndex
    mKind = inKind
    super.init ()
  }

  //····················································································································
  //  transformedBy
  //····················································································································

  override func transformedBy (_ inAffineTransform : NSAffineTransform) -> EBShape {
    let p = inAffineTransform.transform (self.mPoint)
    let result = EBKnobShape (at: p, index: self.mIndex, self.mKind)
    self.internalTransform (result, by: inAffineTransform)
    return result
  }

  //····················································································································
  // rect
  //····················································································································

  fileprivate var rect : NSRect {
    return NSRect (x: mPoint.x - mKnobSize / 2.0, y: mPoint.y - mKnobSize / 2.0, width: mKnobSize, height: mKnobSize)
  }

  //····················································································································
  // boundingBox (used for invalidating drawings)
  //····················································································································

  override var boundingBox : NSRect {
    return self.rect.insetBy (dx: -1.0, dy: -1.0)
  }

  //····················································································································
  //  Draw Rect
  //····················································································································

  override func draw (_ inDirtyRect: NSRect) {
    super.draw (inDirtyRect)
    let bp : NSBezierPath
    switch mKind {
    case .rect :
      bp = NSBezierPath (rect: self.rect)
    case .circ :
      bp = NSBezierPath (ovalIn: self.rect)
    }
    bp.lineWidth = 0.0
    bp.lineCapStyle = .round
    NSColor.white.setFill ()
    bp.fill ()
    NSColor.black.setStroke ()
    bp.stroke ()
  }

  //····················································································································
  //   Contains point
  //····················································································································

  override func contains (point inPoint : NSPoint) -> Bool {
    var result = self.rect.contains (inPoint)
    if !result {
      result = super.contains (point: inPoint)
    }
    return result
  }

  //····················································································································
  //   Knob Index
  //····················································································································

  override func knobIndex (at inPoint : NSPoint) -> Int? {
    if self.rect.contains (inPoint) {
      return self.mIndex
    }else{
      return super.knobIndex (at: inPoint)
    }
  }

  //····················································································································
  //   intersects
  //····················································································································

  override func intersects (rect inRect : NSRect) -> Bool {
    var result = self.rect.intersects (inRect)
    if !result {
      result = super.intersects (rect: inRect)
    }
    return result
  }

  //····················································································································
  //   isEqualTo
  //····················································································································

  override func isEqualTo (_ inOperand : EBShape) -> Bool {
    var equal = false
    if let operand = inOperand as? EBKnobShape {
      equal = self.mPoint == operand.mPoint
      if equal {
        equal = super.isEqualTo (inOperand)
      }
    }
    return equal
  }

  //····················································································································
  /// The hash value.
  ///
  /// Hash values are not guaranteed to be equal across different executions of
  /// your program. Do not save hash values to use during a future execution.
  //····················································································································

  override public var hashValue : Int {
    var h = super.hashValue
    h.rotateLeft ()
    h ^= self.mPoint.x.hashValue
    h.rotateLeft ()
    h ^= self.mPoint.y.hashValue
    return h
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    EBStrokeBezierPathShape
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBStrokeBezierPathShape : EBShape {
  private var mPaths : [NSBezierPath]
  private var mCGPaths : [CGPath?] // Computed lazily by contains (point:)
  private let mColor : NSColor
  private var mCachedBoundingBox : NSRect?

  //····················································································································
  //  Init
  //····················································································································

  init (_ inPaths: [NSBezierPath], _ inColor: NSColor) {
    mPaths = inPaths
    mCGPaths = [CGPath?](repeating: nil, count: inPaths.count)
    mColor = inColor
    super.init ()
  }

  //····················································································································
  //  append
  //····················································································································

  func append (path inBezierPath : NSBezierPath) {
    self.mPaths.append (inBezierPath)
    self.mCGPaths.append (nil)
    self.mCachedBoundingBox = nil
  }

  //····················································································································
  //  transformedBy
  //····················································································································

  override func transformedBy (_ inAffineTransform : NSAffineTransform) -> EBShape {
    var paths = [NSBezierPath] ()
    for path in self.mPaths {
      let bp = inAffineTransform.transform (path)
      paths.append (bp)
    }
    let result = EBStrokeBezierPathShape (paths, self.mColor)
    self.internalTransform (result, by: inAffineTransform)
    return result
  }

  //····················································································································
  //  Draw Rect
  //····················································································································

  override func draw (_ inDirtyRect: NSRect) {
    super.draw (inDirtyRect)
    self.mColor.setStroke ()
    for bp in self.mPaths {
      bp.stroke ()
    }
  }

  //····················································································································
  // boundingBox
  //····················································································································

  override var boundingBox : NSRect {
    if let cbb = mCachedBoundingBox {
      return cbb
    }else{
      var r = super.boundingBox
      for bp in self.mPaths {
        let lineWidth = max (bp.lineWidth, 1.0)
        r = r.union (bp.bounds.insetBy (dx: -lineWidth, dy: -lineWidth))
      }
      self.mCachedBoundingBox = r
      return r
    }
  }

  //····················································································································
  //   Contains point
  //····················································································································

  override func contains (point inPoint : NSPoint) -> Bool {
    var result = super.contains (point: inPoint)
    var idx = 0
    while (idx < self.mPaths.count) && !result {
      let cgPath : CGPath
      if let p = self.mCGPaths [idx] {
        cgPath = p
      }else{
        cgPath = self.mPaths [idx].pathByStroking
        self.mCGPaths [idx] = cgPath
      }
      result = cgPath.contains (inPoint, using: .winding)
      idx += 1
    }
    return result
  }

  //····················································································································
  //   intersects
  //····················································································································

  override func intersects (rect inRect : NSRect) -> Bool {
    var result = super.intersects (rect: inRect)
    var idx = 0
    while (idx < self.mPaths.count) && !result {
      let cgPath : CGPath
      if let p = self.mCGPaths [idx] {
        cgPath = p
      }else{
        cgPath = self.mPaths [idx].pathByStroking
        self.mCGPaths [idx] = cgPath
      }
      idx += 1
      result = cgPath.boundingBoxOfPath.intersects (inRect)
//      let r = cgPath.boundingBoxOfPath.intersection (inRect)
//      var p = CGPoint (x:r.minX, y:0.0)
//      while (p.x <= r.maxX) && !result {
//        p.y = r.minY
//        while (p.y <= r.maxY) && !result {
//          result = cgPath.contains (p)
//          p.y += 1.0
//        }
//        p.x += 1.0
//      }
    }
    return result
  }

  //····················································································································
  //   isEqualTo
  //····················································································································

  override func isEqualTo (_ inOperand : EBShape) -> Bool {
    var equal = false
    if let operand = inOperand as? EBStrokeBezierPathShape {
      equal = self.mPaths.count == operand.mPaths.count
      if equal {
        equal = super.isEqualTo (inOperand)
      }
      var idx = 0
      while (idx < self.mPaths.count) && equal {
        equal = self.mPaths [idx] == operand.mPaths [idx]
        idx += 1
      }
    }
    return equal
  }

  //····················································································································
  /// The hash value.
  ///
  /// Hash values are not guaranteed to be equal across different executions of
  /// your program. Do not save hash values to use during a future execution.
  //····················································································································

  override public var hashValue : Int {
    var h = super.hashValue
    h.rotateLeft ()
    h ^= mColor.hashValue
    for path in self.mPaths {
      h.rotateLeft ()
      h ^= path.hashValue
    }
    return h
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    EBFilledBezierPathShape
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBFilledBezierPathShape : EBShape {
  private var mPaths : [NSBezierPath]
  private var mCGPaths : [CGPath?] // Computed lazily by contains (point:)
  private let mColor : NSColor
  private var mCachedBoundingBox : NSRect?

  //····················································································································
  //  Init
  //····················································································································

  init (_ inPaths: [NSBezierPath], _ inColor: NSColor) {
    mPaths = inPaths
    mColor = inColor
    mCGPaths = [CGPath?] (repeating: nil, count: inPaths.count)
    super.init ()
  }

  //····················································································································
  //  append
  //····················································································································

  func append (_ inBezierPath : NSBezierPath) {
    self.mPaths.append (inBezierPath)
    self.mCGPaths.append (nil)
    self.mCachedBoundingBox = nil
  }

  //····················································································································
  //  transformedBy
  //····················································································································

  override func transformedBy (_ inAffineTransform : NSAffineTransform) -> EBShape {
    var paths = [NSBezierPath] ()
    for path in self.mPaths {
      let bp = inAffineTransform.transform (path)
      paths.append (bp)
    }
    let result = EBFilledBezierPathShape (paths, self.mColor)
    self.internalTransform (result, by: inAffineTransform)
    return result
  }

  //····················································································································
  //  Draw Rect
  //····················································································································

  override func draw (_ inDirtyRect: NSRect) {
    super.draw (inDirtyRect)
    self.mColor.setFill ()
    for bp in self.mPaths {
      bp.fill ()
    }
  }

  //····················································································································
  // boundingBox
  //····················································································································

  override var boundingBox : NSRect {
    if let cbb = mCachedBoundingBox {
      return cbb
    }else{
      var r = super.boundingBox
      for bp in self.mPaths {
        r = r.union (bp.bounds)
      }
      self.mCachedBoundingBox = r
      return r
    }
  }

  //····················································································································
  //   Contains point
  //····················································································································

  override func contains (point inPoint : NSPoint) -> Bool {
    var result = super.contains (point: inPoint)
    var idx = 0
    while (idx < self.mPaths.count) && !result {
      let cgPath : CGPath
      if let p = self.mCGPaths [idx] {
        cgPath = p
      }else{
        let bp = self.mPaths [idx]
        cgPath = bp.cgPath
        self.mCGPaths [idx] = cgPath
      }
      result = cgPath.contains (inPoint, using: .winding) // §§§ .winding à revoir
      idx += 1
    }
    return result
  }

  //····················································································································
  //   intersects
  //····················································································································

  override func intersects (rect inRect : NSRect) -> Bool {
    var result = super.intersects (rect: inRect)
    var idx = 0
    while (idx < self.mPaths.count) && !result {
      let cgPath : CGPath
      if let p = self.mCGPaths [idx] {
        cgPath = p
      }else{
        let bp = self.mPaths [idx]
        cgPath = bp.cgPath
        self.mCGPaths [idx] = cgPath
      }
      idx += 1
      result = cgPath.boundingBoxOfPath.intersects (inRect)
//      let r = cgPath.boundingBoxOfPath.intersection (inRect)
//      var p = CGPoint (x:r.minX, y:0.0)
//      while (p.x <= r.maxX) && !result {
//        p.y = r.minY
//        while (p.y <= r.maxY) && !result {
//          result = cgPath.contains (p)
//          p.y += 1.0
//        }
//        p.x += 1.0
//      }
    }
    return result
  }

  //····················································································································
  /// The hash value.
  ///
  /// Hash values are not guaranteed to be equal across different executions of
  /// your program. Do not save hash values to use during a future execution.
  //····················································································································

  override public var hashValue : Int {
    var h = super.hashValue
    h.rotateLeft ()
    h ^= mColor.hashValue
    for path in self.mPaths {
      h.rotateLeft ()
      h ^= path.hashValue
    }
    return h
  }

  //····················································································································
  //   isEqualTo
  //····················································································································

  override func isEqualTo (_ inOperand : EBShape) -> Bool {
    var equal = false
    if let operand = inOperand as? EBFilledBezierPathShape {
      equal = self.mPaths.count == operand.mPaths.count
      if equal {
        equal = super.isEqualTo (inOperand)
      }
      var idx = 0
      while (idx < self.mPaths.count) && equal {
        equal = self.mPaths [idx] == operand.mPaths [idx]
        idx += 1
      }
    }
    return equal
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    EBTextShape
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum EBTextHorizontalAlignment {
  case left
  case center
  case right
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum EBTextVerticalAlignment {
  case above
  case center
  case below
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBTextShape : EBShape {
  private let mString : String
  private let mOrigin : CGPoint
  private let mTextAttributes : [NSAttributedString.Key : Any]
  private let mSize : NSSize
  private var mCachedBoundingBox : NSRect? = nil

  //····················································································································
  //  Init
  //····················································································································

  init (_ inString: String,
        _ inOrigin : CGPoint,
        _ inTextAttributes : [NSAttributedString.Key : Any],
        _ inHorizontalAlignment : EBTextHorizontalAlignment,
        _ inVerticalAlignment : EBTextVerticalAlignment) {
    mString = inString
    mTextAttributes = inTextAttributes
    mSize = mString.size (withAttributes: mTextAttributes)
    var p = inOrigin
    switch inHorizontalAlignment {
    case .left :
      ()
    case .center :
      p.x -= self.mSize.width / 2.0
    case .right :
      p.x -= self.mSize.width
    }
    switch inVerticalAlignment {
    case .above :
      ()
    case .center :
      p.y -= self.mSize.height / 2.0
    case .below :
      p.y -= self.mSize.height
    }
    mOrigin = p
    super.init ()
  }

  //····················································································································
  //  transformedBy
  //····················································································································

  override func transformedBy (_ inAffineTransform : NSAffineTransform) -> EBShape {
//    var paths = [NSBezierPath] ()
//    for path in self.mPaths {
//      let bp = inAffineTransform.transform (path)
//      paths.append (bp)
//    }
//    let result = EBFilledBezierPathShape (paths, self.mColor)
//    self.internalTransform (result, by: inAffineTransform)
    return EBShape ()
  }

  //····················································································································
  //  Draw Rect
  //····················································································································

  override func draw (_ inDirtyRect: NSRect) {
    super.draw (inDirtyRect)
    mString.draw (at: mOrigin, withAttributes: mTextAttributes)
  }

  //····················································································································
  // boundingBox
  //····················································································································

  override var boundingBox : NSRect {
    if let cbb = mCachedBoundingBox {
      return cbb
    }else{
      var r = super.boundingBox
      let rText = NSRect (origin: mOrigin, size: mSize)
      r = r.union (rText)
      self.mCachedBoundingBox = r
      return r
    }
  }

  //····················································································································
  //   Contains point
  //····················································································································

  override func contains (point inPoint : NSPoint) -> Bool {
    var result = super.contains (point: inPoint)
    if !result {
      let rText = NSRect (origin: mOrigin, size: mSize)
      result = rText.contains (inPoint)
    }
    return result
  }

  //····················································································································
  //   intersects
  //····················································································································

  override func intersects (rect inRect : NSRect) -> Bool {
    var result = super.intersects (rect: inRect)
    if !result {
      let rText = NSRect (origin: mOrigin, size: mSize)
      result = rText.intersects (inRect)
    }
    return result
  }

  //····················································································································
  /// The hash value.
  ///
  /// Hash values are not guaranteed to be equal across different executions of
  /// your program. Do not save hash values to use during a future execution.
  //····················································································································

  override public var hashValue : Int {
    var h = super.hashValue
    h.rotateLeft ()
    h ^= mString.hashValue
    h.rotateLeft ()
    h ^= mOrigin.x.hashValue
    h.rotateLeft ()
    h ^= mOrigin.y.hashValue
    return h
  }

  //····················································································································
  //   isEqualTo
  //····················································································································

  override func isEqualTo (_ inOperand : EBShape) -> Bool {
    var equal = false
    if let operand = inOperand as? EBTextShape {
      equal = self.mString == operand.mString
      if equal {
        equal = self.mOrigin == operand.mOrigin
      }
    }
    return equal
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBAbstractProperty (abstract class)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBAbstractProperty : EBEvent {

  private final var mObservers = EBWeakEventSet ()
  
  //····················································································································

  final func addEBObserver (_ inObserver : EBEvent) {
    mObservers.insert (inObserver)
    updateObserverExplorer ()
    inObserver.postEvent ()
  }
 
  //····················································································································

  final func addEBObserversFrom (_ inObserverSet : EBWeakEventSet) {
    if inObserverSet.count > 0 {
      for observer in inObserverSet {
        mObservers.insert (observer)
      }
      updateObserverExplorer ()
    }
  }

  //····················································································································

  final func removeEBObserver (_ inObserver : EBEvent) {
    mObservers.remove (inObserver)
    updateObserverExplorer ()
  }

  //····················································································································

  final func removeEBObserversFrom (_ inObserverSet : EBWeakEventSet) {
    if inObserverSet.count > 0 {
      for observer in inObserverSet {
        mObservers.remove (observer)
      }
      updateObserverExplorer ()
    }
  }

  //····················································································································

  override func postEvent () {
    for object in mObservers {
      object.postEvent ()
    }
  }
  
  //····················································································································

  final var mObserverExplorer : NSPopUpButton? {
    didSet {
      updateObserverExplorer ()
    }
  }
  
  //····················································································································

  final func updateObserverExplorer () {
    if let observerExplorer = mObserverExplorer {
      observerExplorer.removeAllItems ()
      observerExplorer.addItem (withTitle: String (mObservers.count))
      observerExplorer.isEnabled = mObservers.count > 0
      for object : EBEvent in mObservers {
        let stringValue = explorerIndexString (object.mEasyBindingsObjectIndex) + object.className
        observerExplorer.addItem (withTitle: stringValue)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    EBObserver
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBObserver : EBAbstractProperty {
  private var mPostEventFunction : Optional < () -> Void > = nil
  
  //····················································································································

  func setPostEventFunction (_ function : Optional < () -> Void >) {
    mPostEventFunction = function
  }
  
  //····················································································································

  override func postEvent() {
    mPostEventFunction? ()
    super.postEvent ()
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   CRC computations for signature
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private let kTableCRC : [UInt32] = [
  0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3,
  0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91,
  0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,
  0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5,
  0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,
  0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,
  0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f,
  0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d,
  0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,
  0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,
  0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457,
  0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,
  0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb,
  0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9,
  0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,
  0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad,
  0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683,
  0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,
  0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7,
  0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,
  0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,
  0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79,
  0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f,
  0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,
  0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,
  0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21,
  0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,
  0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45,
  0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db,
  0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,
  0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf,
  0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d
]

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extension UInt32 {

  //····················································································································

  mutating func accumulateByte (_ byte : UInt8) {
    let idx = Int ((self ^ UInt32(byte)) & 0xff)
    self = (self >> 8) ^ kTableCRC [idx]
  }

  //····················································································································

  mutating func accumulateUInt32 (_ value : UInt32) {
    self.accumulateByte (UInt8 (value & 0xFF))
    self.accumulateByte (UInt8 ((value >>  8) & 0xFF))
    self.accumulateByte (UInt8 ((value >> 16) & 0xFF))
    self.accumulateByte (UInt8 (value >> 24))
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   presentErrorWindow
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

var gErrorWindows : [NSWindow] = []
var origin = NSPoint (x:20.0, y:20.0)

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func presentErrorWindow (file : String!,
                         line : Int,
                         errorMessage : String) {
  var message = ""
  message += "File: " + file + "\n"
  message += "Line: \(line)\n"
  message += "Message: " + errorMessage + "\n"
  let r = NSRect (origin:origin, size:NSSize (width:300.0, height:200.0))
  origin.x += 20.0 ;
  origin.y += 20.0 ;
  let window = NSWindow.init (
    contentRect:r,
    styleMask:[.titled, .closable],
    backing:NSWindow.BackingStoreType.buffered,
    defer:true
  )
  window.title = "Outlet Error"
  let contentView : NSView = window.contentView!
  let tfRect = NSInsetRect (contentView.bounds , 10.0, 10.0)
  let tf = NSTextField.init (frame:tfRect)
  tf.isEditable = false
  tf.isSelectable = true
  tf.font = NSFont.boldSystemFont (ofSize: 0.0)
  tf.textColor = NSColor.red
  tf.stringValue = message
  contentView.addSubview (tf)
  __NSBeep ()
  window.makeKeyAndOrderFront (nil)
  //---
  gErrorWindows.append (window)
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Array<T> extension
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extension Array {
  func objectAtIndex (_ index:Int, file:String, line:Int) -> Element {
    if index < 0 {
      NSLog ("Negative index %d in '%@' line %d", index, file, line)
    }else if index >= count {
      NSLog ("index %d >= count %d in '%@' line %d", index, count, file, line)
    }
    return self [index]
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    EBValidationResult
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum EBValidationResult <T> {
  case ok (T /* validated value */)
  case rejectWithBeep
  case rejectWithAlert (String /* informativeText */)
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    EBUserClassNameProtocol protocol
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBUserClassNameProtocol) protocol EBUserClassNameProtocol {
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    EBTableCellView
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBTableCellView : NSTableCellView, EBUserClassNameProtocol {
  final var mUnbindFunction : Optional < () -> Void > = nil

  //····················································································································

  required init? (coder: NSCoder) {
    super.init (coder:coder)
    noteObjectAllocation (self)
  }

  //····················································································································

  override init (frame:NSRect) {
    super.init (frame:frame)
    noteObjectAllocation (self)
  }
  
  //····················································································································
  
  deinit {
    mUnbindFunction? ()
    noteObjectDeallocation (self)
  }

  //····················································································································

  override func removeFromSuperview () {
   // NSLog ("\(#function)")
    mUnbindFunction? ()
    super.removeFromSuperview ()
  }

  //····················································································································
  
  override func removeFromSuperviewWithoutNeedingDisplay () {
   // NSLog ("\(#function)")
    mUnbindFunction? ()
    super.removeFromSuperviewWithoutNeedingDisplay ()
  }
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    EBObject class
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private var gEasyBindingsObjectIndex = 0

//······················································································································

class EBObject : NSObject, EBUserClassNameProtocol {
  let mEasyBindingsObjectIndex : Int

  //····················································································································

  override init () {
    mEasyBindingsObjectIndex = gEasyBindingsObjectIndex
    gEasyBindingsObjectIndex += 1
    super.init ()
    noteObjectAllocation (self)
  }

  //····················································································································
  
  deinit {
    noteObjectDeallocation (self)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    EBSimpleClass class
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBSimpleClass : EBObject {

  //····················································································································

  func populateExplorerWindow ( _ y : inout CGFloat, view : NSView) {
  }

  //····················································································································

  func clearObjectExplorer () {
  }

  //····················································································································

  func saveInto (dictionary : NSMutableDictionary) {
  }

  //····················································································································

  func setUp (withDictionary dictionary : NSDictionary) {
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBSimpleController
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBSimpleController : EBOutletEvent {
  private let mPrivateObservedObjects : [EBAbstractProperty]
  private let mPrivateOutlet : NSObject

  //····················································································································

  init (observedObjects : [EBAbstractProperty], outlet : NSObject) {
    mPrivateObservedObjects = observedObjects
    mPrivateOutlet = outlet
    super.init ()
    for object in observedObjects {
      object.addEBObserver (self)
    }
  }
  
  //····················································································································
  
  func unregister () {
    for object in mPrivateObservedObjects {
      object.removeEBObserver (self)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    createEntryForAttributeNamed
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

let EXPLORER_ROW_HEIGHT : CGFloat = 20.0
private let FIRST_COLUMN_WIDTH  : CGFloat = 60.0
private let SECOND_COLUMN_WIDTH : CGFloat = 400.0
private let THIRD_COLUMN_WIDTH  : CGFloat = 300.0

let EXPLORER_ROW_WIDTH : CGFloat = FIRST_COLUMN_WIDTH + SECOND_COLUMN_WIDTH + THIRD_COLUMN_WIDTH

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func titleColumn (_ y : CGFloat) -> NSRect {
  return NSRect (x:0.0, y:y, width:EXPLORER_ROW_WIDTH, height:EXPLORER_ROW_HEIGHT)
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func firstColumn (_ y : CGFloat) -> NSRect {
  return NSRect (x:0.0, y:y, width:FIRST_COLUMN_WIDTH, height:EXPLORER_ROW_HEIGHT)
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func secondColumn (_ y : CGFloat) -> NSRect {
  return NSRect (x:FIRST_COLUMN_WIDTH, y:y, width:SECOND_COLUMN_WIDTH, height:EXPLORER_ROW_HEIGHT)
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func thirdColumn (_ y : CGFloat) -> NSRect {
  return NSRect (x:FIRST_COLUMN_WIDTH + SECOND_COLUMN_WIDTH, y:y, width:THIRD_COLUMN_WIDTH, height:EXPLORER_ROW_HEIGHT)
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private let explorerLetters = ["A", "B", "C", "D", "E", "F", "G", "H", "J", "K", "L",
                               "M", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"]

func explorerIndexString (_ idx : Int) -> String {
  var result = String (idx % 10)
  var n = idx / 10
  result += String (n % 10)
  n /= 10
  result += explorerLetters [n % explorerLetters.count]
  n /= explorerLetters.count
  result += explorerLetters [n % explorerLetters.count]
  n /= explorerLetters.count
  result += explorerLetters [n % explorerLetters.count]
  n /= explorerLetters.count
  if n > 0 {
    result += String (n)
  }
  return result + " — "
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func createEntryForPropertyNamed (_ attributeName : String,
                                  idx : Int,
                                  y : inout CGFloat,
                                  view : NSView,
                                  observerExplorer : inout NSPopUpButton?,
                                  valueExplorer : inout NSTextField?) {
  let font = NSFont.boldSystemFont (ofSize: NSFont.smallSystemFontSize)
//--- Explorer popup button
  observerExplorer = NSPopUpButton (frame:firstColumn (y), pullsDown:true)
  observerExplorer?.font = font
  view.addSubview (observerExplorer!)
//--- Property textfield
  let tf = NSTextField (frame:secondColumn (y))
  tf.isEnabled = true
  tf.isEditable = false
  tf.stringValue = explorerIndexString (idx) + attributeName
  tf.font = font
  view.addSubview (tf)
//--- Value textfield
  valueExplorer = NSTextField (frame:thirdColumn (y))
  valueExplorer?.isEnabled = true
  valueExplorer?.isEditable = false
  valueExplorer?.font = font
  view.addSubview (valueExplorer!)
//--- Update rect origin
  y += EXPLORER_ROW_HEIGHT
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func createEntryForTitle (_ title : String,
                          y : inout CGFloat,
                          view : NSView) {
  let font = NSFont.boldSystemFont (ofSize: NSFont.smallSystemFontSize)
//--- Title textfield
  let tf = NSTextField (frame:titleColumn (y))
  tf.isEnabled = true
  tf.isEditable = false
  tf.stringValue = title
  tf.font = font
  tf.backgroundColor = NSColor.lightGray
  tf.drawsBackground = true
  tf.isBordered = false
  view.addSubview (tf)
//--- Update rect origin
  y += EXPLORER_ROW_HEIGHT
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    createEntryForObjectNamed
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func createEntryForObjectNamed (_ name : String,
                                object : EBObject,
                                y : inout CGFloat,
                                view : NSView) {
  let font = NSFont.boldSystemFont (ofSize: NSFont.smallSystemFontSize)
//--- Property textfield
  let tf = NSTextField (frame:secondColumn (y))
  tf.isEnabled = true
  tf.isEditable = false
  tf.stringValue = name
  tf.font = font
  view.addSubview (tf)
//--- Value textfield
  let vtf = NSTextField (frame:thirdColumn (y))
  vtf.isEnabled = true
  vtf.isEditable = false
  vtf.stringValue = explorerIndexString (object.mEasyBindingsObjectIndex) + String (describing: type(of: object))
  vtf.font = font
  view.addSubview (vtf)
//--- Update rect origin
  y += EXPLORER_ROW_HEIGHT
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    createEntryForToOneRelationshipNamed
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func createEntryForToOneRelationshipNamed (_ relationshipName : String,
                                           idx : Int,
                                           y : inout CGFloat,
                                           view : NSView,
                                           valueExplorer : inout NSButton?) {
  let font = NSFont.boldSystemFont (ofSize: NSFont.smallSystemFontSize)
  let tf = NSTextField (frame:secondColumn (y))
  tf.isEnabled = true
  tf.isEditable = false
  tf.stringValue = explorerIndexString (idx) + relationshipName
  tf.font = font
  view.addSubview (tf)
  valueExplorer = NSButton (frame:thirdColumn (y))
  valueExplorer?.font = font
  view.addSubview (valueExplorer!)
  y += EXPLORER_ROW_HEIGHT
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    createEntryForToManyRelationshipNamed
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func createEntryForToManyRelationshipNamed (_ relationshipName : String,
                                            idx : Int,
                                            y : inout CGFloat,
                                            view : NSView,
                                            valueExplorer : inout NSPopUpButton?) {
  let font = NSFont.boldSystemFont (ofSize: NSFont.smallSystemFontSize)
  let tf = NSTextField (frame:secondColumn (y))
  tf.isEnabled = true
  tf.isEditable = false
  tf.stringValue = explorerIndexString (idx) + relationshipName
  tf.font = font
  view.addSubview (tf)
  valueExplorer = NSPopUpButton (frame:thirdColumn (y), pullsDown:true)
  valueExplorer?.font = font
  view.addSubview (valueExplorer!)
  y += EXPLORER_ROW_HEIGHT
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    NSTExtView extension
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extension NSTextView {

  //····················································································································

  func displayAndScrollToEndOfText () {
    if let unwrappedLayoutManager = layoutManager {
      if let ts = unwrappedLayoutManager.textStorage {
        let endOfText = NSRange (location:ts.length, length:0)
        scrollRangeToVisible (endOfText)
        displayIfNeeded ()
      }
    }
  }

  //····················································································································

  func clear () {
    let str = NSAttributedString (string:"", attributes:nil)
    if let unwrappedLayoutManager = layoutManager {
      if let ts = unwrappedLayoutManager.textStorage {
        ts.setAttributedString (str)
      }
    }
  }

  //····················································································································

  func appendAttributedString (_ inAttributedString : NSAttributedString) {
    if let unwrappedLayoutManager = layoutManager {
      if let ts = unwrappedLayoutManager.textStorage {
        ts.append (inAttributedString)
        displayAndScrollToEndOfText ()
      }
    }
  }

  //····················································································································

  func appendMessageString (_ inString : String) {
    let attributes : [NSAttributedString.Key : NSObject] = [
      NSAttributedString.Key.font : NSFont.boldSystemFont (ofSize: NSFont.smallSystemFontSize),
      NSAttributedString.Key.foregroundColor : NSColor.black
    ]
    let str = NSAttributedString (string:inString, attributes:attributes)
    if let unwrappedLayoutManager = layoutManager {
      if let ts = unwrappedLayoutManager.textStorage {
        ts.append (str)
        displayAndScrollToEndOfText ()
      }
    }
  }

  //····················································································································

  func appendMessageString (_ inString : String, color:NSColor) {
    let attributes : [NSAttributedString.Key : NSObject] = [
      NSAttributedString.Key.font : NSFont.boldSystemFont (ofSize: NSFont.smallSystemFontSize),
      NSAttributedString.Key.foregroundColor : color
    ]
    let str = NSAttributedString (string:inString, attributes: attributes)
    if let unwrappedLayoutManager = layoutManager {
      if let ts = unwrappedLayoutManager.textStorage {
        ts.append (str)
        displayAndScrollToEndOfText ()
      }
    }
  }

  //····················································································································

  func appendErrorString (_ inString : String) {
    appendMessageString (inString, color:NSColor.red)
  }
  
  //····················································································································

  func appendWarningString (_ inString : String) {
    appendMessageString (inString, color:NSColor.orange)
  }

  //····················································································································

  func appendSuccessString (_ inString : String) {
    appendMessageString (inString, color:NSColor.blue)
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    defaultValidationFunction
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func defaultValidationFunction <T> (_ currentValue : T, proposedValue : T) -> EBValidationResult <T> {
  return EBValidationResult.ok (proposedValue)
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBSelection
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum EBSelection <T> {
  case empty
  case multiple
  case single (T)
  
  func kind () -> EBPropertyKind {
    switch self {
    case .empty : return .noSelectionKind
    case .multiple : return .multipleSelectionKind
    case .single : return .singleSelectionKind
    }
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum EBPropertyKind {
  case noSelectionKind
  case multipleSelectionKind
  case singleSelectionKind
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func &= ( left:inout EBPropertyKind, right:EBPropertyKind) {
  switch left {
  case .noSelectionKind : break
  case .multipleSelectionKind :
    if right == .noSelectionKind {
      left = .noSelectionKind
    }
  case .singleSelectionKind :
    switch right {
    case .noSelectionKind :
      left = .noSelectionKind
    case .multipleSelectionKind :
      left = .multipleSelectionKind
    case .singleSelectionKind :
      break
    }
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private func compareIntProperties (_ left:EBSelection <Int>,
                                   right:EBSelection <Int>,
                                   function : (Int, Int) -> Bool) -> EBSelection <Bool> {
  switch left {
  case .empty :
    return .empty
  case .multiple :
    switch right {
    case .empty :
      return .empty
    case .multiple, .single :
      return .multiple
    }
  case .single (let vg) :
    switch right {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let vd) :
      return .single (function (vg, vd))
    }
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func > (left:EBSelection<Int>, right:EBSelection<Int>) -> EBSelection<Bool> {
  return compareIntProperties (left, right: right, function: {$0 > $1})
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func >= (left:EBSelection<Int>, right:EBSelection<Int>) -> EBSelection<Bool> {
  return compareIntProperties (left, right: right, function: {$0 >= $1})
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func < (left:EBSelection<Int>, right:EBSelection<Int>) -> EBSelection<Bool> {
  return compareIntProperties (left, right: right, function: {$0 < $1})
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func <= (left:EBSelection<Int>, right:EBSelection<Int>) -> EBSelection<Bool> {
  return compareIntProperties (left, right: right, function: {$0 <= $1})
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func == (left:EBSelection<Int>, right:EBSelection<Int>) -> EBSelection<Bool> {
  return compareIntProperties (left, right: right, function: {$0 == $1})
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func != (left:EBSelection<Int>, right:EBSelection<Int>) -> EBSelection<Bool> {
  return compareIntProperties (left, right: right, function: {$0 != $1})
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private func combineBoolProperties (_ left:EBSelection<Bool>,
                                     right:EBSelection<Bool>,
                                     function : (Bool, Bool) -> Bool) -> EBSelection<Bool> {
  switch left {
  case .empty :
    return .empty
  case .multiple :
    switch right {
    case .empty :
      return .empty
    case .multiple, .single :
      return .multiple
    }
  case .single (let vg) :
    switch right {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let vd) :
      return .single (function (vg, vd))
    }
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func && (left:EBSelection<Bool>, right:EBSelection<Bool>) -> EBSelection<Bool> {
  return combineBoolProperties (left, right: right, function: {$0 && $1})
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func || (left:EBSelection<Bool>, right:EBSelection<Bool>) -> EBSelection<Bool> {
  return combineBoolProperties (left, right: right, function: {$0 || $1})
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func ^ (left:EBSelection<Bool>, right:EBSelection<Bool>) -> EBSelection<Bool> {
  return combineBoolProperties (left, right: right, function: {$0 != $1})
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

prefix func ! (operand:EBSelection<Bool>) -> EBSelection<Bool> {
  switch operand {
  case .empty :
    return .empty
  case .multiple :
    return .multiple
  case .single (let v) :
    return .single (!v)
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyAbstractArrayProperty
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyAbstractArrayProperty <T> : EBAbstractProperty {

  var prop : EBSelection < [T] > { get { return .empty } }

  //····················································································································

  final var count_property = EBTransientProperty_Int ()

  var count_property_selection : EBSelection <Int> {
    get {
      return self.count_property.prop
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  override func postEvent () {
    self.count_property.postEvent ()
    super.postEvent ()
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
