//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  EBSignatureObserverProtocol
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBSignatureObserverProtocol) protocol EBSignatureObserverProtocol {
  func clearSignatureCache ()
  func signature () -> UInt32
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBWeakObserverSetElement
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

fileprivate struct EBWeakObserverSetElement {

  //····················································································································

  private weak var mObserver : EBEvent? = nil // SOULD BE WEAK

  //····················································································································

  fileprivate var observer : EBEvent? { return self.mObserver }

  //····················································································································

  init (observer : EBEvent) {
    mObserver = observer
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBWeakEventSet
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct EBWeakEventSet {

  //····················································································································

  fileprivate var mDictionary = [Int : EBWeakObserverSetElement] ()

  //····················································································································

  mutating func insert (_ inObserver : EBEvent) {
    let address : Int = inObserver.ebObjectIndex
    self.mDictionary [address] = EBWeakObserverSetElement (observer:inObserver)
  }

  //····················································································································

  mutating func remove (_ inObserver : EBEvent) {
    let address : Int = inObserver.ebObjectIndex
    self.mDictionary [address] = nil
  }

  //····················································································································

  mutating func apply (_ inFunction : (_ : EBEvent) -> Void) {
    for (key, entry) in self.mDictionary {
      if let observer = entry.observer {
        inFunction (observer)
      }else{
        self.mDictionary [key] = nil
      }
    }
  }

  //····················································································································

  var count : Int {
    var n = 0
    for (_, entry) in self.mDictionary {
      if entry.observer != nil {
        n += 1
      }
    }
    return n
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBAbstractProperty (abstract class)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBAbstractProperty : EBEvent {

  private final var mObservers = EBWeakEventSet ()

  //····················································································································

  final func addEBObserver (_ inObserver : EBEvent) {
    self.mObservers.insert (inObserver)
    self.updateObserverExplorer ()
    inObserver.postEvent ()
  }

  //····················································································································

  final func addEBObserversFrom (_ inObserverSet : inout EBWeakEventSet) {
    inObserverSet.apply { (_ observer : EBEvent) in
      self.mObservers.insert (observer)
      observer.postEvent ()
    }
    self.updateObserverExplorer ()
  }

  //····················································································································

  final func removeEBObserver (_ inObserver : EBEvent) {
    self.mObservers.remove (inObserver)
    self.updateObserverExplorer ()
  }

  //····················································································································

  final func removeEBObserversFrom (_ inObserverSet : inout EBWeakEventSet) {
    inObserverSet.apply {(_ observer : EBEvent) in
      self.mObservers.remove (observer)
    }
    self.updateObserverExplorer ()
  }

  //····················································································································

  override func postEvent () {
    self.mObservers.apply ( {(_ observer : EBEvent) in observer.postEvent () })
  }

  //····················································································································

  final var mObserverExplorer : NSPopUpButton? {
    didSet {
      self.updateObserverExplorer ()
    }
  }

  //····················································································································

  final func updateObserverExplorer () {
    if let observerExplorer = self.mObserverExplorer {
      observerExplorer.removeAllItems ()
      let observerCount = self.mObservers.count
      observerExplorer.addItem (withTitle: String (observerCount))
      observerExplorer.isEnabled = observerCount > 0
      self.mObservers.apply ( {(_ observer : EBEvent) in
        let stringValue = explorerIndexString (observer.ebObjectIndex) + " — " + observer.className
        observerExplorer.addItem (withTitle: stringValue)
      })
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    EBObserver
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBObserver : EBAbstractProperty {
  private var mPostEventFunction : Optional < () -> Void > = nil

  //····················································································································

  func setPostEventFunction (_ function : Optional < () -> Void >) {
    self.mPostEventFunction = function
  }

  //····················································································································

  override func postEvent() {
    self.mPostEventFunction? ()
    super.postEvent ()
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   presentErrorWindow
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func presentErrorWindow (_ file : String,
                         _ line : Int,
                         _ errorMessage : String) {
  if Thread.isMainThread {
    presentErrorWindowInMainThread (file, line, errorMessage)
  }else{
    DispatchQueue.main.async { presentErrorWindowInMainThread (file, line, errorMessage) }
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

fileprivate var gErrorWindows : [NSWindow] = []
fileprivate var gOrigin = NSPoint (x: 20.0, y: 20.0)

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

fileprivate func presentErrorWindowInMainThread (_ file : String,
                                                 _ line : Int,
                                                 _ errorMessage : String) {
  var message = "File: \(file)\n"
  message += "Line: \(line)\n"
  message += "Message: \(errorMessage)\n"
  let r = NSRect (origin: gOrigin, size: NSSize (width: 300.0, height: 200.0))
  gOrigin.x += 20.0
  gOrigin.y += 20.0
  let window = NSWindow (
    contentRect: r,
    styleMask: [.titled, .closable],
    backing: .buffered,
    defer: true
  )
  window.title = "Outlet Error"
  let contentView : NSView = window.contentView!
  let tfRect = NSInsetRect (contentView.bounds, 10.0, 10.0)
  let tf = NSTextField (frame: tfRect)
  tf.isEditable = false
  tf.isSelectable = true
  tf.font = .boldSystemFont (ofSize: 0.0)
  tf.textColor = .red
  tf.stringValue = message
  contentView.addSubview (tf)
  window.makeKeyAndOrderFront (nil)
  gErrorWindows.append (window)
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   checkOutletConnection
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func checkOutletConnection (_ inOutlet : NSObject?,
                            _ inOutletName : String,
                            _ inOutletType : NSObject.Type,
                            _ inFile : String,
                            _ inLine : Int) {
  if let outlet : NSObject = inOutlet {
    if !(outlet.isKind (of: inOutletType.self)) {
      presentErrorWindow (inFile, inLine, "the '\(inOutletName)' outlet is not an instance of '\(inOutletType.self)'")
    }
  }else{
    presentErrorWindow (inFile, inLine, "the '\(inOutletName)' outlet is nil")
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    EBValidationResult
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum EBValidationResult <T> {
  case ok (T /* validated value */)
  case rejectWithBeep
  case rejectWithAlert (String /* informativeText */)
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    EBUserClassNameProtocol protocol
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(EBUserClassNameProtocol) protocol EBUserClassNameProtocol {
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    EBTableCellView
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBTableCellView : NSTableCellView, EBUserClassNameProtocol {
  final var mUnbindFunction : Optional < () -> Void > = nil

  //····················································································································

  required init? (coder : NSCoder) {
    super.init (coder: coder)
    noteObjectAllocation (self)
  }

  //····················································································································

  override init (frame : NSRect) {
    super.init (frame: frame)
    noteObjectAllocation (self)
  }

  //····················································································································

  deinit {
    noteObjectDeallocation (self)
  }

  //····················································································································

  override func removeFromSuperview () {
    super.removeFromSuperview ()
    if Thread.isMainThread {
      self.mUnbindFunction? ()
    }else{
      DispatchQueue.main.async { self.mUnbindFunction? () }
    }
  }

  //····················································································································

  override func removeFromSuperviewWithoutNeedingDisplay () {
    super.removeFromSuperviewWithoutNeedingDisplay ()
    if Thread.isMainThread {
      self.mUnbindFunction? ()
    }else{
      DispatchQueue.main.async { self.mUnbindFunction? () }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    EBObject class
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private var gEasyBindingsObjectIndex = 0

//······················································································································

class EBObject : NSObject, EBUserClassNameProtocol {
  let ebObjectIndex : Int

  //····················································································································

  override init () {
    ebObjectIndex = gEasyBindingsObjectIndex
    gEasyBindingsObjectIndex += 1
    super.init ()
    noteObjectAllocation (self)
  }

  //····················································································································

  deinit {
    noteObjectDeallocation (self)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBSimpleController
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBSimpleController : EBOutletEvent {

  //····················································································································

  private let mPrivateObservedObjects : [EBAbstractProperty]

  //····················································································································

  init (observedObjects : [EBAbstractProperty], callBack: @escaping () -> Void) {
    mPrivateObservedObjects = observedObjects
    super.init ()
    self.mEventCallBack = callBack
    for object in observedObjects {
      object.addEBObserver (self)
    }
  }

  //····················································································································

  func unregister () {
    for object in self.mPrivateObservedObjects {
      object.removeEBObserver (self)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    createEntryForAttributeNamed
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

let EXPLORER_ROW_HEIGHT : CGFloat = 20.0
private let FIRST_COLUMN_WIDTH  : CGFloat = 60.0
private let SECOND_COLUMN_WIDTH : CGFloat = 400.0
private let THIRD_COLUMN_WIDTH  : CGFloat = 300.0

let EXPLORER_ROW_WIDTH : CGFloat = FIRST_COLUMN_WIDTH + SECOND_COLUMN_WIDTH + THIRD_COLUMN_WIDTH

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func titleColumn (_ y : CGFloat) -> NSRect {
  return NSRect (x: 0.0, y: y, width: EXPLORER_ROW_WIDTH, height: EXPLORER_ROW_HEIGHT)
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func firstColumn (_ y : CGFloat) -> NSRect {
  return NSRect (x: 0.0, y: y, width: FIRST_COLUMN_WIDTH, height: EXPLORER_ROW_HEIGHT)
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func secondColumn (_ y : CGFloat) -> NSRect {
  return NSRect (x: FIRST_COLUMN_WIDTH, y: y, width: SECOND_COLUMN_WIDTH, height: EXPLORER_ROW_HEIGHT)
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func thirdColumn (_ y : CGFloat) -> NSRect {
  return NSRect (x: FIRST_COLUMN_WIDTH + SECOND_COLUMN_WIDTH, y: y, width: THIRD_COLUMN_WIDTH, height: EXPLORER_ROW_HEIGHT)
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private let explorerLetters = ["A", "B", "C", "D", "E", "F", "G", "H", "J", "K", "L",
                               "M", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"]

func explorerIndexString (_ idx : Int) -> String {
  var result = String (idx % 10)
  var n = idx / 10
  result += "\(n % 10)"
  n /= 10
  result += explorerLetters [n % explorerLetters.count]
  n /= explorerLetters.count
  result += explorerLetters [n % explorerLetters.count]
  n /= explorerLetters.count
  result += explorerLetters [n % explorerLetters.count]
  n /= explorerLetters.count
  if n > 0 {
    result += "\(n)"
  }
  return result
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func createEntryForPropertyNamed (_ attributeName : String,
                                  idx : Int,
                                  y ioY : inout CGFloat,
                                  view : NSView,
                                  observerExplorer ioObserverExplorer : inout NSPopUpButton?,
                                  valueExplorer ioValueExplorer : inout NSTextField?) {
  let font = NSFont.boldSystemFont (ofSize: NSFont.smallSystemFontSize)
//--- Explorer popup button
  let observerExplorer = NSPopUpButton (frame: firstColumn (ioY), pullsDown: true)
  ioObserverExplorer = observerExplorer
  observerExplorer.font = font
  view.addSubview (observerExplorer)
//--- Property textfield
  let tf = NSTextField (frame: secondColumn (ioY))
  tf.isEnabled = true
  tf.isEditable = false
  tf.stringValue = explorerIndexString (idx) + " — " + attributeName
  tf.font = font
  view.addSubview (tf)
//--- Value textfield
  let valueExplorer = NSTextField (frame: thirdColumn (ioY))
  ioValueExplorer = valueExplorer
  valueExplorer.isEnabled = true
  valueExplorer.isEditable = false
  valueExplorer.font = font
  view.addSubview (valueExplorer)
//--- Update rect origin
  ioY += EXPLORER_ROW_HEIGHT
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func createEntryForTitle (_ title : String,
                          y ioY : inout CGFloat,
                          view : NSView) {
  let font = NSFont.boldSystemFont (ofSize: NSFont.smallSystemFontSize)
//--- Title textfield
  let tf = NSTextField (frame:titleColumn (ioY))
  tf.isEnabled = true
  tf.isEditable = false
  tf.stringValue = title
  tf.font = font
  tf.backgroundColor = NSColor.lightGray
  tf.drawsBackground = true
  tf.isBordered = false
  view.addSubview (tf)
//--- Update rect origin
  ioY += EXPLORER_ROW_HEIGHT
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    createEntryForObjectNamed
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func createEntryForObjectNamed (_ name : String,
                                object : EBObject,
                                y ioY : inout CGFloat,
                                view : NSView) {
  let font = NSFont.boldSystemFont (ofSize: NSFont.smallSystemFontSize)
//--- Property textfield
  let tf = NSTextField (frame:secondColumn (ioY))
  tf.isEnabled = true
  tf.isEditable = false
  tf.stringValue = name
  tf.font = font
  view.addSubview (tf)
//--- Value textfield
  let vtf = NSTextField (frame:thirdColumn (ioY))
  vtf.isEnabled = true
  vtf.isEditable = false
  vtf.stringValue = explorerIndexString (object.ebObjectIndex) + " — " + String (describing: type(of: object))
  vtf.font = font
  view.addSubview (vtf)
//--- Update rect origin
  ioY += EXPLORER_ROW_HEIGHT
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    createEntryForToOneRelationshipNamed
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func createEntryForToOneRelationshipNamed (_ relationshipName : String,
                                           idx : Int,
                                           y ioY : inout CGFloat,
                                           view : NSView,
                                           valueExplorer ioValueExplorer : inout NSButton?) {
  let font = NSFont.boldSystemFont (ofSize: NSFont.smallSystemFontSize)
  let tf = NSTextField (frame: secondColumn (ioY))
  tf.isEnabled = true
  tf.isEditable = false
  tf.stringValue = explorerIndexString (idx) + " — " + relationshipName
  tf.font = font
  view.addSubview (tf)
  let valueExplorer = NSButton (frame: thirdColumn (ioY))
  ioValueExplorer = valueExplorer
  valueExplorer.font = font
  view.addSubview (valueExplorer)
  ioY += EXPLORER_ROW_HEIGHT
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    createEntryForToManyRelationshipNamed
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func createEntryForToManyRelationshipNamed (_ relationshipName : String,
                                            idx : Int,
                                            y ioY : inout CGFloat,
                                            view : NSView,
                                            valueExplorer ioValueExplorer : inout NSPopUpButton?) {
  let font = NSFont.boldSystemFont (ofSize: NSFont.smallSystemFontSize)
  let tf = NSTextField (frame:secondColumn (ioY))
  tf.isEnabled = true
  tf.isEditable = false
  tf.stringValue = explorerIndexString (idx) + " — " + relationshipName
  tf.font = font
  view.addSubview (tf)
  let valueExplorer = NSPopUpButton (frame: thirdColumn (ioY), pullsDown: true)
  ioValueExplorer = valueExplorer
  valueExplorer.font = font
  view.addSubview (valueExplorer)
  ioY += EXPLORER_ROW_HEIGHT
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    defaultValidationFunction
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func defaultValidationFunction <T> (_ currentValue : T, proposedValue : T) -> EBValidationResult <T> {
  return EBValidationResult.ok (proposedValue)
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   PropertyKind
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum PropertyKind { case empty ; case single ; case multiple }

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBSelection
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum EBSelection <T> : Equatable where T : Equatable {

  //····················································································································

  case empty
  case multiple
  case single (T)

  //····················································································································

  static func == (lhs : EBSelection <T>, rhs : EBSelection <T>) -> Bool {
    switch (lhs, rhs) {
    case (.empty, .empty) :
      return true
    case (.multiple, .multiple) :
      return true
    case (.single (let left), .single (let right)) :
      return left == right
    default :
      return false
    }
  }

  //····················································································································

  func kind () -> PropertyKind {
    switch self {
    case .empty : return .empty
    case .multiple : return .multiple
    case .single : return .single
    }
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func &= (left : inout PropertyKind, right : PropertyKind) {
  switch left {
  case .empty : break
  case .multiple :
    if right == .empty {
      left = .empty
    }
  case .single :
    switch right {
    case .empty :
      left = .empty
    case .multiple :
      left = .multiple
    case .single :
      break
    }
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

fileprivate func compareIntProperties (left : EBSelection <Int>,
                                       right : EBSelection <Int>,
                                       function : (Int, Int) -> Bool) -> EBSelection <Bool> {
  switch left {
  case .empty :
    return .empty
  case .multiple :
    switch right {
    case .empty :
      return .empty
    case .multiple, .single :
      return .multiple
    }
  case .single (let vg) :
    switch right {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let vd) :
      return .single (function (vg, vd))
    }
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func > (left : EBSelection <Int>, right : EBSelection <Int>) -> EBSelection <Bool> {
  return compareIntProperties (left: left, right: right) {$0 > $1}
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func >= (left : EBSelection <Int>, right : EBSelection <Int>) -> EBSelection <Bool> {
  return compareIntProperties (left: left, right: right) {$0 >= $1}
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func < (left : EBSelection <Int>, right : EBSelection <Int>) -> EBSelection <Bool> {
  return compareIntProperties (left: left, right: right) {$0 < $1}
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func <= (left : EBSelection <Int>, right : EBSelection<Int>) -> EBSelection <Bool> {
  return compareIntProperties (left: left, right: right) {$0 <= $1}
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func == (left : EBSelection <Int>, right : EBSelection <Int>) -> EBSelection <Bool> {
  return compareIntProperties (left: left, right: right) {$0 == $1}
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func != (left : EBSelection <Int>, right : EBSelection <Int>) -> EBSelection <Bool> {
  return compareIntProperties (left: left, right: right) {$0 != $1}
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

fileprivate func combineBoolProperties (left : EBSelection <Bool>,
                                        right : EBSelection <Bool>,
                                        function : (Bool, Bool) -> Bool) -> EBSelection <Bool> {
  switch left {
  case .empty :
    return .empty
  case .multiple :
    switch right {
    case .empty :
      return .empty
    case .multiple, .single :
      return .multiple
    }
  case .single (let vg) :
    switch right {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let vd) :
      return .single (function (vg, vd))
    }
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func && (left : EBSelection <Bool>, right : EBSelection <Bool>) -> EBSelection <Bool> {
  return combineBoolProperties (left: left, right: right, function: {$0 && $1})
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func || (left : EBSelection <Bool>, right : EBSelection <Bool>) -> EBSelection <Bool> {
  return combineBoolProperties (left: left, right: right, function: {$0 || $1})
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func ^ (left : EBSelection <Bool>, right : EBSelection <Bool>) -> EBSelection <Bool> {
  return combineBoolProperties (left: left, right: right, function: {$0 != $1})
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

prefix func ! (operand : EBSelection <Bool>) -> EBSelection <Bool> {
  switch operand {
  case .empty :
    return .empty
  case .multiple :
    return .multiple
  case .single (let v) :
    return .single (!v)
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyAbstractGenericRelationshipProperty
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyAbstractGenericRelationshipProperty : EBAbstractProperty {

  //····················································································································
  //  Data clients
  //····················································································································

  private var mClients = Set <ReadOnlyAbstractGenericRelationshipProperty> ()

  //····················································································································

  final internal func attachClient (_ inClient : ReadOnlyAbstractGenericRelationshipProperty) {
    self.mClients.insert (inClient)
    inClient.notifyModelDidChange ()
  }

  //····················································································································

  final internal func detachClient (_ inClient : ReadOnlyAbstractGenericRelationshipProperty) {
    self.mClients.remove (inClient)
  }

  //····················································································································

  internal func notifyModelDidChange () {
    for client in self.mClients {
      client.notifyModelDidChange ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyAbstractObjectProperty
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyAbstractObjectProperty <T : Hashable> : ReadOnlyAbstractGenericRelationshipProperty {

  //····················································································································
  //   Undo manager
  //····················································································································

  weak var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

  //····················································································································
  // Abstract methods
  //····················································································································

  var prop : EBSelection < T? > { get { return .empty } }  // Abstract method

  //····················································································································

  var propval : T? { return nil } // Abstract method

  //····················································································································
  //  Internal value
  //····················································································································

  internal var mInternalValue : T? = nil {
    didSet {
      if self.mInternalValue != oldValue {
        if (self.mInternalValue == nil) != (oldValue == nil) {
          self.none_property.postEvent ()
        }
        self.postEvent ()
        self.notifyModelDidChangeFrom (oldValue: oldValue)
        self.notifyModelDidChange ()
      }
    }
  }

  //····················································································································

  internal func notifyModelDidChangeFrom (oldValue inOldValue : T?) {
  }

  //····················································································································
  //  none property
  //····················································································································

  final var none_property = EBTransientProperty_Bool ()

  final var none_property_selection : EBSelection <Bool> { return self.none_property.prop }

  //····················································································································
  //  init
  //····················································································································

  override init () {
    super.init ()
    self.none_property.mReadModelFunction = { [weak self] in
      if let me = self {
        switch me.prop {
        case .empty :
          return .single (false)
        case .multiple :
          return .multiple
        case .single :
          return .single (true)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyAbstractArrayProperty
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyAbstractArrayProperty <T : Hashable> : ReadOnlyAbstractGenericRelationshipProperty {

  //····················································································································
  //   Undo manager
  //····················································································································

  weak var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

  //····················································································································
  // Abstract methods
  //····················································································································

  var prop : EBSelection < [T] > { get { return .empty } }  // Abstract method

  //····················································································································

  var propval : [T] { return [] } // Abstract method

  //····················································································································

  final var propset : Set <T> { return self.mInternalSetValue } // § Useful ???

  //····················································································································
  //  Internal value
  //····················································································································

  var internalSetValue : Set <T> { return self.mInternalSetValue }

  private var mInternalSetValue = Set <T> () // Requires T to be hashable

  internal var mInternalArrayValue = [T] () {
    didSet {
      if self.mInternalArrayValue != oldValue {
        if self.mInternalArrayValue.count != oldValue.count {
          self.count_property.postEvent ()
        }
        self.postEvent ()
        self.notifyModelDidChangeFrom (oldValue: oldValue)
        self.notifyModelDidChange ()
        let newSet = Set (self.mInternalArrayValue)
        if self.mInternalSetValue != newSet {
          let oldSet = self.mInternalSetValue
          self.mInternalSetValue = newSet
          let removedSet = oldSet.subtracting (newSet)
          let addedSet = newSet.subtracting (oldSet)
          self.updateObservers (removedSet: removedSet, addedSet: addedSet)
        }
      }
    }
  }

  //····················································································································

  internal func notifyModelDidChangeFrom (oldValue inOldValue : [T]) {
  }

  //····················································································································

  internal func updateObservers (removedSet inRemovedSet : Set <T>, addedSet inAddedSet : Set <T>) {
  }

  //····················································································································
  //  count property
  //····················································································································

  final var count_property = EBTransientProperty_Int ()

  final var count_property_selection : EBSelection <Int> { return self.count_property.prop }

  //····················································································································
  //  init
  //····················································································································

  override init () {
    super.init ()
    self.count_property.mReadModelFunction = { [weak self] in
      if let me = self {
        switch me.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Data extension: comparable
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extension Data : Comparable {

  //····················································································································

  static public func < (_ left : Data, _ right : Data) -> Bool {
    var result = left.count < right.count
    if left.count == right.count {
      var idx = 0
      while (idx < right.count) && !result {
        result = left [idx] < right [idx]
        idx += 1
      }
    }
    return result
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
